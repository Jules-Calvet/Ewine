
Test_Multi_ToF_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a20c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0801a34c  0801a34c  0002a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a5d8  0801a5d8  0002a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a5e0  0801a5e0  0002a5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a5e4  0801a5e4  0002a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000008  0801a5e8  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000085d8  200000f0  0801a6cc  000300f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200086c8  0801a6cc  000386c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005e671  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006346  00000000  00000000  0008e78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d10  00000000  00000000  00094ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a68  00000000  00000000  000977e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002db3b  00000000  00000000  0009a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000340ba  00000000  00000000  000c7d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00110267  00000000  00000000  000fbe45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020c0ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca4c  00000000  00000000  0020c0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f0 	.word	0x200000f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a334 	.word	0x0801a334

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f4 	.word	0x200000f4
 800017c:	0801a334 	.word	0x0801a334

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d4:	f023 0218 	bic.w	r2, r3, #24
 80005d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000614:	68fb      	ldr	r3, [r7, #12]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f014 fd4d 	bl	80150c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f80b 	bl	8000644 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062e:	f000 f87f 	bl	8000730 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8c3 	bl	80007bc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000636:	f000 f899 	bl	800076c <MX_USB_PCD_Init>
  MX_TOF_Init();
 800063a:	f018 fcbb 	bl	8018fb4 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 800063e:	f018 fcbf 	bl	8018fc0 <MX_TOF_Process>
 8000642:	e7fc      	b.n	800063e <main+0x1c>

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09a      	sub	sp, #104	; 0x68
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2248      	movs	r2, #72	; 0x48
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f018 fdf0 	bl	8019238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800066a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000678:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800067a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	f023 0303 	bic.w	r3, r3, #3
 8000684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f016 f827 	bl	80166e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff96 	bl	80005c4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xe8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xe8>)
 80006a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xe8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006b4:	2327      	movs	r3, #39	; 0x27
 80006b6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	; 0x60
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f016 fb91 	bl	8016e08 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006ec:	f000 f8ae 	bl	800084c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006f0:	236f      	movs	r3, #111	; 0x6f
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2101      	movs	r1, #1
 8000710:	4618      	mov	r0, r3
 8000712:	f016 feed 	bl	80174f0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800071c:	f000 f896 	bl	800084c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000720:	f017 fca8 	bl	8018074 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000724:	bf00      	nop
 8000726:	3768      	adds	r7, #104	; 0x68
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58000400 	.word	0x58000400

08000730 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2250      	movs	r2, #80	; 0x50
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f018 fd7b 	bl	8019238 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f017 fb18 	bl	8017d88 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800075e:	f000 f875 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 8000772:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <MX_USB_PCD_Init+0x4c>)
 8000774:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 8000778:	2208      	movs	r2, #8
 800077a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 800077e:	2202      	movs	r2, #2
 8000780:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 8000784:	2202      	movs	r2, #2
 8000786:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_USB_PCD_Init+0x48>)
 80007a2:	f015 fe9a 	bl	80164da <HAL_PCD_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007ac:	f000 f84e 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000010c 	.word	0x2000010c
 80007b8:	40006800 	.word	0x40006800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	2004      	movs	r0, #4
 80007d2:	f7ff ff0d 	bl	80005f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2002      	movs	r0, #2
 80007d8:	f7ff ff0a 	bl	80005f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff07 	bl	80005f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2008      	movs	r0, #8
 80007e4:	f7ff ff04 	bl	80005f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2123      	movs	r1, #35	; 0x23
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_GPIO_Init+0x84>)
 80007ee:	f015 f85d 	bl	80158ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	2310      	movs	r3, #16
 80007f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_GPIO_Init+0x88>)
 8000804:	f014 fdec 	bl	80153e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000808:	2323      	movs	r3, #35	; 0x23
 800080a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0x84>)
 800081e:	f014 fddf 	bl	80153e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000822:	2303      	movs	r3, #3
 8000824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x8c>)
 8000834:	f014 fdd4 	bl	80153e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800
 8000848:	48000c00 	.word	0x48000c00

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>

08000856 <LL_AHB2_GRP1_EnableClock>:
{
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800085e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800086e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ac:	68fb      	ldr	r3, [r7, #12]
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	; 0x70
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2250      	movs	r2, #80	; 0x50
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f018 fca5 	bl	8019238 <memset>
  if(hpcd->Instance==USB)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <HAL_PCD_MspInit+0xa8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d136      	bne.n	8000966 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80008fe:	2318      	movs	r3, #24
 8000900:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000906:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800090c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800090e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000912:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000918:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800091a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f017 fa2f 	bl	8017d88 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000930:	f7ff ff8c 	bl	800084c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff ff8e 	bl	8000856 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800093a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800094c:	230a      	movs	r3, #10
 800094e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f014 fd41 	bl	80153e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800095e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000962:	f7ff ff91 	bl	8000888 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3770      	adds	r7, #112	; 0x70
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40006800 	.word	0x40006800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f014 fbda 	bl	8015178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <LL_AHB2_GRP1_EnableClock>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4313      	orrs	r3, r2
 80009de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ec:	68fb      	ldr	r3, [r7, #12]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <LL_APB1_GRP1_EnableClock>:
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a42:	4013      	ands	r3, r2
 8000a44:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <BSP_I2C1_Init+0x70>)
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <BSP_I2C1_Init+0x74>)
 8000a62:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <BSP_I2C1_Init+0x78>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <BSP_I2C1_Init+0x78>)
 8000a6c:	600a      	str	r2, [r1, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d122      	bne.n	8000ab8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <BSP_I2C1_Init+0x70>)
 8000a74:	f015 f9ee 	bl	8015e54 <HAL_I2C_GetState>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11c      	bne.n	8000ab8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <BSP_I2C1_Init+0x70>)
 8000a80:	f000 f8ee 	bl	8000c60 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d116      	bne.n	8000ab8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <BSP_I2C1_Init+0x70>)
 8000a8c:	f000 f8a4 	bl	8000bd8 <MX_I2C1_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000a96:	f06f 0307 	mvn.w	r3, #7
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	e00c      	b.n	8000ab8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <BSP_I2C1_Init+0x70>)
 8000aa2:	f015 fc83 	bl	80163ac <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000aac:	f06f 0307 	mvn.w	r3, #7
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e001      	b.n	8000ab8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000400 	.word	0x20000400
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	20000454 	.word	0x20000454

08000ad0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <BSP_I2C1_DeInit+0x48>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d014      	beq.n	8000b0c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <BSP_I2C1_DeInit+0x48>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <BSP_I2C1_DeInit+0x48>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <BSP_I2C1_DeInit+0x48>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <BSP_I2C1_DeInit+0x4c>)
 8000af6:	f000 f8f7 	bl	8000ce8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <BSP_I2C1_DeInit+0x4c>)
 8000afc:	f014 ff7d 	bl	80159fa <HAL_I2C_DeInit>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000b06:	f06f 0307 	mvn.w	r3, #7
 8000b0a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000454 	.word	0x20000454
 8000b1c:	20000400 	.word	0x20000400

08000b20 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	88f9      	ldrh	r1, [r7, #6]
 8000b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <BSP_I2C1_Send+0x50>)
 8000b42:	f014 ff9d 	bl	8015a80 <HAL_I2C_Master_Transmit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00c      	beq.n	8000b66 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <BSP_I2C1_Send+0x50>)
 8000b4e:	f015 f98f 	bl	8015e70 <HAL_I2C_GetError>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d003      	beq.n	8000b60 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000b58:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e002      	b.n	8000b66 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b60:	f06f 0303 	mvn.w	r3, #3
 8000b64:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000400 	.word	0x20000400

08000b74 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4613      	mov	r3, r2
 8000b82:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	88f9      	ldrh	r1, [r7, #6]
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <BSP_I2C1_Recv+0x50>)
 8000b96:	f015 f867 	bl	8015c68 <HAL_I2C_Master_Receive>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00c      	beq.n	8000bba <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <BSP_I2C1_Recv+0x50>)
 8000ba2:	f015 f965 	bl	8015e70 <HAL_I2C_GetError>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d003      	beq.n	8000bb4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000bac:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e002      	b.n	8000bba <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000bb4:	f06f 0303 	mvn.w	r3, #3
 8000bb8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000400 	.word	0x20000400

08000bc8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000bcc:	f014 fae8 	bl	80151a0 <HAL_GetTick>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_I2C1_Init+0x80>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00300F38;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x84>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f014 fe5e 	bl	80158dc <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f015 fbbd 	bl	80163ac <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f015 fbff 	bl	8016442 <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	00300f38 	.word	0x00300f38

08000c60 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09c      	sub	sp, #112	; 0x70
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2250      	movs	r2, #80	; 0x50
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f018 fae1 	bl	8019238 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c76:	2304      	movs	r3, #4
 8000c78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f017 f87f 	bl	8017d88 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fe9c 	bl	80009c8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000ca6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <I2C1_MspInit+0x84>)
 8000cae:	f014 fb97 	bl	80153e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000cc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <I2C1_MspInit+0x84>)
 8000cd0:	f014 fb86 	bl	80153e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cd8:	f7ff fe8f 	bl	80009fa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3770      	adds	r7, #112	; 0x70
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cf0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cf4:	f7ff fe9a 	bl	8000a2c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <I2C1_MspDeInit+0x2c>)
 8000cfe:	f014 fcdf 	bl	80156c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <I2C1_MspDeInit+0x2c>)
 8000d08:	f014 fcda 	bl	80156c0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	48000400 	.word	0x48000400

08000d18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e00a      	b.n	8000d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2a:	f3af 8000 	nop.w
 8000d2e:	4601      	mov	r1, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf0      	blt.n	8000d2a <_read+0x12>
  }

  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e009      	b.n	8000d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f014 f94b 	bl	8015008 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf1      	blt.n	8000d64 <_write+0x12>
  }
  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f018 f9d0 	bl	80191c8 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20030000 	.word	0x20030000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000458 	.word	0x20000458
 8000e5c:	200086c8 	.word	0x200086c8

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <SystemInit+0x98>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <SystemInit+0x98>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e88:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e8c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <SystemInit+0x9c>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eaa:	f023 0305 	bic.w	r3, r3, #5
 8000eae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <SystemInit+0xa0>)
 8000ecc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <SystemInit+0xa0>)
 8000ed4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	faf6fefb 	.word	0xfaf6fefb
 8000f00:	22041000 	.word	0x22041000

08000f04 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f08:	3304      	adds	r3, #4

08000f0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f0e:	d3f9      	bcc.n	8000f04 <CopyDataInit>
  bx lr
 8000f10:	4770      	bx	lr

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f12:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f14:	3004      	adds	r0, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f16:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
  bx lr
 8000f1a:	4770      	bx	lr

08000f1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff ff9e 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <LoopForever+0x6>)
 8000f26:	490c      	ldr	r1, [pc, #48]	; (8000f58 <LoopForever+0xa>)
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <LoopForever+0xe>)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f7ff ffed 	bl	8000f0a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <LoopForever+0x12>)
 8000f32:	490c      	ldr	r1, [pc, #48]	; (8000f64 <LoopForever+0x16>)
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <LoopForever+0x1a>)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f7ff ffe7 	bl	8000f0a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <LoopForever+0x1e>)
 8000f3e:	490c      	ldr	r1, [pc, #48]	; (8000f70 <LoopForever+0x22>)
 8000f40:	2300      	movs	r3, #0
 8000f42:	f7ff ffe8 	bl	8000f16 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f46:	f018 f945 	bl	80191d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f4a:	f7ff fb6a 	bl	8000622 <main>

08000f4e <LoopForever>:

LoopForever:
  b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200000ec 	.word	0x200000ec
 8000f5c:	0801a5e8 	.word	0x0801a5e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f60:	20030000 	.word	0x20030000
 8000f64:	20030000 	.word	0x20030000
 8000f68:	0801a6cc 	.word	0x0801a6cc
  INIT_BSS _sbss, _ebss
 8000f6c:	200000f0 	.word	0x200000f0
 8000f70:	200086c8 	.word	0x200086c8

08000f74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_IRQHandler>

08000f76 <LL_AHB2_GRP1_EnableClock>:
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <VL53L1A2_Init+0xe4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	4934      	ldr	r1, [pc, #208]	; (800108c <VL53L1A2_Init+0xe4>)
 8000fba:	600a      	str	r2, [r1, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d154      	bne.n	800106a <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8000fc0:	f000 f8d4 	bl	800116c <_I2cFailRecover>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8000fcc:	f7ff fd42 	bl	8000a54 <BSP_I2C1_Init>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d147      	bne.n	800106e <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2086      	movs	r0, #134	; 0x86
 8000fe6:	f000 f953 	bl	8001290 <_ExpanderRd>
 8000fea:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d13f      	bne.n	8001072 <VL53L1A2_Init+0xca>
 8000ff2:	783b      	ldrb	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d13c      	bne.n	8001072 <VL53L1A2_Init+0xca>
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b16      	cmp	r3, #22
 8000ffc:	d139      	bne.n	8001072 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8000ffe:	463a      	mov	r2, r7
 8001000:	2302      	movs	r3, #2
 8001002:	2100      	movs	r1, #0
 8001004:	2084      	movs	r0, #132	; 0x84
 8001006:	f000 f943 	bl	8001290 <_ExpanderRd>
 800100a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d131      	bne.n	8001076 <VL53L1A2_Init+0xce>
 8001012:	783b      	ldrb	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d12e      	bne.n	8001076 <VL53L1A2_Init+0xce>
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b16      	cmp	r3, #22
 800101c:	d12b      	bne.n	8001076 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <VL53L1A2_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001024:	23ff      	movs	r3, #255	; 0xff
 8001026:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800102c:	463a      	mov	r2, r7
 800102e:	2302      	movs	r3, #2
 8001030:	2114      	movs	r1, #20
 8001032:	2086      	movs	r0, #134	; 0x86
 8001034:	f000 f95e 	bl	80012f4 <_ExpanderWR>
 8001038:	6078      	str	r0, [r7, #4]

	  if (status)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11c      	bne.n	800107a <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001044:	23bf      	movs	r3, #191	; 0xbf
 8001046:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001048:	463a      	mov	r2, r7
 800104a:	2302      	movs	r3, #2
 800104c:	2114      	movs	r1, #20
 800104e:	2084      	movs	r0, #132	; 0x84
 8001050:	f000 f950 	bl	80012f4 <_ExpanderWR>
 8001054:	6078      	str	r0, [r7, #4]

	  if (status)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d110      	bne.n	800107e <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <VL53L1A2_Init+0xe8>)
 800105e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001062:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001064:	f000 f8f4 	bl	8001250 <_ExpandersSetAllIO>
 8001068:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800106a:	bf00      	nop
 800106c:	e008      	b.n	8001080 <VL53L1A2_Init+0xd8>
      goto done_err;
 800106e:	bf00      	nop
 8001070:	e006      	b.n	8001080 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001072:	bf00      	nop
 8001074:	e004      	b.n	8001080 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8001076:	bf00      	nop
 8001078:	e002      	b.n	8001080 <VL53L1A2_Init+0xd8>
		goto done_err;
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <VL53L1A2_Init+0xd8>
		goto done_err;
 800107e:	bf00      	nop
  return status;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000045c 	.word	0x2000045c
 8001090:	20000460 	.word	0x20000460

08001094 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d037      	beq.n	800111a <VL53L1A2_ResetId+0x86>
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	dc4e      	bgt.n	800114c <VL53L1A2_ResetId+0xb8>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01a      	beq.n	80010e8 <VL53L1A2_ResetId+0x54>
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d14a      	bne.n	800114c <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010b8:	78db      	ldrb	r3, [r3, #3]
 80010ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010c2:	70da      	strb	r2, [r3, #3]

      if (state)
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010cc:	78db      	ldrb	r3, [r3, #3]
 80010ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010d6:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80010d8:	2301      	movs	r3, #1
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <VL53L1A2_ResetId+0xd0>)
 80010dc:	2113      	movs	r1, #19
 80010de:	2084      	movs	r0, #132	; 0x84
 80010e0:	f000 f908 	bl	80012f4 <_ExpanderWR>
 80010e4:	60f8      	str	r0, [r7, #12]
      break;
 80010e6:	e035      	b.n	8001154 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010f4:	705a      	strb	r2, [r3, #1]

      if (state)
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 8001108:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800110a:	2301      	movs	r3, #1
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <VL53L1A2_ResetId+0xd4>)
 800110e:	2113      	movs	r1, #19
 8001110:	2086      	movs	r0, #134	; 0x86
 8001112:	f000 f8ef 	bl	80012f4 <_ExpanderWR>
 8001116:	60f8      	str	r0, [r7, #12]
      break;
 8001118:	e01c      	b.n	8001154 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 8001126:	705a      	strb	r2, [r3, #1]

      if (state)
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <VL53L1A2_ResetId+0xcc>)
 800113a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800113c:	2301      	movs	r3, #1
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <VL53L1A2_ResetId+0xd4>)
 8001140:	2113      	movs	r1, #19
 8001142:	2086      	movs	r0, #134	; 0x86
 8001144:	f000 f8d6 	bl	80012f4 <_ExpanderWR>
 8001148:	60f8      	str	r0, [r7, #12]
      break;
 800114a:	e003      	b.n	8001154 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	60fb      	str	r3, [r7, #12]
      goto done;
 8001152:	e000      	b.n	8001156 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001154:	bf00      	nop
  return status;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000460 	.word	0x20000460
 8001164:	20000463 	.word	0x20000463
 8001168:	20000461 	.word	0x20000461

0800116c <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <_I2cFailRecover+0xdc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	e05e      	b.n	8001240 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff fef7 	bl	8000f76 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8001188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800118e:	2311      	movs	r3, #17
 8001190:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	482c      	ldr	r0, [pc, #176]	; (800124c <_I2cFailRecover+0xe0>)
 800119c:	f014 f920 	bl	80153e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80011a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011a6:	2311      	movs	r3, #17
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4826      	ldr	r0, [pc, #152]	; (800124c <_I2cFailRecover+0xe0>)
 80011b4:	f014 f914 	bl	80153e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4823      	ldr	r0, [pc, #140]	; (800124c <_I2cFailRecover+0xe0>)
 80011c0:	f014 fb74 	bl	80158ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4820      	ldr	r0, [pc, #128]	; (800124c <_I2cFailRecover+0xe0>)
 80011cc:	f014 fb6e 	bl	80158ac <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	75fb      	strb	r3, [r7, #23]
 80011d4:	e014      	b.n	8001200 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011dc:	481b      	ldr	r0, [pc, #108]	; (800124c <_I2cFailRecover+0xe0>)
 80011de:	f014 fb65 	bl	80158ac <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f013 fff4 	bl	80151d0 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <_I2cFailRecover+0xe0>)
 80011f0:	f014 fb5c 	bl	80158ac <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f013 ffeb 	bl	80151d0 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	3301      	adds	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b09      	cmp	r3, #9
 8001204:	d9e7      	bls.n	80011d6 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	3301      	adds	r3, #1
 800120a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800120c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001210:	480e      	ldr	r0, [pc, #56]	; (800124c <_I2cFailRecover+0xe0>)
 8001212:	f014 fb33 	bl	801587c <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_I2cFailRecover+0xb6>
 800121c:	7dbb      	ldrb	r3, [r7, #22]
 800121e:	2b06      	cmp	r3, #6
 8001220:	d9d6      	bls.n	80011d0 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <_I2cFailRecover+0xe0>)
 8001228:	f014 fb28 	bl	801587c <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	e003      	b.n	8001240 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <_I2cFailRecover+0xdc>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000464 	.word	0x20000464
 800124c:	48000400 	.word	0x48000400

08001250 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001256:	2302      	movs	r3, #2
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <_ExpandersSetAllIO+0x38>)
 800125a:	2112      	movs	r1, #18
 800125c:	2086      	movs	r0, #134	; 0x86
 800125e:	f000 f849 	bl	80012f4 <_ExpanderWR>
 8001262:	6078      	str	r0, [r7, #4]

  if (status)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800126a:	2302      	movs	r3, #2
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <_ExpandersSetAllIO+0x3c>)
 800126e:	2112      	movs	r1, #18
 8001270:	2084      	movs	r0, #132	; 0x84
 8001272:	f000 f83f 	bl	80012f4 <_ExpanderWR>
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	e000      	b.n	800127c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800127a:	bf00      	nop

done_err:
  return status;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000460 	.word	0x20000460
 800128c:	20000462 	.word	0x20000462

08001290 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	f107 0213 	add.w	r2, r7, #19
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <_ExpanderRd+0x60>)
 80012b4:	f014 fbe4 	bl	8015a80 <HAL_I2C_Master_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	617b      	str	r3, [r7, #20]

    if (status)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d110      	bne.n	80012e4 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b299      	uxth	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	fb00 f303 	mul.w	r3, r0, r3
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <_ExpanderRd+0x60>)
 80012da:	f014 fcc5 	bl	8015c68 <HAL_I2C_Master_Receive>
 80012de:	4603      	mov	r3, r0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e000      	b.n	80012e6 <_ExpanderRd+0x56>
      break;
 80012e4:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80012e6:	697b      	ldr	r3, [r7, #20]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000400 	.word	0x20000400

080012f4 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	3301      	adds	r3, #1
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f017 ff82 	bl	801921c <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	b299      	uxth	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	3301      	adds	r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	f107 0214 	add.w	r2, r7, #20
 8001328:	2064      	movs	r0, #100	; 0x64
 800132a:	9000      	str	r0, [sp, #0]
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <_ExpanderWR+0x4c>)
 800132e:	f014 fba7 	bl	8015a80 <HAL_I2C_Master_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001338:	4618      	mov	r0, r3
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000400 	.word	0x20000400

08001344 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d903      	bls.n	800135a <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001352:	f06f 0301 	mvn.w	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e014      	b.n	8001384 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800135a:	f7ff fe25 	bl	8000fa8 <VL53L1A2_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001364:	f06f 0303 	mvn.w	r3, #3
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e00b      	b.n	8001384 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 800136c:	2101      	movs	r1, #1
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8d6 	bl	8001520 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001374:	2100      	movs	r1, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f8d2 	bl	8001520 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f90f 	bl	80015a0 <VL53L1CB_Probe>
 8001382:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d903      	bls.n	80013a8 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013a0:	f06f 0301 	mvn.w	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e012      	b.n	80013ce <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	4610      	mov	r0, r2
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da03      	bge.n	80013ca <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80013c2:	f06f 0304 	mvn.w	r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000474 	.word	0x20000474
 80013dc:	20000468 	.word	0x20000468

080013e0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d903      	bls.n	80013f8 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013f0:	f06f 0301 	mvn.w	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e012      	b.n	800141e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	490b      	ldr	r1, [pc, #44]	; (800142c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	4610      	mov	r0, r2
 800140a:	4798      	blx	r3
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	da03      	bge.n	800141a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001412:	f06f 0304 	mvn.w	r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e001      	b.n	800141e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000474 	.word	0x20000474
 800142c:	20000468 	.word	0x20000468

08001430 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d903      	bls.n	8001448 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001440:	f06f 0301 	mvn.w	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e012      	b.n	800146e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4610      	mov	r0, r2
 800145a:	4798      	blx	r3
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	da03      	bge.n	800146a <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001462:	f06f 0304 	mvn.w	r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000474 	.word	0x20000474
 800147c:	20000468 	.word	0x20000468

08001480 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d903      	bls.n	8001498 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001490:	f06f 0301 	mvn.w	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e012      	b.n	80014be <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	4610      	mov	r0, r2
 80014aa:	4798      	blx	r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da03      	bge.n	80014ba <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80014b2:	f06f 0304 	mvn.w	r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e001      	b.n	80014be <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000474 	.word	0x20000474
 80014cc:	20000468 	.word	0x20000468

080014d0 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d903      	bls.n	80014e8 <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014e0:	f06f 0301 	mvn.w	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e012      	b.n	800150e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	490b      	ldr	r1, [pc, #44]	; (800151c <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	4610      	mov	r0, r2
 80014fa:	4798      	blx	r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da03      	bge.n	800150a <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001502:	f06f 0304 	mvn.w	r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000474 	.word	0x20000474
 800151c:	20000468 	.word	0x20000468

08001520 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d903      	bls.n	8001538 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001530:	f06f 0301 	mvn.w	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e02e      	b.n	8001596 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d112      	bne.n	8001564 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fda5 	bl	8001094 <VL53L1A2_ResetId>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	da03      	bge.n	8001558 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001550:	f06f 0303 	mvn.w	r3, #3
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e01e      	b.n	8001596 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001558:	2002      	movs	r0, #2
 800155a:	f013 fe39 	bl	80151d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e018      	b.n	8001596 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d112      	bne.n	8001590 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd8f 	bl	8001094 <VL53L1A2_ResetId>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	da03      	bge.n	8001584 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800157c:	f06f 0303 	mvn.w	r3, #3
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e008      	b.n	8001596 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001584:	2002      	movs	r0, #2
 8001586:	f013 fe23 	bl	80151d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e002      	b.n	8001596 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001590:	f06f 0301 	mvn.w	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 80015a8:	2352      	movs	r3, #82	; 0x52
 80015aa:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <VL53L1CB_Probe+0xf0>)
 80015ae:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <VL53L1CB_Probe+0xf4>)
 80015b2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <VL53L1CB_Probe+0xf8>)
 80015b6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <VL53L1CB_Probe+0xfc>)
 80015ba:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <VL53L1CB_Probe+0x100>)
 80015be:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f642 2290 	movw	r2, #10896	; 0x2a90
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <VL53L1CB_Probe+0x104>)
 80015cc:	4413      	add	r3, r2
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f013 f824 	bl	8014622 <VL53L1CB_RegisterBusIO>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015e0:	f06f 0304 	mvn.w	r3, #4
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	e04d      	b.n	8001684 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f642 2290 	movw	r2, #10896	; 0x2a90
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a2c      	ldr	r2, [pc, #176]	; (80016a4 <VL53L1CB_Probe+0x104>)
 80015f4:	4413      	add	r3, r2
 80015f6:	f107 0208 	add.w	r2, r7, #8
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f013 f8cc 	bl	801479a <VL53L1CB_ReadID>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001608:	f06f 0304 	mvn.w	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	e039      	b.n	8001684 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001616:	4293      	cmp	r3, r2
 8001618:	d003      	beq.n	8001622 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800161a:	f06f 0306 	mvn.w	r3, #6
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	e030      	b.n	8001684 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <VL53L1CB_Probe+0x108>)
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <VL53L1CB_Probe+0x10c>)
 8001626:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f642 2290 	movw	r2, #10896	; 0x2a90
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <VL53L1CB_Probe+0x104>)
 8001634:	441a      	add	r2, r3
 8001636:	491e      	ldr	r1, [pc, #120]	; (80016b0 <VL53L1CB_Probe+0x110>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <VL53L1CB_Probe+0x108>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	491a      	ldr	r1, [pc, #104]	; (80016b0 <VL53L1CB_Probe+0x110>)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800164c:	4610      	mov	r0, r2
 800164e:	4798      	blx	r3
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001656:	f06f 0304 	mvn.w	r3, #4
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	e012      	b.n	8001684 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <VL53L1CB_Probe+0x108>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4912      	ldr	r1, [pc, #72]	; (80016b0 <VL53L1CB_Probe+0x110>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800166c:	4911      	ldr	r1, [pc, #68]	; (80016b4 <VL53L1CB_Probe+0x114>)
 800166e:	4610      	mov	r0, r2
 8001670:	4798      	blx	r3
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001678:	f06f 0304 	mvn.w	r3, #4
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
 800167e:	e001      	b.n	8001684 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001686:	4618      	mov	r0, r3
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	08000a55 	.word	0x08000a55
 8001694:	08000ad1 	.word	0x08000ad1
 8001698:	08000b21 	.word	0x08000b21
 800169c:	08000b75 	.word	0x08000b75
 80016a0:	08000bc9 	.word	0x08000bc9
 80016a4:	20000488 	.word	0x20000488
 80016a8:	20000474 	.word	0x20000474
 80016ac:	20000038 	.word	0x20000038
 80016b0:	20000468 	.word	0x20000468
 80016b4:	20000478 	.word	0x20000478

080016b8 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80016c4:	793b      	ldrb	r3, [r7, #4]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d808      	bhi.n	80016dc <CheckValidRectRoi+0x24>
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d805      	bhi.n	80016dc <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80016d0:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	d802      	bhi.n	80016dc <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d901      	bls.n	80016e0 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80016dc:	23fc      	movs	r3, #252	; 0xfc
 80016de:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 80016e0:	793a      	ldrb	r2, [r7, #4]
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d803      	bhi.n	80016f0 <CheckValidRectRoi+0x38>
 80016e8:	797a      	ldrb	r2, [r7, #5]
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d201      	bcs.n	80016f4 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80016f0:	23fc      	movs	r3, #252	; 0xfc
 80016f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3318      	adds	r3, #24
 8001718:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001720:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	2101      	movs	r1, #1
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f012 fd7d 	bl	801422c <VL53L1_WrByte>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001740:	b2da      	uxtb	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001766:	2101      	movs	r1, #1
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f002 fc56 	bl	800401a <VL53L1_data_init>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3318      	adds	r3, #24
 800177e:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001786:	3308      	adds	r3, #8
 8001788:	220c      	movs	r2, #12
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f017 fd53 	bl	8019238 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	73bb      	strb	r3, [r7, #14]
 80017aa:	e012      	b.n	80017d2 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d112      	bne.n	80017da <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fc90 	bl	80020e2 <VL53L1_SetLimitCheckEnable>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	3301      	adds	r3, #1
 80017d0:	73bb      	strb	r3, [r7, #14]
 80017d2:	7bbb      	ldrb	r3, [r7, #14]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d9e9      	bls.n	80017ac <VL53L1_DataInit+0x5a>
 80017d8:	e000      	b.n	80017dc <VL53L1_DataInit+0x8a>
		else
			break;
 80017da:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 80017dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 80017e4:	2102      	movs	r1, #2
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f005 faef 	bl	8006dca <VL53L1_set_dmax_mode>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80017f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800180e:	2203      	movs	r2, #3
 8001810:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001814:	2320      	movs	r3, #32
 8001816:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7bba      	ldrb	r2, [r7, #14]
 800181c:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 800181e:	2101      	movs	r1, #1
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f947 	bl	8001ab4 <VL53L1_SetPresetMode>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 800182a:	2102      	movs	r1, #2
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f98b 	bl	8001b48 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 800183e:	2100      	movs	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 fe69 	bl	8003518 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800185e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f011 ffa1 	bl	80137aa <VL53L1_poll_for_boot_completion>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	603a      	str	r2, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	460b      	mov	r3, r1
 8001886:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800188c:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <ComputeDevicePresetMode+0x138>)
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4611      	mov	r1, r2
 8001896:	8019      	strh	r1, [r3, #0]
 8001898:	3302      	adds	r3, #2
 800189a:	0c12      	lsrs	r2, r2, #16
 800189c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 800189e:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <ComputeDevicePresetMode+0x13c>)
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	4611      	mov	r1, r2
 80018a8:	8019      	strh	r1, [r3, #0]
 80018aa:	3302      	adds	r3, #2
 80018ac:	0c12      	lsrs	r2, r2, #16
 80018ae:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <ComputeDevicePresetMode+0x140>)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4611      	mov	r1, r2
 80018ba:	8019      	strh	r1, [r3, #0]
 80018bc:	3302      	adds	r3, #2
 80018be:	0c12      	lsrs	r2, r2, #16
 80018c0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 80018c2:	4a3e      	ldr	r2, [pc, #248]	; (80019bc <ComputeDevicePresetMode+0x144>)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4611      	mov	r1, r2
 80018cc:	8019      	strh	r1, [r3, #0]
 80018ce:	3302      	adds	r3, #2
 80018d0:	0c12      	lsrs	r2, r2, #16
 80018d2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80018d4:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <ComputeDevicePresetMode+0x148>)
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4611      	mov	r1, r2
 80018de:	8019      	strh	r1, [r3, #0]
 80018e0:	3302      	adds	r3, #2
 80018e2:	0c12      	lsrs	r2, r2, #16
 80018e4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d002      	beq.n	80018f8 <ComputeDevicePresetMode+0x80>
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <ComputeDevicePresetMode+0x86>
 80018f6:	e005      	b.n	8001904 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	77bb      	strb	r3, [r7, #30]
		break;
 80018fc:	e004      	b.n	8001908 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	77bb      	strb	r3, [r7, #30]
		break;
 8001902:	e001      	b.n	8001908 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3b01      	subs	r3, #1
 800190c:	2b08      	cmp	r3, #8
 800190e:	d845      	bhi.n	800199c <ComputeDevicePresetMode+0x124>
 8001910:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <ComputeDevicePresetMode+0xa0>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	0800194d 	.word	0x0800194d
 800191c:	0800195d 	.word	0x0800195d
 8001920:	0800196d 	.word	0x0800196d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	0800199d 	.word	0x0800199d
 800192c:	0800199d 	.word	0x0800199d
 8001930:	0800198d 	.word	0x0800198d
 8001934:	0800197d 	.word	0x0800197d
 8001938:	08001995 	.word	0x08001995
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800193c:	7fbb      	ldrb	r3, [r7, #30]
 800193e:	3320      	adds	r3, #32
 8001940:	443b      	add	r3, r7
 8001942:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	701a      	strb	r2, [r3, #0]
		break;
 800194a:	e029      	b.n	80019a0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 800194c:	7fbb      	ldrb	r3, [r7, #30]
 800194e:	3320      	adds	r3, #32
 8001950:	443b      	add	r3, r7
 8001952:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	701a      	strb	r2, [r3, #0]
		break;
 800195a:	e021      	b.n	80019a0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 800195c:	7fbb      	ldrb	r3, [r7, #30]
 800195e:	3320      	adds	r3, #32
 8001960:	443b      	add	r3, r7
 8001962:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	701a      	strb	r2, [r3, #0]
		break;
 800196a:	e019      	b.n	80019a0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800196c:	7fbb      	ldrb	r3, [r7, #30]
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	701a      	strb	r2, [r3, #0]
		break;
 800197a:	e011      	b.n	80019a0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800197c:	7fbb      	ldrb	r3, [r7, #30]
 800197e:	3320      	adds	r3, #32
 8001980:	443b      	add	r3, r7
 8001982:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	701a      	strb	r2, [r3, #0]
		break;
 800198a:	e009      	b.n	80019a0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2211      	movs	r2, #17
 8001990:	701a      	strb	r2, [r3, #0]
		break;
 8001992:	e005      	b.n	80019a0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2227      	movs	r2, #39	; 0x27
 8001998:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 800199a:	e001      	b.n	80019a0 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800199c:	23f8      	movs	r3, #248	; 0xf8
 800199e:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 80019a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3724      	adds	r7, #36	; 0x24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	0801a378 	.word	0x0801a378
 80019b4:	0801a37c 	.word	0x0801a37c
 80019b8:	0801a380 	.word	0x0801a380
 80019bc:	0801a384 	.word	0x0801a384
 80019c0:	0801a388 	.word	0x0801a388

080019c4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	72fb      	strb	r3, [r7, #11]
 80019d2:	4613      	mov	r3, r2
 80019d4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d002      	beq.n	80019f8 <SetPresetMode+0x34>
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d103      	bne.n	8001a00 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019fe:	e002      	b.n	8001a06 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001a00:	2320      	movs	r3, #32
 8001a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001a06:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001a0a:	7ab9      	ldrb	r1, [r7, #10]
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff32 	bl	8001878 <ComputeDevicePresetMode>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001a1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d112      	bne.n	8001a48 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001a22:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001a26:	f107 001c 	add.w	r0, r7, #28
 8001a2a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f002 ffaf 	bl	80049a0 <VL53L1_get_preset_mode_timing_cfg>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d112      	bne.n	8001a76 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001a50:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001a54:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001a56:	69fd      	ldr	r5, [r7, #28]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	9102      	str	r1, [sp, #8]
 8001a60:	9201      	str	r2, [sp, #4]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	462b      	mov	r3, r5
 8001a66:	4622      	mov	r2, r4
 8001a68:	4601      	mov	r1, r0
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f003 f8ee 	bl	8004c4c <VL53L1_set_preset_mode>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001a76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a84:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a94:	461a      	mov	r2, r3
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8001aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}

08001ab4 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f00c f94a 	bl	800dd62 <VL53L1_low_power_auto_data_init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d101      	bne.n	8001adc <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8001adc:	7bba      	ldrb	r2, [r7, #14]
 8001ade:	78f9      	ldrb	r1, [r7, #3]
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff6d 	bl	80019c4 <SetPresetMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d117      	bne.n	8001b26 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d005      	beq.n	8001b08 <VL53L1_SetPresetMode+0x54>
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d002      	beq.n	8001b08 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d107      	bne.n	8001b18 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001b08:	f24a 0128 	movw	r1, #41000	; 0xa028
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8a9 	bl	8001c64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e006      	b.n	8001b26 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001b18:	f248 2135 	movw	r1, #33333	; 0x8235
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8a1 	bl	8001c64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8001b2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fa68 	bl	8002008 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0a2      	sub	sp, #136	; 0x88
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b6c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001b70:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001b74:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d105      	bne.n	8001b88 <VL53L1_SetDistanceMode+0x40>
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d002      	beq.n	8001b88 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001b82:	f06f 0303 	mvn.w	r3, #3
 8001b86:	e069      	b.n	8001c5c <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d008      	beq.n	8001ba0 <VL53L1_SetDistanceMode+0x58>
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d005      	beq.n	8001ba0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d002      	beq.n	8001ba0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001b9a:	f06f 0303 	mvn.w	r3, #3
 8001b9e:	e05d      	b.n	8001c5c <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8001ba0:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f002 fede 	bl	8004970 <VL53L1_get_zone_config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001bc2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10b      	bne.n	8001be2 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001bca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bce:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001bd2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f002 fd8a 	bl	80046f0 <VL53L1_get_timeouts_us>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8001be2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fee5 	bl	80019c4 <SetPresetMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8001c00:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c0e:	461a      	mov	r2, r3
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001c16:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001c1e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f002 fd2a 	bl	800467e <VL53L1_set_timeouts_us>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8001c30:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001c38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001c3e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f002 fe4c 	bl	80048ea <VL53L1_set_zone_config>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8001c58:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3788      	adds	r7, #136	; 0x88
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8001c8a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	; (8001e64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d902      	bls.n	8001c9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001c94:	23fc      	movs	r3, #252	; 0xfc
 8001c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8001c9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001ca2:	f107 031a 	add.w	r3, r7, #26
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2105      	movs	r1, #5
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fb9a 	bl	80023e4 <VL53L1_GetSequenceStepEnable>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001cbe:	f107 0319 	add.w	r3, r7, #25
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2106      	movs	r1, #6
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fb8c 	bl	80023e4 <VL53L1_GetSequenceStepEnable>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10b      	bne.n	8001cf2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	f107 010c 	add.w	r1, r7, #12
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f002 fd02 	bl	80046f0 <VL53L1_get_timeouts_us>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8001cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 80a0 	bne.w	8001e3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d02:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001d06:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8001d10:	7efb      	ldrb	r3, [r7, #27]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d861      	bhi.n	8001ddc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001dc5 	.word	0x08001dc5
 8001d24:	08001dc5 	.word	0x08001dc5
 8001d28:	08001d61 	.word	0x08001d61
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001ddd 	.word	0x08001ddd
 8001d34:	08001ddd 	.word	0x08001ddd
 8001d38:	08001dd1 	.word	0x08001dd1
 8001d3c:	08001d87 	.word	0x08001d87
 8001d40:	08001dc5 	.word	0x08001dc5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001d44:	7ebb      	ldrb	r3, [r7, #26]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d002      	beq.n	8001d50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8001d4a:	7e7b      	ldrb	r3, [r7, #25]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d103      	bne.n	8001d58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8001d50:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8001d56:	e044      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8001d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001d5e:	e040      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001d66:	7ebb      	ldrb	r3, [r7, #26]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d002      	beq.n	8001d72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8001d6c:	7e7b      	ldrb	r3, [r7, #25]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d103      	bne.n	8001d7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8001d72:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	e002      	b.n	8001d80 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8001d7a:	f245 4360 	movw	r3, #21600	; 0x5460
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001d84:	e02d      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8001d8c:	23f5      	movs	r3, #245	; 0xf5
 8001d8e:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	461a      	mov	r2, r3
 8001d96:	f248 0188 	movw	r1, #32904	; 0x8088
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f005 f88c 	bl	8006eb8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dd07      	ble.n	8001db6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	22f5      	movs	r2, #245	; 0xf5
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	4413      	add	r3, r2
 8001db4:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001dc2:	e00e      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8001dc4:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8001dca:	2306      	movs	r3, #6
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001dce:	e008      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001dda:	e002      	b.n	8001de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001ddc:	23f8      	movs	r3, #248	; 0xf8
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d803      	bhi.n	8001df2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8001dea:	23fc      	movs	r3, #252	; 0xfc
 8001dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001df0:	e003      	b.n	8001dfa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001df8:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8001dfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11c      	bne.n	8001e3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d203      	bcs.n	8001e12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8001e0a:	23fc      	movs	r3, #252	; 0xfc
 8001e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e10:	e00d      	b.n	8001e2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f002 fc2b 	bl	800467e <VL53L1_set_timeouts_us>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8001e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8001e3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	00086470 	.word	0x00086470
 8001e64:	00989680 	.word	0x00989680

08001e68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8001e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001e9e:	f107 031b 	add.w	r3, r7, #27
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa9c 	bl	80023e4 <VL53L1_GetSequenceStepEnable>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8001eb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001eba:	f107 031a 	add.w	r3, r7, #26
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2106      	movs	r1, #6
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fa8e 	bl	80023e4 <VL53L1_GetSequenceStepEnable>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8001ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	f107 0214 	add.w	r2, r7, #20
 8001ede:	f107 010c 	add.w	r1, r7, #12
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f002 fc04 	bl	80046f0 <VL53L1_get_timeouts_us>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8001eee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d179      	bne.n	8001fea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001efc:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8001f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d869      	bhi.n	8001fe2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001fc1 	.word	0x08001fc1
 8001f18:	08001fc1 	.word	0x08001fc1
 8001f1c:	08001f5b 	.word	0x08001f5b
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001fe3 	.word	0x08001fe3
 8001f28:	08001fe3 	.word	0x08001fe3
 8001f2c:	08001fd3 	.word	0x08001fd3
 8001f30:	08001f83 	.word	0x08001f83
 8001f34:	08001fc1 	.word	0x08001fc1
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001f38:	7efb      	ldrb	r3, [r7, #27]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d002      	beq.n	8001f44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8001f3e:	7ebb      	ldrb	r3, [r7, #26]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8001f4e:	e04d      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001f58:	e048      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001f5a:	7efb      	ldrb	r3, [r7, #27]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d002      	beq.n	8001f66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8001f60:	7ebb      	ldrb	r3, [r7, #26]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8001f6c:	3334      	adds	r3, #52	; 0x34
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8001f72:	e03b      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001f7a:	3330      	adds	r3, #48	; 0x30
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001f80:	e034      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8001f82:	23f5      	movs	r3, #245	; 0xf5
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f248 0188 	movw	r1, #32904	; 0x8088
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f004 ff91 	bl	8006eb8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	dd07      	ble.n	8001fac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	22f5      	movs	r2, #245	; 0xf5
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	4413      	add	r3, r2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8001fb2:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001fbe:	e015      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001fd0:	e00c      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001fdc:	3308      	adds	r3, #8
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001fe0:	e004      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001fe2:	23f8      	movs	r3, #248	; 0xf8
 8001fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fe8:	e000      	b.n	8001fec <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8001fea:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8001fec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001ffa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3730      	adds	r7, #48	; 0x30
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4413      	add	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f002 facc 	bl	80045cc <VL53L1_set_inter_measurement_period_ms>
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 fae3 	bl	8004628 <VL53L1_get_inter_measurement_period_ms>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	019b      	lsls	r3, r3, #6
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800206e:	fba1 1303 	umull	r1, r3, r1, r3
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	460b      	mov	r3, r1
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <SetLimitValue+0x1e>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d009      	beq.n	80020c0 <SetLimitValue+0x30>
 80020ac:	e011      	b.n	80020d2 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0b9b      	lsrs	r3, r3, #14
 80020b2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80020b4:	8abb      	ldrh	r3, [r7, #20]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f003 f988 	bl	80053ce <VL53L1_set_lite_sigma_threshold>
		break;
 80020be:	e00a      	b.n	80020d6 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80020c6:	8abb      	ldrh	r3, [r7, #20]
 80020c8:	4619      	mov	r1, r3
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f003 f9ad 	bl	800542a <VL53L1_set_lite_min_count_rate>
		break;
 80020d0:	e001      	b.n	80020d6 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80020d2:	23fc      	movs	r3, #252	; 0xfc
 80020d4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d902      	bls.n	8002106 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002100:	23fc      	movs	r3, #252	; 0xfc
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e015      	b.n	8002132 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8002106:	787b      	ldrb	r3, [r7, #1]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	e007      	b.n	8002122 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffb1 	bl	8002090 <SetLimitValue>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10e      	bne.n	8002158 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2da      	uxtb	r2, r3
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	4611      	mov	r1, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002152:	3334      	adds	r3, #52	; 0x34
 8002154:	460a      	mov	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8002158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	460b      	mov	r3, r1
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d905      	bls.n	8002188 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800217c:	23fc      	movs	r3, #252	; 0xfc
 800217e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e00a      	b.n	800219e <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002188:	897b      	ldrh	r3, [r7, #10]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002192:	3334      	adds	r3, #52	; 0x34
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7dba      	ldrb	r2, [r7, #22]
 800219c:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800219e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b088      	sub	sp, #32
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	460b      	mov	r3, r1
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <VL53L1_GetLimitCheckValue+0x22>
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00c      	beq.n	80021e8 <VL53L1_GetLimitCheckValue+0x3a>
 80021ce:	e017      	b.n	8002200 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f003 f8e2 	bl	80053a0 <VL53L1_get_lite_sigma_threshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80021e0:	8abb      	ldrh	r3, [r7, #20]
 80021e2:	039b      	lsls	r3, r3, #14
 80021e4:	61bb      	str	r3, [r7, #24]
		break;
 80021e6:	e00d      	b.n	8002204 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80021e8:	f107 0316 	add.w	r3, r7, #22
 80021ec:	4619      	mov	r1, r3
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f003 f904 	bl	80053fc <VL53L1_get_lite_min_count_rate>
 80021f4:	4603      	mov	r3, r0
 80021f6:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	025b      	lsls	r3, r3, #9
 80021fc:	61bb      	str	r3, [r7, #24]
		break;
 80021fe:	e001      	b.n	8002204 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002200:	23fc      	movs	r3, #252	; 0xfc
 8002202:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d129      	bne.n	8002260 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8002212:	897b      	ldrh	r3, [r7, #10]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4413      	add	r3, r2
 800222e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002232:	3334      	adds	r3, #52	; 0x34
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e012      	b.n	8002260 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002240:	897b      	ldrh	r3, [r7, #10]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002250:	897b      	ldrh	r3, [r7, #10]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800225a:	3334      	adds	r3, #52	; 0x34
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002260:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a0      	sub	sp, #128	; 0x80
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002288:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800228c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8002290:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002294:	2b02      	cmp	r3, #2
 8002296:	d102      	bne.n	800229e <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8002298:	2310      	movs	r3, #16
 800229a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d303      	bcc.n	80022b2 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80022b2:	23fc      	movs	r3, #252	; 0xfc
 80022b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80022b8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d17e      	bne.n	80023be <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80022c0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80022c4:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80022d6:	e06a      	b.n	80023ae <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80022d8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	f107 0208 	add.w	r2, r7, #8
 80022e6:	3301      	adds	r3, #1
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80022ec:	68b8      	ldr	r0, [r7, #8]
 80022ee:	f7ff f9e3 	bl	80016b8 <CheckValidRectRoi>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80022f8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d15d      	bne.n	80023bc <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002300:	7abb      	ldrb	r3, [r7, #10]
 8002302:	461a      	mov	r2, r3
 8002304:	7a3b      	ldrb	r3, [r7, #8]
 8002306:	4413      	add	r3, r2
 8002308:	3301      	adds	r3, #1
					/ 2;
 800230a:	0fda      	lsrs	r2, r3, #31
 800230c:	4413      	add	r3, r2
 800230e:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002310:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002314:	7a7b      	ldrb	r3, [r7, #9]
 8002316:	461a      	mov	r2, r3
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	4413      	add	r3, r2
 800231c:	3301      	adds	r3, #1
					/ 2;
 800231e:	0fda      	lsrs	r2, r3, #31
 8002320:	4413      	add	r3, r2
 8002322:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002324:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002328:	7aba      	ldrb	r2, [r7, #10]
 800232a:	7a3b      	ldrb	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002332:	7a7a      	ldrb	r2, [r7, #9]
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 800233c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002340:	2b02      	cmp	r3, #2
 8002342:	d903      	bls.n	800234c <VL53L1_SetROI+0xe0>
 8002344:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002348:	2b02      	cmp	r3, #2
 800234a:	d803      	bhi.n	8002354 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800234c:	23fc      	movs	r3, #252	; 0xfc
 800234e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002352:	e034      	b.n	80023be <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002354:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002358:	3306      	adds	r3, #6
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3380      	adds	r3, #128	; 0x80
 800235e:	443b      	add	r3, r7
 8002360:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002364:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002368:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800236c:	3306      	adds	r3, #6
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	3380      	adds	r3, #128	; 0x80
 8002372:	443b      	add	r3, r7
 8002374:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002378:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 800237c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002380:	3306      	adds	r3, #6
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3380      	adds	r3, #128	; 0x80
 8002386:	443b      	add	r3, r7
 8002388:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800238c:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8002390:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002394:	3306      	adds	r3, #6
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	3380      	adds	r3, #128	; 0x80
 800239a:	443b      	add	r3, r7
 800239c:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80023a0:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80023a4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023a8:	3301      	adds	r3, #1
 80023aa:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d38e      	bcc.n	80022d8 <VL53L1_SetROI+0x6c>
 80023ba:	e000      	b.n	80023be <VL53L1_SetROI+0x152>
				break;
 80023bc:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80023be:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f002 fa8c 	bl	80048ea <VL53L1_set_zone_config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80023d8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3780      	adds	r7, #128	; 0x80
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	460b      	mov	r3, r1
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f002 f9e3 	bl	80047c8 <VL53L1_get_sequence_config_bit>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3318      	adds	r3, #24
 8002424:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d002      	beq.n	8002438 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f001 fc8e 	bl	8003d54 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002438:	2300      	movs	r3, #0
 800243a:	77bb      	strb	r3, [r7, #30]
 800243c:	e01a      	b.n	8002474 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800243e:	7fbb      	ldrb	r3, [r7, #30]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002446:	330c      	adds	r3, #12
 8002448:	2100      	movs	r1, #0
 800244a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800244e:	7fbb      	ldrb	r3, [r7, #30]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002458:	3320      	adds	r3, #32
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800245e:	7fbb      	ldrb	r3, [r7, #30]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002468:	3324      	adds	r3, #36	; 0x24
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800246e:	7fbb      	ldrb	r3, [r7, #30]
 8002470:	3301      	adds	r3, #1
 8002472:	77bb      	strb	r3, [r7, #30]
 8002474:	7fbb      	ldrb	r3, [r7, #30]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d9e1      	bls.n	800243e <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002480:	2200      	movs	r2, #0
 8002482:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800248c:	2200      	movs	r2, #0
 800248e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002498:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 800249c:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	2b63      	cmp	r3, #99	; 0x63
 80024a2:	dc12      	bgt.n	80024ca <VL53L1_StartMeasurement+0xb6>
 80024a4:	2b62      	cmp	r3, #98	; 0x62
 80024a6:	da0d      	bge.n	80024c4 <VL53L1_StartMeasurement+0xb0>
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	dc0e      	bgt.n	80024ca <VL53L1_StartMeasurement+0xb6>
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	da09      	bge.n	80024c4 <VL53L1_StartMeasurement+0xb0>
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	dc02      	bgt.n	80024ba <VL53L1_StartMeasurement+0xa6>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da05      	bge.n	80024c4 <VL53L1_StartMeasurement+0xb0>
 80024b8:	e007      	b.n	80024ca <VL53L1_StartMeasurement+0xb6>
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d105      	bne.n	80024ca <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80024be:	2300      	movs	r3, #0
 80024c0:	77fb      	strb	r3, [r7, #31]
		break;
 80024c2:	e004      	b.n	80024ce <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80024c4:	23f2      	movs	r3, #242	; 0xf2
 80024c6:	77fb      	strb	r3, [r7, #31]
		break;
 80024c8:	e001      	b.n	80024ce <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80024ca:	23fd      	movs	r3, #253	; 0xfd
 80024cc:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80024ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11f      	bne.n	8002516 <VL53L1_StartMeasurement+0x102>
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d11c      	bne.n	8002516 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fcc0 	bl	8001e68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80024e8:	4603      	mov	r3, r0
 80024ea:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4a18      	ldr	r2, [pc, #96]	; (8002550 <VL53L1_StartMeasurement+0x13c>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fda2 	bl	8002048 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002504:	4603      	mov	r3, r0
 8002506:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1d1a      	adds	r2, r3, #4
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d901      	bls.n	8002516 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002512:	23fc      	movs	r3, #252	; 0xfc
 8002514:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002516:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2206      	movs	r2, #6
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f002 ff97 	bl	8005458 <VL53L1_init_and_start_range>
 800252a:	4603      	mov	r3, r0
 800252c:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 800252e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800253c:	2204      	movs	r2, #4
 800253e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002542:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f003 fa47 	bl	80059f4 <VL53L1_stop_range>
 8002566:	4603      	mov	r3, r0
 8002568:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7edb      	ldrb	r3, [r3, #27]
 800256e:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d002      	beq.n	800257c <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f001 fd1a 	bl	8003fb0 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 800257c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800258a:	2203      	movs	r2, #3
 800258c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7edb      	ldrb	r3, [r3, #27]
 80025ac:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f003 ff4b 	bl	800644e <VL53L1_clear_interrupt_and_enable_next_range>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80025bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f011 f8ac 	bl	8013736 <VL53L1_is_new_data_ready>
 80025de:	4603      	mov	r3, r0
 80025e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	603a      	str	r2, [r7, #0]
 80025f8:	80fb      	strh	r3, [r7, #6]
 80025fa:	460b      	mov	r3, r1
 80025fc:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 80025fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002602:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002604:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002608:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 800260a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800260e:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002610:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002614:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <GenNewPresetMode+0x34>
 800261c:	2b02      	cmp	r3, #2
 800261e:	d012      	beq.n	8002646 <GenNewPresetMode+0x58>
 8002620:	e023      	b.n	800266a <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	dd03      	ble.n	8002634 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002632:	e02c      	b.n	800268e <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002634:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	dd27      	ble.n	800268e <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
		break;
 8002644:	e023      	b.n	800268e <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002646:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800264a:	893b      	ldrh	r3, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	dd03      	ble.n	8002658 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2203      	movs	r2, #3
 8002654:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002656:	e01c      	b.n	8002692 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002658:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800265c:	89fb      	ldrh	r3, [r7, #14]
 800265e:	429a      	cmp	r2, r3
 8002660:	da17      	bge.n	8002692 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		break;
 8002668:	e013      	b.n	8002692 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 800266a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	429a      	cmp	r2, r3
 8002672:	da03      	bge.n	800267c <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 800267a:	e00c      	b.n	8002696 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 800267c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	429a      	cmp	r2, r3
 8002684:	da07      	bge.n	8002696 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
		break;
 800268c:	e003      	b.n	8002696 <GenNewPresetMode+0xa8>
		break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <GenNewPresetMode+0xaa>
		break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <GenNewPresetMode+0xaa>
		break;
 8002696:	bf00      	nop
	}
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	7ddb      	ldrb	r3, [r3, #23]
 80026b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <CheckAndChangeDistanceMode+0xbc>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3318      	adds	r3, #24
 80026c6:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 80026c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d042      	beq.n	8002756 <CheckAndChangeDistanceMode+0xb2>
 80026d0:	2bff      	cmp	r3, #255	; 0xff
 80026d2:	dc07      	bgt.n	80026e4 <CheckAndChangeDistanceMode+0x40>
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	dc02      	bgt.n	80026de <CheckAndChangeDistanceMode+0x3a>
 80026d8:	2b06      	cmp	r3, #6
 80026da:	da3c      	bge.n	8002756 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 80026dc:	e002      	b.n	80026e4 <CheckAndChangeDistanceMode+0x40>
 80026de:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d938      	bls.n	8002756 <CheckAndChangeDistanceMode+0xb2>
		break;
 80026e4:	bf00      	nop
	}

	DmaxValid = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80026f2:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	db03      	blt.n	8002704 <CheckAndChangeDistanceMode+0x60>
 80026fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002710:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002714:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	7dfa      	ldrb	r2, [r7, #23]
 800271a:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800271c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800272a:	7df9      	ldrb	r1, [r7, #23]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff5d 	bl	80025ee <GenNewPresetMode>
 8002734:	e010      	b.n	8002758 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 800273e:	7df9      	ldrb	r1, [r7, #23]
 8002740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff51 	bl	80025ee <GenNewPresetMode>
 800274c:	e004      	b.n	8002758 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2203      	movs	r2, #3
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e000      	b.n	8002758 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002756:	bf00      	nop
	}
}
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c

08002764 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002764:	b480      	push	{r7}
 8002766:	b08d      	sub	sp, #52	; 0x34
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	603a      	str	r2, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	460b      	mov	r3, r1
 8002772:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002774:	2396      	movs	r3, #150	; 0x96
 8002776:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002778:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800277c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 800277e:	231e      	movs	r3, #30
 8002780:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <ComputeRQL+0x104>)
 8002784:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <ComputeRQL+0x108>)
 8002788:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 800278a:	f641 139a 	movw	r3, #6554	; 0x199a
 800278e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <ComputeRQL+0x3a>
		returnvalue = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800279c:	e05b      	b.n	8002856 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80027a4:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 80027ac:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80027ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 80027b2:	429a      	cmp	r2, r3
 80027b4:	da02      	bge.n	80027bc <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d103      	bne.n	80027c4 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 80027bc:	2332      	movs	r3, #50	; 0x32
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027c2:	e048      	b.n	8002856 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80027ca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dd03      	ble.n	80027da <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 80027d2:	8c3b      	ldrh	r3, [r7, #32]
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	e007      	b.n	80027ea <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80027f4:	461a      	mov	r2, r3
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	d804      	bhi.n	800282a <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
 8002828:	e006      	b.n	8002838 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 800282a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002830:	e002      	b.n	8002838 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002832:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b32      	cmp	r3, #50	; 0x32
 8002842:	d905      	bls.n	8002850 <ComputeRQL+0xec>
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	bf28      	it	cs
 800284a:	2364      	movcs	r3, #100	; 0x64
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e000      	b.n	8002852 <ComputeRQL+0xee>
 8002850:	2332      	movs	r3, #50	; 0x32
 8002852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800285a:	4618      	mov	r0, r3
 800285c:	3734      	adds	r7, #52	; 0x34
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	0075b333 	.word	0x0075b333
 800286c:	0030cccd 	.word	0x0030cccd

08002870 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	3b04      	subs	r3, #4
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d83d      	bhi.n	80028fe <ConvertStatusLite+0x8e>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <ConvertStatusLite+0x18>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028db 	.word	0x080028db
 800288c:	080028d5 	.word	0x080028d5
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028e7 	.word	0x080028e7
 8002898:	080028f3 	.word	0x080028f3
 800289c:	080028f9 	.word	0x080028f9
 80028a0:	080028ff 	.word	0x080028ff
 80028a4:	080028ff 	.word	0x080028ff
 80028a8:	080028ed 	.word	0x080028ed
 80028ac:	080028ff 	.word	0x080028ff
 80028b0:	080028ff 	.word	0x080028ff
 80028b4:	080028ff 	.word	0x080028ff
 80028b8:	080028ff 	.word	0x080028ff
 80028bc:	080028ff 	.word	0x080028ff
 80028c0:	080028c9 	.word	0x080028c9
 80028c4:	080028cf 	.word	0x080028cf
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80028c8:	230a      	movs	r3, #10
 80028ca:	73fb      	strb	r3, [r7, #15]
		break;
 80028cc:	e019      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80028ce:	2306      	movs	r3, #6
 80028d0:	73fb      	strb	r3, [r7, #15]
		break;
 80028d2:	e016      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80028d4:	2304      	movs	r3, #4
 80028d6:	73fb      	strb	r3, [r7, #15]
		break;
 80028d8:	e013      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80028da:	2302      	movs	r3, #2
 80028dc:	73fb      	strb	r3, [r7, #15]
		break;
 80028de:	e010      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
		break;
 80028e4:	e00d      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80028e6:	2307      	movs	r3, #7
 80028e8:	73fb      	strb	r3, [r7, #15]
		break;
 80028ea:	e00a      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80028ec:	2309      	movs	r3, #9
 80028ee:	73fb      	strb	r3, [r7, #15]
		break;
 80028f0:	e007      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
		break;
 80028f6:	e004      	b.n	8002902 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
		break;
 80028fc:	e001      	b.n	8002902 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80028fe:	23ff      	movs	r3, #255	; 0xff
 8002900:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	3b05      	subs	r3, #5
 800291e:	2b12      	cmp	r3, #18
 8002920:	d840      	bhi.n	80029a4 <ConvertStatusHisto+0x94>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <ConvertStatusHisto+0x18>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002975 	.word	0x08002975
 800292c:	0800297b 	.word	0x0800297b
 8002930:	08002987 	.word	0x08002987
 8002934:	080029a5 	.word	0x080029a5
 8002938:	0800299f 	.word	0x0800299f
 800293c:	080029a5 	.word	0x080029a5
 8002940:	080029a5 	.word	0x080029a5
 8002944:	080029a5 	.word	0x080029a5
 8002948:	080029a5 	.word	0x080029a5
 800294c:	080029a5 	.word	0x080029a5
 8002950:	080029a5 	.word	0x080029a5
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002981 	.word	0x08002981
 8002964:	08002993 	.word	0x08002993
 8002968:	080029a5 	.word	0x080029a5
 800296c:	08002999 	.word	0x08002999
 8002970:	0800298d 	.word	0x0800298d
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002974:	2304      	movs	r3, #4
 8002976:	73fb      	strb	r3, [r7, #15]
		break;
 8002978:	e016      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
		break;
 800297e:	e013      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002980:	2306      	movs	r3, #6
 8002982:	73fb      	strb	r3, [r7, #15]
		break;
 8002984:	e010      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002986:	2307      	movs	r3, #7
 8002988:	73fb      	strb	r3, [r7, #15]
		break;
 800298a:	e00d      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 800298c:	230c      	movs	r3, #12
 800298e:	73fb      	strb	r3, [r7, #15]
		break;
 8002990:	e00a      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002992:	2307      	movs	r3, #7
 8002994:	73fb      	strb	r3, [r7, #15]
		break;
 8002996:	e007      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002998:	230b      	movs	r3, #11
 800299a:	73fb      	strb	r3, [r7, #15]
		break;
 800299c:	e004      	b.n	80029a8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
		break;
 80029a2:	e001      	b.n	80029a8 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80029a4:	23ff      	movs	r3, #255	; 0xff
 80029a6:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b092      	sub	sp, #72	; 0x48
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	70fb      	strb	r3, [r7, #3]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70bb      	strb	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3318      	adds	r3, #24
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 80029de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80029f8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff feaf 	bl	8002764 <ComputeRQL>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0c:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a20:	025b      	lsls	r3, r3, #9
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a36:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4a:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a58:	2200      	movs	r2, #0
 8002a5a:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002a5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a60:	2b11      	cmp	r3, #17
 8002a62:	d009      	beq.n	8002a78 <SetTargetData+0xc0>
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	dc0f      	bgt.n	8002a88 <SetTargetData+0xd0>
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	dc02      	bgt.n	8002a72 <SetTargetData+0xba>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dc03      	bgt.n	8002a78 <SetTargetData+0xc0>
 8002a70:	e00a      	b.n	8002a88 <SetTargetData+0xd0>
 8002a72:	2b0d      	cmp	r3, #13
 8002a74:	d004      	beq.n	8002a80 <SetTargetData+0xc8>
 8002a76:	e007      	b.n	8002a88 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	75da      	strb	r2, [r3, #23]
		break;
 8002a7e:	e006      	b.n	8002a8e <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a82:	220d      	movs	r2, #13
 8002a84:	75da      	strb	r2, [r3, #23]
		break;
 8002a86:	e002      	b.n	8002a8e <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a90:	7ddb      	ldrb	r3, [r3, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d117      	bne.n	8002ac6 <SetTargetData+0x10e>
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d114      	bne.n	8002ac6 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ab4:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002abc:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ac4:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	7ddb      	ldrb	r3, [r3, #23]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d125      	bne.n	8002b1a <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ad4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8002adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d007      	beq.n	8002af4 <SetTargetData+0x13c>
 8002ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d003      	beq.n	8002af4 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d109      	bne.n	8002b08 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8002af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff09 	bl	8002910 <ConvertStatusHisto>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b04:	75da      	strb	r2, [r3, #23]
 8002b06:	e008      	b.n	8002b1a <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff feaf 	bl	8002870 <ConvertStatusLite>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002b1e:	025b      	lsls	r3, r3, #9
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b32:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b34:	025b      	lsls	r3, r3, #9
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fb2d 	bl	80021ae <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8002b66:	f107 0315 	add.w	r3, r7, #21
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff faf8 	bl	8002164 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002b74:	7d7b      	ldrb	r3, [r7, #21]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <SetTargetData+0x1ce>
 8002b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <SetTargetData+0x1ce>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <SetTargetData+0x1d0>
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b92:	461a      	mov	r2, r3
 8002b94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b98:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fb02 	bl	80021ae <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8002bbc:	f107 0315 	add.w	r3, r7, #21
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff facd 	bl	8002164 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002bca:	7d7b      	ldrb	r3, [r7, #21]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <SetTargetData+0x224>
 8002bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <SetTargetData+0x224>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <SetTargetData+0x226>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002be8:	461a      	mov	r2, r3
 8002bea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bee:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	8a9b      	ldrh	r3, [r3, #20]
 8002bf6:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfa:	7ddb      	ldrb	r3, [r3, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d110      	bne.n	8002c22 <SetTargetData+0x26a>
 8002c00:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da0c      	bge.n	8002c22 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002c08:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002c0c:	4ba3      	ldr	r3, [pc, #652]	; (8002e9c <SetTargetData+0x4e4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	da03      	bge.n	8002c1c <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8002c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c16:	220e      	movs	r2, #14
 8002c18:	75da      	strb	r2, [r3, #23]
 8002c1a:	e002      	b.n	8002c22 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	2200      	movs	r2, #0
 8002c20:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	461a      	mov	r2, r3
 8002c28:	f248 01be 	movw	r1, #32958	; 0x80be
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f004 f943 	bl	8006eb8 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8002c36:	787b      	ldrb	r3, [r7, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3e:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8002c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c46:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d902      	bls.n	8002c54 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8002c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c50:	220c      	movs	r2, #12
 8002c52:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f248 0191 	movw	r1, #32913	; 0x8091
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f004 f92a 	bl	8006eb8 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002c64:	78bb      	ldrb	r3, [r7, #2]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c74:	8a9b      	ldrh	r3, [r3, #20]
 8002c76:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c80:	2200      	movs	r2, #0
 8002c82:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d106      	bne.n	8002c98 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c90:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d001      	beq.n	8002c9c <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8250 	beq.w	8003144 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca6:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	d004      	beq.n	8002cb6 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cae:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	f040 8247 	bne.w	8003144 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002cb6:	787b      	ldrb	r3, [r7, #1]
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d01c      	beq.n	8002d02 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002cd2:	3320      	adds	r3, #32
 8002cd4:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d013      	beq.n	8002d02 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002cda:	787b      	ldrb	r3, [r7, #1]
 8002cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 822b 	bne.w	8003144 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002cee:	787b      	ldrb	r3, [r7, #1]
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002cf8:	3324      	adds	r3, #36	; 0x24
 8002cfa:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	f040 8221 	bne.w	8003144 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d08:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8002d0c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8002d14:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d00c      	beq.n	8002d34 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d20:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8002d24:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8002d2c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	f040 81dc 	bne.w	80030ec <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002d3a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d40:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002d44:	330c      	adds	r3, #12
 8002d46:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002d4a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8002d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2b21      	cmp	r3, #33	; 0x21
 8002d5e:	d008      	beq.n	8002d72 <SetTargetData+0x3ba>
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	f300 81bf 	bgt.w	80030e4 <SetTargetData+0x72c>
 8002d66:	2b1b      	cmp	r3, #27
 8002d68:	f000 8113 	beq.w	8002f92 <SetTargetData+0x5da>
 8002d6c:	2b1e      	cmp	r3, #30
 8002d6e:	d004      	beq.n	8002d7a <SetTargetData+0x3c2>
 8002d70:	e1b8      	b.n	80030e4 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8002d78:	e1b9      	b.n	80030ee <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002d80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dd0f      	ble.n	8002da8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	da08      	bge.n	8002da8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002d96:	7efb      	ldrb	r3, [r7, #27]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002da2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002da6:	e0f3      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002da8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002db2:	425b      	negs	r3, r3
 8002db4:	429a      	cmp	r2, r3
 8002db6:	da10      	bge.n	8002dda <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002db8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002dc2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	dd08      	ble.n	8002dda <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002dc8:	7efb      	ldrb	r3, [r7, #27]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002dd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dd8:	e0da      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002de0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dd0f      	ble.n	8002e08 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	da08      	bge.n	8002e08 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002df6:	7efb      	ldrb	r3, [r7, #27]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002e02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e06:	e0c3      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002e12:	425b      	negs	r3, r3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	da10      	bge.n	8002e3a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002e18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002e22:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dd08      	ble.n	8002e3a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002e28:	7efb      	ldrb	r3, [r7, #27]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e38:	e0aa      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002e40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dd0f      	ble.n	8002e68 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002e4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	da08      	bge.n	8002e68 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002e56:	7efb      	ldrb	r3, [r7, #27]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002e62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e66:	e093      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002e68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002e72:	425b      	negs	r3, r3
 8002e74:	429a      	cmp	r2, r3
 8002e76:	da13      	bge.n	8002ea0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002e78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002e82:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dd0b      	ble.n	8002ea0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002e88:	7efb      	ldrb	r3, [r7, #27]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d108      	bne.n	8002ea0 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002e94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e98:	e07a      	b.n	8002f90 <SetTargetData+0x5d8>
 8002e9a:	bf00      	nop
 8002e9c:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002ea6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	dd0f      	ble.n	8002ece <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002eb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	da08      	bge.n	8002ece <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002ebc:	7efb      	ldrb	r3, [r7, #27]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002ec8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ecc:	e060      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002ece:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002ed8:	425b      	negs	r3, r3
 8002eda:	429a      	cmp	r2, r3
 8002edc:	da10      	bge.n	8002f00 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002ede:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002ee8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dd08      	ble.n	8002f00 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002eee:	7efb      	ldrb	r3, [r7, #27]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8002efa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002efe:	e047      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002f06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	da0c      	bge.n	8002f28 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dd05      	ble.n	8002f28 <SetTargetData+0x570>
					AddOffset =
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8002f22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f26:	e033      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002f2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	dd0f      	ble.n	8002f56 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8002f3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	da08      	bge.n	8002f56 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8002f44:	7efb      	ldrb	r3, [r7, #27]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002f50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f54:	e01c      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8002f56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002f60:	425b      	negs	r3, r3
 8002f62:	429a      	cmp	r2, r3
 8002f64:	da10      	bge.n	8002f88 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8002f66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002f70:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dd08      	ble.n	8002f88 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8002f76:	7efb      	ldrb	r3, [r7, #27]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8002f82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f86:	e003      	b.n	8002f90 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8002f8e:	e0ae      	b.n	80030ee <SetTargetData+0x736>
 8002f90:	e0ad      	b.n	80030ee <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8002f98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dd0f      	ble.n	8002fc0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	da08      	bge.n	8002fc0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fae:	7efb      	ldrb	r3, [r7, #27]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8002fba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fbe:	e090      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002fc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8002fca:	425b      	negs	r3, r3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	da10      	bge.n	8002ff2 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002fda:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dd08      	ble.n	8002ff2 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002fe0:	7efb      	ldrb	r3, [r7, #27]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8002fec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ff0:	e077      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8002ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dd0f      	ble.n	8003020 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003006:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800300a:	429a      	cmp	r2, r3
 800300c:	da08      	bge.n	8003020 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800300e:	7efb      	ldrb	r3, [r7, #27]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800301a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800301e:	e060      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800302a:	425b      	negs	r3, r3
 800302c:	429a      	cmp	r2, r3
 800302e:	da10      	bge.n	8003052 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800303a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800303c:	429a      	cmp	r2, r3
 800303e:	dd08      	ble.n	8003052 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003040:	7efb      	ldrb	r3, [r7, #27]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800304c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003050:	e047      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8003058:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800305c:	429a      	cmp	r2, r3
 800305e:	da0c      	bge.n	800307a <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003066:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800306a:	429a      	cmp	r2, r3
 800306c:	dd05      	ble.n	800307a <SetTargetData+0x6c2>
					AddOffset =
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003074:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003078:	e033      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003080:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003084:	429a      	cmp	r2, r3
 8003086:	dd0f      	ble.n	80030a8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800308e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003092:	429a      	cmp	r2, r3
 8003094:	da08      	bge.n	80030a8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003096:	7efb      	ldrb	r3, [r7, #27]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80030a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030a6:	e01c      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80030a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80030b2:	425b      	negs	r3, r3
 80030b4:	429a      	cmp	r2, r3
 80030b6:	da10      	bge.n	80030da <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80030b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80030c2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dd08      	ble.n	80030da <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80030c8:	7efb      	ldrb	r3, [r7, #27]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80030d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030d8:	e003      	b.n	80030e2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80030e0:	e005      	b.n	80030ee <SetTargetData+0x736>
 80030e2:	e004      	b.n	80030ee <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80030ea:	e000      	b.n	80030ee <SetTargetData+0x736>
			}
		}
 80030ec:	bf00      	nop

		if (uwr_status) {
 80030ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d026      	beq.n	8003144 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80030f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003102:	4413      	add	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	b21a      	sxth	r2, r3
 8003108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800310a:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800310c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800310e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003112:	b29a      	uxth	r2, r3
 8003114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003118:	4413      	add	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	b21a      	sxth	r2, r3
 800311e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003120:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003124:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003128:	b29a      	uxth	r2, r3
 800312a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800312e:	4413      	add	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	b21a      	sxth	r2, r3
 8003134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003136:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313a:	2201      	movs	r2, #1
 800313c:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	2200      	movs	r2, #0
 8003142:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003148:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800314c:	330c      	adds	r3, #12
 800314e:	8b39      	ldrh	r1, [r7, #24]
 8003150:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003158:	7dd1      	ldrb	r1, [r2, #23]
 800315a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800315c:	4413      	add	r3, r2
 800315e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003162:	3320      	adds	r3, #32
 8003164:	460a      	mov	r2, r1
 8003166:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316c:	7e11      	ldrb	r1, [r2, #24]
 800316e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003170:	4413      	add	r3, r2
 8003172:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	460a      	mov	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800317c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003182:	461a      	mov	r2, r3
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800318a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800318e:	4618      	mov	r0, r3
 8003190:	3748      	adds	r7, #72	; 0x48
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop

08003198 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b091      	sub	sp, #68	; 0x44
 800319c:	af04      	add	r7, sp, #16
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3318      	adds	r3, #24
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	7c9a      	ldrb	r2, [r3, #18]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	789a      	ldrb	r2, [r3, #2]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80031e2:	4293      	cmp	r3, r2
 80031e4:	bfa8      	it	ge
 80031e6:	4613      	movge	r3, r2
 80031e8:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80031ee:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	78da      	ldrb	r2, [r3, #3]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003206:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	7c9b      	ldrb	r3, [r3, #18]
 8003214:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003218:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <SetMeasurementData+0x90>

		iteration = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003226:	e003      	b.n	8003230 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003228:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800322c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003230:	2300      	movs	r3, #0
 8003232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003236:	e048      	b.n	80032ca <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003238:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3308      	adds	r3, #8
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 800324c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003250:	224c      	movs	r2, #76	; 0x4c
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	3310      	adds	r3, #16
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8003260:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7918      	ldrb	r0, [r3, #4]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	7c1b      	ldrb	r3, [r3, #16]
 8003270:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003274:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	9202      	str	r2, [sp, #8]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	9201      	str	r2, [sp, #4]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	4623      	mov	r3, r4
 8003284:	4602      	mov	r2, r0
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fb96 	bl	80029b8 <SetTargetData>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	7ddb      	ldrb	r3, [r3, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80032aa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80032ae:	429a      	cmp	r2, r3
 80032b0:	da06      	bge.n	80032c0 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	8a9b      	ldrh	r3, [r3, #20]
 80032b6:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80032b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80032c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032c4:	3301      	adds	r3, #1
 80032c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032ca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80032ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3b0      	bcc.n	8003238 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032e2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80032e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032ee:	e01f      	b.n	8003330 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80032f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80032fa:	330c      	adds	r3, #12
 80032fc:	2100      	movs	r1, #0
 80032fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	4413      	add	r3, r2
 800330a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800330e:	3320      	adds	r3, #32
 8003310:	22ff      	movs	r2, #255	; 0xff
 8003312:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	4413      	add	r3, r2
 800331c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003320:	3324      	adds	r3, #36	; 0x24
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800332a:	3301      	adds	r3, #1
 800332c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003334:	2b03      	cmp	r3, #3
 8003336:	d9db      	bls.n	80032f0 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003338:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11b      	bne.n	8003378 <SetMeasurementData+0x1e0>
 8003340:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003348:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3308      	adds	r3, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 800335c:	2304      	movs	r3, #4
 800335e:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003360:	7efb      	ldrb	r3, [r7, #27]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	337e      	adds	r3, #126	; 0x7e
 8003370:	69f9      	ldr	r1, [r7, #28]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff f996 	bl	80026a4 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8003378:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 800337c:	4618      	mov	r0, r3
 800337e:	3734      	adds	r7, #52	; 0x34
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3318      	adds	r3, #24
 8003396:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800339e:	3308      	adds	r3, #8
 80033a0:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	21ff      	movs	r1, #255	; 0xff
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f015 ff46 	bl	8019238 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	2102      	movs	r1, #2
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f002 fc2e 	bl	8005c12 <VL53L1_get_device_results>
 80033b6:	4603      	mov	r3, r0
 80033b8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 80033ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	d002      	beq.n	80033d0 <VL53L1_GetMultiRangingData+0x4c>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d004      	beq.n	80033d8 <VL53L1_GetMultiRangingData+0x54>
 80033ce:	e007      	b.n	80033e0 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80033d6:	e006      	b.n	80033e6 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2202      	movs	r2, #2
 80033dc:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 80033de:	e002      	b.n	80033e6 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fed4 	bl	8003198 <SetMeasurementData>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b090      	sub	sp, #64	; 0x40
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800340e:	f240 3305 	movw	r3, #773	; 0x305
 8003412:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3318      	adds	r3, #24
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	3348      	adds	r3, #72	; 0x48
 800341e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003420:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11c      	bne.n	8003462 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800342e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003436:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8e3 	bl	8003608 <VL53L1_run_ref_spad_char>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003448:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800344c:	2b00      	cmp	r3, #0
 800344e:	d108      	bne.n	8003462 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe fb2c 	bl	8001ab4 <VL53L1_SetPresetMode>
 800345c:	4603      	mov	r3, r0
 800345e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003462:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003466:	f113 0f1d 	cmn.w	r3, #29
 800346a:	d14e      	bne.n	800350a <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	2206      	movs	r2, #6
 8003472:	2128      	movs	r1, #40	; 0x28
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f00e fbf6 	bl	8011c66 <VL53L1_read_nvm_raw_data>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003480:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003488:	f107 020c 	add.w	r2, r7, #12
 800348c:	2302      	movs	r3, #2
 800348e:	2114      	movs	r1, #20
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f010 fe5f 	bl	8014154 <VL53L1_WriteMulti>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 800349c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80034a4:	7b3a      	ldrb	r2, [r7, #12]
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80034aa:	7b7a      	ldrb	r2, [r7, #13]
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	3310      	adds	r3, #16
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 80034b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80034c0:	2306      	movs	r3, #6
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	210d      	movs	r1, #13
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f010 fe44 	bl	8014154 <VL53L1_WriteMulti>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80034d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d117      	bne.n	800350a <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	785a      	ldrb	r2, [r3, #1]
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	789a      	ldrb	r2, [r3, #2]
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	78da      	ldrb	r2, [r3, #3]
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	791a      	ldrb	r2, [r3, #4]
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	795a      	ldrb	r2, [r3, #5]
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 800350a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800350e:	4618      	mov	r0, r3
 8003510:	3740      	adds	r7, #64	; 0x40
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003528:	2300      	movs	r3, #0
 800352a:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 800352c:	2300      	movs	r3, #0
 800352e:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d84a      	bhi.n	80035d0 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <VL53L1_SmudgeCorrectionEnable+0x28>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	08003571 	.word	0x08003571
 8003548:	08003591 	.word	0x08003591
 800354c:	080035b1 	.word	0x080035b1
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f004 fbee 	bl	8007d32 <VL53L1_dynamic_xtalk_correction_disable>
 8003556:	4603      	mov	r3, r0
 8003558:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f004 fc17 	bl	8007d8e <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003560:	4603      	mov	r3, r0
 8003562:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f004 fc40 	bl	8007dea <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800356a:	4603      	mov	r3, r0
 800356c:	733b      	strb	r3, [r7, #12]
		break;
 800356e:	e032      	b.n	80035d6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f004 fbc7 	bl	8007d04 <VL53L1_dynamic_xtalk_correction_enable>
 8003576:	4603      	mov	r3, r0
 8003578:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f004 fbf0 	bl	8007d60 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003580:	4603      	mov	r3, r0
 8003582:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 fc30 	bl	8007dea <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800358a:	4603      	mov	r3, r0
 800358c:	733b      	strb	r3, [r7, #12]
		break;
 800358e:	e022      	b.n	80035d6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f004 fbb7 	bl	8007d04 <VL53L1_dynamic_xtalk_correction_enable>
 8003596:	4603      	mov	r3, r0
 8003598:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f004 fbe0 	bl	8007d60 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80035a0:	4603      	mov	r3, r0
 80035a2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f004 fc09 	bl	8007dbc <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 80035aa:	4603      	mov	r3, r0
 80035ac:	733b      	strb	r3, [r7, #12]
		break;
 80035ae:	e012      	b.n	80035d6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fba7 	bl	8007d04 <VL53L1_dynamic_xtalk_correction_enable>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f004 fbe7 	bl	8007d8e <VL53L1_dynamic_xtalk_correction_apply_disable>
 80035c0:	4603      	mov	r3, r0
 80035c2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f004 fc10 	bl	8007dea <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	733b      	strb	r3, [r7, #12]
		break;
 80035ce:	e002      	b.n	80035d6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80035d0:	23fc      	movs	r3, #252	; 0xfc
 80035d2:	73fb      	strb	r3, [r7, #15]
		break;
 80035d4:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 80035d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80035de:	7bbb      	ldrb	r3, [r7, #14]
 80035e0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80035ea:	7b7b      	ldrb	r3, [r7, #13]
 80035ec:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80035f6:	7b3b      	ldrb	r3, [r7, #12]
 80035f8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop

08003608 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b08c      	sub	sp, #48	; 0x30
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3318      	adds	r3, #24
 800361a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003622:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003624:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f007 fc99 	bl	800af64 <VL53L1_enable_powerforce>
 8003632:	4603      	mov	r3, r0
 8003634:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d117      	bne.n	800366e <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	7858      	ldrb	r0, [r3, #1]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	685c      	ldr	r4, [r3, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	891d      	ldrh	r5, [r3, #8]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	899b      	ldrh	r3, [r3, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	8952      	ldrh	r2, [r2, #10]
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003658:	9102      	str	r1, [sp, #8]
 800365a:	9201      	str	r2, [sp, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	462b      	mov	r3, r5
 8003660:	4622      	mov	r2, r4
 8003662:	4601      	mov	r1, r0
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f009 fbda 	bl	800ce1e <VL53L1_set_ref_spad_char_config>
 800366a:	4603      	mov	r3, r0
 800366c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 800366e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f891 	bl	80037a4 <VL53L1_run_device_test>
 8003682:	4603      	mov	r3, r0
 8003684:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 800368e:	f107 020c 	add.w	r2, r7, #12
 8003692:	2302      	movs	r3, #2
 8003694:	21d9      	movs	r1, #217	; 0xd9
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f010 fd92 	bl	80141c0 <VL53L1_ReadMulti>
 800369c:	4603      	mov	r3, r0
 800369e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 80036a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80036a8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80036b4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 80036c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 80036c8:	f107 020c 	add.w	r2, r7, #12
 80036cc:	2302      	movs	r3, #2
 80036ce:	2114      	movs	r1, #20
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f010 fd3f 	bl	8014154 <VL53L1_WriteMulti>
 80036d6:	4603      	mov	r3, r0
 80036d8:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 80036da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80036e2:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 80036ea:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 80036f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 80036fa:	f107 020c 	add.w	r2, r7, #12
 80036fe:	2306      	movs	r3, #6
 8003700:	21ac      	movs	r1, #172	; 0xac
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f010 fd5c 	bl	80141c0 <VL53L1_ReadMulti>
 8003708:	4603      	mov	r3, r0
 800370a:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 800370c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003714:	f107 020c 	add.w	r2, r7, #12
 8003718:	2306      	movs	r3, #6
 800371a:	210d      	movs	r1, #13
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f010 fd19 	bl	8014154 <VL53L1_WriteMulti>
 8003722:	4603      	mov	r3, r0
 8003724:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d117      	bne.n	800375e <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 800372e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003736:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 800373e:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003746:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 800374e:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003756:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 800375e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d114      	bne.n	8003790 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 800376c:	2b10      	cmp	r3, #16
 800376e:	d00c      	beq.n	800378a <VL53L1_run_ref_spad_char+0x182>
 8003770:	2b10      	cmp	r3, #16
 8003772:	dc0e      	bgt.n	8003792 <VL53L1_run_ref_spad_char+0x18a>
 8003774:	2b0e      	cmp	r3, #14
 8003776:	d002      	beq.n	800377e <VL53L1_run_ref_spad_char+0x176>
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d003      	beq.n	8003784 <VL53L1_run_ref_spad_char+0x17c>
 800377c:	e009      	b.n	8003792 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800377e:	23e4      	movs	r3, #228	; 0xe4
 8003780:	77fb      	strb	r3, [r7, #31]
			break;
 8003782:	e006      	b.n	8003792 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003784:	23e3      	movs	r3, #227	; 0xe3
 8003786:	77fb      	strb	r3, [r7, #31]
			break;
 8003788:	e003      	b.n	8003792 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800378a:	23e2      	movs	r3, #226	; 0xe2
 800378c:	77fb      	strb	r3, [r7, #31]
			break;
 800378e:	e000      	b.n	8003792 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003790:	bf00      	nop



	*pcal_status = status;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	7ffa      	ldrb	r2, [r7, #31]
 8003796:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003798:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}

080037a4 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3318      	adds	r3, #24
 80037b8:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80037be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 80037c6:	f107 030b 	add.w	r3, r7, #11
 80037ca:	461a      	mov	r2, r3
 80037cc:	2130      	movs	r1, #48	; 0x30
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f010 fd88 	bl	80142e4 <VL53L1_RdByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 80037d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80037e0:	7afa      	ldrb	r2, [r7, #11]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 80037e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f007 fb39 	bl	800ae6c <VL53L1_start_test>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 80037fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f00f ff5c 	bl	80136c4 <VL53L1_wait_for_test_completion>
 800380c:	4603      	mov	r3, r0
 800380e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d108      	bne.n	800382a <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003818:	f107 020c 	add.w	r2, r7, #12
 800381c:	2302      	movs	r3, #2
 800381e:	2189      	movs	r1, #137	; 0x89
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f010 fccd 	bl	80141c0 <VL53L1_ReadMulti>
 8003826:	4603      	mov	r3, r0
 8003828:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800382a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003832:	7b3a      	ldrb	r2, [r7, #12]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 800383a:	7b7a      	ldrb	r2, [r7, #13]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	b2da      	uxtb	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 800385c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f007 fba1 	bl	800afac <VL53L1_clear_interrupt>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 800386e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003876:	2100      	movs	r1, #0
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f007 faf7 	bl	800ae6c <VL53L1_start_test>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d006      	beq.n	80038b2 <select_offset_per_vcsel+0x24>
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	dc2b      	bgt.n	8003900 <select_offset_per_vcsel+0x72>
 80038a8:	2b1b      	cmp	r3, #27
 80038aa:	d01c      	beq.n	80038e6 <select_offset_per_vcsel+0x58>
 80038ac:	2b1e      	cmp	r3, #30
 80038ae:	d00d      	beq.n	80038cc <select_offset_per_vcsel+0x3e>
 80038b0:	e026      	b.n	8003900 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b8:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 80038bc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 80038c8:	817b      	strh	r3, [r7, #10]
		break;
 80038ca:	e02b      	b.n	8003924 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d2:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 80038d6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038de:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 80038e2:	817b      	strh	r3, [r7, #10]
		break;
 80038e4:	e01e      	b.n	8003924 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 80038f0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 80038fc:	817b      	strh	r3, [r7, #10]
		break;
 80038fe:	e011      	b.n	8003924 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003906:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 800390a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003912:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003916:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003918:	23fc      	movs	r3, #252	; 0xfc
 800391a:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	801a      	strh	r2, [r3, #0]
		break;
 8003922:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800392a:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 800392c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003934:	7a7b      	ldrb	r3, [r7, #9]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <select_offset_per_vcsel+0xb6>
 800393e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003942:	e001      	b.n	8003948 <select_offset_per_vcsel+0xba>
 8003944:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	8013      	strh	r3, [r2, #0]

	return status;
 800394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 800395c:	b490      	push	{r4, r7}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	460b      	mov	r3, r1
 800396c:	71fb      	strb	r3, [r7, #7]
 800396e:	4613      	mov	r3, r2
 8003970:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	b29b      	uxth	r3, r3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800398e:	e021      	b.n	80039d4 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003990:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	0052      	lsls	r2, r2, #1
 800399e:	441a      	add	r2, r3
 80039a0:	00d3      	lsls	r3, r2, #3
 80039a2:	461a      	mov	r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	440b      	add	r3, r1
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	4413      	add	r3, r2
 80039ae:	4423      	add	r3, r4
 80039b0:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80039b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	4413      	add	r3, r2
 80039bc:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80039be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3206      	adds	r2, #6
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80039ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039d0:	3301      	adds	r3, #1
 80039d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039d4:	79bb      	ldrb	r3, [r7, #6]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3d8      	bcc.n	8003990 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d047      	beq.n	8003a74 <vl53l1_diff_histo_stddev+0x118>
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d044      	beq.n	8003a74 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039f2:	e03a      	b.n	8003a6a <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80039f4:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	0052      	lsls	r2, r2, #1
 8003a02:	441a      	add	r2, r3
 8003a04:	00d3      	lsls	r3, r2, #3
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4413      	add	r3, r2
 8003a12:	4423      	add	r3, r4
 8003a14:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003a18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a1c:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a24:	fb03 f202 	mul.w	r2, r3, r2
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003a30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3206      	adds	r2, #6
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	441a      	add	r2, r3
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a66:	3301      	adds	r3, #1
 8003a68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a6a:	79bb      	ldrb	r3, [r7, #6]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3bf      	bcc.n	80039f4 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003a74:	bf00      	nop
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc90      	pop	{r4, r7}
 8003a7c:	4770      	bx	lr

08003a7e <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003a7e:	b5b0      	push	{r4, r5, r7, lr}
 8003a80:	b08c      	sub	sp, #48	; 0x30
 8003a82:	af02      	add	r7, sp, #8
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3318      	adds	r3, #24
 8003a8c:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8003aae:	2318      	movs	r3, #24
 8003ab0:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f248 018f 	movw	r1, #32911	; 0x808f
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f003 f9fb 	bl	8006eb8 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003ac2:	f107 0310 	add.w	r3, r7, #16
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f248 018e 	movw	r1, #32910	; 0x808e
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f003 f9f3 	bl	8006eb8 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 811b 	bne.w	8003d18 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003afc:	7efb      	ldrb	r3, [r7, #27]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	7eba      	ldrb	r2, [r7, #26]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0e:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003b20:	3b01      	subs	r3, #1
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e004      	b.n	8003b32 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003b32:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003b36:	7efb      	ldrb	r3, [r7, #27]
 8003b38:	69f8      	ldr	r0, [r7, #28]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	0052      	lsls	r2, r2, #1
 8003b3e:	441a      	add	r2, r3
 8003b40:	0153      	lsls	r3, r2, #5
 8003b42:	461a      	mov	r2, r3
 8003b44:	460b      	mov	r3, r1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	440b      	add	r3, r1
 8003b4a:	019b      	lsls	r3, r3, #6
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4403      	add	r3, r0
 8003b50:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8003b54:	3308      	adds	r3, #8
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dd0c      	ble.n	8003b76 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8003b5c:	7e79      	ldrb	r1, [r7, #25]
 8003b5e:	7efa      	ldrb	r2, [r7, #27]
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	69f8      	ldr	r0, [r7, #28]
 8003b72:	f7ff fef3 	bl	800395c <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	db23      	blt.n	8003bc6 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003b84:	3318      	adds	r3, #24
 8003b86:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f015 fb53 	bl	8019238 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003ba4:	7efb      	ldrb	r3, [r7, #27]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb0:	2206      	movs	r2, #6
 8003bb2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003bb6:	e034      	b.n	8003c22 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003bc4:	e02d      	b.n	8003c22 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bcc:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003bd0:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bd8:	e01e      	b.n	8003c18 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003bda:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003bde:	7e39      	ldrb	r1, [r7, #24]
 8003be0:	7efb      	ldrb	r3, [r7, #27]
 8003be2:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	3006      	adds	r0, #6
 8003bea:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003bee:	69f8      	ldr	r0, [r7, #28]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	0052      	lsls	r2, r2, #1
 8003bf4:	441a      	add	r2, r3
 8003bf6:	00d3      	lsls	r3, r2, #3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4413      	add	r3, r2
 8003c04:	442b      	add	r3, r5
 8003c06:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003c0a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003c0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c12:	3301      	adds	r3, #1
 8003c14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c18:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c1c:	7ebb      	ldrb	r3, [r7, #26]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3db      	bcc.n	8003bda <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d109      	bne.n	8003c4a <vl53l1_histo_merge+0x1cc>
 8003c36:	7efb      	ldrb	r3, [r7, #27]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8003c48:	e00e      	b.n	8003c68 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8003c4a:	7efb      	ldrb	r3, [r7, #27]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10b      	bne.n	8003c68 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c56:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c64:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003c68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <vl53l1_histo_merge+0x1f8>
 8003c70:	7efb      	ldrb	r3, [r7, #27]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d069      	beq.n	8003d4a <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7c:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d162      	bne.n	8003d4a <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c88:	e008      	b.n	8003c9c <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8003c8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	3206      	adds	r2, #6
 8003c90:	2100      	movs	r1, #0
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003c96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c98:	3301      	adds	r3, #1
 8003c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c9c:	7ebb      	ldrb	r3, [r7, #26]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3f1      	bcc.n	8003c8a <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003caa:	e02f      	b.n	8003d0c <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cb2:	e023      	b.n	8003cfc <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8003cb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3206      	adds	r2, #6
 8003cba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003cbe:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003cc2:	7efb      	ldrb	r3, [r7, #27]
 8003cc4:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003cc6:	69fc      	ldr	r4, [r7, #28]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	441a      	add	r2, r3
 8003cce:	00d3      	lsls	r3, r2, #3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	442b      	add	r3, r5
 8003cde:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003ce2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003ce6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ce8:	18c1      	adds	r1, r0, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3206      	adds	r2, #6
 8003cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003cf2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cfc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	dbd6      	blt.n	8003cb4 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8003d06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d08:	3301      	adds	r3, #1
 8003d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d0c:	7ebb      	ldrb	r3, [r7, #26]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3ca      	bcc.n	8003cac <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003d16:	e018      	b.n	8003d4a <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1e:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d36:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003d3a:	2bff      	cmp	r3, #255	; 0xff
 8003d3c:	d105      	bne.n	8003d4a <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8003d4a:	bf00      	nop
 8003d4c:	3728      	adds	r7, #40	; 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d54 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0c6      	sub	sp, #280	; 0x118
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d62:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8003d70:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8003d78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d80:	2200      	movs	r2, #0
 8003d82:	2185      	movs	r1, #133	; 0x85
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f010 fa51 	bl	801422c <VL53L1_WrByte>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8003d90:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8003d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f007 f8df 	bl	800af64 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003da6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003db2:	f248 018c 	movw	r1, #32908	; 0x808c
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	f003 f87e 	bl	8006eb8 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d81b      	bhi.n	8003dfc <VL53L1_load_patch+0xa8>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <VL53L1_load_patch+0x78>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de5 	.word	0x08003de5
 8003dd4:	08003ded 	.word	0x08003ded
 8003dd8:	08003df5 	.word	0x08003df5
	case 0:
		patch_power = 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003de2:	e00e      	b.n	8003e02 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8003de4:	2310      	movs	r3, #16
 8003de6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003dea:	e00a      	b.n	8003e02 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8003dec:	2320      	movs	r3, #32
 8003dee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003df2:	e006      	b.n	8003e02 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003dfa:	e002      	b.n	8003e02 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8003e02:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d134      	bne.n	8003e74 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8003e0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e12:	2229      	movs	r2, #41	; 0x29
 8003e14:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003e16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e1e:	22c9      	movs	r2, #201	; 0xc9
 8003e20:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003e22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e2a:	220e      	movs	r2, #14
 8003e2c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003e2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8003e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e42:	2228      	movs	r2, #40	; 0x28
 8003e44:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e54:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8003e56:	f107 020c 	add.w	r2, r7, #12
 8003e5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e5e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003e62:	2306      	movs	r3, #6
 8003e64:	f240 4176 	movw	r1, #1142	; 0x476
 8003e68:	6800      	ldr	r0, [r0, #0]
 8003e6a:	f010 f973 	bl	8014154 <VL53L1_WriteMulti>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003e74:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d132      	bne.n	8003ee2 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8003e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e84:	2203      	movs	r2, #3
 8003e86:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003e88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e90:	226d      	movs	r2, #109	; 0x6d
 8003e92:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003ea0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ea8:	226f      	movs	r2, #111	; 0x6f
 8003eaa:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003eac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003eb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ec0:	2229      	movs	r2, #41	; 0x29
 8003ec2:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8003ec4:	f107 020c 	add.w	r2, r7, #12
 8003ec8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ecc:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003ed0:	2306      	movs	r3, #6
 8003ed2:	f240 4196 	movw	r1, #1174	; 0x496
 8003ed6:	6800      	ldr	r0, [r0, #0]
 8003ed8:	f010 f93c 	bl	8014154 <VL53L1_WriteMulti>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003ee2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11a      	bne.n	8003f20 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8003eea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003ef6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003efe:	2207      	movs	r2, #7
 8003f00:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8003f02:	f107 020c 	add.w	r2, r7, #12
 8003f06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f0a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f240 4172 	movw	r1, #1138	; 0x472
 8003f14:	6800      	ldr	r0, [r0, #0]
 8003f16:	f010 f91d 	bl	8014154 <VL53L1_WriteMulti>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003f20:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11a      	bne.n	8003f5e <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8003f28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003f34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f48:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f240 4174 	movw	r1, #1140	; 0x474
 8003f52:	6800      	ldr	r0, [r0, #0]
 8003f54:	f010 f8fe 	bl	8014154 <VL53L1_WriteMulti>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8003f5e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8003f66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f010 f959 	bl	801422c <VL53L1_WrByte>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8003f80:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8003f88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f90:	2201      	movs	r2, #1
 8003f92:	2185      	movs	r1, #133	; 0x85
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	f010 f949 	bl	801422c <VL53L1_WrByte>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003fa0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop

08003fb0 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8003fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2185      	movs	r1, #133	; 0x85
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f010 f92f 	bl	801422c <VL53L1_WrByte>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f006 ffd4 	bl	800af88 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f010 f91c 	bl	801422c <VL53L1_WrByte>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8003ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8004000:	2201      	movs	r2, #1
 8004002:	2185      	movs	r1, #133	; 0x85
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f010 f911 	bl	801422c <VL53L1_WrByte>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800401a:	b5b0      	push	{r4, r5, r7, lr}
 800401c:	b08a      	sub	sp, #40	; 0x28
 800401e:	af04      	add	r7, sp, #16
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3318      	adds	r3, #24
 800402e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004036:	3308      	adds	r3, #8
 8004038:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800403e:	2162      	movs	r1, #98	; 0x62
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f006 f810 	bl	800a066 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2204      	movs	r2, #4
 800404a:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2210      	movs	r2, #16
 8004056:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004062:	2300      	movs	r3, #0
 8004064:	75bb      	strb	r3, [r7, #22]
 8004066:	e01b      	b.n	80040a0 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8004068:	7dba      	ldrb	r2, [r7, #22]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	3308      	adds	r3, #8
 800407c:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800409a:	7dbb      	ldrb	r3, [r7, #22]
 800409c:	3301      	adds	r3, #1
 800409e:	75bb      	strb	r3, [r7, #22]
 80040a0:	7dbb      	ldrb	r3, [r7, #22]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d9e0      	bls.n	8004068 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80040c6:	2300      	movs	r3, #0
 80040c8:	75bb      	strb	r3, [r7, #22]
 80040ca:	e039      	b.n	8004140 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80040cc:	7dba      	ldrb	r2, [r7, #22]
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80040e2:	7dba      	ldrb	r2, [r7, #22]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80040f8:	7dba      	ldrb	r2, [r7, #22]
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800410e:	7dba      	ldrb	r2, [r7, #22]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004124:	7dba      	ldrb	r2, [r7, #22]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	3301      	adds	r3, #1
 800413e:	75bb      	strb	r3, [r7, #22]
 8004140:	7dbb      	ldrb	r3, [r7, #22]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	d9c2      	bls.n	80040cc <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2201      	movs	r2, #1
 8004150:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2200      	movs	r2, #0
 8004156:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2200      	movs	r2, #0
 800415c:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2201      	movs	r2, #1
 8004162:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2201      	movs	r2, #1
 8004168:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2201      	movs	r2, #1
 800416e:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004176:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800417e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004186:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2264      	movs	r2, #100	; 0x64
 800418c:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004194:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f240 72db 	movw	r2, #2011	; 0x7db
 80041bc:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80041c6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f005 ff2e 	bl	800a02c <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80041d6:	3318      	adds	r3, #24
 80041d8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f015 f82a 	bl	8019238 <memset>
	pdev->bin_rec_pos = 0;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <VL53L1_data_init+0x1fa>
 8004202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8b8 	bl	8004380 <VL53L1_read_p2p_data>
 8004210:	4603      	mov	r3, r0
 8004212:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fdf8 	bl	8007e18 <VL53L1_init_refspadchar_config_struct>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 800422c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fe10 	bl	8007e60 <VL53L1_init_ssc_config_struct>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f003 fe21 	bl	8007ea2 <VL53L1_init_xtalk_config_struct>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004272:	4618      	mov	r0, r3
 8004274:	f003 fe89 	bl	8007f8a <VL53L1_init_xtalk_extract_config_struct>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 800427c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800428a:	4618      	mov	r0, r3
 800428c:	f003 feac 	bl	8007fe8 <VL53L1_init_offset_cal_config_struct>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fec7 	bl	8008036 <VL53L1_init_zone_cal_config_struct>
 80042a8:	4603      	mov	r3, r0
 80042aa:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f003 fedb 	bl	800807e <VL53L1_init_hist_post_process_config_struct>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80042cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 f8f6 	bl	80084cc <VL53L1_init_hist_gen3_dmax_config_struct>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 ff32 	bl	800815c <VL53L1_init_tuning_parm_storage_struct>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80042fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	7858      	ldrb	r0, [r3, #1]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	8b1c      	ldrh	r4, [r3, #24]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	689d      	ldr	r5, [r3, #8]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	6912      	ldr	r2, [r2, #16]
 8004318:	6939      	ldr	r1, [r7, #16]
 800431a:	6949      	ldr	r1, [r1, #20]
 800431c:	9102      	str	r1, [sp, #8]
 800431e:	9201      	str	r2, [sp, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	462b      	mov	r3, r5
 8004324:	4622      	mov	r2, r4
 8004326:	4601      	mov	r1, r0
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fc8f 	bl	8004c4c <VL53L1_set_preset_mode>
 800432e:	4603      	mov	r3, r0
 8004330:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004338:	461a      	mov	r2, r3
 800433a:	2118      	movs	r1, #24
 800433c:	2000      	movs	r0, #0
 800433e:	f00a fa90 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004348:	461a      	mov	r2, r3
 800434a:	2118      	movs	r1, #24
 800434c:	2000      	movs	r0, #0
 800434e:	f00a fa88 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004358:	461a      	mov	r2, r3
 800435a:	210c      	movs	r1, #12
 800435c:	2000      	movs	r0, #0
 800435e:	f006 fc26 	bl	800abae <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f009 fcd2 	bl	800dd0c <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f009 fbd1 	bl	800db10 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f009 fcf7 	bl	800dd62 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bdb0      	pop	{r4, r5, r7, pc}

08004380 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b091      	sub	sp, #68	; 0x44
 8004384:	af04      	add	r7, sp, #16
 8004386:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004388:	2300      	movs	r3, #0
 800438a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3318      	adds	r3, #24
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	3348      	adds	r3, #72	; 0x48
 80043a0:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	339c      	adds	r3, #156	; 0x9c
 80043a6:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80043a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f00d fdd1 	bl	8011f60 <VL53L1_get_static_nvm_managed>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80043c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	3348      	adds	r3, #72	; 0x48
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f00d ff02 	bl	80121dc <VL53L1_get_customer_nvm_managed>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80043de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d117      	bne.n	8004416 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f00e fdda 	bl	8012fa8 <VL53L1_get_nvm_copy_data>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 80043fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f006 f921 	bl	800a658 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004416:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	895b      	ldrh	r3, [r3, #10]
 8004422:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 800443c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004440:	2b00      	cmp	r3, #0
 8004442:	d108      	bne.n	8004456 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	33c0      	adds	r3, #192	; 0xc0
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f00d fc3c 	bl	8011cc8 <VL53L1_read_nvm_optical_centre>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004456:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	3360      	adds	r3, #96	; 0x60
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f00d fc52 	bl	8011d0e <VL53L1_read_nvm_cal_peak_rate_map>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004470:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12d      	bne.n	80044d4 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	339c      	adds	r3, #156	; 0x9c
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f00d fc6b 	bl	8011d5a <VL53L1_read_nvm_additional_offset_cal_data>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	889b      	ldrh	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d120      	bne.n	80044d4 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11c      	bne.n	80044d4 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2280      	movs	r2, #128	; 0x80
 800449e:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80044a6:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	3102      	adds	r1, #2
 80044c0:	9103      	str	r1, [sp, #12]
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	2238      	movs	r2, #56	; 0x38
 80044c6:	9201      	str	r2, [sp, #4]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	23ff      	movs	r3, #255	; 0xff
 80044cc:	22c7      	movs	r2, #199	; 0xc7
 80044ce:	4621      	mov	r1, r4
 80044d0:	f008 f934 	bl	800c73c <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80044d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12f      	bne.n	800453c <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f00d fc5a 	bl	8011da0 <VL53L1_read_nvm_fmt_range_results_data>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 80044f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d120      	bne.n	800453c <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80044fa:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004502:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800450a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004518:	2b00      	cmp	r3, #0
 800451a:	d006      	beq.n	800452a <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004528:	e003      	b.n	8004532 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	2214      	movs	r2, #20
 800452e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004538:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 800453c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800454a:	3308      	adds	r3, #8
 800454c:	461a      	mov	r2, r3
 800454e:	21de      	movs	r1, #222	; 0xde
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f00f fefb 	bl	801434c <VL53L1_RdWord>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d204      	bcs.n	8004572 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800456e:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004572:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	33bc      	adds	r3, #188	; 0xbc
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f97d 	bl	8004880 <VL53L1_get_mode_mitigation_roi>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d114      	bne.n	80045c0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80045c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3734      	adds	r7, #52	; 0x34
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3318      	adds	r3, #24
 80045de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80045ee:	23f1      	movs	r3, #241	; 0xf1
 80045f0:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80045f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800460a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3318      	adds	r3, #24
 800463a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004642:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800464a:	23f1      	movs	r3, #241	; 0xf1
 800464c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004662:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004666:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af02      	add	r7, sp, #8
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3318      	adds	r3, #24
 8004694:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80046a0:	23f1      	movs	r3, #241	; 0xf1
 80046a2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80046a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11b      	bne.n	80046e4 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f203 3362 	addw	r3, r3, #866	; 0x362
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	f502 725e 	add.w	r2, r2, #888	; 0x378
 80046d0:	9201      	str	r2, [sp, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	460b      	mov	r3, r1
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f006 fe0b 	bl	800b2f6 <VL53L1_calc_timeout_register_values>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80046e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3318      	adds	r3, #24
 8004706:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800471a:	23f1      	movs	r3, #241	; 0xf1
 800471c:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800471e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d14a      	bne.n	80047bc <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f006 fc56 	bl	800afe6 <VL53L1_calc_macro_period_us>
 800473a:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	4618      	mov	r0, r3
 8004746:	f006 fd14 	bl	800b172 <VL53L1_calc_timeout_us>
 800474a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004756:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004758:	8a7b      	ldrh	r3, [r7, #18]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004764:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004766:	4413      	add	r3, r2
 8004768:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	6979      	ldr	r1, [r7, #20]
 800476e:	4618      	mov	r0, r3
 8004770:	f006 fd66 	bl	800b240 <VL53L1_calc_decoded_timeout_us>
 8004774:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004780:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004782:	8a7b      	ldrh	r3, [r7, #18]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 800478e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004790:	4413      	add	r3, r2
 8004792:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004794:	8a7b      	ldrh	r3, [r7, #18]
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	4618      	mov	r0, r3
 800479a:	f006 fd51 	bl	800b240 <VL53L1_calc_decoded_timeout_us>
 800479e:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80047bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	460b      	mov	r3, r1
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3318      	adds	r3, #24
 80047de:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d81c      	bhi.n	8004824 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 80047ea:	7afb      	ldrb	r3, [r7, #11]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	2201      	movs	r2, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004800:	7dbb      	ldrb	r3, [r7, #22]
 8004802:	4013      	ands	r3, r2
 8004804:	b2da      	uxtb	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	fa42 f303 	asr.w	r3, r2, r3
 800481c:	b2da      	uxtb	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e001      	b.n	8004828 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004824:	23fc      	movs	r3, #252	; 0xfc
 8004826:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3318      	adds	r3, #24
 800484a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	7858      	ldrb	r0, [r3, #1]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	7819      	ldrb	r1, [r3, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f203 339f 	addw	r3, r3, #927	; 0x39f
 800485a:	461a      	mov	r2, r3
 800485c:	f007 fdeb 	bl	800c436 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7898      	ldrb	r0, [r3, #2]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	78d9      	ldrb	r1, [r3, #3]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800486e:	461a      	mov	r2, r3
 8004870:	f007 fe20 	bl	800c4b4 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3318      	adds	r3, #24
 8004892:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80048a6:	f107 020e 	add.w	r2, r7, #14
 80048aa:	f107 010d 	add.w	r1, r7, #13
 80048ae:	4618      	mov	r0, r3
 80048b0:	f00a f880 	bl	800e9b4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80048b4:	7bba      	ldrb	r2, [r7, #14]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80048ba:	7b7a      	ldrb	r2, [r7, #13]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80048c6:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80048de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3318      	adds	r3, #24
 80048fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	331c      	adds	r3, #28
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	4619      	mov	r1, r3
 800490c:	f014 fc86 	bl	801921c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	785a      	ldrb	r2, [r3, #1]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	33c2      	adds	r3, #194	; 0xc2
 8004928:	4618      	mov	r0, r3
 800492a:	f00f fbce 	bl	80140ca <VL53L1_init_zone_config_histogram_bins>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004942:	e00f      	b.n	8004964 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d807      	bhi.n	800495c <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	3301      	adds	r3, #1
 8004952:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800495a:	e003      	b.n	8004964 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2211      	movs	r2, #17
 8004960:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004964:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3318      	adds	r3, #24
 8004982:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	33c2      	adds	r3, #194	; 0xc2
 8004988:	226c      	movs	r2, #108	; 0x6c
 800498a:	4619      	mov	r1, r3
 800498c:	6838      	ldr	r0, [r7, #0]
 800498e:	f014 fc45 	bl	801921c <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	460b      	mov	r3, r1
 80049ae:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3318      	adds	r3, #24
 80049b8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	3b01      	subs	r3, #1
 80049be:	2b26      	cmp	r3, #38	; 0x26
 80049c0:	f200 8139 	bhi.w	8004c36 <VL53L1_get_preset_mode_timing_cfg+0x296>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a69 	.word	0x08004a69
 80049d0:	08004a69 	.word	0x08004a69
 80049d4:	08004a69 	.word	0x08004a69
 80049d8:	08004a69 	.word	0x08004a69
 80049dc:	08004a69 	.word	0x08004a69
 80049e0:	08004a93 	.word	0x08004a93
 80049e4:	08004a93 	.word	0x08004a93
 80049e8:	08004a93 	.word	0x08004a93
 80049ec:	08004c37 	.word	0x08004c37
 80049f0:	08004c37 	.word	0x08004c37
 80049f4:	08004ae7 	.word	0x08004ae7
 80049f8:	08004b8f 	.word	0x08004b8f
 80049fc:	08004ae7 	.word	0x08004ae7
 8004a00:	08004c37 	.word	0x08004c37
 8004a04:	08004c37 	.word	0x08004c37
 8004a08:	08004c37 	.word	0x08004c37
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a93 	.word	0x08004a93
 8004a14:	08004ae7 	.word	0x08004ae7
 8004a18:	08004ae7 	.word	0x08004ae7
 8004a1c:	08004ae7 	.word	0x08004ae7
 8004a20:	08004ae7 	.word	0x08004ae7
 8004a24:	08004ae7 	.word	0x08004ae7
 8004a28:	08004b11 	.word	0x08004b11
 8004a2c:	08004b3b 	.word	0x08004b3b
 8004a30:	08004b65 	.word	0x08004b65
 8004a34:	08004ae7 	.word	0x08004ae7
 8004a38:	08004ae7 	.word	0x08004ae7
 8004a3c:	08004ae7 	.word	0x08004ae7
 8004a40:	08004bb9 	.word	0x08004bb9
 8004a44:	08004bb9 	.word	0x08004bb9
 8004a48:	08004bb9 	.word	0x08004bb9
 8004a4c:	08004be3 	.word	0x08004be3
 8004a50:	08004be3 	.word	0x08004be3
 8004a54:	08004be3 	.word	0x08004be3
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004abd 	.word	0x08004abd
 8004a60:	08004abd 	.word	0x08004abd
 8004a64:	08004c0d 	.word	0x08004c0d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	601a      	str	r2, [r3, #0]
	break;
 8004a90:	e0d4      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	601a      	str	r2, [r3, #0]
	break;
 8004aba:	e0bf      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	601a      	str	r2, [r3, #0]
	break;
 8004ae4:	e0aa      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	601a      	str	r2, [r3, #0]

	break;
 8004b0e:	e095      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	601a      	str	r2, [r3, #0]
	break;
 8004b38:	e080      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	601a      	str	r2, [r3, #0]
	break;
 8004b62:	e06b      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	601a      	str	r2, [r3, #0]
	break;
 8004b8c:	e056      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	601a      	str	r2, [r3, #0]
	break;
 8004bb6:	e041      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	601a      	str	r2, [r3, #0]
	break;
 8004be0:	e02c      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	601a      	str	r2, [r3, #0]
	break;
 8004c0a:	e017      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	601a      	str	r2, [r3, #0]
	break;
 8004c34:	e002      	b.n	8004c3c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004c36:	23fc      	movs	r3, #252	; 0xfc
 8004c38:	75fb      	strb	r3, [r7, #23]
		break;
 8004c3a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b098      	sub	sp, #96	; 0x60
 8004c50:	af06      	add	r7, sp, #24
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	72fb      	strb	r3, [r7, #11]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3318      	adds	r3, #24
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004c70:	3308      	adds	r3, #8
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	f203 3342 	addw	r3, r3, #834	; 0x342
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c86:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c96:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004caa:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cae:	33c2      	adds	r3, #194	; 0xc2
 8004cb0:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004cb8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8004cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8004cc0:	3318      	adds	r3, #24
 8004cc2:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc6:	7afa      	ldrb	r2, [r7, #11]
 8004cc8:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cce:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cd4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cda:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8004cdc:	2103      	movs	r1, #3
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f005 f9c1 	bl	800a066 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	2b26      	cmp	r3, #38	; 0x26
 8004cea:	f200 8321 	bhi.w	8005330 <VL53L1_set_preset_mode+0x6e4>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <VL53L1_set_preset_mode+0xa8>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d91 	.word	0x08004d91
 8004cf8:	08004db5 	.word	0x08004db5
 8004cfc:	08004dd9 	.word	0x08004dd9
 8004d00:	08004dfd 	.word	0x08004dfd
 8004d04:	08004e21 	.word	0x08004e21
 8004d08:	08004e45 	.word	0x08004e45
 8004d0c:	08004e69 	.word	0x08004e69
 8004d10:	08004e8d 	.word	0x08004e8d
 8004d14:	08005331 	.word	0x08005331
 8004d18:	08005331 	.word	0x08005331
 8004d1c:	08004eb1 	.word	0x08004eb1
 8004d20:	08005019 	.word	0x08005019
 8004d24:	080051a9 	.word	0x080051a9
 8004d28:	080051d1 	.word	0x080051d1
 8004d2c:	080051f9 	.word	0x080051f9
 8004d30:	08005221 	.word	0x08005221
 8004d34:	08005249 	.word	0x08005249
 8004d38:	0800526d 	.word	0x0800526d
 8004d3c:	08004ff1 	.word	0x08004ff1
 8004d40:	08004ed9 	.word	0x08004ed9
 8004d44:	08004f01 	.word	0x08004f01
 8004d48:	08004f29 	.word	0x08004f29
 8004d4c:	08004f51 	.word	0x08004f51
 8004d50:	08004f79 	.word	0x08004f79
 8004d54:	08004fa1 	.word	0x08004fa1
 8004d58:	08004fc9 	.word	0x08004fc9
 8004d5c:	08005041 	.word	0x08005041
 8004d60:	08005069 	.word	0x08005069
 8004d64:	08005091 	.word	0x08005091
 8004d68:	080050b9 	.word	0x080050b9
 8004d6c:	080050e1 	.word	0x080050e1
 8004d70:	08005109 	.word	0x08005109
 8004d74:	08005131 	.word	0x08005131
 8004d78:	08005159 	.word	0x08005159
 8004d7c:	08005181 	.word	0x08005181
 8004d80:	08005291 	.word	0x08005291
 8004d84:	080052b9 	.word	0x080052b9
 8004d88:	080052e1 	.word	0x080052e1
 8004d8c:	08005309 	.word	0x08005309

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	9302      	str	r3, [sp, #8]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004da8:	f003 fbc6 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004db2:	e2c1      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	9302      	str	r3, [sp, #8]
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dcc:	f003 fd2d 	bl	800882a <VL53L1_preset_mode_standard_ranging_short_range>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004dd6:	e2af      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	9303      	str	r3, [sp, #12]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004df0:	f003 fd60 	bl	80088b4 <VL53L1_preset_mode_standard_ranging_long_range>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004dfa:	e29d      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	9302      	str	r3, [sp, #8]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e14:	f003 fd93 	bl	800893e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e1e:	e28b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	9303      	str	r3, [sp, #12]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	9302      	str	r3, [sp, #8]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e38:	f003 fdaa 	bl	8008990 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e42:	e279      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e5c:	f003 fdc1 	bl	80089e2 <VL53L1_preset_mode_timed_ranging>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e66:	e267      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	9303      	str	r3, [sp, #12]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	9302      	str	r3, [sp, #8]
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e80:	f003 fded 	bl	8008a5e <VL53L1_preset_mode_timed_ranging_short_range>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e8a:	e255      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	9303      	str	r3, [sp, #12]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	9302      	str	r3, [sp, #8]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ea4:	f003 fe19 	bl	8008ada <VL53L1_preset_mode_timed_ranging_long_range>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004eae:	e243      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	9302      	str	r3, [sp, #8]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004eca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ecc:	f003 fefb 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004ed6:	e22f      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ef2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ef4:	f003 ff7c 	bl	8008df0 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004efe:	e21b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f1c:	f003 ffcc 	bl	8008eb8 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f26:	e207      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f44:	f003 ffe0 	bl	8008f08 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f4e:	e1f3      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f6c:	f004 f830 	bl	8008fd0 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f76:	e1df      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f94:	f004 fe25 	bl	8009be2 <VL53L1_preset_mode_histogram_multizone>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f9e:	e1cb      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	9303      	str	r3, [sp, #12]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fbc:	f004 fe63 	bl	8009c86 <VL53L1_preset_mode_histogram_multizone_short_range>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004fc6:	e1b7      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fe2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fe4:	f004 fea1 	bl	8009d2a <VL53L1_preset_mode_histogram_multizone_long_range>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004fee:	e1a3      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	9303      	str	r3, [sp, #12]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	9302      	str	r3, [sp, #8]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800500a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800500c:	f004 ffde 	bl	8009fcc <VL53L1_preset_mode_histogram_ranging_ref>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005016:	e18f      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	9303      	str	r3, [sp, #12]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005034:	f003 fff4 	bl	8009020 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800503e:	e17b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	9302      	str	r3, [sp, #8]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800505a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800505c:	f004 f86c 	bl	8009138 <VL53L1_preset_mode_histogram_long_range>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005066:	e167      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	9303      	str	r3, [sp, #12]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005084:	f004 f8f6 	bl	8009274 <VL53L1_preset_mode_histogram_long_range_mm1>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800508e:	e153      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ac:	f004 f943 	bl	8009336 <VL53L1_preset_mode_histogram_long_range_mm2>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80050b6:	e13f      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050d4:	f004 f957 	bl	8009386 <VL53L1_preset_mode_histogram_medium_range>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80050de:	e12b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050fc:	f004 f9e1 	bl	80094c2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005106:	e117      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005124:	f004 fa2e 	bl	8009584 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800512e:	e103      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	9302      	str	r3, [sp, #8]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005148:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800514a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800514c:	f004 fa42 	bl	80095d4 <VL53L1_preset_mode_histogram_short_range>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005156:	e0ef      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9303      	str	r3, [sp, #12]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005174:	f004 fb4c 	bl	8009810 <VL53L1_preset_mode_histogram_short_range_mm1>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800517e:	e0db      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	9303      	str	r3, [sp, #12]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005198:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800519a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800519c:	f004 fb99 	bl	80098d2 <VL53L1_preset_mode_histogram_short_range_mm2>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051a6:	e0c7      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	9302      	str	r3, [sp, #8]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051c4:	f004 fbad 	bl	8009922 <VL53L1_preset_mode_histogram_characterisation>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051ce:	e0b3      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051ec:	f004 fbca 	bl	8009984 <VL53L1_preset_mode_histogram_xtalk_planar>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051f6:	e09f      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	9303      	str	r3, [sp, #12]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005212:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005214:	f004 fc2d 	bl	8009a72 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800521e:	e08b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	9302      	str	r3, [sp, #8]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005238:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800523a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800523c:	f004 fcad 	bl	8009b9a <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005246:	e077      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	9302      	str	r3, [sp, #8]
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800525e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005260:	f004 fdb5 	bl	8009dce <VL53L1_preset_mode_olt>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800526a:	e065      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005282:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005284:	f003 fce5 	bl	8008c52 <VL53L1_preset_mode_singleshot_ranging>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800528e:	e053      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	9302      	str	r3, [sp, #8]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052ac:	f003 fc7d 	bl	8008baa <VL53L1_preset_mode_low_power_auto_short_ranging>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80052b6:	e03f      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052d4:	f003 fc3f 	bl	8008b56 <VL53L1_preset_mode_low_power_auto_ranging>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80052de:	e02b      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052fc:	f003 fc7f 	bl	8008bfe <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005306:	e017      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005320:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005322:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005324:	f004 f9f4 	bl	8009710 <VL53L1_preset_mode_special_histogram_short_range>
 8005328:	4603      	mov	r3, r0
 800532a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800532e:	e003      	b.n	8005338 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005330:	23fc      	movs	r3, #252	; 0xfc
 8005332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005336:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005338:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	893a      	ldrh	r2, [r7, #8]
 8005344:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	893a      	ldrh	r2, [r7, #8]
 800534a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 800534c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff f98f 	bl	800467e <VL53L1_set_timeouts_us>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005366:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800536e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff f92b 	bl	80045cc <VL53L1_set_inter_measurement_period_ms>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005382:	3301      	adds	r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f005 fa82 	bl	800a898 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005394:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005398:	4618      	mov	r0, r3
 800539a:	3748      	adds	r7, #72	; 0x48
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3318      	adds	r3, #24
 80053b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80053be:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3318      	adds	r3, #24
 80053e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 80053ec:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3318      	adds	r3, #24
 800540e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3318      	adds	r3, #24
 800543e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	887a      	ldrh	r2, [r7, #2]
 8005444:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005448:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b0d2      	sub	sp, #328	; 0x148
 800545c:	af00      	add	r7, sp, #0
 800545e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005462:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005466:	6018      	str	r0, [r3, #0]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005470:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005474:	4602      	mov	r2, r0
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800547c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005480:	460a      	mov	r2, r1
 8005482:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800548a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800548e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3318      	adds	r3, #24
 8005496:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 800549a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800549e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80054a8:	3308      	adds	r3, #8
 80054aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80054ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054b2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80054b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80054ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054be:	3348      	adds	r3, #72	; 0x48
 80054c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80054c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054c8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80054cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80054d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054d4:	f203 3362 	addw	r3, r3, #866	; 0x362
 80054d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80054dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054e0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80054e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80054e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054ec:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80054f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80054f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054f8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80054fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005500:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005504:	332c      	adds	r3, #44	; 0x2c
 8005506:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800550a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800550e:	3348      	adds	r3, #72	; 0x48
 8005510:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005534:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005538:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800553c:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005544:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005552:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005556:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 800555a:	f993 3000 	ldrsb.w	r3, [r3]
 800555e:	4313      	orrs	r3, r2
 8005560:	b25b      	sxtb	r3, r3
 8005562:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005564:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005568:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800556a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800556e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005572:	3336      	adds	r3, #54	; 0x36
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800557a:	4413      	add	r3, r2
 800557c:	1d9a      	adds	r2, r3, #6
 800557e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005582:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005586:	4611      	mov	r1, r2
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f7ff f955 	bl	8004838 <VL53L1_set_user_zone>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005594:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005598:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d019      	beq.n	80055d4 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 80055a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055a8:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80055b6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80055ba:	4413      	add	r3, r2
 80055bc:	1c9a      	adds	r2, r3, #2
 80055be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80055c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055c6:	4611      	mov	r1, r2
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f001 fbd7 	bl	8006d7c <VL53L1_set_zone_dss_config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80055d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055d8:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80055e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055e8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80055f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055f4:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80055f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055fc:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005600:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005608:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 800560c:	2bff      	cmp	r3, #255	; 0xff
 800560e:	d106      	bne.n	800561e <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005610:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005618:	2200      	movs	r2, #0
 800561a:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800561e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005626:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800562a:	2b01      	cmp	r3, #1
 800562c:	d139      	bne.n	80056a2 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800562e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800563a:	2b00      	cmp	r3, #0
 800563c:	d131      	bne.n	80056a2 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800563e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005642:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005646:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005652:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 800565c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005660:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 800566c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005670:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005674:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005676:	b21a      	sxth	r2, r3
 8005678:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800567c:	825a      	strh	r2, [r3, #18]
 800567e:	e003      	b.n	8005688 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005680:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005684:	2200      	movs	r2, #0
 8005686:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005688:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800568c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d805      	bhi.n	80056a2 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005696:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800569a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800569e:	2205      	movs	r2, #5
 80056a0:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80056a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d117      	bne.n	80056e2 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80056b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ba:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d10f      	bne.n	80056e2 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80056c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ca:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 80056ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056d2:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80056d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80056da:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80056de:	2206      	movs	r2, #6
 80056e0:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 80056e2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 80056ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80056ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f007 f98c 	bl	800ca10 <VL53L1_save_cfg_data>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 80056fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005702:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	3b01      	subs	r3, #1
 800570a:	2b05      	cmp	r3, #5
 800570c:	d826      	bhi.n	800575c <VL53L1_init_and_start_range+0x304>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <VL53L1_init_and_start_range+0x2bc>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005755 	.word	0x08005755
 8005718:	0800574d 	.word	0x0800574d
 800571c:	08005745 	.word	0x08005745
 8005720:	0800573d 	.word	0x0800573d
 8005724:	08005735 	.word	0x08005735
 8005728:	0800572d 	.word	0x0800572d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800572c:	2301      	movs	r3, #1
 800572e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005732:	e017      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005734:	230d      	movs	r3, #13
 8005736:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800573a:	e013      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800573c:	2324      	movs	r3, #36	; 0x24
 800573e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005742:	e00f      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005744:	2344      	movs	r3, #68	; 0x44
 8005746:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800574a:	e00b      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800574c:	235a      	movs	r3, #90	; 0x5a
 800574e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005752:	e007      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005754:	2371      	movs	r3, #113	; 0x71
 8005756:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800575a:	e003      	b.n	8005764 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800575c:	2383      	movs	r3, #131	; 0x83
 800575e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005762:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005764:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005768:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800576c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005778:	2300      	movs	r3, #0
 800577a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800577e:	e00b      	b.n	8005798 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005780:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800578e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005792:	3301      	adds	r3, #1
 8005794:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005798:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800579c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3ed      	bcc.n	8005780 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80057a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80057a8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d917      	bls.n	80057e2 <VL53L1_init_and_start_range+0x38a>
 80057b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d113      	bne.n	80057e2 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80057ba:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80057be:	f1c3 0301 	rsb	r3, r3, #1
 80057c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80057c6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80057ca:	f107 020c 	add.w	r2, r7, #12
 80057ce:	4413      	add	r3, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	210b      	movs	r1, #11
 80057d4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80057d8:	f00c fb0d 	bl	8011df6 <VL53L1_i2c_encode_static_nvm_managed>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80057e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80057e6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d917      	bls.n	8005820 <VL53L1_init_and_start_range+0x3c8>
 80057f0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80057f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80057fc:	f1c3 030d 	rsb	r3, r3, #13
 8005800:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005804:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005808:	f107 020c 	add.w	r2, r7, #12
 800580c:	4413      	add	r3, r2
 800580e:	461a      	mov	r2, r3
 8005810:	2117      	movs	r1, #23
 8005812:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005816:	f00c fbca 	bl	8011fae <VL53L1_i2c_encode_customer_nvm_managed>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005820:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005824:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d917      	bls.n	800585e <VL53L1_init_and_start_range+0x406>
 800582e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005836:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800583a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800583e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005842:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005846:	f107 020c 	add.w	r2, r7, #12
 800584a:	4413      	add	r3, r2
 800584c:	461a      	mov	r2, r3
 800584e:	2120      	movs	r1, #32
 8005850:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005854:	f00c fce9 	bl	801222a <VL53L1_i2c_encode_static_config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800585e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005862:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d917      	bls.n	800589c <VL53L1_init_and_start_range+0x444>
 800586c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005870:	2b00      	cmp	r3, #0
 8005872:	d113      	bne.n	800589c <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005874:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005878:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800587c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005880:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005884:	f107 020c 	add.w	r2, r7, #12
 8005888:	4413      	add	r3, r2
 800588a:	461a      	mov	r2, r3
 800588c:	2116      	movs	r1, #22
 800588e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005892:	f00c fdad 	bl	80123f0 <VL53L1_i2c_encode_general_config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800589c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058a0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d917      	bls.n	80058da <VL53L1_init_and_start_range+0x482>
 80058aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80058b2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80058b6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80058ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80058be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80058c2:	f107 020c 	add.w	r2, r7, #12
 80058c6:	4413      	add	r3, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	2117      	movs	r1, #23
 80058cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80058d0:	f00c fe12 	bl	80124f8 <VL53L1_i2c_encode_timing_config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80058da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058de:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d036      	beq.n	8005956 <VL53L1_init_and_start_range+0x4fe>
 80058e8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d132      	bne.n	8005956 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80058f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80058f4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80058f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80058fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005900:	791b      	ldrb	r3, [r3, #4]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800591a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800591c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005920:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005934:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005938:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800593a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800593e:	f107 020c 	add.w	r2, r7, #12
 8005942:	4413      	add	r3, r2
 8005944:	461a      	mov	r2, r3
 8005946:	2112      	movs	r1, #18
 8005948:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800594c:	f00c fe56 	bl	80125fc <VL53L1_i2c_encode_dynamic_config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005956:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800595a:	2b00      	cmp	r3, #0
 800595c:	d113      	bne.n	8005986 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800595e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005962:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005966:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800596a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800596e:	f107 020c 	add.w	r2, r7, #12
 8005972:	4413      	add	r3, r2
 8005974:	461a      	mov	r2, r3
 8005976:	2105      	movs	r1, #5
 8005978:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800597c:	f00c fec3 	bl	8012706 <VL53L1_i2c_encode_system_control>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005986:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10f      	bne.n	80059ae <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 800598e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005992:	f107 020c 	add.w	r2, r7, #12
 8005996:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800599a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800599e:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	f00e fbd6 	bl	8014154 <VL53L1_WriteMulti>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 80059ae:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80059b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	f004 fb82 	bl	800a0c8 <VL53L1_update_ll_driver_rd_state>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 80059ca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80059d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	f004 fd15 	bl	800a40a <VL53L1_update_ll_driver_cfg_state>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80059e6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3318      	adds	r3, #24
 8005a04:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f00c fea1 	bl	801277c <VL53L1_set_system_control>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005a50:	2103      	movs	r1, #3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f004 fb07 	bl	800a066 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005a5e:	3301      	adds	r3, #1
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f004 ff14 	bl	800a898 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f004 ff46 	bl	800a902 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7c:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d102      	bne.n	8005a8a <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f008 f9b4 	bl	800ddf2 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b0c8      	sub	sp, #288	; 0x120
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005aa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005aa4:	6018      	str	r0, [r3, #0]
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005aac:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005ab0:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ab8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005abc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005ac8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005acc:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005ad0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005ad4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ad8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005adc:	331c      	adds	r3, #28
 8005ade:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005ae2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ae6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8005aee:	2388      	movs	r3, #136	; 0x88
 8005af0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8005b00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005b04:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d008      	beq.n	8005b20 <VL53L1_get_measurement_results+0x8a>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d10d      	bne.n	8005b2e <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005b12:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005b16:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005b1a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005b1e:	e00a      	b.n	8005b36 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8005b20:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005b24:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005b28:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005b2c:	e003      	b.n	8005b36 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8005b2e:	232c      	movs	r3, #44	; 0x2c
 8005b30:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005b34:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8005b36:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8005b3e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005b42:	f107 0208 	add.w	r2, r7, #8
 8005b46:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005b4a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005b4e:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8005b52:	6800      	ldr	r0, [r0, #0]
 8005b54:	f00e fb34 	bl	80141c0 <VL53L1_ReadMulti>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005b5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005b62:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d917      	bls.n	8005b9c <VL53L1_get_measurement_results+0x106>
 8005b6c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d113      	bne.n	8005b9c <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005b74:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005b78:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005b7c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005b80:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8005b84:	f107 0208 	add.w	r2, r7, #8
 8005b88:	4413      	add	r3, r2
 8005b8a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005b8e:	4619      	mov	r1, r3
 8005b90:	2038      	movs	r0, #56	; 0x38
 8005b92:	f00c ff71 	bl	8012a78 <VL53L1_i2c_decode_debug_results>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005b9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005ba0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d017      	beq.n	8005bda <VL53L1_get_measurement_results+0x144>
 8005baa:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d113      	bne.n	8005bda <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005bb2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005bb6:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005bba:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005bbe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005bc2:	f107 0208 	add.w	r2, r7, #8
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005bcc:	4619      	mov	r1, r3
 8005bce:	2021      	movs	r0, #33	; 0x21
 8005bd0:	f00c fef1 	bl	80129b6 <VL53L1_i2c_decode_core_results>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005bda:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d110      	bne.n	8005c04 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005be8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	202c      	movs	r0, #44	; 0x2c
 8005bfa:	f00c fde6 	bl	80127ca <VL53L1_i2c_decode_system_results>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c04:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	b0a0      	sub	sp, #128	; 0x80
 8005c18:	af06      	add	r7, sp, #24
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005c34:	3308      	adds	r3, #8
 8005c36:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8005c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3a:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005c42:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8005c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c46:	332c      	adds	r3, #44	; 0x2c
 8005c48:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8005c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4c:	33c2      	adds	r3, #194	; 0xc2
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c60:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8005c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c68:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8005c74:	3318      	adds	r3, #24
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c82:	3348      	adds	r3, #72	; 0x48
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8005c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c88:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8005c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c90:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8005c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c98:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ca6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <VL53L1_get_device_results+0xa0>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <VL53L1_get_device_results+0xa2>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8005cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cba:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 82a9 	beq.w	800621a <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8005cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fbd7 	bl	8006484 <VL53L1_get_histogram_bin_data>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8005cdc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d118      	bne.n	8005d16 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d114      	bne.n	8005d16 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8005cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8005cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfe:	4413      	add	r3, r2
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d04:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f005 fb6c 	bl	800b3e8 <VL53L1_hist_copy_and_scale_ambient_info>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8005d16:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8220 	bne.w	8006160 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005d20:	f107 0313 	add.w	r3, r7, #19
 8005d24:	4619      	mov	r1, r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f008 f91a 	bl	800df60 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8005d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8005d46:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	3202      	adds	r2, #2
 8005d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8005d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d58:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f005 fa41 	bl	800b1f4 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8005d72:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d80:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8005d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d92:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d98:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8005da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dac:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8005db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db2:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db8:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8005dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dbe:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8005de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de4:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8005de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de8:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8005dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dee:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f004 fc2f 	bl	800a658 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	795b      	ldrb	r3, [r3, #5]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d048      	beq.n	8005e94 <VL53L1_get_device_results+0x282>
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	dc56      	bgt.n	8005eb4 <VL53L1_get_device_results+0x2a2>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d002      	beq.n	8005e10 <VL53L1_get_device_results+0x1fe>
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d02e      	beq.n	8005e6c <VL53L1_get_device_results+0x25a>
 8005e0e:	e051      	b.n	8005eb4 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8005e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e12:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8005e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8005e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e28:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8005e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2e:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8005e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3a:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8005e3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005e40:	319c      	adds	r1, #156	; 0x9c
 8005e42:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005e44:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8005e48:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8005e4c:	b2a4      	uxth	r4, r4
 8005e4e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8005e50:	351c      	adds	r5, #28
 8005e52:	9505      	str	r5, [sp, #20]
 8005e54:	9404      	str	r4, [sp, #16]
 8005e56:	9003      	str	r0, [sp, #12]
 8005e58:	9102      	str	r1, [sp, #8]
 8005e5a:	9201      	str	r2, [sp, #4]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4643      	mov	r3, r8
 8005e60:	4672      	mov	r2, lr
 8005e62:	4661      	mov	r1, ip
 8005e64:	4630      	mov	r0, r6
 8005e66:	f006 fa36 	bl	800c2d6 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8005e6a:	e027      	b.n	8005ebc <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8005e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8005e76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e7a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8005e8a:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8005e8c:	b21a      	sxth	r2, r3
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	839a      	strh	r2, [r3, #28]
		break;
 8005e92:	e013      	b.n	8005ebc <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	331c      	adds	r3, #28
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005e9c:	f7fd fcf7 	bl	800388e <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	b21a      	sxth	r2, r3
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	839a      	strh	r2, [r3, #28]
		break;
 8005eb2:	e003      	b.n	8005ebc <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	839a      	strh	r2, [r3, #28]
		break;
 8005eba:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8005ebc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 814f 	bne.w	8006164 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eda:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 8005ede:	b29c      	uxth	r4, r3
 8005ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee2:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4623      	mov	r3, r4
 8005eea:	f006 fb99 	bl	800c620 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	7999      	ldrb	r1, [r3, #6]
 8005ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 ff7b 	bl	8006df6 <VL53L1_get_dmax_calibration_data>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8005f06:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 812c 	bne.w	8006168 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8005f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f12:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8005f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f18:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8005f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8005f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f24:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005f2e:	3308      	adds	r3, #8
				pdev->wArea2,
 8005f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f32:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8005f36:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8005f38:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005f3a:	9405      	str	r4, [sp, #20]
 8005f3c:	f107 0413 	add.w	r4, r7, #19
 8005f40:	9404      	str	r4, [sp, #16]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	9302      	str	r3, [sp, #8]
 8005f46:	9001      	str	r0, [sp, #4]
 8005f48:	9100      	str	r1, [sp, #0]
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f00e fb45 	bl	80145e0 <VL53L1_ipp_hist_process_data>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8005f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d050      	beq.n	8006006 <VL53L1_get_device_results+0x3f4>
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d94d      	bls.n	8006006 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005f70:	e045      	b.n	8005ffe <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8005f72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005f76:	224c      	movs	r2, #76	; 0x4c
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f80:	4413      	add	r3, r2
 8005f82:	3304      	adds	r3, #4
 8005f84:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	7cfa      	ldrb	r2, [r7, #19]
 8005f8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	7cfa      	ldrb	r2, [r7, #19]
 8005f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	7cfa      	ldrb	r2, [r7, #19]
 8005fa8:	fb93 f2f2 	sdiv	r2, r3, r2
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005fd8:	461a      	mov	r2, r3
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	7cfa      	ldrb	r2, [r7, #19]
 8005fec:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005ff4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005ffe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006002:	2b03      	cmp	r3, #3
 8006004:	d9b5      	bls.n	8005f72 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8006006:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 80ae 	bne.w	800616c <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8006010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006012:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006018:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800601c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800601e:	330e      	adds	r3, #14
 8006020:	461a      	mov	r2, r3
 8006022:	f006 f922 	bl	800c26a <VL53L1_hist_wrap_dmax>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 800602c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 809d 	bne.w	8006170 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800603c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006048:	4413      	add	r3, r2
 800604a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800604c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800605c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800605e:	4413      	add	r3, r2
 8006060:	f103 0208 	add.w	r2, r3, #8
 8006064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f005 fc1d 	bl	800b8a6 <VL53L1_hist_phase_consistency_check>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8006072:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006076:	2b00      	cmp	r3, #0
 8006078:	d17c      	bne.n	8006174 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800607a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608c:	4413      	add	r3, r2
 800608e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006090:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006094:	4613      	mov	r3, r2
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80060a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060a2:	4413      	add	r3, r2
 80060a4:	f103 0208 	add.w	r2, r3, #8
 80060a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f006 f883 	bl	800c1ba <VL53L1_hist_xmonitor_consistency_check>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 80060ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d15a      	bne.n	8006178 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80060c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2210      	movs	r2, #16
 80060d0:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80060d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80060d8:	3301      	adds	r3, #1
 80060da:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060e6:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80060e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ea:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80060ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d222      	bcs.n	800613c <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80060f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8006110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006112:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800611a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006126:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800612e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006130:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 800613c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11b      	bne.n	800617c <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006146:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800614a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800614c:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8006150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006152:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006156:	331c      	adds	r3, #28
 8006158:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800615a:	f006 fbbe 	bl	800c8da <VL53L1_hist_copy_results_to_sys_and_core>
 800615e:	e00e      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006160:	bf00      	nop
 8006162:	e00c      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006164:	bf00      	nop
 8006166:	e00a      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006168:	bf00      	nop
 800616a:	e008      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800616c:	bf00      	nop
 800616e:	e006      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006170:	bf00      	nop
 8006172:	e004      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006174:	bf00      	nop
 8006176:	e002      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800617c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d036      	beq.n	80061f4 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8006186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006188:	79db      	ldrb	r3, [r3, #7]
 800618a:	2b06      	cmp	r3, #6
 800618c:	d00a      	beq.n	80061a4 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800618e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8006196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f006 fc73 	bl	800ca84 <VL53L1_dynamic_zone_update>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80061aa:	e015      	b.n	80061d8 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80061ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80061b2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <VL53L1_get_device_results+0x5ac>
 80061ba:	2103      	movs	r1, #3
 80061bc:	e000      	b.n	80061c0 <VL53L1_get_device_results+0x5ae>
 80061be:	2101      	movs	r1, #1
 80061c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80061c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c6:	4413      	add	r3, r2
 80061c8:	460a      	mov	r2, r1
 80061ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80061ce:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80061d2:	3301      	adds	r3, #1
 80061d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80061d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d9e5      	bls.n	80061ac <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80061e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f006 fcc6 	bl	800cb7a <VL53L1_multizone_hist_bins_update>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 80061f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f007 f9d3 	bl	800d5a8 <VL53L1_dynamic_xtalk_correction_corrector>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8006208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620c:	2b00      	cmp	r3, #0
 800620e:	d043      	beq.n	8006298 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e03e      	b.n	8006298 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800621a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fc35 	bl	8005a96 <VL53L1_get_measurement_results>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006232:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10d      	bne.n	8006256 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800623a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800623c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006240:	4618      	mov	r0, r3
 8006242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006244:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800624a:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800624e:	321c      	adds	r2, #28
 8006250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006252:	f000 fc1f 	bl	8006a94 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d11c      	bne.n	8006298 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800625e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f007 fe24 	bl	800debc <VL53L1_low_power_auto_setup_manual_calibration>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2201      	movs	r2, #1
 800627e:	709a      	strb	r2, [r3, #2]
 8006280:	e00a      	b.n	8006298 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006282:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800628e:	2b01      	cmp	r3, #1
 8006290:	d102      	bne.n	8006298 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2202      	movs	r2, #2
 8006296:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800629e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a0:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80062a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80062a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062aa:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80062ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80062b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b4:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80062b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 80b0 	bne.w	8006420 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80062c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c2:	2210      	movs	r2, #16
 80062c4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80062c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ca:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80062ce:	3301      	adds	r3, #1
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d4:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80062d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80062e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80062ec:	429a      	cmp	r2, r3
 80062ee:	f080 8097 	bcs.w	8006420 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80062f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80062f6:	4613      	mov	r3, r2
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006304:	4413      	add	r3, r2
 8006306:	3308      	adds	r3, #8
 8006308:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800630a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800630c:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8006312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006314:	785a      	ldrb	r2, [r3, #1]
 8006316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006318:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800631a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800631c:	789a      	ldrb	r2, [r3, #2]
 800631e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006320:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006324:	78da      	ldrb	r2, [r3, #3]
 8006326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006328:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800632a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006332:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006336:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800633a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800633e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006340:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800634a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800634c:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006358:	7c5a      	ldrb	r2, [r3, #17]
 800635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635c:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800635e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006360:	7c9a      	ldrb	r2, [r3, #18]
 8006362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006364:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006366:	2300      	movs	r3, #0
 8006368:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800636c:	e052      	b.n	8006414 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800636e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006372:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006378:	204c      	movs	r0, #76	; 0x4c
 800637a:	fb00 f303 	mul.w	r3, r0, r3
 800637e:	440b      	add	r3, r1
 8006380:	3338      	adds	r3, #56	; 0x38
 8006382:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006384:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006386:	4613      	mov	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4403      	add	r3, r0
 8006390:	3308      	adds	r3, #8
 8006392:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006394:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006398:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 800639c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800639e:	204c      	movs	r0, #76	; 0x4c
 80063a0:	fb00 f303 	mul.w	r3, r0, r3
 80063a4:	440b      	add	r3, r1
 80063a6:	333c      	adds	r3, #60	; 0x3c
 80063a8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80063aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4403      	add	r3, r0
 80063b6:	330c      	adds	r3, #12
 80063b8:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80063ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80063be:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80063c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063c4:	204c      	movs	r0, #76	; 0x4c
 80063c6:	fb00 f303 	mul.w	r3, r0, r3
 80063ca:	440b      	add	r3, r1
 80063cc:	3354      	adds	r3, #84	; 0x54
 80063ce:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80063d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	3310      	adds	r3, #16
 80063de:	4602      	mov	r2, r0
 80063e0:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 80063e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 80063e6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 80063ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063ec:	204c      	movs	r0, #76	; 0x4c
 80063ee:	fb00 f303 	mul.w	r3, r0, r3
 80063f2:	440b      	add	r3, r1
 80063f4:	335e      	adds	r3, #94	; 0x5e
 80063f6:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 80063f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3312      	adds	r3, #18
 8006406:	4602      	mov	r2, r0
 8006408:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800640a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800640e:	3301      	adds	r3, #1
 8006410:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006416:	7c9b      	ldrb	r3, [r3, #18]
 8006418:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800641c:	429a      	cmp	r2, r3
 800641e:	d3a6      	bcc.n	800636e <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006420:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006424:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f012 fef8 	bl	801921c <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 800642c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f003 ff35 	bl	800a2a4 <VL53L1_check_ll_driver_rd_state>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006440:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006444:	4618      	mov	r0, r3
 8006446:	3768      	adds	r7, #104	; 0x68
 8006448:	46bd      	mov	sp, r7
 800644a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800644e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d107      	bne.n	8006476 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	2203      	movs	r2, #3
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fe fff3 	bl	8005458 <VL53L1_init_and_start_range>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b0d2      	sub	sp, #328	; 0x148
 8006488:	af00      	add	r7, sp, #0
 800648a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800648e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006492:	6018      	str	r0, [r3, #0]
 8006494:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800649c:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800649e:	2300      	movs	r3, #0
 80064a0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 80064a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3318      	adds	r3, #24
 80064b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80064b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80064c2:	3308      	adds	r3, #8
 80064c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80064c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064cc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80064d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80064d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064d8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80064dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80064e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064e4:	f203 3362 	addw	r3, r3, #866	; 0x362
 80064e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80064ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064f0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80064f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 80064f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006508:	2300      	movs	r3, #0
 800650a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006532:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006536:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800653e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10d      	bne.n	8006562 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006546:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800654a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800654e:	2353      	movs	r3, #83	; 0x53
 8006550:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006554:	2188      	movs	r1, #136	; 0x88
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	f00d fe32 	bl	80141c0 <VL53L1_ReadMulti>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006562:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800656c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006576:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800657a:	785a      	ldrb	r2, [r3, #1]
 800657c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006580:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800658a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800658e:	789a      	ldrb	r2, [r3, #2]
 8006590:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006594:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 800659e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065a2:	78da      	ldrb	r2, [r3, #3]
 80065a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 80065b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065b6:	3304      	adds	r3, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	2002      	movs	r0, #2
 80065bc:	f004 fb75 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80065c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80065d2:	234e      	movs	r3, #78	; 0x4e
 80065d4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80065d8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80065dc:	f107 020c 	add.w	r2, r7, #12
 80065e0:	4413      	add	r3, r2
 80065e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80065e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80065ea:	2002      	movs	r0, #2
 80065ec:	f004 fb5d 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80065f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006602:	2350      	movs	r3, #80	; 0x50
 8006604:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006608:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800660c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006610:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006614:	5cd2      	ldrb	r2, [r2, r3]
 8006616:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800661a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006628:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006632:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 800663e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006642:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800664c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006654:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006658:	2351      	movs	r3, #81	; 0x51
 800665a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800665e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006662:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006666:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006672:	2352      	movs	r3, #82	; 0x52
 8006674:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006678:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800667c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006680:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006684:	5cd2      	ldrb	r2, [r2, r3]
 8006686:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800668a:	4413      	add	r3, r2
 800668c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006690:	234d      	movs	r3, #77	; 0x4d
 8006692:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006696:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800669a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800669e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80066a2:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 80066a6:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 80066a8:	2306      	movs	r3, #6
 80066aa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80066ae:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80066b2:	f107 020c 	add.w	r2, r7, #12
 80066b6:	4413      	add	r3, r2
 80066b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 80066bc:	2300      	movs	r3, #0
 80066be:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80066c2:	e01a      	b.n	80066fa <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80066c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80066c8:	2003      	movs	r0, #3
 80066ca:	f004 fb8d 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 80066ce:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 80066d0:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80066d4:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 80066d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80066da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3206      	adds	r2, #6
 80066e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 80066e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80066ea:	3303      	adds	r3, #3
 80066ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 80066f0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80066fa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80066fe:	2b17      	cmp	r3, #23
 8006700:	d9e0      	bls.n	80066c4 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006702:	f107 0208 	add.w	r2, r7, #8
 8006706:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800670a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800670e:	f248 018d 	movw	r1, #32909	; 0x808d
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	f000 fbd0 	bl	8006eb8 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006718:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800671c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006726:	2b00      	cmp	r3, #0
 8006728:	d118      	bne.n	800675c <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800672a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800672e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006732:	3318      	adds	r3, #24
 8006734:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f012 fd7c 	bl	8019238 <memset>
		pdev->bin_rec_pos = 0;
 8006740:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 800674e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 800675c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006760:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10b      	bne.n	8006782 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 800676a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800676e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006772:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006776:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800677a:	6811      	ldr	r1, [r2, #0]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	f7fd f97e 	bl	8003a7e <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006782:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006786:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800678a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800678e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006796:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800679a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2200      	movs	r2, #0
 80067a2:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80067a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2218      	movs	r2, #24
 80067b0:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80067b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067b6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2218      	movs	r2, #24
 80067be:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80067c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067c4:	78da      	ldrb	r2, [r3, #3]
 80067c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067ca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80067d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067d8:	799b      	ldrb	r3, [r3, #6]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 80067e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 80067ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067f2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80067fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006800:	7c1b      	ldrb	r3, [r3, #16]
 8006802:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006804:	4413      	add	r3, r2
 8006806:	b29a      	uxth	r2, r3
 8006808:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800680c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 800681c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006820:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 800682a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800682e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006832:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006836:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800683a:	6811      	ldr	r1, [r2, #0]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f004 fed4 	bl	800b5ea <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006842:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d117      	bne.n	800687e <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800684e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006852:	791b      	ldrb	r3, [r3, #4]
 8006854:	b29b      	uxth	r3, r3
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800685a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800685e:	795b      	ldrb	r3, [r3, #5]
 8006860:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006862:	4413      	add	r3, r2
 8006864:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800686c:	799a      	ldrb	r2, [r3, #6]
 800686e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006872:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800687c:	e016      	b.n	80068ac <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800687e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006882:	79db      	ldrb	r3, [r3, #7]
 8006884:	b29b      	uxth	r3, r3
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800688a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800688e:	7a1b      	ldrb	r3, [r3, #8]
 8006890:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006892:	4413      	add	r3, r2
 8006894:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006898:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800689c:	7a5a      	ldrb	r2, [r3, #9]
 800689e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80068ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 80068ba:	2300      	movs	r3, #0
 80068bc:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80068c0:	e01f      	b.n	8006902 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80068c2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80068c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80068ca:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	7b1b      	ldrb	r3, [r3, #12]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	2b07      	cmp	r3, #7
 80068da:	d10d      	bne.n	80068f8 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80068dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	7adb      	ldrb	r3, [r3, #11]
 80068e8:	3304      	adds	r3, #4
 80068ea:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80068ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80068f8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80068fc:	3301      	adds	r3, #1
 80068fe:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006902:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006906:	2b05      	cmp	r3, #5
 8006908:	d9db      	bls.n	80068c2 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 800690a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800690e:	4618      	mov	r0, r3
 8006910:	f004 fcdb 	bl	800b2ca <VL53L1_decode_timeout>
 8006914:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006916:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800691a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006924:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006928:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006932:	4618      	mov	r0, r3
 8006934:	f007 fb54 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 8006938:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800693c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006940:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	3301      	adds	r3, #1
 800694c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006950:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006954:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 800695e:	4619      	mov	r1, r3
 8006960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006968:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800696c:	f007 fb4f 	bl	800e00e <VL53L1_duration_maths>
 8006970:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006972:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006976:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006980:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006984:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006990:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006994:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f007 fc5e 	bl	800e25a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800699e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	f008 f875 	bl	800ea96 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80069ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069b0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80069c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069c4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80069c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 80069d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	789b      	ldrb	r3, [r3, #2]
 80069e0:	461a      	mov	r2, r3
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80069ee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80069f2:	4413      	add	r3, r2
 80069f4:	3302      	adds	r3, #2
 80069f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80069fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fe:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006a00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a12:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006a14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a26:	2200      	movs	r2, #0
 8006a28:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006a2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a2e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006a38:	f003 031f 	and.w	r3, r3, #31
 8006a3c:	2b11      	cmp	r3, #17
 8006a3e:	bf8c      	ite	hi
 8006a40:	2201      	movhi	r2, #1
 8006a42:	2200      	movls	r2, #0
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	d11b      	bne.n	8006a82 <VL53L1_get_histogram_bin_data+0x5fe>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	409a      	lsls	r2, r3
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <VL53L1_get_histogram_bin_data+0x60c>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006a60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a78:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006a7a:	23fa      	movs	r3, #250	; 0xfa
 8006a7c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006a80:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006a82:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	0002200e 	.word	0x0002200e

08006a94 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b08b      	sub	sp, #44	; 0x2c
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78da      	ldrb	r2, [r3, #3]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2201      	movs	r2, #1
 8006ace:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	8a1b      	ldrh	r3, [r3, #16]
 8006ad4:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	8a9b      	ldrh	r3, [r3, #20]
 8006ada:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	8a5b      	ldrh	r3, [r3, #18]
 8006ae0:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ae8:	e00b      	b.n	8006b02 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8006aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	4413      	add	r3, r2
 8006af4:	2200      	movs	r2, #0
 8006af6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006afc:	3301      	adds	r3, #1
 8006afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d9ef      	bls.n	8006aea <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3314      	adds	r3, #20
 8006b0e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b16:	e0fe      	b.n	8006d16 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b1e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2200      	movs	r2, #0
 8006b24:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	78db      	ldrb	r3, [r3, #3]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d104      	bne.n	8006b44 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	2213      	movs	r2, #19
 8006b3e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006b42:	e007      	b.n	8006b54 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2200      	movs	r2, #0
 8006b58:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	2200      	movs	r2, #0
 8006b64:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	2200      	movs	r2, #0
 8006b76:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8006b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d05c      	beq.n	8006c3e <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8006b84:	e0a8      	b.n	8006cd8 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	789b      	ldrb	r3, [r3, #2]
 8006b8a:	2b07      	cmp	r3, #7
 8006b8c:	d103      	bne.n	8006b96 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	8a7a      	ldrh	r2, [r7, #18]
 8006b92:	82da      	strh	r2, [r3, #22]
 8006b94:	e00b      	b.n	8006bae <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	789b      	ldrb	r3, [r3, #2]
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d103      	bne.n	8006ba6 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	8aba      	ldrh	r2, [r7, #20]
 8006ba2:	82da      	strh	r2, [r3, #22]
 8006ba4:	e003      	b.n	8006bae <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	8afa      	ldrh	r2, [r7, #22]
 8006bb2:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	895b      	ldrh	r3, [r3, #10]
 8006bc8:	015b      	lsls	r3, r3, #5
 8006bca:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd2:	d302      	bcc.n	8006bda <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bd8:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006bf0:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c02:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da01      	bge.n	8006c0e <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8006c0a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006c0e:	12db      	asrs	r3, r3, #11
 8006c10:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	b21a      	sxth	r2, r3
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8006c3c:	e04c      	b.n	8006cd8 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c54:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	8bdb      	ldrh	r3, [r3, #30]
 8006c62:	015b      	lsls	r3, r3, #5
 8006c64:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6c:	d302      	bcc.n	8006c74 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8006c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c72:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8006c8a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	fb02 f303 	mul.w	r3, r2, r3
 8006c94:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da01      	bge.n	8006ca8 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8006ca4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006ca8:	12db      	asrs	r3, r3, #11
 8006caa:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	b21a      	sxth	r2, r3
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8006cd6:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	334c      	adds	r3, #76	; 0x4c
 8006d0a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d10:	3301      	adds	r3, #1
 8006d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	f67f aefc 	bls.w	8006b18 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2b11      	cmp	r3, #17
 8006d30:	bf8c      	ite	hi
 8006d32:	2201      	movhi	r2, #1
 8006d34:	2200      	movls	r2, #0
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d116      	bne.n	8006d6a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bf14      	ite	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	2300      	moveq	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8006d68:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006d6a:	bf00      	nop
 8006d6c:	372c      	adds	r7, #44	; 0x2c
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	0002200e 	.word	0x0002200e

08006d7c <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	332c      	adds	r3, #44	; 0x2c
 8006d94:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d109      	bne.n	8006db2 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8006db0:	e003      	b.n	8006dba <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8006dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8006de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	72fb      	strb	r3, [r7, #11]
 8006e04:	4613      	mov	r3, r2
 8006e06:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3318      	adds	r3, #24
 8006e10:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006e18:	3308      	adds	r3, #8
 8006e1a:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d006      	beq.n	8006e30 <VL53L1_get_dmax_calibration_data+0x3a>
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	dc3e      	bgt.n	8006ea4 <VL53L1_get_dmax_calibration_data+0xae>
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d034      	beq.n	8006e94 <VL53L1_get_dmax_calibration_data+0x9e>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d02a      	beq.n	8006e84 <VL53L1_get_dmax_calibration_data+0x8e>
 8006e2e:	e039      	b.n	8006ea4 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8006e30:	7aba      	ldrb	r2, [r7, #10]
 8006e32:	6979      	ldr	r1, [r7, #20]
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8006e4a:	7aba      	ldrb	r2, [r7, #10]
 8006e4c:	6979      	ldr	r1, [r7, #20]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8006e6a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e80:	811a      	strh	r2, [r3, #8]
	break;
 8006e82:	e012      	b.n	8006eaa <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f012 f9c5 	bl	801921c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8006e92:	e00a      	b.n	8006eaa <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8006e98:	220a      	movs	r2, #10
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f012 f9bd 	bl	801921c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8006ea2:	e002      	b.n	8006eaa <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006ea4:	23fc      	movs	r3, #252	; 0xfc
 8006ea6:	77fb      	strb	r3, [r7, #31]
	break;
 8006ea8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3318      	adds	r3, #24
 8006ece:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006ed6:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006ede:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006ee0:	897b      	ldrh	r3, [r7, #10]
 8006ee2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006ee6:	2bbe      	cmp	r3, #190	; 0xbe
 8006ee8:	f200 86fc 	bhi.w	8007ce4 <VL53L1_get_tuning_parm+0xe2c>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <VL53L1_get_tuning_parm+0x3c>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	080071f1 	.word	0x080071f1
 8006ef8:	08007201 	.word	0x08007201
 8006efc:	08007211 	.word	0x08007211
 8006f00:	08007221 	.word	0x08007221
 8006f04:	0800722f 	.word	0x0800722f
 8006f08:	0800723d 	.word	0x0800723d
 8006f0c:	0800724b 	.word	0x0800724b
 8006f10:	08007259 	.word	0x08007259
 8006f14:	08007267 	.word	0x08007267
 8006f18:	08007275 	.word	0x08007275
 8006f1c:	08007283 	.word	0x08007283
 8006f20:	0800728f 	.word	0x0800728f
 8006f24:	0800729d 	.word	0x0800729d
 8006f28:	080072ab 	.word	0x080072ab
 8006f2c:	080072b7 	.word	0x080072b7
 8006f30:	080072c5 	.word	0x080072c5
 8006f34:	080072d3 	.word	0x080072d3
 8006f38:	080072e3 	.word	0x080072e3
 8006f3c:	080072f3 	.word	0x080072f3
 8006f40:	08007301 	.word	0x08007301
 8006f44:	08007311 	.word	0x08007311
 8006f48:	0800731f 	.word	0x0800731f
 8006f4c:	0800732f 	.word	0x0800732f
 8006f50:	0800733f 	.word	0x0800733f
 8006f54:	0800734f 	.word	0x0800734f
 8006f58:	0800735f 	.word	0x0800735f
 8006f5c:	0800736f 	.word	0x0800736f
 8006f60:	0800737f 	.word	0x0800737f
 8006f64:	0800738f 	.word	0x0800738f
 8006f68:	0800739f 	.word	0x0800739f
 8006f6c:	080073af 	.word	0x080073af
 8006f70:	080073bd 	.word	0x080073bd
 8006f74:	080073cd 	.word	0x080073cd
 8006f78:	080073dd 	.word	0x080073dd
 8006f7c:	080073ed 	.word	0x080073ed
 8006f80:	080073fd 	.word	0x080073fd
 8006f84:	0800740d 	.word	0x0800740d
 8006f88:	0800741d 	.word	0x0800741d
 8006f8c:	0800742d 	.word	0x0800742d
 8006f90:	0800743d 	.word	0x0800743d
 8006f94:	0800744d 	.word	0x0800744d
 8006f98:	0800745d 	.word	0x0800745d
 8006f9c:	0800746d 	.word	0x0800746d
 8006fa0:	0800747d 	.word	0x0800747d
 8006fa4:	0800748d 	.word	0x0800748d
 8006fa8:	0800749d 	.word	0x0800749d
 8006fac:	080074ad 	.word	0x080074ad
 8006fb0:	080074bd 	.word	0x080074bd
 8006fb4:	080074cd 	.word	0x080074cd
 8006fb8:	080074dd 	.word	0x080074dd
 8006fbc:	080074ed 	.word	0x080074ed
 8006fc0:	080074fb 	.word	0x080074fb
 8006fc4:	08007509 	.word	0x08007509
 8006fc8:	08007517 	.word	0x08007517
 8006fcc:	08007525 	.word	0x08007525
 8006fd0:	08007533 	.word	0x08007533
 8006fd4:	08007541 	.word	0x08007541
 8006fd8:	0800754f 	.word	0x0800754f
 8006fdc:	0800755d 	.word	0x0800755d
 8006fe0:	0800756b 	.word	0x0800756b
 8006fe4:	08007579 	.word	0x08007579
 8006fe8:	08007587 	.word	0x08007587
 8006fec:	08007595 	.word	0x08007595
 8006ff0:	080075a3 	.word	0x080075a3
 8006ff4:	080075b1 	.word	0x080075b1
 8006ff8:	080075bf 	.word	0x080075bf
 8006ffc:	080075cd 	.word	0x080075cd
 8007000:	080075db 	.word	0x080075db
 8007004:	080075e9 	.word	0x080075e9
 8007008:	080075f7 	.word	0x080075f7
 800700c:	08007605 	.word	0x08007605
 8007010:	08007613 	.word	0x08007613
 8007014:	08007621 	.word	0x08007621
 8007018:	0800762f 	.word	0x0800762f
 800701c:	0800763b 	.word	0x0800763b
 8007020:	08007649 	.word	0x08007649
 8007024:	08007657 	.word	0x08007657
 8007028:	08007663 	.word	0x08007663
 800702c:	0800766f 	.word	0x0800766f
 8007030:	0800767b 	.word	0x0800767b
 8007034:	08007687 	.word	0x08007687
 8007038:	08007693 	.word	0x08007693
 800703c:	0800769f 	.word	0x0800769f
 8007040:	080076ad 	.word	0x080076ad
 8007044:	080076bb 	.word	0x080076bb
 8007048:	080076c9 	.word	0x080076c9
 800704c:	080076d7 	.word	0x080076d7
 8007050:	080076e5 	.word	0x080076e5
 8007054:	080076f3 	.word	0x080076f3
 8007058:	08007701 	.word	0x08007701
 800705c:	0800770f 	.word	0x0800770f
 8007060:	0800771d 	.word	0x0800771d
 8007064:	0800772b 	.word	0x0800772b
 8007068:	08007739 	.word	0x08007739
 800706c:	08007747 	.word	0x08007747
 8007070:	08007755 	.word	0x08007755
 8007074:	08007763 	.word	0x08007763
 8007078:	08007771 	.word	0x08007771
 800707c:	0800777f 	.word	0x0800777f
 8007080:	0800778d 	.word	0x0800778d
 8007084:	0800779b 	.word	0x0800779b
 8007088:	080077a9 	.word	0x080077a9
 800708c:	080077b7 	.word	0x080077b7
 8007090:	080077c5 	.word	0x080077c5
 8007094:	080077d3 	.word	0x080077d3
 8007098:	080077e1 	.word	0x080077e1
 800709c:	080077ef 	.word	0x080077ef
 80070a0:	080077fd 	.word	0x080077fd
 80070a4:	0800780b 	.word	0x0800780b
 80070a8:	08007819 	.word	0x08007819
 80070ac:	08007827 	.word	0x08007827
 80070b0:	08007835 	.word	0x08007835
 80070b4:	08007843 	.word	0x08007843
 80070b8:	08007851 	.word	0x08007851
 80070bc:	0800785f 	.word	0x0800785f
 80070c0:	0800786d 	.word	0x0800786d
 80070c4:	0800787b 	.word	0x0800787b
 80070c8:	08007889 	.word	0x08007889
 80070cc:	08007897 	.word	0x08007897
 80070d0:	080078a9 	.word	0x080078a9
 80070d4:	080078bb 	.word	0x080078bb
 80070d8:	080078cd 	.word	0x080078cd
 80070dc:	080078df 	.word	0x080078df
 80070e0:	080078f1 	.word	0x080078f1
 80070e4:	08007903 	.word	0x08007903
 80070e8:	08007915 	.word	0x08007915
 80070ec:	08007927 	.word	0x08007927
 80070f0:	08007939 	.word	0x08007939
 80070f4:	0800794b 	.word	0x0800794b
 80070f8:	0800795d 	.word	0x0800795d
 80070fc:	0800796f 	.word	0x0800796f
 8007100:	08007981 	.word	0x08007981
 8007104:	08007993 	.word	0x08007993
 8007108:	080079a5 	.word	0x080079a5
 800710c:	080079b7 	.word	0x080079b7
 8007110:	080079c9 	.word	0x080079c9
 8007114:	080079db 	.word	0x080079db
 8007118:	080079ed 	.word	0x080079ed
 800711c:	080079fb 	.word	0x080079fb
 8007120:	08007a09 	.word	0x08007a09
 8007124:	08007a17 	.word	0x08007a17
 8007128:	08007a25 	.word	0x08007a25
 800712c:	08007a33 	.word	0x08007a33
 8007130:	08007a41 	.word	0x08007a41
 8007134:	08007a4f 	.word	0x08007a4f
 8007138:	08007a61 	.word	0x08007a61
 800713c:	08007a6f 	.word	0x08007a6f
 8007140:	08007a7d 	.word	0x08007a7d
 8007144:	08007a8b 	.word	0x08007a8b
 8007148:	08007a99 	.word	0x08007a99
 800714c:	08007aa7 	.word	0x08007aa7
 8007150:	08007ab5 	.word	0x08007ab5
 8007154:	08007ac3 	.word	0x08007ac3
 8007158:	08007ad1 	.word	0x08007ad1
 800715c:	08007adf 	.word	0x08007adf
 8007160:	08007aed 	.word	0x08007aed
 8007164:	08007afb 	.word	0x08007afb
 8007168:	08007b09 	.word	0x08007b09
 800716c:	08007b17 	.word	0x08007b17
 8007170:	08007b25 	.word	0x08007b25
 8007174:	08007b33 	.word	0x08007b33
 8007178:	08007b41 	.word	0x08007b41
 800717c:	08007b4f 	.word	0x08007b4f
 8007180:	08007b5d 	.word	0x08007b5d
 8007184:	08007b6b 	.word	0x08007b6b
 8007188:	08007b79 	.word	0x08007b79
 800718c:	08007b87 	.word	0x08007b87
 8007190:	08007b95 	.word	0x08007b95
 8007194:	08007ba3 	.word	0x08007ba3
 8007198:	08007bb1 	.word	0x08007bb1
 800719c:	08007bbf 	.word	0x08007bbf
 80071a0:	08007bcd 	.word	0x08007bcd
 80071a4:	08007bdb 	.word	0x08007bdb
 80071a8:	08007be9 	.word	0x08007be9
 80071ac:	08007bf7 	.word	0x08007bf7
 80071b0:	08007c05 	.word	0x08007c05
 80071b4:	08007c13 	.word	0x08007c13
 80071b8:	08007c21 	.word	0x08007c21
 80071bc:	08007c2f 	.word	0x08007c2f
 80071c0:	08007c3d 	.word	0x08007c3d
 80071c4:	08007c4b 	.word	0x08007c4b
 80071c8:	08007c59 	.word	0x08007c59
 80071cc:	08007c67 	.word	0x08007c67
 80071d0:	08007c75 	.word	0x08007c75
 80071d4:	08007c83 	.word	0x08007c83
 80071d8:	08007c91 	.word	0x08007c91
 80071dc:	08007c9f 	.word	0x08007c9f
 80071e0:	08007cad 	.word	0x08007cad
 80071e4:	08007cbb 	.word	0x08007cbb
 80071e8:	08007cc9 	.word	0x08007cc9
 80071ec:	08007cd7 	.word	0x08007cd7

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80071f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	break;
 80071fc:	f000 bd79 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8007206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
	break;
 800720c:	f000 bd71 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007216:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
	break;
 800721c:	f000 bd69 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
	break;
 800722a:	f000 bd62 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
	break;
 8007238:	f000 bd5b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	789b      	ldrb	r3, [r3, #2]
 8007240:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
	break;
 8007246:	f000 bd54 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	78db      	ldrb	r3, [r3, #3]
 800724e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
	break;
 8007254:	f000 bd4d 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
	break;
 8007262:	f000 bd46 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
	break;
 8007270:	f000 bd3f 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	799b      	ldrb	r3, [r3, #6]
 8007278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
	break;
 800727e:	f000 bd38 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
	break;
 800728a:	f000 bd32 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	891b      	ldrh	r3, [r3, #8]
 8007292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]
	break;
 8007298:	f000 bd2b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	8a1b      	ldrh	r3, [r3, #16]
 80072a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
	break;
 80072a6:	f000 bd24 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
	break;
 80072b2:	f000 bd1e 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	7e1b      	ldrb	r3, [r3, #24]
 80072ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	601a      	str	r2, [r3, #0]
	break;
 80072c0:	f000 bd17 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	8b5b      	ldrh	r3, [r3, #26]
 80072c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
	break;
 80072ce:	f000 bd10 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80072d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
	break;
 80072de:	f000 bd08 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80072e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
	break;
 80072ee:	f000 bd00 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	break;
 80072fc:	f000 bcf9 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007306:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	601a      	str	r2, [r3, #0]
	break;
 800730c:	f000 bcf1 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007314:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
	break;
 800731a:	f000 bcea 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007324:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
	break;
 800732a:	f000 bce2 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	break;
 800733a:	f000 bcda 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007344:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
	break;
 800734a:	f000 bcd2 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
	break;
 800735a:	f000 bcca 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
	break;
 800736a:	f000 bcc2 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
	break;
 800737a:	f000 bcba 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
	break;
 800738a:	f000 bcb2 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
	break;
 800739a:	f000 bcaa 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80073a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
	break;
 80073aa:	f000 bca2 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
	break;
 80073b8:	f000 bc9b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]
	break;
 80073c8:	f000 bc93 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
	break;
 80073d8:	f000 bc8b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 80073e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	break;
 80073e8:	f000 bc83 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80073f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
	break;
 80073f8:	f000 bc7b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007402:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
	break;
 8007408:	f000 bc73 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007412:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
	break;
 8007418:	f000 bc6b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007422:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
	break;
 8007428:	f000 bc63 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	601a      	str	r2, [r3, #0]
	break;
 8007438:	f000 bc5b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007442:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]
	break;
 8007448:	f000 bc53 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007452:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]
	break;
 8007458:	f000 bc4b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	break;
 8007468:	f000 bc43 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
	break;
 8007478:	f000 bc3b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007482:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]
	break;
 8007488:	f000 bc33 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]
	break;
 8007498:	f000 bc2b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80074a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
	break;
 80074a8:	f000 bc23 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80074b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
	break;
 80074b8:	f000 bc1b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80074c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
	break;
 80074c8:	f000 bc13 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80074d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	break;
 80074d8:	f000 bc0b 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 80074e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
	break;
 80074e8:	f000 bc03 	b.w	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80074f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	601a      	str	r2, [r3, #0]
	break;
 80074f8:	e3fb      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007500:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	601a      	str	r2, [r3, #0]
	break;
 8007506:	e3f4      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800750e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
	break;
 8007514:	e3ed      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800751c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
	break;
 8007522:	e3e6      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800752a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]
	break;
 8007530:	e3df      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007538:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
	break;
 800753e:	e3d8      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007546:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	601a      	str	r2, [r3, #0]
	break;
 800754c:	e3d1      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007554:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	break;
 800755a:	e3ca      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007562:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
	break;
 8007568:	e3c3      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007570:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	601a      	str	r2, [r3, #0]
	break;
 8007576:	e3bc      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800757e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
	break;
 8007584:	e3b5      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 800758c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	break;
 8007592:	e3ae      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800759a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	601a      	str	r2, [r3, #0]
	break;
 80075a0:	e3a7      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 80075a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]
	break;
 80075ae:	e3a0      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 80075b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
	break;
 80075bc:	e399      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 80075c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
	break;
 80075ca:	e392      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80075d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
	break;
 80075d8:	e38b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80075e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
	break;
 80075e6:	e384      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 80075ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]
	break;
 80075f4:	e37d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80075fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
	break;
 8007602:	e376      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800760a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
	break;
 8007610:	e36f      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007618:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
	break;
 800761e:	e368      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007626:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	601a      	str	r2, [r3, #0]
	break;
 800762c:	e361      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	7c1b      	ldrb	r3, [r3, #16]
 8007632:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
	break;
 8007638:	e35b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007640:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
	break;
 8007646:	e354      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800764e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]
	break;
 8007654:	e34d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	break;
 8007660:	e347      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
	break;
 800766c:	e341      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	8adb      	ldrh	r3, [r3, #22]
 8007672:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]
	break;
 8007678:	e33b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	8b1b      	ldrh	r3, [r3, #24]
 800767e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
	break;
 8007684:	e335      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
	break;
 8007690:	e32f      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]
	break;
 800769c:	e329      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 80076a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
	break;
 80076aa:	e322      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80076b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	601a      	str	r2, [r3, #0]
	break;
 80076b8:	e31b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	601a      	str	r2, [r3, #0]
	break;
 80076c6:	e314      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80076ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
	break;
 80076d4:	e30d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 80076dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
	break;
 80076e2:	e306      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 80076ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
	break;
 80076f0:	e2ff      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 80076f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
	break;
 80076fe:	e2f8      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007706:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]
	break;
 800770c:	e2f1      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007714:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
	break;
 800771a:	e2ea      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007722:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
	break;
 8007728:	e2e3      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007730:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
	break;
 8007736:	e2dc      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800773e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
	break;
 8007744:	e2d5      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 800774c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	601a      	str	r2, [r3, #0]
	break;
 8007752:	e2ce      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800775a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]
	break;
 8007760:	e2c7      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007768:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
	break;
 800776e:	e2c0      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007776:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
	break;
 800777c:	e2b9      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007784:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
	break;
 800778a:	e2b2      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007792:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]
	break;
 8007798:	e2ab      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80077a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	break;
 80077a6:	e2a4      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 80077ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
	break;
 80077b4:	e29d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80077bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
	break;
 80077c2:	e296      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80077ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	601a      	str	r2, [r3, #0]
	break;
 80077d0:	e28f      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80077d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
	break;
 80077de:	e288      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80077e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
	break;
 80077ec:	e281      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80077f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
	break;
 80077fa:	e27a      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
	break;
 8007808:	e273      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007810:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
	break;
 8007816:	e26c      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800781e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
	break;
 8007824:	e265      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800782c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
	break;
 8007832:	e25e      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800783a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
	break;
 8007840:	e257      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007848:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
	break;
 800784e:	e250      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007856:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]
	break;
 800785c:	e249      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007864:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
	break;
 800786a:	e242      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]
	break;
 8007878:	e23b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	break;
 8007886:	e234      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800788e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
	break;
 8007894:	e22d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789c:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 80078a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	break;
 80078a6:	e224      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80078b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
	break;
 80078b8:	e21b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c0:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 80078c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
	break;
 80078ca:	e212      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80078d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	601a      	str	r2, [r3, #0]
	break;
 80078dc:	e209      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80078e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
	break;
 80078ee:	e200      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80078fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	601a      	str	r2, [r3, #0]
	break;
 8007900:	e1f7      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800790c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
	break;
 8007912:	e1ee      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800791e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	break;
 8007924:	e1e5      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007930:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
	break;
 8007936:	e1dc      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793e:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007942:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
	break;
 8007948:	e1d3      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007950:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	break;
 800795a:	e1ca      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007966:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	break;
 800796c:	e1c1      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007974:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007978:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
	break;
 800797e:	e1b8      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007986:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800798a:	461a      	mov	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
	break;
 8007990:	e1af      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007998:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800799c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
	break;
 80079a2:	e1a6      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80079ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
	break;
 80079b4:	e19d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079bc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80079c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
	break;
 80079c6:	e194      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ce:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 80079d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
	break;
 80079d8:	e18b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80079e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
	break;
 80079ea:	e182      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80079f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
	break;
 80079f8:	e17b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007a00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
	break;
 8007a06:	e174      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007a0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
	break;
 8007a14:	e16d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007a1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
	break;
 8007a22:	e166      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007a2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
	break;
 8007a30:	e15f      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	601a      	str	r2, [r3, #0]
	break;
 8007a3e:	e158      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007a46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	601a      	str	r2, [r3, #0]
	break;
 8007a4c:	e151      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007a58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
	break;
 8007a5e:	e148      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007a66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	601a      	str	r2, [r3, #0]
	break;
 8007a6c:	e141      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007a74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
	break;
 8007a7a:	e13a      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007a82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
	break;
 8007a88:	e133      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007a90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	break;
 8007a96:	e12c      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8007a9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]
	break;
 8007aa4:	e125      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8007aac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	601a      	str	r2, [r3, #0]
	break;
 8007ab2:	e11e      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8007aba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	601a      	str	r2, [r3, #0]
	break;
 8007ac0:	e117      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8007ac8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
	break;
 8007ace:	e110      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8007ad6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]
	break;
 8007adc:	e109      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8007ae4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
	break;
 8007aea:	e102      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007af2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
	break;
 8007af8:	e0fb      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8007b00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	601a      	str	r2, [r3, #0]
	break;
 8007b06:	e0f4      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8007b0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
	break;
 8007b14:	e0ed      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8007b1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
	break;
 8007b22:	e0e6      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007b2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]
	break;
 8007b30:	e0df      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007b38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
	break;
 8007b3e:	e0d8      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007b46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
	break;
 8007b4c:	e0d1      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007b54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
	break;
 8007b5a:	e0ca      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007b62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]
	break;
 8007b68:	e0c3      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8007b70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	break;
 8007b76:	e0bc      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 8007b7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
	break;
 8007b84:	e0b5      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8007b8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	601a      	str	r2, [r3, #0]
	break;
 8007b92:	e0ae      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8007b9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	601a      	str	r2, [r3, #0]
	break;
 8007ba0:	e0a7      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8007ba8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
	break;
 8007bae:	e0a0      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8007bb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
	break;
 8007bbc:	e099      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8007bc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
	break;
 8007bca:	e092      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8007bd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
	break;
 8007bd8:	e08b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8007be0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
	break;
 8007be6:	e084      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 8007bee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
	break;
 8007bf4:	e07d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8007bfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
	break;
 8007c02:	e076      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8007c0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]
	break;
 8007c10:	e06f      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8007c18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
	break;
 8007c1e:	e068      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8007c26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	601a      	str	r2, [r3, #0]
	break;
 8007c2c:	e061      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8007c34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
	break;
 8007c3a:	e05a      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8007c42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
	break;
 8007c48:	e053      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8007c50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	break;
 8007c56:	e04c      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 8007c5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
	break;
 8007c64:	e045      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8007c6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
	break;
 8007c72:	e03e      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8007c7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	break;
 8007c80:	e037      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8007c88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
	break;
 8007c8e:	e030      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8007c96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
	break;
 8007c9c:	e029      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8007ca4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
	break;
 8007caa:	e022      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 8007cb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
	break;
 8007cb8:	e01b      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 8007cc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
	break;
 8007cc6:	e014      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 8007cce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
	break;
 8007cd4:	e00d      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007cdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
	break;
 8007ce2:	e006      	b.n	8007cf2 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007cea:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007cec:	23fc      	movs	r3, #252	; 0xfc
 8007cee:	77fb      	strb	r3, [r7, #31]
	break;
 8007cf0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3724      	adds	r7, #36	; 0x24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop

08007d04 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3318      	adds	r3, #24
 8007d14:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8007d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3318      	adds	r3, #24
 8007d42:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8007d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3318      	adds	r3, #24
 8007d70:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8007d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8007dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3318      	adds	r3, #24
 8007dcc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8007dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3318      	adds	r3, #24
 8007dfa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8007e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2208      	movs	r2, #8
 8007e28:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	220b      	movs	r2, #11
 8007e2e:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e36:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007e3e:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007e46:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007e4e:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2212      	movs	r2, #18
 8007e76:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220f      	movs	r2, #15
 8007e7c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2202      	movs	r2, #2
 8007e82:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8007e8a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	220c      	movs	r2, #12
 8007e90:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	895b      	ldrh	r3, [r3, #10]
 8007eb4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	895b      	ldrh	r3, [r3, #10]
 8007ed2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2240      	movs	r2, #64	; 0x40
 8007efe:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10d      	bne.n	8007f24 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	741a      	strb	r2, [r3, #16]
 8007f22:	e002      	b.n	8007f2a <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8007f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d114      	bne.n	8007f5c <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d110      	bne.n	8007f5c <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	7d9b      	ldrb	r3, [r3, #22]
 8007f4e:	f003 f879 	bl	800b044 <VL53L1_calc_range_ignore_threshold>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	831a      	strh	r2, [r3, #24]
 8007f5a:	e002      	b.n	8007f62 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8007f68:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2232      	movs	r2, #50	; 0x32
 8007f6e:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8007f76:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	228c      	movs	r2, #140	; 0x8c
 8007f7c:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007f9c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007fa4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2207      	movs	r2, #7
 8007faa:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007fb2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fba:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8007fc2:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2246      	movs	r2, #70	; 0x46
 8007fc8:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8007fd0:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	228c      	movs	r2, #140	; 0x8c
 8007fd6:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8007fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007ffa:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008002:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800800a:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008012:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2208      	movs	r2, #8
 8008018:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2228      	movs	r2, #40	; 0x28
 800801e:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2209      	movs	r2, #9
 8008024:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008048:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008050:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008058:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008060:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2210      	movs	r2, #16
 8008066:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2208      	movs	r2, #8
 800806c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800806e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	4603      	mov	r3, r0
 8008086:	6039      	str	r1, [r7, #0]
 8008088:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2204      	movs	r2, #4
 8008092:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2201      	movs	r2, #1
 800809e:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2202      	movs	r2, #2
 80080a4:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2250      	movs	r2, #80	; 0x50
 80080b0:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2270      	movs	r2, #112	; 0x70
 80080b6:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f241 023d 	movw	r2, #4157	; 0x103d
 80080be:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2210      	movs	r2, #16
 80080c4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2232      	movs	r2, #50	; 0x32
 80080ca:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2264      	movs	r2, #100	; 0x64
 80080d0:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	22a0      	movs	r2, #160	; 0xa0
 80080dc:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80080ea:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2208      	movs	r2, #8
 80080f0:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2288      	movs	r2, #136	; 0x88
 80080f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2208      	movs	r2, #8
 8008100:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008112:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	22fa      	movs	r2, #250	; 0xfa
 8008118:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008128:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2232      	movs	r2, #50	; 0x32
 800812e:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008136:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	228c      	movs	r2, #140	; 0x8c
 800813c:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2250      	movs	r2, #80	; 0x50
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2232      	movs	r2, #50	; 0x32
 800814a:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800814c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220e      	movs	r2, #14
 8008172:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f642 7294 	movw	r2, #12180	; 0x2f94
 800817a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220e      	movs	r2, #14
 8008180:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220a      	movs	r2, #10
 8008186:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2206      	movs	r2, #6
 800818c:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220e      	movs	r2, #14
 8008192:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	220a      	movs	r2, #10
 8008198:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2206      	movs	r2, #6
 800819e:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2209      	movs	r2, #9
 80081a4:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2205      	movs	r2, #5
 80081aa:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2203      	movs	r2, #3
 80081b0:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2206      	movs	r2, #6
 80081b6:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2206      	movs	r2, #6
 80081bc:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2206      	movs	r2, #6
 80081c2:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2221      	movs	r2, #33	; 0x21
 80081ce:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	223c      	movs	r2, #60	; 0x3c
 80081e0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	223c      	movs	r2, #60	; 0x3c
 80081e6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	223c      	movs	r2, #60	; 0x3c
 80081ec:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2280      	movs	r2, #128	; 0x80
 80081f2:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2280      	movs	r2, #128	; 0x80
 80081f8:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2208      	movs	r2, #8
 8008204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2210      	movs	r2, #16
 800820c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800823e:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008246:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800824e:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008256:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008266:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f242 3228 	movw	r2, #9000	; 0x2328
 800826e:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f241 7270 	movw	r2, #6000	; 0x1770
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800827e:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f242 3228 	movw	r2, #9000	; 0x2328
 8008286:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f241 7270 	movw	r2, #6000	; 0x1770
 800828e:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008296:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800829e:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082a6:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082ae:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082b6:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f24f 6218 	movw	r2, #63000	; 0xf618
 80082be:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80082c6:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80082ce:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80082d6:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80082e4:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80082ec:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f242 7210 	movw	r2, #10000	; 0x2710
 8008304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2206      	movs	r2, #6
 800830c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800831e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f640 22be 	movw	r2, #2750	; 0xabe
 8008328:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	22fa      	movs	r2, #250	; 0xfa
 8008330:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800833a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008344:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800834e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008358:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008362:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f64f 7238 	movw	r2, #65336	; 0xff38
 800836c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	22c8      	movs	r2, #200	; 0xc8
 8008374:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	22fa      	movs	r2, #250	; 0xfa
 800837c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008386:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f640 1206 	movw	r2, #2310	; 0x906
 8008390:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f640 1206 	movw	r2, #2310	; 0x906
 80083a2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80083ac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80083b6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f640 421c 	movw	r2, #3100	; 0xc1c
 80083c0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80083ca:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f641 022e 	movw	r2, #6190	; 0x182e
 80083d4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f641 3230 	movw	r2, #6960	; 0x1b30
 80083ee:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f641 022e 	movw	r2, #6190	; 0x182e
 80083f8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22fa      	movs	r2, #250	; 0xfa
 8008400:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800840a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008414:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f241 1294 	movw	r2, #4500	; 0x1194
 800841e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008428:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	22c8      	movs	r2, #200	; 0xc8
 8008430:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f640 3222 	movw	r2, #2850	; 0xb22
 800843a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008444:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f640 721e 	movw	r2, #3870	; 0xf1e
 800845e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f241 222a 	movw	r2, #4650	; 0x122a
 8008468:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008472:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008494:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800849e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f641 1288 	movw	r2, #6536	; 0x1988
 80084b8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 80084bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80084de:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2238      	movs	r2, #56	; 0x38
 80084e4:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2270      	movs	r2, #112	; 0x70
 80084f0:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2210      	movs	r2, #16
 80084f6:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2264      	movs	r2, #100	; 0x64
 80084fc:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008504:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	220f      	movs	r2, #15
 800850a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2234      	movs	r2, #52	; 0x34
 8008510:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	22c8      	movs	r2, #200	; 0xc8
 8008516:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800851e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008526:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008550:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2211      	movs	r2, #17
 8008592:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2202      	movs	r2, #2
 8008598:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2208      	movs	r2, #8
 80085aa:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	220b      	movs	r2, #11
 8008626:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	220d      	movs	r2, #13
 800863a:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008662:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2238      	movs	r2, #56	; 0x38
 800866e:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	22ff      	movs	r2, #255	; 0xff
 8008674:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	221a      	movs	r2, #26
 8008686:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2220      	movs	r2, #32
 8008692:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	22cc      	movs	r2, #204	; 0xcc
 800869e:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	220b      	movs	r2, #11
 80086a4:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2201      	movs	r2, #1
 80086aa:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	22f5      	movs	r2, #245	; 0xf5
 80086b0:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2209      	movs	r2, #9
 80086b6:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2208      	movs	r2, #8
 80086cc:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2278      	movs	r2, #120	; 0x78
 80086d2:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2200      	movs	r2, #0
 80086d8:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2207      	movs	r2, #7
 80086e4:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2221      	movs	r2, #33	; 0x21
 80086ea:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2243      	movs	r2, #67	; 0x43
 80086f0:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2210      	movs	r2, #16
 80086f6:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2232      	movs	r2, #50	; 0x32
 80086fc:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2254      	movs	r2, #84	; 0x54
 8008702:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2207      	movs	r2, #7
 8008708:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2221      	movs	r2, #33	; 0x21
 800870e:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2243      	movs	r2, #67	; 0x43
 8008714:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2210      	movs	r2, #16
 800871a:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2202      	movs	r2, #2
 8008720:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2243      	movs	r2, #67	; 0x43
 8008726:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2205      	movs	r2, #5
 800872c:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2207      	movs	r2, #7
 8008738:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2221      	movs	r2, #33	; 0x21
 800873e:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2243      	movs	r2, #67	; 0x43
 8008744:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2210      	movs	r2, #16
 800874a:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2232      	movs	r2, #50	; 0x32
 8008750:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2254      	movs	r2, #84	; 0x54
 8008756:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875e:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008766:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2210      	movs	r2, #16
 8008772:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	2200      	movs	r2, #0
 8008778:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	220f      	movs	r2, #15
 800877e:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	220f      	movs	r2, #15
 8008784:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	2208      	movs	r2, #8
 800878a:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2208      	movs	r2, #8
 8008790:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2201      	movs	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	2200      	movs	r2, #0
 800879c:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	2200      	movs	r2, #0
 80087a2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	2200      	movs	r2, #0
 80087a8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	220b      	movs	r2, #11
 80087b8:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	2209      	movs	r2, #9
 80087be:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	2201      	movs	r2, #1
 80087d4:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	22c7      	movs	r2, #199	; 0xc7
 80087ee:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	22ff      	movs	r2, #255	; 0xff
 80087f4:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	22db      	movs	r2, #219	; 0xdb
 80087fa:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2202      	movs	r2, #2
 8008800:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	2200      	movs	r2, #0
 8008806:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	2201      	movs	r2, #1
 800880c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	2201      	movs	r2, #1
 8008812:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	2221      	movs	r2, #33	; 0x21
 8008818:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800881a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800881e:	4618      	mov	r0, r3
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b08a      	sub	sp, #40	; 0x28
 800882e:	af04      	add	r7, sp, #16
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008838:	2300      	movs	r3, #0
 800883a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fe70 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800885c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d121      	bne.n	80088a8 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2207      	movs	r2, #7
 8008868:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2205      	movs	r2, #5
 800886e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2208      	movs	r2, #8
 8008884:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2238      	movs	r2, #56	; 0x38
 800888a:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2207      	movs	r2, #7
 8008890:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2205      	movs	r2, #5
 8008896:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80088a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af04      	add	r7, sp, #16
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	9302      	str	r3, [sp, #8]
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff fe2b 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80088e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d121      	bne.n	8008932 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	220f      	movs	r2, #15
 80088f2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	220d      	movs	r2, #13
 80088f8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2208      	movs	r2, #8
 800890e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	22b8      	movs	r2, #184	; 0xb8
 8008914:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	220f      	movs	r2, #15
 800891a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	220d      	movs	r2, #13
 8008920:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b08a      	sub	sp, #40	; 0x28
 8008942:	af04      	add	r7, sp, #16
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800894c:	2300      	movs	r3, #0
 800894e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	9303      	str	r3, [sp, #12]
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	9302      	str	r3, [sp, #8]
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff fde6 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	223b      	movs	r2, #59	; 0x3b
 8008982:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af04      	add	r7, sp, #16
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fdbd 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 80089be:	4603      	mov	r3, r0
 80089c0:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80089c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	225b      	movs	r2, #91	; 0x5b
 80089d4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80089d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b08a      	sub	sp, #40	; 0x28
 80089e6:	af04      	add	r7, sp, #16
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7ff fd94 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11a      	bne.n	8008a52 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2200      	movs	r2, #0
 8008a26:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	22b1      	movs	r2, #177	; 0xb1
 8008a2c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2200      	movs	r2, #0
 8008a32:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	22d4      	movs	r2, #212	; 0xd4
 8008a38:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008a40:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b08a      	sub	sp, #40	; 0x28
 8008a62:	af04      	add	r7, sp, #16
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fecf 	bl	800882a <VL53L1_preset_mode_standard_ranging_short_range>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11a      	bne.n	8008ace <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2284      	movs	r2, #132	; 0x84
 8008aa8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2201      	movs	r2, #1
 8008aae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	22b1      	movs	r2, #177	; 0xb1
 8008ab4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008abc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	2240      	movs	r2, #64	; 0x40
 8008acc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08a      	sub	sp, #40	; 0x28
 8008ade:	af04      	add	r7, sp, #16
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	9302      	str	r3, [sp, #8]
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fed6 	bl	80088b4 <VL53L1_preset_mode_standard_ranging_long_range>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d11a      	bne.n	8008b4a <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2200      	movs	r2, #0
 8008b18:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2297      	movs	r2, #151	; 0x97
 8008b24:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	22b1      	movs	r2, #177	; 0xb1
 8008b30:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b38:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	2240      	movs	r2, #64	; 0x40
 8008b48:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b08a      	sub	sp, #40	; 0x28
 8008b5a:	af04      	add	r7, sp, #16
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	9302      	str	r3, [sp, #8]
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff ff2f 	bl	80089e2 <VL53L1_preset_mode_timed_ranging>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b92:	6a39      	ldr	r1, [r7, #32]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f005 f978 	bl	800de8a <VL53L1_config_low_power_auto_mode>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b08a      	sub	sp, #40	; 0x28
 8008bae:	af04      	add	r7, sp, #16
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
 8008bb6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff ff43 	bl	8008a5e <VL53L1_preset_mode_timed_ranging_short_range>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be6:	6a39      	ldr	r1, [r7, #32]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f005 f94e 	bl	800de8a <VL53L1_config_low_power_auto_mode>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b08a      	sub	sp, #40	; 0x28
 8008c02:	af04      	add	r7, sp, #16
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7ff ff57 	bl	8008ada <VL53L1_preset_mode_timed_ranging_long_range>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3a:	6a39      	ldr	r1, [r7, #32]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f005 f924 	bl	800de8a <VL53L1_config_low_power_auto_mode>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b08a      	sub	sp, #40	; 0x28
 8008c56:	af04      	add	r7, sp, #16
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	9302      	str	r3, [sp, #8]
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff fc5c 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d116      	bne.n	8008cba <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	22b1      	movs	r2, #177	; 0xb1
 8008c9c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	22d4      	movs	r2, #212	; 0xd4
 8008ca8:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b090      	sub	sp, #64	; 0x40
 8008cca:	af0a      	add	r7, sp, #40	; 0x28
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	9303      	str	r3, [sp, #12]
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	68b8      	ldr	r0, [r7, #8]
 8008cf0:	f7ff fc22 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d171      	bne.n	8008de4 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008d06:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	2305      	movs	r3, #5
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	2304      	movs	r3, #4
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	2303      	movs	r3, #3
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	2302      	movs	r3, #2
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9302      	str	r3, [sp, #8]
 8008d24:	2304      	movs	r3, #4
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2303      	movs	r3, #3
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2201      	movs	r2, #1
 8008d30:	2100      	movs	r1, #0
 8008d32:	2007      	movs	r0, #7
 8008d34:	f001 fe1b 	bl	800a96e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	9308      	str	r3, [sp, #32]
 8008d3e:	2305      	movs	r3, #5
 8008d40:	9307      	str	r3, [sp, #28]
 8008d42:	2304      	movs	r3, #4
 8008d44:	9306      	str	r3, [sp, #24]
 8008d46:	2303      	movs	r3, #3
 8008d48:	9305      	str	r3, [sp, #20]
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	2301      	movs	r3, #1
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	2300      	movs	r3, #0
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	2304      	movs	r3, #4
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2302      	movs	r3, #2
 8008d60:	2201      	movs	r2, #1
 8008d62:	2100      	movs	r1, #0
 8008d64:	2007      	movs	r0, #7
 8008d66:	f001 fe92 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	2209      	movs	r2, #9
 8008d6e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	220b      	movs	r2, #11
 8008d74:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	2209      	movs	r2, #9
 8008d7a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	220b      	movs	r2, #11
 8008d80:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	2200      	movs	r2, #0
 8008d92:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	221a      	movs	r2, #26
 8008d98:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	2228      	movs	r2, #40	; 0x28
 8008da4:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	2200      	movs	r2, #0
 8008daa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	2221      	movs	r2, #33	; 0x21
 8008db0:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	22f5      	movs	r2, #245	; 0xf5
 8008db6:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2208      	movs	r2, #8
 8008dbc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2288      	movs	r2, #136	; 0x88
 8008dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f821 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	229b      	movs	r2, #155	; 0x9b
 8008ddc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	2226      	movs	r2, #38	; 0x26
 8008de2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b090      	sub	sp, #64	; 0x40
 8008df4:	af0a      	add	r7, sp, #40	; 0x28
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	9302      	str	r3, [sp, #8]
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ff52 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d13e      	bne.n	8008eac <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	2305      	movs	r3, #5
 8008e34:	9307      	str	r3, [sp, #28]
 8008e36:	2304      	movs	r3, #4
 8008e38:	9306      	str	r3, [sp, #24]
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	230a      	movs	r3, #10
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	2309      	movs	r3, #9
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	2308      	movs	r3, #8
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	2304      	movs	r3, #4
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	2303      	movs	r3, #3
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2302      	movs	r3, #2
 8008e54:	2201      	movs	r2, #1
 8008e56:	2100      	movs	r1, #0
 8008e58:	2007      	movs	r0, #7
 8008e5a:	f001 fd88 	bl	800a96e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	3302      	adds	r3, #2
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	2305      	movs	r3, #5
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	2304      	movs	r3, #4
 8008e6a:	9306      	str	r3, [sp, #24]
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	230a      	movs	r3, #10
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	2309      	movs	r3, #9
 8008e76:	9303      	str	r3, [sp, #12]
 8008e78:	2308      	movs	r3, #8
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	2303      	movs	r3, #3
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	2302      	movs	r3, #2
 8008e86:	2201      	movs	r2, #1
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2007      	movs	r0, #7
 8008e8c:	f001 fdff 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 ffbd 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	22bb      	movs	r2, #187	; 0xbb
 8008ea4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	2226      	movs	r2, #38	; 0x26
 8008eaa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08c      	sub	sp, #48	; 0x30
 8008ebc:	af06      	add	r7, sp, #24
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff ff83 	bl	8008df0 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	22db      	movs	r2, #219	; 0xdb
 8008efa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b090      	sub	sp, #64	; 0x40
 8008f0c:	af0a      	add	r7, sp, #40	; 0x28
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	9302      	str	r3, [sp, #8]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fec6 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d13e      	bne.n	8008fc4 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	230d      	movs	r3, #13
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	230c      	movs	r3, #12
 8008f50:	9306      	str	r3, [sp, #24]
 8008f52:	230b      	movs	r3, #11
 8008f54:	9305      	str	r3, [sp, #20]
 8008f56:	230a      	movs	r3, #10
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	2309      	movs	r3, #9
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	2308      	movs	r3, #8
 8008f60:	9302      	str	r3, [sp, #8]
 8008f62:	230c      	movs	r3, #12
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	230b      	movs	r3, #11
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	2209      	movs	r2, #9
 8008f6e:	2108      	movs	r1, #8
 8008f70:	2007      	movs	r0, #7
 8008f72:	f001 fcfc 	bl	800a96e <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	3302      	adds	r3, #2
 8008f7a:	9308      	str	r3, [sp, #32]
 8008f7c:	230d      	movs	r3, #13
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	230c      	movs	r3, #12
 8008f82:	9306      	str	r3, [sp, #24]
 8008f84:	230b      	movs	r3, #11
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	230a      	movs	r3, #10
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	2309      	movs	r3, #9
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	2308      	movs	r3, #8
 8008f92:	9302      	str	r3, [sp, #8]
 8008f94:	230c      	movs	r3, #12
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	230b      	movs	r3, #11
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	2209      	movs	r2, #9
 8008fa0:	2108      	movs	r1, #8
 8008fa2:	2007      	movs	r0, #7
 8008fa4:	f001 fd73 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 ff31 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	22bb      	movs	r2, #187	; 0xbb
 8008fc2:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8008fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08c      	sub	sp, #48	; 0x30
 8008fd4:	af06      	add	r7, sp, #24
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	9303      	str	r3, [sp, #12]
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	9302      	str	r3, [sp, #8]
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff ff83 	bl	8008f08 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	22db      	movs	r2, #219	; 0xdb
 8009012:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b090      	sub	sp, #64	; 0x40
 8009024:	af0a      	add	r7, sp, #40	; 0x28
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fe3a 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d166      	bne.n	800912c <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009064:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	9308      	str	r3, [sp, #32]
 800906a:	2304      	movs	r3, #4
 800906c:	9307      	str	r3, [sp, #28]
 800906e:	2303      	movs	r3, #3
 8009070:	9306      	str	r3, [sp, #24]
 8009072:	2302      	movs	r3, #2
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	2301      	movs	r3, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	2300      	movs	r3, #0
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	2307      	movs	r3, #7
 8009080:	9302      	str	r3, [sp, #8]
 8009082:	2304      	movs	r3, #4
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	2303      	movs	r3, #3
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	2302      	movs	r3, #2
 800908c:	2201      	movs	r2, #1
 800908e:	2100      	movs	r1, #0
 8009090:	2007      	movs	r0, #7
 8009092:	f001 fc6c 	bl	800a96e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	3302      	adds	r3, #2
 800909a:	9308      	str	r3, [sp, #32]
 800909c:	2304      	movs	r3, #4
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	2303      	movs	r3, #3
 80090a2:	9306      	str	r3, [sp, #24]
 80090a4:	2302      	movs	r3, #2
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	2301      	movs	r3, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	2300      	movs	r3, #0
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	2307      	movs	r3, #7
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	2304      	movs	r3, #4
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	2303      	movs	r3, #3
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2302      	movs	r3, #2
 80090be:	2201      	movs	r2, #1
 80090c0:	2100      	movs	r1, #0
 80090c2:	2007      	movs	r0, #7
 80090c4:	f001 fce3 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fea1 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	2204      	movs	r2, #4
 80090dc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	2203      	movs	r2, #3
 80090e2:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	2242      	movs	r2, #66	; 0x42
 80090ee:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2200      	movs	r2, #0
 80090f4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	2242      	movs	r2, #66	; 0x42
 80090fa:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	2200      	movs	r2, #0
 8009100:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	2252      	movs	r2, #82	; 0x52
 8009106:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	2200      	movs	r2, #0
 800910c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	2266      	movs	r2, #102	; 0x66
 8009112:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2204      	movs	r2, #4
 8009118:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	22a4      	movs	r2, #164	; 0xa4
 800911e:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	229b      	movs	r2, #155	; 0x9b
 8009124:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	2226      	movs	r2, #38	; 0x26
 800912a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800912c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b090      	sub	sp, #64	; 0x40
 800913c:	af0a      	add	r7, sp, #40	; 0x28
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fdae 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800916e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d178      	bne.n	8009268 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	9308      	str	r3, [sp, #32]
 800917a:	2305      	movs	r3, #5
 800917c:	9307      	str	r3, [sp, #28]
 800917e:	2304      	movs	r3, #4
 8009180:	9306      	str	r3, [sp, #24]
 8009182:	2303      	movs	r3, #3
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	2302      	movs	r3, #2
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	2301      	movs	r3, #1
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	2300      	movs	r3, #0
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	2304      	movs	r3, #4
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2303      	movs	r3, #3
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2302      	movs	r3, #2
 800919c:	2201      	movs	r2, #1
 800919e:	2100      	movs	r1, #0
 80091a0:	2007      	movs	r0, #7
 80091a2:	f001 fbe4 	bl	800a96e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	3302      	adds	r3, #2
 80091aa:	9308      	str	r3, [sp, #32]
 80091ac:	2305      	movs	r3, #5
 80091ae:	9307      	str	r3, [sp, #28]
 80091b0:	2304      	movs	r3, #4
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	2303      	movs	r3, #3
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	2302      	movs	r3, #2
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	2301      	movs	r3, #1
 80091be:	9303      	str	r3, [sp, #12]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9302      	str	r3, [sp, #8]
 80091c4:	2304      	movs	r3, #4
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	2303      	movs	r3, #3
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2302      	movs	r3, #2
 80091ce:	2201      	movs	r2, #1
 80091d0:	2100      	movs	r1, #0
 80091d2:	2007      	movs	r0, #7
 80091d4:	f001 fc5b 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fe19 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	2209      	movs	r2, #9
 80091ec:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	220b      	movs	r2, #11
 80091f2:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	2221      	movs	r2, #33	; 0x21
 80091fe:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2200      	movs	r2, #0
 8009204:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	221b      	movs	r2, #27
 800920a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	2200      	movs	r2, #0
 8009210:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	2229      	movs	r2, #41	; 0x29
 8009216:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2200      	movs	r2, #0
 800921c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	2222      	movs	r2, #34	; 0x22
 8009222:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2209      	movs	r2, #9
 8009228:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	22f5      	movs	r2, #245	; 0xf5
 800922e:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	2209      	movs	r2, #9
 8009234:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	220b      	movs	r2, #11
 800923a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2208      	movs	r2, #8
 8009250:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2288      	movs	r2, #136	; 0x88
 8009258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	229b      	movs	r2, #155	; 0x9b
 8009260:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	2226      	movs	r2, #38	; 0x26
 8009266:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b090      	sub	sp, #64	; 0x40
 8009278:	af0a      	add	r7, sp, #40	; 0x28
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	9302      	str	r3, [sp, #8]
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff ff49 	bl	8009138 <VL53L1_preset_mode_histogram_long_range>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d13b      	bne.n	800932a <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	2305      	movs	r3, #5
 80092b8:	9307      	str	r3, [sp, #28]
 80092ba:	2304      	movs	r3, #4
 80092bc:	9306      	str	r3, [sp, #24]
 80092be:	2303      	movs	r3, #3
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	230a      	movs	r3, #10
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	2309      	movs	r3, #9
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	2308      	movs	r3, #8
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	2304      	movs	r3, #4
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	2303      	movs	r3, #3
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	2302      	movs	r3, #2
 80092d8:	2201      	movs	r2, #1
 80092da:	2100      	movs	r1, #0
 80092dc:	2007      	movs	r0, #7
 80092de:	f001 fb46 	bl	800a96e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	3302      	adds	r3, #2
 80092e6:	9308      	str	r3, [sp, #32]
 80092e8:	2305      	movs	r3, #5
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	2304      	movs	r3, #4
 80092ee:	9306      	str	r3, [sp, #24]
 80092f0:	2303      	movs	r3, #3
 80092f2:	9305      	str	r3, [sp, #20]
 80092f4:	230a      	movs	r3, #10
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	2309      	movs	r3, #9
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	2308      	movs	r3, #8
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	2304      	movs	r3, #4
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	2303      	movs	r3, #3
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	2302      	movs	r3, #2
 800930a:	2201      	movs	r2, #1
 800930c:	2100      	movs	r1, #0
 800930e:	2007      	movs	r0, #7
 8009310:	f001 fbbd 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd7b 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	22bb      	movs	r2, #187	; 0xbb
 8009328:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800932a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b08c      	sub	sp, #48	; 0x30
 800933a:	af06      	add	r7, sp, #24
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	9303      	str	r3, [sp, #12]
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	9302      	str	r3, [sp, #8]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff ff86 	bl	8009274 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800936c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	22db      	movs	r2, #219	; 0xdb
 8009378:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800937a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b090      	sub	sp, #64	; 0x40
 800938a:	af0a      	add	r7, sp, #40	; 0x28
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
 8009392:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fc87 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80093bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d178      	bne.n	80094b6 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	9308      	str	r3, [sp, #32]
 80093c8:	2303      	movs	r3, #3
 80093ca:	9307      	str	r3, [sp, #28]
 80093cc:	2302      	movs	r3, #2
 80093ce:	9306      	str	r3, [sp, #24]
 80093d0:	2301      	movs	r3, #1
 80093d2:	9305      	str	r3, [sp, #20]
 80093d4:	2302      	movs	r3, #2
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	2301      	movs	r3, #1
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	2300      	movs	r3, #0
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	2302      	movs	r3, #2
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	2302      	movs	r3, #2
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2301      	movs	r3, #1
 80093ea:	2201      	movs	r2, #1
 80093ec:	2100      	movs	r1, #0
 80093ee:	2007      	movs	r0, #7
 80093f0:	f001 fabd 	bl	800a96e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	3302      	adds	r3, #2
 80093f8:	9308      	str	r3, [sp, #32]
 80093fa:	2303      	movs	r3, #3
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	2302      	movs	r3, #2
 8009400:	9306      	str	r3, [sp, #24]
 8009402:	2301      	movs	r3, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	2302      	movs	r3, #2
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	2301      	movs	r3, #1
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	2300      	movs	r3, #0
 8009410:	9302      	str	r3, [sp, #8]
 8009412:	2302      	movs	r3, #2
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	2302      	movs	r3, #2
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	2301      	movs	r3, #1
 800941c:	2201      	movs	r2, #1
 800941e:	2100      	movs	r1, #0
 8009420:	2007      	movs	r0, #7
 8009422:	f001 fb34 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fcf2 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2205      	movs	r2, #5
 800943a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	2207      	movs	r2, #7
 8009440:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	2200      	movs	r2, #0
 8009446:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2236      	movs	r2, #54	; 0x36
 800944c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	2200      	movs	r2, #0
 8009452:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	2228      	movs	r2, #40	; 0x28
 8009458:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	2200      	movs	r2, #0
 800945e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2244      	movs	r2, #68	; 0x44
 8009464:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2200      	movs	r2, #0
 800946a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	2233      	movs	r2, #51	; 0x33
 8009470:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2205      	movs	r2, #5
 8009476:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	22f5      	movs	r2, #245	; 0xf5
 800947c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	2205      	movs	r2, #5
 8009482:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	2207      	movs	r2, #7
 8009488:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2208      	movs	r2, #8
 800949e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2248      	movs	r2, #72	; 0x48
 80094a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	229b      	movs	r2, #155	; 0x9b
 80094ae:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	2226      	movs	r2, #38	; 0x26
 80094b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80094b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b090      	sub	sp, #64	; 0x40
 80094c6:	af0a      	add	r7, sp, #40	; 0x28
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	9303      	str	r3, [sp, #12]
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	9302      	str	r3, [sp, #8]
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	68b9      	ldr	r1, [r7, #8]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff ff49 	bl	8009386 <VL53L1_preset_mode_histogram_medium_range>
 80094f4:	4603      	mov	r3, r0
 80094f6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80094f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d13b      	bne.n	8009578 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	9308      	str	r3, [sp, #32]
 8009504:	2303      	movs	r3, #3
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	2302      	movs	r3, #2
 800950a:	9306      	str	r3, [sp, #24]
 800950c:	2301      	movs	r3, #1
 800950e:	9305      	str	r3, [sp, #20]
 8009510:	230a      	movs	r3, #10
 8009512:	9304      	str	r3, [sp, #16]
 8009514:	2309      	movs	r3, #9
 8009516:	9303      	str	r3, [sp, #12]
 8009518:	2308      	movs	r3, #8
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	2302      	movs	r3, #2
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2302      	movs	r3, #2
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2301      	movs	r3, #1
 8009526:	2201      	movs	r2, #1
 8009528:	2100      	movs	r1, #0
 800952a:	2007      	movs	r0, #7
 800952c:	f001 fa1f 	bl	800a96e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	3302      	adds	r3, #2
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	2303      	movs	r3, #3
 8009538:	9307      	str	r3, [sp, #28]
 800953a:	2302      	movs	r3, #2
 800953c:	9306      	str	r3, [sp, #24]
 800953e:	2301      	movs	r3, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	230a      	movs	r3, #10
 8009544:	9304      	str	r3, [sp, #16]
 8009546:	2309      	movs	r3, #9
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	2308      	movs	r3, #8
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	2302      	movs	r3, #2
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	2302      	movs	r3, #2
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2301      	movs	r3, #1
 8009558:	2201      	movs	r2, #1
 800955a:	2100      	movs	r1, #0
 800955c:	2007      	movs	r0, #7
 800955e:	f001 fa96 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fc54 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	22bb      	movs	r2, #187	; 0xbb
 8009576:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08c      	sub	sp, #48	; 0x30
 8009588:	af06      	add	r7, sp, #24
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff ff86 	bl	80094c2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80095ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	22db      	movs	r2, #219	; 0xdb
 80095c6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80095c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b090      	sub	sp, #64	; 0x40
 80095d8:	af0a      	add	r7, sp, #40	; 0x28
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	9303      	str	r3, [sp, #12]
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fb60 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800960a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d178      	bne.n	8009704 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	9308      	str	r3, [sp, #32]
 8009616:	2302      	movs	r3, #2
 8009618:	9307      	str	r3, [sp, #28]
 800961a:	2302      	movs	r3, #2
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	2301      	movs	r3, #1
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	2301      	movs	r3, #1
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	2301      	movs	r3, #1
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	2300      	movs	r3, #0
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	2301      	movs	r3, #1
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	2301      	movs	r3, #1
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	2301      	movs	r3, #1
 8009638:	2200      	movs	r2, #0
 800963a:	2107      	movs	r1, #7
 800963c:	2007      	movs	r0, #7
 800963e:	f001 f996 	bl	800a96e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	3302      	adds	r3, #2
 8009646:	9308      	str	r3, [sp, #32]
 8009648:	2302      	movs	r3, #2
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	2302      	movs	r3, #2
 800964e:	9306      	str	r3, [sp, #24]
 8009650:	2301      	movs	r3, #1
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	2301      	movs	r3, #1
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	2301      	movs	r3, #1
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	2300      	movs	r3, #0
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	2301      	movs	r3, #1
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	2301      	movs	r3, #1
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	2301      	movs	r3, #1
 800966a:	2200      	movs	r2, #0
 800966c:	2107      	movs	r1, #7
 800966e:	2007      	movs	r0, #7
 8009670:	f001 fa0d 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fbcb 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2203      	movs	r2, #3
 8009688:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	2205      	movs	r2, #5
 800968e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	2252      	movs	r2, #82	; 0x52
 800969a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	2200      	movs	r2, #0
 80096a0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	2237      	movs	r2, #55	; 0x37
 80096a6:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	2200      	movs	r2, #0
 80096ac:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	2266      	movs	r2, #102	; 0x66
 80096b2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	2200      	movs	r2, #0
 80096b8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	2244      	movs	r2, #68	; 0x44
 80096be:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2203      	movs	r2, #3
 80096c4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	22f5      	movs	r2, #245	; 0xf5
 80096ca:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	2203      	movs	r2, #3
 80096d0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	2205      	movs	r2, #5
 80096d6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2208      	movs	r2, #8
 80096ec:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2228      	movs	r2, #40	; 0x28
 80096f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	22bb      	movs	r2, #187	; 0xbb
 80096fc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	2226      	movs	r2, #38	; 0x26
 8009702:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b090      	sub	sp, #64	; 0x40
 8009714:	af0a      	add	r7, sp, #40	; 0x28
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	9302      	str	r3, [sp, #8]
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff ff49 	bl	80095d4 <VL53L1_preset_mode_histogram_short_range>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d15a      	bne.n	8009804 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	2301      	movs	r3, #1
 8009754:	9307      	str	r3, [sp, #28]
 8009756:	2301      	movs	r3, #1
 8009758:	9306      	str	r3, [sp, #24]
 800975a:	2301      	movs	r3, #1
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	2300      	movs	r3, #0
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	2300      	movs	r3, #0
 8009764:	9303      	str	r3, [sp, #12]
 8009766:	2300      	movs	r3, #0
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	2301      	movs	r3, #1
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	2301      	movs	r3, #1
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	2200      	movs	r2, #0
 8009776:	2107      	movs	r1, #7
 8009778:	2007      	movs	r0, #7
 800977a:	f001 f8f8 	bl	800a96e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	3302      	adds	r3, #2
 8009782:	9308      	str	r3, [sp, #32]
 8009784:	2301      	movs	r3, #1
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	2301      	movs	r3, #1
 800978a:	9306      	str	r3, [sp, #24]
 800978c:	2301      	movs	r3, #1
 800978e:	9305      	str	r3, [sp, #20]
 8009790:	2300      	movs	r3, #0
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	2300      	movs	r3, #0
 8009796:	9303      	str	r3, [sp, #12]
 8009798:	2300      	movs	r3, #0
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	2301      	movs	r3, #1
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	2301      	movs	r3, #1
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2300      	movs	r3, #0
 80097a6:	2200      	movs	r2, #0
 80097a8:	2107      	movs	r1, #7
 80097aa:	2007      	movs	r0, #7
 80097ac:	f001 f96f 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fb2d 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	2202      	movs	r2, #2
 80097c4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	2203      	movs	r2, #3
 80097ca:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2231      	movs	r2, #49	; 0x31
 80097d6:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	2202      	movs	r2, #2
 80097dc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	2203      	movs	r2, #3
 80097e2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2210      	movs	r2, #16
 80097f8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2218      	movs	r2, #24
 8009800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b090      	sub	sp, #64	; 0x40
 8009814:	af0a      	add	r7, sp, #40	; 0x28
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fec9 	bl	80095d4 <VL53L1_preset_mode_histogram_short_range>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d13b      	bne.n	80098c6 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	9308      	str	r3, [sp, #32]
 8009852:	2302      	movs	r3, #2
 8009854:	9307      	str	r3, [sp, #28]
 8009856:	2302      	movs	r3, #2
 8009858:	9306      	str	r3, [sp, #24]
 800985a:	2301      	movs	r3, #1
 800985c:	9305      	str	r3, [sp, #20]
 800985e:	2301      	movs	r3, #1
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	2309      	movs	r3, #9
 8009864:	9303      	str	r3, [sp, #12]
 8009866:	2308      	movs	r3, #8
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	2301      	movs	r3, #1
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	2301      	movs	r3, #1
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	2301      	movs	r3, #1
 8009874:	2200      	movs	r2, #0
 8009876:	2107      	movs	r1, #7
 8009878:	2007      	movs	r0, #7
 800987a:	f001 f878 	bl	800a96e <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	3302      	adds	r3, #2
 8009882:	9308      	str	r3, [sp, #32]
 8009884:	2302      	movs	r3, #2
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	2302      	movs	r3, #2
 800988a:	9306      	str	r3, [sp, #24]
 800988c:	2301      	movs	r3, #1
 800988e:	9305      	str	r3, [sp, #20]
 8009890:	2301      	movs	r3, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	2309      	movs	r3, #9
 8009896:	9303      	str	r3, [sp, #12]
 8009898:	2308      	movs	r3, #8
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	2301      	movs	r3, #1
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	2301      	movs	r3, #1
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2301      	movs	r3, #1
 80098a6:	2200      	movs	r2, #0
 80098a8:	2107      	movs	r1, #7
 80098aa:	2007      	movs	r0, #7
 80098ac:	f001 f8ef 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 faad 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	22bb      	movs	r2, #187	; 0xbb
 80098c4:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80098c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b08c      	sub	sp, #48	; 0x30
 80098d6:	af06      	add	r7, sp, #24
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	9302      	str	r3, [sp, #8]
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7ff ff86 	bl	8009810 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d102      	bne.n	8009916 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	22db      	movs	r2, #219	; 0xdb
 8009914:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b08c      	sub	sp, #48	; 0x30
 8009926:	af06      	add	r7, sp, #24
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff f9b9 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10b      	bne.n	8009978 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2201      	movs	r2, #1
 8009964:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	2201      	movs	r2, #1
 800996a:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	2283      	movs	r2, #131	; 0x83
 8009970:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	222e      	movs	r2, #46	; 0x2e
 8009976:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b090      	sub	sp, #64	; 0x40
 8009988:	af0a      	add	r7, sp, #40	; 0x28
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	9302      	str	r3, [sp, #8]
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f9ba 	bl	8009d2a <VL53L1_preset_mode_histogram_multizone_long_range>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d151      	bne.n	8009a66 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 80099c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099c4:	6838      	ldr	r0, [r7, #0]
 80099c6:	f00a fb1c 	bl	8014002 <VL53L1_zone_preset_xtalk_planar>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	2209      	movs	r2, #9
 80099d2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2209      	movs	r2, #9
 80099d8:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	9308      	str	r3, [sp, #32]
 80099de:	2304      	movs	r3, #4
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	2303      	movs	r3, #3
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	2302      	movs	r3, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	2301      	movs	r3, #1
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	2300      	movs	r3, #0
 80099f0:	9303      	str	r3, [sp, #12]
 80099f2:	2307      	movs	r3, #7
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	2304      	movs	r3, #4
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	2303      	movs	r3, #3
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2302      	movs	r3, #2
 8009a00:	2201      	movs	r2, #1
 8009a02:	2100      	movs	r1, #0
 8009a04:	2007      	movs	r0, #7
 8009a06:	f000 ffb2 	bl	800a96e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	2304      	movs	r3, #4
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	2303      	movs	r3, #3
 8009a16:	9306      	str	r3, [sp, #24]
 8009a18:	2302      	movs	r3, #2
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	2300      	movs	r3, #0
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	2307      	movs	r3, #7
 8009a26:	9302      	str	r3, [sp, #8]
 8009a28:	2304      	movs	r3, #4
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	2302      	movs	r3, #2
 8009a32:	2201      	movs	r2, #1
 8009a34:	2100      	movs	r1, #0
 8009a36:	2007      	movs	r0, #7
 8009a38:	f001 f829 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	3302      	adds	r3, #2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a4e:	f003 f97d 	bl	800cd4c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009a52:	4603      	mov	r3, r0
 8009a54:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9da 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b090      	sub	sp, #64	; 0x40
 8009a76:	af0a      	add	r7, sp, #40	; 0x28
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	9303      	str	r3, [sp, #12]
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	9302      	str	r3, [sp, #8]
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff f911 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 8009aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d16e      	bne.n	8009b8e <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	230b      	movs	r3, #11
 8009aba:	9306      	str	r3, [sp, #24]
 8009abc:	230a      	movs	r3, #10
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	2309      	movs	r3, #9
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	230f      	movs	r3, #15
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	230c      	movs	r3, #12
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	230b      	movs	r3, #11
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	230a      	movs	r3, #10
 8009ad6:	2209      	movs	r2, #9
 8009ad8:	2108      	movs	r1, #8
 8009ada:	200f      	movs	r0, #15
 8009adc:	f000 ff47 	bl	800a96e <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	9308      	str	r3, [sp, #32]
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	9307      	str	r3, [sp, #28]
 8009aea:	230b      	movs	r3, #11
 8009aec:	9306      	str	r3, [sp, #24]
 8009aee:	230a      	movs	r3, #10
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	2309      	movs	r3, #9
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	2308      	movs	r3, #8
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	230f      	movs	r3, #15
 8009afc:	9302      	str	r3, [sp, #8]
 8009afe:	230c      	movs	r3, #12
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	230b      	movs	r3, #11
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	230a      	movs	r3, #10
 8009b08:	2209      	movs	r2, #9
 8009b0a:	2108      	movs	r1, #8
 8009b0c:	200f      	movs	r0, #15
 8009b0e:	f000 ffbe 	bl	800aa8e <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f97c 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2209      	movs	r2, #9
 8009b26:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	2209      	movs	r2, #9
 8009b2c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	2221      	movs	r2, #33	; 0x21
 8009b38:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2221      	movs	r2, #33	; 0x21
 8009b44:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2229      	movs	r2, #41	; 0x29
 8009b50:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	2200      	movs	r2, #0
 8009b56:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2229      	movs	r2, #41	; 0x29
 8009b5c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2209      	movs	r2, #9
 8009b62:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	22f5      	movs	r2, #245	; 0xf5
 8009b68:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	2209      	movs	r2, #9
 8009b6e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2209      	movs	r2, #9
 8009b74:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2209      	movs	r2, #9
 8009b7a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	2206      	movs	r2, #6
 8009b80:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	22bb      	movs	r2, #187	; 0xbb
 8009b86:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	2226      	movs	r2, #38	; 0x26
 8009b8c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b08c      	sub	sp, #48	; 0x30
 8009b9e:	af06      	add	r7, sp, #24
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff ff53 	bl	8009a72 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	22db      	movs	r2, #219	; 0xdb
 8009bd4:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 8009bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b08c      	sub	sp, #48	; 0x30
 8009be6:	af06      	add	r7, sp, #24
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	9304      	str	r3, [sp, #16]
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff fbb9 	bl	8009386 <VL53L1_preset_mode_histogram_medium_range>
 8009c14:	4603      	mov	r3, r0
 8009c16:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d12c      	bne.n	8009c7a <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	2307      	movs	r3, #7
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	2307      	movs	r3, #7
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	2308      	movs	r3, #8
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	2304      	movs	r3, #4
 8009c36:	2202      	movs	r2, #2
 8009c38:	2108      	movs	r1, #8
 8009c3a:	2004      	movs	r0, #4
 8009c3c:	f00a f96c 	bl	8013f18 <VL53L1_init_zone_config_structure>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d108      	bne.n	8009c6a <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c62:	f003 f873 	bl	800cd4c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f8d0 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b08c      	sub	sp, #48	; 0x30
 8009c8a:	af06      	add	r7, sp, #24
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff fc8e 	bl	80095d4 <VL53L1_preset_mode_histogram_short_range>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d12c      	bne.n	8009d1e <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	9304      	str	r3, [sp, #16]
 8009cc8:	2307      	movs	r3, #7
 8009cca:	9303      	str	r3, [sp, #12]
 8009ccc:	2307      	movs	r3, #7
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2304      	movs	r3, #4
 8009cda:	2202      	movs	r2, #2
 8009cdc:	2108      	movs	r1, #8
 8009cde:	2004      	movs	r0, #4
 8009ce0:	f00a f91a 	bl	8013f18 <VL53L1_init_zone_config_structure>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	3301      	adds	r3, #1
 8009cee:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d108      	bne.n	8009d0e <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	3302      	adds	r3, #2
 8009d00:	461a      	mov	r2, r3
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d06:	f003 f821 	bl	800cd4c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f87e 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b08c      	sub	sp, #48	; 0x30
 8009d2e:	af06      	add	r7, sp, #24
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d42:	9303      	str	r3, [sp, #12]
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	9302      	str	r3, [sp, #8]
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff f9ee 	bl	8009138 <VL53L1_preset_mode_histogram_long_range>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d12c      	bne.n	8009dc2 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	2307      	movs	r3, #7
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	2307      	movs	r3, #7
 8009d72:	9302      	str	r3, [sp, #8]
 8009d74:	2302      	movs	r3, #2
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	2308      	movs	r3, #8
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	2304      	movs	r3, #4
 8009d7e:	2202      	movs	r2, #2
 8009d80:	2108      	movs	r1, #8
 8009d82:	2004      	movs	r0, #4
 8009d84:	f00a f8c8 	bl	8013f18 <VL53L1_init_zone_config_structure>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	3301      	adds	r3, #1
 8009d92:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d108      	bne.n	8009db2 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	3302      	adds	r3, #2
 8009da4:	461a      	mov	r2, r3
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009daa:	f002 ffcf 	bl	800cd4c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f82c 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b08a      	sub	sp, #40	; 0x28
 8009dd2:	af04      	add	r7, sp, #16
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7fe fb9e 	bl	8008538 <VL53L1_preset_mode_standard_ranging>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 8009e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 8009e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	79db      	ldrb	r3, [r3, #7]
 8009e5c:	b29b      	uxth	r3, r3
				<< 8)
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	7a1b      	ldrb	r3, [r3, #8]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	785b      	ldrb	r3, [r3, #1]
 8009ea4:	b29b      	uxth	r3, r3
				<< 8)
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	789b      	ldrb	r3, [r3, #2]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	78db      	ldrb	r3, [r3, #3]
 8009ebc:	b29b      	uxth	r3, r3
				<< 8)
 8009ebe:	021b      	lsls	r3, r3, #8
 8009ec0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	791b      	ldrb	r3, [r3, #4]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	4413      	add	r3, r2
 8009eca:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8009ef8:	bf00      	nop
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	79db      	ldrb	r3, [r3, #7]
 8009f44:	b29b      	uxth	r3, r3
				<< 8)
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	7a1b      	ldrb	r3, [r3, #8]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4413      	add	r3, r2
 8009f52:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	b29b      	uxth	r3, r3
				<< 8)
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	789b      	ldrb	r3, [r3, #2]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4413      	add	r3, r2
 8009f92:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	78db      	ldrb	r3, [r3, #3]
 8009f9c:	b29b      	uxth	r3, r3
				<< 8)
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	791b      	ldrb	r3, [r3, #4]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08c      	sub	sp, #48	; 0x30
 8009fd0:	af06      	add	r7, sp, #24
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	9303      	str	r3, [sp, #12]
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fe fe64 	bl	8008cc6 <VL53L1_preset_mode_histogram_ranging>
 8009ffe:	4603      	mov	r3, r0
 800a000:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff fefd 	bl	8009e1a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3318      	adds	r3, #24
 800a038:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2230      	movs	r2, #48	; 0x30
 800a04e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a058:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a05a:	bf00      	nop
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3318      	adds	r3, #24
 800a076:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	332c      	adds	r3, #44	; 0x2c
 800a07c:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2200      	movs	r2, #0
 800a088:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2202      	movs	r2, #2
 800a08e:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2200      	movs	r2, #0
 800a094:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2200      	movs	r2, #0
 800a09a:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	78fa      	ldrb	r2, [r7, #3]
 800a0a0:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	735a      	strb	r2, [r3, #13]

}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3318      	adds	r3, #24
 800a0d8:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	332c      	adds	r3, #44	; 0x2c
 800a0de:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a0e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d115      	bne.n	800a11a <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2202      	movs	r2, #2
 800a10a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	735a      	strb	r2, [r3, #13]
 800a118:	e0be      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	7a1b      	ldrb	r3, [r3, #8]
 800a11e:	2bff      	cmp	r3, #255	; 0xff
 800a120:	d103      	bne.n	800a12a <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2280      	movs	r2, #128	; 0x80
 800a126:	721a      	strb	r2, [r3, #8]
 800a128:	e005      	b.n	800a136 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	7a1b      	ldrb	r3, [r3, #8]
 800a12e:	3301      	adds	r3, #1
 800a130:	b2da      	uxtb	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	7a19      	ldrb	r1, [r3, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f103 0209 	add.w	r2, r3, #9
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	330a      	adds	r3, #10
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f002 fdc2 	bl	800ccce <VL53L1_update_internal_stream_counters>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	7adb      	ldrb	r3, [r3, #11]
 800a152:	f083 0302 	eor.w	r3, r3, #2
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	79db      	ldrb	r3, [r3, #7]
 800a160:	3b03      	subs	r3, #3
 800a162:	2b05      	cmp	r3, #5
 800a164:	f200 8082 	bhi.w	800a26c <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a168:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16e:	bf00      	nop
 800a170:	0800a189 	.word	0x0800a189
 800a174:	0800a26d 	.word	0x0800a26d
 800a178:	0800a26d 	.word	0x0800a26d
 800a17c:	0800a1db 	.word	0x0800a1db
 800a180:	0800a211 	.word	0x0800a211
 800a184:	0800a23b 	.word	0x0800a23b

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	dd03      	ble.n	800a19e <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2206      	movs	r2, #6
 800a19a:	71da      	strb	r2, [r3, #7]
 800a19c:	e00d      	b.n	800a1ba <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d303      	bcc.n	800a1b4 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	71da      	strb	r2, [r3, #7]
 800a1b2:	e002      	b.n	800a1ba <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2207      	movs	r2, #7
 800a1b8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	735a      	strb	r2, [r3, #13]

			break;
 800a1d8:	e05e      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d303      	bcc.n	800a208 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2208      	movs	r2, #8
 800a204:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a206:	e047      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2207      	movs	r2, #7
 800a20c:	71da      	strb	r2, [r3, #7]
			break;
 800a20e:	e043      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	7b5b      	ldrb	r3, [r3, #13]
 800a214:	3301      	adds	r3, #1
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a226:	429a      	cmp	r2, r3
 800a228:	d303      	bcc.n	800a232 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2208      	movs	r2, #8
 800a22e:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a230:	e032      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2207      	movs	r2, #7
 800a236:	71da      	strb	r2, [r3, #7]
			break;
 800a238:	e02e      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	7b1b      	ldrb	r3, [r3, #12]
 800a244:	f083 0301 	eor.w	r3, r3, #1
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a258:	429a      	cmp	r2, r3
 800a25a:	d303      	bcc.n	800a264 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2208      	movs	r2, #8
 800a260:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a262:	e019      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2207      	movs	r2, #7
 800a268:	71da      	strb	r2, [r3, #7]
			break;
 800a26a:	e015      	b.n	800a298 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2203      	movs	r2, #3
 800a270:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2202      	movs	r2, #2
 800a288:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	735a      	strb	r2, [r3, #13]
			break;
 800a296:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b08d      	sub	sp, #52	; 0x34
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3318      	adds	r3, #24
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a2be:	3308      	adds	r3, #8
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	332c      	adds	r3, #44	; 0x2c
 800a2c6:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a2ce:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a2d6:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a2de:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a2fe:	f003 031f 	and.w	r3, r3, #31
 800a302:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	78db      	ldrb	r3, [r3, #3]
 800a308:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a310:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a314:	2b00      	cmp	r3, #0
 800a316:	bf14      	ite	ne
 800a318:	2301      	movne	r3, #1
 800a31a:	2300      	moveq	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a31e:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a324:	111b      	asrs	r3, r3, #4
 800a326:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a330:	7c7b      	ldrb	r3, [r7, #17]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d008      	beq.n	800a348 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a33c:	111b      	asrs	r3, r3, #4
 800a33e:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d04e      	beq.n	800a3f4 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	79db      	ldrb	r3, [r3, #7]
 800a35a:	2b06      	cmp	r3, #6
 800a35c:	d109      	bne.n	800a372 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a35e:	7c7b      	ldrb	r3, [r7, #17]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d14a      	bne.n	800a3fa <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a364:	7cfb      	ldrb	r3, [r7, #19]
 800a366:	2b12      	cmp	r3, #18
 800a368:	d047      	beq.n	800a3fa <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a36a:	23ef      	movs	r3, #239	; 0xef
 800a36c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a370:	e043      	b.n	800a3fa <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	7a1b      	ldrb	r3, [r3, #8]
 800a376:	7cba      	ldrb	r2, [r7, #18]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d002      	beq.n	800a382 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a37c:	23ee      	movs	r3, #238	; 0xee
 800a37e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	7adb      	ldrb	r3, [r3, #11]
 800a386:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d002      	beq.n	800a394 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a38e:	23ed      	movs	r3, #237	; 0xed
 800a390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	7b5b      	ldrb	r3, [r3, #13]
 800a398:	4619      	mov	r1, r3
		expected_stream_count =
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	460b      	mov	r3, r1
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	7b5b      	ldrb	r3, [r3, #13]
 800a3b0:	4619      	mov	r1, r3
		expected_gph_id =
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	440b      	add	r3, r1
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	4413      	add	r3, r2
 800a3be:	3303      	adds	r3, #3
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a3c4:	7c3a      	ldrb	r2, [r7, #16]
 800a3c6:	7cbb      	ldrb	r3, [r7, #18]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d00a      	beq.n	800a3e2 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <VL53L1_check_ll_driver_rd_state+0x138>
 800a3d6:	7cbb      	ldrb	r3, [r7, #18]
 800a3d8:	2bff      	cmp	r3, #255	; 0xff
 800a3da:	d002      	beq.n	800a3e2 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a3dc:	23ec      	movs	r3, #236	; 0xec
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d005      	beq.n	800a3f8 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a3ec:	23eb      	movs	r3, #235	; 0xeb
 800a3ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3f2:	e002      	b.n	800a3fa <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a3f4:	bf00      	nop
 800a3f6:	e000      	b.n	800a3fa <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a3f8:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a3fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3734      	adds	r7, #52	; 0x34
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b088      	sub	sp, #32
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a412:	2300      	movs	r3, #0
 800a414:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3318      	adds	r3, #24
 800a41a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a422:	3308      	adds	r3, #8
 800a424:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	332c      	adds	r3, #44	; 0x2c
 800a42a:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a432:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a43a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d11b      	bne.n	800a47a <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2203      	movs	r2, #3
 800a446:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2200      	movs	r2, #0
 800a44c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2200      	movs	r2, #0
 800a452:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2200      	movs	r2, #0
 800a458:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2202      	movs	r2, #2
 800a45e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2200      	movs	r2, #0
 800a464:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2200      	movs	r2, #0
 800a46a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	773b      	strb	r3, [r7, #28]
 800a478:	e0b1      	b.n	800a5de <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	791b      	ldrb	r3, [r3, #4]
 800a47e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	799b      	ldrb	r3, [r3, #6]
 800a484:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	2bff      	cmp	r3, #255	; 0xff
 800a492:	d103      	bne.n	800a49c <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2280      	movs	r2, #128	; 0x80
 800a498:	705a      	strb	r2, [r3, #1]
 800a49a:	e005      	b.n	800a4a8 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	7859      	ldrb	r1, [r3, #1]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	1c9a      	adds	r2, r3, #2
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	3303      	adds	r3, #3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f002 fc0a 	bl	800ccce <VL53L1_update_internal_stream_counters>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	791b      	ldrb	r3, [r3, #4]
 800a4c2:	f083 0302 	eor.w	r3, r3, #2
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b05      	cmp	r3, #5
 800a4d2:	d053      	beq.n	800a57c <VL53L1_update_ll_driver_cfg_state+0x172>
 800a4d4:	2b05      	cmp	r3, #5
 800a4d6:	dc69      	bgt.n	800a5ac <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d002      	beq.n	800a4e2 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d02d      	beq.n	800a53c <VL53L1_update_ll_driver_cfg_state+0x132>
 800a4e0:	e064      	b.n	800a5ac <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d909      	bls.n	800a50a <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	795b      	ldrb	r3, [r3, #5]
 800a500:	f083 0301 	eor.w	r3, r3, #1
 800a504:	b2da      	uxtb	r2, r3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2201      	movs	r2, #1
 800a50e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2201      	movs	r2, #1
 800a51e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2200      	movs	r2, #0
 800a524:	70da      	strb	r2, [r3, #3]
 800a526:	e005      	b.n	800a534 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2200      	movs	r2, #0
 800a52c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2201      	movs	r2, #1
 800a532:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	2204      	movs	r2, #4
 800a538:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800a53a:	e050      	b.n	800a5de <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	799b      	ldrb	r3, [r3, #6]
 800a540:	3301      	adds	r3, #1
 800a542:	b2da      	uxtb	r2, r3
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a552:	429a      	cmp	r2, r3
 800a554:	d940      	bls.n	800a5d8 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2200      	movs	r2, #0
 800a55a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	795b      	ldrb	r3, [r3, #5]
 800a560:	f083 0301 	eor.w	r3, r3, #1
 800a564:	b2da      	uxtb	r2, r3
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d031      	beq.n	800a5d8 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2205      	movs	r2, #5
 800a578:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800a57a:	e02d      	b.n	800a5d8 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	799b      	ldrb	r3, [r3, #6]
 800a580:	3301      	adds	r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a592:	429a      	cmp	r2, r3
 800a594:	d922      	bls.n	800a5dc <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2200      	movs	r2, #0
 800a59a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	795b      	ldrb	r3, [r3, #5]
 800a5a0:	f083 0301 	eor.w	r3, r3, #1
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	715a      	strb	r2, [r3, #5]
			}
			break;
 800a5aa:	e017      	b.n	800a5dc <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	719a      	strb	r2, [r3, #6]
			break;
 800a5d6:	e002      	b.n	800a5de <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a5d8:	bf00      	nop
 800a5da:	e000      	b.n	800a5de <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a5dc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11d      	bne.n	800a624 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a5e8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800a5ea:	7f3b      	ldrb	r3, [r7, #28]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b2d8      	uxtb	r0, r3
 800a5f0:	68f9      	ldr	r1, [r7, #12]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	4602      	mov	r2, r0
 800a600:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	7b5b      	ldrb	r3, [r3, #13]
 800a606:	4619      	mov	r1, r3
 800a608:	7f7b      	ldrb	r3, [r7, #29]
 800a60a:	f083 0302 	eor.w	r3, r3, #2
 800a60e:	b2d8      	uxtb	r0, r3
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	460b      	mov	r3, r1
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	440b      	add	r3, r1
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	3303      	adds	r3, #3
 800a61e:	4602      	mov	r2, r0
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	e013      	b.n	800a64c <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a624:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	4613      	mov	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	440b      	add	r3, r1
 800a632:	3302      	adds	r3, #2
 800a634:	7f3a      	ldrb	r2, [r7, #28]
 800a636:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800a638:	7fba      	ldrb	r2, [r7, #30]
 800a63a:	68f9      	ldr	r1, [r7, #12]
 800a63c:	4613      	mov	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	440b      	add	r3, r1
 800a646:	3303      	adds	r3, #3
 800a648:	7f7a      	ldrb	r2, [r7, #29]
 800a64a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800a64c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3720      	adds	r7, #32
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	7c1a      	ldrb	r2, [r3, #16]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	3301      	adds	r3, #1
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	7c52      	ldrb	r2, [r2, #17]
 800a672:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	3302      	adds	r3, #2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7c92      	ldrb	r2, [r2, #18]
 800a67c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	3303      	adds	r3, #3
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	7cd2      	ldrb	r2, [r2, #19]
 800a686:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	3304      	adds	r3, #4
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	7d12      	ldrb	r2, [r2, #20]
 800a690:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	3305      	adds	r3, #5
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	7d52      	ldrb	r2, [r2, #21]
 800a69a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	3306      	adds	r3, #6
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	7d92      	ldrb	r2, [r2, #22]
 800a6a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	3307      	adds	r3, #7
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	7dd2      	ldrb	r2, [r2, #23]
 800a6ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	7e12      	ldrb	r2, [r2, #24]
 800a6b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	3309      	adds	r3, #9
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	7e52      	ldrb	r2, [r2, #25]
 800a6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	330a      	adds	r3, #10
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	7e92      	ldrb	r2, [r2, #26]
 800a6cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	330b      	adds	r3, #11
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	7ed2      	ldrb	r2, [r2, #27]
 800a6d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	330c      	adds	r3, #12
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	7f12      	ldrb	r2, [r2, #28]
 800a6e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	330d      	adds	r3, #13
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	7f52      	ldrb	r2, [r2, #29]
 800a6ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	330e      	adds	r3, #14
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7f92      	ldrb	r2, [r2, #30]
 800a6f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	330f      	adds	r3, #15
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	7fd2      	ldrb	r2, [r2, #31]
 800a6fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3310      	adds	r3, #16
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a70a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	3311      	adds	r3, #17
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a716:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	3312      	adds	r3, #18
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800a722:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	3313      	adds	r3, #19
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800a72e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	3314      	adds	r3, #20
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a73a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	3315      	adds	r3, #21
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a746:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	3316      	adds	r3, #22
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800a752:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	3317      	adds	r3, #23
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800a75e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	3318      	adds	r3, #24
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800a76a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	3319      	adds	r3, #25
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800a776:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	331a      	adds	r3, #26
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800a782:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	331b      	adds	r3, #27
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800a78e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	331c      	adds	r3, #28
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a79a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	331d      	adds	r3, #29
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a7a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	331e      	adds	r3, #30
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800a7b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	331f      	adds	r3, #31
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800a7be:	701a      	strb	r2, [r3, #0]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	22ff      	movs	r2, #255	; 0xff
 800a7d8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	22ff      	movs	r2, #255	; 0xff
 800a7de:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	22ff      	movs	r2, #255	; 0xff
 800a7e4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	22ff      	movs	r2, #255	; 0xff
 800a7ea:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7f2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7fa:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a802:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a80a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a812:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a81a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a822:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a82a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a832:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a842:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a84a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a852:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a85a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a862:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a86a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a872:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a87a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a882:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	22ff      	movs	r2, #255	; 0xff
 800a888:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	79fa      	ldrb	r2, [r7, #7]
 800a8b2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
 800a8b8:	e017      	b.n	800a8ea <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800a8ba:	7bfa      	ldrb	r2, [r7, #15]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	011b      	lsls	r3, r3, #4
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2204      	movs	r2, #4
 800a8dc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	73fb      	strb	r3, [r7, #15]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	7bfa      	ldrb	r2, [r7, #15]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d3e2      	bcc.n	800a8ba <V53L1_init_zone_results_structure+0x22>
	}
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800a902:	b480      	push	{r7}
 800a904:	b087      	sub	sp, #28
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a910:	3308      	adds	r3, #8
 800a912:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800a918:	2310      	movs	r3, #16
 800a91a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a922:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800a924:	2300      	movs	r3, #0
 800a926:	75fb      	strb	r3, [r7, #23]
 800a928:	e016      	b.n	800a958 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800a92a:	7dfa      	ldrb	r2, [r7, #23]
 800a92c:	68b9      	ldr	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	440b      	add	r3, r1
 800a938:	3304      	adds	r3, #4
 800a93a:	2201      	movs	r2, #1
 800a93c:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800a93e:	7dfa      	ldrb	r2, [r7, #23]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	440b      	add	r3, r1
 800a94c:	3306      	adds	r3, #6
 800a94e:	2200      	movs	r2, #0
 800a950:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	3301      	adds	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
 800a958:	7dfa      	ldrb	r2, [r7, #23]
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3e4      	bcc.n	800a92a <V53L1_init_zone_dss_configs+0x28>
	}
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800a96e:	b490      	push	{r4, r7}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	4604      	mov	r4, r0
 800a976:	4608      	mov	r0, r1
 800a978:	4611      	mov	r1, r2
 800a97a:	461a      	mov	r2, r3
 800a97c:	4623      	mov	r3, r4
 800a97e:	71fb      	strb	r3, [r7, #7]
 800a980:	4603      	mov	r3, r0
 800a982:	71bb      	strb	r3, [r7, #6]
 800a984:	460b      	mov	r3, r1
 800a986:	717b      	strb	r3, [r7, #5]
 800a988:	4613      	mov	r3, r2
 800a98a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800a98c:	79bb      	ldrb	r3, [r7, #6]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	b2da      	uxtb	r2, r3
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	4413      	add	r3, r2
 800a996:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800a99c:	793b      	ldrb	r3, [r7, #4]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	797b      	ldrb	r3, [r7, #5]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800a9ac:	7d3b      	ldrb	r3, [r7, #20]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	7c3b      	ldrb	r3, [r7, #16]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800a9bc:	7f3b      	ldrb	r3, [r7, #28]
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	7e3b      	ldrb	r3, [r7, #24]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800a9cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a9d0:	011b      	lsls	r3, r3, #4
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9d8:	4413      	add	r3, r2
 800a9da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800a9e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9ec:	4413      	add	r3, r2
 800a9ee:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	f897 2020 	ldrb.w	r2, [r7, #32]
 800aa1a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800aa1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa28:	4413      	add	r3, r2
 800aa2a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800aa36:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa74:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa7c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]

}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bc90      	pop	{r4, r7}
 800aa8c:	4770      	bx	lr

0800aa8e <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800aa8e:	b490      	push	{r4, r7}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	4604      	mov	r4, r0
 800aa96:	4608      	mov	r0, r1
 800aa98:	4611      	mov	r1, r2
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	71fb      	strb	r3, [r7, #7]
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	71bb      	strb	r3, [r7, #6]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	717b      	strb	r3, [r7, #5]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800aaac:	79bb      	ldrb	r3, [r7, #6]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	4413      	add	r3, r2
 800aab6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800aabc:	793b      	ldrb	r3, [r7, #4]
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	797b      	ldrb	r3, [r7, #5]
 800aac4:	4413      	add	r3, r2
 800aac6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800aacc:	7d3b      	ldrb	r3, [r7, #20]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	7c3b      	ldrb	r3, [r7, #16]
 800aad4:	4413      	add	r3, r2
 800aad6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	789a      	ldrb	r2, [r3, #2]
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	78da      	ldrb	r2, [r3, #3]
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	789a      	ldrb	r2, [r3, #2]
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	78da      	ldrb	r2, [r3, #3]
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	791a      	ldrb	r2, [r3, #4]
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ab1a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800ab1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab28:	4413      	add	r3, r2
 800ab2a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ab36:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800ab3e:	7f3b      	ldrb	r3, [r7, #28]
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	7e3b      	ldrb	r3, [r7, #24]
 800ab46:	4413      	add	r3, r2
 800ab48:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800ab4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800ab62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab6e:	4413      	add	r3, r2
 800ab70:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	7bda      	ldrb	r2, [r3, #15]
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	7c1a      	ldrb	r2, [r3, #16]
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	7c5a      	ldrb	r2, [r3, #17]
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab94:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab9c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	2200      	movs	r2, #0
 800aba2:	701a      	strb	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bc90      	pop	{r4, r7}
 800abac:	4770      	bx	lr

0800abae <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800abae:	b480      	push	{r7}
 800abb0:	b087      	sub	sp, #28
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	460b      	mov	r3, r1
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	220c      	movs	r2, #12
 800abd6:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800abd8:	897b      	ldrh	r3, [r7, #10]
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800ac0e:	2300      	movs	r3, #0
 800ac10:	82fb      	strh	r3, [r7, #22]
 800ac12:	e015      	b.n	800ac40 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800ac14:	8afa      	ldrh	r2, [r7, #22]
 800ac16:	897b      	ldrh	r3, [r7, #10]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d207      	bcs.n	800ac2c <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800ac1c:	8afb      	ldrh	r3, [r7, #22]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	3302      	adds	r3, #2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	605a      	str	r2, [r3, #4]
 800ac2a:	e006      	b.n	800ac3a <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800ac2c:	8afb      	ldrh	r3, [r7, #22]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	3302      	adds	r3, #2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800ac3a:	8afb      	ldrh	r3, [r7, #22]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	82fb      	strh	r3, [r7, #22]
 800ac40:	8afb      	ldrh	r3, [r7, #22]
 800ac42:	2b0b      	cmp	r3, #11
 800ac44:	d9e6      	bls.n	800ac14 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	603a      	str	r2, [r7, #0]
 800ac5e:	80fb      	strh	r3, [r7, #6]
 800ac60:	460b      	mov	r3, r1
 800ac62:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800ac70:	2300      	movs	r3, #0
 800ac72:	81fb      	strh	r3, [r7, #14]
 800ac74:	e00e      	b.n	800ac94 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800ac76:	88ba      	ldrh	r2, [r7, #4]
 800ac78:	89fb      	ldrh	r3, [r7, #14]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	89ba      	ldrh	r2, [r7, #12]
 800ac84:	b2d2      	uxtb	r2, r2
 800ac86:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800ac88:	89bb      	ldrh	r3, [r7, #12]
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
 800ac90:	3301      	adds	r3, #1
 800ac92:	81fb      	strh	r3, [r7, #14]
 800ac94:	89fa      	ldrh	r2, [r7, #14]
 800ac96:	88bb      	ldrh	r3, [r7, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d3ec      	bcc.n	800ac76 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800ac9c:	bf00      	nop
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	4603      	mov	r3, r0
 800acb2:	6039      	str	r1, [r7, #0]
 800acb4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800acb6:	2300      	movs	r3, #0
 800acb8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800acba:	e00a      	b.n	800acd2 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800acbc:	89fb      	ldrh	r3, [r7, #14]
 800acbe:	021b      	lsls	r3, r3, #8
 800acc0:	b21a      	sxth	r2, r3
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	1c59      	adds	r1, r3, #1
 800acc6:	6039      	str	r1, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b21b      	sxth	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b21b      	sxth	r3, r3
 800acd0:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800acd2:	88fb      	ldrh	r3, [r7, #6]
 800acd4:	1e5a      	subs	r2, r3, #1
 800acd6:	80fa      	strh	r2, [r7, #6]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1ef      	bne.n	800acbc <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800acdc:	89fb      	ldrh	r3, [r7, #14]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	4603      	mov	r3, r0
 800acf2:	603a      	str	r2, [r7, #0]
 800acf4:	80fb      	strh	r3, [r7, #6]
 800acf6:	460b      	mov	r3, r1
 800acf8:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800ad06:	2300      	movs	r3, #0
 800ad08:	81fb      	strh	r3, [r7, #14]
 800ad0a:	e00f      	b.n	800ad2c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800ad0c:	88ba      	ldrh	r2, [r7, #4]
 800ad0e:	89fb      	ldrh	r3, [r7, #14]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	4413      	add	r3, r2
 800ad18:	89ba      	ldrh	r2, [r7, #12]
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800ad1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ad22:	121b      	asrs	r3, r3, #8
 800ad24:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800ad26:	89fb      	ldrh	r3, [r7, #14]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	81fb      	strh	r3, [r7, #14]
 800ad2c:	89fa      	ldrh	r2, [r7, #14]
 800ad2e:	88bb      	ldrh	r3, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d3eb      	bcc.n	800ad0c <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	4603      	mov	r3, r0
 800ad4a:	6039      	str	r1, [r7, #0]
 800ad4c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	b25b      	sxtb	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	da0e      	bge.n	800ad7a <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800ad5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad60:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800ad62:	e00a      	b.n	800ad7a <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800ad64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	b21a      	sxth	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	6039      	str	r1, [r7, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	b21b      	sxth	r3, r3
 800ad76:	4313      	orrs	r3, r2
 800ad78:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800ad7a:	88fb      	ldrh	r3, [r7, #6]
 800ad7c:	1e5a      	subs	r2, r3, #1
 800ad7e:	80fa      	strh	r2, [r7, #6]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ef      	bne.n	800ad64 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800ad84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800adae:	2300      	movs	r3, #0
 800adb0:	82fb      	strh	r3, [r7, #22]
 800adb2:	e00e      	b.n	800add2 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800adb4:	897a      	ldrh	r2, [r7, #10]
 800adb6:	8afb      	ldrh	r3, [r7, #22]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	3b01      	subs	r3, #1
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	4413      	add	r3, r2
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	0a1b      	lsrs	r3, r3, #8
 800adca:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800adcc:	8afb      	ldrh	r3, [r7, #22]
 800adce:	3301      	adds	r3, #1
 800add0:	82fb      	strh	r3, [r7, #22]
 800add2:	8afa      	ldrh	r2, [r7, #22]
 800add4:	897b      	ldrh	r3, [r7, #10]
 800add6:	429a      	cmp	r2, r3
 800add8:	d3ec      	bcc.n	800adb4 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	6039      	str	r1, [r7, #0]
 800adf2:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800adf8:	e007      	b.n	800ae0a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	021a      	lsls	r2, r3, #8
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	1c59      	adds	r1, r3, #1
 800ae02:	6039      	str	r1, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	80fa      	strh	r2, [r7, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1f2      	bne.n	800adfa <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800ae14:	68fb      	ldr	r3, [r7, #12]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	4603      	mov	r3, r0
 800ae2a:	6039      	str	r1, [r7, #0]
 800ae2c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	b25b      	sxtb	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	da0b      	bge.n	800ae54 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800ae42:	e007      	b.n	800ae54 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	021a      	lsls	r2, r3, #8
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	1c59      	adds	r1, r3, #1
 800ae4c:	6039      	str	r1, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	1e5a      	subs	r2, r3, #1
 800ae58:	80fa      	strh	r2, [r7, #6]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1f2      	bne.n	800ae44 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800ae7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d107      	bne.n	800ae94 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800ae84:	78fb      	ldrb	r3, [r7, #3]
 800ae86:	461a      	mov	r2, r3
 800ae88:	2127      	movs	r1, #39	; 0x27
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f009 f9ce 	bl	801422c <VL53L1_WrByte>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ae94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3318      	adds	r3, #24
 800aeb4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800aec4:	461a      	mov	r2, r3
 800aec6:	2185      	movs	r1, #133	; 0x85
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f009 f9af 	bl	801422c <VL53L1_WrByte>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800aed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800aeea:	2101      	movs	r1, #1
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff ffd7 	bl	800aea0 <VL53L1_set_firmware_enable_register>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800aef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800af0e:	2100      	movs	r1, #0
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff ffc5 	bl	800aea0 <VL53L1_set_firmware_enable_register>
 800af16:	4603      	mov	r3, r0
 800af18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800af1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3318      	adds	r3, #24
 800af3a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800af4a:	461a      	mov	r2, r3
 800af4c:	2183      	movs	r1, #131	; 0x83
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f009 f96c 	bl	801422c <VL53L1_WrByte>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800af70:	2101      	movs	r1, #1
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff ffd7 	bl	800af26 <VL53L1_set_powerforce_register>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800af7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff ffc5 	bl	800af26 <VL53L1_set_powerforce_register>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800afa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3318      	adds	r3, #24
 800afbc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800afcc:	461a      	mov	r2, r3
 800afce:	2186      	movs	r1, #134	; 0x86
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f009 f92b 	bl	801422c <VL53L1_WrByte>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800afda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	4603      	mov	r3, r0
 800afee:	460a      	mov	r2, r1
 800aff0:	80fb      	strh	r3, [r7, #6]
 800aff2:	4613      	mov	r3, r2
 800aff4:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	4618      	mov	r0, r3
 800b006:	f002 ffeb 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 800b00a:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b00c:	797b      	ldrb	r3, [r7, #5]
 800b00e:	4618      	mov	r0, r3
 800b010:	f003 fbd6 	bl	800e7c0 <VL53L1_decode_vcsel_period>
 800b014:	4603      	mov	r3, r0
 800b016:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	4613      	mov	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4413      	add	r3, r2
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	099b      	lsrs	r3, r3, #6
 800b028:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b02a:	7cfa      	ldrb	r2, [r7, #19]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	099b      	lsrs	r3, r3, #6
 800b038:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b03a:	68fb      	ldr	r3, [r7, #12]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b044:	b480      	push	{r7}
 800b046:	b089      	sub	sp, #36	; 0x24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	461a      	mov	r2, r3
 800b052:	4603      	mov	r3, r0
 800b054:	817b      	strh	r3, [r7, #10]
 800b056:	460b      	mov	r3, r1
 800b058:	813b      	strh	r3, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	4a23      	ldr	r2, [pc, #140]	; (800b104 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b078:	fb82 1203 	smull	r1, r2, r2, r3
 800b07c:	1192      	asrs	r2, r2, #6
 800b07e:	17db      	asrs	r3, r3, #31
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b084:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da03      	bge.n	800b094 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b08c:	897b      	ldrh	r3, [r7, #10]
 800b08e:	425b      	negs	r3, r3
 800b090:	b29b      	uxth	r3, r3
 800b092:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b094:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da03      	bge.n	800b0a4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b09c:	893b      	ldrh	r3, [r7, #8]
 800b09e:	425b      	negs	r3, r3
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b0a4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b0a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	015b      	lsls	r3, r3, #5
 800b0b0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	4a13      	ldr	r2, [pc, #76]	; (800b104 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b0b6:	fb82 1203 	smull	r1, r2, r2, r3
 800b0ba:	1192      	asrs	r2, r2, #6
 800b0bc:	17db      	asrs	r3, r3, #31
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b0ca:	79fa      	ldrb	r2, [r7, #7]
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	fb02 f303 	mul.w	r3, r2, r3
 800b0d2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	3310      	adds	r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	da00      	bge.n	800b0de <VL53L1_calc_range_ignore_threshold+0x9a>
 800b0dc:	331f      	adds	r3, #31
 800b0de:	115b      	asrs	r3, r3, #5
 800b0e0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e8:	db03      	blt.n	800b0f2 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0ee:	83fb      	strh	r3, [r7, #30]
 800b0f0:	e001      	b.n	800b0f6 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b0f6:	8bfb      	ldrh	r3, [r7, #30]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3724      	adds	r7, #36	; 0x24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	10624dd3 	.word	0x10624dd3

0800b108 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e008      	b.n	800b134 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	031a      	lsls	r2, r3, #12
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	085b      	lsrs	r3, r3, #1
 800b12a:	441a      	add	r2, r3
		timeout_mclks =
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b132:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b134:	68fb      	ldr	r3, [r7, #12]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff ffd6 	bl	800b108 <VL53L1_calc_timeout_mclks>
 800b15c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f887 	bl	800b272 <VL53L1_encode_timeout>
 800b164:	4603      	mov	r3, r0
 800b166:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b168:	897b      	ldrh	r3, [r7, #10]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b172:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b17e:	2100      	movs	r1, #0
 800b180:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b182:	f04f 0000 	mov.w	r0, #0
 800b186:	f04f 0100 	mov.w	r1, #0
 800b18a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	2000      	movs	r0, #0
 800b192:	4688      	mov	r8, r1
 800b194:	4681      	mov	r9, r0
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	2000      	movs	r0, #0
 800b19a:	460c      	mov	r4, r1
 800b19c:	4605      	mov	r5, r0
 800b19e:	fb04 f009 	mul.w	r0, r4, r9
 800b1a2:	fb08 f105 	mul.w	r1, r8, r5
 800b1a6:	4401      	add	r1, r0
 800b1a8:	fba8 2304 	umull	r2, r3, r8, r4
 800b1ac:	4419      	add	r1, r3
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b1b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b1b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1bc:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b1c0:	f143 0b00 	adc.w	fp, r3, #0
 800b1c4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b1c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	0b02      	lsrs	r2, r0, #12
 800b1d6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b1da:	0b0b      	lsrs	r3, r1, #12
 800b1dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b1e4:	697b      	ldr	r3, [r7, #20]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	371c      	adds	r7, #28
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b1f0:	4770      	bx	lr
	...

0800b1f4 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b208:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b20c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b20e:	4413      	add	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	da02      	bge.n	800b21e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e005      	b.n	800b22a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b224:	db01      	blt.n	800b22a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b228:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b22e:	68bb      	ldr	r3, [r7, #8]

}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	0003ffff 	.word	0x0003ffff

0800b240 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	6039      	str	r1, [r7, #0]
 800b24a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b254:	88fb      	ldrh	r3, [r7, #6]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 f837 	bl	800b2ca <VL53L1_decode_timeout>
 800b25c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff ff86 	bl	800b172 <VL53L1_calc_timeout_us>
 800b266:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b268:	68bb      	ldr	r3, [r7, #8]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b272:	b480      	push	{r7}
 800b274:	b087      	sub	sp, #28
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d017      	beq.n	800b2bc <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3b01      	subs	r3, #1
 800b290:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b292:	e005      	b.n	800b2a0 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	085b      	lsrs	r3, r3, #1
 800b298:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b29a:	89fb      	ldrh	r3, [r7, #14]
 800b29c:	3301      	adds	r3, #1
 800b29e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f4      	bne.n	800b294 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b2aa:	89fb      	ldrh	r3, [r7, #14]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b2bc:	8afb      	ldrh	r3, [r7, #22]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b2d8:	88fb      	ldrh	r3, [r7, #6]
 800b2da:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b2dc:	88fa      	ldrh	r2, [r7, #6]
 800b2de:	0a12      	lsrs	r2, r2, #8
 800b2e0:	b292      	uxth	r2, r2
 800b2e2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	607a      	str	r2, [r7, #4]
 800b302:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b304:	2300      	movs	r3, #0
 800b306:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b314:	887b      	ldrh	r3, [r7, #2]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d102      	bne.n	800b320 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b31a:	23f1      	movs	r3, #241	; 0xf1
 800b31c:	77fb      	strb	r3, [r7, #31]
 800b31e:	e05d      	b.n	800b3dc <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	799a      	ldrb	r2, [r3, #6]
 800b324:	887b      	ldrh	r3, [r7, #2]
 800b326:	4611      	mov	r1, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff fe5c 	bl	800afe6 <VL53L1_calc_macro_period_us>
 800b32e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b330:	6979      	ldr	r1, [r7, #20]
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7ff fee8 	bl	800b108 <VL53L1_calc_timeout_mclks>
 800b338:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2bff      	cmp	r3, #255	; 0xff
 800b33e:	d901      	bls.n	800b344 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b340:	23ff      	movs	r3, #255	; 0xff
 800b342:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b34c:	6979      	ldr	r1, [r7, #20]
 800b34e:	68b8      	ldr	r0, [r7, #8]
 800b350:	f7ff fef7 	bl	800b142 <VL53L1_calc_encoded_timeout>
 800b354:	4603      	mov	r3, r0
 800b356:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b358:	8a7b      	ldrh	r3, [r7, #18]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b364:	8a7b      	ldrh	r3, [r7, #18]
 800b366:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b36c:	6979      	ldr	r1, [r7, #20]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff fee7 	bl	800b142 <VL53L1_calc_encoded_timeout>
 800b374:	4603      	mov	r3, r0
 800b376:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b378:	8a7b      	ldrh	r3, [r7, #18]
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b384:	8a7b      	ldrh	r3, [r7, #18]
 800b386:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	7a5a      	ldrb	r2, [r3, #9]
 800b390:	887b      	ldrh	r3, [r7, #2]
 800b392:	4611      	mov	r1, r2
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fe26 	bl	800afe6 <VL53L1_calc_macro_period_us>
 800b39a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b39c:	6979      	ldr	r1, [r7, #20]
 800b39e:	68b8      	ldr	r0, [r7, #8]
 800b3a0:	f7ff fecf 	bl	800b142 <VL53L1_calc_encoded_timeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b3a8:	8a7b      	ldrh	r3, [r7, #18]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b3b4:	8a7b      	ldrh	r3, [r7, #18]
 800b3b6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b3bc:	6979      	ldr	r1, [r7, #20]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff febf 	bl	800b142 <VL53L1_calc_encoded_timeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b3c8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b3d4:	8a7b      	ldrh	r3, [r7, #18]
 800b3d6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b3dc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b3e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3ec:	b09e      	sub	sp, #120	; 0x78
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6578      	str	r0, [r7, #84]	; 0x54
 800b3f2:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b3fa:	f04f 0200 	mov.w	r2, #0
 800b3fe:	f04f 0300 	mov.w	r3, #0
 800b402:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	f04f 0300 	mov.w	r3, #0
 800b40e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	f04f 0300 	mov.w	r3, #0
 800b41a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b420:	885b      	ldrh	r3, [r3, #2]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d103      	bne.n	800b42e <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b426:	23f1      	movs	r3, #241	; 0xf1
 800b428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b42c:	e0d6      	b.n	800b5dc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b430:	785b      	ldrb	r3, [r3, #1]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80d2 	beq.w	800b5dc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 80cd 	bne.w	800b5dc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b448:	2200      	movs	r2, #0
 800b44a:	643b      	str	r3, [r7, #64]	; 0x40
 800b44c:	647a      	str	r2, [r7, #68]	; 0x44
 800b44e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b452:	460b      	mov	r3, r1
 800b454:	3301      	adds	r3, #1
 800b456:	623b      	str	r3, [r7, #32]
 800b458:	4613      	mov	r3, r2
 800b45a:	f143 0300 	adc.w	r3, r3, #0
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
 800b460:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b464:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b46e:	b29b      	uxth	r3, r3
 800b470:	2200      	movs	r2, #0
 800b472:	64bb      	str	r3, [r7, #72]	; 0x48
 800b474:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b478:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b47c:	4602      	mov	r2, r0
 800b47e:	fb02 f203 	mul.w	r2, r2, r3
 800b482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b484:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b488:	fb01 f303 	mul.w	r3, r1, r3
 800b48c:	441a      	add	r2, r3
 800b48e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b490:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b492:	fba3 4501 	umull	r4, r5, r3, r1
 800b496:	1953      	adds	r3, r2, r5
 800b498:	461d      	mov	r5, r3
 800b49a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800b49e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800b4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b4ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	61bb      	str	r3, [r7, #24]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	f143 0300 	adc.w	r3, r3, #0
 800b4bc:	61fb      	str	r3, [r7, #28]
 800b4be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b4c2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800b4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b4d0:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800b4d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b4d8:	4622      	mov	r2, r4
 800b4da:	fb02 f203 	mul.w	r2, r2, r3
 800b4de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	fb01 f303 	mul.w	r3, r1, r3
 800b4e6:	441a      	add	r2, r3
 800b4e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	fba3 ab01 	umull	sl, fp, r3, r1
 800b4f0:	eb02 030b 	add.w	r3, r2, fp
 800b4f4:	469b      	mov	fp, r3
 800b4f6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800b4fa:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800b4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	17da      	asrs	r2, r3, #31
 800b504:	62bb      	str	r3, [r7, #40]	; 0x28
 800b506:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800b508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b50a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b50e:	4622      	mov	r2, r4
 800b510:	fb02 f203 	mul.w	r2, r2, r3
 800b514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b516:	4629      	mov	r1, r5
 800b518:	fb01 f303 	mul.w	r3, r1, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b520:	4621      	mov	r1, r4
 800b522:	fba2 8901 	umull	r8, r9, r2, r1
 800b526:	444b      	add	r3, r9
 800b528:	4699      	mov	r9, r3
 800b52a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800b52e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800b532:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b536:	0fd9      	lsrs	r1, r3, #31
 800b538:	2000      	movs	r0, #0
 800b53a:	6139      	str	r1, [r7, #16]
 800b53c:	6178      	str	r0, [r7, #20]
 800b53e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b542:	4621      	mov	r1, r4
 800b544:	1889      	adds	r1, r1, r2
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	4629      	mov	r1, r5
 800b54a:	eb43 0101 	adc.w	r1, r3, r1
 800b54e:	60f9      	str	r1, [r7, #12]
 800b550:	f04f 0200 	mov.w	r2, #0
 800b554:	f04f 0300 	mov.w	r3, #0
 800b558:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b55c:	4621      	mov	r1, r4
 800b55e:	084a      	lsrs	r2, r1, #1
 800b560:	4629      	mov	r1, r5
 800b562:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800b566:	4629      	mov	r1, r5
 800b568:	104b      	asrs	r3, r1, #1
 800b56a:	4610      	mov	r0, r2
 800b56c:	4619      	mov	r1, r3
 800b56e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b572:	1814      	adds	r4, r2, r0
 800b574:	603c      	str	r4, [r7, #0]
 800b576:	414b      	adcs	r3, r1
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b57e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800b582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b586:	4313      	orrs	r3, r2
 800b588:	d009      	beq.n	800b59e <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800b58a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b58e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b592:	f7f4 fe45 	bl	8000220 <__aeabi_ldivmod>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800b59e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800b5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800b5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800b5b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5ba:	7852      	ldrb	r2, [r2, #1]
 800b5bc:	0852      	lsrs	r2, r2, #1
 800b5be:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800b5c0:	441a      	add	r2, r3
 800b5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800b5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800b5ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5d0:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800b5d2:	fb93 f2f2 	sdiv	r2, r3, r2
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800b5dc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3778      	adds	r7, #120	; 0x78
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b5ea <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b087      	sub	sp, #28
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3318      	adds	r3, #24
 800b5f8:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800b60c:	029b      	lsls	r3, r3, #10
 800b60e:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800b616:	029b      	lsls	r3, r3, #10
 800b618:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8095 	bne.w	800b754 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800b630:	091b      	lsrs	r3, r3, #4
 800b632:	b2da      	uxtb	r2, r3
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800b63e:	f003 030f 	and.w	r3, r3, #15
 800b642:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800b64e:	091b      	lsrs	r3, r3, #4
 800b650:	b2da      	uxtb	r2, r3
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800b65c:	f003 030f 	and.w	r3, r3, #15
 800b660:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800b66c:	091b      	lsrs	r3, r3, #4
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800b67a:	f003 030f 	and.w	r3, r3, #15
 800b67e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	da2c      	bge.n	800b6ea <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800b696:	091b      	lsrs	r3, r3, #4
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800b6a4:	f003 030f 	and.w	r3, r3, #15
 800b6a8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800b6b4:	091b      	lsrs	r3, r3, #4
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800b6d2:	091b      	lsrs	r3, r3, #4
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	f340 80c2 	ble.w	800b87c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800b6fe:	091b      	lsrs	r3, r3, #4
 800b700:	b2da      	uxtb	r2, r3
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800b71c:	091b      	lsrs	r3, r3, #4
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800b72a:	f003 030f 	and.w	r3, r3, #15
 800b72e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800b73a:	091b      	lsrs	r3, r3, #4
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800b748:	f003 030f 	and.w	r3, r3, #15
 800b74c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	731a      	strb	r2, [r3, #12]
 800b752:	e093      	b.n	800b87c <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800b75a:	f003 030f 	and.w	r3, r3, #15
 800b75e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800b77a:	091b      	lsrs	r3, r3, #4
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b788:	f003 030f 	and.w	r3, r3, #15
 800b78c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800b798:	091b      	lsrs	r3, r3, #4
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	da2c      	bge.n	800b816 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800b7c2:	091b      	lsrs	r3, r3, #4
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800b7d0:	f003 030f 	and.w	r3, r3, #15
 800b7d4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800b7e0:	091b      	lsrs	r3, r3, #4
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800b7ee:	f003 030f 	and.w	r3, r3, #15
 800b7f2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800b7fe:	091b      	lsrs	r3, r3, #4
 800b800:	b2da      	uxtb	r2, r3
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800b80c:	f003 030f 	and.w	r3, r3, #15
 800b810:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	429a      	cmp	r2, r3
 800b820:	dd2c      	ble.n	800b87c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800b828:	091b      	lsrs	r3, r3, #4
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800b846:	091b      	lsrs	r3, r3, #4
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800b854:	f003 030f 	and.w	r3, r3, #15
 800b858:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800b864:	091b      	lsrs	r3, r3, #4
 800b866:	b2da      	uxtb	r2, r3
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800b872:	f003 030f 	and.w	r3, r3, #15
 800b876:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	75fb      	strb	r3, [r7, #23]
 800b880:	e007      	b.n	800b892 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	4413      	add	r3, r2
 800b888:	2201      	movs	r2, #1
 800b88a:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	3301      	adds	r3, #1
 800b890:	75fb      	strb	r3, [r7, #23]
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	2b05      	cmp	r3, #5
 800b896:	d9f4      	bls.n	800b882 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800b8a6:	b590      	push	{r4, r7, lr}
 800b8a8:	b093      	sub	sp, #76	; 0x4c
 800b8aa:	af04      	add	r7, sp, #16
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
 800b8b2:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3318      	adds	r3, #24
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800b8e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800b8f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800b8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fc:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800b900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800b904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b908:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800b90a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	2b07      	cmp	r3, #7
 800b916:	d006      	beq.n	800b926 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800b91c:	2b08      	cmp	r3, #8
 800b91e:	d002      	beq.n	800b926 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800b920:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b924:	e0ec      	b.n	800bb00 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800b926:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d102      	bne.n	800b932 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800b92c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b930:	e0e6      	b.n	800bb00 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800b932:	2300      	movs	r3, #0
 800b934:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800b938:	e0d9      	b.n	800baee <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800b93a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	214c      	movs	r1, #76	; 0x4c
 800b942:	fb01 f303 	mul.w	r3, r1, r3
 800b946:	4413      	add	r3, r2
 800b948:	335e      	adds	r3, #94	; 0x5e
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	d00b      	beq.n	800b968 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800b950:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	214c      	movs	r1, #76	; 0x4c
 800b958:	fb01 f303 	mul.w	r3, r1, r3
 800b95c:	4413      	add	r3, r2
 800b95e:	335e      	adds	r3, #94	; 0x5e
 800b960:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800b962:	2b13      	cmp	r3, #19
 800b964:	f040 80bd 	bne.w	800bae2 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	795b      	ldrb	r3, [r3, #5]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800b970:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	214c      	movs	r1, #76	; 0x4c
 800b978:	fb01 f303 	mul.w	r3, r1, r3
 800b97c:	4413      	add	r3, r2
 800b97e:	335e      	adds	r3, #94	; 0x5e
 800b980:	2217      	movs	r2, #23
 800b982:	701a      	strb	r2, [r3, #0]
 800b984:	e009      	b.n	800b99a <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800b986:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	214c      	movs	r1, #76	; 0x4c
 800b98e:	fb01 f303 	mul.w	r3, r1, r3
 800b992:	4413      	add	r3, r2
 800b994:	335e      	adds	r3, #94	; 0x5e
 800b996:	2207      	movs	r2, #7
 800b998:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800b9a0:	e097      	b.n	800bad2 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800b9a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	214c      	movs	r1, #76	; 0x4c
 800b9aa:	fb01 f303 	mul.w	r3, r1, r3
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3354      	adds	r3, #84	; 0x54
 800b9b2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800b9b4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4403      	add	r3, r0
 800b9c4:	3310      	adds	r3, #16
 800b9c6:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800b9c8:	4299      	cmp	r1, r3
 800b9ca:	d915      	bls.n	800b9f8 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800b9cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	214c      	movs	r1, #76	; 0x4c
 800b9d4:	fb01 f303 	mul.w	r3, r1, r3
 800b9d8:	4413      	add	r3, r2
 800b9da:	3354      	adds	r3, #84	; 0x54
 800b9dc:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800b9de:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4403      	add	r3, r0
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800b9f2:	1acb      	subs	r3, r1, r3
 800b9f4:	867b      	strh	r3, [r7, #50]	; 0x32
 800b9f6:	e014      	b.n	800ba22 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800b9f8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	3310      	adds	r3, #16
 800ba0a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800ba0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	204c      	movs	r0, #76	; 0x4c
 800ba14:	fb00 f303 	mul.w	r3, r0, r3
 800ba18:	440b      	add	r3, r1
 800ba1a:	3354      	adds	r3, #84	; 0x54
 800ba1c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800ba22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ba24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d24e      	bcs.n	800bac8 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800ba2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d125      	bne.n	800ba7e <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800ba32:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800ba36:	4613      	mov	r3, r2
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	3308      	adds	r3, #8
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800ba44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800ba48:	224c      	movs	r2, #76	; 0x4c
 800ba4a:	fb02 f303 	mul.w	r3, r2, r3
 800ba4e:	3310      	adds	r3, #16
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	4413      	add	r3, r2
 800ba54:	3304      	adds	r3, #4
 800ba56:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800ba58:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800ba5c:	f107 0217 	add.w	r2, r7, #23
 800ba60:	9203      	str	r2, [sp, #12]
 800ba62:	f107 021c 	add.w	r2, r7, #28
 800ba66:	9202      	str	r2, [sp, #8]
 800ba68:	f107 0218 	add.w	r2, r7, #24
 800ba6c:	9201      	str	r2, [sp, #4]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	4623      	mov	r3, r4
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	f000 f848 	bl	800bb08 <VL53L1_hist_events_consistency_check>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800ba7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d115      	bne.n	800bab2 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d112      	bne.n	800bab2 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800ba8c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800ba90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800ba94:	224c      	movs	r2, #76	; 0x4c
 800ba96:	fb02 f303 	mul.w	r3, r2, r3
 800ba9a:	3310      	adds	r3, #16
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	4413      	add	r3, r2
 800baa0:	3304      	adds	r3, #4
 800baa2:	f107 0217 	add.w	r2, r7, #23
 800baa6:	4619      	mov	r1, r3
 800baa8:	f000 fb44 	bl	800c134 <VL53L1_hist_merged_pulse_check>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800bab2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bab6:	7df8      	ldrb	r0, [r7, #23]
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	214c      	movs	r1, #76	; 0x4c
 800babc:	fb01 f303 	mul.w	r3, r1, r3
 800bac0:	4413      	add	r3, r2
 800bac2:	335e      	adds	r3, #94	; 0x5e
 800bac4:	4602      	mov	r2, r0
 800bac6:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800bac8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bacc:	3301      	adds	r3, #1
 800bace:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	795b      	ldrb	r3, [r3, #5]
 800bad6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bada:	429a      	cmp	r2, r3
 800badc:	f4ff af61 	bcc.w	800b9a2 <VL53L1_hist_phase_consistency_check+0xfc>
 800bae0:	e000      	b.n	800bae4 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800bae2:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bae4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bae8:	3301      	adds	r3, #1
 800baea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	7c9b      	ldrb	r3, [r3, #18]
 800baf2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800baf6:	429a      	cmp	r2, r3
 800baf8:	f4ff af1f 	bcc.w	800b93a <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800bafc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	373c      	adds	r7, #60	; 0x3c
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd90      	pop	{r4, r7, pc}

0800bb08 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800bb08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb0c:	b0d4      	sub	sp, #336	; 0x150
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800bb14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800bb1e:	460b      	mov	r3, r1
 800bb20:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800bb2a:	f04f 0200 	mov.w	r2, #0
 800bb2e:	f04f 0300 	mov.w	r3, #0
 800bb32:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800bb42:	f04f 0200 	mov.w	r2, #0
 800bb46:	f04f 0300 	mov.w	r3, #0
 800bb4a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800bb4e:	f04f 0200 	mov.w	r2, #0
 800bb52:	f04f 0300 	mov.w	r3, #0
 800bb56:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800bb5a:	f04f 0200 	mov.w	r2, #0
 800bb5e:	f04f 0300 	mov.w	r3, #0
 800bb62:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800bb66:	f04f 0200 	mov.w	r2, #0
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800bb72:	f04f 0200 	mov.w	r2, #0
 800bb76:	f04f 0300 	mov.w	r3, #0
 800bb7a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800bb7e:	f04f 0200 	mov.w	r2, #0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800bb96:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800bb9e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800bba2:	2209      	movs	r2, #9
 800bba4:	701a      	strb	r2, [r3, #0]
		return status;
 800bba6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800bbaa:	e2bd      	b.n	800c128 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800bbac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbb8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bbbc:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bbc8:	4613      	mov	r3, r2
 800bbca:	f143 0300 	adc.w	r3, r3, #0
 800bbce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bbd2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800bbd6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800bbda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbde:	885b      	ldrh	r3, [r3, #2]
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	469a      	mov	sl, r3
 800bbe6:	4693      	mov	fp, r2
 800bbe8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bbec:	fb0a f203 	mul.w	r2, sl, r3
 800bbf0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bbf4:	fb0b f303 	mul.w	r3, fp, r3
 800bbf8:	441a      	add	r2, r3
 800bbfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bbfe:	fba3 450a 	umull	r4, r5, r3, sl
 800bc02:	1953      	adds	r3, r2, r5
 800bc04:	461d      	mov	r5, r3
 800bc06:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800bc0a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800bc0e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc1a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc22:	460b      	mov	r3, r1
 800bc24:	3301      	adds	r3, #1
 800bc26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	f143 0300 	adc.w	r3, r3, #0
 800bc30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc34:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800bc38:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800bc3c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bc40:	8adb      	ldrh	r3, [r3, #22]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc4a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bc52:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800bc56:	4622      	mov	r2, r4
 800bc58:	fb02 f203 	mul.w	r2, r2, r3
 800bc5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bc60:	4629      	mov	r1, r5
 800bc62:	fb01 f303 	mul.w	r3, r1, r3
 800bc66:	441a      	add	r2, r3
 800bc68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	fba3 8901 	umull	r8, r9, r3, r1
 800bc72:	eb02 0309 	add.w	r3, r2, r9
 800bc76:	4699      	mov	r9, r3
 800bc78:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800bc7c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800bc80:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800bc84:	f04f 0000 	mov.w	r0, #0
 800bc88:	f04f 0100 	mov.w	r1, #0
 800bc8c:	0319      	lsls	r1, r3, #12
 800bc8e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800bc92:	0310      	lsls	r0, r2, #12
 800bc94:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800bc98:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bc9c:	0fd9      	lsrs	r1, r3, #31
 800bc9e:	2000      	movs	r0, #0
 800bca0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800bca4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800bca8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800bcac:	4621      	mov	r1, r4
 800bcae:	1889      	adds	r1, r1, r2
 800bcb0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	eb43 0101 	adc.w	r1, r3, r1
 800bcba:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800bcbe:	f04f 0200 	mov.w	r2, #0
 800bcc2:	f04f 0300 	mov.w	r3, #0
 800bcc6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800bcca:	4621      	mov	r1, r4
 800bccc:	084a      	lsrs	r2, r1, #1
 800bcce:	4629      	mov	r1, r5
 800bcd0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	104b      	asrs	r3, r1, #1
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4619      	mov	r1, r3
 800bcdc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bce0:	1814      	adds	r4, r2, r0
 800bce2:	67bc      	str	r4, [r7, #120]	; 0x78
 800bce4:	414b      	adcs	r3, r1
 800bce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bce8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800bcec:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800bcf0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	d009      	beq.n	800bd0c <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800bcf8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bcfc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bd00:	f7f4 fa8e 	bl	8000220 <__aeabi_ldivmod>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800bd0c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bd10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd14:	fb03 f102 	mul.w	r1, r3, r2
 800bd18:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bd1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd20:	fb02 f303 	mul.w	r3, r2, r3
 800bd24:	18ca      	adds	r2, r1, r3
 800bd26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd2a:	fba3 1303 	umull	r1, r3, r3, r3
 800bd2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bd32:	460b      	mov	r3, r1
 800bd34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bd3c:	18d3      	adds	r3, r2, r3
 800bd3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bd42:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800bd46:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800bd4a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800bd4e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd52:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bd56:	6739      	str	r1, [r7, #112]	; 0x70
 800bd58:	f143 0300 	adc.w	r3, r3, #0
 800bd5c:	677b      	str	r3, [r7, #116]	; 0x74
 800bd5e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800bd62:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800bd66:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da08      	bge.n	800bd80 <VL53L1_hist_events_consistency_check+0x278>
 800bd6e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800bd72:	1851      	adds	r1, r2, r1
 800bd74:	66b9      	str	r1, [r7, #104]	; 0x68
 800bd76:	f143 0300 	adc.w	r3, r3, #0
 800bd7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bd80:	f04f 0000 	mov.w	r0, #0
 800bd84:	f04f 0100 	mov.w	r1, #0
 800bd88:	0b10      	lsrs	r0, r2, #12
 800bd8a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800bd8e:	1319      	asrs	r1, r3, #12
 800bd90:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800bd94:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	663b      	str	r3, [r7, #96]	; 0x60
 800bd9e:	667a      	str	r2, [r7, #100]	; 0x64
 800bda0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800bda4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800bda8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdb4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800bdb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800bdbc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	1a51      	subs	r1, r2, r1
 800bdc4:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	eb63 0301 	sbc.w	r3, r3, r1
 800bdcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800bdd2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800bdd6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bdda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bdde:	fb03 f102 	mul.w	r1, r3, r2
 800bde2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bde6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bdea:	fb02 f303 	mul.w	r3, r2, r3
 800bdee:	4419      	add	r1, r3
 800bdf0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800bdf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bdf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be00:	4613      	mov	r3, r2
 800be02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0a:	18cb      	adds	r3, r1, r3
 800be0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be10:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800be14:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800be18:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800be1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800be20:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800be24:	6539      	str	r1, [r7, #80]	; 0x50
 800be26:	f143 0300 	adc.w	r3, r3, #0
 800be2a:	657b      	str	r3, [r7, #84]	; 0x54
 800be2c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800be30:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800be34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da08      	bge.n	800be4e <VL53L1_hist_events_consistency_check+0x346>
 800be3c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800be40:	1851      	adds	r1, r2, r1
 800be42:	64b9      	str	r1, [r7, #72]	; 0x48
 800be44:	f143 0300 	adc.w	r3, r3, #0
 800be48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be4e:	f04f 0000 	mov.w	r0, #0
 800be52:	f04f 0100 	mov.w	r1, #0
 800be56:	0b10      	lsrs	r0, r2, #12
 800be58:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800be5c:	1319      	asrs	r1, r3, #12
 800be5e:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800be62:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800be66:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800be6a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800be6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be70:	2200      	movs	r2, #0
 800be72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be76:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800be7e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800be82:	4622      	mov	r2, r4
 800be84:	fb02 f203 	mul.w	r2, r2, r3
 800be88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be8c:	4629      	mov	r1, r5
 800be8e:	fb01 f303 	mul.w	r3, r1, r3
 800be92:	441a      	add	r2, r3
 800be94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be98:	4621      	mov	r1, r4
 800be9a:	fba3 1301 	umull	r1, r3, r3, r1
 800be9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bea2:	460b      	mov	r3, r1
 800bea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beac:	18d3      	adds	r3, r2, r3
 800beae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800beb2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800beb6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800beba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800bebe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bec2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bec6:	6439      	str	r1, [r7, #64]	; 0x40
 800bec8:	f143 0300 	adc.w	r3, r3, #0
 800becc:	647b      	str	r3, [r7, #68]	; 0x44
 800bece:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800bed2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800bed6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800beda:	2b00      	cmp	r3, #0
 800bedc:	da08      	bge.n	800bef0 <VL53L1_hist_events_consistency_check+0x3e8>
 800bede:	f640 71ff 	movw	r1, #4095	; 0xfff
 800bee2:	1851      	adds	r1, r2, r1
 800bee4:	63b9      	str	r1, [r7, #56]	; 0x38
 800bee6:	f143 0300 	adc.w	r3, r3, #0
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bef0:	f04f 0000 	mov.w	r0, #0
 800bef4:	f04f 0100 	mov.w	r1, #0
 800bef8:	0b10      	lsrs	r0, r2, #12
 800befa:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800befe:	1319      	asrs	r1, r3, #12
 800bf00:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800bf04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bf08:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800bf0c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf18:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf20:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800bf24:	4622      	mov	r2, r4
 800bf26:	fb02 f203 	mul.w	r2, r2, r3
 800bf2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf2e:	4629      	mov	r1, r5
 800bf30:	fb01 f303 	mul.w	r3, r1, r3
 800bf34:	441a      	add	r2, r3
 800bf36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	fba3 1301 	umull	r1, r3, r3, r1
 800bf40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bf44:	460b      	mov	r3, r1
 800bf46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf4e:	18d3      	adds	r3, r2, r3
 800bf50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bf54:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800bf58:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800bf5c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800bf60:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bf64:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bf68:	6339      	str	r1, [r7, #48]	; 0x30
 800bf6a:	f143 0300 	adc.w	r3, r3, #0
 800bf6e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf70:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800bf74:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800bf78:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4619      	mov	r1, r3
 800bf80:	2900      	cmp	r1, #0
 800bf82:	da08      	bge.n	800bf96 <VL53L1_hist_events_consistency_check+0x48e>
 800bf84:	f640 73ff 	movw	r3, #4095	; 0xfff
 800bf88:	18c3      	adds	r3, r0, r3
 800bf8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8c:	f141 0300 	adc.w	r3, r1, #0
 800bf90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	f04f 0300 	mov.w	r3, #0
 800bf9e:	0b02      	lsrs	r2, r0, #12
 800bfa0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800bfa4:	130b      	asrs	r3, r1, #12
 800bfa6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800bfaa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bfae:	1c91      	adds	r1, r2, #2
 800bfb0:	6239      	str	r1, [r7, #32]
 800bfb2:	f143 0300 	adc.w	r3, r3, #0
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bfbc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800bfc0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da06      	bge.n	800bfd6 <VL53L1_hist_events_consistency_check+0x4ce>
 800bfc8:	1cd1      	adds	r1, r2, #3
 800bfca:	61b9      	str	r1, [r7, #24]
 800bfcc:	f143 0300 	adc.w	r3, r3, #0
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfd6:	f04f 0000 	mov.w	r0, #0
 800bfda:	f04f 0100 	mov.w	r1, #0
 800bfde:	0890      	lsrs	r0, r2, #2
 800bfe0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800bfe4:	1099      	asrs	r1, r3, #2
 800bfe6:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800bfea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfee:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800bff0:	2200      	movs	r2, #0
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	617a      	str	r2, [r7, #20]
 800bff6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bffa:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800bffe:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c002:	1c91      	adds	r1, r2, #2
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	f143 0300 	adc.w	r3, r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c010:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c014:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c018:	2b00      	cmp	r3, #0
 800c01a:	da06      	bge.n	800c02a <VL53L1_hist_events_consistency_check+0x522>
 800c01c:	1cd1      	adds	r1, r2, #3
 800c01e:	6039      	str	r1, [r7, #0]
 800c020:	f143 0300 	adc.w	r3, r3, #0
 800c024:	607b      	str	r3, [r7, #4]
 800c026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c02a:	f04f 0000 	mov.w	r0, #0
 800c02e:	f04f 0100 	mov.w	r1, #0
 800c032:	0890      	lsrs	r0, r2, #2
 800c034:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c038:	1099      	asrs	r1, r3, #2
 800c03a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c042:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c048:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c04a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c04e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c054:	4413      	add	r3, r2
 800c056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c05a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	4618      	mov	r0, r3
 800c062:	f002 f8c6 	bl	800e1f2 <VL53L1_isqrt>
 800c066:	4603      	mov	r3, r0
 800c068:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c06a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c06e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c070:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c07a:	fb03 f202 	mul.w	r2, r3, r2
 800c07e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c082:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c084:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f103 0220 	add.w	r2, r3, #32
 800c08e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c092:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c094:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da00      	bge.n	800c0a0 <VL53L1_hist_events_consistency_check+0x598>
 800c09e:	333f      	adds	r3, #63	; 0x3f
 800c0a0:	119b      	asrs	r3, r3, #6
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0a8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c0:	1a9b      	subs	r3, r3, r2
 800c0c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c0c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c0ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	da08      	bge.n	800c0e4 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c0d2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0da:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c0dc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e007      	b.n	800c0f4 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c0e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c0e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c0ec:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c0ee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c0f2:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c0f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	429a      	cmp	r2, r3
 800c102:	dd0b      	ble.n	800c11c <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c104:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c108:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c10a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c10e:	429a      	cmp	r2, r3
 800c110:	d204      	bcs.n	800c11c <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c112:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c116:	2214      	movs	r2, #20
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	e003      	b.n	800c124 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c11c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c120:	2209      	movs	r2, #9
 800c122:	701a      	strb	r2, [r3, #0]





	return status;
 800c124:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c128:	4618      	mov	r0, r3
 800c12a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c12e:	46bd      	mov	sp, r7
 800c130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c134 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c142:	2300      	movs	r3, #0
 800c144:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c156:	429a      	cmp	r2, r3
 800c158:	dd0b      	ble.n	800c172 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c160:	b29a      	uxth	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c168:	b29b      	uxth	r3, r3
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	b29b      	uxth	r3, r3
		delta_mm =
 800c16e:	82fb      	strh	r3, [r7, #22]
 800c170:	e00a      	b.n	800c188 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c178:	b29a      	uxth	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c180:	b29b      	uxth	r3, r3
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	b29b      	uxth	r3, r3
		delta_mm =
 800c186:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	dd09      	ble.n	800c1a4 <VL53L1_hist_merged_pulse_check+0x70>
 800c190:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c198:	429a      	cmp	r2, r3
 800c19a:	dd03      	ble.n	800c1a4 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2216      	movs	r2, #22
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2209      	movs	r2, #9
 800c1a8:	701a      	strb	r2, [r3, #0]

	return status;
 800c1aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b08e      	sub	sp, #56	; 0x38
 800c1be:	af04      	add	r7, sp, #16
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3318      	adds	r3, #24
 800c1d2:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c1e2:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c1ea:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c1f2:	2b09      	cmp	r3, #9
 800c1f4:	d009      	beq.n	800c20a <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c1fc:	2b13      	cmp	r3, #19
 800c1fe:	d004      	beq.n	800c20a <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c206:	2b14      	cmp	r3, #20
 800c208:	d129      	bne.n	800c25e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c210:	2b09      	cmp	r3, #9
 800c212:	d009      	beq.n	800c228 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c21a:	2b13      	cmp	r3, #19
 800c21c:	d004      	beq.n	800c228 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c224:	2b14      	cmp	r3, #20
 800c226:	d11a      	bne.n	800c25e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2209      	movs	r2, #9
 800c22c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c23a:	8bb9      	ldrh	r1, [r7, #28]
 800c23c:	7ff8      	ldrb	r0, [r7, #31]
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	f107 0318 	add.w	r3, r7, #24
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	f107 0314 	add.w	r3, r7, #20
 800c24a:	9301      	str	r3, [sp, #4]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4613      	mov	r3, r2
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	f7ff fc58 	bl	800bb08 <VL53L1_hist_events_consistency_check>
 800c258:	4603      	mov	r3, r0
 800c25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c25e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c262:	4618      	mov	r0, r3
 800c264:	3728      	adds	r7, #40	; 0x28
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c276:	2300      	movs	r3, #0
 800c278:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c292:	2b00      	cmp	r3, #0
 800c294:	d019      	beq.n	800c2ca <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c29c:	4618      	mov	r0, r3
 800c29e:	f002 f90f 	bl	800e4c0 <VL53L1_calc_pll_period_mm>
 800c2a2:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c2aa:	021b      	lsls	r3, r3, #8
 800c2ac:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	fb02 f303 	mul.w	r3, r2, r3
 800c2b6:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c2be:	0bdb      	lsrs	r3, r3, #15
 800c2c0:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	b21a      	sxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c2ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3720      	adds	r7, #32
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c2d6:	b590      	push	{r4, r7, lr}
 800c2d8:	b08d      	sub	sp, #52	; 0x34
 800c2da:	af04      	add	r7, sp, #16
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	80fb      	strh	r3, [r7, #6]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	80bb      	strh	r3, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c314:	78b9      	ldrb	r1, [r7, #2]
 800c316:	78f8      	ldrb	r0, [r7, #3]
 800c318:	f107 030c 	add.w	r3, r7, #12
 800c31c:	9303      	str	r3, [sp, #12]
 800c31e:	f107 030e 	add.w	r3, r7, #14
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	23ff      	movs	r3, #255	; 0xff
 800c330:	22c7      	movs	r2, #199	; 0xc7
 800c332:	f000 fa03 	bl	800c73c <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c336:	89fb      	ldrh	r3, [r7, #14]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d050      	beq.n	800c3de <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c33c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d04d      	beq.n	800c3de <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c342:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c346:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c34a:	78b9      	ldrb	r1, [r7, #2]
 800c34c:	78f8      	ldrb	r0, [r7, #3]
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	9303      	str	r3, [sp, #12]
 800c354:	f107 030a 	add.w	r3, r7, #10
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	4623      	mov	r3, r4
 800c366:	f000 f9e9 	bl	800c73c <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c36e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c370:	897b      	ldrh	r3, [r7, #10]
 800c372:	461a      	mov	r2, r3
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	fb02 f303 	mul.w	r3, r2, r3
 800c37a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c37c:	89fb      	ldrh	r3, [r7, #14]
 800c37e:	461a      	mov	r2, r3
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	fbb3 f3f2 	udiv	r3, r3, r2
 800c386:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c38c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c38e:	893b      	ldrh	r3, [r7, #8]
 800c390:	461a      	mov	r2, r3
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	fb02 f303 	mul.w	r3, r2, r3
 800c398:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c39a:	89bb      	ldrh	r3, [r7, #12]
 800c39c:	461a      	mov	r2, r3
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a4:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c3a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	fb02 f303 	mul.w	r3, r2, r3
 800c3b0:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c3b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	fb02 f303 	mul.w	r3, r2, r3
 800c3bc:	69fa      	ldr	r2, [r7, #28]
 800c3be:	4413      	add	r3, r2
 800c3c0:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c3c2:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c3c4:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c3c6:	4413      	add	r3, r2
 800c3c8:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d008      	beq.n	800c3e2 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	009a      	lsls	r2, r3, #2
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3da:	61fb      	str	r3, [r7, #28]
 800c3dc:	e002      	b.n	800c3e4 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c3de:	bf00      	nop
 800c3e0:	e000      	b.n	800c3e4 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c3e2:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	b21a      	sxth	r2, r3
 800c3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ea:	801a      	strh	r2, [r3, #0]

}
 800c3ec:	bf00      	nop
 800c3ee:	3724      	adds	r7, #36	; 0x24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd90      	pop	{r4, r7, pc}

0800c3f4 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	08db      	lsrs	r3, r3, #3
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	b2da      	uxtb	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	2301      	movs	r3, #1
 800c422:	4093      	lsls	r3, r2
 800c424:	b2da      	uxtb	r2, r3
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	701a      	strb	r2, [r3, #0]

}
 800c42a:	bf00      	nop
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c436:	b480      	push	{r7}
 800c438:	b083      	sub	sp, #12
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	4603      	mov	r3, r0
 800c43e:	603a      	str	r2, [r7, #0]
 800c440:	71fb      	strb	r3, [r7, #7]
 800c442:	460b      	mov	r3, r1
 800c444:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b07      	cmp	r3, #7
 800c44a:	d90a      	bls.n	800c462 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c44c:	79bb      	ldrb	r3, [r7, #6]
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	b2da      	uxtb	r2, r3
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	b2db      	uxtb	r3, r3
 800c458:	3b71      	subs	r3, #113	; 0x71
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c460:	e00a      	b.n	800c478 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c462:	79bb      	ldrb	r3, [r7, #6]
 800c464:	f1c3 030f 	rsb	r3, r3, #15
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	4413      	add	r3, r2
 800c472:	b2da      	uxtb	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	701a      	strb	r2, [r3, #0]
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	091b      	lsrs	r3, r3, #4
 800c496:	b2da      	uxtb	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	701a      	strb	r2, [r3, #0]

}
 800c4a8:	bf00      	nop
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	603a      	str	r2, [r7, #0]
 800c4be:	71fb      	strb	r3, [r7, #7]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800c4c4:	79bb      	ldrb	r3, [r7, #6]
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	701a      	strb	r2, [r3, #0]

}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60ba      	str	r2, [r7, #8]
 800c4e8:	607b      	str	r3, [r7, #4]
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800c502:	f107 0217 	add.w	r2, r7, #23
 800c506:	f107 0116 	add.w	r1, r7, #22
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f002 fa51 	bl	800e9b4 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800c512:	f107 0214 	add.w	r2, r7, #20
 800c516:	f107 0115 	add.w	r1, r7, #21
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff ffb1 	bl	800c484 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	b29a      	uxth	r2, r3
 800c526:	7d7b      	ldrb	r3, [r7, #21]
 800c528:	3301      	adds	r3, #1
 800c52a:	0fd9      	lsrs	r1, r3, #31
 800c52c:	440b      	add	r3, r1
 800c52e:	105b      	asrs	r3, r3, #1
 800c530:	425b      	negs	r3, r3
 800c532:	b29b      	uxth	r3, r3
 800c534:	4413      	add	r3, r2
 800c536:	b29b      	uxth	r3, r3
 800c538:	b21a      	sxth	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c544:	2b00      	cmp	r3, #0
 800c546:	da02      	bge.n	800c54e <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c554:	b29a      	uxth	r2, r3
 800c556:	7d7b      	ldrb	r3, [r7, #21]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4413      	add	r3, r2
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	b21a      	sxth	r2, r3
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c56a:	2b0f      	cmp	r3, #15
 800c56c:	dd02      	ble.n	800c574 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	220f      	movs	r2, #15
 800c572:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800c574:	7dbb      	ldrb	r3, [r7, #22]
 800c576:	b29a      	uxth	r2, r3
 800c578:	7d3b      	ldrb	r3, [r7, #20]
 800c57a:	3301      	adds	r3, #1
 800c57c:	0fd9      	lsrs	r1, r3, #31
 800c57e:	440b      	add	r3, r1
 800c580:	105b      	asrs	r3, r3, #1
 800c582:	425b      	negs	r3, r3
 800c584:	b29b      	uxth	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	b29b      	uxth	r3, r3
 800c58a:	b21a      	sxth	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c596:	2b00      	cmp	r3, #0
 800c598:	da02      	bge.n	800c5a0 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	7d3b      	ldrb	r3, [r7, #20]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	b21a      	sxth	r2, r3
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5bc:	2b0f      	cmp	r3, #15
 800c5be:	dd02      	ble.n	800c5c6 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	220f      	movs	r2, #15
 800c5c4:	801a      	strh	r2, [r3, #0]
}
 800c5c6:	bf00      	nop
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b085      	sub	sp, #20
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	460a      	mov	r2, r1
 800c5d8:	71fb      	strb	r3, [r7, #7]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800c5e2:	79fb      	ldrb	r3, [r7, #7]
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800c5ea:	79bb      	ldrb	r3, [r7, #6]
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <VL53L1_is_aperture_location+0x34>
 800c5f8:	7b7b      	ldrb	r3, [r7, #13]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d101      	bne.n	800c602 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800c5fe:	2301      	movs	r3, #1
 800c600:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	2b02      	cmp	r3, #2
 800c606:	d104      	bne.n	800c612 <VL53L1_is_aperture_location+0x44>
 800c608:	7b7b      	ldrb	r3, [r7, #13]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800c60e:	2301      	movs	r3, #1
 800c610:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800c620:	b590      	push	{r4, r7, lr}
 800c622:	b08b      	sub	sp, #44	; 0x2c
 800c624:	af02      	add	r7, sp, #8
 800c626:	603a      	str	r2, [r7, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	71fb      	strb	r3, [r7, #7]
 800c62e:	460b      	mov	r3, r1
 800c630:	71bb      	strb	r3, [r7, #6]
 800c632:	4613      	mov	r3, r2
 800c634:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800c662:	f107 0416 	add.w	r4, r7, #22
 800c666:	f107 0218 	add.w	r2, r7, #24
 800c66a:	79b9      	ldrb	r1, [r7, #6]
 800c66c:	79f8      	ldrb	r0, [r7, #7]
 800c66e:	f107 0312 	add.w	r3, r7, #18
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f107 0314 	add.w	r3, r7, #20
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	4623      	mov	r3, r4
 800c67c:	f7ff ff30 	bl	800c4e0 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	2200      	movs	r2, #0
 800c684:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c686:	8afb      	ldrh	r3, [r7, #22]
 800c688:	83bb      	strh	r3, [r7, #28]
 800c68a:	e04c      	b.n	800c726 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c68c:	8b3b      	ldrh	r3, [r7, #24]
 800c68e:	83fb      	strh	r3, [r7, #30]
 800c690:	e03d      	b.n	800c70e <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800c692:	8bbb      	ldrh	r3, [r7, #28]
 800c694:	b2db      	uxtb	r3, r3
 800c696:	8bfa      	ldrh	r2, [r7, #30]
 800c698:	b2d1      	uxtb	r1, r2
 800c69a:	f107 0211 	add.w	r2, r7, #17
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fec9 	bl	800c436 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800c6a4:	7c78      	ldrb	r0, [r7, #17]
 800c6a6:	f107 030e 	add.w	r3, r7, #14
 800c6aa:	f107 020f 	add.w	r2, r7, #15
 800c6ae:	f107 0110 	add.w	r1, r7, #16
 800c6b2:	f7ff fe9f 	bl	800c3f4 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800c6b6:	7c3b      	ldrb	r3, [r7, #16]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	4413      	add	r3, r2
 800c6be:	781a      	ldrb	r2, [r3, #0]
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01b      	beq.n	800c702 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800c6ca:	8bbb      	ldrh	r3, [r7, #28]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	8bfa      	ldrh	r2, [r7, #30]
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff ff7a 	bl	800c5ce <VL53L1_is_aperture_location>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800c6de:	7efb      	ldrb	r3, [r7, #27]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	881a      	ldrh	r2, [r3, #0]
 800c6e8:	88bb      	ldrh	r3, [r7, #4]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	801a      	strh	r2, [r3, #0]
 800c6f2:	e006      	b.n	800c702 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c706:	b29b      	uxth	r3, r3
 800c708:	3301      	adds	r3, #1
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	83fb      	strh	r3, [r7, #30]
 800c70e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c712:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c716:	429a      	cmp	r2, r3
 800c718:	ddbb      	ble.n	800c692 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c71a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3301      	adds	r3, #1
 800c722:	b29b      	uxth	r3, r3
 800c724:	83bb      	strh	r3, [r7, #28]
 800c726:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c72a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c72e:	429a      	cmp	r2, r3
 800c730:	ddac      	ble.n	800c68c <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3724      	adds	r7, #36	; 0x24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd90      	pop	{r4, r7, pc}

0800c73c <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b08d      	sub	sp, #52	; 0x34
 800c740:	af02      	add	r7, sp, #8
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	461a      	mov	r2, r3
 800c74a:	4623      	mov	r3, r4
 800c74c:	71fb      	strb	r3, [r7, #7]
 800c74e:	4603      	mov	r3, r0
 800c750:	71bb      	strb	r3, [r7, #6]
 800c752:	460b      	mov	r3, r1
 800c754:	717b      	strb	r3, [r7, #5]
 800c756:	4613      	mov	r3, r2
 800c758:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800c79c:	f107 041c 	add.w	r4, r7, #28
 800c7a0:	f107 021e 	add.w	r2, r7, #30
 800c7a4:	79b9      	ldrb	r1, [r7, #6]
 800c7a6:	79f8      	ldrb	r0, [r7, #7]
 800c7a8:	f107 0318 	add.w	r3, r7, #24
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	f107 031a 	add.w	r3, r7, #26
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	f7ff fe93 	bl	800c4e0 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800c7ba:	f107 0414 	add.w	r4, r7, #20
 800c7be:	f107 0216 	add.w	r2, r7, #22
 800c7c2:	7939      	ldrb	r1, [r7, #4]
 800c7c4:	7978      	ldrb	r0, [r7, #5]
 800c7c6:	f107 0310 	add.w	r3, r7, #16
 800c7ca:	9301      	str	r3, [sp, #4]
 800c7cc:	f107 0312 	add.w	r3, r7, #18
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	4623      	mov	r3, r4
 800c7d4:	f7ff fe84 	bl	800c4e0 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800c7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7da:	2200      	movs	r2, #0
 800c7dc:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800c7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c7e4:	8abb      	ldrh	r3, [r7, #20]
 800c7e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c7e8:	e06c      	b.n	800c8c4 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c7ea:	8afb      	ldrh	r3, [r7, #22]
 800c7ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7ee:	e05d      	b.n	800c8ac <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800c7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7f6:	b2d1      	uxtb	r1, r2
 800c7f8:	f107 020f 	add.w	r2, r7, #15
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff fe1a 	bl	800c436 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800c802:	7bf8      	ldrb	r0, [r7, #15]
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	f107 020d 	add.w	r2, r7, #13
 800c80c:	f107 010e 	add.w	r1, r7, #14
 800c810:	f7ff fdf0 	bl	800c3f4 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800c814:	7bbb      	ldrb	r3, [r7, #14]
 800c816:	461a      	mov	r2, r3
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	4413      	add	r3, r2
 800c81c:	781a      	ldrb	r2, [r3, #0]
 800c81e:	7b3b      	ldrb	r3, [r7, #12]
 800c820:	4013      	ands	r3, r2
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b00      	cmp	r3, #0
 800c826:	d03b      	beq.n	800c8a0 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800c828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fecb 	bl	800c5ce <VL53L1_is_aperture_location>
 800c838:	4603      	mov	r3, r0
 800c83a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800c83e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800c846:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c848:	847b      	strh	r3, [r7, #34]	; 0x22
 800c84a:	e002      	b.n	800c852 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800c84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c850:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800c852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c856:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c85a:	429a      	cmp	r2, r3
 800c85c:	db19      	blt.n	800c892 <VL53L1_calc_mm_effective_spads+0x156>
 800c85e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c862:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c866:	429a      	cmp	r2, r3
 800c868:	dc13      	bgt.n	800c892 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800c86a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800c86e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c872:	429a      	cmp	r2, r3
 800c874:	db0d      	blt.n	800c892 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800c876:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c87a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c87e:	429a      	cmp	r2, r3
 800c880:	dc07      	bgt.n	800c892 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800c882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c884:	881a      	ldrh	r2, [r3, #0]
 800c886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c888:	4413      	add	r3, r2
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88e:	801a      	strh	r2, [r3, #0]
 800c890:	e006      	b.n	800c8a0 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800c892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c894:	881a      	ldrh	r2, [r3, #0]
 800c896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c898:	4413      	add	r3, r2
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c89e:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c8a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c8ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	dd9b      	ble.n	800c7f0 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c8b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	3301      	adds	r3, #1
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c8c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c8c8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	dd8c      	ble.n	800c7ea <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	372c      	adds	r7, #44	; 0x2c
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd90      	pop	{r4, r7, pc}

0800c8da <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b086      	sub	sp, #24
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fd ff6d 	bl	800a7cc <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	7c9a      	ldrb	r2, [r3, #18]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	3314      	adds	r3, #20
 800c91c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]
 800c922:	e06b      	b.n	800c9fc <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d034      	beq.n	800c998 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800c92e:	e05f      	b.n	800c9f0 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800c968:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	8a9a      	ldrh	r2, [r3, #20]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	601a      	str	r2, [r3, #0]

			break;
 800c996:	e02b      	b.n	800c9f0 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800c9c8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	611a      	str	r2, [r3, #16]
			break;
 800c9ee:	bf00      	nop
		}

		pdata++;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	334c      	adds	r3, #76	; 0x4c
 800c9f4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	75fb      	strb	r3, [r7, #23]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	7c9b      	ldrb	r3, [r3, #18]
 800ca00:	7dfa      	ldrb	r2, [r7, #23]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d38e      	bcc.n	800c924 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800ca06:	bf00      	nop
 800ca08:	bf00      	nop
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b089      	sub	sp, #36	; 0x24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3318      	adds	r3, #24
 800ca20:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ca28:	3308      	adds	r3, #8
 800ca2a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800ca32:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ca3a:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3302      	adds	r3, #2
 800ca4e:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800ca74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3724      	adds	r7, #36	; 0x24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b08b      	sub	sp, #44	; 0x2c
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3318      	adds	r3, #24
 800ca96:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ca9e:	3308      	adds	r3, #8
 800caa0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800caa8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cab0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800cab8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800caba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cabe:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800cac0:	7bfa      	ldrb	r2, [r7, #15]
 800cac2:	6939      	ldr	r1, [r7, #16]
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	440b      	add	r3, r1
 800cace:	3306      	adds	r3, #6
 800cad0:	2200      	movs	r2, #0
 800cad2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cada:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800cadc:	2301      	movs	r3, #1
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cae2:	e01a      	b.n	800cb1a <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	214c      	movs	r1, #76	; 0x4c
 800caec:	fb01 f303 	mul.w	r3, r1, r3
 800caf0:	4413      	add	r3, r2
 800caf2:	334a      	adds	r3, #74	; 0x4a
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d209      	bcs.n	800cb10 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800cafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	214c      	movs	r1, #76	; 0x4c
 800cb04:	fb01 f303 	mul.w	r3, r1, r3
 800cb08:	4413      	add	r3, r2
 800cb0a:	334a      	adds	r3, #74	; 0x4a
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800cb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb14:	3301      	adds	r3, #1
 800cb16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	7c9b      	ldrb	r3, [r3, #18]
 800cb1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d3de      	bcc.n	800cae4 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800cb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d103      	bne.n	800cb34 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800cb2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb30:	623b      	str	r3, [r7, #32]
 800cb32:	e00e      	b.n	800cb52 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800cb34:	89bb      	ldrh	r3, [r7, #12]
 800cb36:	039b      	lsls	r3, r3, #14
 800cb38:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800cb3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb3c:	6a3a      	ldr	r2, [r7, #32]
 800cb3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb42:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb4a:	d302      	bcc.n	800cb52 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800cb4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb50:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cb52:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cb58:	6939      	ldr	r1, [r7, #16]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	440b      	add	r3, r1
 800cb64:	3306      	adds	r3, #6
 800cb66:	4602      	mov	r2, r0
 800cb68:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800cb6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	372c      	adds	r7, #44	; 0x2c
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b08a      	sub	sp, #40	; 0x28
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3318      	adds	r3, #24
 800cb8c:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	332c      	adds	r3, #44	; 0x2c
 800cb92:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	33c2      	adds	r3, #194	; 0xc2
 800cb98:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800cba0:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	3302      	adds	r3, #2
 800cba6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	785b      	ldrb	r3, [r3, #1]
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cbb8:	461a      	mov	r2, r3
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d11e      	bne.n	800cc04 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10b      	bne.n	800cbe4 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d05d      	beq.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	719a      	strb	r2, [r3, #6]
 800cc02:	e050      	b.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d11e      	bne.n	800cc56 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10b      	bne.n	800cc36 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d034      	beq.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	719a      	strb	r2, [r3, #6]
 800cc54:	e027      	b.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	4413      	add	r3, r2
 800cc62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d11d      	bne.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10b      	bne.n	800cc88 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00b      	beq.n	800cca6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800cca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d109      	bne.n	800ccc2 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	f203 3142 	addw	r1, r3, #834	; 0x342
 800ccb4:	6a3b      	ldr	r3, [r7, #32]
 800ccb6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800ccba:	461a      	mov	r2, r3
 800ccbc:	6978      	ldr	r0, [r7, #20]
 800ccbe:	f7fd f921 	bl	8009f04 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800ccc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3728      	adds	r7, #40	; 0x28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b089      	sub	sp, #36	; 0x24
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	603b      	str	r3, [r7, #0]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ccde:	2300      	movs	r3, #0
 800cce0:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3318      	adds	r3, #24
 800cce6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800ccee:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7afa      	ldrb	r2, [r7, #11]
 800ccfa:	701a      	strb	r2, [r3, #0]
 800ccfc:	e01e      	b.n	800cd3c <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d111      	bne.n	800cd30 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2bff      	cmp	r3, #255	; 0xff
 800cd12:	d103      	bne.n	800cd1c <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2280      	movs	r2, #128	; 0x80
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	e005      	b.n	800cd28 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	3301      	adds	r3, #1
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	e005      	b.n	800cd3c <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800cd3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3724      	adds	r7, #36	; 0x24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d118      	bne.n	800cd98 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	719a      	strb	r2, [r3, #6]
 800cd96:	e03a      	b.n	800ce0e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d118      	bne.n	800cdd4 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	719a      	strb	r2, [r3, #6]
 800cdd2:	e01c      	b.n	800ce0e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cdda:	2b03      	cmp	r3, #3
 800cddc:	d117      	bne.n	800ce0e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800ce0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	371c      	adds	r7, #28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b08a      	sub	sp, #40	; 0x28
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	607a      	str	r2, [r7, #4]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	72fb      	strb	r3, [r7, #11]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce32:	2300      	movs	r3, #0
 800ce34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	3318      	adds	r3, #24
 800ce3c:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800ce46:	7afa      	ldrb	r2, [r7, #11]
 800ce48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe f8ca 	bl	800afe6 <VL53L1_calc_macro_period_us>
 800ce52:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	031b      	lsls	r3, r3, #12
 800ce62:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	085b      	lsrs	r3, r3, #1
 800ce68:	69ba      	ldr	r2, [r7, #24]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce76:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2bff      	cmp	r3, #255	; 0xff
 800ce7c:	d904      	bls.n	800ce88 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	22ff      	movs	r2, #255	; 0xff
 800ce82:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800ce86:	e004      	b.n	800ce92 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	7afa      	ldrb	r2, [r7, #11]
 800ce96:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800ce9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10a      	bne.n	800ceb8 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800cea8:	461a      	mov	r2, r3
 800ceaa:	214b      	movs	r1, #75	; 0x4b
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f007 f9bd 	bl	801422c <VL53L1_WrByte>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800ceb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10a      	bne.n	800ced6 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cec6:	461a      	mov	r2, r3
 800cec8:	2160      	movs	r1, #96	; 0x60
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f007 f9ae 	bl	801422c <VL53L1_WrByte>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cedc:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cee4:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800cee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d109      	bne.n	800cf02 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800ceee:	f107 0214 	add.w	r2, r7, #20
 800cef2:	2302      	movs	r3, #2
 800cef4:	2178      	movs	r1, #120	; 0x78
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f007 f92c 	bl	8014154 <VL53L1_WriteMulti>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	893a      	ldrh	r2, [r7, #8]
 800cf06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800cf0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d108      	bne.n	800cf24 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800cf12:	893b      	ldrh	r3, [r7, #8]
 800cf14:	461a      	mov	r2, r3
 800cf16:	211c      	movs	r1, #28
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f007 f9b1 	bl	8014280 <VL53L1_WrWord>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800cf24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d108      	bne.n	800cf3e <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800cf2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf2e:	461a      	mov	r2, r3
 800cf30:	2164      	movs	r1, #100	; 0x64
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f007 f9a4 	bl	8014280 <VL53L1_WrWord>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800cf3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d108      	bne.n	800cf58 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800cf46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf48:	461a      	mov	r2, r3
 800cf4a:	2166      	movs	r1, #102	; 0x66
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f007 f997 	bl	8014280 <VL53L1_WrWord>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800cf58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3728      	adds	r7, #40	; 0x28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800cf64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf68:	b0a2      	sub	sp, #136	; 0x88
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf76:	3318      	adds	r3, #24
 800cf78:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800cf7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf7c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cf80:	3308      	adds	r3, #8
 800cf82:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800cf84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf86:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800cf8a:	3318      	adds	r3, #24
 800cf8c:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800cf8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf90:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800cf94:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800cf96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf98:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800cf9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cfa0:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800cfa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800cfaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d103      	bne.n	800cfba <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800cfb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800cfba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800cfbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800cfc2:	4413      	add	r3, r2
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	461c      	mov	r4, r3
 800cfc8:	4615      	mov	r5, r2
 800cfca:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800cfce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	f04f 0000 	mov.w	r0, #0
 800cfda:	f04f 0100 	mov.w	r1, #0
 800cfde:	0159      	lsls	r1, r3, #5
 800cfe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cfe4:	0150      	lsls	r0, r2, #5
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	ebb2 0804 	subs.w	r8, r2, r4
 800cfee:	eb63 0905 	sbc.w	r9, r3, r5
 800cff2:	f04f 0200 	mov.w	r2, #0
 800cff6:	f04f 0300 	mov.w	r3, #0
 800cffa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800cffe:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d002:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d006:	4690      	mov	r8, r2
 800d008:	4699      	mov	r9, r3
 800d00a:	eb18 0304 	adds.w	r3, r8, r4
 800d00e:	633b      	str	r3, [r7, #48]	; 0x30
 800d010:	eb49 0305 	adc.w	r3, r9, r5
 800d014:	637b      	str	r3, [r7, #52]	; 0x34
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d022:	4629      	mov	r1, r5
 800d024:	00cb      	lsls	r3, r1, #3
 800d026:	4621      	mov	r1, r4
 800d028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d02c:	4621      	mov	r1, r4
 800d02e:	00ca      	lsls	r2, r1, #3
 800d030:	4610      	mov	r0, r2
 800d032:	4619      	mov	r1, r3
 800d034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d038:	2200      	movs	r2, #0
 800d03a:	643b      	str	r3, [r7, #64]	; 0x40
 800d03c:	647a      	str	r2, [r7, #68]	; 0x44
 800d03e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d042:	f7f3 f93d 	bl	80002c0 <__aeabi_uldivmod>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d04e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d052:	4622      	mov	r2, r4
 800d054:	462b      	mov	r3, r5
 800d056:	f04f 0000 	mov.w	r0, #0
 800d05a:	f04f 0100 	mov.w	r1, #0
 800d05e:	0159      	lsls	r1, r3, #5
 800d060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d064:	0150      	lsls	r0, r2, #5
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	ebb2 0a04 	subs.w	sl, r2, r4
 800d06e:	eb63 0b05 	sbc.w	fp, r3, r5
 800d072:	f04f 0200 	mov.w	r2, #0
 800d076:	f04f 0300 	mov.w	r3, #0
 800d07a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d07e:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d082:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d086:	4692      	mov	sl, r2
 800d088:	469b      	mov	fp, r3
 800d08a:	eb1a 0304 	adds.w	r3, sl, r4
 800d08e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d090:	eb4b 0305 	adc.w	r3, fp, r5
 800d094:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d096:	f04f 0200 	mov.w	r2, #0
 800d09a:	f04f 0300 	mov.w	r3, #0
 800d09e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	00cb      	lsls	r3, r1, #3
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	00ca      	lsls	r2, r1, #3
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d0be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d0c2:	f7f3 f8fd 	bl	80002c0 <__aeabi_uldivmod>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d0ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0d4:	8ad2      	ldrh	r2, [r2, #22]
 800d0d6:	fb02 f303 	mul.w	r3, r2, r3
 800d0da:	2200      	movs	r2, #0
 800d0dc:	623b      	str	r3, [r7, #32]
 800d0de:	627a      	str	r2, [r7, #36]	; 0x24
 800d0e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d0e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d0e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	d105      	bne.n	800d0fc <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d0f0:	f04f 0201 	mov.w	r2, #1
 800d0f4:	f04f 0300 	mov.w	r3, #0
 800d0f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d0fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	f04f 0400 	mov.w	r4, #0
 800d108:	f04f 0500 	mov.w	r5, #0
 800d10c:	015d      	lsls	r5, r3, #5
 800d10e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d112:	0154      	lsls	r4, r2, #5
 800d114:	4622      	mov	r2, r4
 800d116:	462b      	mov	r3, r5
 800d118:	1a14      	subs	r4, r2, r0
 800d11a:	61bc      	str	r4, [r7, #24]
 800d11c:	eb63 0301 	sbc.w	r3, r3, r1
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	f04f 0200 	mov.w	r2, #0
 800d126:	f04f 0300 	mov.w	r3, #0
 800d12a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d12e:	464c      	mov	r4, r9
 800d130:	00a3      	lsls	r3, r4, #2
 800d132:	4644      	mov	r4, r8
 800d134:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d138:	4644      	mov	r4, r8
 800d13a:	00a2      	lsls	r2, r4, #2
 800d13c:	4614      	mov	r4, r2
 800d13e:	461d      	mov	r5, r3
 800d140:	4623      	mov	r3, r4
 800d142:	181b      	adds	r3, r3, r0
 800d144:	613b      	str	r3, [r7, #16]
 800d146:	462b      	mov	r3, r5
 800d148:	eb41 0303 	adc.w	r3, r1, r3
 800d14c:	617b      	str	r3, [r7, #20]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	f04f 0300 	mov.w	r3, #0
 800d156:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d15a:	4629      	mov	r1, r5
 800d15c:	02cb      	lsls	r3, r1, #11
 800d15e:	4621      	mov	r1, r4
 800d160:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d164:	4621      	mov	r1, r4
 800d166:	02ca      	lsls	r2, r1, #11
 800d168:	461c      	mov	r4, r3
 800d16a:	4613      	mov	r3, r2
 800d16c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d170:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d174:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d178:	f7f3 f8a2 	bl	80002c0 <__aeabi_uldivmod>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d184:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	f04f 0400 	mov.w	r4, #0
 800d190:	f04f 0500 	mov.w	r5, #0
 800d194:	015d      	lsls	r5, r3, #5
 800d196:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d19a:	0154      	lsls	r4, r2, #5
 800d19c:	4622      	mov	r2, r4
 800d19e:	462b      	mov	r3, r5
 800d1a0:	1a14      	subs	r4, r2, r0
 800d1a2:	60bc      	str	r4, [r7, #8]
 800d1a4:	eb63 0301 	sbc.w	r3, r3, r1
 800d1a8:	60fb      	str	r3, [r7, #12]
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	f04f 0300 	mov.w	r3, #0
 800d1b2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d1b6:	464c      	mov	r4, r9
 800d1b8:	00a3      	lsls	r3, r4, #2
 800d1ba:	4644      	mov	r4, r8
 800d1bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d1c0:	4644      	mov	r4, r8
 800d1c2:	00a2      	lsls	r2, r4, #2
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	461d      	mov	r5, r3
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	181b      	adds	r3, r3, r0
 800d1cc:	603b      	str	r3, [r7, #0]
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	eb41 0303 	adc.w	r3, r1, r3
 800d1d4:	607b      	str	r3, [r7, #4]
 800d1d6:	f04f 0200 	mov.w	r2, #0
 800d1da:	f04f 0300 	mov.w	r3, #0
 800d1de:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	02cb      	lsls	r3, r1, #11
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	02ca      	lsls	r2, r1, #11
 800d1f0:	461c      	mov	r4, r3
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d1f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d1fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d200:	f7f3 f85e 	bl	80002c0 <__aeabi_uldivmod>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d20c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d210:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d802      	bhi.n	800d220 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d21a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d21c:	2202      	movs	r2, #2
 800d21e:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d220:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d224:	4618      	mov	r0, r3
 800d226:	3788      	adds	r7, #136	; 0x88
 800d228:	46bd      	mov	sp, r7
 800d22a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d230 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b096      	sub	sp, #88	; 0x58
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d23e:	2300      	movs	r3, #0
 800d240:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3318      	adds	r3, #24
 800d248:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d250:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d254:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d258:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d260:	2b01      	cmp	r3, #1
 800d262:	d108      	bne.n	800d276 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d26a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d101      	bne.n	800d276 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d276:	2300      	movs	r3, #0
 800d278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d27c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d280:	2b01      	cmp	r3, #1
 800d282:	d107      	bne.n	800d294 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	889b      	ldrh	r3, [r3, #4]
 800d288:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	609a      	str	r2, [r3, #8]
 800d292:	e002      	b.n	800d29a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	899b      	ldrh	r3, [r3, #12]
 800d2a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	89db      	ldrh	r3, [r3, #14]
 800d2ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d004      	beq.n	800d2c4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d125      	bne.n	800d310 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d021      	beq.n	800d310 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d2cc:	f107 0313 	add.w	r3, r7, #19
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f000 fe44 	bl	800df60 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d2d8:	7cfb      	ldrb	r3, [r7, #19]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d2e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d103      	bne.n	800d2f2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	653b      	str	r3, [r7, #80]	; 0x50
 800d2f0:	e006      	b.n	800d300 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d2f2:	7cfb      	ldrb	r3, [r7, #19]
 800d2f4:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	3202      	adds	r2, #2
 800d2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fe:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	889b      	ldrh	r3, [r3, #4]
 800d304:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	88db      	ldrh	r3, [r3, #6]
 800d30c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d31a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	795b      	ldrb	r3, [r3, #5]
 800d326:	f043 0301 	orr.w	r3, r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d33a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	795b      	ldrb	r3, [r3, #5]
 800d346:	f043 0302 	orr.w	r3, r3, #2
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d356:	2301      	movs	r3, #1
 800d358:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d360:	2b01      	cmp	r3, #1
 800d362:	d108      	bne.n	800d376 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d368:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d370:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d374:	e019      	b.n	800d3aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d376:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d37a:	019b      	lsls	r3, r3, #6
 800d37c:	461a      	mov	r2, r3
 800d37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d380:	fbb2 f3f3 	udiv	r3, r2, r3
 800d384:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d38e:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d390:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d394:	019b      	lsls	r3, r3, #6
 800d396:	461a      	mov	r2, r3
 800d398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d3a8:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d12a      	bne.n	800d40a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d3bc:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d3c0:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c4:	119b      	asrs	r3, r3, #6
 800d3c6:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d3c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3ce:	db02      	blt.n	800d3d6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d3d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3d4:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3d8:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d3e6:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d3ea:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ee:	119b      	asrs	r3, r3, #6
 800d3f0:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3f8:	db02      	blt.n	800d400 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d3fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3fe:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d402:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	81da      	strh	r2, [r3, #14]
 800d408:	e042      	b.n	800d490 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d410:	2b01      	cmp	r3, #1
 800d412:	d13d      	bne.n	800d490 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d418:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d420:	2b00      	cmp	r3, #0
 800d422:	da00      	bge.n	800d426 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d424:	330f      	adds	r3, #15
 800d426:	111b      	asrs	r3, r3, #4
 800d428:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d430:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d436:	4413      	add	r3, r2
 800d438:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d440:	db02      	blt.n	800d448 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d446:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d44a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d45c:	4a51      	ldr	r2, [pc, #324]	; (800d5a4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d45e:	fb82 1203 	smull	r1, r2, r2, r3
 800d462:	1152      	asrs	r2, r2, #5
 800d464:	17db      	asrs	r3, r3, #31
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d470:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d476:	4413      	add	r3, r2
 800d478:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d480:	db02      	blt.n	800d488 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d486:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d48a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	785b      	ldrb	r3, [r3, #1]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d177      	bne.n	800d588 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800d498:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d073      	beq.n	800d588 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d4ac:	f107 0313 	add.w	r3, r7, #19
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 fd54 	bl	800df60 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800d4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ba:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800d4be:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800d4c6:	7cfb      	ldrb	r3, [r7, #19]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d041      	beq.n	800d550 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d4cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d03d      	beq.n	800d550 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d03a      	beq.n	800d550 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4e6:	fb03 f202 	mul.w	r2, r3, r2
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f0:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d303      	bcc.n	800d50a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	719a      	strb	r2, [r3, #6]
 800d508:	e022      	b.n	800d550 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800d50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d512:	617b      	str	r3, [r7, #20]
				cval = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d51e:	e00e      	b.n	800d53e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800d520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	4413      	add	r3, r2
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800d528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d52a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d52c:	601a      	str	r2, [r3, #0]
					pcpo++;
 800d52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d530:	3304      	adds	r3, #4
 800d532:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800d534:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d538:	3301      	adds	r3, #1
 800d53a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d53e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	3b01      	subs	r3, #1
 800d546:	429a      	cmp	r2, r3
 800d548:	d3ea      	bcc.n	800d520 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800d54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d54e:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	799b      	ldrb	r3, [r3, #6]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d017      	beq.n	800d588 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d572:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	789b      	ldrb	r3, [r3, #2]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d105      	bne.n	800d588 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800d588:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d002      	beq.n	800d596 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2201      	movs	r2, #1
 800d594:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d596:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3758      	adds	r7, #88	; 0x58
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	66666667 	.word	0x66666667

0800d5a8 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800d5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5ac:	b0a2      	sub	sp, #136	; 0x88
 800d5ae:	af02      	add	r7, sp, #8
 800d5b0:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	3318      	adds	r3, #24
 800d5bc:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800d5c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5ca:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d5ce:	3318      	adds	r3, #24
 800d5d0:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d5d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5d4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d5d8:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800d5da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d5e0:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800d5e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5e4:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d5e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5e8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d5ec:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800d600:	2300      	movs	r3, #0
 800d602:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800d60a:	f04f 0200 	mov.w	r2, #0
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800d616:	2300      	movs	r3, #0
 800d618:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800d632:	2300      	movs	r3, #0
 800d634:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d63a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d108      	bne.n	800d654 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d648:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d101      	bne.n	800d654 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800d654:	2300      	movs	r3, #0
 800d656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d65a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d65e:	4619      	mov	r1, r3
 800d660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d662:	f000 fc7d 	bl	800df60 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800d666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800d66e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d672:	2b00      	cmp	r3, #0
 800d674:	d102      	bne.n	800d67c <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800d67c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d67e:	f000 fb15 	bl	800dcac <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800d682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00a      	beq.n	800d6a0 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800d68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d68c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d68e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d692:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800d696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d698:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d901      	bls.n	800d6a4 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800d6aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d006      	beq.n	800d6c0 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800d6b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6b4:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800d6b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d101      	bne.n	800d6c4 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e000      	b.n	800d6c6 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800d6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6cc:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d10e      	bne.n	800d6f0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800d6d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800d6da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6dc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800d6e0:	2b09      	cmp	r3, #9
 800d6e2:	d105      	bne.n	800d6f0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d6e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800d6f0:	2300      	movs	r3, #0
	run_smudge_detection =
 800d6f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800d6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f8:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800d6fc:	2b09      	cmp	r3, #9
 800d6fe:	f000 80a6 	beq.w	800d84e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800d702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d704:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d706:	2b01      	cmp	r3, #1
 800d708:	f040 80a1 	bne.w	800d84e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800d70c:	2302      	movs	r3, #2
 800d70e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800d712:	2300      	movs	r3, #0
 800d714:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d718:	e02d      	b.n	800d776 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800d71a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800d71e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d720:	234c      	movs	r3, #76	; 0x4c
 800d722:	fb01 f303 	mul.w	r3, r1, r3
 800d726:	4413      	add	r3, r2
 800d728:	335e      	adds	r3, #94	; 0x5e
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b09      	cmp	r3, #9
 800d72e:	d11d      	bne.n	800d76c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800d730:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800d734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d736:	234c      	movs	r3, #76	; 0x4c
 800d738:	fb01 f303 	mul.w	r3, r1, r3
 800d73c:	4413      	add	r3, r2
 800d73e:	335a      	adds	r3, #90	; 0x5a
 800d740:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d744:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800d746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d748:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800d74a:	429a      	cmp	r2, r3
 800d74c:	dc03      	bgt.n	800d756 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d754:	e00a      	b.n	800d76c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800d756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	d106      	bne.n	800d76c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800d764:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d768:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800d76c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d770:	3301      	adds	r3, #1
 800d772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d778:	7c9a      	ldrb	r2, [r3, #18]
 800d77a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d77e:	4293      	cmp	r3, r2
 800d780:	d3cb      	bcc.n	800d71a <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800d782:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d786:	2b02      	cmp	r3, #2
 800d788:	d102      	bne.n	800d790 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800d790:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800d794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d796:	234c      	movs	r3, #76	; 0x4c
 800d798:	fb01 f303 	mul.w	r3, r1, r3
 800d79c:	4413      	add	r3, r2
 800d79e:	3348      	adds	r3, #72	; 0x48
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800d7a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d150      	bne.n	800d84e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800d7ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	4693      	mov	fp, r2
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	465b      	mov	r3, fp
 800d7b8:	f04f 0000 	mov.w	r0, #0
 800d7bc:	f04f 0100 	mov.w	r1, #0
 800d7c0:	0159      	lsls	r1, r3, #5
 800d7c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d7c6:	0150      	lsls	r0, r2, #5
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	ebb2 040a 	subs.w	r4, r2, sl
 800d7d0:	eb63 050b 	sbc.w	r5, r3, fp
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	00ab      	lsls	r3, r5, #2
 800d7de:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d7e2:	00a2      	lsls	r2, r4, #2
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	461d      	mov	r5, r3
 800d7e8:	eb14 080a 	adds.w	r8, r4, sl
 800d7ec:	eb45 090b 	adc.w	r9, r5, fp
 800d7f0:	f04f 0200 	mov.w	r2, #0
 800d7f4:	f04f 0300 	mov.w	r3, #0
 800d7f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d804:	4690      	mov	r8, r2
 800d806:	4699      	mov	r9, r3
 800d808:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800d80c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d810:	f04f 0200 	mov.w	r2, #0
 800d814:	f04f 0300 	mov.w	r3, #0
 800d818:	024b      	lsls	r3, r1, #9
 800d81a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800d81e:	0242      	lsls	r2, r0, #9
 800d820:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800d824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d828:	2200      	movs	r2, #0
 800d82a:	61bb      	str	r3, [r7, #24]
 800d82c:	61fa      	str	r2, [r7, #28]
 800d82e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d832:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800d836:	4621      	mov	r1, r4
 800d838:	428a      	cmp	r2, r1
 800d83a:	4629      	mov	r1, r5
 800d83c:	418b      	sbcs	r3, r1
 800d83e:	d203      	bcs.n	800d848 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800d840:	2301      	movs	r3, #1
 800d842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d846:	e002      	b.n	800d84e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800d84e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 810b 	beq.w	800da6e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800d858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d85a:	2200      	movs	r2, #0
 800d85c:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800d85e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d860:	f7ff fb80 	bl	800cf64 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800d864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d866:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800d86a:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800d86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800d878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d87a:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800d880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d884:	1ad2      	subs	r2, r2, r3
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	4413      	add	r3, r2
 800d88a:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800d88c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d88e:	2b00      	cmp	r3, #0
 800d890:	da02      	bge.n	800d898 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800d892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d894:	425b      	negs	r3, r3
 800d896:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800d898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	461a      	mov	r2, r3
 800d89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	dd0c      	ble.n	800d8be <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800d8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800d8a8:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800d8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	da03      	bge.n	800d8b8 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800d8b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	709a      	strb	r2, [r3, #2]
 800d8b6:	e002      	b.n	800d8be <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800d8b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800d8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8c6:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800d8c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d906      	bls.n	800d8e2 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800d8d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800d8da:	2302      	movs	r3, #2
 800d8dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800d8e0:	e014      	b.n	800d90c <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800d8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d8e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	6139      	str	r1, [r7, #16]
 800d8ee:	6178      	str	r0, [r7, #20]
 800d8f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	1851      	adds	r1, r2, r1
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	eb43 0101 	adc.w	r1, r3, r1
 800d900:	60f9      	str	r1, [r7, #12]
 800d902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d908:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800d90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d202      	bcs.n	800d91e <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800d91e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d920:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2200      	movs	r2, #0
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	607a      	str	r2, [r7, #4]
 800d92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d932:	f7f2 fcc5 	bl	80002c0 <__aeabi_uldivmod>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
		xtalk_offset_out =
 800d93a:	4613      	mov	r3, r2
 800d93c:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800d93e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	1ad2      	subs	r2, r2, r3
 800d944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d946:	4413      	add	r3, r2
 800d948:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800d94a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da02      	bge.n	800d956 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800d950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d952:	425b      	negs	r3, r3
 800d954:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800d956:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d112      	bne.n	800d984 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800d95e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d960:	69db      	ldr	r3, [r3, #28]
 800d962:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800d964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d966:	4293      	cmp	r3, r2
 800d968:	db0c      	blt.n	800d984 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800d96a:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800d96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800d96e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800d970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d972:	429a      	cmp	r2, r3
 800d974:	da03      	bge.n	800d97e <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800d976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d978:	2201      	movs	r2, #1
 800d97a:	70da      	strb	r2, [r3, #3]
 800d97c:	e002      	b.n	800d984 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800d97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d980:	2202      	movs	r2, #2
 800d982:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800d984:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d108      	bne.n	800d99e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800d98c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d98e:	69db      	ldr	r3, [r3, #28]
 800d990:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800d992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d994:	4293      	cmp	r3, r2
 800d996:	da02      	bge.n	800d99e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800d998:	2302      	movs	r3, #2
 800d99a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800d99e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800d9a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d112      	bne.n	800d9d2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800d9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00e      	beq.n	800d9d2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800d9b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800d9c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d905      	bls.n	800d9d2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800d9c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800d9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9d4:	7c1b      	ldrb	r3, [r3, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d007      	beq.n	800d9ea <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800d9da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9dc:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800d9de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d902      	bls.n	800d9ea <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800d9e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800d9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9ec:	7c1b      	ldrb	r3, [r3, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d107      	bne.n	800da02 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800d9f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9f4:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800d9f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d202      	bcs.n	800da02 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800d9fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800da02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da04:	089b      	lsrs	r3, r3, #2
 800da06:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800da08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da0e:	d301      	bcc.n	800da14 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800da10:	4b3e      	ldr	r3, [pc, #248]	; (800db0c <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800da12:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800da14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10d      	bne.n	800da38 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800da1c:	2300      	movs	r3, #0
 800da1e:	9301      	str	r3, [sp, #4]
 800da20:	2301      	movs	r3, #1
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800da2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da2c:	f7ff fc00 	bl	800d230 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800da30:	2302      	movs	r3, #2
 800da32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800da36:	e009      	b.n	800da4c <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800da38:	2301      	movs	r3, #1
 800da3a:	9301      	str	r3, [sp, #4]
 800da3c:	2301      	movs	r3, #1
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800da46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da48:	f7ff fbf2 	bl	800d230 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800da4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da50:	2b02      	cmp	r3, #2
 800da52:	d10c      	bne.n	800da6e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800da54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800da56:	f04f 0200 	mov.w	r2, #0
 800da5a:	f04f 0300 	mov.w	r3, #0
 800da5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800da62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800da68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da6a:	2200      	movs	r2, #0
 800da6c:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800da74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d140      	bne.n	800dafe <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800da7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da84:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800da86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da88:	691a      	ldr	r2, [r3, #16]
 800da8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8e:	429a      	cmp	r2, r3
 800da90:	d202      	bcs.n	800da98 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800da98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9c:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800da9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d110      	bne.n	800dac8 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800daa6:	2300      	movs	r3, #0
 800daa8:	9301      	str	r3, [sp, #4]
 800daaa:	2300      	movs	r3, #0
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dab2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dab6:	f7ff fbbb 	bl	800d230 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800daba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dabc:	2202      	movs	r2, #2
 800dabe:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800dac0:	2302      	movs	r3, #2
 800dac2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dac6:	e009      	b.n	800dadc <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800dac8:	2301      	movs	r3, #1
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	2300      	movs	r3, #0
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dad4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dad8:	f7ff fbaa 	bl	800d230 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800dadc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d10c      	bne.n	800dafe <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800dae4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dae6:	f04f 0200 	mov.w	r2, #0
 800daea:	f04f 0300 	mov.w	r3, #0
 800daee:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800daf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daf4:	2200      	movs	r2, #0
 800daf6:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800daf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dafa:	2200      	movs	r2, #0
 800dafc:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800dafe:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800db02:	4618      	mov	r0, r3
 800db04:	3780      	adds	r7, #128	; 0x80
 800db06:	46bd      	mov	sp, r7
 800db08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db0c:	0003ffff 	.word	0x0003ffff

0800db10 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db18:	2300      	movs	r3, #0
 800db1a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3318      	adds	r3, #24
 800db20:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800db28:	3308      	adds	r3, #8
 800db2a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db32:	2201      	movs	r2, #1
 800db34:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db5a:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db64:	461a      	mov	r2, r3
 800db66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800db6a:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db74:	461a      	mov	r2, r3
 800db76:	2300      	movs	r3, #0
 800db78:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db82:	2200      	movs	r2, #0
 800db84:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db8e:	461a      	mov	r2, r3
 800db90:	23c8      	movs	r3, #200	; 0xc8
 800db92:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db9c:	461a      	mov	r2, r3
 800db9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dba2:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbac:	461a      	mov	r2, r3
 800dbae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbb2:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	4b3a      	ldr	r3, [pc, #232]	; (800dca8 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800dbc0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800dbd0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbf8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800dc14:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc1e:	461a      	mov	r2, r3
 800dc20:	230a      	movs	r3, #10
 800dc22:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc32:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc3c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800dc40:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dc50:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc68:	461a      	mov	r2, r3
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dc76:	3310      	adds	r3, #16
 800dc78:	4619      	mov	r1, r3
 800dc7a:	f04f 0200 	mov.w	r2, #0
 800dc7e:	f04f 0300 	mov.w	r3, #0
 800dc82:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 f809 	bl	800dcac <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800dc9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	000ff800 	.word	0x000ff800

0800dcac <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcbe:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2200      	movs	r2, #0
 800dce2:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2200      	movs	r2, #0
 800dce8:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	2200      	movs	r2, #0
 800dcee:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800dcfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3318      	adds	r3, #24
 800dd1c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd24:	461a      	mov	r2, r3
 800dd26:	2300      	movs	r3, #0
 800dd28:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd32:	2200      	movs	r2, #0
 800dd34:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800dd4a:	3308      	adds	r3, #8
 800dd4c:	2218      	movs	r2, #24
 800dd4e:	2100      	movs	r1, #0
 800dd50:	4618      	mov	r0, r3
 800dd52:	f00b fa71 	bl	8019238 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800dd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b085      	sub	sp, #20
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3318      	adds	r3, #24
 800dd72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd7a:	2203      	movs	r2, #3
 800dd7c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddce:	461a      	mov	r2, r3
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dddc:	2200      	movs	r2, #0
 800ddde:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800dde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3318      	adds	r3, #24
 800de02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de0a:	22ff      	movs	r2, #255	; 0xff
 800de0c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de16:	2200      	movs	r2, #0
 800de18:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de22:	461a      	mov	r2, r3
 800de24:	2300      	movs	r3, #0
 800de26:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de30:	2200      	movs	r2, #0
 800de32:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de3c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4a:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de5a:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d007      	beq.n	800de72 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de68:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800de7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b087      	sub	sp, #28
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800de96:	2300      	movs	r3, #0
 800de98:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	229b      	movs	r2, #155	; 0x9b
 800deaa:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800deac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	371c      	adds	r7, #28
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3318      	adds	r3, #24
 800dec8:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800deca:	2300      	movs	r3, #0
 800decc:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deda:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deea:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800def4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800def8:	b2da      	uxtb	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df12:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800df1a:	4413      	add	r3, r2
 800df1c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df32:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df46:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800df50:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800df60:	b480      	push	{r7}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3318      	adds	r3, #24
 800df6e:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df70:	2300      	movs	r3, #0
 800df72:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800df7e:	2b07      	cmp	r3, #7
 800df80:	bf0c      	ite	eq
 800df82:	2301      	moveq	r3, #1
 800df84:	2300      	movne	r3, #0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800df8a:	2300      	movs	r3, #0
 800df8c:	75fb      	strb	r3, [r7, #23]
 800df8e:	e019      	b.n	800dfc4 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800df90:	7df9      	ldrb	r1, [r7, #23]
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	6938      	ldr	r0, [r7, #16]
 800df96:	461a      	mov	r2, r3
 800df98:	0052      	lsls	r2, r2, #1
 800df9a:	441a      	add	r2, r3
 800df9c:	0153      	lsls	r3, r2, #5
 800df9e:	461a      	mov	r2, r3
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	440b      	add	r3, r1
 800dfa6:	019b      	lsls	r3, r3, #6
 800dfa8:	4413      	add	r3, r2
 800dfaa:	4403      	add	r3, r0
 800dfac:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800dfb0:	3314      	adds	r3, #20
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	dd02      	ble.n	800dfbe <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800dfb8:	7dbb      	ldrb	r3, [r7, #22]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	75fb      	strb	r3, [r7, #23]
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	2b05      	cmp	r3, #5
 800dfc8:	d9e2      	bls.n	800df90 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	7dba      	ldrb	r2, [r7, #22]
 800dfce:	701a      	strb	r2, [r3, #0]

	return status;
 800dfd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	371c      	adds	r7, #28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dffa:	fb92 f3f3 	sdiv	r3, r2, r3
 800dffe:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e000:	68fb      	ldr	r3, [r7, #12]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e00e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e012:	b089      	sub	sp, #36	; 0x24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
 800e01c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	f04f 0300 	mov.w	r3, #0
 800e026:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	fb02 f303 	mul.w	r3, r2, r3
 800e036:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	0b1b      	lsrs	r3, r3, #12
 800e03c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2200      	movs	r2, #0
 800e042:	469a      	mov	sl, r3
 800e044:	4693      	mov	fp, r2
 800e046:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	fb02 f303 	mul.w	r3, r2, r3
 800e052:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	091b      	lsrs	r3, r3, #4
 800e058:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2200      	movs	r2, #0
 800e05e:	4698      	mov	r8, r3
 800e060:	4691      	mov	r9, r2
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	fb08 f203 	mul.w	r2, r8, r3
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	fb09 f303 	mul.w	r3, r9, r3
 800e06e:	4413      	add	r3, r2
 800e070:	69ba      	ldr	r2, [r7, #24]
 800e072:	fba2 4508 	umull	r4, r5, r2, r8
 800e076:	442b      	add	r3, r5
 800e078:	461d      	mov	r5, r3
 800e07a:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e07e:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e082:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e086:	f04f 0200 	mov.w	r2, #0
 800e08a:	f04f 0300 	mov.w	r3, #0
 800e08e:	0b02      	lsrs	r2, r0, #12
 800e090:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e094:	0b0b      	lsrs	r3, r1, #12
 800e096:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e09a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d305      	bcc.n	800e0ae <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a6:	f04f 0300 	mov.w	r3, #0
 800e0aa:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e0b2:	697b      	ldr	r3, [r7, #20]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3724      	adds	r7, #36	; 0x24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e0be:	4770      	bx	lr

0800e0c0 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0c4:	b096      	sub	sp, #88	; 0x58
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	627a      	str	r2, [r7, #36]	; 0x24
 800e0ce:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e0d0:	f04f 0200 	mov.w	r2, #0
 800e0d4:	f04f 0300 	mov.w	r3, #0
 800e0d8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e0dc:	f04f 0200 	mov.w	r2, #0
 800e0e0:	f04f 0300 	mov.w	r3, #0
 800e0e4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	17da      	asrs	r2, r3, #31
 800e0f0:	469a      	mov	sl, r3
 800e0f2:	4693      	mov	fp, r2
 800e0f4:	4652      	mov	r2, sl
 800e0f6:	465b      	mov	r3, fp
 800e0f8:	f04f 0000 	mov.w	r0, #0
 800e0fc:	f04f 0100 	mov.w	r1, #0
 800e100:	0159      	lsls	r1, r3, #5
 800e102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e106:	0150      	lsls	r0, r2, #5
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	ebb2 040a 	subs.w	r4, r2, sl
 800e110:	eb63 050b 	sbc.w	r5, r3, fp
 800e114:	f04f 0200 	mov.w	r2, #0
 800e118:	f04f 0300 	mov.w	r3, #0
 800e11c:	00ab      	lsls	r3, r5, #2
 800e11e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e122:	00a2      	lsls	r2, r4, #2
 800e124:	4614      	mov	r4, r2
 800e126:	461d      	mov	r5, r3
 800e128:	eb14 080a 	adds.w	r8, r4, sl
 800e12c:	eb45 090b 	adc.w	r9, r5, fp
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	f04f 0300 	mov.w	r3, #0
 800e138:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e13c:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e140:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e144:	4690      	mov	r8, r2
 800e146:	4699      	mov	r9, r3
 800e148:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e14c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00d      	beq.n	800e16e <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e154:	2200      	movs	r2, #0
 800e156:	61bb      	str	r3, [r7, #24]
 800e158:	61fa      	str	r2, [r7, #28]
 800e15a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e15e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e162:	f7f2 f8ad 	bl	80002c0 <__aeabi_uldivmod>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02a      	beq.n	800e1ca <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e174:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e178:	f04f 0200 	mov.w	r2, #0
 800e17c:	f04f 0300 	mov.w	r3, #0
 800e180:	02cb      	lsls	r3, r1, #11
 800e182:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e186:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e18a:	0849      	lsrs	r1, r1, #1
 800e18c:	2000      	movs	r0, #0
 800e18e:	6139      	str	r1, [r7, #16]
 800e190:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e192:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e196:	4621      	mov	r1, r4
 800e198:	1851      	adds	r1, r2, r1
 800e19a:	6039      	str	r1, [r7, #0]
 800e19c:	4629      	mov	r1, r5
 800e19e:	eb43 0101 	adc.w	r1, r3, r1
 800e1a2:	6079      	str	r1, [r7, #4]
 800e1a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e1a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	60bb      	str	r3, [r7, #8]
 800e1b2:	60fa      	str	r2, [r7, #12]
 800e1b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e1bc:	f7f2 f880 	bl	80002c0 <__aeabi_uldivmod>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e1c8:	e00b      	b.n	800e1e2 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e1ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e1ce:	f04f 0200 	mov.w	r2, #0
 800e1d2:	f04f 0300 	mov.w	r3, #0
 800e1d6:	02cb      	lsls	r3, r1, #11
 800e1d8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e1dc:	02c2      	lsls	r2, r0, #11
 800e1de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1e4:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3758      	adds	r7, #88	; 0x58
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e1f2 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b085      	sub	sp, #20
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e1fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e202:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e204:	e002      	b.n	800e20c <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	089b      	lsrs	r3, r3, #2
 800e20a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	429a      	cmp	r2, r3
 800e212:	d8f8      	bhi.n	800e206 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e214:	e017      	b.n	800e246 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	4413      	add	r3, r2
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d30b      	bcc.n	800e23a <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	4413      	add	r3, r2
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	085b      	lsrs	r3, r3, #1
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	4413      	add	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
 800e238:	e002      	b.n	800e240 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	085b      	lsrs	r3, r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	089b      	lsrs	r3, r3, #2
 800e244:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1e4      	bne.n	800e216 <VL53L1_isqrt+0x24>
	}

	return res;
 800e24c:	68fb      	ldr	r3, [r7, #12]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3714      	adds	r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e270:	4618      	mov	r0, r3
 800e272:	f000 faa5 	bl	800e7c0 <VL53L1_decode_vcsel_period>
 800e276:	4603      	mov	r3, r0
	period = 2048 *
 800e278:	02db      	lsls	r3, r3, #11
 800e27a:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e286:	461a      	mov	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	4413      	add	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e294:	02db      	lsls	r3, r3, #11
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	4413      	add	r3, r2
 800e29a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2a2:	02db      	lsls	r3, r3, #11
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d009      	beq.n	800e2c4 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	fb01 f202 	mul.w	r2, r1, r2
 800e2be:	1a9b      	subs	r3, r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	e001      	b.n	800e2c8 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e2d2:	bf00      	nop
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b084      	sub	sp, #16
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f000 fb90 	bl	800ea12 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7ff ff7a 	bl	800e1f2 <VL53L1_isqrt>
 800e2fe:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e300:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	fb02 f303 	mul.w	r3, r2, r3
 800e30a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	3307      	adds	r3, #7
 800e310:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	111b      	asrs	r3, r3, #4
 800e316:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	4413      	add	r3, r2
 800e322:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	2200      	movs	r2, #0
 800e330:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e334:	2300      	movs	r3, #0
 800e336:	73fb      	strb	r3, [r7, #15]
 800e338:	e01e      	b.n	800e378 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e33a:	7bfa      	ldrb	r2, [r7, #15]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	3206      	adds	r2, #6
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	429a      	cmp	r2, r3
 800e348:	dd13      	ble.n	800e372 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e350:	7bf9      	ldrb	r1, [r7, #15]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	3106      	adds	r1, #6
 800e356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e35a:	441a      	add	r2, r3
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e368:	3301      	adds	r3, #1
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	3301      	adds	r3, #1
 800e376:	73fb      	strb	r3, [r7, #15]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	7a9b      	ldrb	r3, [r3, #10]
 800e37c:	7bfa      	ldrb	r2, [r7, #15]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d3db      	bcc.n	800e33a <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01c      	beq.n	800e3c6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e39e:	683a      	ldr	r2, [r7, #0]
 800e3a0:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e3a4:	0852      	lsrs	r2, r2, #1
 800e3a6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e3a8:	441a      	add	r2, r3
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e3bc:	fb93 f2f2 	sdiv	r2, r3, r2
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e3c6:	bf00      	nop
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b085      	sub	sp, #20
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	7b1b      	ldrb	r3, [r3, #12]
 800e3e6:	f003 0307 	and.w	r3, r3, #7
 800e3ea:	2b07      	cmp	r3, #7
 800e3ec:	d13a      	bne.n	800e464 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73bb      	strb	r3, [r7, #14]
 800e3f6:	e01f      	b.n	800e438 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	7b1b      	ldrb	r3, [r3, #12]
 800e400:	f003 0307 	and.w	r3, r3, #7
 800e404:	2b07      	cmp	r3, #7
 800e406:	d014      	beq.n	800e432 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e408:	7bba      	ldrb	r2, [r7, #14]
 800e40a:	7b7b      	ldrb	r3, [r7, #13]
 800e40c:	6879      	ldr	r1, [r7, #4]
 800e40e:	440a      	add	r2, r1
 800e410:	7b11      	ldrb	r1, [r2, #12]
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	4413      	add	r3, r2
 800e416:	460a      	mov	r2, r1
 800e418:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e41a:	7bba      	ldrb	r2, [r7, #14]
 800e41c:	7b7b      	ldrb	r3, [r7, #13]
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	440a      	add	r2, r1
 800e422:	7c91      	ldrb	r1, [r2, #18]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	4413      	add	r3, r2
 800e428:	460a      	mov	r2, r1
 800e42a:	749a      	strb	r2, [r3, #18]
				i++;
 800e42c:	7b7b      	ldrb	r3, [r7, #13]
 800e42e:	3301      	adds	r3, #1
 800e430:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e432:	7bbb      	ldrb	r3, [r7, #14]
 800e434:	3301      	adds	r3, #1
 800e436:	73bb      	strb	r3, [r7, #14]
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	2b05      	cmp	r3, #5
 800e43c:	d9dc      	bls.n	800e3f8 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e43e:	7b7b      	ldrb	r3, [r7, #13]
 800e440:	73bb      	strb	r3, [r7, #14]
 800e442:	e00c      	b.n	800e45e <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e444:	7bbb      	ldrb	r3, [r7, #14]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4413      	add	r3, r2
 800e44a:	2210      	movs	r2, #16
 800e44c:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	4413      	add	r3, r2
 800e454:	2200      	movs	r2, #0
 800e456:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	3301      	adds	r3, #1
 800e45c:	73bb      	strb	r3, [r7, #14]
 800e45e:	7bbb      	ldrb	r3, [r7, #14]
 800e460:	2b05      	cmp	r3, #5
 800e462:	d9ef      	bls.n	800e444 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7adb      	ldrb	r3, [r3, #11]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d023      	beq.n	800e4b4 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7adb      	ldrb	r3, [r3, #11]
 800e470:	73fb      	strb	r3, [r7, #15]
 800e472:	e00f      	b.n	800e494 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e474:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	7ad2      	ldrb	r2, [r2, #11]
 800e47c:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3106      	adds	r1, #6
 800e482:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3206      	adds	r2, #6
 800e48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
 800e490:	3301      	adds	r3, #1
 800e492:	73fb      	strb	r3, [r7, #15]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800e498:	7bfa      	ldrb	r2, [r7, #15]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d3ea      	bcc.n	800e474 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	72da      	strb	r2, [r3, #11]
	}
}
 800e4b4:	bf00      	nop
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fd83 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 800e4da:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800e4e0:	f249 2257 	movw	r2, #37463	; 0x9257
 800e4e4:	fb02 f303 	mul.w	r3, r2, r3
 800e4e8:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e4f0:	0c1b      	lsrs	r3, r3, #16
 800e4f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800e4fe:	b480      	push	{r7}
 800e500:	b087      	sub	sp, #28
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800e50c:	2307      	movs	r3, #7
 800e50e:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e51a:	db03      	blt.n	800e524 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800e51c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e520:	617b      	str	r3, [r7, #20]
 800e522:	e004      	b.n	800e52e <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	dd01      	ble.n	800e52e <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e534:	dd02      	ble.n	800e53c <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800e536:	2303      	movs	r3, #3
 800e538:	613b      	str	r3, [r7, #16]
 800e53a:	e001      	b.n	800e540 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800e53c:	2307      	movs	r3, #7
 800e53e:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d009      	beq.n	800e55a <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	409a      	lsls	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	085b      	lsrs	r3, r3, #1
 800e550:	441a      	add	r2, r3
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	fbb2 f3f3 	udiv	r3, r2, r3
 800e558:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e560:	dd02      	ble.n	800e568 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	011b      	lsls	r3, r3, #4
 800e566:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e56e:	d302      	bcc.n	800e576 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800e570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e574:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800e57a:	89fb      	ldrh	r3, [r7, #14]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	371c      	adds	r7, #28
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	4613      	mov	r3, r2
 800e596:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800e59c:	2300      	movs	r3, #0
 800e59e:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800e5a0:	88fb      	ldrh	r3, [r7, #6]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d010      	beq.n	800e5c8 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	021a      	lsls	r2, r3, #8
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800e5b2:	88fb      	ldrh	r3, [r7, #6]
 800e5b4:	085b      	lsrs	r3, r3, #1
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800e5be:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800e5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c4:	617b      	str	r3, [r7, #20]
 800e5c6:	e004      	b.n	800e5d2 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d0:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d901      	bls.n	800e5de <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800e5e2:	8a7b      	ldrh	r3, [r7, #18]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	371c      	adds	r7, #28
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	b093      	sub	sp, #76	; 0x4c
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	461e      	mov	r6, r3
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e5fe:	460b      	mov	r3, r1
 800e600:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e602:	4613      	mov	r3, r2
 800e604:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e606:	4633      	mov	r3, r6
 800e608:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800e610:	f04f 0200 	mov.w	r2, #0
 800e614:	f04f 0300 	mov.w	r3, #0
 800e618:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800e620:	2300      	movs	r3, #0
 800e622:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fcda 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 800e62c:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800e62e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e630:	2200      	movs	r2, #0
 800e632:	623b      	str	r3, [r7, #32]
 800e634:	627a      	str	r2, [r7, #36]	; 0x24
 800e636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e638:	2200      	movs	r2, #0
 800e63a:	61bb      	str	r3, [r7, #24]
 800e63c:	61fa      	str	r2, [r7, #28]
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e644:	4602      	mov	r2, r0
 800e646:	1a9b      	subs	r3, r3, r2
 800e648:	613b      	str	r3, [r7, #16]
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	460a      	mov	r2, r1
 800e64e:	eb63 0302 	sbc.w	r3, r3, r2
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e658:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800e65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e65e:	2200      	movs	r2, #0
 800e660:	469a      	mov	sl, r3
 800e662:	4693      	mov	fp, r2
 800e664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e666:	fb0a f203 	mul.w	r2, sl, r3
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	fb0b f303 	mul.w	r3, fp, r3
 800e670:	4413      	add	r3, r2
 800e672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e674:	fba2 890a 	umull	r8, r9, r2, sl
 800e678:	444b      	add	r3, r9
 800e67a:	4699      	mov	r9, r3
 800e67c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800e680:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800e684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da08      	bge.n	800e69e <VL53L1_range_maths+0xae>
 800e68c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e690:	1851      	adds	r1, r2, r1
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	f143 0300 	adc.w	r3, r3, #0
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e69e:	f04f 0000 	mov.w	r0, #0
 800e6a2:	f04f 0100 	mov.w	r1, #0
 800e6a6:	0a50      	lsrs	r0, r2, #9
 800e6a8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e6ac:	1259      	asrs	r1, r3, #9
 800e6ae:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800e6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b4:	f249 2257 	movw	r2, #37463	; 0x9257
 800e6b8:	fb03 f202 	mul.w	r2, r3, r2
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	2100      	movs	r1, #0
 800e6c0:	fb01 f303 	mul.w	r3, r1, r3
 800e6c4:	4413      	add	r3, r2
 800e6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c8:	f249 2157 	movw	r1, #37463	; 0x9257
 800e6cc:	fba2 4501 	umull	r4, r5, r2, r1
 800e6d0:	442b      	add	r3, r5
 800e6d2:	461d      	mov	r5, r3
 800e6d4:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800e6d8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800e6dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	da07      	bge.n	800e6f4 <VL53L1_range_maths+0x104>
 800e6e4:	4934      	ldr	r1, [pc, #208]	; (800e7b8 <VL53L1_range_maths+0x1c8>)
 800e6e6:	1851      	adds	r1, r2, r1
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	f143 0300 	adc.w	r3, r3, #0
 800e6ee:	607b      	str	r3, [r7, #4]
 800e6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6f4:	f04f 0000 	mov.w	r0, #0
 800e6f8:	f04f 0100 	mov.w	r1, #0
 800e6fc:	0d90      	lsrs	r0, r2, #22
 800e6fe:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800e702:	1599      	asrs	r1, r3, #22
 800e704:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e70c:	4413      	add	r3, r2
 800e70e:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800e710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e712:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e714:	fb02 f303 	mul.w	r3, r2, r3
 800e718:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800e71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800e722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e724:	2b00      	cmp	r3, #0
 800e726:	da01      	bge.n	800e72c <VL53L1_range_maths+0x13c>
 800e728:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e72c:	12db      	asrs	r3, r3, #11
 800e72e:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800e730:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e734:	2b00      	cmp	r3, #0
 800e736:	d130      	bne.n	800e79a <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800e738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	2b00      	cmp	r3, #0
 800e748:	da00      	bge.n	800e74c <VL53L1_range_maths+0x15c>
 800e74a:	3303      	adds	r3, #3
 800e74c:	109b      	asrs	r3, r3, #2
 800e74e:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800e750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e752:	4b1a      	ldr	r3, [pc, #104]	; (800e7bc <VL53L1_range_maths+0x1cc>)
 800e754:	fb83 2301 	smull	r2, r3, r3, r1
 800e758:	109a      	asrs	r2, r3, #2
 800e75a:	17cb      	asrs	r3, r1, #31
 800e75c:	1ad2      	subs	r2, r2, r3
 800e75e:	4613      	mov	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4413      	add	r3, r2
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	1aca      	subs	r2, r1, r3
 800e768:	2a04      	cmp	r2, #4
 800e76a:	dc09      	bgt.n	800e780 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800e76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e76e:	4a13      	ldr	r2, [pc, #76]	; (800e7bc <VL53L1_range_maths+0x1cc>)
 800e770:	fb82 1203 	smull	r1, r2, r2, r3
 800e774:	1092      	asrs	r2, r2, #2
 800e776:	17db      	asrs	r3, r3, #31
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	b21b      	sxth	r3, r3
 800e77c:	647b      	str	r3, [r7, #68]	; 0x44
 800e77e:	e015      	b.n	800e7ac <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800e780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e782:	4a0e      	ldr	r2, [pc, #56]	; (800e7bc <VL53L1_range_maths+0x1cc>)
 800e784:	fb82 1203 	smull	r1, r2, r2, r3
 800e788:	1092      	asrs	r2, r2, #2
 800e78a:	17db      	asrs	r3, r3, #31
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	b29b      	uxth	r3, r3
 800e790:	3301      	adds	r3, #1
 800e792:	b29b      	uxth	r3, r3
 800e794:	b21b      	sxth	r3, r3
 800e796:	647b      	str	r3, [r7, #68]	; 0x44
 800e798:	e008      	b.n	800e7ac <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800e79a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d104      	bne.n	800e7ac <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800e7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a4:	0fda      	lsrs	r2, r3, #31
 800e7a6:	4413      	add	r3, r2
 800e7a8:	105b      	asrs	r3, r3, #1
 800e7aa:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800e7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	374c      	adds	r7, #76	; 0x4c
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b8:	003fffff 	.word	0x003fffff
 800e7bc:	66666667 	.word	0x66666667

0800e7c0 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b083      	sub	sp, #12
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	781a      	ldrb	r2, [r3, #0]
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7a5a      	ldrb	r2, [r3, #9]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	685a      	ldr	r2, [r3, #4]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	605a      	str	r2, [r3, #4]
}
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800e862:	b480      	push	{r7}
 800e864:	b087      	sub	sp, #28
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	460b      	mov	r3, r1
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2203      	movs	r2, #3
 800e878:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2203      	movs	r2, #3
 800e87e:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2218      	movs	r2, #24
 800e896:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800e898:	897b      	ldrh	r3, [r7, #10]
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e936:	2300      	movs	r3, #0
 800e938:	82fb      	strh	r3, [r7, #22]
 800e93a:	e009      	b.n	800e950 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800e93c:	8afb      	ldrh	r3, [r7, #22]
 800e93e:	8afa      	ldrh	r2, [r7, #22]
 800e940:	b2d1      	uxtb	r1, r2
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	4413      	add	r3, r2
 800e946:	460a      	mov	r2, r1
 800e948:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e94a:	8afb      	ldrh	r3, [r7, #22]
 800e94c:	3301      	adds	r3, #1
 800e94e:	82fb      	strh	r3, [r7, #22]
 800e950:	8afb      	ldrh	r3, [r7, #22]
 800e952:	2b05      	cmp	r3, #5
 800e954:	d9f2      	bls.n	800e93c <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e956:	2300      	movs	r3, #0
 800e958:	82fb      	strh	r3, [r7, #22]
 800e95a:	e007      	b.n	800e96c <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800e95c:	8afb      	ldrh	r3, [r7, #22]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	4413      	add	r3, r2
 800e962:	2201      	movs	r2, #1
 800e964:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e966:	8afb      	ldrh	r3, [r7, #22]
 800e968:	3301      	adds	r3, #1
 800e96a:	82fb      	strh	r3, [r7, #22]
 800e96c:	8afb      	ldrh	r3, [r7, #22]
 800e96e:	2b05      	cmp	r3, #5
 800e970:	d9f4      	bls.n	800e95c <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800e972:	2300      	movs	r3, #0
 800e974:	82fb      	strh	r3, [r7, #22]
 800e976:	e013      	b.n	800e9a0 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800e978:	8afa      	ldrh	r2, [r7, #22]
 800e97a:	897b      	ldrh	r3, [r7, #10]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d206      	bcs.n	800e98e <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800e980:	8afa      	ldrh	r2, [r7, #22]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	3206      	adds	r2, #6
 800e986:	68f9      	ldr	r1, [r7, #12]
 800e988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e98c:	e005      	b.n	800e99a <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800e98e:	8afa      	ldrh	r2, [r7, #22]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3206      	adds	r2, #6
 800e994:	2100      	movs	r1, #0
 800e996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800e99a:	8afb      	ldrh	r3, [r7, #22]
 800e99c:	3301      	adds	r3, #1
 800e99e:	82fb      	strh	r3, [r7, #22]
 800e9a0:	8afb      	ldrh	r3, [r7, #22]
 800e9a2:	2b17      	cmp	r3, #23
 800e9a4:	d9e8      	bls.n	800e978 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800e9a6:	bf00      	nop
 800e9a8:	bf00      	nop
 800e9aa:	371c      	adds	r7, #28
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800e9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da10      	bge.n	800e9ec <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	43db      	mvns	r3, r3
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	f003 0307 	and.w	r3, r3, #7
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	3b80      	subs	r3, #128	; 0x80
 800e9e2:	10db      	asrs	r3, r3, #3
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e9ea:	e00c      	b.n	800ea06 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	f003 0307 	and.w	r3, r3, #7
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e9fe:	10db      	asrs	r3, r3, #3
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	701a      	strb	r2, [r3, #0]
}
 800ea06:	bf00      	nop
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b085      	sub	sp, #20
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ea1e:	2300      	movs	r3, #0
 800ea20:	73fb      	strb	r3, [r7, #15]
 800ea22:	e02c      	b.n	800ea7e <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d009      	beq.n	800ea3e <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ea30:	7bf9      	ldrb	r1, [r7, #15]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3106      	adds	r1, #6
 800ea36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	db07      	blt.n	800ea4e <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ea3e:	7bfa      	ldrb	r2, [r7, #15]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3206      	adds	r2, #6
 800ea44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d009      	beq.n	800ea68 <VL53L1_hist_find_min_max_bin_values+0x56>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ea5a:	7bf9      	ldrb	r1, [r7, #15]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3106      	adds	r1, #6
 800ea60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	dc07      	bgt.n	800ea78 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ea68:	7bfa      	ldrb	r2, [r7, #15]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	3206      	adds	r2, #6
 800ea6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	73fb      	strb	r3, [r7, #15]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7a9b      	ldrb	r3, [r3, #10]
 800ea82:	7bfa      	ldrb	r2, [r7, #15]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d3cd      	bcc.n	800ea24 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7adb      	ldrb	r3, [r3, #11]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d03a      	beq.n	800eb20 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eabc:	2300      	movs	r3, #0
 800eabe:	73fb      	strb	r3, [r7, #15]
 800eac0:	e00e      	b.n	800eae0 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eac8:	7bf9      	ldrb	r1, [r7, #15]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	3106      	adds	r1, #6
 800eace:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ead2:	441a      	add	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	3301      	adds	r3, #1
 800eade:	73fb      	strb	r3, [r7, #15]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7adb      	ldrb	r3, [r3, #11]
 800eae4:	7bfa      	ldrb	r2, [r7, #15]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d3eb      	bcc.n	800eac2 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	7ad2      	ldrb	r2, [r2, #11]
 800eb00:	0852      	lsrs	r2, r2, #1
 800eb02:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800eb04:	441a      	add	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800eb16:	fb93 f2f2 	sdiv	r2, r3, r2
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800eb20:	bf00      	nop
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800eb2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb30:	b0ca      	sub	sp, #296	; 0x128
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800eb38:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800eb3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eb40:	4603      	mov	r3, r0
 800eb42:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800eb5e:	f04f 0200 	mov.w	r2, #0
 800eb62:	f04f 0300 	mov.w	r3, #0
 800eb66:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800eb70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb74:	2300      	movs	r3, #0
 800eb76:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800eb78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800eb80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb84:	2300      	movs	r3, #0
 800eb86:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800eb88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800eb90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb94:	2300      	movs	r3, #0
 800eb96:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800eb98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800eba0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800eba4:	2300      	movs	r3, #0
 800eba6:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800eba8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebac:	2300      	movs	r3, #0
 800ebae:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800ebb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800ebb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ebbc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 80e1 	beq.w	800ed88 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800ebc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ebca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 80da 	beq.w	800ed88 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800ebd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ebd8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff f9ff 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 800ebe2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800ebe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ebea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebee:	3301      	adds	r3, #1
 800ebf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800ebf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebfc:	2110      	movs	r1, #16
 800ebfe:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ec02:	f7ff fa04 	bl	800e00e <VL53L1_duration_maths>
 800ec06:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800ec08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec0c:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800ec0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec12:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ec16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	f7ff fc6d 	bl	800e4fe <VL53L1_rate_maths>
 800ec24:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800ec26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec2a:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800ec2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec30:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800ec34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec38:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800ec3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f7ff fa3c 	bl	800e0c0 <VL53L1_events_per_spad_maths>
 800ec48:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800ec4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec4e:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800ec50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec54:	8adb      	ldrh	r3, [r3, #22]
 800ec56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec5a:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800ec5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec60:	8adb      	ldrh	r3, [r3, #22]
 800ec62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec66:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800ec68:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f000 808a 	beq.w	800ed88 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800ec74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec78:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	461c      	mov	r4, r3
 800ec80:	4615      	mov	r5, r2
 800ec82:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800ec86:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	462b      	mov	r3, r5
 800ec8e:	f04f 0000 	mov.w	r0, #0
 800ec92:	f04f 0100 	mov.w	r1, #0
 800ec96:	0159      	lsls	r1, r3, #5
 800ec98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ec9c:	0150      	lsls	r0, r2, #5
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	ebb2 0804 	subs.w	r8, r2, r4
 800eca6:	eb63 0905 	sbc.w	r9, r3, r5
 800ecaa:	f04f 0200 	mov.w	r2, #0
 800ecae:	f04f 0300 	mov.w	r3, #0
 800ecb2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ecb6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800ecba:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ecbe:	4690      	mov	r8, r2
 800ecc0:	4699      	mov	r9, r3
 800ecc2:	eb18 0a04 	adds.w	sl, r8, r4
 800ecc6:	eb49 0b05 	adc.w	fp, r9, r5
 800ecca:	f04f 0200 	mov.w	r2, #0
 800ecce:	f04f 0300 	mov.w	r3, #0
 800ecd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ecd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ecda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecde:	4692      	mov	sl, r2
 800ece0:	469b      	mov	fp, r3
 800ece2:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800ece6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ecea:	f04f 0000 	mov.w	r0, #0
 800ecee:	f04f 0100 	mov.w	r1, #0
 800ecf2:	0319      	lsls	r1, r3, #12
 800ecf4:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ecf8:	0310      	lsls	r0, r2, #12
 800ecfa:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800ecfe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed02:	695b      	ldr	r3, [r3, #20]
 800ed04:	085b      	lsrs	r3, r3, #1
 800ed06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800ed0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ed14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ed18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ed1c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800ed20:	4621      	mov	r1, r4
 800ed22:	1851      	adds	r1, r2, r1
 800ed24:	65b9      	str	r1, [r7, #88]	; 0x58
 800ed26:	4629      	mov	r1, r5
 800ed28:	eb43 0101 	adc.w	r1, r3, r1
 800ed2c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ed2e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800ed32:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800ed36:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ed42:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ed46:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ed4a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800ed4e:	f7f1 fab7 	bl	80002c0 <__aeabi_uldivmod>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800ed5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed5e:	8adb      	ldrh	r3, [r3, #22]
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ed68:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ed6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ed70:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800ed74:	4621      	mov	r1, r4
 800ed76:	428a      	cmp	r2, r1
 800ed78:	4629      	mov	r1, r5
 800ed7a:	418b      	sbcs	r3, r1
 800ed7c:	d204      	bcs.n	800ed88 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800ed7e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800ed82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ed86:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800ed88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 82e9 	beq.w	800f366 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800ed94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ed98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 82e2 	beq.w	800f366 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800eda2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800eda6:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 82dc 	beq.w	800f366 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800edae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800edb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 82d5 	beq.w	800f366 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800edbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800edc0:	885b      	ldrh	r3, [r3, #2]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	2200      	movs	r2, #0
 800edc6:	653b      	str	r3, [r7, #80]	; 0x50
 800edc8:	657a      	str	r2, [r7, #84]	; 0x54
 800edca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800edce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800edd2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800edd6:	4622      	mov	r2, r4
 800edd8:	462b      	mov	r3, r5
 800edda:	f04f 0000 	mov.w	r0, #0
 800edde:	f04f 0100 	mov.w	r1, #0
 800ede2:	0159      	lsls	r1, r3, #5
 800ede4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ede8:	0150      	lsls	r0, r2, #5
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	1b11      	subs	r1, r2, r4
 800edf0:	64b9      	str	r1, [r7, #72]	; 0x48
 800edf2:	eb63 0305 	sbc.w	r3, r3, r5
 800edf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edf8:	f04f 0200 	mov.w	r2, #0
 800edfc:	f04f 0300 	mov.w	r3, #0
 800ee00:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800ee04:	4649      	mov	r1, r9
 800ee06:	008b      	lsls	r3, r1, #2
 800ee08:	4641      	mov	r1, r8
 800ee0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ee0e:	4641      	mov	r1, r8
 800ee10:	008a      	lsls	r2, r1, #2
 800ee12:	4611      	mov	r1, r2
 800ee14:	461a      	mov	r2, r3
 800ee16:	460b      	mov	r3, r1
 800ee18:	191b      	adds	r3, r3, r4
 800ee1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	eb45 0303 	adc.w	r3, r5, r3
 800ee22:	647b      	str	r3, [r7, #68]	; 0x44
 800ee24:	f04f 0200 	mov.w	r2, #0
 800ee28:	f04f 0300 	mov.w	r3, #0
 800ee2c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800ee30:	4629      	mov	r1, r5
 800ee32:	02cb      	lsls	r3, r1, #11
 800ee34:	4621      	mov	r1, r4
 800ee36:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	02ca      	lsls	r2, r1, #11
 800ee3e:	461c      	mov	r4, r3
 800ee40:	4613      	mov	r3, r2
 800ee42:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800ee46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	085b      	lsrs	r3, r3, #1
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800ee54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ee5e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ee62:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ee66:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	1851      	adds	r1, r2, r1
 800ee6e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ee70:	4629      	mov	r1, r5
 800ee72:	eb43 0101 	adc.w	r1, r3, r1
 800ee76:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ee78:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800ee7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800ee80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ee8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee92:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800ee96:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800ee9a:	f7f1 fa11 	bl	80002c0 <__aeabi_uldivmod>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
 800eea2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800eea6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800eeaa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eeae:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800eeb0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	011a      	lsls	r2, r3, #4
 800eeb8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eebc:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800eebe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2200      	movs	r2, #0
 800eec6:	633b      	str	r3, [r7, #48]	; 0x30
 800eec8:	637a      	str	r2, [r7, #52]	; 0x34
 800eeca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800eece:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800eed2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eede:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800eee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800eee6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800eeea:	4622      	mov	r2, r4
 800eeec:	fb02 f203 	mul.w	r2, r2, r3
 800eef0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eef4:	4629      	mov	r1, r5
 800eef6:	fb01 f303 	mul.w	r3, r1, r3
 800eefa:	441a      	add	r2, r3
 800eefc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef00:	4621      	mov	r1, r4
 800ef02:	fba3 1301 	umull	r1, r3, r3, r1
 800ef06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ef10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef14:	18d3      	adds	r3, r2, r3
 800ef16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef1a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800ef1e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800ef22:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800ef26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef2a:	8b5b      	ldrh	r3, [r3, #26]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ef38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ef40:	4622      	mov	r2, r4
 800ef42:	fb02 f203 	mul.w	r2, r2, r3
 800ef46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	fb01 f303 	mul.w	r3, r1, r3
 800ef50:	441a      	add	r2, r3
 800ef52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef56:	4621      	mov	r1, r4
 800ef58:	fba3 1301 	umull	r1, r3, r3, r1
 800ef5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef60:	460b      	mov	r3, r1
 800ef62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef70:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800ef74:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800ef78:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800ef7c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ef80:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800ef84:	62b9      	str	r1, [r7, #40]	; 0x28
 800ef86:	f143 0300 	adc.w	r3, r3, #0
 800ef8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef8c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ef90:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800ef94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ef98:	f04f 0000 	mov.w	r0, #0
 800ef9c:	f04f 0100 	mov.w	r1, #0
 800efa0:	0cd0      	lsrs	r0, r2, #19
 800efa2:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800efa6:	0cd9      	lsrs	r1, r3, #19
 800efa8:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800efac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800efb0:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800efb4:	6239      	str	r1, [r7, #32]
 800efb6:	f143 0300 	adc.w	r3, r3, #0
 800efba:	627b      	str	r3, [r7, #36]	; 0x24
 800efbc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800efc0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800efc4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800efc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800efcc:	f04f 0300 	mov.w	r3, #0
 800efd0:	f7f1 f976 	bl	80002c0 <__aeabi_uldivmod>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800efdc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800efe0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800efe4:	f173 0300 	sbcs.w	r3, r3, #0
 800efe8:	d305      	bcc.n	800eff6 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800efea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800efee:	f04f 0300 	mov.w	r3, #0
 800eff2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800eff6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800effa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800effe:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f000:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2200      	movs	r2, #0
 800f008:	61bb      	str	r3, [r7, #24]
 800f00a:	61fa      	str	r2, [r7, #28]
 800f00c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f010:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f014:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f028:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f02c:	4622      	mov	r2, r4
 800f02e:	fb02 f203 	mul.w	r2, r2, r3
 800f032:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f036:	4629      	mov	r1, r5
 800f038:	fb01 f303 	mul.w	r3, r1, r3
 800f03c:	441a      	add	r2, r3
 800f03e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f042:	4621      	mov	r1, r4
 800f044:	fba3 1301 	umull	r1, r3, r3, r1
 800f048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f04c:	460b      	mov	r3, r1
 800f04e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f056:	18d3      	adds	r3, r2, r3
 800f058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f05c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f060:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f064:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f068:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f06c:	8b5b      	ldrh	r3, [r3, #26]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	2200      	movs	r2, #0
 800f072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f076:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f07a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f07e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f082:	4622      	mov	r2, r4
 800f084:	fb02 f203 	mul.w	r2, r2, r3
 800f088:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f08c:	4629      	mov	r1, r5
 800f08e:	fb01 f303 	mul.w	r3, r1, r3
 800f092:	441a      	add	r2, r3
 800f094:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f098:	4621      	mov	r1, r4
 800f09a:	fba3 1301 	umull	r1, r3, r3, r1
 800f09e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f0ac:	18d3      	adds	r3, r2, r3
 800f0ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f0b2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f0b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f0ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f0be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f0c2:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f0c6:	6139      	str	r1, [r7, #16]
 800f0c8:	f143 0300 	adc.w	r3, r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]
 800f0ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f0d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f0d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f0da:	f04f 0000 	mov.w	r0, #0
 800f0de:	f04f 0100 	mov.w	r1, #0
 800f0e2:	0cd0      	lsrs	r0, r2, #19
 800f0e4:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f0e8:	0cd9      	lsrs	r1, r3, #19
 800f0ea:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f0ee:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0f6:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f0f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f0fc:	891b      	ldrh	r3, [r3, #8]
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	2200      	movs	r2, #0
 800f102:	673b      	str	r3, [r7, #112]	; 0x70
 800f104:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f106:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f10a:	462b      	mov	r3, r5
 800f10c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f110:	4642      	mov	r2, r8
 800f112:	fb02 f203 	mul.w	r2, r2, r3
 800f116:	464b      	mov	r3, r9
 800f118:	4621      	mov	r1, r4
 800f11a:	fb01 f303 	mul.w	r3, r1, r3
 800f11e:	4413      	add	r3, r2
 800f120:	4622      	mov	r2, r4
 800f122:	4641      	mov	r1, r8
 800f124:	fba2 1201 	umull	r1, r2, r2, r1
 800f128:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f12c:	460a      	mov	r2, r1
 800f12e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f132:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f136:	4413      	add	r3, r2
 800f138:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f13c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f140:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f144:	4622      	mov	r2, r4
 800f146:	fb02 f203 	mul.w	r2, r2, r3
 800f14a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f14e:	4629      	mov	r1, r5
 800f150:	fb01 f303 	mul.w	r3, r1, r3
 800f154:	4413      	add	r3, r2
 800f156:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f15a:	4621      	mov	r1, r4
 800f15c:	fba2 1201 	umull	r1, r2, r2, r1
 800f160:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f164:	460a      	mov	r2, r1
 800f166:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f16a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f16e:	4413      	add	r3, r2
 800f170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f174:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f178:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f17c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f180:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f184:	88db      	ldrh	r3, [r3, #6]
 800f186:	b29b      	uxth	r3, r3
 800f188:	2200      	movs	r2, #0
 800f18a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f18c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f18e:	f04f 0200 	mov.w	r2, #0
 800f192:	f04f 0300 	mov.w	r3, #0
 800f196:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f19a:	4629      	mov	r1, r5
 800f19c:	01cb      	lsls	r3, r1, #7
 800f19e:	4621      	mov	r1, r4
 800f1a0:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	01ca      	lsls	r2, r1, #7
 800f1a8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f1ac:	1884      	adds	r4, r0, r2
 800f1ae:	60bc      	str	r4, [r7, #8]
 800f1b0:	eb41 0303 	adc.w	r3, r1, r3
 800f1b4:	60fb      	str	r3, [r7, #12]
 800f1b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f1ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f1be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1c2:	88db      	ldrh	r3, [r3, #6]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	663b      	str	r3, [r7, #96]	; 0x60
 800f1ca:	667a      	str	r2, [r7, #100]	; 0x64
 800f1cc:	f04f 0200 	mov.w	r2, #0
 800f1d0:	f04f 0300 	mov.w	r3, #0
 800f1d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f1d8:	4629      	mov	r1, r5
 800f1da:	020b      	lsls	r3, r1, #8
 800f1dc:	4621      	mov	r1, r4
 800f1de:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	020a      	lsls	r2, r1, #8
 800f1e6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f1ea:	f7f1 f869 	bl	80002c0 <__aeabi_uldivmod>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f1f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f1fa:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f1fe:	6039      	str	r1, [r7, #0]
 800f200:	f143 0300 	adc.w	r3, r3, #0
 800f204:	607b      	str	r3, [r7, #4]
 800f206:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f20a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f20e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f216:	f04f 0300 	mov.w	r3, #0
 800f21a:	f7f1 f851 	bl	80002c0 <__aeabi_uldivmod>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f226:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f22a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f22e:	f173 0300 	sbcs.w	r3, r3, #0
 800f232:	d305      	bcc.n	800f240 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f234:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f238:	f04f 0300 	mov.w	r3, #0
 800f23c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f240:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f244:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f248:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f24a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f24e:	69db      	ldr	r3, [r3, #28]
 800f250:	021b      	lsls	r3, r3, #8
 800f252:	4618      	mov	r0, r3
 800f254:	f7fe ffcd 	bl	800e1f2 <VL53L1_isqrt>
 800f258:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f260:	785b      	ldrb	r3, [r3, #1]
 800f262:	461a      	mov	r2, r3
 800f264:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f268:	fb02 f303 	mul.w	r3, r2, r3
 800f26c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f270:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f274:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f276:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f27a:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d218      	bcs.n	800f2b2 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f288:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f28c:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f298:	021b      	lsls	r3, r3, #8
 800f29a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f29e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f2a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d203      	bcs.n	800f2b2 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f2aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f2ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f2b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2b6:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f2b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2bc:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f2be:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f2c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2c4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f2c6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f2ca:	f000 f854 	bl	800f376 <VL53L1_f_002>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f2d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2d6:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f2d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f2e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2e6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f2f0:	fb02 f303 	mul.w	r3, r2, r3
 800f2f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f2f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f2fc:	3308      	adds	r3, #8
 800f2fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f302:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f306:	091b      	lsrs	r3, r3, #4
 800f308:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f30c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f310:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f312:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f314:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f318:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f31a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f31c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f320:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f322:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f326:	f000 f826 	bl	800f376 <VL53L1_f_002>
 800f32a:	4603      	mov	r3, r0
 800f32c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f32e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f332:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f334:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f338:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f33c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f340:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f344:	429a      	cmp	r2, r3
 800f346:	da07      	bge.n	800f358 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f348:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f34c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f354:	801a      	strh	r2, [r3, #0]
 800f356:	e006      	b.n	800f366 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f358:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f35c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f364:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f366:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f36a:	4618      	mov	r0, r3
 800f36c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f370:	46bd      	mov	sp, r7
 800f372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f376 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b086      	sub	sp, #24
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	607a      	str	r2, [r7, #4]
 800f382:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	fb03 f303 	mul.w	r3, r3, r3
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	4413      	add	r3, r2
 800f39c:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f39e:	6938      	ldr	r0, [r7, #16]
 800f3a0:	f7fe ff27 	bl	800e1f2 <VL53L1_isqrt>
 800f3a4:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	011b      	lsls	r3, r3, #4
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fe ff1d 	bl	800e1f2 <VL53L1_isqrt>
 800f3b8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	fb02 f303 	mul.w	r3, r2, r3
 800f3c2:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d009      	beq.n	800f3de <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f3ca:	697a      	ldr	r2, [r7, #20]
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	005b      	lsls	r3, r3, #1
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3dc:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f3de:	697b      	ldr	r3, [r7, #20]

}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3718      	adds	r7, #24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2218      	movs	r2, #24
 800f3f8:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	73fb      	strb	r3, [r7, #15]
 800f41e:	e01f      	b.n	800f460 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	4413      	add	r3, r2
 800f426:	2200      	movs	r2, #0
 800f428:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f42a:	7bfb      	ldrb	r3, [r7, #15]
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	4413      	add	r3, r2
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	4413      	add	r3, r2
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f442:	7bfa      	ldrb	r2, [r7, #15]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	322e      	adds	r2, #46	; 0x2e
 800f448:	2100      	movs	r1, #0
 800f44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f44e:	7bfa      	ldrb	r2, [r7, #15]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3246      	adds	r2, #70	; 0x46
 800f454:	2100      	movs	r1, #0
 800f456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	3301      	adds	r3, #1
 800f45e:	73fb      	strb	r3, [r7, #15]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	785b      	ldrb	r3, [r3, #1]
 800f464:	7bfa      	ldrb	r2, [r7, #15]
 800f466:	429a      	cmp	r2, r3
 800f468:	d3da      	bcc.n	800f420 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2208      	movs	r2, #8
 800f476:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f488:	461a      	mov	r2, r3
 800f48a:	2118      	movs	r1, #24
 800f48c:	2000      	movs	r0, #0
 800f48e:	f7ff f9e8 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800f498:	461a      	mov	r2, r3
 800f49a:	2118      	movs	r1, #24
 800f49c:	2000      	movs	r0, #0
 800f49e:	f7ff f9e0 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	2118      	movs	r1, #24
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	f7ff f9d8 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	2118      	movs	r1, #24
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7ff f9d0 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	2118      	movs	r1, #24
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	f7ff f9c8 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800f4d2:	bf00      	nop
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f4da:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4de:	b090      	sub	sp, #64	; 0x40
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	61b9      	str	r1, [r7, #24]
 800f4e4:	617a      	str	r2, [r7, #20]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	83fb      	strh	r3, [r7, #30]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800f502:	f04f 0200 	mov.w	r2, #0
 800f506:	f04f 0300 	mov.w	r3, #0
 800f50a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800f51a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f51c:	7a5a      	ldrb	r2, [r3, #9]
 800f51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f520:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800f522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f524:	7a1a      	ldrb	r2, [r3, #8]
 800f526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f528:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800f52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f52c:	7a9a      	ldrb	r2, [r3, #10]
 800f52e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f530:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800f532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f534:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f53a:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800f53c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f53e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff f93c 	bl	800e7c0 <VL53L1_decode_vcsel_period>
 800f548:	4603      	mov	r3, r0
 800f54a:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800f54c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f54e:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800f550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f556:	17da      	asrs	r2, r3, #31
 800f558:	60bb      	str	r3, [r7, #8]
 800f55a:	60fa      	str	r2, [r7, #12]
 800f55c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f560:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800f564:	8bfb      	ldrh	r3, [r7, #30]
 800f566:	2200      	movs	r2, #0
 800f568:	4698      	mov	r8, r3
 800f56a:	4691      	mov	r9, r2
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	fb08 f203 	mul.w	r2, r8, r3
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	fb09 f303 	mul.w	r3, r9, r3
 800f578:	4413      	add	r3, r2
 800f57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f57c:	fba2 4508 	umull	r4, r5, r2, r8
 800f580:	442b      	add	r3, r5
 800f582:	461d      	mov	r5, r3
 800f584:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800f588:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800f58c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f590:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800f594:	f143 0b00 	adc.w	fp, r3, #0
 800f598:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800f59c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	da08      	bge.n	800f5b6 <VL53L1_f_018+0xdc>
 800f5a4:	f640 71ff 	movw	r1, #4095	; 0xfff
 800f5a8:	1851      	adds	r1, r2, r1
 800f5aa:	6039      	str	r1, [r7, #0]
 800f5ac:	f143 0300 	adc.w	r3, r3, #0
 800f5b0:	607b      	str	r3, [r7, #4]
 800f5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5b6:	f04f 0000 	mov.w	r0, #0
 800f5ba:	f04f 0100 	mov.w	r1, #0
 800f5be:	0b10      	lsrs	r0, r2, #12
 800f5c0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800f5c4:	1319      	asrs	r1, r3, #12
 800f5c6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f5d4:	e062      	b.n	800f69c <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800f5d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5da:	089b      	lsrs	r3, r3, #2
 800f5dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800f5e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5e6:	4413      	add	r3, r2
 800f5e8:	7c9b      	ldrb	r3, [r3, #18]
 800f5ea:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	dd4f      	ble.n	800f692 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800f5f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5f4:	7a9b      	ldrb	r3, [r3, #10]
 800f5f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d20f      	bcs.n	800f61e <VL53L1_f_018+0x144>
 800f5fe:	7f7b      	ldrb	r3, [r7, #29]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00c      	beq.n	800f61e <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800f604:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f60a:	3206      	adds	r2, #6
 800f60c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	441a      	add	r2, r3
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	fb02 f303 	mul.w	r3, r2, r3
 800f61a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f61c:	e004      	b.n	800f628 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f622:	fb02 f303 	mul.w	r3, r2, r3
 800f626:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fde1 	bl	800e1f2 <VL53L1_isqrt>
 800f630:	4603      	mov	r3, r0
 800f632:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800f634:	6a3b      	ldr	r3, [r7, #32]
 800f636:	0fda      	lsrs	r2, r3, #31
 800f638:	4413      	add	r3, r2
 800f63a:	105b      	asrs	r3, r3, #1
 800f63c:	461a      	mov	r2, r3
 800f63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f640:	4413      	add	r3, r2
 800f642:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800f644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	fb92 f3f3 	sdiv	r3, r2, r3
 800f64c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	69ba      	ldr	r2, [r7, #24]
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	3308      	adds	r3, #8
 800f65c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800f65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f660:	2b00      	cmp	r3, #0
 800f662:	da00      	bge.n	800f666 <VL53L1_f_018+0x18c>
 800f664:	330f      	adds	r3, #15
 800f666:	111b      	asrs	r3, r3, #4
 800f668:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800f66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	4413      	add	r3, r2
 800f670:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800f672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	429a      	cmp	r2, r3
 800f678:	da01      	bge.n	800f67e <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800f67e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f684:	3216      	adds	r2, #22
 800f686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800f68c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f690:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f696:	3301      	adds	r3, #1
 800f698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f69c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f69e:	7a9b      	ldrb	r3, [r3, #10]
 800f6a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d396      	bcc.n	800f5d6 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800f6a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800f6ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6b0:	7a1b      	ldrb	r3, [r3, #8]
 800f6b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f6b6:	e033      	b.n	800f720 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800f6b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f6bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6be:	3206      	adds	r2, #6
 800f6c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f6c4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800f6c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6ca:	3116      	adds	r1, #22
 800f6cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	dd13      	ble.n	800f6fc <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800f6d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6da:	4413      	add	r3, r2
 800f6dc:	2201      	movs	r2, #1
 800f6de:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800f6e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6e6:	4413      	add	r3, r2
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800f6ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6f0:	791b      	ldrb	r3, [r3, #4]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6f8:	711a      	strb	r2, [r3, #4]
 800f6fa:	e00c      	b.n	800f716 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800f6fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f702:	4413      	add	r3, r2
 800f704:	2200      	movs	r2, #0
 800f706:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800f708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f70c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f70e:	4413      	add	r3, r2
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800f716:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f71a:	3301      	adds	r3, #1
 800f71c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f722:	7a9b      	ldrb	r3, [r3, #10]
 800f724:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f728:	429a      	cmp	r2, r3
 800f72a:	d3c5      	bcc.n	800f6b8 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f72c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800f730:	4618      	mov	r0, r3
 800f732:	3740      	adds	r7, #64	; 0x40
 800f734:	46bd      	mov	sp, r7
 800f736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f73a <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f73a:	b480      	push	{r7}
 800f73c:	b085      	sub	sp, #20
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f742:	2300      	movs	r3, #0
 800f744:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800f746:	2300      	movs	r3, #0
 800f748:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800f75a:	2300      	movs	r3, #0
 800f75c:	73fb      	strb	r3, [r7, #15]
 800f75e:	e02d      	b.n	800f7bc <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800f760:	7bfb      	ldrb	r3, [r7, #15]
 800f762:	3301      	adds	r3, #1
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	78d2      	ldrb	r2, [r2, #3]
 800f768:	fb93 f1f2 	sdiv	r1, r3, r2
 800f76c:	fb01 f202 	mul.w	r2, r1, r2
 800f770:	1a9b      	subs	r3, r3, r2
 800f772:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	789b      	ldrb	r3, [r3, #2]
 800f778:	7bfa      	ldrb	r2, [r7, #15]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d21b      	bcs.n	800f7b6 <VL53L1_f_019+0x7c>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	789b      	ldrb	r3, [r3, #2]
 800f782:	7b3a      	ldrb	r2, [r7, #12]
 800f784:	429a      	cmp	r2, r3
 800f786:	d216      	bcs.n	800f7b6 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f788:	7bfb      	ldrb	r3, [r7, #15]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	4413      	add	r3, r2
 800f78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10f      	bne.n	800f7b6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800f796:	7b3b      	ldrb	r3, [r7, #12]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	4413      	add	r3, r2
 800f79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d108      	bne.n	800f7b6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800f7a4:	7bbb      	ldrb	r3, [r7, #14]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d105      	bne.n	800f7b6 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7bfa      	ldrb	r2, [r7, #15]
 800f7ae:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800f7b6:	7bfb      	ldrb	r3, [r7, #15]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	73fb      	strb	r3, [r7, #15]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	78db      	ldrb	r3, [r3, #3]
 800f7c0:	7bfa      	ldrb	r2, [r7, #15]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d3cc      	bcc.n	800f760 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f7c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3714      	adds	r7, #20
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b085      	sub	sp, #20
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f7f4:	73fb      	strb	r3, [r7, #15]
 800f7f6:	e05a      	b.n	800f8ae <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	78da      	ldrb	r2, [r3, #3]
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
 800f7fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800f802:	fb01 f202 	mul.w	r2, r1, r2
 800f806:	1a9b      	subs	r3, r3, r2
 800f808:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800f80a:	7bfb      	ldrb	r3, [r7, #15]
 800f80c:	3301      	adds	r3, #1
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	78d2      	ldrb	r2, [r2, #3]
 800f812:	fb93 f1f2 	sdiv	r1, r3, r2
 800f816:	fb01 f202 	mul.w	r2, r1, r2
 800f81a:	1a9b      	subs	r3, r3, r2
 800f81c:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	789b      	ldrb	r3, [r3, #2]
 800f822:	7b7a      	ldrb	r2, [r7, #13]
 800f824:	429a      	cmp	r2, r3
 800f826:	d23f      	bcs.n	800f8a8 <VL53L1_f_020+0xd2>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	789b      	ldrb	r3, [r3, #2]
 800f82c:	7b3a      	ldrb	r2, [r7, #12]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d23a      	bcs.n	800f8a8 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800f832:	7b7b      	ldrb	r3, [r7, #13]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	4413      	add	r3, r2
 800f838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10e      	bne.n	800f85e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800f840:	7b3b      	ldrb	r3, [r7, #12]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	4413      	add	r3, r2
 800f846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d107      	bne.n	800f85e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800f854:	3301      	adds	r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d905      	bls.n	800f87a <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800f87a:	7b7b      	ldrb	r3, [r7, #13]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	4413      	add	r3, r2
 800f880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f884:	2b00      	cmp	r3, #0
 800f886:	d009      	beq.n	800f89c <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800f888:	7b7b      	ldrb	r3, [r7, #13]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	4413      	add	r3, r2
 800f894:	460a      	mov	r2, r1
 800f896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f89a:	e005      	b.n	800f8a8 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800f89c:	7b7b      	ldrb	r3, [r7, #13]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800f8a8:	7bfb      	ldrb	r3, [r7, #15]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800f8ae:	7bfa      	ldrb	r2, [r7, #15]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f8b6:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800f8bc:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	db9a      	blt.n	800f7f8 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800f8c2:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr

0800f8d2 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b087      	sub	sp, #28
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	78db      	ldrb	r3, [r3, #3]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800f8fa:	7cbb      	ldrb	r3, [r7, #18]
 800f8fc:	085b      	lsrs	r3, r3, #1
 800f8fe:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f906:	75fb      	strb	r3, [r7, #23]
 800f908:	e0a2      	b.n	800fa50 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	78da      	ldrb	r2, [r3, #3]
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
 800f910:	fbb3 f1f2 	udiv	r1, r3, r2
 800f914:	fb01 f202 	mul.w	r2, r1, r2
 800f918:	1a9b      	subs	r3, r3, r2
 800f91a:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
 800f91e:	3301      	adds	r3, #1
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	78d2      	ldrb	r2, [r2, #3]
 800f924:	fb93 f1f2 	sdiv	r1, r3, r2
 800f928:	fb01 f202 	mul.w	r2, r1, r2
 800f92c:	1a9b      	subs	r3, r3, r2
 800f92e:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	789b      	ldrb	r3, [r3, #2]
 800f934:	7d7a      	ldrb	r2, [r7, #21]
 800f936:	429a      	cmp	r2, r3
 800f938:	f080 8087 	bcs.w	800fa4a <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800f940:	7d3a      	ldrb	r2, [r7, #20]
 800f942:	429a      	cmp	r2, r3
 800f944:	f080 8081 	bcs.w	800fa4a <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800f948:	7d7b      	ldrb	r3, [r7, #21]
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	4413      	add	r3, r2
 800f94e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f952:	2b00      	cmp	r3, #0
 800f954:	d12f      	bne.n	800f9b6 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800f956:	7d3b      	ldrb	r3, [r7, #20]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	4413      	add	r3, r2
 800f95c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800f960:	2b00      	cmp	r3, #0
 800f962:	d028      	beq.n	800f9b6 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800f964:	7d3b      	ldrb	r3, [r7, #20]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	4413      	add	r3, r2
 800f96a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f96e:	3b01      	subs	r3, #1
 800f970:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800f978:	7cfa      	ldrb	r2, [r7, #19]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d21b      	bcs.n	800f9b6 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800f97e:	7cfa      	ldrb	r2, [r7, #19]
 800f980:	4613      	mov	r3, r2
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	4413      	add	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	4413      	add	r3, r2
 800f990:	3304      	adds	r3, #4
 800f992:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	7dfa      	ldrb	r2, [r7, #23]
 800f998:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	3301      	adds	r3, #1
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	22ff      	movs	r2, #255	; 0xff
 800f9a8:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800f9b6:	7d7b      	ldrb	r3, [r7, #21]
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d042      	beq.n	800fa4a <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800f9c4:	7d3b      	ldrb	r3, [r7, #20]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d13b      	bne.n	800fa4a <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800f9d2:	7d7b      	ldrb	r3, [r7, #21]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800f9e6:	7cfa      	ldrb	r2, [r7, #19]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d22e      	bcs.n	800fa4a <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800f9ec:	7cfa      	ldrb	r2, [r7, #19]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	00db      	lsls	r3, r3, #3
 800f9f2:	4413      	add	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	3304      	adds	r3, #4
 800fa00:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	7dfa      	ldrb	r2, [r7, #23]
 800fa06:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800fa08:	7dfb      	ldrb	r3, [r7, #23]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	3301      	adds	r3, #1
 800fa20:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	3301      	adds	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	799b      	ldrb	r3, [r3, #6]
 800fa3e:	7cba      	ldrb	r2, [r7, #18]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d202      	bcs.n	800fa4a <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	7cba      	ldrb	r2, [r7, #18]
 800fa48:	719a      	strb	r2, [r3, #6]
		blb++) {
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800fa50:	7dfa      	ldrb	r2, [r7, #23]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fa58:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800fa5e:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800fa60:	429a      	cmp	r2, r3
 800fa62:	f6ff af52 	blt.w	800f90a <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fa66:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	371c      	adds	r7, #28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr

0800fa76 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b090      	sub	sp, #64	; 0x40
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	6039      	str	r1, [r7, #0]
 800fa80:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fa82:	2300      	movs	r3, #0
 800fa84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800fa88:	f107 030c 	add.w	r3, r7, #12
 800fa8c:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800fa94:	2301      	movs	r3, #1
 800fa96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d965      	bls.n	800fb70 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800faa4:	e05f      	b.n	800fb66 <VL53L1_f_028+0xf0>

		swapped = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800faac:	2301      	movs	r3, #1
 800faae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fab2:	e051      	b.n	800fb58 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 800fab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fab8:	1e5a      	subs	r2, r3, #1
 800faba:	4613      	mov	r3, r2
 800fabc:	00db      	lsls	r3, r3, #3
 800fabe:	4413      	add	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fac6:	683a      	ldr	r2, [r7, #0]
 800fac8:	4413      	add	r3, r2
 800faca:	3304      	adds	r3, #4
 800facc:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 800face:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fad2:	4613      	mov	r3, r2
 800fad4:	00db      	lsls	r3, r3, #3
 800fad6:	4413      	add	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	4413      	add	r3, r2
 800fae2:	3304      	adds	r3, #4
 800fae4:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800fae6:	79fb      	ldrb	r3, [r7, #7]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d118      	bne.n	800fb1e <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800faec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faee:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 800faf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf2:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 800faf4:	429a      	cmp	r2, r3
 800faf6:	da2a      	bge.n	800fb4e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800faf8:	2224      	movs	r2, #36	; 0x24
 800fafa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fafc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fafe:	f009 fb8d 	bl	801921c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fb02:	2224      	movs	r2, #36	; 0x24
 800fb04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb08:	f009 fb88 	bl	801921c <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fb0c:	2224      	movs	r2, #36	; 0x24
 800fb0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb12:	f009 fb83 	bl	801921c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fb1c:	e017      	b.n	800fb4e <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 800fb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb20:	699a      	ldr	r2, [r3, #24]
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d911      	bls.n	800fb4e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800fb2a:	2224      	movs	r2, #36	; 0x24
 800fb2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb30:	f009 fb74 	bl	801921c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fb34:	2224      	movs	r2, #36	; 0x24
 800fb36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb3a:	f009 fb6f 	bl	801921c <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fb3e:	2224      	movs	r2, #36	; 0x24
 800fb40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb44:	f009 fb6a 	bl	801921c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800fb4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb52:	3301      	adds	r3, #1
 800fb54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fb5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d3a6      	bcc.n	800fab4 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 800fb66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d19b      	bne.n	800faa6 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 800fb6e:	e000      	b.n	800fb72 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 800fb70:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800fb72:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3740      	adds	r7, #64	; 0x40
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b087      	sub	sp, #28
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	4603      	mov	r3, r0
 800fb86:	60b9      	str	r1, [r7, #8]
 800fb88:	607a      	str	r2, [r7, #4]
 800fb8a:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800fb94:	2300      	movs	r3, #0
 800fb96:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fb98:	7bfa      	ldrb	r2, [r7, #15]
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	4413      	add	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	4413      	add	r3, r2
 800fbaa:	3304      	adds	r3, #4
 800fbac:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	75fb      	strb	r3, [r7, #23]
 800fbc0:	e01c      	b.n	800fbfc <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	78da      	ldrb	r2, [r3, #3]
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
 800fbc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbcc:	fb01 f202 	mul.w	r2, r1, r2
 800fbd0:	1a9b      	subs	r3, r3, r2
 800fbd2:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	68da      	ldr	r2, [r3, #12]
 800fbd8:	7d79      	ldrb	r1, [r7, #21]
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	3106      	adds	r1, #6
 800fbde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	689a      	ldr	r2, [r3, #8]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	441a      	add	r2, r3
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	75fb      	strb	r3, [r7, #23]
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	791b      	ldrb	r3, [r3, #4]
 800fc00:	7dfa      	ldrb	r2, [r7, #23]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d9dd      	bls.n	800fbc2 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	68da      	ldr	r2, [r3, #12]
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800fc14:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	371c      	adds	r7, #28
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fc24:	b590      	push	{r4, r7, lr}
 800fc26:	b08d      	sub	sp, #52	; 0x34
 800fc28:	af02      	add	r7, sp, #8
 800fc2a:	60ba      	str	r2, [r7, #8]
 800fc2c:	607b      	str	r3, [r7, #4]
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
 800fc32:	460b      	mov	r3, r1
 800fc34:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fc52:	7bfa      	ldrb	r2, [r7, #15]
 800fc54:	4613      	mov	r3, r2
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	4413      	add	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	3304      	adds	r3, #4
 800fc66:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	789b      	ldrb	r3, [r3, #2]
 800fc6c:	2bff      	cmp	r3, #255	; 0xff
 800fc6e:	d102      	bne.n	800fc76 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	2201      	movs	r2, #1
 800fc74:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	789b      	ldrb	r3, [r3, #2]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	78d2      	ldrb	r2, [r2, #3]
 800fc7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc82:	fb01 f202 	mul.w	r2, r1, r2
 800fc86:	1a9b      	subs	r3, r3, r2
 800fc88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 800fc8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc90:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	8c3b      	ldrh	r3, [r7, #32]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 800fca0:	8c3a      	ldrh	r2, [r7, #32]
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	789b      	ldrb	r3, [r3, #2]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 800fcae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fcb2:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	791b      	ldrb	r3, [r3, #4]
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	8bfb      	ldrh	r3, [r7, #30]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 800fcc2:	8bfa      	ldrh	r2, [r7, #30]
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	789b      	ldrb	r3, [r3, #2]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 800fcd0:	8bfa      	ldrh	r2, [r7, #30]
 800fcd2:	8c3b      	ldrh	r3, [r7, #32]
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800fcda:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fcde:	2b03      	cmp	r3, #3
 800fce0:	dd01      	ble.n	800fce6 <VL53L1_f_027+0xc2>
		window_width = 3;
 800fce2:	2303      	movs	r3, #3
 800fce4:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 800fce6:	8c3a      	ldrh	r2, [r7, #32]
 800fce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcea:	4413      	add	r3, r2
 800fcec:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 800fcee:	b219      	sxth	r1, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	78da      	ldrb	r2, [r3, #3]
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	3314      	adds	r3, #20
 800fcf8:	7bbc      	ldrb	r4, [r7, #14]
 800fcfa:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	4623      	mov	r3, r4
 800fd06:	f000 f846 	bl	800fd96 <VL53L1_f_030>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 800fd10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d114      	bne.n	800fd42 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 800fd18:	8bfa      	ldrh	r2, [r7, #30]
 800fd1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 800fd20:	b218      	sxth	r0, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	78da      	ldrb	r2, [r3, #3]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	331c      	adds	r3, #28
 800fd2a:	7bbc      	ldrb	r4, [r7, #14]
 800fd2c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	4623      	mov	r3, r4
 800fd38:	f000 f82d 	bl	800fd96 <VL53L1_f_030>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	695a      	ldr	r2, [r3, #20]
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d909      	bls.n	800fd62 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	69da      	ldr	r2, [r3, #28]
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	69ba      	ldr	r2, [r7, #24]
 800fd60:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	699a      	ldr	r2, [r3, #24]
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d203      	bcs.n	800fd76 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	699a      	ldr	r2, [r3, #24]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	699a      	ldr	r2, [r3, #24]
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	69db      	ldr	r3, [r3, #28]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d903      	bls.n	800fd8a <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	699a      	ldr	r2, [r3, #24]
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800fd8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	372c      	adds	r7, #44	; 0x2c
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd90      	pop	{r4, r7, pc}

0800fd96 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800fd96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9a:	b09d      	sub	sp, #116	; 0x74
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	461c      	mov	r4, r3
 800fda0:	4603      	mov	r3, r0
 800fda2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800fda6:	460b      	mov	r3, r1
 800fda8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fdac:	4613      	mov	r3, r2
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdb2:	4623      	mov	r3, r4
 800fdb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 800fdca:	f04f 0200 	mov.w	r2, #0
 800fdce:	f04f 0300 	mov.w	r3, #0
 800fdd2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 800fdd6:	f04f 0200 	mov.w	r2, #0
 800fdda:	f04f 0300 	mov.w	r3, #0
 800fdde:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 800fde2:	f04f 0200 	mov.w	r2, #0
 800fde6:	f04f 0300 	mov.w	r3, #0
 800fdea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 800fdee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fdf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdf6:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 800fdf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 809c 	beq.w	800ff3a <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800fe02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800fe0a:	e08f      	b.n	800ff2c <VL53L1_f_030+0x196>

		if (lb < 0)
 800fe0c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	da09      	bge.n	800fe28 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 800fe14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fe1e:	4413      	add	r3, r2
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800fe26:	e00a      	b.n	800fe3e <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 800fe28:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 800fe2c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800fe30:	fb91 f3f2 	sdiv	r3, r1, r2
 800fe34:	fb02 f303 	mul.w	r3, r2, r3
 800fe38:	1acb      	subs	r3, r1, r3
 800fe3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 800fe3e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	db6b      	blt.n	800ff1e <VL53L1_f_030+0x188>
 800fe46:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fe4a:	2b17      	cmp	r3, #23
 800fe4c:	dc67      	bgt.n	800ff1e <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 800fe4e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fe52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fe56:	3306      	adds	r3, #6
 800fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5c:	17da      	asrs	r2, r3, #31
 800fe5e:	633b      	str	r3, [r7, #48]	; 0x30
 800fe60:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 800fe62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fe66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe6a:	17da      	asrs	r2, r3, #31
 800fe6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe6e:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 800fe70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fe76:	4602      	mov	r2, r0
 800fe78:	1a9b      	subs	r3, r3, r2
 800fe7a:	623b      	str	r3, [r7, #32]
 800fe7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7e:	460a      	mov	r2, r1
 800fe80:	eb63 0302 	sbc.w	r3, r3, r2
 800fe84:	627b      	str	r3, [r7, #36]	; 0x24
 800fe86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800fe8a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 800fe8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d009      	beq.n	800feaa <VL53L1_f_030+0x114>
 800fe96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	da05      	bge.n	800feaa <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	f04f 0300 	mov.w	r3, #0
 800fea6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 800feaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800feae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800feb2:	1884      	adds	r4, r0, r2
 800feb4:	61bc      	str	r4, [r7, #24]
 800feb6:	eb41 0303 	adc.w	r3, r1, r3
 800feba:	61fb      	str	r3, [r7, #28]
 800febc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fec0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 800fec4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fec8:	17da      	asrs	r2, r3, #31
 800feca:	63bb      	str	r3, [r7, #56]	; 0x38
 800fecc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fece:	f04f 0200 	mov.w	r2, #0
 800fed2:	f04f 0300 	mov.w	r3, #0
 800fed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fed8:	02cb      	lsls	r3, r1, #11
 800feda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fedc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800fee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fee2:	02ca      	lsls	r2, r1, #11
 800fee4:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 800fee8:	f143 0600 	adc.w	r6, r3, #0
 800feec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800feee:	fb06 f203 	mul.w	r2, r6, r3
 800fef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fef4:	fb05 f303 	mul.w	r3, r5, r3
 800fef8:	441a      	add	r2, r3
 800fefa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fefc:	fba3 ab05 	umull	sl, fp, r3, r5
 800ff00:	eb02 030b 	add.w	r3, r2, fp
 800ff04:	469b      	mov	fp, r3
			weighted_sum +=
 800ff06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ff0a:	eb12 010a 	adds.w	r1, r2, sl
 800ff0e:	6139      	str	r1, [r7, #16]
 800ff10:	eb43 030b 	adc.w	r3, r3, fp
 800ff14:	617b      	str	r3, [r7, #20]
 800ff16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ff1a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800ff1e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	3301      	adds	r3, #1
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ff2c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800ff30:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ff34:	429a      	cmp	r2, r3
 800ff36:	f77f af69 	ble.w	800fe0c <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800ff3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ff3e:	2a01      	cmp	r2, #1
 800ff40:	f173 0300 	sbcs.w	r3, r3, #0
 800ff44:	db3b      	blt.n	800ffbe <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800ff46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ff4a:	0fd9      	lsrs	r1, r3, #31
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ff56:	4621      	mov	r1, r4
 800ff58:	eb11 0802 	adds.w	r8, r1, r2
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	eb41 0903 	adc.w	r9, r1, r3
 800ff62:	f04f 0200 	mov.w	r2, #0
 800ff66:	f04f 0300 	mov.w	r3, #0
 800ff6a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800ff6e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800ff72:	ea4f 0369 	mov.w	r3, r9, asr #1
 800ff76:	4610      	mov	r0, r2
 800ff78:	4619      	mov	r1, r3
 800ff7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ff7e:	1814      	adds	r4, r2, r0
 800ff80:	603c      	str	r4, [r7, #0]
 800ff82:	414b      	adcs	r3, r1
 800ff84:	607b      	str	r3, [r7, #4]
 800ff86:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ff8a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800ff8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ff92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ff96:	f7f0 f943 	bl	8000220 <__aeabi_ldivmod>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 800ffa2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	da05      	bge.n	800ffb6 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 800ffaa:	f04f 0200 	mov.w	r2, #0
 800ffae:	f04f 0300 	mov.w	r3, #0
 800ffb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 800ffb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffbc:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ffbe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3774      	adds	r7, #116	; 0x74
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffcc <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b086      	sub	sp, #24
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60b9      	str	r1, [r7, #8]
 800ffd4:	607a      	str	r2, [r7, #4]
 800ffd6:	603b      	str	r3, [r7, #0]
 800ffd8:	4603      	mov	r3, r0
 800ffda:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800ffe8:	7bfa      	ldrb	r2, [r7, #15]
 800ffea:	4613      	mov	r3, r2
 800ffec:	00db      	lsls	r3, r3, #3
 800ffee:	4413      	add	r3, r2
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	3304      	adds	r3, #4
 800fffc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 800fffe:	22ac      	movs	r2, #172	; 0xac
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	6a38      	ldr	r0, [r7, #32]
 8010004:	f009 f90a 	bl	801921c <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801000e:	75fb      	strb	r3, [r7, #23]
 8010010:	e020      	b.n	8010054 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	7dfa      	ldrb	r2, [r7, #23]
 8010018:	429a      	cmp	r2, r3
 801001a:	d304      	bcc.n	8010026 <VL53L1_f_023+0x5a>
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	791b      	ldrb	r3, [r3, #4]
 8010020:	7dfa      	ldrb	r2, [r7, #23]
 8010022:	429a      	cmp	r2, r3
 8010024:	d913      	bls.n	801004e <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	78da      	ldrb	r2, [r3, #3]
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010030:	fb01 f202 	mul.w	r2, r1, r2
 8010034:	1a9b      	subs	r3, r3, r2
 8010036:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010038:	6a3b      	ldr	r3, [r7, #32]
 801003a:	7a9b      	ldrb	r3, [r3, #10]
 801003c:	7d7a      	ldrb	r2, [r7, #21]
 801003e:	429a      	cmp	r2, r3
 8010040:	d205      	bcs.n	801004e <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010042:	7d7a      	ldrb	r2, [r7, #21]
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	3206      	adds	r2, #6
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	3301      	adds	r3, #1
 8010052:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010054:	7dfa      	ldrb	r2, [r7, #23]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801005c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010062:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010064:	429a      	cmp	r2, r3
 8010066:	dbd4      	blt.n	8010012 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010068:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3718      	adds	r7, #24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010078:	b096      	sub	sp, #88	; 0x58
 801007a:	af08      	add	r7, sp, #32
 801007c:	4604      	mov	r4, r0
 801007e:	4608      	mov	r0, r1
 8010080:	4611      	mov	r1, r2
 8010082:	461a      	mov	r2, r3
 8010084:	4623      	mov	r3, r4
 8010086:	73fb      	strb	r3, [r7, #15]
 8010088:	4603      	mov	r3, r0
 801008a:	73bb      	strb	r3, [r7, #14]
 801008c:	460b      	mov	r3, r1
 801008e:	737b      	strb	r3, [r7, #13]
 8010090:	4613      	mov	r3, r2
 8010092:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010094:	2300      	movs	r3, #0
 8010096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801009a:	2300      	movs	r3, #0
 801009c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80100c6:	7b7b      	ldrb	r3, [r7, #13]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80100cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100d2:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80100d4:	f06f 030e 	mvn.w	r3, #14
 80100d8:	e06f      	b.n	80101ba <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80100da:	7bfb      	ldrb	r3, [r7, #15]
 80100dc:	7b7a      	ldrb	r2, [r7, #13]
 80100de:	fbb3 f1f2 	udiv	r1, r3, r2
 80100e2:	fb01 f202 	mul.w	r2, r1, r2
 80100e6:	1a9b      	subs	r3, r3, r2
 80100e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80100ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80100f0:	7b39      	ldrb	r1, [r7, #12]
 80100f2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80100f6:	f107 0320 	add.w	r3, r7, #32
 80100fa:	9301      	str	r3, [sp, #4]
 80100fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	4613      	mov	r3, r2
 8010104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010106:	f000 fddb 	bl	8010cc0 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801010a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801010e:	7b39      	ldrb	r1, [r7, #12]
 8010110:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	4613      	mov	r3, r2
 8010122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010124:	f000 fdcc 	bl	8010cc0 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010128:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00e      	beq.n	801014e <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010130:	f107 021c 	add.w	r2, r7, #28
 8010134:	7b39      	ldrb	r1, [r7, #12]
 8010136:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801013a:	f107 0314 	add.w	r3, r7, #20
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	f107 0318 	add.w	r3, r7, #24
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	4613      	mov	r3, r2
 8010148:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801014a:	f000 fdb9 	bl	8010cc0 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	469c      	mov	ip, r3
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	469e      	mov	lr, r3
 8010156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010158:	4698      	mov	r8, r3
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	4619      	mov	r1, r3
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	461c      	mov	r4, r3
 8010162:	69bb      	ldr	r3, [r7, #24]
 8010164:	461d      	mov	r5, r3
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	461e      	mov	r6, r3
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 801016e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010174:	607b      	str	r3, [r7, #4]
 8010176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010178:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801017c:	7bb8      	ldrb	r0, [r7, #14]
 801017e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010180:	9207      	str	r2, [sp, #28]
 8010182:	9306      	str	r3, [sp, #24]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	9205      	str	r2, [sp, #20]
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	9304      	str	r3, [sp, #16]
 801018c:	9603      	str	r6, [sp, #12]
 801018e:	9502      	str	r5, [sp, #8]
 8010190:	9401      	str	r4, [sp, #4]
 8010192:	9100      	str	r1, [sp, #0]
 8010194:	4643      	mov	r3, r8
 8010196:	4672      	mov	r2, lr
 8010198:	4661      	mov	r1, ip
 801019a:	f002 ff30 	bl	8012ffe <VL53L1_f_014>
 801019e:	4603      	mov	r3, r0
 80101a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80101a4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80101a8:	f113 0f0f 	cmn.w	r3, #15
 80101ac:	d103      	bne.n	80101b6 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80101ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101b4:	801a      	strh	r2, [r3, #0]


	return status;
 80101b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3738      	adds	r7, #56	; 0x38
 80101be:	46bd      	mov	sp, r7
 80101c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101c4 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80101c4:	b490      	push	{r4, r7}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	4611      	mov	r1, r2
 80101d0:	461a      	mov	r2, r3
 80101d2:	4623      	mov	r3, r4
 80101d4:	71fb      	strb	r3, [r7, #7]
 80101d6:	4603      	mov	r3, r0
 80101d8:	71bb      	strb	r3, [r7, #6]
 80101da:	460b      	mov	r3, r1
 80101dc:	717b      	strb	r3, [r7, #5]
 80101de:	4613      	mov	r3, r2
 80101e0:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80101ea:	6a3b      	ldr	r3, [r7, #32]
 80101ec:	79fa      	ldrb	r2, [r7, #7]
 80101ee:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	2200      	movs	r2, #0
 80101f4:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	781a      	ldrb	r2, [r3, #0]
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	785a      	ldrb	r2, [r3, #1]
 8010202:	6a3b      	ldr	r3, [r7, #32]
 8010204:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	789a      	ldrb	r2, [r3, #2]
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	78da      	ldrb	r2, [r3, #3]
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	791a      	ldrb	r2, [r3, #4]
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	795a      	ldrb	r2, [r3, #5]
 8010222:	6a3b      	ldr	r3, [r7, #32]
 8010224:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	791a      	ldrb	r2, [r3, #4]
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	b2db      	uxtb	r3, r3
 8010232:	3301      	adds	r3, #1
 8010234:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010236:	6a3b      	ldr	r3, [r7, #32]
 8010238:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	8c1a      	ldrh	r2, [r3, #32]
 8010248:	6a3b      	ldr	r3, [r7, #32]
 801024a:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	695b      	ldr	r3, [r3, #20]
 8010250:	b29a      	uxth	r2, r3
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	699b      	ldr	r3, [r3, #24]
 801025a:	b29a      	uxth	r2, r3
 801025c:	6a3b      	ldr	r3, [r7, #32]
 801025e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	69db      	ldr	r3, [r3, #28]
 8010266:	b29a      	uxth	r2, r3
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	461a      	mov	r2, r3
 8010274:	6a3b      	ldr	r3, [r7, #32]
 8010276:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	691a      	ldr	r2, [r3, #16]
 801027c:	6a3b      	ldr	r3, [r7, #32]
 801027e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	461a      	mov	r2, r3
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010290:	6a3b      	ldr	r3, [r7, #32]
 8010292:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	2213      	movs	r2, #19
 8010298:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 801029c:	887b      	ldrh	r3, [r7, #2]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00a      	beq.n	80102b8 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	8c1b      	ldrh	r3, [r3, #32]
 80102a6:	461a      	mov	r2, r3
 80102a8:	887b      	ldrh	r3, [r7, #2]
 80102aa:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d903      	bls.n	80102b8 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80102b0:	6a3b      	ldr	r3, [r7, #32]
 80102b2:	2206      	movs	r2, #6
 80102b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80102b8:	79bb      	ldrb	r3, [r7, #6]
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	021b      	lsls	r3, r3, #8
 80102be:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	8a9b      	ldrh	r3, [r3, #20]
 80102c4:	89fa      	ldrh	r2, [r7, #14]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d205      	bcs.n	80102d6 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80102ce:	89fb      	ldrh	r3, [r7, #14]
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	81fb      	strh	r3, [r7, #14]
 80102d4:	e001      	b.n	80102da <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80102da:	797b      	ldrb	r3, [r7, #5]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	021b      	lsls	r3, r3, #8
 80102e0:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80102e8:	89bb      	ldrh	r3, [r7, #12]
 80102ea:	4413      	add	r3, r2
 80102ec:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80102f4:	89fa      	ldrh	r2, [r7, #14]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d805      	bhi.n	8010306 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80102fa:	6a3b      	ldr	r3, [r7, #32]
 80102fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8010300:	89ba      	ldrh	r2, [r7, #12]
 8010302:	429a      	cmp	r2, r3
 8010304:	d203      	bcs.n	801030e <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	2205      	movs	r2, #5
 801030a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801030e:	bf00      	nop
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bc90      	pop	{r4, r7}
 8010316:	4770      	bx	lr

08010318 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801031a:	b08f      	sub	sp, #60	; 0x3c
 801031c:	af06      	add	r7, sp, #24
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010326:	2300      	movs	r3, #0
 8010328:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801032e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010330:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010334:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010336:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010338:	f7ff f856 	bl	800f3e8 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 801033c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801033e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010342:	22ac      	movs	r2, #172	; 0xac
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f008 ff68 	bl	801921c <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	781a      	ldrb	r2, [r3, #0]
 8010350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010352:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	785a      	ldrb	r2, [r3, #1]
 8010358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801035a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	789a      	ldrb	r2, [r3, #2]
 8010360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010362:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801036a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801036c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 801036e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010370:	2200      	movs	r2, #0
 8010372:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010376:	2204      	movs	r2, #4
 8010378:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 801037a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801037c:	2200      	movs	r2, #0
 801037e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010380:	2300      	movs	r3, #0
 8010382:	77bb      	strb	r3, [r7, #30]
 8010384:	e008      	b.n	8010398 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8010386:	7fbb      	ldrb	r3, [r7, #30]
 8010388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4413      	add	r3, r2
 801038e:	2200      	movs	r2, #0
 8010390:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010392:	7fbb      	ldrb	r3, [r7, #30]
 8010394:	3301      	adds	r3, #1
 8010396:	77bb      	strb	r3, [r7, #30]
 8010398:	7fbb      	ldrb	r3, [r7, #30]
 801039a:	2b04      	cmp	r3, #4
 801039c:	d9f3      	bls.n	8010386 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 801039e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fd ff58 	bl	800e25a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 80103ae:	461a      	mov	r2, r3
 80103b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80103b6:	4619      	mov	r1, r3
 80103b8:	4610      	mov	r0, r2
 80103ba:	f7fd ff8e 	bl	800e2da <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80103be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe fb66 	bl	800ea96 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80103ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103cc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fd fffc 	bl	800e3ce <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d009      	beq.n	80103f4 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 80103e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80103e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80103ec:	461a      	mov	r2, r3
 80103ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103f0:	f000 fdae 	bl	8010f50 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80103fc:	2300      	movs	r3, #0
 80103fe:	77bb      	strb	r3, [r7, #30]
 8010400:	e01e      	b.n	8010440 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8010402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d117      	bne.n	801043a <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 801040a:	7fbb      	ldrb	r3, [r7, #30]
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	3304      	adds	r3, #4
 8010410:	005b      	lsls	r3, r3, #1
 8010412:	4413      	add	r3, r2
 8010414:	8898      	ldrh	r0, [r3, #4]
 8010416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010418:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 801041c:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010422:	4413      	add	r3, r2
 8010424:	3304      	adds	r3, #4
 8010426:	9301      	str	r3, [sp, #4]
 8010428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	460b      	mov	r3, r1
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	68f9      	ldr	r1, [r7, #12]
 8010432:	f7fe fb7b 	bl	800eb2c <VL53L1_f_001>
 8010436:	4603      	mov	r3, r0
 8010438:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801043a:	7fbb      	ldrb	r3, [r7, #30]
 801043c:	3301      	adds	r3, #1
 801043e:	77bb      	strb	r3, [r7, #30]
 8010440:	7fbb      	ldrb	r3, [r7, #30]
 8010442:	2b04      	cmp	r3, #4
 8010444:	d9dd      	bls.n	8010402 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010446:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d11a      	bne.n	8010484 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010456:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010464:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801046a:	f502 7252 	add.w	r2, r2, #840	; 0x348
 801046e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010470:	9102      	str	r1, [sp, #8]
 8010472:	9201      	str	r2, [sp, #4]
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	462b      	mov	r3, r5
 8010478:	4622      	mov	r2, r4
 801047a:	4631      	mov	r1, r6
 801047c:	f7ff f82d 	bl	800f4da <VL53L1_f_018>
 8010480:	4603      	mov	r3, r0
 8010482:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010484:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d104      	bne.n	8010496 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 801048c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801048e:	f7ff f954 	bl	800f73a <VL53L1_f_019>
 8010492:	4603      	mov	r3, r0
 8010494:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010496:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d104      	bne.n	80104a8 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 801049e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104a0:	f7ff f999 	bl	800f7d6 <VL53L1_f_020>
 80104a4:	4603      	mov	r3, r0
 80104a6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80104a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d104      	bne.n	80104ba <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 80104b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104b2:	f7ff fa0e 	bl	800f8d2 <VL53L1_f_021>
 80104b6:	4603      	mov	r3, r0
 80104b8:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80104ba:	2300      	movs	r3, #0
 80104bc:	77bb      	strb	r3, [r7, #30]
 80104be:	e0a6      	b.n	801060e <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80104c0:	7fba      	ldrb	r2, [r7, #30]
 80104c2:	4613      	mov	r3, r2
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	4413      	add	r3, r2
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80104ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104d0:	4413      	add	r3, r2
 80104d2:	3304      	adds	r3, #4
 80104d4:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80104d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d109      	bne.n	80104f2 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 80104de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104e0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80104e4:	7fbb      	ldrb	r3, [r7, #30]
 80104e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fb48 	bl	800fb7e <VL53L1_f_022>
 80104ee:	4603      	mov	r3, r0
 80104f0:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 80104f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d110      	bne.n	801051c <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 80104fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104fc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010508:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801050c:	7fb8      	ldrb	r0, [r7, #30]
 801050e:	9300      	str	r3, [sp, #0]
 8010510:	4613      	mov	r3, r2
 8010512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010514:	f7ff fd5a 	bl	800ffcc <VL53L1_f_023>
 8010518:	4603      	mov	r3, r0
 801051a:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 801051c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10d      	bne.n	8010540 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010526:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801052a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801052c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010530:	7fb8      	ldrb	r0, [r7, #30]
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	2300      	movs	r3, #0
 8010536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010538:	f7ff fd48 	bl	800ffcc <VL53L1_f_023>
 801053c:	4603      	mov	r3, r0
 801053e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010540:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d10d      	bne.n	8010564 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054a:	f503 7152 	add.w	r1, r3, #840	; 0x348
 801054e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010550:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010554:	7fb8      	ldrb	r0, [r7, #30]
 8010556:	9300      	str	r3, [sp, #0]
 8010558:	2300      	movs	r3, #0
 801055a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801055c:	f7ff fd36 	bl	800ffcc <VL53L1_f_023>
 8010560:	4603      	mov	r3, r0
 8010562:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d109      	bne.n	8010580 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 801056c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056e:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010572:	7fb8      	ldrb	r0, [r7, #30]
 8010574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010578:	f000 f8dd 	bl	8010736 <VL53L1_f_034>
 801057c:	4603      	mov	r3, r0
 801057e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d108      	bne.n	801059a <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8a19      	ldrh	r1, [r3, #16]
 801058c:	7fb8      	ldrb	r0, [r7, #30]
 801058e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010592:	f000 f95c 	bl	801084e <VL53L1_f_035>
 8010596:	4603      	mov	r3, r0
 8010598:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 801059a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d124      	bne.n	80105ec <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	789d      	ldrb	r5, [r3, #2]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	7e1e      	ldrb	r6, [r3, #24]
 80105aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ac:	f893 c003 	ldrb.w	ip, [r3, #3]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	f893 e006 	ldrb.w	lr, [r3, #6]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105be:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80105c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105c4:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80105c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105ca:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 80105ce:	697c      	ldr	r4, [r7, #20]
 80105d0:	3420      	adds	r4, #32
 80105d2:	9404      	str	r4, [sp, #16]
 80105d4:	9003      	str	r0, [sp, #12]
 80105d6:	9102      	str	r1, [sp, #8]
 80105d8:	9201      	str	r2, [sp, #4]
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	4673      	mov	r3, lr
 80105de:	4662      	mov	r2, ip
 80105e0:	4631      	mov	r1, r6
 80105e2:	4628      	mov	r0, r5
 80105e4:	f7ff fd46 	bl	8010074 <VL53L1_f_026>
 80105e8:	4603      	mov	r3, r0
 80105ea:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 80105ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d109      	bne.n	8010608 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 80105f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105f6:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80105fa:	7fb8      	ldrb	r0, [r7, #30]
 80105fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105fe:	2101      	movs	r1, #1
 8010600:	f7ff fb10 	bl	800fc24 <VL53L1_f_027>
 8010604:	4603      	mov	r3, r0
 8010606:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010608:	7fbb      	ldrb	r3, [r7, #30]
 801060a:	3301      	adds	r3, #1
 801060c:	77bb      	strb	r3, [r7, #30]
 801060e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010610:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010614:	7fba      	ldrb	r2, [r7, #30]
 8010616:	429a      	cmp	r2, r3
 8010618:	f4ff af52 	bcc.w	80104c0 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 801061c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d107      	bne.n	8010634 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	785b      	ldrb	r3, [r3, #1]
 8010628:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff fa23 	bl	800fa76 <VL53L1_f_028>
 8010630:	4603      	mov	r3, r0
 8010632:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010634:	2300      	movs	r3, #0
 8010636:	77bb      	strb	r3, [r7, #30]
 8010638:	e071      	b.n	801071e <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 801063a:	7fba      	ldrb	r2, [r7, #30]
 801063c:	4613      	mov	r3, r2
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	4413      	add	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801064a:	4413      	add	r3, r2
 801064c:	3304      	adds	r3, #4
 801064e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010652:	7c9a      	ldrb	r2, [r3, #18]
 8010654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010656:	7c5b      	ldrb	r3, [r3, #17]
 8010658:	429a      	cmp	r2, r3
 801065a:	d25c      	bcs.n	8010716 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010664:	429a      	cmp	r2, r3
 8010666:	dd57      	ble.n	8010718 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 801066c:	2bff      	cmp	r3, #255	; 0xff
 801066e:	d053      	beq.n	8010718 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010672:	7c9b      	ldrb	r3, [r3, #18]
 8010674:	461a      	mov	r2, r3
			prange_data =
 8010676:	234c      	movs	r3, #76	; 0x4c
 8010678:	fb02 f303 	mul.w	r3, r2, r3
 801067c:	3310      	adds	r3, #16
 801067e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010680:	4413      	add	r3, r2
 8010682:	3304      	adds	r3, #4
 8010684:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d115      	bne.n	80106ba <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 801068e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010690:	7c98      	ldrb	r0, [r3, #18]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	8b5d      	ldrh	r5, [r3, #26]
 80106a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80106a8:	693a      	ldr	r2, [r7, #16]
 80106aa:	9202      	str	r2, [sp, #8]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	9201      	str	r2, [sp, #4]
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	462b      	mov	r3, r5
 80106b4:	4622      	mov	r2, r4
 80106b6:	f7ff fd85 	bl	80101c4 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 80106ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d115      	bne.n	80106ee <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 80106da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	4623      	mov	r3, r4
 80106e6:	f000 fb44 	bl	8010d72 <VL53L1_f_011>
 80106ea:	4603      	mov	r3, r0
 80106ec:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 80106ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d108      	bne.n	8010708 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	8bd8      	ldrh	r0, [r3, #30]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	4619      	mov	r1, r3
 8010704:	f000 fbda 	bl	8010ebc <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801070a:	7c9b      	ldrb	r3, [r3, #18]
 801070c:	3301      	adds	r3, #1
 801070e:	b2da      	uxtb	r2, r3
 8010710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010712:	749a      	strb	r2, [r3, #18]
 8010714:	e000      	b.n	8010718 <VL53L1_f_033+0x400>
			continue;
 8010716:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010718:	7fbb      	ldrb	r3, [r7, #30]
 801071a:	3301      	adds	r3, #1
 801071c:	77bb      	strb	r3, [r7, #30]
 801071e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010720:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010724:	7fba      	ldrb	r2, [r7, #30]
 8010726:	429a      	cmp	r2, r3
 8010728:	d387      	bcc.n	801063a <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 801072a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3724      	adds	r7, #36	; 0x24
 8010732:	46bd      	mov	sp, r7
 8010734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010736 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b08c      	sub	sp, #48	; 0x30
 801073a:	af02      	add	r7, sp, #8
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	603b      	str	r3, [r7, #0]
 8010742:	4603      	mov	r3, r0
 8010744:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010746:	2300      	movs	r3, #0
 8010748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 801074c:	7bfa      	ldrb	r2, [r7, #15]
 801074e:	4613      	mov	r3, r2
 8010750:	00db      	lsls	r3, r3, #3
 8010752:	4413      	add	r3, r2
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	4413      	add	r3, r2
 801075e:	3304      	adds	r3, #4
 8010760:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010768:	2300      	movs	r3, #0
 801076a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010770:	2300      	movs	r3, #0
 8010772:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	785a      	ldrb	r2, [r3, #1]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	781a      	ldrb	r2, [r3, #0]
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	789a      	ldrb	r2, [r3, #2]
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010790:	6a3b      	ldr	r3, [r7, #32]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010798:	e04d      	b.n	8010836 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	78da      	ldrb	r2, [r3, #3]
 801079e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80107a6:	fb01 f202 	mul.w	r2, r1, r2
 80107aa:	1a9b      	subs	r3, r3, r2
 80107ac:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 80107ae:	6a3b      	ldr	r3, [r7, #32]
 80107b0:	7999      	ldrb	r1, [r3, #6]
 80107b2:	f107 0218 	add.w	r2, r7, #24
 80107b6:	7ff8      	ldrb	r0, [r7, #31]
 80107b8:	f107 0310 	add.w	r3, r7, #16
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	f107 0314 	add.w	r3, r7, #20
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	4613      	mov	r3, r2
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	f000 fa7a 	bl	8010cc0 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 80107cc:	7ffb      	ldrb	r3, [r7, #31]
 80107ce:	69ba      	ldr	r2, [r7, #24]
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	440b      	add	r3, r1
 80107d6:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 80107d8:	7ffb      	ldrb	r3, [r7, #31]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	3318      	adds	r3, #24
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	440b      	add	r3, r1
 80107e4:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 80107e6:	7ffb      	ldrb	r3, [r7, #31]
 80107e8:	693a      	ldr	r2, [r7, #16]
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	3330      	adds	r3, #48	; 0x30
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	440b      	add	r3, r1
 80107f2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 80107f4:	69ba      	ldr	r2, [r7, #24]
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	689a      	ldr	r2, [r3, #8]
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010802:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010804:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	3348      	adds	r3, #72	; 0x48
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	440b      	add	r3, r1
 801080e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	689a      	ldr	r2, [r3, #8]
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 801081e:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010820:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	3360      	adds	r3, #96	; 0x60
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	440b      	add	r3, r1
 801082a:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801082c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010830:	3301      	adds	r3, #1
 8010832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	791b      	ldrb	r3, [r3, #4]
 801083a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801083e:	429a      	cmp	r2, r3
 8010840:	d9ab      	bls.n	801079a <VL53L1_f_034+0x64>
	}

	return status;
 8010842:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010846:	4618      	mov	r0, r3
 8010848:	3728      	adds	r7, #40	; 0x28
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 801084e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010850:	b08f      	sub	sp, #60	; 0x3c
 8010852:	af06      	add	r7, sp, #24
 8010854:	60ba      	str	r2, [r7, #8]
 8010856:	607b      	str	r3, [r7, #4]
 8010858:	4603      	mov	r3, r0
 801085a:	73fb      	strb	r3, [r7, #15]
 801085c:	460b      	mov	r3, r1
 801085e:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010860:	2300      	movs	r3, #0
 8010862:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010864:	2300      	movs	r3, #0
 8010866:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010868:	7bfa      	ldrb	r2, [r7, #15]
 801086a:	4613      	mov	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	4413      	add	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	4413      	add	r3, r2
 801087a:	3304      	adds	r3, #4
 801087c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 801087e:	2300      	movs	r3, #0
 8010880:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010882:	2300      	movs	r3, #0
 8010884:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	77fb      	strb	r3, [r7, #31]
 8010890:	e0b9      	b.n	8010a06 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	78da      	ldrb	r2, [r3, #3]
 8010896:	7ffb      	ldrb	r3, [r7, #31]
 8010898:	fbb3 f1f2 	udiv	r1, r3, r2
 801089c:	fb01 f202 	mul.w	r2, r1, r2
 80108a0:	1a9b      	subs	r3, r3, r2
 80108a2:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 80108a4:	7ffb      	ldrb	r3, [r7, #31]
 80108a6:	3301      	adds	r3, #1
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	78d2      	ldrb	r2, [r2, #3]
 80108ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80108b0:	fb01 f202 	mul.w	r2, r1, r2
 80108b4:	1a9b      	subs	r3, r3, r2
 80108b6:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	789b      	ldrb	r3, [r3, #2]
 80108bc:	7dfa      	ldrb	r2, [r7, #23]
 80108be:	429a      	cmp	r2, r3
 80108c0:	f080 809e 	bcs.w	8010a00 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 80108c8:	7dba      	ldrb	r2, [r7, #22]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	f080 8098 	bcs.w	8010a00 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 80108d0:	7dfb      	ldrb	r3, [r7, #23]
 80108d2:	68ba      	ldr	r2, [r7, #8]
 80108d4:	3348      	adds	r3, #72	; 0x48
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	4413      	add	r3, r2
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10e      	bne.n	80108fe <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 80108e0:	7dfb      	ldrb	r3, [r7, #23]
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	3360      	adds	r3, #96	; 0x60
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4413      	add	r3, r2
 80108ea:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d106      	bne.n	80108fe <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	4413      	add	r3, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80108fc:	e043      	b.n	8010986 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	3348      	adds	r3, #72	; 0x48
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	db0e      	blt.n	801092c <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 801090e:	7dfb      	ldrb	r3, [r7, #23]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	3360      	adds	r3, #96	; 0x60
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	4413      	add	r3, r2
 8010918:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 801091a:	2b00      	cmp	r3, #0
 801091c:	db06      	blt.n	801092c <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 801091e:	7dfb      	ldrb	r3, [r7, #23]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	4413      	add	r3, r2
 8010924:	2201      	movs	r2, #1
 8010926:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801092a:	e02c      	b.n	8010986 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801092c:	7dfb      	ldrb	r3, [r7, #23]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	3348      	adds	r3, #72	; 0x48
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	da1e      	bge.n	801097a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	3360      	adds	r3, #96	; 0x60
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4413      	add	r3, r2
 8010946:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010948:	2b00      	cmp	r3, #0
 801094a:	db16      	blt.n	801097a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801094c:	7dbb      	ldrb	r3, [r7, #22]
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	3348      	adds	r3, #72	; 0x48
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	4413      	add	r3, r2
 8010956:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010958:	2b00      	cmp	r3, #0
 801095a:	db0e      	blt.n	801097a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 801095c:	7dbb      	ldrb	r3, [r7, #22]
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	3360      	adds	r3, #96	; 0x60
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010968:	2b00      	cmp	r3, #0
 801096a:	da06      	bge.n	801097a <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 801096c:	7dfb      	ldrb	r3, [r7, #23]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	4413      	add	r3, r2
 8010972:	2201      	movs	r2, #1
 8010974:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010978:	e005      	b.n	8010986 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801097a:	7dfb      	ldrb	r3, [r7, #23]
 801097c:	68ba      	ldr	r2, [r7, #8]
 801097e:	4413      	add	r3, r2
 8010980:	2200      	movs	r2, #0
 8010982:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	4413      	add	r3, r2
 801098c:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d035      	beq.n	8010a00 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	7ffa      	ldrb	r2, [r7, #31]
 8010998:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 801099a:	7dfb      	ldrb	r3, [r7, #23]
 801099c:	68ba      	ldr	r2, [r7, #8]
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	685c      	ldr	r4, [r3, #4]
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	68ba      	ldr	r2, [r7, #8]
 80109a8:	3318      	adds	r3, #24
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	4413      	add	r3, r2
 80109ae:	685d      	ldr	r5, [r3, #4]
 80109b0:	7dfb      	ldrb	r3, [r7, #23]
 80109b2:	68ba      	ldr	r2, [r7, #8]
 80109b4:	3330      	adds	r3, #48	; 0x30
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	685e      	ldr	r6, [r3, #4]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	78d2      	ldrb	r2, [r2, #3]
 80109c4:	69b9      	ldr	r1, [r7, #24]
 80109c6:	3118      	adds	r1, #24
 80109c8:	7ff8      	ldrb	r0, [r7, #31]
 80109ca:	9105      	str	r1, [sp, #20]
 80109cc:	9204      	str	r2, [sp, #16]
 80109ce:	9303      	str	r3, [sp, #12]
 80109d0:	2300      	movs	r3, #0
 80109d2:	9302      	str	r3, [sp, #8]
 80109d4:	2300      	movs	r3, #0
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	2300      	movs	r3, #0
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	4633      	mov	r3, r6
 80109de:	462a      	mov	r2, r5
 80109e0:	4621      	mov	r1, r4
 80109e2:	f000 f81c 	bl	8010a1e <VL53L1_f_036>
 80109e6:	4603      	mov	r3, r0
 80109e8:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 80109ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80109ee:	f113 0f0f 	cmn.w	r3, #15
 80109f2:	d105      	bne.n	8010a00 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	4413      	add	r3, r2
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010a00:	7ffb      	ldrb	r3, [r7, #31]
 8010a02:	3301      	adds	r3, #1
 8010a04:	77fb      	strb	r3, [r7, #31]
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	791b      	ldrb	r3, [r3, #4]
 8010a0a:	7ffa      	ldrb	r2, [r7, #31]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	f4ff af40 	bcc.w	8010892 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010a12:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3724      	adds	r7, #36	; 0x24
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a1e <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010a1e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a22:	b0b2      	sub	sp, #200	; 0xc8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a32:	4603      	mov	r3, r0
 8010a34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010a38:	23f1      	movs	r3, #241	; 0xf1
 8010a3a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a42:	f04f 0300 	mov.w	r3, #0
 8010a46:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010a4a:	f04f 0200 	mov.w	r2, #0
 8010a4e:	f04f 0300 	mov.w	r3, #0
 8010a52:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010a56:	f04f 0200 	mov.w	r2, #0
 8010a5a:	f04f 0300 	mov.w	r3, #0
 8010a5e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a66:	17da      	asrs	r2, r3, #31
 8010a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010a70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010a74:	17da      	asrs	r2, r3, #31
 8010a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010a7a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010a86:	4602      	mov	r2, r0
 8010a88:	ebb3 0802 	subs.w	r8, r3, r2
 8010a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a90:	460a      	mov	r2, r1
 8010a92:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a9a:	17da      	asrs	r2, r3, #31
 8010a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010aa0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	ebb8 0a03 	subs.w	sl, r8, r3
 8010aaa:	4613      	mov	r3, r2
 8010aac:	eb69 0b03 	sbc.w	fp, r9, r3
 8010ab0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ab4:	17da      	asrs	r2, r3, #31
 8010ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8010ab8:	677a      	str	r2, [r7, #116]	; 0x74
 8010aba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010abe:	460b      	mov	r3, r1
 8010ac0:	ebba 0403 	subs.w	r4, sl, r3
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010aca:	f04f 0200 	mov.w	r2, #0
 8010ace:	f04f 0300 	mov.w	r3, #0
 8010ad2:	032b      	lsls	r3, r5, #12
 8010ad4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8010ad8:	0322      	lsls	r2, r4, #12
 8010ada:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ae2:	17da      	asrs	r2, r3, #31
 8010ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ae6:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010ae8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010aec:	17da      	asrs	r2, r3, #31
 8010aee:	663b      	str	r3, [r7, #96]	; 0x60
 8010af0:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010af2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010af6:	4623      	mov	r3, r4
 8010af8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010afc:	4602      	mov	r2, r0
 8010afe:	1a9b      	subs	r3, r3, r2
 8010b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8010b02:	462b      	mov	r3, r5
 8010b04:	460a      	mov	r2, r1
 8010b06:	eb63 0302 	sbc.w	r3, r3, r2
 8010b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b10:	17da      	asrs	r2, r3, #31
 8010b12:	653b      	str	r3, [r7, #80]	; 0x50
 8010b14:	657a      	str	r2, [r7, #84]	; 0x54
 8010b16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8010b1a:	4623      	mov	r3, r4
 8010b1c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010b20:	4602      	mov	r2, r0
 8010b22:	1a9b      	subs	r3, r3, r2
 8010b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b26:	462b      	mov	r3, r5
 8010b28:	460a      	mov	r2, r1
 8010b2a:	eb63 0302 	sbc.w	r3, r3, r2
 8010b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010b30:	f04f 0200 	mov.w	r2, #0
 8010b34:	f04f 0300 	mov.w	r3, #0
 8010b38:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	030b      	lsls	r3, r1, #12
 8010b40:	4621      	mov	r1, r4
 8010b42:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010b46:	4621      	mov	r1, r4
 8010b48:	030a      	lsls	r2, r1, #12
 8010b4a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8010b4e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010b52:	4313      	orrs	r3, r2
 8010b54:	f000 80a8 	beq.w	8010ca8 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8010b58:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010b5c:	f04f 0000 	mov.w	r0, #0
 8010b60:	f04f 0100 	mov.w	r1, #0
 8010b64:	0319      	lsls	r1, r3, #12
 8010b66:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010b6a:	0310      	lsls	r0, r2, #12
 8010b6c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010b70:	1814      	adds	r4, r2, r0
 8010b72:	633c      	str	r4, [r7, #48]	; 0x30
 8010b74:	414b      	adcs	r3, r1
 8010b76:	637b      	str	r3, [r7, #52]	; 0x34
 8010b78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010b7c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8010b80:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010b84:	1891      	adds	r1, r2, r2
 8010b86:	62b9      	str	r1, [r7, #40]	; 0x28
 8010b88:	415b      	adcs	r3, r3
 8010b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b90:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010b94:	f7ef fb44 	bl	8000220 <__aeabi_ldivmod>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8010ba0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010ba4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8010ba8:	6239      	str	r1, [r7, #32]
 8010baa:	f143 0300 	adc.w	r3, r3, #0
 8010bae:	627b      	str	r3, [r7, #36]	; 0x24
 8010bb0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010bb4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8010bb8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8010bc0:	647a      	str	r2, [r7, #68]	; 0x44
 8010bc2:	f04f 0200 	mov.w	r2, #0
 8010bc6:	f04f 0300 	mov.w	r3, #0
 8010bca:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010bce:	4629      	mov	r1, r5
 8010bd0:	030b      	lsls	r3, r1, #12
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010bd8:	4621      	mov	r1, r4
 8010bda:	030a      	lsls	r2, r1, #12
 8010bdc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010be0:	1884      	adds	r4, r0, r2
 8010be2:	61bc      	str	r4, [r7, #24]
 8010be4:	eb41 0303 	adc.w	r3, r1, r3
 8010be8:	61fb      	str	r3, [r7, #28]
 8010bea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010bee:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8010bf2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010bf6:	1c51      	adds	r1, r2, #1
 8010bf8:	63b9      	str	r1, [r7, #56]	; 0x38
 8010bfa:	f143 0300 	adc.w	r3, r3, #0
 8010bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010c04:	460b      	mov	r3, r1
 8010c06:	0fdb      	lsrs	r3, r3, #31
 8010c08:	2200      	movs	r2, #0
 8010c0a:	613b      	str	r3, [r7, #16]
 8010c0c:	617a      	str	r2, [r7, #20]
 8010c0e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010c12:	4623      	mov	r3, r4
 8010c14:	4602      	mov	r2, r0
 8010c16:	189b      	adds	r3, r3, r2
 8010c18:	60bb      	str	r3, [r7, #8]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	462a      	mov	r2, r5
 8010c1e:	eb42 0303 	adc.w	r3, r2, r3
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	f04f 0200 	mov.w	r2, #0
 8010c28:	f04f 0300 	mov.w	r3, #0
 8010c2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010c30:	4621      	mov	r1, r4
 8010c32:	084a      	lsrs	r2, r1, #1
 8010c34:	4629      	mov	r1, r5
 8010c36:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	104b      	asrs	r3, r1, #1
 8010c3e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8010c42:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	da05      	bge.n	8010c56 <VL53L1_f_036+0x238>
			mean_phase = 0;
 8010c4a:	f04f 0200 	mov.w	r2, #0
 8010c4e:	f04f 0300 	mov.w	r3, #0
 8010c52:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8010c56:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010c5a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010c5e:	f173 0300 	sbcs.w	r3, r3, #0
 8010c62:	db05      	blt.n	8010c70 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8010c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c68:	f04f 0300 	mov.w	r3, #0
 8010c6c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8010c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8010c78:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8010c7c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8010c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c82:	fb93 f1f2 	sdiv	r1, r3, r2
 8010c86:	fb01 f202 	mul.w	r2, r1, r2
 8010c8a:	1a9b      	subs	r3, r3, r2
 8010c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8010c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c94:	17da      	asrs	r2, r3, #31
 8010c96:	603b      	str	r3, [r7, #0]
 8010c98:	607a      	str	r2, [r7, #4]
 8010c9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010c9e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8010ca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010cb0:	601a      	str	r2, [r3, #0]

	return status;
 8010cb2:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	37c8      	adds	r7, #200	; 0xc8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010cc0 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b087      	sub	sp, #28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60ba      	str	r2, [r7, #8]
 8010cc8:	607b      	str	r3, [r7, #4]
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
 8010cce:	460b      	mov	r3, r1
 8010cd0:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8010ce0:	7bfa      	ldrb	r2, [r7, #15]
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	3206      	adds	r2, #6
 8010ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	601a      	str	r2, [r3, #0]
	*pc = 0;
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	75fb      	strb	r3, [r7, #23]
 8010cf8:	e02f      	b.n	8010d5a <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8010cfa:	7bfa      	ldrb	r2, [r7, #15]
 8010cfc:	7dfb      	ldrb	r3, [r7, #23]
 8010cfe:	4413      	add	r3, r2
 8010d00:	68ba      	ldr	r2, [r7, #8]
 8010d02:	7a92      	ldrb	r2, [r2, #10]
 8010d04:	441a      	add	r2, r3
 8010d06:	7bbb      	ldrb	r3, [r7, #14]
 8010d08:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8010d0a:	68ba      	ldr	r2, [r7, #8]
 8010d0c:	7a92      	ldrb	r2, [r2, #10]
 8010d0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010d12:	fb01 f202 	mul.w	r2, r1, r2
 8010d16:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8010d18:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8010d1a:	7dfa      	ldrb	r2, [r7, #23]
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d20a      	bcs.n	8010d38 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	7db9      	ldrb	r1, [r7, #22]
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	3106      	adds	r1, #6
 8010d2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d30:	441a      	add	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e00d      	b.n	8010d54 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8010d38:	7dfa      	ldrb	r2, [r7, #23]
 8010d3a:	7bbb      	ldrb	r3, [r7, #14]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d909      	bls.n	8010d54 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8010d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	7db9      	ldrb	r1, [r7, #22]
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	3106      	adds	r1, #6
 8010d4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d4e:	441a      	add	r2, r3
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8010d54:	7dfb      	ldrb	r3, [r7, #23]
 8010d56:	3301      	adds	r3, #1
 8010d58:	75fb      	strb	r3, [r7, #23]
 8010d5a:	7bbb      	ldrb	r3, [r7, #14]
 8010d5c:	005a      	lsls	r2, r3, #1
 8010d5e:	7dfb      	ldrb	r3, [r7, #23]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	daca      	bge.n	8010cfa <VL53L1_f_013+0x3a>
	}
}
 8010d64:	bf00      	nop
 8010d66:	bf00      	nop
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b088      	sub	sp, #32
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	60ba      	str	r2, [r7, #8]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	81fb      	strh	r3, [r7, #14]
 8010d80:	460b      	mov	r3, r1
 8010d82:	81bb      	strh	r3, [r7, #12]
 8010d84:	4613      	mov	r3, r2
 8010d86:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8010d94:	2300      	movs	r3, #0
 8010d96:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8010d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9a:	89fa      	ldrh	r2, [r7, #14]
 8010d9c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	89ba      	ldrh	r2, [r7, #12]
 8010da2:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8010da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da6:	68ba      	ldr	r2, [r7, #8]
 8010da8:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8010daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dac:	88fa      	ldrh	r2, [r7, #6]
 8010dae:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8010db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db2:	8a5b      	ldrh	r3, [r3, #18]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d101      	bne.n	8010dbc <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010db8:	23f1      	movs	r3, #241	; 0xf1
 8010dba:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8010dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d101      	bne.n	8010dc8 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010dc4:	23f1      	movs	r3, #241	; 0xf1
 8010dc6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8010dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d16f      	bne.n	8010eb0 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	8a5b      	ldrh	r3, [r3, #18]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fd f903 	bl	800dfe0 <VL53L1_calc_pll_period_us>
 8010dda:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	699b      	ldr	r3, [r3, #24]
 8010de0:	3301      	adds	r3, #1
 8010de2:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8010de8:	4619      	mov	r1, r3
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010df0:	6978      	ldr	r0, [r7, #20]
 8010df2:	f7fd f90c 	bl	800e00e <VL53L1_duration_maths>
 8010df6:	4602      	mov	r2, r0
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8010dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfe:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8010e00:	0119      	lsls	r1, r3, #4
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e08:	6978      	ldr	r0, [r7, #20]
 8010e0a:	f7fd f900 	bl	800e00e <VL53L1_duration_maths>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	69db      	ldr	r3, [r3, #28]
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	4610      	mov	r0, r2
 8010e20:	f7fd fb6d 	bl	800e4fe <VL53L1_rate_maths>
 8010e24:	4603      	mov	r3, r0
 8010e26:	461a      	mov	r2, r3
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	6a1b      	ldr	r3, [r3, #32]
 8010e34:	4619      	mov	r1, r3
 8010e36:	4610      	mov	r0, r2
 8010e38:	f7fd fb61 	bl	800e4fe <VL53L1_rate_maths>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	461a      	mov	r2, r3
 8010e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e42:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8010e48:	461a      	mov	r2, r3
 8010e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fd fb54 	bl	800e4fe <VL53L1_rate_maths>
 8010e56:	4603      	mov	r3, r0
 8010e58:	461a      	mov	r2, r3
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8010e62:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8010e68:	4413      	add	r3, r2
 8010e6a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8010e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d905      	bls.n	8010e80 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8010e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e78:	69ba      	ldr	r2, [r7, #24]
 8010e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e7e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	8ada      	ldrh	r2, [r3, #22]
 8010e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e88:	69b9      	ldr	r1, [r7, #24]
 8010e8a:	2006      	movs	r0, #6
 8010e8c:	f7fd fb7c 	bl	800e588 <VL53L1_rate_per_spad_maths>
 8010e90:	4603      	mov	r3, r0
 8010e92:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8010e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e96:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8010e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9e:	8ad9      	ldrh	r1, [r3, #22]
 8010ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea2:	69db      	ldr	r3, [r3, #28]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	f7fd f90b 	bl	800e0c0 <VL53L1_events_per_spad_maths>
 8010eaa:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8010eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eae:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8010eb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3720      	adds	r7, #32
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8010ebc:	b590      	push	{r4, r7, lr}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	603a      	str	r2, [r7, #0]
 8010ec6:	80fb      	strh	r3, [r7, #6]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	8a58      	ldrh	r0, [r3, #18]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	8a9c      	ldrh	r4, [r3, #20]
 8010ed8:	88fb      	ldrh	r3, [r7, #6]
 8010eda:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010ede:	9201      	str	r2, [sp, #4]
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	f7fd fb83 	bl	800e5f0 <VL53L1_range_maths>
 8010eea:	4603      	mov	r3, r0
 8010eec:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	8a58      	ldrh	r0, [r3, #18]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	8a9c      	ldrh	r4, [r3, #20]
 8010f02:	88fb      	ldrh	r3, [r7, #6]
 8010f04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010f08:	9201      	str	r2, [sp, #4]
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4622      	mov	r2, r4
 8010f10:	f7fd fb6e 	bl	800e5f0 <VL53L1_range_maths>
 8010f14:	4603      	mov	r3, r0
 8010f16:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	8a58      	ldrh	r0, [r3, #18]
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	8a9c      	ldrh	r4, [r3, #20]
 8010f2c:	88fb      	ldrh	r3, [r7, #6]
 8010f2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010f32:	9201      	str	r2, [sp, #4]
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	2300      	movs	r3, #0
 8010f38:	4622      	mov	r2, r4
 8010f3a:	f7fd fb59 	bl	800e5f0 <VL53L1_range_maths>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd90      	pop	{r4, r7, pc}

08010f50 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b086      	sub	sp, #24
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	757b      	strb	r3, [r7, #21]





	memcpy(
 8010f6c:	22ac      	movs	r2, #172	; 0xac
 8010f6e:	68b9      	ldr	r1, [r7, #8]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f008 f953 	bl	801921c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8010f76:	2300      	movs	r3, #0
 8010f78:	75fb      	strb	r3, [r7, #23]
 8010f7a:	e008      	b.n	8010f8e <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8010f7c:	7dfa      	ldrb	r2, [r7, #23]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3206      	adds	r2, #6
 8010f82:	2100      	movs	r1, #0
 8010f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	75fb      	strb	r3, [r7, #23]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	7a5b      	ldrb	r3, [r3, #9]
 8010f92:	7dfa      	ldrb	r2, [r7, #23]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d3f1      	bcc.n	8010f7c <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8010f98:	68f9      	ldr	r1, [r7, #12]
 8010f9a:	68b8      	ldr	r0, [r7, #8]
 8010f9c:	f000 f878 	bl	8011090 <VL53L1_f_038>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	7a9a      	ldrb	r2, [r3, #10]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	7a9b      	ldrb	r3, [r3, #10]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d203      	bcs.n	8010fb8 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	7a9b      	ldrb	r3, [r3, #10]
 8010fb4:	75bb      	strb	r3, [r7, #22]
 8010fb6:	e002      	b.n	8010fbe <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	7a9b      	ldrb	r3, [r3, #10]
 8010fbc:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75fb      	strb	r3, [r7, #23]
 8010fc2:	e05c      	b.n	801107e <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8010fc4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	db0f      	blt.n	8010fec <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8010fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8010fd6:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	7a92      	ldrb	r2, [r2, #10]
 8010fdc:	b252      	sxtb	r2, r2
 8010fde:	fb93 f1f2 	sdiv	r1, r3, r2
 8010fe2:	fb01 f202 	mul.w	r2, r1, r2
 8010fe6:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8010fe8:	757b      	strb	r3, [r7, #21]
 8010fea:	e013      	b.n	8011014 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	7a9b      	ldrb	r3, [r3, #10]
 8010ff0:	b25b      	sxtb	r3, r3
 8010ff2:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8010ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8010ffe:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011000:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	7a92      	ldrb	r2, [r2, #10]
 8011006:	b252      	sxtb	r2, r2
 8011008:	fb93 f1f2 	sdiv	r1, r3, r2
 801100c:	fb01 f202 	mul.w	r2, r1, r2
 8011010:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011012:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011014:	7d7b      	ldrb	r3, [r7, #21]
 8011016:	461a      	mov	r2, r3
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	3206      	adds	r2, #6
 801101c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8011020:	7df9      	ldrb	r1, [r7, #23]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3106      	adds	r1, #6
 8011026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801102a:	429a      	cmp	r2, r3
 801102c:	dd12      	ble.n	8011054 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801102e:	7d7b      	ldrb	r3, [r7, #21]
 8011030:	461a      	mov	r2, r3
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	3206      	adds	r2, #6
 8011036:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801103a:	7df9      	ldrb	r1, [r7, #23]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	3106      	adds	r1, #6
 8011040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011044:	7d79      	ldrb	r1, [r7, #21]
 8011046:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011048:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	1d82      	adds	r2, r0, #6
 801104e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011052:	e006      	b.n	8011062 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011054:	7d7b      	ldrb	r3, [r7, #21]
 8011056:	461a      	mov	r2, r3
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	3206      	adds	r2, #6
 801105c:	2100      	movs	r1, #0
 801105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8011062:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011064:	7d7b      	ldrb	r3, [r7, #21]
 8011066:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	3206      	adds	r2, #6
 801106c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	1d82      	adds	r2, r0, #6
 8011074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	3301      	adds	r3, #1
 801107c:	75fb      	strb	r3, [r7, #23]
 801107e:	7dfa      	ldrb	r2, [r7, #23]
 8011080:	7dbb      	ldrb	r3, [r7, #22]
 8011082:	429a      	cmp	r2, r3
 8011084:	d39e      	bcc.n	8010fc4 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8011086:	bf00      	nop
 8011088:	bf00      	nop
 801108a:	3718      	adds	r7, #24
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 80110a2:	2300      	movs	r3, #0
 80110a4:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fd fb85 	bl	800e7c0 <VL53L1_decode_vcsel_period>
 80110b6:	4603      	mov	r3, r0
	period = 2048 *
 80110b8:	02db      	lsls	r3, r3, #11
 80110ba:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00a      	beq.n	80110d8 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80110ce:	68b9      	ldr	r1, [r7, #8]
 80110d0:	fb01 f202 	mul.w	r2, r1, r2
 80110d4:	1a9b      	subs	r3, r3, r2
 80110d6:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80110de:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80110e0:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dd09      	ble.n	8011100 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	da01      	bge.n	80110fa <VL53L1_f_038+0x6a>
 80110f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80110fa:	12db      	asrs	r3, r3, #11
 80110fc:	75fb      	strb	r3, [r7, #23]
 80110fe:	e008      	b.n	8011112 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011106:	2b00      	cmp	r3, #0
 8011108:	da01      	bge.n	801110e <VL53L1_f_038+0x7e>
 801110a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801110e:	12db      	asrs	r3, r3, #11
 8011110:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8011112:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3718      	adds	r7, #24
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801111e:	b580      	push	{r7, lr}
 8011120:	b08e      	sub	sp, #56	; 0x38
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
 8011126:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011128:	2300      	movs	r3, #0
 801112a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011144:	2300      	movs	r3, #0
 8011146:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8011150:	22ac      	movs	r2, #172	; 0xac
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	6838      	ldr	r0, [r7, #0]
 8011156:	f008 f861 	bl	801921c <memcpy>


	podata->VL53L1_p_024 = 0;
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2200      	movs	r2, #0
 801115e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011160:	2300      	movs	r3, #0
 8011162:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011166:	e00a      	b.n	801117e <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8011168:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801116c:	683a      	ldr	r2, [r7, #0]
 801116e:	4413      	add	r3, r2
 8011170:	2210      	movs	r2, #16
 8011172:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011174:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011178:	3301      	adds	r3, #1
 801117a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801117e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011182:	2b05      	cmp	r3, #5
 8011184:	d9f0      	bls.n	8011168 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011186:	2300      	movs	r3, #0
 8011188:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801118c:	e00b      	b.n	80111a6 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801118e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	3206      	adds	r2, #6
 8011196:	2100      	movs	r1, #0
 8011198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801119c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111a0:	3301      	adds	r3, #1
 80111a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	7a5b      	ldrb	r3, [r3, #9]
 80111aa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d3ed      	bcc.n	801118e <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80111b2:	2300      	movs	r3, #0
 80111b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111b8:	e012      	b.n	80111e0 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80111ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111be:	3338      	adds	r3, #56	; 0x38
 80111c0:	443b      	add	r3, r7
 80111c2:	2200      	movs	r2, #0
 80111c4:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80111c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111cc:	3338      	adds	r3, #56	; 0x38
 80111ce:	443b      	add	r3, r7
 80111d0:	2200      	movs	r2, #0
 80111d2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80111d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111da:	3301      	adds	r3, #1
 80111dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111e4:	2b0f      	cmp	r3, #15
 80111e6:	d9e8      	bls.n	80111ba <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80111e8:	2300      	movs	r3, #0
 80111ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80111ee:	2300      	movs	r3, #0
 80111f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111f4:	e068      	b.n	80112c8 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80111f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	4413      	add	r3, r2
 80111fe:	7b1b      	ldrb	r3, [r3, #12]
 8011200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8011204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011208:	3338      	adds	r3, #56	; 0x38
 801120a:	443b      	add	r3, r7
 801120c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d115      	bne.n	8011240 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011218:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801121c:	0092      	lsls	r2, r2, #2
 801121e:	b2d2      	uxtb	r2, r2
 8011220:	3338      	adds	r3, #56	; 0x38
 8011222:	443b      	add	r3, r7
 8011224:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	4413      	add	r3, r2
 8011230:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011234:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801123a:	3301      	adds	r3, #1
 801123c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011244:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011248:	443a      	add	r2, r7
 801124a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801124e:	3201      	adds	r2, #1
 8011250:	b2d2      	uxtb	r2, r2
 8011252:	3338      	adds	r3, #56	; 0x38
 8011254:	443b      	add	r3, r7
 8011256:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801125a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801125e:	3338      	adds	r3, #56	; 0x38
 8011260:	443b      	add	r3, r7
 8011262:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801126a:	2300      	movs	r3, #0
 801126c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011270:	e021      	b.n	80112b6 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8011272:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801127a:	441a      	add	r2, r3
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	3206      	adds	r2, #6
 8011280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011284:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011288:	009a      	lsls	r2, r3, #2
 801128a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801128e:	441a      	add	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	3206      	adds	r2, #6
 8011294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8011298:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 801129c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80112a0:	4402      	add	r2, r0
 80112a2:	4419      	add	r1, r3
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	3206      	adds	r2, #6
 80112a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80112ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80112b0:	3301      	adds	r3, #1
 80112b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80112b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d9d9      	bls.n	8011272 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80112be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80112c2:	3301      	adds	r3, #1
 80112c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80112c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80112cc:	2b05      	cmp	r3, #5
 80112ce:	d992      	bls.n	80111f6 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80112d0:	2300      	movs	r3, #0
 80112d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80112d6:	e022      	b.n	801131e <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80112d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	4413      	add	r3, r2
 80112e0:	7b1b      	ldrb	r3, [r3, #12]
 80112e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80112e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80112ea:	2b0f      	cmp	r3, #15
 80112ec:	d80c      	bhi.n	8011308 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80112ee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80112f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80112f6:	3238      	adds	r2, #56	; 0x38
 80112f8:	443a      	add	r2, r7
 80112fa:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80112fe:	683a      	ldr	r2, [r7, #0]
 8011300:	4413      	add	r3, r2
 8011302:	460a      	mov	r2, r1
 8011304:	749a      	strb	r2, [r3, #18]
 8011306:	e005      	b.n	8011314 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8011308:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801130c:	683a      	ldr	r2, [r7, #0]
 801130e:	4413      	add	r3, r2
 8011310:	2200      	movs	r2, #0
 8011312:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011314:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011318:	3301      	adds	r3, #1
 801131a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801131e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011322:	2b05      	cmp	r3, #5
 8011324:	d9d8      	bls.n	80112d8 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	b2da      	uxtb	r2, r3
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011332:	2300      	movs	r3, #0
 8011334:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011338:	e050      	b.n	80113dc <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801133a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801133e:	3338      	adds	r3, #56	; 0x38
 8011340:	443b      	add	r3, r7
 8011342:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011346:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	2b00      	cmp	r3, #0
 801134c:	dd41      	ble.n	80113d2 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 801134e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011352:	3338      	adds	r3, #56	; 0x38
 8011354:	443b      	add	r3, r7
 8011356:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801135a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 801135e:	2300      	movs	r3, #0
 8011360:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011364:	e031      	b.n	80113ca <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011366:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801136a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801136e:	441a      	add	r2, r3
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	3206      	adds	r2, #6
 8011374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	0fda      	lsrs	r2, r3, #31
 801137c:	4413      	add	r3, r2
 801137e:	105b      	asrs	r3, r3, #1
 8011380:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8011382:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011386:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801138a:	441a      	add	r2, r3
 801138c:	4401      	add	r1, r0
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	3206      	adds	r2, #6
 8011392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8011396:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801139a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801139e:	441a      	add	r2, r3
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	3206      	adds	r2, #6
 80113a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80113ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113b0:	441a      	add	r2, r3
 80113b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b4:	fb91 f1f3 	sdiv	r1, r1, r3
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	3206      	adds	r2, #6
 80113bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80113c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113c4:	3301      	adds	r3, #1
 80113c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80113ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113ce:	2b03      	cmp	r3, #3
 80113d0:	d9c9      	bls.n	8011366 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80113d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80113d6:	3301      	adds	r3, #1
 80113d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80113dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80113e0:	2b0f      	cmp	r3, #15
 80113e2:	d9aa      	bls.n	801133a <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	2200      	movs	r2, #0
 80113e8:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d102      	bne.n	80113f6 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2204      	movs	r2, #4
 80113fa:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 80113fc:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8011400:	4618      	mov	r0, r3
 8011402:	3738      	adds	r7, #56	; 0x38
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801140a:	b0cb      	sub	sp, #300	; 0x12c
 801140c:	af06      	add	r7, sp, #24
 801140e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011412:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011416:	6020      	str	r0, [r4, #0]
 8011418:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801141c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011420:	6001      	str	r1, [r0, #0]
 8011422:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011426:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801142a:	600a      	str	r2, [r1, #0]
 801142c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011430:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011434:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011436:	2300      	movs	r3, #0
 8011438:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 801143c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011444:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011448:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 801144c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011450:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011454:	f107 0318 	add.w	r3, r7, #24
 8011458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 801145c:	2300      	movs	r3, #0
 801145e:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011460:	2300      	movs	r3, #0
 8011462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011466:	2300      	movs	r3, #0
 8011468:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 801146c:	2300      	movs	r3, #0
 801146e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011472:	2300      	movs	r3, #0
 8011474:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011478:	2300      	movs	r3, #0
 801147a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 801147e:	2300      	movs	r3, #0
 8011480:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801148c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011490:	6818      	ldr	r0, [r3, #0]
 8011492:	f7ff fe44 	bl	801111e <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801149a:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 801149c:	b299      	uxth	r1, r3
 801149e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114a2:	3348      	adds	r3, #72	; 0x48
 80114a4:	461a      	mov	r2, r3
 80114a6:	2000      	movs	r0, #0
 80114a8:	f7fd f9db 	bl	800e862 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 80114ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80114b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114b4:	3348      	adds	r3, #72	; 0x48
 80114b6:	4619      	mov	r1, r3
 80114b8:	4610      	mov	r0, r2
 80114ba:	f7fd f994 	bl	800e7e6 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80114be:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d142      	bne.n	801154c <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80114c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d039      	beq.n	801154c <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80114d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80114e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 80114f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 801150e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011512:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011516:	6812      	ldr	r2, [r2, #0]
 8011518:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 801151c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011520:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011524:	6809      	ldr	r1, [r1, #0]
 8011526:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801152a:	f107 0014 	add.w	r0, r7, #20
 801152e:	9004      	str	r0, [sp, #16]
 8011530:	9103      	str	r1, [sp, #12]
 8011532:	9202      	str	r2, [sp, #8]
 8011534:	9301      	str	r3, [sp, #4]
 8011536:	2300      	movs	r3, #0
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	2300      	movs	r3, #0
 801153c:	4632      	mov	r2, r6
 801153e:	4629      	mov	r1, r5
 8011540:	4620      	mov	r0, r4
 8011542:	f002 f98c 	bl	801385e <VL53L1_f_040>
 8011546:	4603      	mov	r3, r0
 8011548:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 801154c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011550:	2b00      	cmp	r3, #0
 8011552:	d115      	bne.n	8011580 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011558:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00c      	beq.n	8011580 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011566:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801156a:	697a      	ldr	r2, [r7, #20]
 801156c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011570:	3348      	adds	r3, #72	; 0x48
 8011572:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011576:	f002 fbe4 	bl	8013d42 <VL53L1_f_041>
 801157a:	4603      	mov	r3, r0
 801157c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011584:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011588:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801158c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011594:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011598:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801159c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80115a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 80115aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80115b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80115be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115c2:	2200      	movs	r2, #0
 80115c4:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80115ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 80115e0:	2301      	movs	r3, #1
 80115e2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80115e6:	2300      	movs	r3, #0
 80115e8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80115ec:	e108      	b.n	8011800 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80115ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80115fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011604:	3348      	adds	r3, #72	; 0x48
 8011606:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801160a:	7814      	ldrb	r4, [r2, #0]
 801160c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011610:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011614:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011618:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 801161c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011624:	9405      	str	r4, [sp, #20]
 8011626:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 801162a:	9404      	str	r4, [sp, #16]
 801162c:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011630:	9403      	str	r4, [sp, #12]
 8011632:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011636:	9402      	str	r4, [sp, #8]
 8011638:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 801163c:	9401      	str	r4, [sp, #4]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011644:	6812      	ldr	r2, [r2, #0]
 8011646:	6809      	ldr	r1, [r1, #0]
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	f7fe fe65 	bl	8010318 <VL53L1_f_033>
 801164e:	4603      	mov	r3, r0
 8011650:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011654:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011658:	2b00      	cmp	r3, #0
 801165a:	f040 80cb 	bne.w	80117f4 <VL53L1_hist_process_data+0x3ec>
 801165e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011662:	2b00      	cmp	r3, #0
 8011664:	f040 80c6 	bne.w	80117f4 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801166c:	7c9b      	ldrb	r3, [r3, #18]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d110      	bne.n	8011694 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011676:	3314      	adds	r3, #20
 8011678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 801167c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011680:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011686:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801168c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 801168e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011692:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 80116a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 80116a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	461a      	mov	r2, r3
 80116ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116b0:	fb02 f303 	mul.w	r3, r2, r3
 80116b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 80116b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116bc:	011b      	lsls	r3, r3, #4
 80116be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 80116c2:	2300      	movs	r3, #0
 80116c4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80116c8:	e08b      	b.n	80117e2 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 80116ca:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80116ce:	224c      	movs	r2, #76	; 0x4c
 80116d0:	fb02 f303 	mul.w	r3, r2, r3
 80116d4:	3310      	adds	r3, #16
 80116d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80116da:	4413      	add	r3, r2
 80116dc:	3304      	adds	r3, #4
 80116de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 80116e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116e6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80116ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116ee:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80116f2:	429a      	cmp	r2, r3
 80116f4:	dd0e      	ble.n	8011714 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 80116f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116fa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80116fe:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011704:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011708:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	b29b      	uxth	r3, r3
				delta_mm =
 801170e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011712:	e00d      	b.n	8011730 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011718:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801171c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 801171e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011722:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011726:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	b29b      	uxth	r3, r3
				delta_mm =
 801172c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011730:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011734:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 801173c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011740:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801174c:	fb02 f303 	mul.w	r3, r2, r3
 8011750:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011754:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011758:	015b      	lsls	r3, r3, #5
 801175a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 801175e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011762:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801176a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011774:	429a      	cmp	r2, r3
 8011776:	dd2f      	ble.n	80117d8 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011778:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801177c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011784:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801178e:	429a      	cmp	r2, r3
 8011790:	da22      	bge.n	80117d8 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011798:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801179c:	429a      	cmp	r2, r3
 801179e:	d91b      	bls.n	80117d8 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80117a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80117a6:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 80117a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d913      	bls.n	80117d8 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 80117b0:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 80117b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80117b8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80117bc:	6812      	ldr	r2, [r2, #0]
 80117be:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80117c0:	4293      	cmp	r3, r2
 80117c2:	da09      	bge.n	80117d8 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 80117c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 80117cc:	224c      	movs	r2, #76	; 0x4c
 80117ce:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80117d2:	4618      	mov	r0, r3
 80117d4:	f007 fd22 	bl	801921c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 80117d8:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80117dc:	3301      	adds	r3, #1
 80117de:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80117e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117e6:	7c9b      	ldrb	r3, [r3, #18]
 80117e8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80117ec:	429a      	cmp	r2, r3
 80117ee:	f4ff af6c 	bcc.w	80116ca <VL53L1_hist_process_data+0x2c2>
 80117f2:	e000      	b.n	80117f6 <VL53L1_hist_process_data+0x3ee>
			continue;
 80117f4:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 80117f6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80117fa:	3301      	adds	r3, #1
 80117fc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011800:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011804:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011808:	429a      	cmp	r2, r3
 801180a:	f67f aef0 	bls.w	80115ee <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 801180e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 801181c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011820:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011824:	4618      	mov	r0, r3
 8011826:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801182a:	46bd      	mov	sp, r7
 801182c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801182e <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b086      	sub	sp, #24
 8011832:	af00      	add	r7, sp, #0
 8011834:	60f8      	str	r0, [r7, #12]
 8011836:	460b      	mov	r3, r1
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801183c:	2300      	movs	r3, #0
 801183e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d104      	bne.n	8011852 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f7f9 fb5a 	bl	800af02 <VL53L1_disable_firmware>
 801184e:	4603      	mov	r3, r0
 8011850:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d104      	bne.n	8011864 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	f7f9 fb82 	bl	800af64 <VL53L1_enable_powerforce>
 8011860:	4603      	mov	r3, r0
 8011862:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d105      	bne.n	8011878 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 801186c:	21fa      	movs	r1, #250	; 0xfa
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f002 fdd0 	bl	8014414 <VL53L1_WaitUs>
 8011874:	4603      	mov	r3, r0
 8011876:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d107      	bne.n	8011890 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011880:	2201      	movs	r2, #1
 8011882:	f240 7181 	movw	r1, #1921	; 0x781
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f002 fcd0 	bl	801422c <VL53L1_WrByte>
 801188c:	4603      	mov	r3, r0
 801188e:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d107      	bne.n	80118a8 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011898:	2205      	movs	r2, #5
 801189a:	f240 6183 	movw	r1, #1667	; 0x683
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f002 fcc4 	bl	801422c <VL53L1_WrByte>
 80118a4:	4603      	mov	r3, r0
 80118a6:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 80118a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d105      	bne.n	80118bc <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 80118b0:	6879      	ldr	r1, [r7, #4]
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f002 fdae 	bl	8014414 <VL53L1_WaitUs>
 80118b8:	4603      	mov	r3, r0
 80118ba:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 80118bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d107      	bne.n	80118d4 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 80118c4:	2201      	movs	r2, #1
 80118c6:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	f002 fcae 	bl	801422c <VL53L1_WrByte>
 80118d0:	4603      	mov	r3, r0
 80118d2:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 80118d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d108      	bne.n	80118ee <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 80118dc:	897b      	ldrh	r3, [r7, #10]
 80118de:	461a      	mov	r2, r3
 80118e0:	f240 7184 	movw	r1, #1924	; 0x784
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f002 fccb 	bl	8014280 <VL53L1_WrWord>
 80118ea:	4603      	mov	r3, r0
 80118ec:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 80118ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3718      	adds	r7, #24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b086      	sub	sp, #24
 80118fe:	af00      	add	r7, sp, #0
 8011900:	60f8      	str	r0, [r7, #12]
 8011902:	607b      	str	r3, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	72fb      	strb	r3, [r7, #11]
 8011908:	4613      	mov	r3, r2
 801190a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801190c:	2300      	movs	r3, #0
 801190e:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011910:	2300      	movs	r3, #0
 8011912:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011914:	7afb      	ldrb	r3, [r7, #11]
 8011916:	75bb      	strb	r3, [r7, #22]
 8011918:	e041      	b.n	801199e <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 801191a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d108      	bne.n	8011934 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011922:	7dbb      	ldrb	r3, [r7, #22]
 8011924:	461a      	mov	r2, r3
 8011926:	f240 7194 	movw	r1, #1940	; 0x794
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f002 fc7e 	bl	801422c <VL53L1_WrByte>
 8011930:	4603      	mov	r3, r0
 8011932:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d107      	bne.n	801194c <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 801193c:	2200      	movs	r2, #0
 801193e:	f240 7183 	movw	r1, #1923	; 0x783
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f002 fc72 	bl	801422c <VL53L1_WrByte>
 8011948:	4603      	mov	r3, r0
 801194a:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 801194c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d105      	bne.n	8011960 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011954:	2105      	movs	r1, #5
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f002 fd5c 	bl	8014414 <VL53L1_WaitUs>
 801195c:	4603      	mov	r3, r0
 801195e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d107      	bne.n	8011978 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011968:	2201      	movs	r2, #1
 801196a:	f240 7183 	movw	r1, #1923	; 0x783
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f002 fc5c 	bl	801422c <VL53L1_WrByte>
 8011974:	4603      	mov	r3, r0
 8011976:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d108      	bne.n	8011992 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011980:	2304      	movs	r3, #4
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f002 fc19 	bl	80141c0 <VL53L1_ReadMulti>
 801198e:	4603      	mov	r3, r0
 8011990:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	3304      	adds	r3, #4
 8011996:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011998:	7dbb      	ldrb	r3, [r7, #22]
 801199a:	3301      	adds	r3, #1
 801199c:	75bb      	strb	r3, [r7, #22]
 801199e:	7dba      	ldrb	r2, [r7, #22]
 80119a0:	7af9      	ldrb	r1, [r7, #11]
 80119a2:	7abb      	ldrb	r3, [r7, #10]
 80119a4:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 80119a6:	429a      	cmp	r2, r3
 80119a8:	dbb7      	blt.n	801191a <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 80119aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80119be:	2300      	movs	r3, #0
 80119c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80119c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d107      	bne.n	80119da <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80119ca:	2201      	movs	r2, #1
 80119cc:	f240 7183 	movw	r1, #1923	; 0x783
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f002 fc2b 	bl	801422c <VL53L1_WrByte>
 80119d6:	4603      	mov	r3, r0
 80119d8:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80119da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d107      	bne.n	80119f2 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80119e2:	2200      	movs	r2, #0
 80119e4:	f240 7181 	movw	r1, #1921	; 0x781
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f002 fc1f 	bl	801422c <VL53L1_WrByte>
 80119ee:	4603      	mov	r3, r0
 80119f0:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 80119f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d104      	bne.n	8011a04 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7f9 fac4 	bl	800af88 <VL53L1_disable_powerforce>
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d104      	bne.n	8011a16 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7f9 fa66 	bl	800aede <VL53L1_enable_firmware>
 8011a12:	4603      	mov	r3, r0
 8011a14:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011a16:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011a22:	b480      	push	{r7}
 8011a24:	b087      	sub	sp, #28
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	4603      	mov	r3, r0
 8011a2a:	60b9      	str	r1, [r7, #8]
 8011a2c:	607a      	str	r2, [r7, #4]
 8011a2e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011a30:	2300      	movs	r3, #0
 8011a32:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011a38:	89fb      	ldrh	r3, [r7, #14]
 8011a3a:	2b03      	cmp	r3, #3
 8011a3c:	d802      	bhi.n	8011a44 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011a3e:	f06f 0308 	mvn.w	r3, #8
 8011a42:	e018      	b.n	8011a76 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a48:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	3302      	adds	r3, #2
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	8afa      	ldrh	r2, [r7, #22]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011a58:	8afb      	ldrh	r3, [r7, #22]
 8011a5a:	2bff      	cmp	r3, #255	; 0xff
 8011a5c:	d901      	bls.n	8011a62 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011a62:	8afb      	ldrh	r3, [r7, #22]
 8011a64:	b2da      	uxtb	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	78da      	ldrb	r2, [r3, #3]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	705a      	strb	r2, [r3, #1]

	return status;
 8011a72:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	371c      	adds	r7, #28
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011a82:	b590      	push	{r4, r7, lr}
 8011a84:	b087      	sub	sp, #28
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	4603      	mov	r3, r0
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
 8011a8e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011a90:	2300      	movs	r3, #0
 8011a92:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8011a94:	2300      	movs	r3, #0
 8011a96:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8011a9c:	89fb      	ldrh	r3, [r7, #14]
 8011a9e:	2b37      	cmp	r3, #55	; 0x37
 8011aa0:	d802      	bhi.n	8011aa8 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011aa2:	f06f 0308 	mvn.w	r3, #8
 8011aa6:	e03e      	b.n	8011b26 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011aa8:	68b9      	ldr	r1, [r7, #8]
 8011aaa:	2002      	movs	r0, #2
 8011aac:	f7f9 f8fd 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	3302      	adds	r3, #2
 8011abc:	4619      	mov	r1, r3
 8011abe:	2002      	movs	r0, #2
 8011ac0:	f7f9 f8f3 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8011ad0:	099b      	lsrs	r3, r3, #6
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2219      	movs	r2, #25
 8011adc:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2205      	movs	r2, #5
 8011ae2:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2205      	movs	r2, #5
 8011ae8:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	3304      	adds	r3, #4
 8011aee:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011af0:	2300      	movs	r3, #0
 8011af2:	74fb      	strb	r3, [r7, #19]
 8011af4:	e012      	b.n	8011b1c <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8011af6:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8011af8:	6979      	ldr	r1, [r7, #20]
 8011afa:	2002      	movs	r0, #2
 8011afc:	f7f9 f8d5 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011b00:	4603      	mov	r3, r0
 8011b02:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	1d23      	adds	r3, r4, #4
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	460a      	mov	r2, r1
 8011b0e:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	3302      	adds	r3, #2
 8011b14:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011b16:	7cfb      	ldrb	r3, [r7, #19]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	74fb      	strb	r3, [r7, #19]
 8011b1c:	7cfb      	ldrb	r3, [r7, #19]
 8011b1e:	2b18      	cmp	r3, #24
 8011b20:	d9e9      	bls.n	8011af6 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8011b22:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd90      	pop	{r4, r7, pc}

08011b2e <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8011b2e:	b580      	push	{r7, lr}
 8011b30:	b086      	sub	sp, #24
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	4603      	mov	r3, r0
 8011b36:	60b9      	str	r1, [r7, #8]
 8011b38:	607a      	str	r2, [r7, #4]
 8011b3a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8011b40:	89fb      	ldrh	r3, [r7, #14]
 8011b42:	2b07      	cmp	r3, #7
 8011b44:	d802      	bhi.n	8011b4c <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011b46:	f06f 0308 	mvn.w	r3, #8
 8011b4a:	e027      	b.n	8011b9c <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011b4c:	68b9      	ldr	r1, [r7, #8]
 8011b4e:	2002      	movs	r0, #2
 8011b50:	f7f9 f8ab 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011b54:	4603      	mov	r3, r0
 8011b56:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	3302      	adds	r3, #2
 8011b60:	4619      	mov	r1, r3
 8011b62:	2002      	movs	r0, #2
 8011b64:	f7f9 f8a1 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	3304      	adds	r3, #4
 8011b74:	4619      	mov	r1, r3
 8011b76:	2002      	movs	r0, #2
 8011b78:	f7f9 f897 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	3306      	adds	r3, #6
 8011b88:	4619      	mov	r1, r3
 8011b8a:	2002      	movs	r0, #2
 8011b8c:	f7f9 f88d 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011b90:	4603      	mov	r3, r0
 8011b92:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	80da      	strh	r2, [r3, #6]

	return status;
 8011b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3718      	adds	r7, #24
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b086      	sub	sp, #24
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	4603      	mov	r3, r0
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
 8011bb0:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8011bb6:	89fb      	ldrh	r3, [r7, #14]
 8011bb8:	2b0f      	cmp	r3, #15
 8011bba:	d802      	bhi.n	8011bc2 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011bbc:	f06f 0308 	mvn.w	r3, #8
 8011bc0:	e04d      	b.n	8011c5e <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011bc2:	68b9      	ldr	r1, [r7, #8]
 8011bc4:	2002      	movs	r0, #2
 8011bc6:	f7f9 f870 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	789a      	ldrb	r2, [r3, #2]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	78da      	ldrb	r2, [r3, #3]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	3304      	adds	r3, #4
 8011be6:	4619      	mov	r1, r3
 8011be8:	2002      	movs	r0, #2
 8011bea:	f7f9 f85e 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	3306      	adds	r3, #6
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	2002      	movs	r0, #2
 8011bfe:	f7f9 f854 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011c02:	4603      	mov	r3, r0
 8011c04:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	4619      	mov	r1, r3
 8011c10:	2002      	movs	r0, #2
 8011c12:	f7f9 f84a 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011c16:	4603      	mov	r3, r0
 8011c18:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	330a      	adds	r3, #10
 8011c22:	4619      	mov	r1, r3
 8011c24:	2002      	movs	r0, #2
 8011c26:	f7f9 f840 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	330c      	adds	r3, #12
 8011c36:	4619      	mov	r1, r3
 8011c38:	2002      	movs	r0, #2
 8011c3a:	f7f9 f836 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	330e      	adds	r3, #14
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	2002      	movs	r0, #2
 8011c4e:	f7f9 f82c 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	81da      	strh	r2, [r3, #14]

	return status;
 8011c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3718      	adds	r7, #24
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b086      	sub	sp, #24
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	60f8      	str	r0, [r7, #12]
 8011c6e:	607b      	str	r3, [r7, #4]
 8011c70:	460b      	mov	r3, r1
 8011c72:	72fb      	strb	r3, [r7, #11]
 8011c74:	4613      	mov	r3, r2
 8011c76:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8011c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d106      	bne.n	8011c92 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8011c84:	2232      	movs	r2, #50	; 0x32
 8011c86:	2104      	movs	r1, #4
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f7ff fdd0 	bl	801182e <VL53L1_nvm_enable>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8011c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d107      	bne.n	8011caa <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8011c9a:	7aba      	ldrb	r2, [r7, #10]
 8011c9c:	7af9      	ldrb	r1, [r7, #11]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	f7ff fe2a 	bl	80118fa <VL53L1_nvm_read>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8011caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d104      	bne.n	8011cbc <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8011cb2:	68f8      	ldr	r0, [r7, #12]
 8011cb4:	f7ff fe7f 	bl	80119b6 <VL53L1_nvm_disable>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8011cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3718      	adds	r7, #24
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011cd6:	f107 0308 	add.w	r3, r7, #8
 8011cda:	2201      	movs	r2, #1
 8011cdc:	212e      	movs	r1, #46	; 0x2e
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff ffc1 	bl	8011c66 <VL53L1_read_nvm_raw_data>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d108      	bne.n	8011d02 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8011cf0:	f107 0308 	add.w	r3, r7, #8
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	2004      	movs	r0, #4
 8011cfa:	f7ff fe92 	bl	8011a22 <VL53L1_nvm_decode_optical_centre>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8011d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3710      	adds	r7, #16
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}

08011d0e <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8011d0e:	b580      	push	{r7, lr}
 8011d10:	b092      	sub	sp, #72	; 0x48
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
 8011d16:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011d1e:	f107 030c 	add.w	r3, r7, #12
 8011d22:	220e      	movs	r2, #14
 8011d24:	2157      	movs	r1, #87	; 0x57
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff ff9d 	bl	8011c66 <VL53L1_read_nvm_raw_data>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011d32:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d109      	bne.n	8011d4e <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8011d3a:	f107 030c 	add.w	r3, r7, #12
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	4619      	mov	r1, r3
 8011d42:	2038      	movs	r0, #56	; 0x38
 8011d44:	f7ff fe9d 	bl	8011a82 <VL53L1_nvm_decode_cal_peak_rate_map>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8011d4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3748      	adds	r7, #72	; 0x48
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b086      	sub	sp, #24
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011d64:	2300      	movs	r3, #0
 8011d66:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011d68:	f107 030c 	add.w	r3, r7, #12
 8011d6c:	2202      	movs	r2, #2
 8011d6e:	2165      	movs	r1, #101	; 0x65
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff ff78 	bl	8011c66 <VL53L1_read_nvm_raw_data>
 8011d76:	4603      	mov	r3, r0
 8011d78:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d108      	bne.n	8011d94 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8011d82:	f107 030c 	add.w	r3, r7, #12
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	2008      	movs	r0, #8
 8011d8c:	f7ff fecf 	bl	8011b2e <VL53L1_nvm_decode_additional_offset_cal_data>
 8011d90:	4603      	mov	r3, r0
 8011d92:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8011d94:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b08a      	sub	sp, #40	; 0x28
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	460b      	mov	r3, r1
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011dae:	2300      	movs	r3, #0
 8011db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8011db4:	897b      	ldrh	r3, [r7, #10]
 8011db6:	089b      	lsrs	r3, r3, #2
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	b2d9      	uxtb	r1, r3
 8011dbc:	f107 0314 	add.w	r3, r7, #20
 8011dc0:	2204      	movs	r2, #4
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7ff ff4f 	bl	8011c66 <VL53L1_read_nvm_raw_data>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d109      	bne.n	8011dea <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8011dd6:	f107 0314 	add.w	r3, r7, #20
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	2010      	movs	r0, #16
 8011de0:	f7ff fee0 	bl	8011ba4 <VL53L1_nvm_decode_fmt_range_results_data>
 8011de4:	4603      	mov	r3, r0
 8011de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8011dea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3728      	adds	r7, #40	; 0x28
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b086      	sub	sp, #24
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	60f8      	str	r0, [r7, #12]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	607a      	str	r2, [r7, #4]
 8011e02:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8011e08:	897b      	ldrh	r3, [r7, #10]
 8011e0a:	2b0a      	cmp	r3, #10
 8011e0c:	d802      	bhi.n	8011e14 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011e0e:	f06f 0309 	mvn.w	r3, #9
 8011e12:	e047      	b.n	8011ea4 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e1c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8011e2a:	f002 020f 	and.w	r2, r2, #15
 8011e2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8011e30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011e3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8011e40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011e4a:	f002 0203 	and.w	r2, r2, #3
 8011e4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8011e50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011e5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011e5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8011e60:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	88d8      	ldrh	r0, [r3, #6]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	3305      	adds	r3, #5
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	2102      	movs	r1, #2
 8011e6e:	f7f8 fef1 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8011e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8011e84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8011e8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8011e92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011e94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8011e9a:	68fa      	ldr	r2, [r7, #12]
 8011e9c:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8011e9e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	607a      	str	r2, [r7, #4]
 8011eb8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8011ebe:	89fb      	ldrh	r3, [r7, #14]
 8011ec0:	2b0a      	cmp	r3, #10
 8011ec2:	d802      	bhi.n	8011eca <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011ec4:	f06f 0309 	mvn.w	r3, #9
 8011ec8:	e046      	b.n	8011f58 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ed2:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	3301      	adds	r3, #1
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f003 030f 	and.w	r3, r3, #15
 8011ee2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	3302      	adds	r3, #2
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ef2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	3303      	adds	r3, #3
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	f003 0303 	and.w	r3, r3, #3
 8011f02:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	3304      	adds	r3, #4
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f12:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	3305      	adds	r3, #5
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	2002      	movs	r0, #2
 8011f20:	f7f8 fec3 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8011f24:	4603      	mov	r3, r0
 8011f26:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	79da      	ldrb	r2, [r3, #7]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	7a1a      	ldrb	r2, [r3, #8]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	3309      	adds	r3, #9
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f46:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	7a9a      	ldrb	r2, [r3, #10]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8011f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3718      	adds	r7, #24
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b086      	sub	sp, #24
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d108      	bne.n	8011f88 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8011f76:	f107 020c 	add.w	r2, r7, #12
 8011f7a:	230b      	movs	r3, #11
 8011f7c:	2101      	movs	r1, #1
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f002 f91e 	bl	80141c0 <VL53L1_ReadMulti>
 8011f84:	4603      	mov	r3, r0
 8011f86:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8011f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d108      	bne.n	8011fa2 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8011f90:	f107 030c 	add.w	r3, r7, #12
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	4619      	mov	r1, r3
 8011f98:	200b      	movs	r0, #11
 8011f9a:	f7ff ff87 	bl	8011eac <VL53L1_i2c_decode_static_nvm_managed>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8011fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3718      	adds	r7, #24
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b086      	sub	sp, #24
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	60f8      	str	r0, [r7, #12]
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	607a      	str	r2, [r7, #4]
 8011fba:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8011fc0:	897b      	ldrh	r3, [r7, #10]
 8011fc2:	2b16      	cmp	r3, #22
 8011fc4:	d802      	bhi.n	8011fcc <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011fc6:	f06f 0309 	mvn.w	r3, #9
 8011fca:	e076      	b.n	80120ba <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8011fdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8011fe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8011ff0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8011ffa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012004:	f002 020f 	and.w	r2, r2, #15
 8012008:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801200a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012014:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801201e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012022:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012024:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801202e:	f002 0203 	and.w	r2, r2, #3
 8012032:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012034:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	8958      	ldrh	r0, [r3, #10]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3309      	adds	r3, #9
 801203e:	461a      	mov	r2, r3
 8012040:	2102      	movs	r1, #2
 8012042:	f7f8 fe07 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	330b      	adds	r3, #11
 8012050:	461a      	mov	r2, r3
 8012052:	2102      	movs	r1, #2
 8012054:	f7f8 fe49 	bl	800acea <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	330d      	adds	r3, #13
 8012062:	461a      	mov	r2, r3
 8012064:	2102      	movs	r1, #2
 8012066:	f7f8 fe40 	bl	800acea <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	8a18      	ldrh	r0, [r3, #16]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	330f      	adds	r3, #15
 8012072:	461a      	mov	r2, r3
 8012074:	2102      	movs	r1, #2
 8012076:	f7f8 fded 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8012080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012084:	b218      	sxth	r0, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	3311      	adds	r3, #17
 801208a:	461a      	mov	r2, r3
 801208c:	2102      	movs	r1, #2
 801208e:	f7f8 fe2c 	bl	800acea <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3313      	adds	r3, #19
 801209c:	461a      	mov	r2, r3
 801209e:	2102      	movs	r1, #2
 80120a0:	f7f8 fe23 	bl	800acea <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	3315      	adds	r3, #21
 80120ae:	461a      	mov	r2, r3
 80120b0:	2102      	movs	r1, #2
 80120b2:	f7f8 fe1a 	bl	800acea <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80120b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b086      	sub	sp, #24
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	4603      	mov	r3, r0
 80120ca:	60b9      	str	r1, [r7, #8]
 80120cc:	607a      	str	r2, [r7, #4]
 80120ce:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80120d4:	89fb      	ldrh	r3, [r7, #14]
 80120d6:	2b16      	cmp	r3, #22
 80120d8:	d802      	bhi.n	80120e0 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80120da:	f06f 0309 	mvn.w	r3, #9
 80120de:	e079      	b.n	80121d4 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	785a      	ldrb	r2, [r3, #1]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	789a      	ldrb	r2, [r3, #2]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	78da      	ldrb	r2, [r3, #3]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	791a      	ldrb	r2, [r3, #4]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	3305      	adds	r3, #5
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 030f 	and.w	r3, r3, #15
 8012112:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	799a      	ldrb	r2, [r3, #6]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	3307      	adds	r3, #7
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801212a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	3308      	adds	r3, #8
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	f003 0303 	and.w	r3, r3, #3
 801213a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	3309      	adds	r3, #9
 8012144:	4619      	mov	r1, r3
 8012146:	2002      	movs	r0, #2
 8012148:	f7f8 fdaf 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801214c:	4603      	mov	r3, r0
 801214e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	330b      	adds	r3, #11
 8012158:	4619      	mov	r1, r3
 801215a:	2002      	movs	r0, #2
 801215c:	f7f8 fdf1 	bl	800ad42 <VL53L1_i2c_decode_int16_t>
 8012160:	4603      	mov	r3, r0
 8012162:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	330d      	adds	r3, #13
 801216c:	4619      	mov	r1, r3
 801216e:	2002      	movs	r0, #2
 8012170:	f7f8 fde7 	bl	800ad42 <VL53L1_i2c_decode_int16_t>
 8012174:	4603      	mov	r3, r0
 8012176:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	330f      	adds	r3, #15
 8012180:	4619      	mov	r1, r3
 8012182:	2002      	movs	r0, #2
 8012184:	f7f8 fd91 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012188:	4603      	mov	r3, r0
 801218a:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	3311      	adds	r3, #17
 8012194:	4619      	mov	r1, r3
 8012196:	2002      	movs	r0, #2
 8012198:	f7f8 fdd3 	bl	800ad42 <VL53L1_i2c_decode_int16_t>
 801219c:	4603      	mov	r3, r0
 801219e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121a2:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	3313      	adds	r3, #19
 80121ac:	4619      	mov	r1, r3
 80121ae:	2002      	movs	r0, #2
 80121b0:	f7f8 fdc7 	bl	800ad42 <VL53L1_i2c_decode_int16_t>
 80121b4:	4603      	mov	r3, r0
 80121b6:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	3315      	adds	r3, #21
 80121c0:	4619      	mov	r1, r3
 80121c2:	2002      	movs	r0, #2
 80121c4:	f7f8 fdbd 	bl	800ad42 <VL53L1_i2c_decode_int16_t>
 80121c8:	4603      	mov	r3, r0
 80121ca:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80121d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3718      	adds	r7, #24
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b088      	sub	sp, #32
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80121e6:	2300      	movs	r3, #0
 80121e8:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80121ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d108      	bne.n	8012204 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80121f2:	f107 0208 	add.w	r2, r7, #8
 80121f6:	2317      	movs	r3, #23
 80121f8:	210d      	movs	r1, #13
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f001 ffe0 	bl	80141c0 <VL53L1_ReadMulti>
 8012200:	4603      	mov	r3, r0
 8012202:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d108      	bne.n	801221e <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801220c:	f107 0308 	add.w	r3, r7, #8
 8012210:	683a      	ldr	r2, [r7, #0]
 8012212:	4619      	mov	r1, r3
 8012214:	2017      	movs	r0, #23
 8012216:	f7ff ff54 	bl	80120c2 <VL53L1_i2c_decode_customer_nvm_managed>
 801221a:	4603      	mov	r3, r0
 801221c:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801221e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3720      	adds	r7, #32
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b086      	sub	sp, #24
 801222e:	af00      	add	r7, sp, #0
 8012230:	60f8      	str	r0, [r7, #12]
 8012232:	460b      	mov	r3, r1
 8012234:	607a      	str	r2, [r7, #4]
 8012236:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012238:	2300      	movs	r3, #0
 801223a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 801223c:	897b      	ldrh	r3, [r7, #10]
 801223e:	2b1f      	cmp	r3, #31
 8012240:	d802      	bhi.n	8012248 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012242:	f06f 0309 	mvn.w	r3, #9
 8012246:	e0cf      	b.n	80123e8 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	2102      	movs	r1, #2
 8012250:	4618      	mov	r0, r3
 8012252:	f7f8 fcff 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801225e:	f002 0201 	and.w	r2, r2, #1
 8012262:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012264:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801226e:	f002 020f 	and.w	r2, r2, #15
 8012272:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012274:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801227e:	f002 020f 	and.w	r2, r2, #15
 8012282:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012284:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801228e:	f002 021f 	and.w	r2, r2, #31
 8012292:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012294:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801229e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80122a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80122a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80122ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80122b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80122b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80122be:	f002 0201 	and.w	r2, r2, #1
 80122c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80122c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80122ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80122d8:	f002 0201 	and.w	r2, r2, #1
 80122dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80122de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80122e8:	f002 0203 	and.w	r2, r2, #3
 80122ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80122ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80122f8:	f002 021f 	and.w	r2, r2, #31
 80122fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80122fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8012308:	f002 0203 	and.w	r2, r2, #3
 801230c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801230e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012318:	f002 0203 	and.w	r2, r2, #3
 801231c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801231e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012328:	f002 0207 	and.w	r2, r2, #7
 801232c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801232e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012338:	f002 021f 	and.w	r2, r2, #31
 801233c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801233e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012348:	f002 0201 	and.w	r2, r2, #1
 801234c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801234e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012358:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012362:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801236c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012372:	68fa      	ldr	r2, [r7, #12]
 8012374:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012376:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8012380:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 801238a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	8b18      	ldrh	r0, [r3, #24]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	3318      	adds	r3, #24
 8012394:	461a      	mov	r2, r3
 8012396:	2102      	movs	r1, #2
 8012398:	f7f8 fc5c 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80123a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80123ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80123b8:	f002 020f 	and.w	r2, r2, #15
 80123bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80123be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80123c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80123d2:	f002 020f 	and.w	r2, r2, #15
 80123d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80123d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80123e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80123e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3718      	adds	r7, #24
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	460b      	mov	r3, r1
 80123fa:	607a      	str	r2, [r7, #4]
 80123fc:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123fe:	2300      	movs	r3, #0
 8012400:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8012402:	897b      	ldrh	r3, [r7, #10]
 8012404:	2b15      	cmp	r3, #21
 8012406:	d802      	bhi.n	801240e <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012408:	f06f 0309 	mvn.w	r3, #9
 801240c:	e070      	b.n	80124f0 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801241e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012424:	68fa      	ldr	r2, [r7, #12]
 8012426:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012428:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012436:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012438:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 801243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012442:	b298      	uxth	r0, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3304      	adds	r3, #4
 8012448:	461a      	mov	r2, r3
 801244a:	2102      	movs	r1, #2
 801244c:	f7f8 fc02 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801245c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801245e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012468:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012472:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 801247c:	f002 0201 	and.w	r2, r2, #1
 8012480:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012482:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 801248c:	f002 0207 	and.w	r2, r2, #7
 8012490:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012492:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	8998      	ldrh	r0, [r3, #12]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	330c      	adds	r3, #12
 801249c:	461a      	mov	r2, r3
 801249e:	2102      	movs	r1, #2
 80124a0:	f7f8 fbd8 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	89d8      	ldrh	r0, [r3, #14]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	330e      	adds	r3, #14
 80124ac:	461a      	mov	r2, r3
 80124ae:	2102      	movs	r1, #2
 80124b0:	f7f8 fbd0 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	8a18      	ldrh	r0, [r3, #16]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	3310      	adds	r3, #16
 80124bc:	461a      	mov	r2, r3
 80124be:	2102      	movs	r1, #2
 80124c0:	f7f8 fbc8 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80124cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80124d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80124dc:	68fa      	ldr	r2, [r7, #12]
 80124de:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80124e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80124ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80124ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3718      	adds	r7, #24
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	460b      	mov	r3, r1
 8012502:	607a      	str	r2, [r7, #4]
 8012504:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012506:	2300      	movs	r3, #0
 8012508:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 801250a:	897b      	ldrh	r3, [r7, #10]
 801250c:	2b16      	cmp	r3, #22
 801250e:	d802      	bhi.n	8012516 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012510:	f06f 0309 	mvn.w	r3, #9
 8012514:	e06e      	b.n	80125f4 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	f003 030f 	and.w	r3, r3, #15
 801251e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801252c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012536:	f002 020f 	and.w	r2, r2, #15
 801253a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801253c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012546:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012550:	f002 020f 	and.w	r2, r2, #15
 8012554:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012556:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012560:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801256a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801256e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012570:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801257a:	f002 020f 	and.w	r2, r2, #15
 801257e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012580:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012586:	68fa      	ldr	r2, [r7, #12]
 8012588:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801258a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012594:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012598:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801259a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	8958      	ldrh	r0, [r3, #10]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	330a      	adds	r3, #10
 80125a4:	461a      	mov	r2, r3
 80125a6:	2102      	movs	r1, #2
 80125a8:	f7f8 fb54 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	8998      	ldrh	r0, [r3, #12]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	330c      	adds	r3, #12
 80125b4:	461a      	mov	r2, r3
 80125b6:	2102      	movs	r1, #2
 80125b8:	f7f8 fb4c 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80125c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80125ce:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6918      	ldr	r0, [r3, #16]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3312      	adds	r3, #18
 80125d8:	461a      	mov	r2, r3
 80125da:	2104      	movs	r1, #4
 80125dc:	f7f8 fbda 	bl	800ad94 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80125e8:	f002 0201 	and.w	r2, r2, #1
 80125ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80125ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80125f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3718      	adds	r7, #24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	460b      	mov	r3, r1
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801260a:	2300      	movs	r3, #0
 801260c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 801260e:	897b      	ldrh	r3, [r7, #10]
 8012610:	2b11      	cmp	r3, #17
 8012612:	d802      	bhi.n	801261a <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012614:	f06f 0309 	mvn.w	r3, #9
 8012618:	e071      	b.n	80126fe <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	f003 0303 	and.w	r3, r3, #3
 8012622:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	8858      	ldrh	r0, [r3, #2]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3301      	adds	r3, #1
 8012630:	461a      	mov	r2, r3
 8012632:	2102      	movs	r1, #2
 8012634:	f7f8 fb0e 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	8898      	ldrh	r0, [r3, #4]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	3303      	adds	r3, #3
 8012640:	461a      	mov	r2, r3
 8012642:	2102      	movs	r1, #2
 8012644:	f7f8 fb06 	bl	800ac54 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012650:	f002 0201 	and.w	r2, r2, #1
 8012654:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012660:	f002 0207 	and.w	r2, r2, #7
 8012664:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012666:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012670:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801267a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012688:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801268a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012698:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801269a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80126a4:	f002 0203 	and.w	r2, r2, #3
 80126a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80126aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80126b4:	f002 0203 	and.w	r2, r2, #3
 80126b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80126ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80126c4:	f002 020f 	and.w	r2, r2, #15
 80126c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80126ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80126d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80126da:	68fa      	ldr	r2, [r7, #12]
 80126dc:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80126de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80126e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80126f2:	f002 0203 	and.w	r2, r2, #3
 80126f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80126f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80126fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3718      	adds	r7, #24
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012706:	b480      	push	{r7}
 8012708:	b087      	sub	sp, #28
 801270a:	af00      	add	r7, sp, #0
 801270c:	60f8      	str	r0, [r7, #12]
 801270e:	460b      	mov	r3, r1
 8012710:	607a      	str	r2, [r7, #4]
 8012712:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012714:	2300      	movs	r3, #0
 8012716:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012718:	897b      	ldrh	r3, [r7, #10]
 801271a:	2b04      	cmp	r3, #4
 801271c:	d802      	bhi.n	8012724 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801271e:	f06f 0309 	mvn.w	r3, #9
 8012722:	e025      	b.n	8012770 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 0301 	and.w	r3, r3, #1
 801272c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801273a:	f002 0201 	and.w	r2, r2, #1
 801273e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012740:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801274a:	f002 0201 	and.w	r2, r2, #1
 801274e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012750:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 801275a:	f002 0203 	and.w	r2, r2, #3
 801275e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012760:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801276a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801276c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012770:	4618      	mov	r0, r3
 8012772:	371c      	adds	r7, #28
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012786:	2300      	movs	r3, #0
 8012788:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d108      	bne.n	80127a4 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012792:	f107 0308 	add.w	r3, r7, #8
 8012796:	461a      	mov	r2, r3
 8012798:	2105      	movs	r1, #5
 801279a:	6838      	ldr	r0, [r7, #0]
 801279c:	f7ff ffb3 	bl	8012706 <VL53L1_i2c_encode_system_control>
 80127a0:	4603      	mov	r3, r0
 80127a2:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80127a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d108      	bne.n	80127be <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80127ac:	f107 0208 	add.w	r2, r7, #8
 80127b0:	2305      	movs	r3, #5
 80127b2:	2183      	movs	r1, #131	; 0x83
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f001 fccd 	bl	8014154 <VL53L1_WriteMulti>
 80127ba:	4603      	mov	r3, r0
 80127bc:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80127be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b086      	sub	sp, #24
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	4603      	mov	r3, r0
 80127d2:	60b9      	str	r1, [r7, #8]
 80127d4:	607a      	str	r2, [r7, #4]
 80127d6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127d8:	2300      	movs	r3, #0
 80127da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 80127dc:	89fb      	ldrh	r3, [r7, #14]
 80127de:	2b2b      	cmp	r3, #43	; 0x2b
 80127e0:	d802      	bhi.n	80127e8 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127e2:	f06f 0309 	mvn.w	r3, #9
 80127e6:	e0e2      	b.n	80129ae <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127f0:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	785a      	ldrb	r2, [r3, #1]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	3302      	adds	r3, #2
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f003 030f 	and.w	r3, r3, #15
 8012808:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	78da      	ldrb	r2, [r3, #3]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	3304      	adds	r3, #4
 801281a:	4619      	mov	r1, r3
 801281c:	2002      	movs	r0, #2
 801281e:	f7f8 fa44 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012822:	4603      	mov	r3, r0
 8012824:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	3306      	adds	r3, #6
 801282e:	4619      	mov	r1, r3
 8012830:	2002      	movs	r0, #2
 8012832:	f7f8 fa3a 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012836:	4603      	mov	r3, r0
 8012838:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	3308      	adds	r3, #8
 8012842:	4619      	mov	r1, r3
 8012844:	2002      	movs	r0, #2
 8012846:	f7f8 fa30 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801284a:	4603      	mov	r3, r0
 801284c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	330a      	adds	r3, #10
 8012856:	4619      	mov	r1, r3
 8012858:	2002      	movs	r0, #2
 801285a:	f7f8 fa26 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801285e:	4603      	mov	r3, r0
 8012860:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	330c      	adds	r3, #12
 801286a:	4619      	mov	r1, r3
 801286c:	2002      	movs	r0, #2
 801286e:	f7f8 fa1c 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	330e      	adds	r3, #14
 801287e:	4619      	mov	r1, r3
 8012880:	2002      	movs	r0, #2
 8012882:	f7f8 fa12 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012886:	4603      	mov	r3, r0
 8012888:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	3310      	adds	r3, #16
 8012892:	4619      	mov	r1, r3
 8012894:	2002      	movs	r0, #2
 8012896:	f7f8 fa08 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	3312      	adds	r3, #18
 80128a6:	4619      	mov	r1, r3
 80128a8:	2002      	movs	r0, #2
 80128aa:	f7f8 f9fe 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80128ae:	4603      	mov	r3, r0
 80128b0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	3314      	adds	r3, #20
 80128ba:	4619      	mov	r1, r3
 80128bc:	2002      	movs	r0, #2
 80128be:	f7f8 f9f4 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80128c2:	4603      	mov	r3, r0
 80128c4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	3316      	adds	r3, #22
 80128ce:	4619      	mov	r1, r3
 80128d0:	2002      	movs	r0, #2
 80128d2:	f7f8 f9ea 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80128d6:	4603      	mov	r3, r0
 80128d8:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	3318      	adds	r3, #24
 80128e2:	4619      	mov	r1, r3
 80128e4:	2002      	movs	r0, #2
 80128e6:	f7f8 f9e0 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80128ea:	4603      	mov	r3, r0
 80128ec:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	331a      	adds	r3, #26
 80128f6:	4619      	mov	r1, r3
 80128f8:	2002      	movs	r0, #2
 80128fa:	f7f8 f9d6 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 80128fe:	4603      	mov	r3, r0
 8012900:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	331c      	adds	r3, #28
 801290a:	4619      	mov	r1, r3
 801290c:	2002      	movs	r0, #2
 801290e:	f7f8 f9cc 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012912:	4603      	mov	r3, r0
 8012914:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	331e      	adds	r3, #30
 801291e:	4619      	mov	r1, r3
 8012920:	2002      	movs	r0, #2
 8012922:	f7f8 f9c2 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	3320      	adds	r3, #32
 8012932:	4619      	mov	r1, r3
 8012934:	2002      	movs	r0, #2
 8012936:	f7f8 f9b8 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801293a:	4603      	mov	r3, r0
 801293c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	3322      	adds	r3, #34	; 0x22
 8012946:	4619      	mov	r1, r3
 8012948:	2002      	movs	r0, #2
 801294a:	f7f8 f9ae 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801294e:	4603      	mov	r3, r0
 8012950:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	3324      	adds	r3, #36	; 0x24
 801295a:	4619      	mov	r1, r3
 801295c:	2002      	movs	r0, #2
 801295e:	f7f8 f9a4 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012962:	4603      	mov	r3, r0
 8012964:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	3326      	adds	r3, #38	; 0x26
 801296e:	4619      	mov	r1, r3
 8012970:	2002      	movs	r0, #2
 8012972:	f7f8 f99a 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	3328      	adds	r3, #40	; 0x28
 8012982:	4619      	mov	r1, r3
 8012984:	2002      	movs	r0, #2
 8012986:	f7f8 f990 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 801298a:	4603      	mov	r3, r0
 801298c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80129aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3718      	adds	r7, #24
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b086      	sub	sp, #24
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	4603      	mov	r3, r0
 80129be:	60b9      	str	r1, [r7, #8]
 80129c0:	607a      	str	r2, [r7, #4]
 80129c2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80129c4:	2300      	movs	r3, #0
 80129c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80129c8:	89fb      	ldrh	r3, [r7, #14]
 80129ca:	2b20      	cmp	r3, #32
 80129cc:	d802      	bhi.n	80129d4 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80129ce:	f06f 0309 	mvn.w	r3, #9
 80129d2:	e04d      	b.n	8012a70 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80129d4:	68b9      	ldr	r1, [r7, #8]
 80129d6:	2004      	movs	r0, #4
 80129d8:	f7f8 fa06 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 80129dc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	3304      	adds	r3, #4
 80129e6:	4619      	mov	r1, r3
 80129e8:	2004      	movs	r0, #4
 80129ea:	f7f8 f9fd 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 80129ee:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	3308      	adds	r3, #8
 80129f8:	4619      	mov	r1, r3
 80129fa:	2004      	movs	r0, #4
 80129fc:	f7f8 fa11 	bl	800ae22 <VL53L1_i2c_decode_int32_t>
 8012a00:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	330c      	adds	r3, #12
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	2004      	movs	r0, #4
 8012a0e:	f7f8 f9eb 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012a12:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	3310      	adds	r3, #16
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	2004      	movs	r0, #4
 8012a20:	f7f8 f9e2 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012a24:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	3314      	adds	r3, #20
 8012a2e:	4619      	mov	r1, r3
 8012a30:	2004      	movs	r0, #4
 8012a32:	f7f8 f9d9 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012a36:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	3318      	adds	r3, #24
 8012a40:	4619      	mov	r1, r3
 8012a42:	2004      	movs	r0, #4
 8012a44:	f7f8 f9ed 	bl	800ae22 <VL53L1_i2c_decode_int32_t>
 8012a48:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	331c      	adds	r3, #28
 8012a52:	4619      	mov	r1, r3
 8012a54:	2004      	movs	r0, #4
 8012a56:	f7f8 f9c7 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012a5a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3718      	adds	r7, #24
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b086      	sub	sp, #24
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	607a      	str	r2, [r7, #4]
 8012a84:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012a86:	2300      	movs	r3, #0
 8012a88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012a8a:	89fb      	ldrh	r3, [r7, #14]
 8012a8c:	2b37      	cmp	r3, #55	; 0x37
 8012a8e:	d802      	bhi.n	8012a96 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a90:	f06f 0309 	mvn.w	r3, #9
 8012a94:	e15e      	b.n	8012d54 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012a96:	68b9      	ldr	r1, [r7, #8]
 8012a98:	2002      	movs	r0, #2
 8012a9a:	f7f8 f906 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	3302      	adds	r3, #2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ab0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	3303      	adds	r3, #3
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ac0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	3304      	adds	r3, #4
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0303 	and.w	r3, r3, #3
 8012ad0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	3305      	adds	r3, #5
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	f003 0301 	and.w	r3, r3, #1
 8012ae0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	3306      	adds	r3, #6
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012af0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	3307      	adds	r3, #7
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b00:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	3308      	adds	r3, #8
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	2002      	movs	r0, #2
 8012b0e:	f7f8 f8cc 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012b12:	4603      	mov	r3, r0
 8012b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012b18:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	330a      	adds	r3, #10
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	f003 0303 	and.w	r3, r3, #3
 8012b28:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	330b      	adds	r3, #11
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	f003 0303 	and.w	r3, r3, #3
 8012b38:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	330c      	adds	r3, #12
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 030f 	and.w	r3, r3, #15
 8012b48:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	330d      	adds	r3, #13
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	f003 0307 	and.w	r3, r3, #7
 8012b58:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	330e      	adds	r3, #14
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	f003 0301 	and.w	r3, r3, #1
 8012b68:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	330f      	adds	r3, #15
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	f003 0303 	and.w	r3, r3, #3
 8012b78:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	7c1a      	ldrb	r2, [r3, #16]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	7c5a      	ldrb	r2, [r3, #17]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	3312      	adds	r3, #18
 8012b92:	4619      	mov	r1, r3
 8012b94:	2002      	movs	r0, #2
 8012b96:	f7f8 f888 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ba0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	3316      	adds	r3, #22
 8012baa:	4619      	mov	r1, r3
 8012bac:	2002      	movs	r0, #2
 8012bae:	f7f8 f87c 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	3318      	adds	r3, #24
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	2002      	movs	r0, #2
 8012bc2:	f7f8 f872 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	331a      	adds	r3, #26
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	331b      	adds	r3, #27
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	f003 0307 	and.w	r3, r3, #7
 8012be8:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	7f1a      	ldrb	r2, [r3, #28]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	7f5a      	ldrb	r2, [r3, #29]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	331e      	adds	r3, #30
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c08:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	331f      	adds	r3, #31
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c18:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	3320      	adds	r3, #32
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f003 0303 	and.w	r3, r3, #3
 8012c28:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	3321      	adds	r3, #33	; 0x21
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 030f 	and.w	r3, r3, #15
 8012c38:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	3325      	adds	r3, #37	; 0x25
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	3326      	adds	r3, #38	; 0x26
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	f003 0303 	and.w	r3, r3, #3
 8012c7e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	3327      	adds	r3, #39	; 0x27
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	f003 031f 	and.w	r3, r3, #31
 8012c90:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	3328      	adds	r3, #40	; 0x28
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	f003 031f 	and.w	r3, r3, #31
 8012ca2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	3329      	adds	r3, #41	; 0x29
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	f003 031f 	and.w	r3, r3, #31
 8012cb4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	332a      	adds	r3, #42	; 0x2a
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	332b      	adds	r3, #43	; 0x2b
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	f003 0301 	and.w	r3, r3, #1
 8012cd8:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	332c      	adds	r3, #44	; 0x2c
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	f003 0303 	and.w	r3, r3, #3
 8012cea:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	332d      	adds	r3, #45	; 0x2d
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cfc:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	332e      	adds	r3, #46	; 0x2e
 8012d08:	4619      	mov	r1, r3
 8012d0a:	2004      	movs	r0, #4
 8012d0c:	f7f8 f86c 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012d10:	4603      	mov	r3, r0
 8012d12:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	3332      	adds	r3, #50	; 0x32
 8012d1e:	4619      	mov	r1, r3
 8012d20:	2004      	movs	r0, #4
 8012d22:	f7f8 f861 	bl	800ade8 <VL53L1_i2c_decode_uint32_t>
 8012d26:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	3336      	adds	r3, #54	; 0x36
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	f003 0301 	and.w	r3, r3, #1
 8012d36:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	3337      	adds	r3, #55	; 0x37
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f003 0301 	and.w	r3, r3, #1
 8012d48:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8012d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3718      	adds	r7, #24
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8012d6e:	89fb      	ldrh	r3, [r7, #14]
 8012d70:	2b30      	cmp	r3, #48	; 0x30
 8012d72:	d802      	bhi.n	8012d7a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012d74:	f06f 0309 	mvn.w	r3, #9
 8012d78:	e112      	b.n	8012fa0 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	785a      	ldrb	r2, [r3, #1]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	789a      	ldrb	r2, [r3, #2]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	3303      	adds	r3, #3
 8012d96:	4619      	mov	r1, r3
 8012d98:	2002      	movs	r0, #2
 8012d9a:	f7f7 ff86 	bl	800acaa <VL53L1_i2c_decode_uint16_t>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	3305      	adds	r3, #5
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012db0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	3306      	adds	r3, #6
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	f003 0307 	and.w	r3, r3, #7
 8012dc0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	3307      	adds	r3, #7
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	f003 0307 	and.w	r3, r3, #7
 8012dd0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	3308      	adds	r3, #8
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012de0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	3309      	adds	r3, #9
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012df0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	330a      	adds	r3, #10
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 0301 	and.w	r3, r3, #1
 8012e00:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	330b      	adds	r3, #11
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e10:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	330c      	adds	r3, #12
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	f003 0301 	and.w	r3, r3, #1
 8012e20:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	330d      	adds	r3, #13
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e30:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	330e      	adds	r3, #14
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e40:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	7bda      	ldrb	r2, [r3, #15]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	7c1a      	ldrb	r2, [r3, #16]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	7c5a      	ldrb	r2, [r3, #17]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	7c9a      	ldrb	r2, [r3, #18]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	7cda      	ldrb	r2, [r3, #19]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	7d1a      	ldrb	r2, [r3, #20]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	7d5a      	ldrb	r2, [r3, #21]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	7d9a      	ldrb	r2, [r3, #22]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	7dda      	ldrb	r2, [r3, #23]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	7e1a      	ldrb	r2, [r3, #24]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	7e5a      	ldrb	r2, [r3, #25]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	7e9a      	ldrb	r2, [r3, #26]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	7eda      	ldrb	r2, [r3, #27]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	7f1a      	ldrb	r2, [r3, #28]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	7f5a      	ldrb	r2, [r3, #29]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	7f9a      	ldrb	r2, [r3, #30]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	7fda      	ldrb	r2, [r3, #31]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8012f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3718      	adds	r7, #24
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b090      	sub	sp, #64	; 0x40
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012fb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10a      	bne.n	8012fd6 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8012fc0:	f107 020c 	add.w	r2, r7, #12
 8012fc4:	2331      	movs	r3, #49	; 0x31
 8012fc6:	f240 110f 	movw	r1, #271	; 0x10f
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f001 f8f8 	bl	80141c0 <VL53L1_ReadMulti>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012fd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d109      	bne.n	8012ff2 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8012fde:	f107 030c 	add.w	r3, r7, #12
 8012fe2:	683a      	ldr	r2, [r7, #0]
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	2031      	movs	r0, #49	; 0x31
 8012fe8:	f7ff feb8 	bl	8012d5c <VL53L1_i2c_decode_nvm_copy_data>
 8012fec:	4603      	mov	r3, r0
 8012fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3740      	adds	r7, #64	; 0x40
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8012ffe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013002:	b0d6      	sub	sp, #344	; 0x158
 8013004:	af00      	add	r7, sp, #0
 8013006:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801300a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801300e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013012:	4603      	mov	r3, r0
 8013014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013018:	23f1      	movs	r3, #241	; 0xf1
 801301a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801301e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013022:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013026:	2300      	movs	r3, #0
 8013028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 801302c:	f04f 0200 	mov.w	r2, #0
 8013030:	f04f 0300 	mov.w	r3, #0
 8013034:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013038:	f04f 0200 	mov.w	r2, #0
 801303c:	f04f 0300 	mov.w	r3, #0
 8013040:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013044:	f04f 0200 	mov.w	r2, #0
 8013048:	f04f 0300 	mov.w	r3, #0
 801304c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8013050:	f04f 0200 	mov.w	r2, #0
 8013054:	f04f 0300 	mov.w	r3, #0
 8013058:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 801305c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013064:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8013066:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801306a:	2b00      	cmp	r3, #0
 801306c:	f000 8322 	beq.w	80136b4 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8013070:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013074:	4618      	mov	r0, r3
 8013076:	f7fb fa23 	bl	800e4c0 <VL53L1_calc_pll_period_mm>
 801307a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801307e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8013082:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013086:	429a      	cmp	r2, r3
 8013088:	d91a      	bls.n	80130c0 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801308a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801308e:	2200      	movs	r2, #0
 8013090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013094:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8013098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801309c:	2200      	movs	r2, #0
 801309e:	4698      	mov	r8, r3
 80130a0:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80130a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80130a6:	460b      	mov	r3, r1
 80130a8:	ebb3 0308 	subs.w	r3, r3, r8
 80130ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80130ae:	4613      	mov	r3, r2
 80130b0:	eb63 0309 	sbc.w	r3, r3, r9
 80130b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80130b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80130ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80130be:	e013      	b.n	80130e8 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80130c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80130c4:	2200      	movs	r2, #0
 80130c6:	469a      	mov	sl, r3
 80130c8:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80130ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80130ce:	2200      	movs	r2, #0
 80130d0:	461c      	mov	r4, r3
 80130d2:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80130d4:	ebba 0304 	subs.w	r3, sl, r4
 80130d8:	633b      	str	r3, [r7, #48]	; 0x30
 80130da:	eb6b 0305 	sbc.w	r3, fp, r5
 80130de:	637b      	str	r3, [r7, #52]	; 0x34
 80130e0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80130e4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80130e8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80130ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d91f      	bls.n	8013134 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80130f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80130f8:	2200      	movs	r2, #0
 80130fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80130fe:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8013102:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013106:	2200      	movs	r2, #0
 8013108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801310c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013110:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013114:	4623      	mov	r3, r4
 8013116:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801311a:	4602      	mov	r2, r0
 801311c:	1a9b      	subs	r3, r3, r2
 801311e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013120:	462b      	mov	r3, r5
 8013122:	460a      	mov	r2, r1
 8013124:	eb63 0302 	sbc.w	r3, r3, r2
 8013128:	62fb      	str	r3, [r7, #44]	; 0x2c
 801312a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801312e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013132:	e01e      	b.n	8013172 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013134:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013138:	2200      	movs	r2, #0
 801313a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801313e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013142:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013146:	2200      	movs	r2, #0
 8013148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801314c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013150:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013154:	4623      	mov	r3, r4
 8013156:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801315a:	4602      	mov	r2, r0
 801315c:	1a9b      	subs	r3, r3, r2
 801315e:	623b      	str	r3, [r7, #32]
 8013160:	462b      	mov	r3, r5
 8013162:	460a      	mov	r2, r1
 8013164:	eb63 0302 	sbc.w	r3, r3, r2
 8013168:	627b      	str	r3, [r7, #36]	; 0x24
 801316a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801316e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8013172:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013176:	4313      	orrs	r3, r2
 8013178:	f000 829c 	beq.w	80136b4 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 801317c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013180:	2200      	movs	r2, #0
 8013182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013186:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801318a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801318e:	2200      	movs	r2, #0
 8013190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013198:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801319c:	4623      	mov	r3, r4
 801319e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80131a2:	4602      	mov	r2, r0
 80131a4:	189b      	adds	r3, r3, r2
 80131a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80131aa:	460b      	mov	r3, r1
 80131ac:	462a      	mov	r2, r5
 80131ae:	eb42 0303 	adc.w	r3, r2, r3
 80131b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80131b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80131ba:	2200      	movs	r2, #0
 80131bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80131c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80131c4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80131c8:	4623      	mov	r3, r4
 80131ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80131ce:	4602      	mov	r2, r0
 80131d0:	189b      	adds	r3, r3, r2
 80131d2:	61bb      	str	r3, [r7, #24]
 80131d4:	460b      	mov	r3, r1
 80131d6:	462a      	mov	r2, r5
 80131d8:	eb42 0303 	adc.w	r3, r2, r3
 80131dc:	61fb      	str	r3, [r7, #28]
 80131de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80131e2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80131e6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80131ea:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80131ee:	f173 0300 	sbcs.w	r3, r3, #0
 80131f2:	d305      	bcc.n	8013200 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80131f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80131f8:	f04f 0300 	mov.w	r3, #0
 80131fc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8013200:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013204:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013208:	fb03 f102 	mul.w	r1, r3, r2
 801320c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013210:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013214:	fb02 f303 	mul.w	r3, r2, r3
 8013218:	18ca      	adds	r2, r1, r3
 801321a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801321e:	fba3 1303 	umull	r1, r3, r3, r3
 8013222:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013226:	460b      	mov	r3, r1
 8013228:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013230:	18d3      	adds	r3, r2, r3
 8013232:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013236:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801323a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801323e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013242:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013246:	f04f 0000 	mov.w	r0, #0
 801324a:	f04f 0100 	mov.w	r1, #0
 801324e:	0219      	lsls	r1, r3, #8
 8013250:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013254:	0210      	lsls	r0, r2, #8
 8013256:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801325a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801325e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013262:	d305      	bcc.n	8013270 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013264:	f04f 32ff 	mov.w	r2, #4294967295
 8013268:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801326c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013270:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013274:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013278:	f7ed f822 	bl	80002c0 <__aeabi_uldivmod>
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013284:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013288:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801328c:	f7ed f818 	bl	80002c0 <__aeabi_uldivmod>
 8013290:	4602      	mov	r2, r0
 8013292:	460b      	mov	r3, r1
 8013294:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8013298:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801329c:	2b80      	cmp	r3, #128	; 0x80
 801329e:	d305      	bcc.n	80132ac <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80132a0:	f04f 32ff 	mov.w	r2, #4294967295
 80132a4:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80132a8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80132ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80132b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80132b4:	fb03 f102 	mul.w	r1, r3, r2
 80132b8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80132bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80132c0:	fb02 f303 	mul.w	r3, r2, r3
 80132c4:	4419      	add	r1, r3
 80132c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80132ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80132ce:	fba2 2303 	umull	r2, r3, r2, r3
 80132d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80132d6:	4613      	mov	r3, r2
 80132d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80132dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132e0:	18cb      	adds	r3, r1, r3
 80132e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80132e6:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80132ea:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80132ee:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80132f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80132f6:	2200      	movs	r2, #0
 80132f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80132fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013300:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013304:	2200      	movs	r2, #0
 8013306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801330a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801330e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013312:	4623      	mov	r3, r4
 8013314:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013318:	4602      	mov	r2, r0
 801331a:	189b      	adds	r3, r3, r2
 801331c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013320:	460b      	mov	r3, r1
 8013322:	462a      	mov	r2, r5
 8013324:	eb42 0303 	adc.w	r3, r2, r3
 8013328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801332c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013330:	2200      	movs	r2, #0
 8013332:	67bb      	str	r3, [r7, #120]	; 0x78
 8013334:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013336:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801333a:	4623      	mov	r3, r4
 801333c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013340:	4602      	mov	r2, r0
 8013342:	189b      	adds	r3, r3, r2
 8013344:	673b      	str	r3, [r7, #112]	; 0x70
 8013346:	460b      	mov	r3, r1
 8013348:	462a      	mov	r2, r5
 801334a:	eb42 0303 	adc.w	r3, r2, r3
 801334e:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013350:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013354:	2200      	movs	r2, #0
 8013356:	66bb      	str	r3, [r7, #104]	; 0x68
 8013358:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801335a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801335e:	4623      	mov	r3, r4
 8013360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013364:	4602      	mov	r2, r0
 8013366:	189b      	adds	r3, r3, r2
 8013368:	613b      	str	r3, [r7, #16]
 801336a:	460b      	mov	r3, r1
 801336c:	462a      	mov	r2, r5
 801336e:	eb42 0303 	adc.w	r3, r2, r3
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013378:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 801337c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013380:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013384:	f173 0300 	sbcs.w	r3, r3, #0
 8013388:	d305      	bcc.n	8013396 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 801338a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801338e:	f04f 0300 	mov.w	r3, #0
 8013392:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8013396:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801339a:	f04f 0000 	mov.w	r0, #0
 801339e:	f04f 0100 	mov.w	r1, #0
 80133a2:	0219      	lsls	r1, r3, #8
 80133a4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80133a8:	0210      	lsls	r0, r2, #8
 80133aa:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 80133ae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80133b2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80133b6:	1884      	adds	r4, r0, r2
 80133b8:	60bc      	str	r4, [r7, #8]
 80133ba:	eb41 0303 	adc.w	r3, r1, r3
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80133c4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80133c8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da05      	bge.n	80133dc <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80133d0:	f04f 32ff 	mov.w	r2, #4294967295
 80133d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80133d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80133dc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d331      	bcc.n	8013448 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80133e4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80133e8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80133ec:	f7ec ff68 	bl	80002c0 <__aeabi_uldivmod>
 80133f0:	4602      	mov	r2, r0
 80133f2:	460b      	mov	r3, r1
 80133f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80133f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133fc:	2200      	movs	r2, #0
 80133fe:	663b      	str	r3, [r7, #96]	; 0x60
 8013400:	667a      	str	r2, [r7, #100]	; 0x64
 8013402:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013406:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801340a:	4622      	mov	r2, r4
 801340c:	fb02 f203 	mul.w	r2, r2, r3
 8013410:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013414:	4629      	mov	r1, r5
 8013416:	fb01 f303 	mul.w	r3, r1, r3
 801341a:	441a      	add	r2, r3
 801341c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013420:	4621      	mov	r1, r4
 8013422:	fba3 1301 	umull	r1, r3, r3, r1
 8013426:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801342a:	460b      	mov	r3, r1
 801342c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013434:	18d3      	adds	r3, r2, r3
 8013436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801343a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801343e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013442:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013446:	e030      	b.n	80134aa <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801344c:	2200      	movs	r2, #0
 801344e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013450:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013456:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801345a:	4622      	mov	r2, r4
 801345c:	fb02 f203 	mul.w	r2, r2, r3
 8013460:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013464:	4629      	mov	r1, r5
 8013466:	fb01 f303 	mul.w	r3, r1, r3
 801346a:	441a      	add	r2, r3
 801346c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013470:	4621      	mov	r1, r4
 8013472:	fba3 1301 	umull	r1, r3, r3, r1
 8013476:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801347a:	460b      	mov	r3, r1
 801347c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013484:	18d3      	adds	r3, r2, r3
 8013486:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801348a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801348e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013492:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013496:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801349a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801349e:	f7ec ff0f 	bl	80002c0 <__aeabi_uldivmod>
 80134a2:	4602      	mov	r2, r0
 80134a4:	460b      	mov	r3, r1
 80134a6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80134aa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	da05      	bge.n	80134be <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 80134b2:	f04f 32ff 	mov.w	r2, #4294967295
 80134b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80134ba:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80134be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	d33d      	bcc.n	8013542 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80134c6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80134ca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80134ce:	f7ec fef7 	bl	80002c0 <__aeabi_uldivmod>
 80134d2:	4602      	mov	r2, r0
 80134d4:	460b      	mov	r3, r1
 80134d6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80134da:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80134de:	f04f 0200 	mov.w	r2, #0
 80134e2:	f04f 0300 	mov.w	r3, #0
 80134e6:	0882      	lsrs	r2, r0, #2
 80134e8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80134ec:	088b      	lsrs	r3, r1, #2
 80134ee:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80134f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134f6:	2200      	movs	r2, #0
 80134f8:	653b      	str	r3, [r7, #80]	; 0x50
 80134fa:	657a      	str	r2, [r7, #84]	; 0x54
 80134fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013500:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013504:	4622      	mov	r2, r4
 8013506:	fb02 f203 	mul.w	r2, r2, r3
 801350a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801350e:	4629      	mov	r1, r5
 8013510:	fb01 f303 	mul.w	r3, r1, r3
 8013514:	4413      	add	r3, r2
 8013516:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801351a:	4621      	mov	r1, r4
 801351c:	fba2 1201 	umull	r1, r2, r2, r1
 8013520:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013524:	460a      	mov	r2, r1
 8013526:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801352a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801352e:	4413      	add	r3, r2
 8013530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013534:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013538:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801353c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013540:	e03c      	b.n	80135bc <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013546:	2200      	movs	r2, #0
 8013548:	64bb      	str	r3, [r7, #72]	; 0x48
 801354a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013550:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013554:	4622      	mov	r2, r4
 8013556:	fb02 f203 	mul.w	r2, r2, r3
 801355a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801355e:	4629      	mov	r1, r5
 8013560:	fb01 f303 	mul.w	r3, r1, r3
 8013564:	4413      	add	r3, r2
 8013566:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801356a:	4621      	mov	r1, r4
 801356c:	fba2 1201 	umull	r1, r2, r2, r1
 8013570:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013574:	460a      	mov	r2, r1
 8013576:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801357a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801357e:	4413      	add	r3, r2
 8013580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013584:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013588:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801358c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013590:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013594:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013598:	f7ec fe92 	bl	80002c0 <__aeabi_uldivmod>
 801359c:	4602      	mov	r2, r0
 801359e:	460b      	mov	r3, r1
 80135a0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80135a4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80135a8:	f04f 0200 	mov.w	r2, #0
 80135ac:	f04f 0300 	mov.w	r3, #0
 80135b0:	0882      	lsrs	r2, r0, #2
 80135b2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80135b6:	088b      	lsrs	r3, r1, #2
 80135b8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80135bc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	da05      	bge.n	80135d0 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 80135c4:	f04f 32ff 	mov.w	r2, #4294967295
 80135c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80135cc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80135d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80135d4:	f04f 0200 	mov.w	r2, #0
 80135d8:	f04f 0300 	mov.w	r3, #0
 80135dc:	0882      	lsrs	r2, r0, #2
 80135de:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80135e2:	088b      	lsrs	r3, r1, #2
 80135e4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80135e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d305      	bcc.n	80135fc <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 80135f0:	f04f 32ff 	mov.w	r2, #4294967295
 80135f4:	f04f 0300 	mov.w	r3, #0
 80135f8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80135fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013600:	2200      	movs	r2, #0
 8013602:	643b      	str	r3, [r7, #64]	; 0x40
 8013604:	647a      	str	r2, [r7, #68]	; 0x44
 8013606:	f04f 0200 	mov.w	r2, #0
 801360a:	f04f 0300 	mov.w	r3, #0
 801360e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013612:	4629      	mov	r1, r5
 8013614:	01cb      	lsls	r3, r1, #7
 8013616:	4621      	mov	r1, r4
 8013618:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 801361c:	4621      	mov	r1, r4
 801361e:	01ca      	lsls	r2, r1, #7
 8013620:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013624:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013628:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801362c:	fb03 f202 	mul.w	r2, r3, r2
 8013630:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013634:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013638:	fb01 f303 	mul.w	r3, r1, r3
 801363c:	441a      	add	r2, r3
 801363e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013642:	fba3 1303 	umull	r1, r3, r3, r3
 8013646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801364a:	460b      	mov	r3, r1
 801364c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013654:	18d3      	adds	r3, r2, r3
 8013656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801365a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801365e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013662:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013666:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801366a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801366e:	1884      	adds	r4, r0, r2
 8013670:	603c      	str	r4, [r7, #0]
 8013672:	eb41 0303 	adc.w	r3, r1, r3
 8013676:	607b      	str	r3, [r7, #4]
 8013678:	e9d7 3400 	ldrd	r3, r4, [r7]
 801367c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013680:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013684:	2b01      	cmp	r3, #1
 8013686:	d305      	bcc.n	8013694 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013688:	f04f 32ff 	mov.w	r2, #4294967295
 801368c:	f04f 0300 	mov.w	r3, #0
 8013690:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013694:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013698:	4618      	mov	r0, r3
 801369a:	f7fa fdaa 	bl	800e1f2 <VL53L1_isqrt>
 801369e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 80136a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80136ac:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 80136ae:	2300      	movs	r3, #0
 80136b0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 80136b4:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80136be:	46bd      	mov	sp, r7
 80136c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080136c4 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b086      	sub	sp, #24
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80136cc:	2300      	movs	r3, #0
 80136ce:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	3318      	adds	r3, #24
 80136d4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80136d6:	2300      	movs	r3, #0
 80136d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d107      	bne.n	80136f2 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 80136e2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 f88b 	bl	8013802 <VL53L1_poll_for_range_completion>
 80136ec:	4603      	mov	r3, r0
 80136ee:	75fb      	strb	r3, [r7, #23]
 80136f0:	e01b      	b.n	801372a <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 80136f6:	e011      	b.n	801371c <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 80136f8:	f107 030f 	add.w	r3, r7, #15
 80136fc:	4619      	mov	r1, r3
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f000 f819 	bl	8013736 <VL53L1_is_new_data_ready>
 8013704:	4603      	mov	r3, r0
 8013706:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d105      	bne.n	801371c <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013710:	2101      	movs	r1, #1
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f000 fe6e 	bl	80143f4 <VL53L1_WaitMs>
 8013718:	4603      	mov	r3, r0
 801371a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 801371c:	7bfb      	ldrb	r3, [r7, #15]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d103      	bne.n	801372a <VL53L1_wait_for_test_completion+0x66>
 8013722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d0e6      	beq.n	80136f8 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801372a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801372e:	4618      	mov	r0, r3
 8013730:	3718      	adds	r7, #24
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013736:	b580      	push	{r7, lr}
 8013738:	b086      	sub	sp, #24
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
 801373e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013740:	2300      	movs	r3, #0
 8013742:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	3318      	adds	r3, #24
 8013748:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801374a:	2300      	movs	r3, #0
 801374c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 801375c:	f003 0310 	and.w	r3, r3, #16
 8013760:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013762:	7bfb      	ldrb	r3, [r7, #15]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013768:	2301      	movs	r3, #1
 801376a:	75fb      	strb	r3, [r7, #23]
 801376c:	e001      	b.n	8013772 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801376e:	2300      	movs	r3, #0
 8013770:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013772:	f107 030e 	add.w	r3, r7, #14
 8013776:	461a      	mov	r2, r3
 8013778:	2131      	movs	r1, #49	; 0x31
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f000 fdb2 	bl	80142e4 <VL53L1_RdByte>
 8013780:	4603      	mov	r3, r0
 8013782:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013784:	7bbb      	ldrb	r3, [r7, #14]
 8013786:	f003 0201 	and.w	r2, r3, #1
 801378a:	7dfb      	ldrb	r3, [r7, #23]
 801378c:	429a      	cmp	r2, r3
 801378e:	d103      	bne.n	8013798 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	2201      	movs	r2, #1
 8013794:	701a      	strb	r2, [r3, #0]
 8013796:	e002      	b.n	801379e <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	2200      	movs	r2, #0
 801379c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801379e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3718      	adds	r7, #24
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b086      	sub	sp, #24
 80137ae:	af02      	add	r7, sp, #8
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80137b4:	2300      	movs	r3, #0
 80137b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 80137b8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 fe29 	bl	8014414 <VL53L1_WaitUs>
 80137c2:	4603      	mov	r3, r0
 80137c4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80137c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d10b      	bne.n	80137e6 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80137ce:	2301      	movs	r3, #1
 80137d0:	9301      	str	r3, [sp, #4]
 80137d2:	2301      	movs	r3, #1
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	2301      	movs	r3, #1
 80137d8:	22e5      	movs	r2, #229	; 0xe5
 80137da:	6839      	ldr	r1, [r7, #0]
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f000 fe31 	bl	8014444 <VL53L1_WaitValueMaskEx>
 80137e2:	4603      	mov	r3, r0
 80137e4:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80137e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d103      	bne.n	80137f6 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80137ee:	2103      	movs	r1, #3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7f6 fc38 	bl	800a066 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80137f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b088      	sub	sp, #32
 8013806:	af02      	add	r7, sp, #8
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801380c:	2300      	movs	r3, #0
 801380e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	3318      	adds	r3, #24
 8013814:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801381a:	2300      	movs	r3, #0
 801381c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013824:	f003 0310 	and.w	r3, r3, #16
 8013828:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801382a:	7bfb      	ldrb	r3, [r7, #15]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d102      	bne.n	8013836 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013830:	2301      	movs	r3, #1
 8013832:	75fb      	strb	r3, [r7, #23]
 8013834:	e001      	b.n	801383a <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013836:	2300      	movs	r3, #0
 8013838:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 801383a:	7dfb      	ldrb	r3, [r7, #23]
 801383c:	2201      	movs	r2, #1
 801383e:	9201      	str	r2, [sp, #4]
 8013840:	2201      	movs	r2, #1
 8013842:	9200      	str	r2, [sp, #0]
 8013844:	2231      	movs	r2, #49	; 0x31
 8013846:	6839      	ldr	r1, [r7, #0]
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 fdfb 	bl	8014444 <VL53L1_WaitValueMaskEx>
 801384e:	4603      	mov	r3, r0
 8013850:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013852:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013856:	4618      	mov	r0, r3
 8013858:	3718      	adds	r7, #24
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801385e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013862:	b0c0      	sub	sp, #256	; 0x100
 8013864:	af00      	add	r7, sp, #0
 8013866:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 801386a:	4618      	mov	r0, r3
 801386c:	460b      	mov	r3, r1
 801386e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013872:	4613      	mov	r3, r2
 8013874:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013878:	4603      	mov	r3, r0
 801387a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801387e:	2300      	movs	r3, #0
 8013880:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013884:	2300      	movs	r3, #0
 8013886:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013890:	2300      	movs	r3, #0
 8013892:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013896:	2300      	movs	r3, #0
 8013898:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 80138a2:	2300      	movs	r3, #0
 80138a4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 80138a8:	f04f 0200 	mov.w	r2, #0
 80138ac:	f04f 0300 	mov.w	r3, #0
 80138b0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 80138b4:	f04f 0200 	mov.w	r2, #0
 80138b8:	f04f 0300 	mov.w	r3, #0
 80138bc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 80138c0:	f04f 0200 	mov.w	r2, #0
 80138c4:	f04f 0300 	mov.w	r3, #0
 80138c8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 80138cc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d108      	bne.n	80138e6 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 80138d4:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 80138d8:	f107 01de 	add.w	r1, r7, #222	; 0xde
 80138dc:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fb f867 	bl	800e9b4 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 80138e6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d165      	bne.n	80139ba <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80138ee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80138f2:	091b      	lsrs	r3, r3, #4
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	f003 0301 	and.w	r3, r3, #1
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00e      	beq.n	801391c <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 80138fe:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013902:	b29a      	uxth	r2, r3
 8013904:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013908:	095b      	lsrs	r3, r3, #5
 801390a:	b2db      	uxtb	r3, r3
 801390c:	b29b      	uxth	r3, r3
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	b29b      	uxth	r3, r3
 8013912:	3b01      	subs	r3, #1
 8013914:	b29b      	uxth	r3, r3
 8013916:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 801391a:	e00b      	b.n	8013934 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801391c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013920:	b29a      	uxth	r2, r3
 8013922:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013926:	095b      	lsrs	r3, r3, #5
 8013928:	b2db      	uxtb	r3, r3
 801392a:	b29b      	uxth	r3, r3
 801392c:	1ad3      	subs	r3, r2, r3
 801392e:	b29b      	uxth	r3, r3
 8013930:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013934:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013938:	b29a      	uxth	r2, r3
 801393a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801393e:	095b      	lsrs	r3, r3, #5
 8013940:	b2db      	uxtb	r3, r3
 8013942:	b29b      	uxth	r3, r3
 8013944:	4413      	add	r3, r2
 8013946:	b29b      	uxth	r3, r3
 8013948:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801394c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013950:	f003 0301 	and.w	r3, r3, #1
 8013954:	2b00      	cmp	r3, #0
 8013956:	d011      	beq.n	801397c <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013958:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801395c:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801395e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013962:	f003 020f 	and.w	r2, r3, #15
 8013966:	0fd3      	lsrs	r3, r2, #31
 8013968:	4413      	add	r3, r2
 801396a:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801396c:	b29b      	uxth	r3, r3
 801396e:	1acb      	subs	r3, r1, r3
 8013970:	b29b      	uxth	r3, r3
 8013972:	3b01      	subs	r3, #1
 8013974:	b29b      	uxth	r3, r3
 8013976:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801397a:	e00f      	b.n	801399c <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 801397c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013980:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013982:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013986:	f003 020f 	and.w	r2, r3, #15
 801398a:	0fd3      	lsrs	r3, r2, #31
 801398c:	4413      	add	r3, r2
 801398e:	105b      	asrs	r3, r3, #1
 8013990:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013992:	b29b      	uxth	r3, r3
 8013994:	440b      	add	r3, r1
 8013996:	b29b      	uxth	r3, r3
 8013998:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 801399c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80139a0:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80139a2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80139a6:	f003 020f 	and.w	r2, r3, #15
 80139aa:	0fd3      	lsrs	r3, r2, #31
 80139ac:	4413      	add	r3, r2
 80139ae:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	440b      	add	r3, r1
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80139ba:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d133      	bne.n	8013a2a <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80139c2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80139cc:	4413      	add	r3, r2
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	3b0f      	subs	r3, #15
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80139dc:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80139e6:	4413      	add	r3, r2
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	005b      	lsls	r3, r3, #1
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	3b0f      	subs	r3, #15
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80139f6:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013a00:	4413      	add	r3, r2
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	005b      	lsls	r3, r3, #1
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	3b0f      	subs	r3, #15
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013a10:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013a1a:	4413      	add	r3, r2
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	3b0f      	subs	r3, #15
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013a2a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f040 8135 	bne.w	8013c9e <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013a34:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013a38:	17da      	asrs	r2, r3, #31
 8013a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013a3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013a42:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013a46:	17da      	asrs	r2, r3, #31
 8013a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013a50:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013a54:	460b      	mov	r3, r1
 8013a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013a5a:	fb02 f203 	mul.w	r2, r2, r3
 8013a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a62:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013a66:	4601      	mov	r1, r0
 8013a68:	fb01 f303 	mul.w	r3, r1, r3
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013a72:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013a76:	fba2 4501 	umull	r4, r5, r2, r1
 8013a7a:	442b      	add	r3, r5
 8013a7c:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013a7e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013a82:	17da      	asrs	r2, r3, #31
 8013a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013a88:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013a8c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013a90:	17da      	asrs	r2, r3, #31
 8013a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013a96:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013aa4:	fb02 f203 	mul.w	r2, r2, r3
 8013aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013aac:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8013ab0:	4601      	mov	r1, r0
 8013ab2:	fb01 f303 	mul.w	r3, r1, r3
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013abc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013ac0:	fba2 8901 	umull	r8, r9, r2, r1
 8013ac4:	444b      	add	r3, r9
 8013ac6:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013ac8:	eb14 0308 	adds.w	r3, r4, r8
 8013acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ace:	eb45 0309 	adc.w	r3, r5, r9
 8013ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ad4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013ad8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8013adc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013ae0:	1c51      	adds	r1, r2, #1
 8013ae2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013ae6:	f143 0300 	adc.w	r3, r3, #0
 8013aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013aee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013af2:	460b      	mov	r3, r1
 8013af4:	0fdb      	lsrs	r3, r3, #31
 8013af6:	2200      	movs	r2, #0
 8013af8:	643b      	str	r3, [r7, #64]	; 0x40
 8013afa:	647a      	str	r2, [r7, #68]	; 0x44
 8013afc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013b00:	4623      	mov	r3, r4
 8013b02:	4602      	mov	r2, r0
 8013b04:	189b      	adds	r3, r3, r2
 8013b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b08:	460b      	mov	r3, r1
 8013b0a:	462a      	mov	r2, r5
 8013b0c:	eb42 0303 	adc.w	r3, r2, r3
 8013b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b12:	f04f 0200 	mov.w	r2, #0
 8013b16:	f04f 0300 	mov.w	r3, #0
 8013b1a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8013b1e:	4621      	mov	r1, r4
 8013b20:	084a      	lsrs	r2, r1, #1
 8013b22:	4629      	mov	r1, r5
 8013b24:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013b28:	4629      	mov	r1, r5
 8013b2a:	104b      	asrs	r3, r1, #1
 8013b2c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8013b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b34:	2200      	movs	r2, #0
 8013b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013b3e:	f04f 0000 	mov.w	r0, #0
 8013b42:	f04f 0100 	mov.w	r1, #0
 8013b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013b4a:	462b      	mov	r3, r5
 8013b4c:	0099      	lsls	r1, r3, #2
 8013b4e:	4623      	mov	r3, r4
 8013b50:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8013b54:	4623      	mov	r3, r4
 8013b56:	0098      	lsls	r0, r3, #2
 8013b58:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013b5c:	1814      	adds	r4, r2, r0
 8013b5e:	633c      	str	r4, [r7, #48]	; 0x30
 8013b60:	414b      	adcs	r3, r1
 8013b62:	637b      	str	r3, [r7, #52]	; 0x34
 8013b64:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013b68:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013b6c:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8013b70:	17da      	asrs	r2, r3, #31
 8013b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013b76:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013b7a:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013b7e:	17da      	asrs	r2, r3, #31
 8013b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013b84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013b88:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013b8c:	462b      	mov	r3, r5
 8013b8e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8013b92:	4642      	mov	r2, r8
 8013b94:	fb02 f203 	mul.w	r2, r2, r3
 8013b98:	464b      	mov	r3, r9
 8013b9a:	4621      	mov	r1, r4
 8013b9c:	fb01 f303 	mul.w	r3, r1, r3
 8013ba0:	4413      	add	r3, r2
 8013ba2:	4622      	mov	r2, r4
 8013ba4:	4641      	mov	r1, r8
 8013ba6:	fba2 ab01 	umull	sl, fp, r2, r1
 8013baa:	445b      	add	r3, fp
 8013bac:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013bae:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8013bb2:	17da      	asrs	r2, r3, #31
 8013bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8013bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8013bb8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013bbc:	17da      	asrs	r2, r3, #31
 8013bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8013bc0:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013bc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8013bc6:	462b      	mov	r3, r5
 8013bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013bcc:	4642      	mov	r2, r8
 8013bce:	fb02 f203 	mul.w	r2, r2, r3
 8013bd2:	464b      	mov	r3, r9
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	fb01 f303 	mul.w	r3, r1, r3
 8013bda:	4413      	add	r3, r2
 8013bdc:	4622      	mov	r2, r4
 8013bde:	4641      	mov	r1, r8
 8013be0:	fba2 1201 	umull	r1, r2, r2, r1
 8013be4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013be8:	460a      	mov	r2, r1
 8013bea:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013bee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013bf2:	4413      	add	r3, r2
 8013bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013bf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	eb1a 0303 	adds.w	r3, sl, r3
 8013c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c04:	4613      	mov	r3, r2
 8013c06:	eb4b 0303 	adc.w	r3, fp, r3
 8013c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c0c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013c10:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8013c14:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8013c18:	1c51      	adds	r1, r2, #1
 8013c1a:	66b9      	str	r1, [r7, #104]	; 0x68
 8013c1c:	f143 0300 	adc.w	r3, r3, #0
 8013c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013c26:	460b      	mov	r3, r1
 8013c28:	0fdb      	lsrs	r3, r3, #31
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	623b      	str	r3, [r7, #32]
 8013c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8013c30:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8013c34:	4623      	mov	r3, r4
 8013c36:	4602      	mov	r2, r0
 8013c38:	189b      	adds	r3, r3, r2
 8013c3a:	61bb      	str	r3, [r7, #24]
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	462a      	mov	r2, r5
 8013c40:	eb42 0303 	adc.w	r3, r2, r3
 8013c44:	61fb      	str	r3, [r7, #28]
 8013c46:	f04f 0200 	mov.w	r2, #0
 8013c4a:	f04f 0300 	mov.w	r3, #0
 8013c4e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013c52:	4621      	mov	r1, r4
 8013c54:	084a      	lsrs	r2, r1, #1
 8013c56:	4629      	mov	r1, r5
 8013c58:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	104b      	asrs	r3, r1, #1
 8013c60:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8013c64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013c68:	2200      	movs	r2, #0
 8013c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8013c6c:	667a      	str	r2, [r7, #100]	; 0x64
 8013c6e:	f04f 0200 	mov.w	r2, #0
 8013c72:	f04f 0300 	mov.w	r3, #0
 8013c76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	008b      	lsls	r3, r1, #2
 8013c7e:	4621      	mov	r1, r4
 8013c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013c84:	4621      	mov	r1, r4
 8013c86:	008a      	lsls	r2, r1, #2
 8013c88:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8013c8c:	1884      	adds	r4, r0, r2
 8013c8e:	613c      	str	r4, [r7, #16]
 8013c90:	eb41 0303 	adc.w	r3, r1, r3
 8013c94:	617b      	str	r3, [r7, #20]
 8013c96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013c9a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8013c9e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d132      	bne.n	8013d0c <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8013ca6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8013caa:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8013cae:	1884      	adds	r4, r0, r2
 8013cb0:	65bc      	str	r4, [r7, #88]	; 0x58
 8013cb2:	eb41 0303 	adc.w	r3, r1, r3
 8013cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013cb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	f143 0300 	adc.w	r3, r3, #0
 8013cc8:	657b      	str	r3, [r7, #84]	; 0x54
 8013cca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013cce:	460b      	mov	r3, r1
 8013cd0:	0fdb      	lsrs	r3, r3, #31
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	60bb      	str	r3, [r7, #8]
 8013cd6:	60fa      	str	r2, [r7, #12]
 8013cd8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013cdc:	4623      	mov	r3, r4
 8013cde:	4602      	mov	r2, r0
 8013ce0:	189b      	adds	r3, r3, r2
 8013ce2:	603b      	str	r3, [r7, #0]
 8013ce4:	460b      	mov	r3, r1
 8013ce6:	462a      	mov	r2, r5
 8013ce8:	eb42 0303 	adc.w	r3, r2, r3
 8013cec:	607b      	str	r3, [r7, #4]
 8013cee:	f04f 0200 	mov.w	r2, #0
 8013cf2:	f04f 0300 	mov.w	r3, #0
 8013cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013cfa:	4621      	mov	r1, r4
 8013cfc:	084a      	lsrs	r2, r1, #1
 8013cfe:	4629      	mov	r1, r5
 8013d00:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013d04:	4629      	mov	r1, r5
 8013d06:	104b      	asrs	r3, r1, #1
 8013d08:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8013d0c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d109      	bne.n	8013d28 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8013d14:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	da05      	bge.n	8013d28 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8013d1c:	f04f 0200 	mov.w	r2, #0
 8013d20:	f04f 0300 	mov.w	r3, #0
 8013d24:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8013d28:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013d2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013d30:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8013d32:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013d42 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8013d42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d46:	b09a      	sub	sp, #104	; 0x68
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6478      	str	r0, [r7, #68]	; 0x44
 8013d4c:	6439      	str	r1, [r7, #64]	; 0x40
 8013d4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013d50:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8013d52:	2300      	movs	r3, #0
 8013d54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8013d58:	f04f 0200 	mov.w	r2, #0
 8013d5c:	f04f 0300 	mov.w	r3, #0
 8013d60:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8013d64:	f04f 0200 	mov.w	r2, #0
 8013d68:	f04f 0300 	mov.w	r3, #0
 8013d6c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8013d70:	f04f 0200 	mov.w	r2, #0
 8013d74:	f04f 0300 	mov.w	r3, #0
 8013d78:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8013d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d84:	2200      	movs	r2, #0
 8013d86:	633b      	str	r3, [r7, #48]	; 0x30
 8013d88:	637a      	str	r2, [r7, #52]	; 0x34
 8013d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d90:	2200      	movs	r2, #0
 8013d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8013d9a:	460b      	mov	r3, r1
 8013d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d9e:	fb02 f203 	mul.w	r2, r2, r3
 8013da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8013da8:	4601      	mov	r1, r0
 8013daa:	fb01 f303 	mul.w	r3, r1, r3
 8013dae:	4413      	add	r3, r2
 8013db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013db4:	fba2 4501 	umull	r4, r5, r2, r1
 8013db8:	442b      	add	r3, r5
 8013dba:	461d      	mov	r5, r3
 8013dbc:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8013dc0:	623b      	str	r3, [r7, #32]
 8013dc2:	f145 0300 	adc.w	r3, r5, #0
 8013dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8013dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013dcc:	f04f 0300 	mov.w	r3, #0
 8013dd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013dd4:	f7ec fa74 	bl	80002c0 <__aeabi_uldivmod>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	460b      	mov	r3, r1
 8013ddc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8013de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	2200      	movs	r2, #0
 8013dea:	61bb      	str	r3, [r7, #24]
 8013dec:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8013dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013df0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013df4:	4622      	mov	r2, r4
 8013df6:	fb02 f203 	mul.w	r2, r2, r3
 8013dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dfc:	4629      	mov	r1, r5
 8013dfe:	fb01 f303 	mul.w	r3, r1, r3
 8013e02:	4413      	add	r3, r2
 8013e04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e06:	4621      	mov	r1, r4
 8013e08:	fba2 ab01 	umull	sl, fp, r2, r1
 8013e0c:	445b      	add	r3, fp
 8013e0e:	469b      	mov	fp, r3
 8013e10:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8013e14:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8013e18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013e1c:	f04f 0200 	mov.w	r2, #0
 8013e20:	f04f 0300 	mov.w	r3, #0
 8013e24:	0a02      	lsrs	r2, r0, #8
 8013e26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013e2a:	0a0b      	lsrs	r3, r1, #8
 8013e2c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8013e30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8013e34:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8013e38:	6139      	str	r1, [r7, #16]
 8013e3a:	f143 0300 	adc.w	r3, r3, #0
 8013e3e:	617b      	str	r3, [r7, #20]
 8013e40:	f04f 0200 	mov.w	r2, #0
 8013e44:	f04f 0300 	mov.w	r3, #0
 8013e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8013e4c:	4621      	mov	r1, r4
 8013e4e:	0aca      	lsrs	r2, r1, #11
 8013e50:	4629      	mov	r1, r5
 8013e52:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8013e56:	4629      	mov	r1, r5
 8013e58:	0acb      	lsrs	r3, r1, #11
 8013e5a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8013e5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d305      	bcc.n	8013e72 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8013e66:	f04f 32ff 	mov.w	r2, #4294967295
 8013e6a:	f04f 0300 	mov.w	r3, #0
 8013e6e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8013e72:	2300      	movs	r3, #0
 8013e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e78:	e041      	b.n	8013efe <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8013e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e80:	3302      	adds	r3, #2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	60bb      	str	r3, [r7, #8]
 8013e8c:	60fa      	str	r2, [r7, #12]
 8013e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e90:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013e94:	4622      	mov	r2, r4
 8013e96:	fb02 f203 	mul.w	r2, r2, r3
 8013e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	fb01 f303 	mul.w	r3, r1, r3
 8013ea2:	4413      	add	r3, r2
 8013ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	fba2 8901 	umull	r8, r9, r2, r1
 8013eac:	444b      	add	r3, r9
 8013eae:	4699      	mov	r9, r3
 8013eb0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8013eb4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8013eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013ebc:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8013ec0:	6039      	str	r1, [r7, #0]
 8013ec2:	f143 0300 	adc.w	r3, r3, #0
 8013ec6:	607b      	str	r3, [r7, #4]
 8013ec8:	f04f 0200 	mov.w	r2, #0
 8013ecc:	f04f 0300 	mov.w	r3, #0
 8013ed0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	0a8a      	lsrs	r2, r1, #10
 8013ed8:	4629      	mov	r1, r5
 8013eda:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8013ede:	4629      	mov	r1, r5
 8013ee0:	0a8b      	lsrs	r3, r1, #10
 8013ee2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8013ee6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013eea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eee:	3206      	adds	r2, #6
 8013ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8013ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ef8:	3301      	adds	r3, #1
 8013efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f00:	7a9b      	ldrb	r3, [r3, #10]
 8013f02:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d3b7      	bcc.n	8013e7a <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8013f0a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3768      	adds	r7, #104	; 0x68
 8013f12:	46bd      	mov	sp, r7
 8013f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013f18 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8013f18:	b590      	push	{r4, r7, lr}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	4604      	mov	r4, r0
 8013f20:	4608      	mov	r0, r1
 8013f22:	4611      	mov	r1, r2
 8013f24:	461a      	mov	r2, r3
 8013f26:	4623      	mov	r3, r4
 8013f28:	71fb      	strb	r3, [r7, #7]
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	71bb      	strb	r3, [r7, #6]
 8013f2e:	460b      	mov	r3, r1
 8013f30:	717b      	strb	r3, [r7, #5]
 8013f32:	4613      	mov	r3, r2
 8013f34:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013f36:	2300      	movs	r3, #0
 8013f38:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8013f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f48:	2210      	movs	r2, #16
 8013f4a:	701a      	strb	r2, [r3, #0]

	i = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8013f50:	2300      	movs	r3, #0
 8013f52:	73fb      	strb	r3, [r7, #15]
 8013f54:	e046      	b.n	8013fe4 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8013f56:	2300      	movs	r3, #0
 8013f58:	73bb      	strb	r3, [r7, #14]
 8013f5a:	e03b      	b.n	8013fd4 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8013f5c:	89bb      	ldrh	r3, [r7, #12]
 8013f5e:	2b0f      	cmp	r3, #15
 8013f60:	d832      	bhi.n	8013fc8 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8013f62:	89bb      	ldrh	r3, [r7, #12]
 8013f64:	b2da      	uxtb	r2, r3
 8013f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f68:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8013f6a:	89bb      	ldrh	r3, [r7, #12]
 8013f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f6e:	3306      	adds	r3, #6
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	4413      	add	r3, r2
 8013f74:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013f78:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8013f7a:	89bb      	ldrh	r3, [r7, #12]
 8013f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f7e:	3306      	adds	r3, #6
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	4413      	add	r3, r2
 8013f84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013f88:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8013f8a:	7bfa      	ldrb	r2, [r7, #15]
 8013f8c:	79bb      	ldrb	r3, [r7, #6]
 8013f8e:	fb12 f303 	smulbb	r3, r2, r3
 8013f92:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8013f94:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8013f96:	79fa      	ldrb	r2, [r7, #7]
 8013f98:	440a      	add	r2, r1
 8013f9a:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8013f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f9e:	3306      	adds	r3, #6
 8013fa0:	009b      	lsls	r3, r3, #2
 8013fa2:	4413      	add	r3, r2
 8013fa4:	460a      	mov	r2, r1
 8013fa6:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8013fa8:	7bba      	ldrb	r2, [r7, #14]
 8013faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013fae:	fb12 f303 	smulbb	r3, r2, r3
 8013fb2:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8013fb4:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8013fb6:	793a      	ldrb	r2, [r7, #4]
 8013fb8:	440a      	add	r2, r1
 8013fba:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8013fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fbe:	3306      	adds	r3, #6
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4413      	add	r3, r2
 8013fc4:	460a      	mov	r2, r1
 8013fc6:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8013fc8:	89bb      	ldrh	r3, [r7, #12]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 8013fce:	7bbb      	ldrb	r3, [r7, #14]
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	73bb      	strb	r3, [r7, #14]
 8013fd4:	7bba      	ldrb	r2, [r7, #14]
 8013fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d3be      	bcc.n	8013f5c <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	73fb      	strb	r3, [r7, #15]
 8013fe4:	7bfa      	ldrb	r2, [r7, #15]
 8013fe6:	797b      	ldrb	r3, [r7, #5]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d3b4      	bcc.n	8013f56 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8013fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fee:	f000 f86c 	bl	80140ca <VL53L1_init_zone_config_histogram_bins>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8013ff6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3714      	adds	r7, #20
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd90      	pop	{r4, r7, pc}

08014002 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b084      	sub	sp, #16
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
 801400a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801400c:	2300      	movs	r3, #0
 801400e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2205      	movs	r2, #5
 8014014:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	2204      	movs	r2, #4
 801401a:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	220f      	movs	r2, #15
 8014020:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	2207      	movs	r2, #7
 8014026:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	2204      	movs	r2, #4
 801402c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	2208      	movs	r2, #8
 8014032:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	220f      	movs	r2, #15
 8014038:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	2207      	movs	r2, #7
 8014040:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	220c      	movs	r2, #12
 8014048:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	2208      	movs	r2, #8
 8014050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	2207      	movs	r2, #7
 8014058:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	220f      	movs	r2, #15
 8014060:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	2208      	movs	r2, #8
 8014068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	2204      	movs	r2, #4
 8014070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	2207      	movs	r2, #7
 8014078:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	220f      	movs	r2, #15
 8014080:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	2208      	movs	r2, #8
 8014088:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	220c      	movs	r2, #12
 8014090:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	220f      	movs	r2, #15
 8014098:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	220f      	movs	r2, #15
 80140a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	2208      	movs	r2, #8
 80140a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	2208      	movs	r2, #8
 80140b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80140b4:	6838      	ldr	r0, [r7, #0]
 80140b6:	f000 f808 	bl	80140ca <VL53L1_init_zone_config_histogram_bins>
 80140ba:	4603      	mov	r3, r0
 80140bc:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80140be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80140ca:	b480      	push	{r7}
 80140cc:	b085      	sub	sp, #20
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80140d2:	2300      	movs	r3, #0
 80140d4:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80140d6:	2300      	movs	r3, #0
 80140d8:	73fb      	strb	r3, [r7, #15]
 80140da:	e008      	b.n	80140ee <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80140dc:	7bfb      	ldrb	r3, [r7, #15]
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	4413      	add	r3, r2
 80140e2:	2201      	movs	r2, #1
 80140e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80140e8:	7bfb      	ldrb	r3, [r7, #15]
 80140ea:	3301      	adds	r3, #1
 80140ec:	73fb      	strb	r3, [r7, #15]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	7bfa      	ldrb	r2, [r7, #15]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d3f1      	bcc.n	80140dc <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80140f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3714      	adds	r7, #20
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr

08014108 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	8910      	ldrh	r0, [r2, #8]
 801411c:	687a      	ldr	r2, [r7, #4]
 801411e:	b292      	uxth	r2, r2
 8014120:	68b9      	ldr	r1, [r7, #8]
 8014122:	4798      	blx	r3
 8014124:	4603      	mov	r3, r0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801412e:	b580      	push	{r7, lr}
 8014130:	b084      	sub	sp, #16
 8014132:	af00      	add	r7, sp, #0
 8014134:	60f8      	str	r0, [r7, #12]
 8014136:	60b9      	str	r1, [r7, #8]
 8014138:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	691b      	ldr	r3, [r3, #16]
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	8910      	ldrh	r0, [r2, #8]
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	b292      	uxth	r2, r2
 8014146:	68b9      	ldr	r1, [r7, #8]
 8014148:	4798      	blx	r3
 801414a:	4603      	mov	r3, r0
}
 801414c:	4618      	mov	r0, r3
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}

08014154 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014154:	b580      	push	{r7, lr}
 8014156:	b086      	sub	sp, #24
 8014158:	af00      	add	r7, sp, #0
 801415a:	60f8      	str	r0, [r7, #12]
 801415c:	607a      	str	r2, [r7, #4]
 801415e:	603b      	str	r3, [r7, #0]
 8014160:	460b      	mov	r3, r1
 8014162:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014164:	2300      	movs	r3, #0
 8014166:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	2bff      	cmp	r3, #255	; 0xff
 801416c:	d902      	bls.n	8014174 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801416e:	f06f 0303 	mvn.w	r3, #3
 8014172:	e01d      	b.n	80141b0 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014174:	897b      	ldrh	r3, [r7, #10]
 8014176:	0a1b      	lsrs	r3, r3, #8
 8014178:	b29b      	uxth	r3, r3
 801417a:	b2da      	uxtb	r2, r3
 801417c:	4b0e      	ldr	r3, [pc, #56]	; (80141b8 <VL53L1_WriteMulti+0x64>)
 801417e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014180:	897b      	ldrh	r3, [r7, #10]
 8014182:	b2da      	uxtb	r2, r3
 8014184:	4b0c      	ldr	r3, [pc, #48]	; (80141b8 <VL53L1_WriteMulti+0x64>)
 8014186:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	480b      	ldr	r0, [pc, #44]	; (80141bc <VL53L1_WriteMulti+0x68>)
 801418e:	f005 f845 	bl	801921c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	3302      	adds	r3, #2
 8014196:	461a      	mov	r2, r3
 8014198:	4907      	ldr	r1, [pc, #28]	; (80141b8 <VL53L1_WriteMulti+0x64>)
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	f7ff ffb4 	bl	8014108 <_I2CWrite>
 80141a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d001      	beq.n	80141ac <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80141a8:	23f3      	movs	r3, #243	; 0xf3
 80141aa:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80141ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3718      	adds	r7, #24
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	20008438 	.word	0x20008438
 80141bc:	2000843a 	.word	0x2000843a

080141c0 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	607a      	str	r2, [r7, #4]
 80141ca:	603b      	str	r3, [r7, #0]
 80141cc:	460b      	mov	r3, r1
 80141ce:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80141d0:	2300      	movs	r3, #0
 80141d2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80141d4:	897b      	ldrh	r3, [r7, #10]
 80141d6:	0a1b      	lsrs	r3, r3, #8
 80141d8:	b29b      	uxth	r3, r3
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	4b12      	ldr	r3, [pc, #72]	; (8014228 <VL53L1_ReadMulti+0x68>)
 80141de:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80141e0:	897b      	ldrh	r3, [r7, #10]
 80141e2:	b2da      	uxtb	r2, r3
 80141e4:	4b10      	ldr	r3, [pc, #64]	; (8014228 <VL53L1_ReadMulti+0x68>)
 80141e6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80141e8:	2202      	movs	r2, #2
 80141ea:	490f      	ldr	r1, [pc, #60]	; (8014228 <VL53L1_ReadMulti+0x68>)
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f7ff ff8b 	bl	8014108 <_I2CWrite>
 80141f2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d002      	beq.n	8014200 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80141fa:	23f3      	movs	r3, #243	; 0xf3
 80141fc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80141fe:	e00c      	b.n	801421a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	6879      	ldr	r1, [r7, #4]
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff ff92 	bl	801412e <_I2CRead>
 801420a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d002      	beq.n	8014218 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014212:	23f3      	movs	r3, #243	; 0xf3
 8014214:	75fb      	strb	r3, [r7, #23]
 8014216:	e000      	b.n	801421a <VL53L1_ReadMulti+0x5a>
    }
done:
 8014218:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801421a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3718      	adds	r7, #24
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	20008438 	.word	0x20008438

0801422c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	460b      	mov	r3, r1
 8014236:	807b      	strh	r3, [r7, #2]
 8014238:	4613      	mov	r3, r2
 801423a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801423c:	2300      	movs	r3, #0
 801423e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014240:	887b      	ldrh	r3, [r7, #2]
 8014242:	0a1b      	lsrs	r3, r3, #8
 8014244:	b29b      	uxth	r3, r3
 8014246:	b2da      	uxtb	r2, r3
 8014248:	4b0c      	ldr	r3, [pc, #48]	; (801427c <VL53L1_WrByte+0x50>)
 801424a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801424c:	887b      	ldrh	r3, [r7, #2]
 801424e:	b2da      	uxtb	r2, r3
 8014250:	4b0a      	ldr	r3, [pc, #40]	; (801427c <VL53L1_WrByte+0x50>)
 8014252:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014254:	4a09      	ldr	r2, [pc, #36]	; (801427c <VL53L1_WrByte+0x50>)
 8014256:	787b      	ldrb	r3, [r7, #1]
 8014258:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801425a:	2203      	movs	r2, #3
 801425c:	4907      	ldr	r1, [pc, #28]	; (801427c <VL53L1_WrByte+0x50>)
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7ff ff52 	bl	8014108 <_I2CWrite>
 8014264:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d001      	beq.n	8014270 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801426c:	23f3      	movs	r3, #243	; 0xf3
 801426e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	20008438 	.word	0x20008438

08014280 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	807b      	strh	r3, [r7, #2]
 801428c:	4613      	mov	r3, r2
 801428e:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014290:	2300      	movs	r3, #0
 8014292:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014294:	887b      	ldrh	r3, [r7, #2]
 8014296:	0a1b      	lsrs	r3, r3, #8
 8014298:	b29b      	uxth	r3, r3
 801429a:	b2da      	uxtb	r2, r3
 801429c:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <VL53L1_WrWord+0x60>)
 801429e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80142a0:	887b      	ldrh	r3, [r7, #2]
 80142a2:	b2da      	uxtb	r2, r3
 80142a4:	4b0e      	ldr	r3, [pc, #56]	; (80142e0 <VL53L1_WrWord+0x60>)
 80142a6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80142a8:	883b      	ldrh	r3, [r7, #0]
 80142aa:	0a1b      	lsrs	r3, r3, #8
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	b2da      	uxtb	r2, r3
 80142b0:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <VL53L1_WrWord+0x60>)
 80142b2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80142b4:	883b      	ldrh	r3, [r7, #0]
 80142b6:	b2da      	uxtb	r2, r3
 80142b8:	4b09      	ldr	r3, [pc, #36]	; (80142e0 <VL53L1_WrWord+0x60>)
 80142ba:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80142bc:	2204      	movs	r2, #4
 80142be:	4908      	ldr	r1, [pc, #32]	; (80142e0 <VL53L1_WrWord+0x60>)
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f7ff ff21 	bl	8014108 <_I2CWrite>
 80142c6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d001      	beq.n	80142d2 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80142ce:	23f3      	movs	r3, #243	; 0xf3
 80142d0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80142d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3710      	adds	r7, #16
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	20008438 	.word	0x20008438

080142e4 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	460b      	mov	r3, r1
 80142ee:	607a      	str	r2, [r7, #4]
 80142f0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80142f2:	2300      	movs	r3, #0
 80142f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80142f6:	897b      	ldrh	r3, [r7, #10]
 80142f8:	0a1b      	lsrs	r3, r3, #8
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	b2da      	uxtb	r2, r3
 80142fe:	4b12      	ldr	r3, [pc, #72]	; (8014348 <VL53L1_RdByte+0x64>)
 8014300:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014302:	897b      	ldrh	r3, [r7, #10]
 8014304:	b2da      	uxtb	r2, r3
 8014306:	4b10      	ldr	r3, [pc, #64]	; (8014348 <VL53L1_RdByte+0x64>)
 8014308:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801430a:	2202      	movs	r2, #2
 801430c:	490e      	ldr	r1, [pc, #56]	; (8014348 <VL53L1_RdByte+0x64>)
 801430e:	68f8      	ldr	r0, [r7, #12]
 8014310:	f7ff fefa 	bl	8014108 <_I2CWrite>
 8014314:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d002      	beq.n	8014322 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801431c:	23f3      	movs	r3, #243	; 0xf3
 801431e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014320:	e00c      	b.n	801433c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014322:	2201      	movs	r2, #1
 8014324:	6879      	ldr	r1, [r7, #4]
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	f7ff ff01 	bl	801412e <_I2CRead>
 801432c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d002      	beq.n	801433a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014334:	23f3      	movs	r3, #243	; 0xf3
 8014336:	75fb      	strb	r3, [r7, #23]
 8014338:	e000      	b.n	801433c <VL53L1_RdByte+0x58>
    }
done:
 801433a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801433c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	20008438 	.word	0x20008438

0801434c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 801434c:	b580      	push	{r7, lr}
 801434e:	b086      	sub	sp, #24
 8014350:	af00      	add	r7, sp, #0
 8014352:	60f8      	str	r0, [r7, #12]
 8014354:	460b      	mov	r3, r1
 8014356:	607a      	str	r2, [r7, #4]
 8014358:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801435a:	2300      	movs	r3, #0
 801435c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801435e:	897b      	ldrh	r3, [r7, #10]
 8014360:	0a1b      	lsrs	r3, r3, #8
 8014362:	b29b      	uxth	r3, r3
 8014364:	b2da      	uxtb	r2, r3
 8014366:	4b18      	ldr	r3, [pc, #96]	; (80143c8 <VL53L1_RdWord+0x7c>)
 8014368:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801436a:	897b      	ldrh	r3, [r7, #10]
 801436c:	b2da      	uxtb	r2, r3
 801436e:	4b16      	ldr	r3, [pc, #88]	; (80143c8 <VL53L1_RdWord+0x7c>)
 8014370:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014372:	2202      	movs	r2, #2
 8014374:	4914      	ldr	r1, [pc, #80]	; (80143c8 <VL53L1_RdWord+0x7c>)
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f7ff fec6 	bl	8014108 <_I2CWrite>
 801437c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014384:	23f3      	movs	r3, #243	; 0xf3
 8014386:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014388:	e017      	b.n	80143ba <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801438a:	2202      	movs	r2, #2
 801438c:	490e      	ldr	r1, [pc, #56]	; (80143c8 <VL53L1_RdWord+0x7c>)
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f7ff fecd 	bl	801412e <_I2CRead>
 8014394:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d002      	beq.n	80143a2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801439c:	23f3      	movs	r3, #243	; 0xf3
 801439e:	75fb      	strb	r3, [r7, #23]
        goto done;
 80143a0:	e00b      	b.n	80143ba <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80143a2:	4b09      	ldr	r3, [pc, #36]	; (80143c8 <VL53L1_RdWord+0x7c>)
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	021b      	lsls	r3, r3, #8
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	4b06      	ldr	r3, [pc, #24]	; (80143c8 <VL53L1_RdWord+0x7c>)
 80143ae:	785b      	ldrb	r3, [r3, #1]
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	4413      	add	r3, r2
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80143ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3718      	adds	r7, #24
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	20008438 	.word	0x20008438

080143cc <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80143d6:	2300      	movs	r3, #0
 80143d8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	695b      	ldr	r3, [r3, #20]
 80143de:	4798      	blx	r3
 80143e0:	4603      	mov	r3, r0
 80143e2:	461a      	mov	r2, r3
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80143e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	4619      	mov	r1, r3
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 f8d2 	bl	80145ac <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014408:	2300      	movs	r3, #0
}
 801440a:	4618      	mov	r0, r3
 801440c:	3708      	adds	r7, #8
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
	...

08014414 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	4a07      	ldr	r2, [pc, #28]	; (8014440 <VL53L1_WaitUs+0x2c>)
 8014422:	fb82 1203 	smull	r1, r2, r2, r3
 8014426:	1192      	asrs	r2, r2, #6
 8014428:	17db      	asrs	r3, r3, #31
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	4619      	mov	r1, r3
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f8bc 	bl	80145ac <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	10624dd3 	.word	0x10624dd3

08014444 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014444:	b590      	push	{r4, r7, lr}
 8014446:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801444a:	af00      	add	r7, sp, #0
 801444c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014450:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014454:	6020      	str	r0, [r4, #0]
 8014456:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801445a:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 801445e:	6001      	str	r1, [r0, #0]
 8014460:	4619      	mov	r1, r3
 8014462:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014466:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 801446a:	801a      	strh	r2, [r3, #0]
 801446c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014470:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014474:	460a      	mov	r2, r1
 8014476:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014478:	2300      	movs	r3, #0
 801447a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014484:	2300      	movs	r3, #0
 8014486:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014490:	2300      	movs	r3, #0
 8014492:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014496:	2300      	movs	r3, #0
 8014498:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 801449c:	f107 0310 	add.w	r3, r7, #16
 80144a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80144a4:	4940      	ldr	r1, [pc, #256]	; (80145a8 <VL53L1_WaitValueMaskEx+0x164>)
 80144a6:	4618      	mov	r0, r3
 80144a8:	f004 ff72 	bl	8019390 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 80144ac:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80144b0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80144b4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80144b8:	4611      	mov	r1, r2
 80144ba:	6818      	ldr	r0, [r3, #0]
 80144bc:	f7ff ff86 	bl	80143cc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80144c0:	e04e      	b.n	8014560 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80144c2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d110      	bne.n	80144ec <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80144ca:	f207 2213 	addw	r2, r7, #531	; 0x213
 80144ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80144d2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80144d6:	8819      	ldrh	r1, [r3, #0]
 80144d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80144dc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80144e0:	6818      	ldr	r0, [r3, #0]
 80144e2:	f7ff feff 	bl	80142e4 <VL53L1_RdByte>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80144ec:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80144f0:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80144f4:	4013      	ands	r3, r2
 80144f6:	b2db      	uxtb	r3, r3
 80144f8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80144fc:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014500:	7812      	ldrb	r2, [r2, #0]
 8014502:	429a      	cmp	r2, r3
 8014504:	d102      	bne.n	801450c <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014506:	2301      	movs	r3, #1
 8014508:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 801450c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014510:	2b00      	cmp	r3, #0
 8014512:	d114      	bne.n	801453e <VL53L1_WaitValueMaskEx+0xfa>
 8014514:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014518:	2b00      	cmp	r3, #0
 801451a:	d110      	bne.n	801453e <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 801451c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014520:	2b00      	cmp	r3, #0
 8014522:	d00c      	beq.n	801453e <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014524:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014528:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801452c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014530:	4611      	mov	r1, r2
 8014532:	6818      	ldr	r0, [r3, #0]
 8014534:	f7ff ff5e 	bl	80143f4 <VL53L1_WaitMs>
 8014538:	4603      	mov	r3, r0
 801453a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 801453e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014542:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014546:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801454a:	4611      	mov	r1, r2
 801454c:	6818      	ldr	r0, [r3, #0]
 801454e:	f7ff ff3d 	bl	80143cc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014552:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014556:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801455a:	1ad3      	subs	r3, r2, r3
 801455c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014560:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014564:	2b00      	cmp	r3, #0
 8014566:	d10c      	bne.n	8014582 <VL53L1_WaitValueMaskEx+0x13e>
 8014568:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801456c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014570:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	429a      	cmp	r2, r3
 8014578:	d203      	bcs.n	8014582 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801457a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801457e:	2b00      	cmp	r3, #0
 8014580:	d09f      	beq.n	80144c2 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014582:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <VL53L1_WaitValueMaskEx+0x154>
 801458a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801458e:	2b00      	cmp	r3, #0
 8014590:	d102      	bne.n	8014598 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014592:	23f9      	movs	r3, #249	; 0xf9
 8014594:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014598:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 801459c:	4618      	mov	r0, r3
 801459e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd90      	pop	{r4, r7, pc}
 80145a6:	bf00      	nop
 80145a8:	0801a390 	.word	0x0801a390

080145ac <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	695b      	ldr	r3, [r3, #20]
 80145ba:	4798      	blx	r3
 80145bc:	4603      	mov	r3, r0
 80145be:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80145c0:	bf00      	nop
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	695b      	ldr	r3, [r3, #20]
 80145c6:	4798      	blx	r3
 80145c8:	4603      	mov	r3, r0
 80145ca:	461a      	mov	r2, r3
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	683a      	ldr	r2, [r7, #0]
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d8f5      	bhi.n	80145c2 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 80145d6:	2300      	movs	r3, #0
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3710      	adds	r7, #16
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b08c      	sub	sp, #48	; 0x30
 80145e4:	af06      	add	r7, sp, #24
 80145e6:	60f8      	str	r0, [r7, #12]
 80145e8:	60b9      	str	r1, [r7, #8]
 80145ea:	607a      	str	r2, [r7, #4]
 80145ec:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80145ee:	2300      	movs	r3, #0
 80145f0:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	9304      	str	r3, [sp, #16]
 80145f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f8:	9303      	str	r3, [sp, #12]
 80145fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fc:	9302      	str	r3, [sp, #8]
 80145fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014600:	9301      	str	r3, [sp, #4]
 8014602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	6a3b      	ldr	r3, [r7, #32]
 8014608:	683a      	ldr	r2, [r7, #0]
 801460a:	6879      	ldr	r1, [r7, #4]
 801460c:	68b8      	ldr	r0, [r7, #8]
 801460e:	f7fc fefb 	bl	8011408 <VL53L1_hist_process_data>
 8014612:	4603      	mov	r3, r0
 8014614:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3718      	adds	r7, #24
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b084      	sub	sp, #16
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
 801462a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d103      	bne.n	801463a <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014632:	f06f 0301 	mvn.w	r3, #1
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	e023      	b.n	8014682 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	685a      	ldr	r2, [r3, #4]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	891a      	ldrh	r2, [r3, #8]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	68da      	ldr	r2, [r3, #12]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	691a      	ldr	r2, [r3, #16]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	695a      	ldr	r2, [r3, #20]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d004      	beq.n	801467c <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	4798      	blx	r3
 8014678:	60f8      	str	r0, [r7, #12]
 801467a:	e002      	b.n	8014682 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 801467c:	f04f 33ff 	mov.w	r3, #4294967295
 8014680:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014682:	68fb      	ldr	r3, [r7, #12]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801469a:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d003      	beq.n	80146aa <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 80146a2:	f04f 33ff 	mov.w	r3, #4294967295
 80146a6:	60fb      	str	r3, [r7, #12]
 80146a8:	e04d      	b.n	8014746 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ed f8d1 	bl	8001852 <VL53L1_WaitDeviceBooted>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d003      	beq.n	80146be <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 80146b6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	e043      	b.n	8014746 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f7ed f847 	bl	8001752 <VL53L1_DataInit>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d003      	beq.n	80146d2 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 80146ca:	f04f 33ff 	mov.w	r3, #4294967295
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	e039      	b.n	8014746 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f7ed f892 	bl	80017fc <VL53L1_StaticInit>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d003      	beq.n	80146e6 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 80146de:	f04f 33ff 	mov.w	r3, #4294967295
 80146e2:	60fb      	str	r3, [r7, #12]
 80146e4:	e02f      	b.n	8014746 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7ee fe8a 	bl	8003400 <VL53L1_PerformRefSpadManagement>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d003      	beq.n	80146fa <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 80146f2:	f04f 33ff 	mov.w	r3, #4294967295
 80146f6:	60fb      	str	r3, [r7, #12]
 80146f8:	e025      	b.n	8014746 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014700:	2200      	movs	r2, #0
 8014702:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801470c:	2200      	movs	r2, #0
 801470e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014718:	2200      	movs	r2, #0
 801471a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014724:	2200      	movs	r2, #0
 8014726:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014730:	2200      	movs	r2, #0
 8014732:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801473c:	2201      	movs	r2, #1
 801473e:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014742:	2300      	movs	r3, #0
 8014744:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014746:	68fb      	ldr	r3, [r7, #12]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014758:	f04f 33ff 	mov.w	r3, #4294967295
 801475c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014764:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014768:	2b01      	cmp	r3, #1
 801476a:	d111      	bne.n	8014790 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	4798      	blx	r3
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d003      	beq.n	8014780 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014778:	f04f 33ff 	mov.w	r3, #4294967295
 801477c:	60fb      	str	r3, [r7, #12]
 801477e:	e007      	b.n	8014790 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014780:	2300      	movs	r3, #0
 8014782:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801478a:	2200      	movs	r2, #0
 801478c:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014790:	68fb      	ldr	r3, [r7, #12]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b084      	sub	sp, #16
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
 80147a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d002      	beq.n	80147b0 <VL53L1CB_ReadID+0x16>
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d103      	bne.n	80147b8 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80147b0:	f06f 0301 	mvn.w	r3, #1
 80147b4:	60fb      	str	r3, [r7, #12]
 80147b6:	e00a      	b.n	80147ce <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	2200      	movs	r2, #0
 80147bc:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 80147be:	683a      	ldr	r2, [r7, #0]
 80147c0:	f240 110f 	movw	r1, #271	; 0x10f
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7ff fdc1 	bl	801434c <VL53L1_RdWord>
 80147ca:	4603      	mov	r3, r0
 80147cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80147ce:	68fb      	ldr	r3, [r7, #12]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 80147d8:	b480      	push	{r7}
 80147da:	b085      	sub	sp, #20
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d002      	beq.n	80147ee <VL53L1CB_GetCapabilities+0x16>
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d103      	bne.n	80147f6 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80147ee:	f06f 0301 	mvn.w	r3, #1
 80147f2:	60fb      	str	r3, [r7, #12]
 80147f4:	e00d      	b.n	8014812 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	2201      	movs	r2, #1
 80147fa:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	2204      	movs	r2, #4
 8014800:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2201      	movs	r2, #1
 8014806:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	2200      	movs	r2, #0
 801480c:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 801480e:	2300      	movs	r3, #0
 8014810:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014812:	68fb      	ldr	r3, [r7, #12]
}
 8014814:	4618      	mov	r0, r3
 8014816:	3714      	adds	r7, #20
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d009      	beq.n	8014844 <VL53L1CB_ConfigProfile+0x24>
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d006      	beq.n	8014844 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801483c:	7afb      	ldrb	r3, [r7, #11]
 801483e:	2b01      	cmp	r3, #1
 8014840:	d103      	bne.n	801484a <VL53L1CB_ConfigProfile+0x2a>
 8014842:	e00c      	b.n	801485e <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014844:	f06f 0301 	mvn.w	r3, #1
 8014848:	e043      	b.n	80148d2 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801484a:	7afb      	ldrb	r3, [r7, #11]
 801484c:	2b02      	cmp	r3, #2
 801484e:	d006      	beq.n	801485e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014850:	7afb      	ldrb	r3, [r7, #11]
 8014852:	2b03      	cmp	r3, #3
 8014854:	d003      	beq.n	801485e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014856:	f06f 0301 	mvn.w	r3, #1
 801485a:	60fb      	str	r3, [r7, #12]
 801485c:	e038      	b.n	80148d0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 801485e:	7afb      	ldrb	r3, [r7, #11]
 8014860:	4619      	mov	r1, r3
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7ed f970 	bl	8001b48 <VL53L1_SetDistanceMode>
 8014868:	4603      	mov	r3, r0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d003      	beq.n	8014876 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 801486e:	f04f 33ff 	mov.w	r3, #4294967295
 8014872:	60fb      	str	r3, [r7, #12]
 8014874:	e02c      	b.n	80148d0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 801487a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801487e:	fb02 f303 	mul.w	r3, r2, r3
 8014882:	4619      	mov	r1, r3
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ed f9ed 	bl	8001c64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d003      	beq.n	8014898 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014890:	f04f 33ff 	mov.w	r3, #4294967295
 8014894:	60fb      	str	r3, [r7, #12]
 8014896:	e01b      	b.n	80148d0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	2b00      	cmp	r3, #0
 801489e:	bf14      	ite	ne
 80148a0:	2301      	movne	r3, #1
 80148a2:	2300      	moveq	r3, #0
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	461a      	mov	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80148ae:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	691b      	ldr	r3, [r3, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	bf14      	ite	ne
 80148ba:	2301      	movne	r3, #1
 80148bc:	2300      	moveq	r3, #0
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	461a      	mov	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80148c8:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 80148cc:	2300      	movs	r3, #0
 80148ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80148d0:	68fb      	ldr	r3, [r7, #12]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 80148da:	b580      	push	{r7, lr}
 80148dc:	b094      	sub	sp, #80	; 0x50
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
 80148e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d002      	beq.n	80148f0 <VL53L1CB_ConfigROI+0x16>
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d103      	bne.n	80148f8 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80148f0:	f06f 0301 	mvn.w	r3, #1
 80148f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80148f6:	e01c      	b.n	8014932 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 80148f8:	2301      	movs	r3, #1
 80148fa:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	789b      	ldrb	r3, [r3, #2]
 8014900:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	78db      	ldrb	r3, [r3, #3]
 8014906:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	785b      	ldrb	r3, [r3, #1]
 8014912:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014914:	f107 0308 	add.w	r3, r7, #8
 8014918:	4619      	mov	r1, r3
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ed fca6 	bl	800226c <VL53L1_SetROI>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d003      	beq.n	801492e <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014926:	f04f 33ff 	mov.w	r3, #4294967295
 801492a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801492c:	e001      	b.n	8014932 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 801492e:	2300      	movs	r3, #0
 8014930:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014934:	4618      	mov	r0, r3
 8014936:	3750      	adds	r7, #80	; 0x50
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 801493c:	b480      	push	{r7}
 801493e:	b083      	sub	sp, #12
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014946:	f06f 0303 	mvn.w	r3, #3
}
 801494a:	4618      	mov	r0, r3
 801494c:	370c      	adds	r7, #12
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr

08014956 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014956:	b580      	push	{r7, lr}
 8014958:	b084      	sub	sp, #16
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d002      	beq.n	801496c <VL53L1CB_GetDistance+0x16>
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d103      	bne.n	8014974 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801496c:	f06f 0301 	mvn.w	r3, #1
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	e03a      	b.n	80149ea <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801497a:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801497e:	2b00      	cmp	r3, #0
 8014980:	d103      	bne.n	801498a <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014982:	f04f 33ff 	mov.w	r3, #4294967295
 8014986:	60fb      	str	r3, [r7, #12]
 8014988:	e02f      	b.n	80149ea <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014990:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014994:	2b01      	cmp	r3, #1
 8014996:	d106      	bne.n	80149a6 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 f92b 	bl	8014bf8 <vl53l1cb_poll_for_measurement>
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	e004      	b.n	80149b0 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 80149a6:	2100      	movs	r1, #0
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 f925 	bl	8014bf8 <vl53l1cb_poll_for_measurement>
 80149ae:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d119      	bne.n	80149ea <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 80149b6:	6839      	ldr	r1, [r7, #0]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f000 f94b 	bl	8014c54 <vl53l1cb_get_result>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d003      	beq.n	80149cc <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 80149c4:	f04f 33ff 	mov.w	r3, #4294967295
 80149c8:	60fb      	str	r3, [r7, #12]
 80149ca:	e00e      	b.n	80149ea <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80149d2:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d105      	bne.n	80149e6 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ed fdde 	bl	800259c <VL53L1_ClearInterruptAndStartMeasurement>
 80149e0:	4603      	mov	r3, r0
 80149e2:	60fb      	str	r3, [r7, #12]
 80149e4:	e001      	b.n	80149ea <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 80149e6:	2300      	movs	r3, #0
 80149e8:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 80149ea:	68fb      	ldr	r3, [r7, #12]
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3710      	adds	r7, #16
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d103      	bne.n	8014a0c <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014a04:	f06f 0301 	mvn.w	r3, #1
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	e068      	b.n	8014ade <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a12:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d103      	bne.n	8014a22 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	e05d      	b.n	8014ade <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f7ed fcf6 	bl	8002414 <VL53L1_StartMeasurement>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d154      	bne.n	8014ad8 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a34:	2201      	movs	r2, #1
 8014a36:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	3b01      	subs	r3, #1
 8014a42:	2b03      	cmp	r3, #3
 8014a44:	d83e      	bhi.n	8014ac4 <VL53L1CB_Start+0xd0>
 8014a46:	a201      	add	r2, pc, #4	; (adr r2, 8014a4c <VL53L1CB_Start+0x58>)
 8014a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a4c:	08014a5d 	.word	0x08014a5d
 8014a50:	08014a77 	.word	0x08014a77
 8014a54:	08014a91 	.word	0x08014a91
 8014a58:	08014aab 	.word	0x08014aab
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a62:	2201      	movs	r2, #1
 8014a64:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a6e:	2201      	movs	r2, #1
 8014a70:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014a74:	e033      	b.n	8014ade <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a88:	2201      	movs	r2, #1
 8014a8a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014a8e:	e026      	b.n	8014ade <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a96:	2201      	movs	r2, #1
 8014a98:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014aa8:	e019      	b.n	8014ade <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014abc:	2200      	movs	r2, #0
 8014abe:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014ac2:	e00c      	b.n	8014ade <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014aca:	2200      	movs	r2, #0
 8014acc:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8014ad0:	f06f 0301 	mvn.w	r3, #1
 8014ad4:	60fb      	str	r3, [r7, #12]
      break;
 8014ad6:	e002      	b.n	8014ade <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8014adc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ade:	68fb      	ldr	r3, [r7, #12]
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b084      	sub	sp, #16
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d103      	bne.n	8014afe <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014af6:	f06f 0301 	mvn.w	r3, #1
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	e01c      	b.n	8014b38 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b04:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d103      	bne.n	8014b14 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8014b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b10:	60fb      	str	r3, [r7, #12]
 8014b12:	e011      	b.n	8014b38 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f7ed fd1d 	bl	8002554 <VL53L1_StopMeasurement>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d108      	bne.n	8014b32 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b26:	2200      	movs	r2, #0
 8014b28:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	60fb      	str	r3, [r7, #12]
 8014b30:	e002      	b.n	8014b38 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014b32:	f04f 33ff 	mov.w	r3, #4294967295
 8014b36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b38:	68fb      	ldr	r3, [r7, #12]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
 8014b4a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d103      	bne.n	8014b5a <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014b52:	f06f 0301 	mvn.w	r3, #1
 8014b56:	60fb      	str	r3, [r7, #12]
 8014b58:	e012      	b.n	8014b80 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	4619      	mov	r1, r3
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f7ec fdcf 	bl	8001704 <VL53L1_SetDeviceAddress>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d003      	beq.n	8014b74 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8014b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b70:	60fb      	str	r3, [r7, #12]
 8014b72:	e005      	b.n	8014b80 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	b29a      	uxth	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b80:	68fb      	ldr	r3, [r7, #12]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	b085      	sub	sp, #20
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d002      	beq.n	8014ba0 <VL53L1CB_GetAddress+0x16>
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d103      	bne.n	8014ba8 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ba0:	f06f 0301 	mvn.w	r3, #1
 8014ba4:	60fb      	str	r3, [r7, #12]
 8014ba6:	e006      	b.n	8014bb6 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	891b      	ldrh	r3, [r3, #8]
 8014bac:	461a      	mov	r2, r3
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3714      	adds	r7, #20
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc2:	4770      	bx	lr

08014bc4 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014bce:	f06f 0303 	mvn.w	r3, #3
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	370c      	adds	r7, #12
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr

08014bde <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 8014bde:	b480      	push	{r7}
 8014be0:	b083      	sub	sp, #12
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014be8:	f06f 0303 	mvn.w	r3, #3
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8014c02:	2300      	movs	r3, #0
 8014c04:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d102      	bne.n	8014c12 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8014c0c:	f06f 0301 	mvn.w	r3, #1
 8014c10:	e01b      	b.n	8014c4a <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	695b      	ldr	r3, [r3, #20]
 8014c16:	4798      	blx	r3
 8014c18:	4603      	mov	r3, r0
 8014c1a:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8014c1c:	f107 030b 	add.w	r3, r7, #11
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7ed fcd0 	bl	80025c8 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8014c28:	7afb      	ldrb	r3, [r7, #11]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d101      	bne.n	8014c32 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e00b      	b.n	8014c4a <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	695b      	ldr	r3, [r3, #20]
 8014c36:	4798      	blx	r3
 8014c38:	4603      	mov	r3, r0
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	1ad3      	subs	r3, r2, r3
 8014c40:	683a      	ldr	r2, [r7, #0]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d8ea      	bhi.n	8014c1c <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8014c46:	f06f 0302 	mvn.w	r3, #2
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
	...

08014c54 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014c54:	b590      	push	{r4, r7, lr}
 8014c56:	b089      	sub	sp, #36	; 0x24
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d002      	beq.n	8014c6a <vl53l1cb_get_result+0x16>
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d103      	bne.n	8014c72 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014c6a:	f06f 0301 	mvn.w	r3, #1
 8014c6e:	61fb      	str	r3, [r7, #28]
 8014c70:	e100      	b.n	8014e74 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8014c72:	4983      	ldr	r1, [pc, #524]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7ee fb85 	bl	8003384 <VL53L1_GetMultiRangingData>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d003      	beq.n	8014c88 <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014c80:	f04f 33ff 	mov.w	r3, #4294967295
 8014c84:	61fb      	str	r3, [r7, #28]
 8014c86:	e0f5      	b.n	8014e74 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	76fb      	strb	r3, [r7, #27]
 8014c8c:	e0ec      	b.n	8014e68 <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8014c8e:	4b7c      	ldr	r3, [pc, #496]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014c90:	799b      	ldrb	r3, [r3, #6]
 8014c92:	7efa      	ldrb	r2, [r7, #27]
 8014c94:	4618      	mov	r0, r3
 8014c96:	6839      	ldr	r1, [r7, #0]
 8014c98:	4613      	mov	r3, r2
 8014c9a:	011b      	lsls	r3, r3, #4
 8014c9c:	4413      	add	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	440b      	add	r3, r1
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	76bb      	strb	r3, [r7, #26]
 8014caa:	e0d4      	b.n	8014e56 <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8014cac:	7eba      	ldrb	r2, [r7, #26]
 8014cae:	4974      	ldr	r1, [pc, #464]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	00db      	lsls	r3, r3, #3
 8014cb4:	1a9b      	subs	r3, r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	440b      	add	r3, r1
 8014cba:	331c      	adds	r3, #28
 8014cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da0b      	bge.n	8014cdc <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8014cc4:	7efa      	ldrb	r2, [r7, #27]
 8014cc6:	7eb8      	ldrb	r0, [r7, #26]
 8014cc8:	6839      	ldr	r1, [r7, #0]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	011b      	lsls	r3, r3, #4
 8014cce:	4413      	add	r3, r2
 8014cd0:	4403      	add	r3, r0
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	440b      	add	r3, r1
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	609a      	str	r2, [r3, #8]
 8014cda:	e014      	b.n	8014d06 <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8014cdc:	7eba      	ldrb	r2, [r7, #26]
 8014cde:	4968      	ldr	r1, [pc, #416]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	00db      	lsls	r3, r3, #3
 8014ce4:	1a9b      	subs	r3, r3, r2
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	440b      	add	r3, r1
 8014cea:	331c      	adds	r3, #28
 8014cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cf0:	7efa      	ldrb	r2, [r7, #27]
 8014cf2:	7eb8      	ldrb	r0, [r7, #26]
 8014cf4:	461c      	mov	r4, r3
 8014cf6:	6839      	ldr	r1, [r7, #0]
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	011b      	lsls	r3, r3, #4
 8014cfc:	4413      	add	r3, r2
 8014cfe:	4403      	add	r3, r0
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	440b      	add	r3, r1
 8014d04:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d0c:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d132      	bne.n	8014d7a <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8014d14:	7eba      	ldrb	r2, [r7, #26]
 8014d16:	495a      	ldr	r1, [pc, #360]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014d18:	4613      	mov	r3, r2
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	1a9b      	subs	r3, r3, r2
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	440b      	add	r3, r1
 8014d22:	3314      	adds	r3, #20
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	ee07 3a90 	vmov	s15, r3
 8014d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d2e:	eddf 6a55 	vldr	s13, [pc, #340]	; 8014e84 <vl53l1cb_get_result+0x230>
 8014d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014d36:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014e88 <vl53l1cb_get_result+0x234>
 8014d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d3e:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8014d42:	4b4f      	ldr	r3, [pc, #316]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014d44:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8014d48:	0a1b      	lsrs	r3, r3, #8
 8014d4a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8014d4c:	8a7b      	ldrh	r3, [r7, #18]
 8014d4e:	ee07 3a90 	vmov	s15, r3
 8014d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d56:	7efa      	ldrb	r2, [r7, #27]
 8014d58:	7eb8      	ldrb	r0, [r7, #26]
 8014d5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8014d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d62:	6839      	ldr	r1, [r7, #0]
 8014d64:	4613      	mov	r3, r2
 8014d66:	011b      	lsls	r3, r3, #4
 8014d68:	4413      	add	r3, r2
 8014d6a:	4403      	add	r3, r0
 8014d6c:	3308      	adds	r3, #8
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	440b      	add	r3, r1
 8014d72:	3308      	adds	r3, #8
 8014d74:	edc3 7a00 	vstr	s15, [r3]
 8014d78:	e00d      	b.n	8014d96 <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8014d7a:	7efa      	ldrb	r2, [r7, #27]
 8014d7c:	7eb8      	ldrb	r0, [r7, #26]
 8014d7e:	6839      	ldr	r1, [r7, #0]
 8014d80:	4613      	mov	r3, r2
 8014d82:	011b      	lsls	r3, r3, #4
 8014d84:	4413      	add	r3, r2
 8014d86:	4403      	add	r3, r0
 8014d88:	3308      	adds	r3, #8
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	440b      	add	r3, r1
 8014d8e:	3308      	adds	r3, #8
 8014d90:	f04f 0200 	mov.w	r2, #0
 8014d94:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d9c:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d132      	bne.n	8014e0a <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8014da4:	7eba      	ldrb	r2, [r7, #26]
 8014da6:	4936      	ldr	r1, [pc, #216]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014da8:	4613      	mov	r3, r2
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	1a9b      	subs	r3, r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	440b      	add	r3, r1
 8014db2:	3310      	adds	r3, #16
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	ee07 3a90 	vmov	s15, r3
 8014dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014dbe:	eddf 6a31 	vldr	s13, [pc, #196]	; 8014e84 <vl53l1cb_get_result+0x230>
 8014dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014dc6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014e88 <vl53l1cb_get_result+0x234>
 8014dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dce:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8014dd2:	4b2b      	ldr	r3, [pc, #172]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014dd4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8014dd8:	0a1b      	lsrs	r3, r3, #8
 8014dda:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8014ddc:	8a7b      	ldrh	r3, [r7, #18]
 8014dde:	ee07 3a90 	vmov	s15, r3
 8014de2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014de6:	7efa      	ldrb	r2, [r7, #27]
 8014de8:	7eb8      	ldrb	r0, [r7, #26]
 8014dea:	edd7 6a03 	vldr	s13, [r7, #12]
 8014dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014df2:	6839      	ldr	r1, [r7, #0]
 8014df4:	4613      	mov	r3, r2
 8014df6:	011b      	lsls	r3, r3, #4
 8014df8:	4413      	add	r3, r2
 8014dfa:	4403      	add	r3, r0
 8014dfc:	330c      	adds	r3, #12
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	440b      	add	r3, r1
 8014e02:	3308      	adds	r3, #8
 8014e04:	edc3 7a00 	vstr	s15, [r3]
 8014e08:	e00d      	b.n	8014e26 <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8014e0a:	7efa      	ldrb	r2, [r7, #27]
 8014e0c:	7eb8      	ldrb	r0, [r7, #26]
 8014e0e:	6839      	ldr	r1, [r7, #0]
 8014e10:	4613      	mov	r3, r2
 8014e12:	011b      	lsls	r3, r3, #4
 8014e14:	4413      	add	r3, r2
 8014e16:	4403      	add	r3, r0
 8014e18:	330c      	adds	r3, #12
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	440b      	add	r3, r1
 8014e1e:	3308      	adds	r3, #8
 8014e20:	f04f 0200 	mov.w	r2, #0
 8014e24:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8014e26:	7eba      	ldrb	r2, [r7, #26]
 8014e28:	4915      	ldr	r1, [pc, #84]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	00db      	lsls	r3, r3, #3
 8014e2e:	1a9b      	subs	r3, r3, r2
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	440b      	add	r3, r1
 8014e34:	331f      	adds	r3, #31
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	7efa      	ldrb	r2, [r7, #27]
 8014e3a:	7eb8      	ldrb	r0, [r7, #26]
 8014e3c:	461c      	mov	r4, r3
 8014e3e:	6839      	ldr	r1, [r7, #0]
 8014e40:	4613      	mov	r3, r2
 8014e42:	011b      	lsls	r3, r3, #4
 8014e44:	4413      	add	r3, r2
 8014e46:	4403      	add	r3, r0
 8014e48:	3304      	adds	r3, #4
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	440b      	add	r3, r1
 8014e4e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8014e50:	7ebb      	ldrb	r3, [r7, #26]
 8014e52:	3301      	adds	r3, #1
 8014e54:	76bb      	strb	r3, [r7, #26]
 8014e56:	4b0a      	ldr	r3, [pc, #40]	; (8014e80 <vl53l1cb_get_result+0x22c>)
 8014e58:	799b      	ldrb	r3, [r3, #6]
 8014e5a:	7eba      	ldrb	r2, [r7, #26]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	f4ff af25 	bcc.w	8014cac <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8014e62:	7efb      	ldrb	r3, [r7, #27]
 8014e64:	3301      	adds	r3, #1
 8014e66:	76fb      	strb	r3, [r7, #27]
 8014e68:	7efb      	ldrb	r3, [r7, #27]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	f43f af0f 	beq.w	8014c8e <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 8014e70:	2300      	movs	r3, #0
 8014e72:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8014e74:	69fb      	ldr	r3, [r7, #28]
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3724      	adds	r7, #36	; 0x24
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd90      	pop	{r4, r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	20008538 	.word	0x20008538
 8014e84:	47800000 	.word	0x47800000
 8014e88:	447a0000 	.word	0x447a0000

08014e8c <LL_AHB2_GRP1_EnableClock>:
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b085      	sub	sp, #20
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	4313      	orrs	r3, r2
 8014ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	4013      	ands	r3, r2
 8014eae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
}
 8014eb2:	bf00      	nop
 8014eb4:	3714      	adds	r7, #20
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8014ebe:	b480      	push	{r7}
 8014ec0:	b085      	sub	sp, #20
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8014ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014eca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014eda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	4013      	ands	r3, r2
 8014ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
}
 8014ee4:	bf00      	nop
 8014ee6:	3714      	adds	r7, #20
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8014efa:	2300      	movs	r3, #0
 8014efc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8014efe:	79fb      	ldrb	r3, [r7, #7]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d903      	bls.n	8014f0c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8014f04:	f06f 0301 	mvn.w	r3, #1
 8014f08:	60fb      	str	r3, [r7, #12]
 8014f0a:	e022      	b.n	8014f52 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8014f0c:	79fa      	ldrb	r2, [r7, #7]
 8014f0e:	79fb      	ldrb	r3, [r7, #7]
 8014f10:	4912      	ldr	r1, [pc, #72]	; (8014f5c <BSP_COM_Init+0x6c>)
 8014f12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014f16:	4912      	ldr	r1, [pc, #72]	; (8014f60 <BSP_COM_Init+0x70>)
 8014f18:	2094      	movs	r0, #148	; 0x94
 8014f1a:	fb00 f303 	mul.w	r3, r0, r3
 8014f1e:	440b      	add	r3, r1
 8014f20:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8014f22:	79fb      	ldrb	r3, [r7, #7]
 8014f24:	2294      	movs	r2, #148	; 0x94
 8014f26:	fb02 f303 	mul.w	r3, r2, r3
 8014f2a:	4a0d      	ldr	r2, [pc, #52]	; (8014f60 <BSP_COM_Init+0x70>)
 8014f2c:	4413      	add	r3, r2
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f000 f886 	bl	8015040 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8014f34:	79fb      	ldrb	r3, [r7, #7]
 8014f36:	2294      	movs	r2, #148	; 0x94
 8014f38:	fb02 f303 	mul.w	r3, r2, r3
 8014f3c:	4a08      	ldr	r2, [pc, #32]	; (8014f60 <BSP_COM_Init+0x70>)
 8014f3e:	4413      	add	r3, r2
 8014f40:	4618      	mov	r0, r3
 8014f42:	f000 f80f 	bl	8014f64 <MX_USART1_UART_Init>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d002      	beq.n	8014f52 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8014f4c:	f06f 0303 	mvn.w	r3, #3
 8014f50:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014f52:	68fb      	ldr	r3, [r7, #12]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3710      	adds	r7, #16
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	20000070 	.word	0x20000070
 8014f60:	200085b8 	.word	0x200085b8

08014f64 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4a24      	ldr	r2, [pc, #144]	; (8015004 <MX_USART1_UART_Init+0xa0>)
 8014f74:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014f7c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f84:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	220c      	movs	r2, #12
 8014f96:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f003 f993 	bl	80182e2 <HAL_UART_Init>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d001      	beq.n	8014fc6 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f003 feed 	bl	8018da8 <HAL_UARTEx_SetTxFifoThreshold>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d001      	beq.n	8014fd8 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014fd8:	2100      	movs	r1, #0
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f003 ff22 	bl	8018e24 <HAL_UARTEx_SetRxFifoThreshold>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d001      	beq.n	8014fea <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f003 fea3 	bl	8018d36 <HAL_UARTEx_DisableFifoMode>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d001      	beq.n	8014ffa <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	40013800 	.word	0x40013800

08015008 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8015010:	4b09      	ldr	r3, [pc, #36]	; (8015038 <__io_putchar+0x30>)
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	461a      	mov	r2, r3
 8015016:	2394      	movs	r3, #148	; 0x94
 8015018:	fb02 f303 	mul.w	r3, r2, r3
 801501c:	4a07      	ldr	r2, [pc, #28]	; (801503c <__io_putchar+0x34>)
 801501e:	1898      	adds	r0, r3, r2
 8015020:	1d39      	adds	r1, r7, #4
 8015022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015026:	2201      	movs	r2, #1
 8015028:	f003 f9b5 	bl	8018396 <HAL_UART_Transmit>
  return ch;
 801502c:	687b      	ldr	r3, [r7, #4]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	2000864c 	.word	0x2000864c
 801503c:	200085b8 	.word	0x200085b8

08015040 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b09c      	sub	sp, #112	; 0x70
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015048:	f107 030c 	add.w	r3, r7, #12
 801504c:	2250      	movs	r2, #80	; 0x50
 801504e:	2100      	movs	r1, #0
 8015050:	4618      	mov	r0, r3
 8015052:	f004 f8f1 	bl	8019238 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8015056:	2301      	movs	r3, #1
 8015058:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801505a:	2300      	movs	r3, #0
 801505c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801505e:	f107 030c 	add.w	r3, r7, #12
 8015062:	4618      	mov	r0, r3
 8015064:	f002 fe90 	bl	8017d88 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801506c:	f7ff ff27 	bl	8014ebe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015070:	2002      	movs	r0, #2
 8015072:	f7ff ff0b 	bl	8014e8c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8015076:	2340      	movs	r3, #64	; 0x40
 8015078:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801507a:	2302      	movs	r3, #2
 801507c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801507e:	2301      	movs	r3, #1
 8015080:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015082:	2300      	movs	r3, #0
 8015084:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8015086:	2307      	movs	r3, #7
 8015088:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 801508a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801508e:	4619      	mov	r1, r3
 8015090:	480b      	ldr	r0, [pc, #44]	; (80150c0 <USART1_MspInit+0x80>)
 8015092:	f000 f9a5 	bl	80153e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8015096:	2380      	movs	r3, #128	; 0x80
 8015098:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801509a:	2302      	movs	r3, #2
 801509c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801509e:	2301      	movs	r3, #1
 80150a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150a2:	2300      	movs	r3, #0
 80150a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80150a6:	2307      	movs	r3, #7
 80150a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80150aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80150ae:	4619      	mov	r1, r3
 80150b0:	4803      	ldr	r0, [pc, #12]	; (80150c0 <USART1_MspInit+0x80>)
 80150b2:	f000 f995 	bl	80153e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80150b6:	bf00      	nop
 80150b8:	3770      	adds	r7, #112	; 0x70
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	48000400 	.word	0x48000400

080150c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80150ca:	2300      	movs	r3, #0
 80150cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80150ce:	4b0c      	ldr	r3, [pc, #48]	; (8015100 <HAL_Init+0x3c>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	4a0b      	ldr	r2, [pc, #44]	; (8015100 <HAL_Init+0x3c>)
 80150d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80150da:	2003      	movs	r0, #3
 80150dc:	f000 f94e 	bl	801537c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80150e0:	2000      	movs	r0, #0
 80150e2:	f000 f80f 	bl	8015104 <HAL_InitTick>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d002      	beq.n	80150f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80150ec:	2301      	movs	r3, #1
 80150ee:	71fb      	strb	r3, [r7, #7]
 80150f0:	e001      	b.n	80150f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80150f2:	f7eb fbe2 	bl	80008ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80150f6:	79fb      	ldrb	r3, [r7, #7]
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	58004000 	.word	0x58004000

08015104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801510c:	2300      	movs	r3, #0
 801510e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8015110:	4b17      	ldr	r3, [pc, #92]	; (8015170 <HAL_InitTick+0x6c>)
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d024      	beq.n	8015162 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8015118:	f002 fb96 	bl	8017848 <HAL_RCC_GetHCLKFreq>
 801511c:	4602      	mov	r2, r0
 801511e:	4b14      	ldr	r3, [pc, #80]	; (8015170 <HAL_InitTick+0x6c>)
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	4619      	mov	r1, r3
 8015124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015128:	fbb3 f3f1 	udiv	r3, r3, r1
 801512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015130:	4618      	mov	r0, r3
 8015132:	f000 f948 	bl	80153c6 <HAL_SYSTICK_Config>
 8015136:	4603      	mov	r3, r0
 8015138:	2b00      	cmp	r3, #0
 801513a:	d10f      	bne.n	801515c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b0f      	cmp	r3, #15
 8015140:	d809      	bhi.n	8015156 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015142:	2200      	movs	r2, #0
 8015144:	6879      	ldr	r1, [r7, #4]
 8015146:	f04f 30ff 	mov.w	r0, #4294967295
 801514a:	f000 f922 	bl	8015392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801514e:	4a09      	ldr	r2, [pc, #36]	; (8015174 <HAL_InitTick+0x70>)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6013      	str	r3, [r2, #0]
 8015154:	e007      	b.n	8015166 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8015156:	2301      	movs	r3, #1
 8015158:	73fb      	strb	r3, [r7, #15]
 801515a:	e004      	b.n	8015166 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 801515c:	2301      	movs	r3, #1
 801515e:	73fb      	strb	r3, [r7, #15]
 8015160:	e001      	b.n	8015166 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8015166:	7bfb      	ldrb	r3, [r7, #15]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	20000078 	.word	0x20000078
 8015174:	20000074 	.word	0x20000074

08015178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015178:	b480      	push	{r7}
 801517a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801517c:	4b06      	ldr	r3, [pc, #24]	; (8015198 <HAL_IncTick+0x20>)
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	461a      	mov	r2, r3
 8015182:	4b06      	ldr	r3, [pc, #24]	; (801519c <HAL_IncTick+0x24>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	4413      	add	r3, r2
 8015188:	4a04      	ldr	r2, [pc, #16]	; (801519c <HAL_IncTick+0x24>)
 801518a:	6013      	str	r3, [r2, #0]
}
 801518c:	bf00      	nop
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	20000078 	.word	0x20000078
 801519c:	20008650 	.word	0x20008650

080151a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80151a0:	b480      	push	{r7}
 80151a2:	af00      	add	r7, sp, #0
  return uwTick;
 80151a4:	4b03      	ldr	r3, [pc, #12]	; (80151b4 <HAL_GetTick+0x14>)
 80151a6:	681b      	ldr	r3, [r3, #0]
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr
 80151b2:	bf00      	nop
 80151b4:	20008650 	.word	0x20008650

080151b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80151b8:	b480      	push	{r7}
 80151ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80151bc:	4b03      	ldr	r3, [pc, #12]	; (80151cc <HAL_GetTickPrio+0x14>)
 80151be:	681b      	ldr	r3, [r3, #0]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop
 80151cc:	20000074 	.word	0x20000074

080151d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80151d8:	f7ff ffe2 	bl	80151a0 <HAL_GetTick>
 80151dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e8:	d005      	beq.n	80151f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80151ea:	4b0a      	ldr	r3, [pc, #40]	; (8015214 <HAL_Delay+0x44>)
 80151ec:	781b      	ldrb	r3, [r3, #0]
 80151ee:	461a      	mov	r2, r3
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	4413      	add	r3, r2
 80151f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80151f6:	bf00      	nop
 80151f8:	f7ff ffd2 	bl	80151a0 <HAL_GetTick>
 80151fc:	4602      	mov	r2, r0
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	68fa      	ldr	r2, [r7, #12]
 8015204:	429a      	cmp	r2, r3
 8015206:	d8f7      	bhi.n	80151f8 <HAL_Delay+0x28>
  {
  }
}
 8015208:	bf00      	nop
 801520a:	bf00      	nop
 801520c:	3710      	adds	r7, #16
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	20000078 	.word	0x20000078

08015218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015218:	b480      	push	{r7}
 801521a:	b085      	sub	sp, #20
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f003 0307 	and.w	r3, r3, #7
 8015226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015228:	4b0c      	ldr	r3, [pc, #48]	; (801525c <__NVIC_SetPriorityGrouping+0x44>)
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801522e:	68ba      	ldr	r2, [r7, #8]
 8015230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015234:	4013      	ands	r3, r2
 8015236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801524a:	4a04      	ldr	r2, [pc, #16]	; (801525c <__NVIC_SetPriorityGrouping+0x44>)
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	60d3      	str	r3, [r2, #12]
}
 8015250:	bf00      	nop
 8015252:	3714      	adds	r7, #20
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr
 801525c:	e000ed00 	.word	0xe000ed00

08015260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015260:	b480      	push	{r7}
 8015262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015264:	4b04      	ldr	r3, [pc, #16]	; (8015278 <__NVIC_GetPriorityGrouping+0x18>)
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	0a1b      	lsrs	r3, r3, #8
 801526a:	f003 0307 	and.w	r3, r3, #7
}
 801526e:	4618      	mov	r0, r3
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr
 8015278:	e000ed00 	.word	0xe000ed00

0801527c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801527c:	b480      	push	{r7}
 801527e:	b083      	sub	sp, #12
 8015280:	af00      	add	r7, sp, #0
 8015282:	4603      	mov	r3, r0
 8015284:	6039      	str	r1, [r7, #0]
 8015286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801528c:	2b00      	cmp	r3, #0
 801528e:	db0a      	blt.n	80152a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	b2da      	uxtb	r2, r3
 8015294:	490c      	ldr	r1, [pc, #48]	; (80152c8 <__NVIC_SetPriority+0x4c>)
 8015296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801529a:	0112      	lsls	r2, r2, #4
 801529c:	b2d2      	uxtb	r2, r2
 801529e:	440b      	add	r3, r1
 80152a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80152a4:	e00a      	b.n	80152bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	b2da      	uxtb	r2, r3
 80152aa:	4908      	ldr	r1, [pc, #32]	; (80152cc <__NVIC_SetPriority+0x50>)
 80152ac:	79fb      	ldrb	r3, [r7, #7]
 80152ae:	f003 030f 	and.w	r3, r3, #15
 80152b2:	3b04      	subs	r3, #4
 80152b4:	0112      	lsls	r2, r2, #4
 80152b6:	b2d2      	uxtb	r2, r2
 80152b8:	440b      	add	r3, r1
 80152ba:	761a      	strb	r2, [r3, #24]
}
 80152bc:	bf00      	nop
 80152be:	370c      	adds	r7, #12
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr
 80152c8:	e000e100 	.word	0xe000e100
 80152cc:	e000ed00 	.word	0xe000ed00

080152d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80152d0:	b480      	push	{r7}
 80152d2:	b089      	sub	sp, #36	; 0x24
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f003 0307 	and.w	r3, r3, #7
 80152e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	f1c3 0307 	rsb	r3, r3, #7
 80152ea:	2b04      	cmp	r3, #4
 80152ec:	bf28      	it	cs
 80152ee:	2304      	movcs	r3, #4
 80152f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	3304      	adds	r3, #4
 80152f6:	2b06      	cmp	r3, #6
 80152f8:	d902      	bls.n	8015300 <NVIC_EncodePriority+0x30>
 80152fa:	69fb      	ldr	r3, [r7, #28]
 80152fc:	3b03      	subs	r3, #3
 80152fe:	e000      	b.n	8015302 <NVIC_EncodePriority+0x32>
 8015300:	2300      	movs	r3, #0
 8015302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015304:	f04f 32ff 	mov.w	r2, #4294967295
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	fa02 f303 	lsl.w	r3, r2, r3
 801530e:	43da      	mvns	r2, r3
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	401a      	ands	r2, r3
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015318:	f04f 31ff 	mov.w	r1, #4294967295
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	fa01 f303 	lsl.w	r3, r1, r3
 8015322:	43d9      	mvns	r1, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015328:	4313      	orrs	r3, r2
         );
}
 801532a:	4618      	mov	r0, r3
 801532c:	3724      	adds	r7, #36	; 0x24
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr
	...

08015338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	3b01      	subs	r3, #1
 8015344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015348:	d301      	bcc.n	801534e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801534a:	2301      	movs	r3, #1
 801534c:	e00f      	b.n	801536e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801534e:	4a0a      	ldr	r2, [pc, #40]	; (8015378 <SysTick_Config+0x40>)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	3b01      	subs	r3, #1
 8015354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015356:	210f      	movs	r1, #15
 8015358:	f04f 30ff 	mov.w	r0, #4294967295
 801535c:	f7ff ff8e 	bl	801527c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <SysTick_Config+0x40>)
 8015362:	2200      	movs	r2, #0
 8015364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015366:	4b04      	ldr	r3, [pc, #16]	; (8015378 <SysTick_Config+0x40>)
 8015368:	2207      	movs	r2, #7
 801536a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801536c:	2300      	movs	r3, #0
}
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	e000e010 	.word	0xe000e010

0801537c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f7ff ff47 	bl	8015218 <__NVIC_SetPriorityGrouping>
}
 801538a:	bf00      	nop
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015392:	b580      	push	{r7, lr}
 8015394:	b086      	sub	sp, #24
 8015396:	af00      	add	r7, sp, #0
 8015398:	4603      	mov	r3, r0
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
 801539e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80153a0:	f7ff ff5e 	bl	8015260 <__NVIC_GetPriorityGrouping>
 80153a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	68b9      	ldr	r1, [r7, #8]
 80153aa:	6978      	ldr	r0, [r7, #20]
 80153ac:	f7ff ff90 	bl	80152d0 <NVIC_EncodePriority>
 80153b0:	4602      	mov	r2, r0
 80153b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153b6:	4611      	mov	r1, r2
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7ff ff5f 	bl	801527c <__NVIC_SetPriority>
}
 80153be:	bf00      	nop
 80153c0:	3718      	adds	r7, #24
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7ff ffb2 	bl	8015338 <SysTick_Config>
 80153d4:	4603      	mov	r3, r0
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3708      	adds	r7, #8
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
	...

080153e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80153e0:	b480      	push	{r7}
 80153e2:	b087      	sub	sp, #28
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80153ea:	2300      	movs	r3, #0
 80153ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80153ee:	e14c      	b.n	801568a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	2101      	movs	r1, #1
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	fa01 f303 	lsl.w	r3, r1, r3
 80153fc:	4013      	ands	r3, r2
 80153fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	f000 813e 	beq.w	8015684 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	f003 0303 	and.w	r3, r3, #3
 8015410:	2b01      	cmp	r3, #1
 8015412:	d005      	beq.n	8015420 <HAL_GPIO_Init+0x40>
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	f003 0303 	and.w	r3, r3, #3
 801541c:	2b02      	cmp	r3, #2
 801541e:	d130      	bne.n	8015482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	689b      	ldr	r3, [r3, #8]
 8015424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	005b      	lsls	r3, r3, #1
 801542a:	2203      	movs	r2, #3
 801542c:	fa02 f303 	lsl.w	r3, r2, r3
 8015430:	43db      	mvns	r3, r3
 8015432:	693a      	ldr	r2, [r7, #16]
 8015434:	4013      	ands	r3, r2
 8015436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	68da      	ldr	r2, [r3, #12]
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	005b      	lsls	r3, r3, #1
 8015440:	fa02 f303 	lsl.w	r3, r2, r3
 8015444:	693a      	ldr	r2, [r7, #16]
 8015446:	4313      	orrs	r3, r2
 8015448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	693a      	ldr	r2, [r7, #16]
 801544e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8015456:	2201      	movs	r2, #1
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	fa02 f303 	lsl.w	r3, r2, r3
 801545e:	43db      	mvns	r3, r3
 8015460:	693a      	ldr	r2, [r7, #16]
 8015462:	4013      	ands	r3, r2
 8015464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	091b      	lsrs	r3, r3, #4
 801546c:	f003 0201 	and.w	r2, r3, #1
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	fa02 f303 	lsl.w	r3, r2, r3
 8015476:	693a      	ldr	r2, [r7, #16]
 8015478:	4313      	orrs	r3, r2
 801547a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	693a      	ldr	r2, [r7, #16]
 8015480:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	f003 0303 	and.w	r3, r3, #3
 801548a:	2b03      	cmp	r3, #3
 801548c:	d017      	beq.n	80154be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	2203      	movs	r2, #3
 801549a:	fa02 f303 	lsl.w	r3, r2, r3
 801549e:	43db      	mvns	r3, r3
 80154a0:	693a      	ldr	r2, [r7, #16]
 80154a2:	4013      	ands	r3, r2
 80154a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	689a      	ldr	r2, [r3, #8]
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	fa02 f303 	lsl.w	r3, r2, r3
 80154b2:	693a      	ldr	r2, [r7, #16]
 80154b4:	4313      	orrs	r3, r2
 80154b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	693a      	ldr	r2, [r7, #16]
 80154bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	f003 0303 	and.w	r3, r3, #3
 80154c6:	2b02      	cmp	r3, #2
 80154c8:	d123      	bne.n	8015512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	08da      	lsrs	r2, r3, #3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	3208      	adds	r2, #8
 80154d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	f003 0307 	and.w	r3, r3, #7
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	220f      	movs	r2, #15
 80154e2:	fa02 f303 	lsl.w	r3, r2, r3
 80154e6:	43db      	mvns	r3, r3
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	4013      	ands	r3, r2
 80154ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	691a      	ldr	r2, [r3, #16]
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	f003 0307 	and.w	r3, r3, #7
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	fa02 f303 	lsl.w	r3, r2, r3
 80154fe:	693a      	ldr	r2, [r7, #16]
 8015500:	4313      	orrs	r3, r2
 8015502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	08da      	lsrs	r2, r3, #3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	3208      	adds	r2, #8
 801550c:	6939      	ldr	r1, [r7, #16]
 801550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	005b      	lsls	r3, r3, #1
 801551c:	2203      	movs	r2, #3
 801551e:	fa02 f303 	lsl.w	r3, r2, r3
 8015522:	43db      	mvns	r3, r3
 8015524:	693a      	ldr	r2, [r7, #16]
 8015526:	4013      	ands	r3, r2
 8015528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	f003 0203 	and.w	r2, r3, #3
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	fa02 f303 	lsl.w	r3, r2, r3
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	4313      	orrs	r3, r2
 801553e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	693a      	ldr	r2, [r7, #16]
 8015544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801554e:	2b00      	cmp	r3, #0
 8015550:	f000 8098 	beq.w	8015684 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8015554:	4a54      	ldr	r2, [pc, #336]	; (80156a8 <HAL_GPIO_Init+0x2c8>)
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	089b      	lsrs	r3, r3, #2
 801555a:	3302      	adds	r3, #2
 801555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	f003 0303 	and.w	r3, r3, #3
 8015568:	009b      	lsls	r3, r3, #2
 801556a:	220f      	movs	r2, #15
 801556c:	fa02 f303 	lsl.w	r3, r2, r3
 8015570:	43db      	mvns	r3, r3
 8015572:	693a      	ldr	r2, [r7, #16]
 8015574:	4013      	ands	r3, r2
 8015576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801557e:	d019      	beq.n	80155b4 <HAL_GPIO_Init+0x1d4>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	4a4a      	ldr	r2, [pc, #296]	; (80156ac <HAL_GPIO_Init+0x2cc>)
 8015584:	4293      	cmp	r3, r2
 8015586:	d013      	beq.n	80155b0 <HAL_GPIO_Init+0x1d0>
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	4a49      	ldr	r2, [pc, #292]	; (80156b0 <HAL_GPIO_Init+0x2d0>)
 801558c:	4293      	cmp	r3, r2
 801558e:	d00d      	beq.n	80155ac <HAL_GPIO_Init+0x1cc>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	4a48      	ldr	r2, [pc, #288]	; (80156b4 <HAL_GPIO_Init+0x2d4>)
 8015594:	4293      	cmp	r3, r2
 8015596:	d007      	beq.n	80155a8 <HAL_GPIO_Init+0x1c8>
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	4a47      	ldr	r2, [pc, #284]	; (80156b8 <HAL_GPIO_Init+0x2d8>)
 801559c:	4293      	cmp	r3, r2
 801559e:	d101      	bne.n	80155a4 <HAL_GPIO_Init+0x1c4>
 80155a0:	2304      	movs	r3, #4
 80155a2:	e008      	b.n	80155b6 <HAL_GPIO_Init+0x1d6>
 80155a4:	2307      	movs	r3, #7
 80155a6:	e006      	b.n	80155b6 <HAL_GPIO_Init+0x1d6>
 80155a8:	2303      	movs	r3, #3
 80155aa:	e004      	b.n	80155b6 <HAL_GPIO_Init+0x1d6>
 80155ac:	2302      	movs	r3, #2
 80155ae:	e002      	b.n	80155b6 <HAL_GPIO_Init+0x1d6>
 80155b0:	2301      	movs	r3, #1
 80155b2:	e000      	b.n	80155b6 <HAL_GPIO_Init+0x1d6>
 80155b4:	2300      	movs	r3, #0
 80155b6:	697a      	ldr	r2, [r7, #20]
 80155b8:	f002 0203 	and.w	r2, r2, #3
 80155bc:	0092      	lsls	r2, r2, #2
 80155be:	4093      	lsls	r3, r2
 80155c0:	693a      	ldr	r2, [r7, #16]
 80155c2:	4313      	orrs	r3, r2
 80155c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80155c6:	4938      	ldr	r1, [pc, #224]	; (80156a8 <HAL_GPIO_Init+0x2c8>)
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	089b      	lsrs	r3, r3, #2
 80155cc:	3302      	adds	r3, #2
 80155ce:	693a      	ldr	r2, [r7, #16]
 80155d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80155d4:	4b39      	ldr	r3, [pc, #228]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	43db      	mvns	r3, r3
 80155de:	693a      	ldr	r2, [r7, #16]
 80155e0:	4013      	ands	r3, r2
 80155e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d003      	beq.n	80155f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80155f0:	693a      	ldr	r2, [r7, #16]
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	4313      	orrs	r3, r2
 80155f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80155f8:	4a30      	ldr	r2, [pc, #192]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80155fe:	4b2f      	ldr	r3, [pc, #188]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	43db      	mvns	r3, r3
 8015608:	693a      	ldr	r2, [r7, #16]
 801560a:	4013      	ands	r3, r2
 801560c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015616:	2b00      	cmp	r3, #0
 8015618:	d003      	beq.n	8015622 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801561a:	693a      	ldr	r2, [r7, #16]
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	4313      	orrs	r3, r2
 8015620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015622:	4a26      	ldr	r2, [pc, #152]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015628:	4b24      	ldr	r3, [pc, #144]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 801562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801562e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	43db      	mvns	r3, r3
 8015634:	693a      	ldr	r2, [r7, #16]
 8015636:	4013      	ands	r3, r2
 8015638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015642:	2b00      	cmp	r3, #0
 8015644:	d003      	beq.n	801564e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8015646:	693a      	ldr	r2, [r7, #16]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	4313      	orrs	r3, r2
 801564c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801564e:	4a1b      	ldr	r2, [pc, #108]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8015656:	4b19      	ldr	r3, [pc, #100]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 8015658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801565c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	43db      	mvns	r3, r3
 8015662:	693a      	ldr	r2, [r7, #16]
 8015664:	4013      	ands	r3, r2
 8015666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015670:	2b00      	cmp	r3, #0
 8015672:	d003      	beq.n	801567c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8015674:	693a      	ldr	r2, [r7, #16]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	4313      	orrs	r3, r2
 801567a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801567c:	4a0f      	ldr	r2, [pc, #60]	; (80156bc <HAL_GPIO_Init+0x2dc>)
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	3301      	adds	r3, #1
 8015688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	681a      	ldr	r2, [r3, #0]
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	fa22 f303 	lsr.w	r3, r2, r3
 8015694:	2b00      	cmp	r3, #0
 8015696:	f47f aeab 	bne.w	80153f0 <HAL_GPIO_Init+0x10>
  }
}
 801569a:	bf00      	nop
 801569c:	bf00      	nop
 801569e:	371c      	adds	r7, #28
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr
 80156a8:	40010000 	.word	0x40010000
 80156ac:	48000400 	.word	0x48000400
 80156b0:	48000800 	.word	0x48000800
 80156b4:	48000c00 	.word	0x48000c00
 80156b8:	48001000 	.word	0x48001000
 80156bc:	58000800 	.word	0x58000800

080156c0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b087      	sub	sp, #28
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80156ca:	2300      	movs	r3, #0
 80156cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80156ce:	e0bb      	b.n	8015848 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80156d0:	2201      	movs	r2, #1
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	fa02 f303 	lsl.w	r3, r2, r3
 80156d8:	683a      	ldr	r2, [r7, #0]
 80156da:	4013      	ands	r3, r2
 80156dc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f000 80ae 	beq.w	8015842 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80156e6:	4a5f      	ldr	r2, [pc, #380]	; (8015864 <HAL_GPIO_DeInit+0x1a4>)
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	089b      	lsrs	r3, r3, #2
 80156ec:	3302      	adds	r3, #2
 80156ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156f2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	f003 0303 	and.w	r3, r3, #3
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	220f      	movs	r2, #15
 80156fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	4013      	ands	r3, r2
 8015706:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801570e:	d019      	beq.n	8015744 <HAL_GPIO_DeInit+0x84>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	4a55      	ldr	r2, [pc, #340]	; (8015868 <HAL_GPIO_DeInit+0x1a8>)
 8015714:	4293      	cmp	r3, r2
 8015716:	d013      	beq.n	8015740 <HAL_GPIO_DeInit+0x80>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	4a54      	ldr	r2, [pc, #336]	; (801586c <HAL_GPIO_DeInit+0x1ac>)
 801571c:	4293      	cmp	r3, r2
 801571e:	d00d      	beq.n	801573c <HAL_GPIO_DeInit+0x7c>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	4a53      	ldr	r2, [pc, #332]	; (8015870 <HAL_GPIO_DeInit+0x1b0>)
 8015724:	4293      	cmp	r3, r2
 8015726:	d007      	beq.n	8015738 <HAL_GPIO_DeInit+0x78>
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4a52      	ldr	r2, [pc, #328]	; (8015874 <HAL_GPIO_DeInit+0x1b4>)
 801572c:	4293      	cmp	r3, r2
 801572e:	d101      	bne.n	8015734 <HAL_GPIO_DeInit+0x74>
 8015730:	2304      	movs	r3, #4
 8015732:	e008      	b.n	8015746 <HAL_GPIO_DeInit+0x86>
 8015734:	2307      	movs	r3, #7
 8015736:	e006      	b.n	8015746 <HAL_GPIO_DeInit+0x86>
 8015738:	2303      	movs	r3, #3
 801573a:	e004      	b.n	8015746 <HAL_GPIO_DeInit+0x86>
 801573c:	2302      	movs	r3, #2
 801573e:	e002      	b.n	8015746 <HAL_GPIO_DeInit+0x86>
 8015740:	2301      	movs	r3, #1
 8015742:	e000      	b.n	8015746 <HAL_GPIO_DeInit+0x86>
 8015744:	2300      	movs	r3, #0
 8015746:	697a      	ldr	r2, [r7, #20]
 8015748:	f002 0203 	and.w	r2, r2, #3
 801574c:	0092      	lsls	r2, r2, #2
 801574e:	4093      	lsls	r3, r2
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	429a      	cmp	r2, r3
 8015754:	d136      	bne.n	80157c4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8015756:	4b48      	ldr	r3, [pc, #288]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 8015758:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	43db      	mvns	r3, r3
 8015760:	4945      	ldr	r1, [pc, #276]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 8015762:	4013      	ands	r3, r2
 8015764:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015768:	4b43      	ldr	r3, [pc, #268]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 801576a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	43db      	mvns	r3, r3
 8015772:	4941      	ldr	r1, [pc, #260]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 8015774:	4013      	ands	r3, r2
 8015776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 801577a:	4b3f      	ldr	r3, [pc, #252]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	43db      	mvns	r3, r3
 8015782:	493d      	ldr	r1, [pc, #244]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 8015784:	4013      	ands	r3, r2
 8015786:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015788:	4b3b      	ldr	r3, [pc, #236]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 801578a:	685a      	ldr	r2, [r3, #4]
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	43db      	mvns	r3, r3
 8015790:	4939      	ldr	r1, [pc, #228]	; (8015878 <HAL_GPIO_DeInit+0x1b8>)
 8015792:	4013      	ands	r3, r2
 8015794:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	f003 0303 	and.w	r3, r3, #3
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	220f      	movs	r2, #15
 80157a0:	fa02 f303 	lsl.w	r3, r2, r3
 80157a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80157a6:	4a2f      	ldr	r2, [pc, #188]	; (8015864 <HAL_GPIO_DeInit+0x1a4>)
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	089b      	lsrs	r3, r3, #2
 80157ac:	3302      	adds	r3, #2
 80157ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	43da      	mvns	r2, r3
 80157b6:	482b      	ldr	r0, [pc, #172]	; (8015864 <HAL_GPIO_DeInit+0x1a4>)
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	089b      	lsrs	r3, r3, #2
 80157bc:	400a      	ands	r2, r1
 80157be:	3302      	adds	r3, #2
 80157c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	005b      	lsls	r3, r3, #1
 80157cc:	2103      	movs	r1, #3
 80157ce:	fa01 f303 	lsl.w	r3, r1, r3
 80157d2:	431a      	orrs	r2, r3
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	08da      	lsrs	r2, r3, #3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	3208      	adds	r2, #8
 80157e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f003 0307 	and.w	r3, r3, #7
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	220f      	movs	r2, #15
 80157ee:	fa02 f303 	lsl.w	r3, r2, r3
 80157f2:	43db      	mvns	r3, r3
 80157f4:	697a      	ldr	r2, [r7, #20]
 80157f6:	08d2      	lsrs	r2, r2, #3
 80157f8:	4019      	ands	r1, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	3208      	adds	r2, #8
 80157fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	68da      	ldr	r2, [r3, #12]
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	005b      	lsls	r3, r3, #1
 801580a:	2103      	movs	r1, #3
 801580c:	fa01 f303 	lsl.w	r3, r1, r3
 8015810:	43db      	mvns	r3, r3
 8015812:	401a      	ands	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	685a      	ldr	r2, [r3, #4]
 801581c:	2101      	movs	r1, #1
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	fa01 f303 	lsl.w	r3, r1, r3
 8015824:	43db      	mvns	r3, r3
 8015826:	401a      	ands	r2, r3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	689a      	ldr	r2, [r3, #8]
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	005b      	lsls	r3, r3, #1
 8015834:	2103      	movs	r1, #3
 8015836:	fa01 f303 	lsl.w	r3, r1, r3
 801583a:	43db      	mvns	r3, r3
 801583c:	401a      	ands	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	3301      	adds	r3, #1
 8015846:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015848:	683a      	ldr	r2, [r7, #0]
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	fa22 f303 	lsr.w	r3, r2, r3
 8015850:	2b00      	cmp	r3, #0
 8015852:	f47f af3d 	bne.w	80156d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8015856:	bf00      	nop
 8015858:	bf00      	nop
 801585a:	371c      	adds	r7, #28
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr
 8015864:	40010000 	.word	0x40010000
 8015868:	48000400 	.word	0x48000400
 801586c:	48000800 	.word	0x48000800
 8015870:	48000c00 	.word	0x48000c00
 8015874:	48001000 	.word	0x48001000
 8015878:	58000800 	.word	0x58000800

0801587c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	460b      	mov	r3, r1
 8015886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	691a      	ldr	r2, [r3, #16]
 801588c:	887b      	ldrh	r3, [r7, #2]
 801588e:	4013      	ands	r3, r2
 8015890:	2b00      	cmp	r3, #0
 8015892:	d002      	beq.n	801589a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015894:	2301      	movs	r3, #1
 8015896:	73fb      	strb	r3, [r7, #15]
 8015898:	e001      	b.n	801589e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	460b      	mov	r3, r1
 80158b6:	807b      	strh	r3, [r7, #2]
 80158b8:	4613      	mov	r3, r2
 80158ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80158bc:	787b      	ldrb	r3, [r7, #1]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d003      	beq.n	80158ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80158c2:	887a      	ldrh	r2, [r7, #2]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80158c8:	e002      	b.n	80158d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80158ca:	887a      	ldrh	r2, [r7, #2]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80158d0:	bf00      	nop
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr

080158dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d101      	bne.n	80158ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80158ea:	2301      	movs	r3, #1
 80158ec:	e081      	b.n	80159f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d106      	bne.n	8015908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2200      	movs	r2, #0
 80158fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f000 f8a8 	bl	8015a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2224      	movs	r2, #36	; 0x24
 801590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f022 0201 	bic.w	r2, r2, #1
 801591e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	685a      	ldr	r2, [r3, #4]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801592c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	689a      	ldr	r2, [r3, #8]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801593c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	2b01      	cmp	r3, #1
 8015944:	d107      	bne.n	8015956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	689a      	ldr	r2, [r3, #8]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015952:	609a      	str	r2, [r3, #8]
 8015954:	e006      	b.n	8015964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	689a      	ldr	r2, [r3, #8]
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	2b02      	cmp	r3, #2
 801596a:	d104      	bne.n	8015976 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	6812      	ldr	r2, [r2, #0]
 8015980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	68da      	ldr	r2, [r3, #12]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	691a      	ldr	r2, [r3, #16]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	699b      	ldr	r3, [r3, #24]
 80159aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	430a      	orrs	r2, r1
 80159b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	69d9      	ldr	r1, [r3, #28]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6a1a      	ldr	r2, [r3, #32]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	430a      	orrs	r2, r1
 80159c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f042 0201 	orr.w	r2, r2, #1
 80159d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2220      	movs	r2, #32
 80159de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2200      	movs	r2, #0
 80159e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2200      	movs	r2, #0
 80159ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80159f0:	2300      	movs	r3, #0
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80159fa:	b580      	push	{r7, lr}
 80159fc:	b082      	sub	sp, #8
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d101      	bne.n	8015a0c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015a08:	2301      	movs	r3, #1
 8015a0a:	e021      	b.n	8015a50 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2224      	movs	r2, #36	; 0x24
 8015a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	f022 0201 	bic.w	r2, r2, #1
 8015a22:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f000 f821 	bl	8015a6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2200      	movs	r2, #0
 8015a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2200      	movs	r2, #0
 8015a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015a4e:	2300      	movs	r3, #0
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3708      	adds	r7, #8
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015a60:	bf00      	nop
 8015a62:	370c      	adds	r7, #12
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr

08015a6c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015a6c:	b480      	push	{r7}
 8015a6e:	b083      	sub	sp, #12
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015a74:	bf00      	nop
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b088      	sub	sp, #32
 8015a84:	af02      	add	r7, sp, #8
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	607a      	str	r2, [r7, #4]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	817b      	strh	r3, [r7, #10]
 8015a90:	4613      	mov	r3, r2
 8015a92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	2b20      	cmp	r3, #32
 8015a9e:	f040 80da 	bne.w	8015c56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d101      	bne.n	8015ab0 <HAL_I2C_Master_Transmit+0x30>
 8015aac:	2302      	movs	r3, #2
 8015aae:	e0d3      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015ab8:	f7ff fb72 	bl	80151a0 <HAL_GetTick>
 8015abc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	9300      	str	r3, [sp, #0]
 8015ac2:	2319      	movs	r3, #25
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015aca:	68f8      	ldr	r0, [r7, #12]
 8015acc:	f000 fa00 	bl	8015ed0 <I2C_WaitOnFlagUntilTimeout>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d001      	beq.n	8015ada <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	e0be      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2221      	movs	r2, #33	; 0x21
 8015ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2210      	movs	r2, #16
 8015ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2200      	movs	r2, #0
 8015aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	687a      	ldr	r2, [r7, #4]
 8015af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	893a      	ldrh	r2, [r7, #8]
 8015afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	2200      	movs	r2, #0
 8015b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	2bff      	cmp	r3, #255	; 0xff
 8015b0a:	d90e      	bls.n	8015b2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	22ff      	movs	r2, #255	; 0xff
 8015b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b16:	b2da      	uxtb	r2, r3
 8015b18:	8979      	ldrh	r1, [r7, #10]
 8015b1a:	4b51      	ldr	r3, [pc, #324]	; (8015c60 <HAL_I2C_Master_Transmit+0x1e0>)
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015b22:	68f8      	ldr	r0, [r7, #12]
 8015b24:	f000 fc10 	bl	8016348 <I2C_TransferConfig>
 8015b28:	e06c      	b.n	8015c04 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b38:	b2da      	uxtb	r2, r3
 8015b3a:	8979      	ldrh	r1, [r7, #10]
 8015b3c:	4b48      	ldr	r3, [pc, #288]	; (8015c60 <HAL_I2C_Master_Transmit+0x1e0>)
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015b44:	68f8      	ldr	r0, [r7, #12]
 8015b46:	f000 fbff 	bl	8016348 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015b4a:	e05b      	b.n	8015c04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015b4c:	697a      	ldr	r2, [r7, #20]
 8015b4e:	6a39      	ldr	r1, [r7, #32]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f000 fa0c 	bl	8015f6e <I2C_WaitOnTXISFlagUntilTimeout>
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d001      	beq.n	8015b60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	e07b      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b64:	781a      	ldrb	r2, [r3, #0]
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b70:	1c5a      	adds	r2, r3, #1
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	3b01      	subs	r3, #1
 8015b7e:	b29a      	uxth	r2, r3
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b88:	3b01      	subs	r3, #1
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d034      	beq.n	8015c04 <HAL_I2C_Master_Transmit+0x184>
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d130      	bne.n	8015c04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	9300      	str	r3, [sp, #0]
 8015ba6:	6a3b      	ldr	r3, [r7, #32]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	2180      	movs	r1, #128	; 0x80
 8015bac:	68f8      	ldr	r0, [r7, #12]
 8015bae:	f000 f98f 	bl	8015ed0 <I2C_WaitOnFlagUntilTimeout>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d001      	beq.n	8015bbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015bb8:	2301      	movs	r3, #1
 8015bba:	e04d      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	2bff      	cmp	r3, #255	; 0xff
 8015bc4:	d90e      	bls.n	8015be4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	22ff      	movs	r2, #255	; 0xff
 8015bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bd0:	b2da      	uxtb	r2, r3
 8015bd2:	8979      	ldrh	r1, [r7, #10]
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f000 fbb3 	bl	8016348 <I2C_TransferConfig>
 8015be2:	e00f      	b.n	8015c04 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015be8:	b29a      	uxth	r2, r3
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	8979      	ldrh	r1, [r7, #10]
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	9300      	str	r3, [sp, #0]
 8015bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015bfe:	68f8      	ldr	r0, [r7, #12]
 8015c00:	f000 fba2 	bl	8016348 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d19e      	bne.n	8015b4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c0e:	697a      	ldr	r2, [r7, #20]
 8015c10:	6a39      	ldr	r1, [r7, #32]
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f000 f9f2 	bl	8015ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d001      	beq.n	8015c22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e01a      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2220      	movs	r2, #32
 8015c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	6859      	ldr	r1, [r3, #4]
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	4b0b      	ldr	r3, [pc, #44]	; (8015c64 <HAL_I2C_Master_Transmit+0x1e4>)
 8015c36:	400b      	ands	r3, r1
 8015c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2220      	movs	r2, #32
 8015c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2200      	movs	r2, #0
 8015c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015c52:	2300      	movs	r3, #0
 8015c54:	e000      	b.n	8015c58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015c56:	2302      	movs	r3, #2
  }
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3718      	adds	r7, #24
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	80002000 	.word	0x80002000
 8015c64:	fe00e800 	.word	0xfe00e800

08015c68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b088      	sub	sp, #32
 8015c6c:	af02      	add	r7, sp, #8
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	607a      	str	r2, [r7, #4]
 8015c72:	461a      	mov	r2, r3
 8015c74:	460b      	mov	r3, r1
 8015c76:	817b      	strh	r3, [r7, #10]
 8015c78:	4613      	mov	r3, r2
 8015c7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015c82:	b2db      	uxtb	r3, r3
 8015c84:	2b20      	cmp	r3, #32
 8015c86:	f040 80db 	bne.w	8015e40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d101      	bne.n	8015c98 <HAL_I2C_Master_Receive+0x30>
 8015c94:	2302      	movs	r3, #2
 8015c96:	e0d4      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	2201      	movs	r2, #1
 8015c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015ca0:	f7ff fa7e 	bl	80151a0 <HAL_GetTick>
 8015ca4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	2319      	movs	r3, #25
 8015cac:	2201      	movs	r2, #1
 8015cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015cb2:	68f8      	ldr	r0, [r7, #12]
 8015cb4:	f000 f90c 	bl	8015ed0 <I2C_WaitOnFlagUntilTimeout>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d001      	beq.n	8015cc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015cbe:	2301      	movs	r3, #1
 8015cc0:	e0bf      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2222      	movs	r2, #34	; 0x22
 8015cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	2210      	movs	r2, #16
 8015cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	893a      	ldrh	r2, [r7, #8]
 8015ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	2bff      	cmp	r3, #255	; 0xff
 8015cf2:	d90e      	bls.n	8015d12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	22ff      	movs	r2, #255	; 0xff
 8015cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cfe:	b2da      	uxtb	r2, r3
 8015d00:	8979      	ldrh	r1, [r7, #10]
 8015d02:	4b52      	ldr	r3, [pc, #328]	; (8015e4c <HAL_I2C_Master_Receive+0x1e4>)
 8015d04:	9300      	str	r3, [sp, #0]
 8015d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015d0a:	68f8      	ldr	r0, [r7, #12]
 8015d0c:	f000 fb1c 	bl	8016348 <I2C_TransferConfig>
 8015d10:	e06d      	b.n	8015dee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d16:	b29a      	uxth	r2, r3
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	8979      	ldrh	r1, [r7, #10]
 8015d24:	4b49      	ldr	r3, [pc, #292]	; (8015e4c <HAL_I2C_Master_Receive+0x1e4>)
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f000 fb0b 	bl	8016348 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015d32:	e05c      	b.n	8015dee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d34:	697a      	ldr	r2, [r7, #20]
 8015d36:	6a39      	ldr	r1, [r7, #32]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f000 f9a3 	bl	8016084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d001      	beq.n	8015d48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015d44:	2301      	movs	r3, #1
 8015d46:	e07c      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d52:	b2d2      	uxtb	r2, r2
 8015d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d5a:	1c5a      	adds	r2, r3, #1
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d64:	3b01      	subs	r3, #1
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	3b01      	subs	r3, #1
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d034      	beq.n	8015dee <HAL_I2C_Master_Receive+0x186>
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d130      	bne.n	8015dee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	6a3b      	ldr	r3, [r7, #32]
 8015d92:	2200      	movs	r2, #0
 8015d94:	2180      	movs	r1, #128	; 0x80
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f000 f89a 	bl	8015ed0 <I2C_WaitOnFlagUntilTimeout>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d001      	beq.n	8015da6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015da2:	2301      	movs	r3, #1
 8015da4:	e04d      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	2bff      	cmp	r3, #255	; 0xff
 8015dae:	d90e      	bls.n	8015dce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	22ff      	movs	r2, #255	; 0xff
 8015db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dba:	b2da      	uxtb	r2, r3
 8015dbc:	8979      	ldrh	r1, [r7, #10]
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	9300      	str	r3, [sp, #0]
 8015dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015dc6:	68f8      	ldr	r0, [r7, #12]
 8015dc8:	f000 fabe 	bl	8016348 <I2C_TransferConfig>
 8015dcc:	e00f      	b.n	8015dee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ddc:	b2da      	uxtb	r2, r3
 8015dde:	8979      	ldrh	r1, [r7, #10]
 8015de0:	2300      	movs	r3, #0
 8015de2:	9300      	str	r3, [sp, #0]
 8015de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f000 faad 	bl	8016348 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d19d      	bne.n	8015d34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015df8:	697a      	ldr	r2, [r7, #20]
 8015dfa:	6a39      	ldr	r1, [r7, #32]
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f000 f8fd 	bl	8015ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d001      	beq.n	8015e0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015e08:	2301      	movs	r3, #1
 8015e0a:	e01a      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2220      	movs	r2, #32
 8015e12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	6859      	ldr	r1, [r3, #4]
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	4b0c      	ldr	r3, [pc, #48]	; (8015e50 <HAL_I2C_Master_Receive+0x1e8>)
 8015e20:	400b      	ands	r3, r1
 8015e22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	2220      	movs	r2, #32
 8015e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2200      	movs	r2, #0
 8015e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	e000      	b.n	8015e42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015e40:	2302      	movs	r3, #2
  }
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3718      	adds	r7, #24
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	80002400 	.word	0x80002400
 8015e50:	fe00e800 	.word	0xfe00e800

08015e54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015e62:	b2db      	uxtb	r3, r3
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8015e70:	b480      	push	{r7}
 8015e72:	b083      	sub	sp, #12
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	370c      	adds	r7, #12
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr

08015e88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b083      	sub	sp, #12
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	699b      	ldr	r3, [r3, #24]
 8015e96:	f003 0302 	and.w	r3, r3, #2
 8015e9a:	2b02      	cmp	r3, #2
 8015e9c:	d103      	bne.n	8015ea6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	699b      	ldr	r3, [r3, #24]
 8015eac:	f003 0301 	and.w	r3, r3, #1
 8015eb0:	2b01      	cmp	r3, #1
 8015eb2:	d007      	beq.n	8015ec4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	699a      	ldr	r2, [r3, #24]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	f042 0201 	orr.w	r2, r2, #1
 8015ec2:	619a      	str	r2, [r3, #24]
  }
}
 8015ec4:	bf00      	nop
 8015ec6:	370c      	adds	r7, #12
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	60f8      	str	r0, [r7, #12]
 8015ed8:	60b9      	str	r1, [r7, #8]
 8015eda:	603b      	str	r3, [r7, #0]
 8015edc:	4613      	mov	r3, r2
 8015ede:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ee0:	e031      	b.n	8015f46 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ee8:	d02d      	beq.n	8015f46 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015eea:	f7ff f959 	bl	80151a0 <HAL_GetTick>
 8015eee:	4602      	mov	r2, r0
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	1ad3      	subs	r3, r2, r3
 8015ef4:	683a      	ldr	r2, [r7, #0]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d302      	bcc.n	8015f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d122      	bne.n	8015f46 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	699a      	ldr	r2, [r3, #24]
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	4013      	ands	r3, r2
 8015f0a:	68ba      	ldr	r2, [r7, #8]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	bf0c      	ite	eq
 8015f10:	2301      	moveq	r3, #1
 8015f12:	2300      	movne	r3, #0
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	461a      	mov	r2, r3
 8015f18:	79fb      	ldrb	r3, [r7, #7]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d113      	bne.n	8015f46 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f22:	f043 0220 	orr.w	r2, r3, #32
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	2220      	movs	r2, #32
 8015f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	2200      	movs	r2, #0
 8015f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8015f42:	2301      	movs	r3, #1
 8015f44:	e00f      	b.n	8015f66 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	699a      	ldr	r2, [r3, #24]
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	4013      	ands	r3, r2
 8015f50:	68ba      	ldr	r2, [r7, #8]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	bf0c      	ite	eq
 8015f56:	2301      	moveq	r3, #1
 8015f58:	2300      	movne	r3, #0
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	79fb      	ldrb	r3, [r7, #7]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d0be      	beq.n	8015ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015f64:	2300      	movs	r3, #0
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b084      	sub	sp, #16
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	60f8      	str	r0, [r7, #12]
 8015f76:	60b9      	str	r1, [r7, #8]
 8015f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015f7a:	e033      	b.n	8015fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	68b9      	ldr	r1, [r7, #8]
 8015f80:	68f8      	ldr	r0, [r7, #12]
 8015f82:	f000 f901 	bl	8016188 <I2C_IsErrorOccurred>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d001      	beq.n	8015f90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e031      	b.n	8015ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f96:	d025      	beq.n	8015fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f98:	f7ff f902 	bl	80151a0 <HAL_GetTick>
 8015f9c:	4602      	mov	r2, r0
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	1ad3      	subs	r3, r2, r3
 8015fa2:	68ba      	ldr	r2, [r7, #8]
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	d302      	bcc.n	8015fae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d11a      	bne.n	8015fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	699b      	ldr	r3, [r3, #24]
 8015fb4:	f003 0302 	and.w	r3, r3, #2
 8015fb8:	2b02      	cmp	r3, #2
 8015fba:	d013      	beq.n	8015fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fc0:	f043 0220 	orr.w	r2, r3, #32
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2220      	movs	r2, #32
 8015fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	e007      	b.n	8015ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	699b      	ldr	r3, [r3, #24]
 8015fea:	f003 0302 	and.w	r3, r3, #2
 8015fee:	2b02      	cmp	r3, #2
 8015ff0:	d1c4      	bne.n	8015f7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8015ff2:	2300      	movs	r3, #0
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3710      	adds	r7, #16
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}

08015ffc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016008:	e02f      	b.n	801606a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	68b9      	ldr	r1, [r7, #8]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f000 f8ba 	bl	8016188 <I2C_IsErrorOccurred>
 8016014:	4603      	mov	r3, r0
 8016016:	2b00      	cmp	r3, #0
 8016018:	d001      	beq.n	801601e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801601a:	2301      	movs	r3, #1
 801601c:	e02d      	b.n	801607a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801601e:	f7ff f8bf 	bl	80151a0 <HAL_GetTick>
 8016022:	4602      	mov	r2, r0
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	1ad3      	subs	r3, r2, r3
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	429a      	cmp	r2, r3
 801602c:	d302      	bcc.n	8016034 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d11a      	bne.n	801606a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	699b      	ldr	r3, [r3, #24]
 801603a:	f003 0320 	and.w	r3, r3, #32
 801603e:	2b20      	cmp	r3, #32
 8016040:	d013      	beq.n	801606a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016046:	f043 0220 	orr.w	r2, r3, #32
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2220      	movs	r2, #32
 8016052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2200      	movs	r2, #0
 801605a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2200      	movs	r2, #0
 8016062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016066:	2301      	movs	r3, #1
 8016068:	e007      	b.n	801607a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	699b      	ldr	r3, [r3, #24]
 8016070:	f003 0320 	and.w	r3, r3, #32
 8016074:	2b20      	cmp	r3, #32
 8016076:	d1c8      	bne.n	801600a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016078:	2300      	movs	r3, #0
}
 801607a:	4618      	mov	r0, r3
 801607c:	3710      	adds	r7, #16
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
	...

08016084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016090:	e06b      	b.n	801616a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	68b9      	ldr	r1, [r7, #8]
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f000 f876 	bl	8016188 <I2C_IsErrorOccurred>
 801609c:	4603      	mov	r3, r0
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d001      	beq.n	80160a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160a2:	2301      	movs	r3, #1
 80160a4:	e069      	b.n	801617a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	699b      	ldr	r3, [r3, #24]
 80160ac:	f003 0320 	and.w	r3, r3, #32
 80160b0:	2b20      	cmp	r3, #32
 80160b2:	d138      	bne.n	8016126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	699b      	ldr	r3, [r3, #24]
 80160ba:	f003 0304 	and.w	r3, r3, #4
 80160be:	2b04      	cmp	r3, #4
 80160c0:	d105      	bne.n	80160ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d001      	beq.n	80160ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	e055      	b.n	801617a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	699b      	ldr	r3, [r3, #24]
 80160d4:	f003 0310 	and.w	r3, r3, #16
 80160d8:	2b10      	cmp	r3, #16
 80160da:	d107      	bne.n	80160ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2210      	movs	r2, #16
 80160e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2204      	movs	r2, #4
 80160e8:	645a      	str	r2, [r3, #68]	; 0x44
 80160ea:	e002      	b.n	80160f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2200      	movs	r2, #0
 80160f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	2220      	movs	r2, #32
 80160f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	6859      	ldr	r1, [r3, #4]
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	4b1f      	ldr	r3, [pc, #124]	; (8016184 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8016106:	400b      	ands	r3, r1
 8016108:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2220      	movs	r2, #32
 801610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2200      	movs	r2, #0
 8016116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2200      	movs	r2, #0
 801611e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016122:	2301      	movs	r3, #1
 8016124:	e029      	b.n	801617a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016126:	f7ff f83b 	bl	80151a0 <HAL_GetTick>
 801612a:	4602      	mov	r2, r0
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	429a      	cmp	r2, r3
 8016134:	d302      	bcc.n	801613c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d116      	bne.n	801616a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	699b      	ldr	r3, [r3, #24]
 8016142:	f003 0304 	and.w	r3, r3, #4
 8016146:	2b04      	cmp	r3, #4
 8016148:	d00f      	beq.n	801616a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801614e:	f043 0220 	orr.w	r2, r3, #32
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2220      	movs	r2, #32
 801615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016166:	2301      	movs	r3, #1
 8016168:	e007      	b.n	801617a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	699b      	ldr	r3, [r3, #24]
 8016170:	f003 0304 	and.w	r3, r3, #4
 8016174:	2b04      	cmp	r3, #4
 8016176:	d18c      	bne.n	8016092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016178:	2300      	movs	r3, #0
}
 801617a:	4618      	mov	r0, r3
 801617c:	3710      	adds	r7, #16
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	fe00e800 	.word	0xfe00e800

08016188 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b08a      	sub	sp, #40	; 0x28
 801618c:	af00      	add	r7, sp, #0
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016194:	2300      	movs	r3, #0
 8016196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	699b      	ldr	r3, [r3, #24]
 80161a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80161a2:	2300      	movs	r3, #0
 80161a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80161aa:	69bb      	ldr	r3, [r7, #24]
 80161ac:	f003 0310 	and.w	r3, r3, #16
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d068      	beq.n	8016286 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2210      	movs	r2, #16
 80161ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80161bc:	e049      	b.n	8016252 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c4:	d045      	beq.n	8016252 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80161c6:	f7fe ffeb 	bl	80151a0 <HAL_GetTick>
 80161ca:	4602      	mov	r2, r0
 80161cc:	69fb      	ldr	r3, [r7, #28]
 80161ce:	1ad3      	subs	r3, r2, r3
 80161d0:	68ba      	ldr	r2, [r7, #8]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d302      	bcc.n	80161dc <I2C_IsErrorOccurred+0x54>
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d13a      	bne.n	8016252 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80161e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80161ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	699b      	ldr	r3, [r3, #24]
 80161f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80161fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80161fe:	d121      	bne.n	8016244 <I2C_IsErrorOccurred+0xbc>
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016206:	d01d      	beq.n	8016244 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016208:	7cfb      	ldrb	r3, [r7, #19]
 801620a:	2b20      	cmp	r3, #32
 801620c:	d01a      	beq.n	8016244 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	685a      	ldr	r2, [r3, #4]
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801621c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801621e:	f7fe ffbf 	bl	80151a0 <HAL_GetTick>
 8016222:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016224:	e00e      	b.n	8016244 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016226:	f7fe ffbb 	bl	80151a0 <HAL_GetTick>
 801622a:	4602      	mov	r2, r0
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	2b19      	cmp	r3, #25
 8016232:	d907      	bls.n	8016244 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8016234:	6a3b      	ldr	r3, [r7, #32]
 8016236:	f043 0320 	orr.w	r3, r3, #32
 801623a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801623c:	2301      	movs	r3, #1
 801623e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8016242:	e006      	b.n	8016252 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	699b      	ldr	r3, [r3, #24]
 801624a:	f003 0320 	and.w	r3, r3, #32
 801624e:	2b20      	cmp	r3, #32
 8016250:	d1e9      	bne.n	8016226 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	699b      	ldr	r3, [r3, #24]
 8016258:	f003 0320 	and.w	r3, r3, #32
 801625c:	2b20      	cmp	r3, #32
 801625e:	d003      	beq.n	8016268 <I2C_IsErrorOccurred+0xe0>
 8016260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016264:	2b00      	cmp	r3, #0
 8016266:	d0aa      	beq.n	80161be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801626c:	2b00      	cmp	r3, #0
 801626e:	d103      	bne.n	8016278 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	2220      	movs	r2, #32
 8016276:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016278:	6a3b      	ldr	r3, [r7, #32]
 801627a:	f043 0304 	orr.w	r3, r3, #4
 801627e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8016280:	2301      	movs	r3, #1
 8016282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	699b      	ldr	r3, [r3, #24]
 801628c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016294:	2b00      	cmp	r3, #0
 8016296:	d00b      	beq.n	80162b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8016298:	6a3b      	ldr	r3, [r7, #32]
 801629a:	f043 0301 	orr.w	r3, r3, #1
 801629e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80162a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80162aa:	2301      	movs	r3, #1
 80162ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d00b      	beq.n	80162d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80162ba:	6a3b      	ldr	r3, [r7, #32]
 80162bc:	f043 0308 	orr.w	r3, r3, #8
 80162c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80162cc:	2301      	movs	r3, #1
 80162ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80162d2:	69bb      	ldr	r3, [r7, #24]
 80162d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d00b      	beq.n	80162f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80162dc:	6a3b      	ldr	r3, [r7, #32]
 80162de:	f043 0302 	orr.w	r3, r3, #2
 80162e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80162ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80162ee:	2301      	movs	r3, #1
 80162f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80162f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d01c      	beq.n	8016336 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f7ff fdc3 	bl	8015e88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	6859      	ldr	r1, [r3, #4]
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	4b0d      	ldr	r3, [pc, #52]	; (8016344 <I2C_IsErrorOccurred+0x1bc>)
 801630e:	400b      	ands	r3, r1
 8016310:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016316:	6a3b      	ldr	r3, [r7, #32]
 8016318:	431a      	orrs	r2, r3
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	2220      	movs	r2, #32
 8016322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2200      	movs	r2, #0
 801632a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2200      	movs	r2, #0
 8016332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801633a:	4618      	mov	r0, r3
 801633c:	3728      	adds	r7, #40	; 0x28
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
 8016342:	bf00      	nop
 8016344:	fe00e800 	.word	0xfe00e800

08016348 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016348:	b480      	push	{r7}
 801634a:	b087      	sub	sp, #28
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	607b      	str	r3, [r7, #4]
 8016352:	460b      	mov	r3, r1
 8016354:	817b      	strh	r3, [r7, #10]
 8016356:	4613      	mov	r3, r2
 8016358:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801635a:	897b      	ldrh	r3, [r7, #10]
 801635c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016360:	7a7b      	ldrb	r3, [r7, #9]
 8016362:	041b      	lsls	r3, r3, #16
 8016364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016368:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801636e:	6a3b      	ldr	r3, [r7, #32]
 8016370:	4313      	orrs	r3, r2
 8016372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016376:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	685a      	ldr	r2, [r3, #4]
 801637e:	6a3b      	ldr	r3, [r7, #32]
 8016380:	0d5b      	lsrs	r3, r3, #21
 8016382:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8016386:	4b08      	ldr	r3, [pc, #32]	; (80163a8 <I2C_TransferConfig+0x60>)
 8016388:	430b      	orrs	r3, r1
 801638a:	43db      	mvns	r3, r3
 801638c:	ea02 0103 	and.w	r1, r2, r3
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	697a      	ldr	r2, [r7, #20]
 8016396:	430a      	orrs	r2, r1
 8016398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801639a:	bf00      	nop
 801639c:	371c      	adds	r7, #28
 801639e:	46bd      	mov	sp, r7
 80163a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a4:	4770      	bx	lr
 80163a6:	bf00      	nop
 80163a8:	03ff63ff 	.word	0x03ff63ff

080163ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	2b20      	cmp	r3, #32
 80163c0:	d138      	bne.n	8016434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	d101      	bne.n	80163d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80163cc:	2302      	movs	r3, #2
 80163ce:	e032      	b.n	8016436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2201      	movs	r2, #1
 80163d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2224      	movs	r2, #36	; 0x24
 80163dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f022 0201 	bic.w	r2, r2, #1
 80163ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80163fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	6819      	ldr	r1, [r3, #0]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	683a      	ldr	r2, [r7, #0]
 801640c:	430a      	orrs	r2, r1
 801640e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f042 0201 	orr.w	r2, r2, #1
 801641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2220      	movs	r2, #32
 8016424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2200      	movs	r2, #0
 801642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016430:	2300      	movs	r3, #0
 8016432:	e000      	b.n	8016436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016434:	2302      	movs	r3, #2
  }
}
 8016436:	4618      	mov	r0, r3
 8016438:	370c      	adds	r7, #12
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr

08016442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016442:	b480      	push	{r7}
 8016444:	b085      	sub	sp, #20
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
 801644a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016452:	b2db      	uxtb	r3, r3
 8016454:	2b20      	cmp	r3, #32
 8016456:	d139      	bne.n	80164cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801645e:	2b01      	cmp	r3, #1
 8016460:	d101      	bne.n	8016466 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016462:	2302      	movs	r3, #2
 8016464:	e033      	b.n	80164ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2201      	movs	r2, #1
 801646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2224      	movs	r2, #36	; 0x24
 8016472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f022 0201 	bic.w	r2, r2, #1
 8016484:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8016494:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	021b      	lsls	r3, r3, #8
 801649a:	68fa      	ldr	r2, [r7, #12]
 801649c:	4313      	orrs	r3, r2
 801649e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	68fa      	ldr	r2, [r7, #12]
 80164a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	f042 0201 	orr.w	r2, r2, #1
 80164b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2220      	movs	r2, #32
 80164bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e000      	b.n	80164ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80164cc:	2302      	movs	r3, #2
  }
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3714      	adds	r7, #20
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr

080164da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80164da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164dc:	b08b      	sub	sp, #44	; 0x2c
 80164de:	af06      	add	r7, sp, #24
 80164e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d101      	bne.n	80164ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80164e8:	2301      	movs	r3, #1
 80164ea:	e0cb      	b.n	8016684 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80164f2:	b2db      	uxtb	r3, r3
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d106      	bne.n	8016506 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2200      	movs	r2, #0
 80164fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f7ea f9e1 	bl	80008c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2203      	movs	r2, #3
 801650a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	4618      	mov	r0, r3
 8016514:	f002 fd12 	bl	8018f3c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016518:	2300      	movs	r3, #0
 801651a:	73fb      	strb	r3, [r7, #15]
 801651c:	e040      	b.n	80165a0 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801651e:	7bfb      	ldrb	r3, [r7, #15]
 8016520:	6879      	ldr	r1, [r7, #4]
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	4613      	mov	r3, r2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	440b      	add	r3, r1
 801652e:	3301      	adds	r3, #1
 8016530:	2201      	movs	r2, #1
 8016532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016534:	7bfb      	ldrb	r3, [r7, #15]
 8016536:	6879      	ldr	r1, [r7, #4]
 8016538:	1c5a      	adds	r2, r3, #1
 801653a:	4613      	mov	r3, r2
 801653c:	009b      	lsls	r3, r3, #2
 801653e:	4413      	add	r3, r2
 8016540:	00db      	lsls	r3, r3, #3
 8016542:	440b      	add	r3, r1
 8016544:	7bfa      	ldrb	r2, [r7, #15]
 8016546:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016548:	7bfb      	ldrb	r3, [r7, #15]
 801654a:	6879      	ldr	r1, [r7, #4]
 801654c:	1c5a      	adds	r2, r3, #1
 801654e:	4613      	mov	r3, r2
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	3303      	adds	r3, #3
 801655a:	2200      	movs	r2, #0
 801655c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801655e:	7bfa      	ldrb	r2, [r7, #15]
 8016560:	6879      	ldr	r1, [r7, #4]
 8016562:	4613      	mov	r3, r2
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	4413      	add	r3, r2
 8016568:	00db      	lsls	r3, r3, #3
 801656a:	440b      	add	r3, r1
 801656c:	3338      	adds	r3, #56	; 0x38
 801656e:	2200      	movs	r2, #0
 8016570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016572:	7bfa      	ldrb	r2, [r7, #15]
 8016574:	6879      	ldr	r1, [r7, #4]
 8016576:	4613      	mov	r3, r2
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	440b      	add	r3, r1
 8016580:	333c      	adds	r3, #60	; 0x3c
 8016582:	2200      	movs	r2, #0
 8016584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016586:	7bfa      	ldrb	r2, [r7, #15]
 8016588:	6879      	ldr	r1, [r7, #4]
 801658a:	4613      	mov	r3, r2
 801658c:	009b      	lsls	r3, r3, #2
 801658e:	4413      	add	r3, r2
 8016590:	00db      	lsls	r3, r3, #3
 8016592:	440b      	add	r3, r1
 8016594:	3340      	adds	r3, #64	; 0x40
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801659a:	7bfb      	ldrb	r3, [r7, #15]
 801659c:	3301      	adds	r3, #1
 801659e:	73fb      	strb	r3, [r7, #15]
 80165a0:	7bfa      	ldrb	r2, [r7, #15]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	685b      	ldr	r3, [r3, #4]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d3b9      	bcc.n	801651e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80165aa:	2300      	movs	r3, #0
 80165ac:	73fb      	strb	r3, [r7, #15]
 80165ae:	e044      	b.n	801663a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80165b0:	7bfa      	ldrb	r2, [r7, #15]
 80165b2:	6879      	ldr	r1, [r7, #4]
 80165b4:	4613      	mov	r3, r2
 80165b6:	009b      	lsls	r3, r3, #2
 80165b8:	4413      	add	r3, r2
 80165ba:	00db      	lsls	r3, r3, #3
 80165bc:	440b      	add	r3, r1
 80165be:	f203 1369 	addw	r3, r3, #361	; 0x169
 80165c2:	2200      	movs	r2, #0
 80165c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80165c6:	7bfa      	ldrb	r2, [r7, #15]
 80165c8:	6879      	ldr	r1, [r7, #4]
 80165ca:	4613      	mov	r3, r2
 80165cc:	009b      	lsls	r3, r3, #2
 80165ce:	4413      	add	r3, r2
 80165d0:	00db      	lsls	r3, r3, #3
 80165d2:	440b      	add	r3, r1
 80165d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80165d8:	7bfa      	ldrb	r2, [r7, #15]
 80165da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80165dc:	7bfa      	ldrb	r2, [r7, #15]
 80165de:	6879      	ldr	r1, [r7, #4]
 80165e0:	4613      	mov	r3, r2
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	4413      	add	r3, r2
 80165e6:	00db      	lsls	r3, r3, #3
 80165e8:	440b      	add	r3, r1
 80165ea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80165ee:	2200      	movs	r2, #0
 80165f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80165f2:	7bfa      	ldrb	r2, [r7, #15]
 80165f4:	6879      	ldr	r1, [r7, #4]
 80165f6:	4613      	mov	r3, r2
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	4413      	add	r3, r2
 80165fc:	00db      	lsls	r3, r3, #3
 80165fe:	440b      	add	r3, r1
 8016600:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016604:	2200      	movs	r2, #0
 8016606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016608:	7bfa      	ldrb	r2, [r7, #15]
 801660a:	6879      	ldr	r1, [r7, #4]
 801660c:	4613      	mov	r3, r2
 801660e:	009b      	lsls	r3, r3, #2
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	440b      	add	r3, r1
 8016616:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801661a:	2200      	movs	r2, #0
 801661c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801661e:	7bfa      	ldrb	r2, [r7, #15]
 8016620:	6879      	ldr	r1, [r7, #4]
 8016622:	4613      	mov	r3, r2
 8016624:	009b      	lsls	r3, r3, #2
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	440b      	add	r3, r1
 801662c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016630:	2200      	movs	r2, #0
 8016632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016634:	7bfb      	ldrb	r3, [r7, #15]
 8016636:	3301      	adds	r3, #1
 8016638:	73fb      	strb	r3, [r7, #15]
 801663a:	7bfa      	ldrb	r2, [r7, #15]
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	429a      	cmp	r2, r3
 8016642:	d3b5      	bcc.n	80165b0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	603b      	str	r3, [r7, #0]
 801664a:	687e      	ldr	r6, [r7, #4]
 801664c:	466d      	mov	r5, sp
 801664e:	f106 0410 	add.w	r4, r6, #16
 8016652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016656:	6823      	ldr	r3, [r4, #0]
 8016658:	602b      	str	r3, [r5, #0]
 801665a:	1d33      	adds	r3, r6, #4
 801665c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801665e:	6838      	ldr	r0, [r7, #0]
 8016660:	f002 fc87 	bl	8018f72 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2200      	movs	r2, #0
 8016668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2201      	movs	r2, #1
 8016670:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	69db      	ldr	r3, [r3, #28]
 8016678:	2b01      	cmp	r3, #1
 801667a:	d102      	bne.n	8016682 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 f805 	bl	801668c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016682:	2300      	movs	r3, #0
}
 8016684:	4618      	mov	r0, r3
 8016686:	3714      	adds	r7, #20
 8016688:	46bd      	mov	sp, r7
 801668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801668c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801668c:	b480      	push	{r7}
 801668e:	b085      	sub	sp, #20
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2201      	movs	r2, #1
 801669e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	f043 0301 	orr.w	r3, r3, #1
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	f043 0302 	orr.w	r3, r3, #2
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80166d2:	2300      	movs	r3, #0
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3714      	adds	r7, #20
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80166e0:	b480      	push	{r7}
 80166e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80166e4:	4b05      	ldr	r3, [pc, #20]	; (80166fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	4a04      	ldr	r2, [pc, #16]	; (80166fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80166ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80166ee:	6013      	str	r3, [r2, #0]
}
 80166f0:	bf00      	nop
 80166f2:	46bd      	mov	sp, r7
 80166f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f8:	4770      	bx	lr
 80166fa:	bf00      	nop
 80166fc:	58000400 	.word	0x58000400

08016700 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016700:	b480      	push	{r7}
 8016702:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016704:	4b04      	ldr	r3, [pc, #16]	; (8016718 <HAL_PWREx_GetVoltageRange+0x18>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801670c:	4618      	mov	r0, r3
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr
 8016716:	bf00      	nop
 8016718:	58000400 	.word	0x58000400

0801671c <LL_RCC_HSE_IsEnabledDiv2>:
{
 801671c:	b480      	push	{r7}
 801671e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801672a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801672e:	d101      	bne.n	8016734 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016730:	2301      	movs	r3, #1
 8016732:	e000      	b.n	8016736 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8016734:	2300      	movs	r3, #0
}
 8016736:	4618      	mov	r0, r3
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr

08016740 <LL_RCC_HSE_Enable>:
{
 8016740:	b480      	push	{r7}
 8016742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801674e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016752:	6013      	str	r3, [r2, #0]
}
 8016754:	bf00      	nop
 8016756:	46bd      	mov	sp, r7
 8016758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675c:	4770      	bx	lr

0801675e <LL_RCC_HSE_Disable>:
{
 801675e:	b480      	push	{r7}
 8016760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8016762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801676c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016770:	6013      	str	r3, [r2, #0]
}
 8016772:	bf00      	nop
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <LL_RCC_HSE_IsReady>:
{
 801677c:	b480      	push	{r7}
 801677e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801678a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801678e:	d101      	bne.n	8016794 <LL_RCC_HSE_IsReady+0x18>
 8016790:	2301      	movs	r3, #1
 8016792:	e000      	b.n	8016796 <LL_RCC_HSE_IsReady+0x1a>
 8016794:	2300      	movs	r3, #0
}
 8016796:	4618      	mov	r0, r3
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr

080167a0 <LL_RCC_HSI_Enable>:
{
 80167a0:	b480      	push	{r7}
 80167a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80167a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80167ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167b2:	6013      	str	r3, [r2, #0]
}
 80167b4:	bf00      	nop
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr

080167be <LL_RCC_HSI_Disable>:
{
 80167be:	b480      	push	{r7}
 80167c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80167c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80167cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167d0:	6013      	str	r3, [r2, #0]
}
 80167d2:	bf00      	nop
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <LL_RCC_HSI_IsReady>:
{
 80167dc:	b480      	push	{r7}
 80167de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80167e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80167ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167ee:	d101      	bne.n	80167f4 <LL_RCC_HSI_IsReady+0x18>
 80167f0:	2301      	movs	r3, #1
 80167f2:	e000      	b.n	80167f6 <LL_RCC_HSI_IsReady+0x1a>
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr

08016800 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	061b      	lsls	r3, r3, #24
 8016816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801681a:	4313      	orrs	r3, r2
 801681c:	604b      	str	r3, [r1, #4]
}
 801681e:	bf00      	nop
 8016820:	370c      	adds	r7, #12
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr

0801682a <LL_RCC_HSI48_Enable>:
{
 801682a:	b480      	push	{r7}
 801682c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801682e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801683a:	f043 0301 	orr.w	r3, r3, #1
 801683e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016842:	bf00      	nop
 8016844:	46bd      	mov	sp, r7
 8016846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684a:	4770      	bx	lr

0801684c <LL_RCC_HSI48_Disable>:
{
 801684c:	b480      	push	{r7}
 801684e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801685c:	f023 0301 	bic.w	r3, r3, #1
 8016860:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016864:	bf00      	nop
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr

0801686e <LL_RCC_HSI48_IsReady>:
{
 801686e:	b480      	push	{r7}
 8016870:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801687a:	f003 0302 	and.w	r3, r3, #2
 801687e:	2b02      	cmp	r3, #2
 8016880:	d101      	bne.n	8016886 <LL_RCC_HSI48_IsReady+0x18>
 8016882:	2301      	movs	r3, #1
 8016884:	e000      	b.n	8016888 <LL_RCC_HSI48_IsReady+0x1a>
 8016886:	2300      	movs	r3, #0
}
 8016888:	4618      	mov	r0, r3
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr

08016892 <LL_RCC_LSE_Enable>:
{
 8016892:	b480      	push	{r7}
 8016894:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801689e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168a2:	f043 0301 	orr.w	r3, r3, #1
 80168a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80168aa:	bf00      	nop
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr

080168b4 <LL_RCC_LSE_Disable>:
{
 80168b4:	b480      	push	{r7}
 80168b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80168b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168c4:	f023 0301 	bic.w	r3, r3, #1
 80168c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80168cc:	bf00      	nop
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr

080168d6 <LL_RCC_LSE_EnableBypass>:
{
 80168d6:	b480      	push	{r7}
 80168d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80168da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168e6:	f043 0304 	orr.w	r3, r3, #4
 80168ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80168ee:	bf00      	nop
 80168f0:	46bd      	mov	sp, r7
 80168f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f6:	4770      	bx	lr

080168f8 <LL_RCC_LSE_DisableBypass>:
{
 80168f8:	b480      	push	{r7}
 80168fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80168fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016908:	f023 0304 	bic.w	r3, r3, #4
 801690c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016910:	bf00      	nop
 8016912:	46bd      	mov	sp, r7
 8016914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016918:	4770      	bx	lr

0801691a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801691a:	b480      	push	{r7}
 801691c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801691e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016926:	f003 0302 	and.w	r3, r3, #2
 801692a:	2b02      	cmp	r3, #2
 801692c:	d101      	bne.n	8016932 <LL_RCC_LSE_IsReady+0x18>
 801692e:	2301      	movs	r3, #1
 8016930:	e000      	b.n	8016934 <LL_RCC_LSE_IsReady+0x1a>
 8016932:	2300      	movs	r3, #0
}
 8016934:	4618      	mov	r0, r3
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr

0801693e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 801693e:	b480      	push	{r7}
 8016940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801694a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801694e:	f043 0301 	orr.w	r3, r3, #1
 8016952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016956:	bf00      	nop
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr

08016960 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016960:	b480      	push	{r7}
 8016962:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801696c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016970:	f023 0301 	bic.w	r3, r3, #1
 8016974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016978:	bf00      	nop
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr

08016982 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016982:	b480      	push	{r7}
 8016984:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801698a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801698e:	f003 0302 	and.w	r3, r3, #2
 8016992:	2b02      	cmp	r3, #2
 8016994:	d101      	bne.n	801699a <LL_RCC_LSI1_IsReady+0x18>
 8016996:	2301      	movs	r3, #1
 8016998:	e000      	b.n	801699c <LL_RCC_LSI1_IsReady+0x1a>
 801699a:	2300      	movs	r3, #0
}
 801699c:	4618      	mov	r0, r3
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr

080169a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80169a6:	b480      	push	{r7}
 80169a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80169aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169b6:	f043 0304 	orr.w	r3, r3, #4
 80169ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80169be:	bf00      	nop
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80169c8:	b480      	push	{r7}
 80169ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80169cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169d8:	f023 0304 	bic.w	r3, r3, #4
 80169dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80169e0:	bf00      	nop
 80169e2:	46bd      	mov	sp, r7
 80169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e8:	4770      	bx	lr

080169ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80169ea:	b480      	push	{r7}
 80169ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80169ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169f6:	f003 0308 	and.w	r3, r3, #8
 80169fa:	2b08      	cmp	r3, #8
 80169fc:	d101      	bne.n	8016a02 <LL_RCC_LSI2_IsReady+0x18>
 80169fe:	2301      	movs	r3, #1
 8016a00:	e000      	b.n	8016a04 <LL_RCC_LSI2_IsReady+0x1a>
 8016a02:	2300      	movs	r3, #0
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	46bd      	mov	sp, r7
 8016a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0c:	4770      	bx	lr

08016a0e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016a0e:	b480      	push	{r7}
 8016a10:	b083      	sub	sp, #12
 8016a12:	af00      	add	r7, sp, #0
 8016a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	021b      	lsls	r3, r3, #8
 8016a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016a30:	bf00      	nop
 8016a32:	370c      	adds	r7, #12
 8016a34:	46bd      	mov	sp, r7
 8016a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3a:	4770      	bx	lr

08016a3c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016a3c:	b480      	push	{r7}
 8016a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a4a:	f043 0301 	orr.w	r3, r3, #1
 8016a4e:	6013      	str	r3, [r2, #0]
}
 8016a50:	bf00      	nop
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr

08016a5a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016a5a:	b480      	push	{r7}
 8016a5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a68:	f023 0301 	bic.w	r3, r3, #1
 8016a6c:	6013      	str	r3, [r2, #0]
}
 8016a6e:	bf00      	nop
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr

08016a78 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016a78:	b480      	push	{r7}
 8016a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f003 0302 	and.w	r3, r3, #2
 8016a86:	2b02      	cmp	r3, #2
 8016a88:	d101      	bne.n	8016a8e <LL_RCC_MSI_IsReady+0x16>
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	e000      	b.n	8016a90 <LL_RCC_MSI_IsReady+0x18>
 8016a8e:	2300      	movs	r3, #0
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	46bd      	mov	sp, r7
 8016a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a98:	4770      	bx	lr

08016a9a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016a9a:	b480      	push	{r7}
 8016a9c:	b083      	sub	sp, #12
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	600b      	str	r3, [r1, #0]
}
 8016ab6:	bf00      	nop
 8016ab8:	370c      	adds	r7, #12
 8016aba:	46bd      	mov	sp, r7
 8016abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac0:	4770      	bx	lr

08016ac2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016ac2:	b480      	push	{r7}
 8016ac4:	b083      	sub	sp, #12
 8016ac6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ad2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2bb0      	cmp	r3, #176	; 0xb0
 8016ad8:	d901      	bls.n	8016ade <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016ada:	23b0      	movs	r3, #176	; 0xb0
 8016adc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016ade:	687b      	ldr	r3, [r7, #4]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr

08016aec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016aec:	b480      	push	{r7}
 8016aee:	b083      	sub	sp, #12
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	021b      	lsls	r3, r3, #8
 8016b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b06:	4313      	orrs	r3, r2
 8016b08:	604b      	str	r3, [r1, #4]
}
 8016b0a:	bf00      	nop
 8016b0c:	370c      	adds	r7, #12
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b14:	4770      	bx	lr

08016b16 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016b16:	b480      	push	{r7}
 8016b18:	b083      	sub	sp, #12
 8016b1a:	af00      	add	r7, sp, #0
 8016b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b22:	689b      	ldr	r3, [r3, #8]
 8016b24:	f023 0203 	bic.w	r2, r3, #3
 8016b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	608b      	str	r3, [r1, #8]
}
 8016b32:	bf00      	nop
 8016b34:	370c      	adds	r7, #12
 8016b36:	46bd      	mov	sp, r7
 8016b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3c:	4770      	bx	lr

08016b3e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016b3e:	b480      	push	{r7}
 8016b40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b46:	689b      	ldr	r3, [r3, #8]
 8016b48:	f003 030c 	and.w	r3, r3, #12
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b54:	4770      	bx	lr

08016b56 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016b56:	b480      	push	{r7}
 8016b58:	b083      	sub	sp, #12
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b62:	689b      	ldr	r3, [r3, #8]
 8016b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	608b      	str	r3, [r1, #8]
}
 8016b72:	bf00      	nop
 8016b74:	370c      	adds	r7, #12
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr

08016b7e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016b7e:	b480      	push	{r7}
 8016b80:	b083      	sub	sp, #12
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016b8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	4313      	orrs	r3, r2
 8016b9a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016b9e:	bf00      	nop
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016baa:	b480      	push	{r7}
 8016bac:	b083      	sub	sp, #12
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016bba:	f023 020f 	bic.w	r2, r3, #15
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	091b      	lsrs	r3, r3, #4
 8016bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016bcc:	bf00      	nop
 8016bce:	370c      	adds	r7, #12
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd6:	4770      	bx	lr

08016bd8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	4313      	orrs	r3, r2
 8016bf2:	608b      	str	r3, [r1, #8]
}
 8016bf4:	bf00      	nop
 8016bf6:	370c      	adds	r7, #12
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfe:	4770      	bx	lr

08016c00 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	4313      	orrs	r3, r2
 8016c1a:	608b      	str	r3, [r1, #8]
}
 8016c1c:	bf00      	nop
 8016c1e:	370c      	adds	r7, #12
 8016c20:	46bd      	mov	sp, r7
 8016c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c26:	4770      	bx	lr

08016c28 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c30:	689b      	ldr	r3, [r3, #8]
 8016c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016c40:	b480      	push	{r7}
 8016c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016c4c:	011b      	lsls	r3, r3, #4
 8016c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	46bd      	mov	sp, r7
 8016c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5a:	4770      	bx	lr

08016c5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016c5c:	b480      	push	{r7}
 8016c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c64:	689b      	ldr	r3, [r3, #8]
 8016c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr

08016c74 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016c74:	b480      	push	{r7}
 8016c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c7c:	689b      	ldr	r3, [r3, #8]
 8016c7e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016c9e:	6013      	str	r3, [r2, #0]
}
 8016ca0:	bf00      	nop
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr

08016caa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016caa:	b480      	push	{r7}
 8016cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016cbc:	6013      	str	r3, [r2, #0]
}
 8016cbe:	bf00      	nop
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016cda:	d101      	bne.n	8016ce0 <LL_RCC_PLL_IsReady+0x18>
 8016cdc:	2301      	movs	r3, #1
 8016cde:	e000      	b.n	8016ce2 <LL_RCC_PLL_IsReady+0x1a>
 8016ce0:	2300      	movs	r3, #0
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cea:	4770      	bx	lr

08016cec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016cec:	b480      	push	{r7}
 8016cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	0a1b      	lsrs	r3, r3, #8
 8016cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr

08016d06 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016d06:	b480      	push	{r7}
 8016d08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr

08016d1e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016d1e:	b480      	push	{r7}
 8016d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8016d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d26:	68db      	ldr	r3, [r3, #12]
 8016d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8016d36:	b480      	push	{r7}
 8016d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8016d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d3e:	68db      	ldr	r3, [r3, #12]
 8016d40:	f003 0303 	and.w	r3, r3, #3
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	46bd      	mov	sp, r7
 8016d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4c:	4770      	bx	lr

08016d4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016d4e:	b480      	push	{r7}
 8016d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d56:	689b      	ldr	r3, [r3, #8]
 8016d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d60:	d101      	bne.n	8016d66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8016d62:	2301      	movs	r3, #1
 8016d64:	e000      	b.n	8016d68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr

08016d72 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8016d72:	b480      	push	{r7}
 8016d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8016d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016d86:	d101      	bne.n	8016d8c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8016d88:	2301      	movs	r3, #1
 8016d8a:	e000      	b.n	8016d8e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8016d8c:	2300      	movs	r3, #0
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	46bd      	mov	sp, r7
 8016d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d96:	4770      	bx	lr

08016d98 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8016d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016da0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dac:	d101      	bne.n	8016db2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8016dae:	2301      	movs	r3, #1
 8016db0:	e000      	b.n	8016db4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8016db2:	2300      	movs	r3, #0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr

08016dbe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8016dbe:	b480      	push	{r7}
 8016dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8016dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dc6:	689b      	ldr	r3, [r3, #8]
 8016dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016dd0:	d101      	bne.n	8016dd6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e000      	b.n	8016dd8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8016dd6:	2300      	movs	r3, #0
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr

08016de2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8016de2:	b480      	push	{r7}
 8016de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8016de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dea:	689b      	ldr	r3, [r3, #8]
 8016dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016df4:	d101      	bne.n	8016dfa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8016df6:	2301      	movs	r3, #1
 8016df8:	e000      	b.n	8016dfc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8016dfa:	2300      	movs	r3, #0
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr
	...

08016e08 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016e08:	b590      	push	{r4, r7, lr}
 8016e0a:	b08d      	sub	sp, #52	; 0x34
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d101      	bne.n	8016e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016e16:	2301      	movs	r3, #1
 8016e18:	e363      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	f003 0320 	and.w	r3, r3, #32
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f000 808d 	beq.w	8016f42 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016e28:	f7ff fe89 	bl	8016b3e <LL_RCC_GetSysClkSource>
 8016e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016e2e:	f7ff ff82 	bl	8016d36 <LL_RCC_PLL_GetMainSource>
 8016e32:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d005      	beq.n	8016e46 <HAL_RCC_OscConfig+0x3e>
 8016e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3c:	2b0c      	cmp	r3, #12
 8016e3e:	d147      	bne.n	8016ed0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8016e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e42:	2b01      	cmp	r3, #1
 8016e44:	d144      	bne.n	8016ed0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	69db      	ldr	r3, [r3, #28]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d101      	bne.n	8016e52 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8016e4e:	2301      	movs	r3, #1
 8016e50:	e347      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016e56:	f7ff fe34 	bl	8016ac2 <LL_RCC_MSI_GetRange>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	429c      	cmp	r4, r3
 8016e5e:	d914      	bls.n	8016e8a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e64:	4618      	mov	r0, r3
 8016e66:	f000 fd2f 	bl	80178c8 <RCC_SetFlashLatencyFromMSIRange>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d001      	beq.n	8016e74 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8016e70:	2301      	movs	r3, #1
 8016e72:	e336      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7ff fe0e 	bl	8016a9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6a1b      	ldr	r3, [r3, #32]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7ff fe32 	bl	8016aec <LL_RCC_MSI_SetCalibTrimming>
 8016e88:	e013      	b.n	8016eb2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7ff fe03 	bl	8016a9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6a1b      	ldr	r3, [r3, #32]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7ff fe27 	bl	8016aec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f000 fd10 	bl	80178c8 <RCC_SetFlashLatencyFromMSIRange>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e317      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016eb2:	f000 fcc9 	bl	8017848 <HAL_RCC_GetHCLKFreq>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	4aa4      	ldr	r2, [pc, #656]	; (801714c <HAL_RCC_OscConfig+0x344>)
 8016eba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8016ebc:	4ba4      	ldr	r3, [pc, #656]	; (8017150 <HAL_RCC_OscConfig+0x348>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7fe f91f 	bl	8015104 <HAL_InitTick>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d039      	beq.n	8016f40 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8016ecc:	2301      	movs	r3, #1
 8016ece:	e308      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	69db      	ldr	r3, [r3, #28]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d01e      	beq.n	8016f16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016ed8:	f7ff fdb0 	bl	8016a3c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016edc:	f7fe f960 	bl	80151a0 <HAL_GetTick>
 8016ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8016ee2:	e008      	b.n	8016ef6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016ee4:	f7fe f95c 	bl	80151a0 <HAL_GetTick>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	2b02      	cmp	r3, #2
 8016ef0:	d901      	bls.n	8016ef6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8016ef2:	2303      	movs	r3, #3
 8016ef4:	e2f5      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8016ef6:	f7ff fdbf 	bl	8016a78 <LL_RCC_MSI_IsReady>
 8016efa:	4603      	mov	r3, r0
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d0f1      	beq.n	8016ee4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7ff fdc8 	bl	8016a9a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6a1b      	ldr	r3, [r3, #32]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ff fdec 	bl	8016aec <LL_RCC_MSI_SetCalibTrimming>
 8016f14:	e015      	b.n	8016f42 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016f16:	f7ff fda0 	bl	8016a5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016f1a:	f7fe f941 	bl	80151a0 <HAL_GetTick>
 8016f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8016f20:	e008      	b.n	8016f34 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016f22:	f7fe f93d 	bl	80151a0 <HAL_GetTick>
 8016f26:	4602      	mov	r2, r0
 8016f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f2a:	1ad3      	subs	r3, r2, r3
 8016f2c:	2b02      	cmp	r3, #2
 8016f2e:	d901      	bls.n	8016f34 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8016f30:	2303      	movs	r3, #3
 8016f32:	e2d6      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8016f34:	f7ff fda0 	bl	8016a78 <LL_RCC_MSI_IsReady>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d1f1      	bne.n	8016f22 <HAL_RCC_OscConfig+0x11a>
 8016f3e:	e000      	b.n	8016f42 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016f40:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f003 0301 	and.w	r3, r3, #1
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d047      	beq.n	8016fde <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016f4e:	f7ff fdf6 	bl	8016b3e <LL_RCC_GetSysClkSource>
 8016f52:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016f54:	f7ff feef 	bl	8016d36 <LL_RCC_PLL_GetMainSource>
 8016f58:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	2b08      	cmp	r3, #8
 8016f5e:	d005      	beq.n	8016f6c <HAL_RCC_OscConfig+0x164>
 8016f60:	6a3b      	ldr	r3, [r7, #32]
 8016f62:	2b0c      	cmp	r3, #12
 8016f64:	d108      	bne.n	8016f78 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	2b03      	cmp	r3, #3
 8016f6a:	d105      	bne.n	8016f78 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d134      	bne.n	8016fde <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8016f74:	2301      	movs	r3, #1
 8016f76:	e2b4      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f80:	d102      	bne.n	8016f88 <HAL_RCC_OscConfig+0x180>
 8016f82:	f7ff fbdd 	bl	8016740 <LL_RCC_HSE_Enable>
 8016f86:	e001      	b.n	8016f8c <HAL_RCC_OscConfig+0x184>
 8016f88:	f7ff fbe9 	bl	801675e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d012      	beq.n	8016fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f94:	f7fe f904 	bl	80151a0 <HAL_GetTick>
 8016f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8016f9a:	e008      	b.n	8016fae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016f9c:	f7fe f900 	bl	80151a0 <HAL_GetTick>
 8016fa0:	4602      	mov	r2, r0
 8016fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa4:	1ad3      	subs	r3, r2, r3
 8016fa6:	2b64      	cmp	r3, #100	; 0x64
 8016fa8:	d901      	bls.n	8016fae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8016faa:	2303      	movs	r3, #3
 8016fac:	e299      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8016fae:	f7ff fbe5 	bl	801677c <LL_RCC_HSE_IsReady>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d0f1      	beq.n	8016f9c <HAL_RCC_OscConfig+0x194>
 8016fb8:	e011      	b.n	8016fde <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fba:	f7fe f8f1 	bl	80151a0 <HAL_GetTick>
 8016fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8016fc0:	e008      	b.n	8016fd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016fc2:	f7fe f8ed 	bl	80151a0 <HAL_GetTick>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fca:	1ad3      	subs	r3, r2, r3
 8016fcc:	2b64      	cmp	r3, #100	; 0x64
 8016fce:	d901      	bls.n	8016fd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8016fd0:	2303      	movs	r3, #3
 8016fd2:	e286      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8016fd4:	f7ff fbd2 	bl	801677c <LL_RCC_HSE_IsReady>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d1f1      	bne.n	8016fc2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	f003 0302 	and.w	r3, r3, #2
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d04c      	beq.n	8017084 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016fea:	f7ff fda8 	bl	8016b3e <LL_RCC_GetSysClkSource>
 8016fee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016ff0:	f7ff fea1 	bl	8016d36 <LL_RCC_PLL_GetMainSource>
 8016ff4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016ff6:	69bb      	ldr	r3, [r7, #24]
 8016ff8:	2b04      	cmp	r3, #4
 8016ffa:	d005      	beq.n	8017008 <HAL_RCC_OscConfig+0x200>
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	2b0c      	cmp	r3, #12
 8017000:	d10e      	bne.n	8017020 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	2b02      	cmp	r3, #2
 8017006:	d10b      	bne.n	8017020 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	68db      	ldr	r3, [r3, #12]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d101      	bne.n	8017014 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8017010:	2301      	movs	r3, #1
 8017012:	e266      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	691b      	ldr	r3, [r3, #16]
 8017018:	4618      	mov	r0, r3
 801701a:	f7ff fbf1 	bl	8016800 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801701e:	e031      	b.n	8017084 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	68db      	ldr	r3, [r3, #12]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d019      	beq.n	801705c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017028:	f7ff fbba 	bl	80167a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801702c:	f7fe f8b8 	bl	80151a0 <HAL_GetTick>
 8017030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8017032:	e008      	b.n	8017046 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017034:	f7fe f8b4 	bl	80151a0 <HAL_GetTick>
 8017038:	4602      	mov	r2, r0
 801703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801703c:	1ad3      	subs	r3, r2, r3
 801703e:	2b02      	cmp	r3, #2
 8017040:	d901      	bls.n	8017046 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8017042:	2303      	movs	r3, #3
 8017044:	e24d      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8017046:	f7ff fbc9 	bl	80167dc <LL_RCC_HSI_IsReady>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d0f1      	beq.n	8017034 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	691b      	ldr	r3, [r3, #16]
 8017054:	4618      	mov	r0, r3
 8017056:	f7ff fbd3 	bl	8016800 <LL_RCC_HSI_SetCalibTrimming>
 801705a:	e013      	b.n	8017084 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801705c:	f7ff fbaf 	bl	80167be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017060:	f7fe f89e 	bl	80151a0 <HAL_GetTick>
 8017064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8017066:	e008      	b.n	801707a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017068:	f7fe f89a 	bl	80151a0 <HAL_GetTick>
 801706c:	4602      	mov	r2, r0
 801706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017070:	1ad3      	subs	r3, r2, r3
 8017072:	2b02      	cmp	r3, #2
 8017074:	d901      	bls.n	801707a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8017076:	2303      	movs	r3, #3
 8017078:	e233      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801707a:	f7ff fbaf 	bl	80167dc <LL_RCC_HSI_IsReady>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1f1      	bne.n	8017068 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	f003 0308 	and.w	r3, r3, #8
 801708c:	2b00      	cmp	r3, #0
 801708e:	d106      	bne.n	801709e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017098:	2b00      	cmp	r3, #0
 801709a:	f000 80a3 	beq.w	80171e4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	695b      	ldr	r3, [r3, #20]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d076      	beq.n	8017194 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f003 0310 	and.w	r3, r3, #16
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d046      	beq.n	8017140 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80170b2:	f7ff fc66 	bl	8016982 <LL_RCC_LSI1_IsReady>
 80170b6:	4603      	mov	r3, r0
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d113      	bne.n	80170e4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80170bc:	f7ff fc3f 	bl	801693e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80170c0:	f7fe f86e 	bl	80151a0 <HAL_GetTick>
 80170c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80170c6:	e008      	b.n	80170da <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80170c8:	f7fe f86a 	bl	80151a0 <HAL_GetTick>
 80170cc:	4602      	mov	r2, r0
 80170ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d0:	1ad3      	subs	r3, r2, r3
 80170d2:	2b02      	cmp	r3, #2
 80170d4:	d901      	bls.n	80170da <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80170d6:	2303      	movs	r3, #3
 80170d8:	e203      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80170da:	f7ff fc52 	bl	8016982 <LL_RCC_LSI1_IsReady>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d0f1      	beq.n	80170c8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80170e4:	f7ff fc5f 	bl	80169a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170e8:	f7fe f85a 	bl	80151a0 <HAL_GetTick>
 80170ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80170ee:	e008      	b.n	8017102 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80170f0:	f7fe f856 	bl	80151a0 <HAL_GetTick>
 80170f4:	4602      	mov	r2, r0
 80170f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f8:	1ad3      	subs	r3, r2, r3
 80170fa:	2b03      	cmp	r3, #3
 80170fc:	d901      	bls.n	8017102 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80170fe:	2303      	movs	r3, #3
 8017100:	e1ef      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017102:	f7ff fc72 	bl	80169ea <LL_RCC_LSI2_IsReady>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d0f1      	beq.n	80170f0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	699b      	ldr	r3, [r3, #24]
 8017110:	4618      	mov	r0, r3
 8017112:	f7ff fc7c 	bl	8016a0e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8017116:	f7ff fc23 	bl	8016960 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801711a:	f7fe f841 	bl	80151a0 <HAL_GetTick>
 801711e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017120:	e008      	b.n	8017134 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017122:	f7fe f83d 	bl	80151a0 <HAL_GetTick>
 8017126:	4602      	mov	r2, r0
 8017128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801712a:	1ad3      	subs	r3, r2, r3
 801712c:	2b02      	cmp	r3, #2
 801712e:	d901      	bls.n	8017134 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8017130:	2303      	movs	r3, #3
 8017132:	e1d6      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017134:	f7ff fc25 	bl	8016982 <LL_RCC_LSI1_IsReady>
 8017138:	4603      	mov	r3, r0
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1f1      	bne.n	8017122 <HAL_RCC_OscConfig+0x31a>
 801713e:	e051      	b.n	80171e4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8017140:	f7ff fbfd 	bl	801693e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017144:	f7fe f82c 	bl	80151a0 <HAL_GetTick>
 8017148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801714a:	e00c      	b.n	8017166 <HAL_RCC_OscConfig+0x35e>
 801714c:	20000008 	.word	0x20000008
 8017150:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017154:	f7fe f824 	bl	80151a0 <HAL_GetTick>
 8017158:	4602      	mov	r2, r0
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	1ad3      	subs	r3, r2, r3
 801715e:	2b02      	cmp	r3, #2
 8017160:	d901      	bls.n	8017166 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8017162:	2303      	movs	r3, #3
 8017164:	e1bd      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017166:	f7ff fc0c 	bl	8016982 <LL_RCC_LSI1_IsReady>
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d0f1      	beq.n	8017154 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8017170:	f7ff fc2a 	bl	80169c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017174:	e008      	b.n	8017188 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017176:	f7fe f813 	bl	80151a0 <HAL_GetTick>
 801717a:	4602      	mov	r2, r0
 801717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717e:	1ad3      	subs	r3, r2, r3
 8017180:	2b03      	cmp	r3, #3
 8017182:	d901      	bls.n	8017188 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8017184:	2303      	movs	r3, #3
 8017186:	e1ac      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017188:	f7ff fc2f 	bl	80169ea <LL_RCC_LSI2_IsReady>
 801718c:	4603      	mov	r3, r0
 801718e:	2b00      	cmp	r3, #0
 8017190:	d1f1      	bne.n	8017176 <HAL_RCC_OscConfig+0x36e>
 8017192:	e027      	b.n	80171e4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8017194:	f7ff fc18 	bl	80169c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017198:	f7fe f802 	bl	80151a0 <HAL_GetTick>
 801719c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801719e:	e008      	b.n	80171b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80171a0:	f7fd fffe 	bl	80151a0 <HAL_GetTick>
 80171a4:	4602      	mov	r2, r0
 80171a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a8:	1ad3      	subs	r3, r2, r3
 80171aa:	2b03      	cmp	r3, #3
 80171ac:	d901      	bls.n	80171b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80171ae:	2303      	movs	r3, #3
 80171b0:	e197      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80171b2:	f7ff fc1a 	bl	80169ea <LL_RCC_LSI2_IsReady>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d1f1      	bne.n	80171a0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80171bc:	f7ff fbd0 	bl	8016960 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171c0:	f7fd ffee 	bl	80151a0 <HAL_GetTick>
 80171c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80171c6:	e008      	b.n	80171da <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80171c8:	f7fd ffea 	bl	80151a0 <HAL_GetTick>
 80171cc:	4602      	mov	r2, r0
 80171ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d0:	1ad3      	subs	r3, r2, r3
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	d901      	bls.n	80171da <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80171d6:	2303      	movs	r3, #3
 80171d8:	e183      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80171da:	f7ff fbd2 	bl	8016982 <LL_RCC_LSI1_IsReady>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1f1      	bne.n	80171c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f003 0304 	and.w	r3, r3, #4
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d05b      	beq.n	80172a8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80171f0:	4ba7      	ldr	r3, [pc, #668]	; (8017490 <HAL_RCC_OscConfig+0x688>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d114      	bne.n	8017226 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80171fc:	f7ff fa70 	bl	80166e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017200:	f7fd ffce 	bl	80151a0 <HAL_GetTick>
 8017204:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017206:	e008      	b.n	801721a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017208:	f7fd ffca 	bl	80151a0 <HAL_GetTick>
 801720c:	4602      	mov	r2, r0
 801720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017210:	1ad3      	subs	r3, r2, r3
 8017212:	2b02      	cmp	r3, #2
 8017214:	d901      	bls.n	801721a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8017216:	2303      	movs	r3, #3
 8017218:	e163      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801721a:	4b9d      	ldr	r3, [pc, #628]	; (8017490 <HAL_RCC_OscConfig+0x688>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017222:	2b00      	cmp	r3, #0
 8017224:	d0f0      	beq.n	8017208 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	689b      	ldr	r3, [r3, #8]
 801722a:	2b01      	cmp	r3, #1
 801722c:	d102      	bne.n	8017234 <HAL_RCC_OscConfig+0x42c>
 801722e:	f7ff fb30 	bl	8016892 <LL_RCC_LSE_Enable>
 8017232:	e00c      	b.n	801724e <HAL_RCC_OscConfig+0x446>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	689b      	ldr	r3, [r3, #8]
 8017238:	2b05      	cmp	r3, #5
 801723a:	d104      	bne.n	8017246 <HAL_RCC_OscConfig+0x43e>
 801723c:	f7ff fb4b 	bl	80168d6 <LL_RCC_LSE_EnableBypass>
 8017240:	f7ff fb27 	bl	8016892 <LL_RCC_LSE_Enable>
 8017244:	e003      	b.n	801724e <HAL_RCC_OscConfig+0x446>
 8017246:	f7ff fb35 	bl	80168b4 <LL_RCC_LSE_Disable>
 801724a:	f7ff fb55 	bl	80168f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	689b      	ldr	r3, [r3, #8]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d014      	beq.n	8017280 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017256:	f7fd ffa3 	bl	80151a0 <HAL_GetTick>
 801725a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801725c:	e00a      	b.n	8017274 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801725e:	f7fd ff9f 	bl	80151a0 <HAL_GetTick>
 8017262:	4602      	mov	r2, r0
 8017264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017266:	1ad3      	subs	r3, r2, r3
 8017268:	f241 3288 	movw	r2, #5000	; 0x1388
 801726c:	4293      	cmp	r3, r2
 801726e:	d901      	bls.n	8017274 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8017270:	2303      	movs	r3, #3
 8017272:	e136      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8017274:	f7ff fb51 	bl	801691a <LL_RCC_LSE_IsReady>
 8017278:	4603      	mov	r3, r0
 801727a:	2b00      	cmp	r3, #0
 801727c:	d0ef      	beq.n	801725e <HAL_RCC_OscConfig+0x456>
 801727e:	e013      	b.n	80172a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017280:	f7fd ff8e 	bl	80151a0 <HAL_GetTick>
 8017284:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8017286:	e00a      	b.n	801729e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017288:	f7fd ff8a 	bl	80151a0 <HAL_GetTick>
 801728c:	4602      	mov	r2, r0
 801728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017290:	1ad3      	subs	r3, r2, r3
 8017292:	f241 3288 	movw	r2, #5000	; 0x1388
 8017296:	4293      	cmp	r3, r2
 8017298:	d901      	bls.n	801729e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801729a:	2303      	movs	r3, #3
 801729c:	e121      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801729e:	f7ff fb3c 	bl	801691a <LL_RCC_LSE_IsReady>
 80172a2:	4603      	mov	r3, r0
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d1ef      	bne.n	8017288 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d02c      	beq.n	801730e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d014      	beq.n	80172e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80172bc:	f7ff fab5 	bl	801682a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172c0:	f7fd ff6e 	bl	80151a0 <HAL_GetTick>
 80172c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80172c6:	e008      	b.n	80172da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80172c8:	f7fd ff6a 	bl	80151a0 <HAL_GetTick>
 80172cc:	4602      	mov	r2, r0
 80172ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d0:	1ad3      	subs	r3, r2, r3
 80172d2:	2b02      	cmp	r3, #2
 80172d4:	d901      	bls.n	80172da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80172d6:	2303      	movs	r3, #3
 80172d8:	e103      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80172da:	f7ff fac8 	bl	801686e <LL_RCC_HSI48_IsReady>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d0f1      	beq.n	80172c8 <HAL_RCC_OscConfig+0x4c0>
 80172e4:	e013      	b.n	801730e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80172e6:	f7ff fab1 	bl	801684c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172ea:	f7fd ff59 	bl	80151a0 <HAL_GetTick>
 80172ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80172f0:	e008      	b.n	8017304 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80172f2:	f7fd ff55 	bl	80151a0 <HAL_GetTick>
 80172f6:	4602      	mov	r2, r0
 80172f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fa:	1ad3      	subs	r3, r2, r3
 80172fc:	2b02      	cmp	r3, #2
 80172fe:	d901      	bls.n	8017304 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8017300:	2303      	movs	r3, #3
 8017302:	e0ee      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017304:	f7ff fab3 	bl	801686e <LL_RCC_HSI48_IsReady>
 8017308:	4603      	mov	r3, r0
 801730a:	2b00      	cmp	r3, #0
 801730c:	d1f1      	bne.n	80172f2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017312:	2b00      	cmp	r3, #0
 8017314:	f000 80e4 	beq.w	80174e0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017318:	f7ff fc11 	bl	8016b3e <LL_RCC_GetSysClkSource>
 801731c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801731e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017322:	68db      	ldr	r3, [r3, #12]
 8017324:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801732a:	2b02      	cmp	r3, #2
 801732c:	f040 80b4 	bne.w	8017498 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f003 0203 	and.w	r2, r3, #3
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801733a:	429a      	cmp	r2, r3
 801733c:	d123      	bne.n	8017386 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017348:	429a      	cmp	r2, r3
 801734a:	d11c      	bne.n	8017386 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	0a1b      	lsrs	r3, r3, #8
 8017350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017358:	429a      	cmp	r2, r3
 801735a:	d114      	bne.n	8017386 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017366:	429a      	cmp	r2, r3
 8017368:	d10d      	bne.n	8017386 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017374:	429a      	cmp	r2, r3
 8017376:	d106      	bne.n	8017386 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8017382:	429a      	cmp	r2, r3
 8017384:	d05d      	beq.n	8017442 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	2b0c      	cmp	r3, #12
 801738a:	d058      	beq.n	801743e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801738c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017396:	2b00      	cmp	r3, #0
 8017398:	d001      	beq.n	801739e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801739a:	2301      	movs	r3, #1
 801739c:	e0a1      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801739e:	f7ff fc84 	bl	8016caa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80173a2:	f7fd fefd 	bl	80151a0 <HAL_GetTick>
 80173a6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173a8:	e008      	b.n	80173bc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80173aa:	f7fd fef9 	bl	80151a0 <HAL_GetTick>
 80173ae:	4602      	mov	r2, r0
 80173b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b2:	1ad3      	subs	r3, r2, r3
 80173b4:	2b02      	cmp	r3, #2
 80173b6:	d901      	bls.n	80173bc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80173b8:	2303      	movs	r3, #3
 80173ba:	e092      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d1ef      	bne.n	80173aa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80173ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173ce:	68da      	ldr	r2, [r3, #12]
 80173d0:	4b30      	ldr	r3, [pc, #192]	; (8017494 <HAL_RCC_OscConfig+0x68c>)
 80173d2:	4013      	ands	r3, r2
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80173dc:	4311      	orrs	r1, r2
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80173e2:	0212      	lsls	r2, r2, #8
 80173e4:	4311      	orrs	r1, r2
 80173e6:	687a      	ldr	r2, [r7, #4]
 80173e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80173ea:	4311      	orrs	r1, r2
 80173ec:	687a      	ldr	r2, [r7, #4]
 80173ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80173f0:	4311      	orrs	r1, r2
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80173f6:	430a      	orrs	r2, r1
 80173f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80173fc:	4313      	orrs	r3, r2
 80173fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017400:	f7ff fc44 	bl	8016c8c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017408:	68db      	ldr	r3, [r3, #12]
 801740a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801740e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017414:	f7fd fec4 	bl	80151a0 <HAL_GetTick>
 8017418:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801741a:	e008      	b.n	801742e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801741c:	f7fd fec0 	bl	80151a0 <HAL_GetTick>
 8017420:	4602      	mov	r2, r0
 8017422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	2b02      	cmp	r3, #2
 8017428:	d901      	bls.n	801742e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801742a:	2303      	movs	r3, #3
 801742c:	e059      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801742e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017438:	2b00      	cmp	r3, #0
 801743a:	d0ef      	beq.n	801741c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801743c:	e050      	b.n	80174e0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801743e:	2301      	movs	r3, #1
 8017440:	e04f      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801744c:	2b00      	cmp	r3, #0
 801744e:	d147      	bne.n	80174e0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8017450:	f7ff fc1c 	bl	8016c8c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017458:	68db      	ldr	r3, [r3, #12]
 801745a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801745e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017464:	f7fd fe9c 	bl	80151a0 <HAL_GetTick>
 8017468:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801746a:	e008      	b.n	801747e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801746c:	f7fd fe98 	bl	80151a0 <HAL_GetTick>
 8017470:	4602      	mov	r2, r0
 8017472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017474:	1ad3      	subs	r3, r2, r3
 8017476:	2b02      	cmp	r3, #2
 8017478:	d901      	bls.n	801747e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801747a:	2303      	movs	r3, #3
 801747c:	e031      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801747e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017488:	2b00      	cmp	r3, #0
 801748a:	d0ef      	beq.n	801746c <HAL_RCC_OscConfig+0x664>
 801748c:	e028      	b.n	80174e0 <HAL_RCC_OscConfig+0x6d8>
 801748e:	bf00      	nop
 8017490:	58000400 	.word	0x58000400
 8017494:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	2b0c      	cmp	r3, #12
 801749c:	d01e      	beq.n	80174dc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801749e:	f7ff fc04 	bl	8016caa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174a2:	f7fd fe7d 	bl	80151a0 <HAL_GetTick>
 80174a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174a8:	e008      	b.n	80174bc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174aa:	f7fd fe79 	bl	80151a0 <HAL_GetTick>
 80174ae:	4602      	mov	r2, r0
 80174b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b2:	1ad3      	subs	r3, r2, r3
 80174b4:	2b02      	cmp	r3, #2
 80174b6:	d901      	bls.n	80174bc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80174b8:	2303      	movs	r3, #3
 80174ba:	e012      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d1ef      	bne.n	80174aa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80174ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174ce:	68da      	ldr	r2, [r3, #12]
 80174d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80174d4:	4b05      	ldr	r3, [pc, #20]	; (80174ec <HAL_RCC_OscConfig+0x6e4>)
 80174d6:	4013      	ands	r3, r2
 80174d8:	60cb      	str	r3, [r1, #12]
 80174da:	e001      	b.n	80174e0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80174dc:	2301      	movs	r3, #1
 80174de:	e000      	b.n	80174e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3734      	adds	r7, #52	; 0x34
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd90      	pop	{r4, r7, pc}
 80174ea:	bf00      	nop
 80174ec:	eefefffc 	.word	0xeefefffc

080174f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d101      	bne.n	8017504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017500:	2301      	movs	r3, #1
 8017502:	e12d      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017504:	4b98      	ldr	r3, [pc, #608]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	f003 0307 	and.w	r3, r3, #7
 801750c:	683a      	ldr	r2, [r7, #0]
 801750e:	429a      	cmp	r2, r3
 8017510:	d91b      	bls.n	801754a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017512:	4b95      	ldr	r3, [pc, #596]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f023 0207 	bic.w	r2, r3, #7
 801751a:	4993      	ldr	r1, [pc, #588]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	4313      	orrs	r3, r2
 8017520:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017522:	f7fd fe3d 	bl	80151a0 <HAL_GetTick>
 8017526:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017528:	e008      	b.n	801753c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801752a:	f7fd fe39 	bl	80151a0 <HAL_GetTick>
 801752e:	4602      	mov	r2, r0
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	1ad3      	subs	r3, r2, r3
 8017534:	2b02      	cmp	r3, #2
 8017536:	d901      	bls.n	801753c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017538:	2303      	movs	r3, #3
 801753a:	e111      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801753c:	4b8a      	ldr	r3, [pc, #552]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	f003 0307 	and.w	r3, r3, #7
 8017544:	683a      	ldr	r2, [r7, #0]
 8017546:	429a      	cmp	r2, r3
 8017548:	d1ef      	bne.n	801752a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	f003 0302 	and.w	r3, r3, #2
 8017552:	2b00      	cmp	r3, #0
 8017554:	d016      	beq.n	8017584 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	689b      	ldr	r3, [r3, #8]
 801755a:	4618      	mov	r0, r3
 801755c:	f7ff fafb 	bl	8016b56 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017560:	f7fd fe1e 	bl	80151a0 <HAL_GetTick>
 8017564:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017566:	e008      	b.n	801757a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017568:	f7fd fe1a 	bl	80151a0 <HAL_GetTick>
 801756c:	4602      	mov	r2, r0
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	1ad3      	subs	r3, r2, r3
 8017572:	2b02      	cmp	r3, #2
 8017574:	d901      	bls.n	801757a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8017576:	2303      	movs	r3, #3
 8017578:	e0f2      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801757a:	f7ff fbe8 	bl	8016d4e <LL_RCC_IsActiveFlag_HPRE>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d0f1      	beq.n	8017568 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f003 0320 	and.w	r3, r3, #32
 801758c:	2b00      	cmp	r3, #0
 801758e:	d016      	beq.n	80175be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	695b      	ldr	r3, [r3, #20]
 8017594:	4618      	mov	r0, r3
 8017596:	f7ff faf2 	bl	8016b7e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801759a:	f7fd fe01 	bl	80151a0 <HAL_GetTick>
 801759e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80175a0:	e008      	b.n	80175b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80175a2:	f7fd fdfd 	bl	80151a0 <HAL_GetTick>
 80175a6:	4602      	mov	r2, r0
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	1ad3      	subs	r3, r2, r3
 80175ac:	2b02      	cmp	r3, #2
 80175ae:	d901      	bls.n	80175b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80175b0:	2303      	movs	r3, #3
 80175b2:	e0d5      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80175b4:	f7ff fbdd 	bl	8016d72 <LL_RCC_IsActiveFlag_C2HPRE>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d0f1      	beq.n	80175a2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d016      	beq.n	80175f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	699b      	ldr	r3, [r3, #24]
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7ff faeb 	bl	8016baa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80175d4:	f7fd fde4 	bl	80151a0 <HAL_GetTick>
 80175d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80175da:	e008      	b.n	80175ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80175dc:	f7fd fde0 	bl	80151a0 <HAL_GetTick>
 80175e0:	4602      	mov	r2, r0
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	1ad3      	subs	r3, r2, r3
 80175e6:	2b02      	cmp	r3, #2
 80175e8:	d901      	bls.n	80175ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80175ea:	2303      	movs	r3, #3
 80175ec:	e0b8      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80175ee:	f7ff fbd3 	bl	8016d98 <LL_RCC_IsActiveFlag_SHDHPRE>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d0f1      	beq.n	80175dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	f003 0304 	and.w	r3, r3, #4
 8017600:	2b00      	cmp	r3, #0
 8017602:	d016      	beq.n	8017632 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	68db      	ldr	r3, [r3, #12]
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff fae5 	bl	8016bd8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801760e:	f7fd fdc7 	bl	80151a0 <HAL_GetTick>
 8017612:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017614:	e008      	b.n	8017628 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017616:	f7fd fdc3 	bl	80151a0 <HAL_GetTick>
 801761a:	4602      	mov	r2, r0
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	1ad3      	subs	r3, r2, r3
 8017620:	2b02      	cmp	r3, #2
 8017622:	d901      	bls.n	8017628 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017624:	2303      	movs	r3, #3
 8017626:	e09b      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017628:	f7ff fbc9 	bl	8016dbe <LL_RCC_IsActiveFlag_PPRE1>
 801762c:	4603      	mov	r3, r0
 801762e:	2b00      	cmp	r3, #0
 8017630:	d0f1      	beq.n	8017616 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f003 0308 	and.w	r3, r3, #8
 801763a:	2b00      	cmp	r3, #0
 801763c:	d017      	beq.n	801766e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	691b      	ldr	r3, [r3, #16]
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	4618      	mov	r0, r3
 8017646:	f7ff fadb 	bl	8016c00 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801764a:	f7fd fda9 	bl	80151a0 <HAL_GetTick>
 801764e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017650:	e008      	b.n	8017664 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017652:	f7fd fda5 	bl	80151a0 <HAL_GetTick>
 8017656:	4602      	mov	r2, r0
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	1ad3      	subs	r3, r2, r3
 801765c:	2b02      	cmp	r3, #2
 801765e:	d901      	bls.n	8017664 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017660:	2303      	movs	r3, #3
 8017662:	e07d      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017664:	f7ff fbbd 	bl	8016de2 <LL_RCC_IsActiveFlag_PPRE2>
 8017668:	4603      	mov	r3, r0
 801766a:	2b00      	cmp	r3, #0
 801766c:	d0f1      	beq.n	8017652 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	f003 0301 	and.w	r3, r3, #1
 8017676:	2b00      	cmp	r3, #0
 8017678:	d043      	beq.n	8017702 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	685b      	ldr	r3, [r3, #4]
 801767e:	2b02      	cmp	r3, #2
 8017680:	d106      	bne.n	8017690 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8017682:	f7ff f87b 	bl	801677c <LL_RCC_HSE_IsReady>
 8017686:	4603      	mov	r3, r0
 8017688:	2b00      	cmp	r3, #0
 801768a:	d11e      	bne.n	80176ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801768c:	2301      	movs	r3, #1
 801768e:	e067      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	685b      	ldr	r3, [r3, #4]
 8017694:	2b03      	cmp	r3, #3
 8017696:	d106      	bne.n	80176a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017698:	f7ff fb16 	bl	8016cc8 <LL_RCC_PLL_IsReady>
 801769c:	4603      	mov	r3, r0
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d113      	bne.n	80176ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176a2:	2301      	movs	r3, #1
 80176a4:	e05c      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d106      	bne.n	80176bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80176ae:	f7ff f9e3 	bl	8016a78 <LL_RCC_MSI_IsReady>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d108      	bne.n	80176ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176b8:	2301      	movs	r3, #1
 80176ba:	e051      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80176bc:	f7ff f88e 	bl	80167dc <LL_RCC_HSI_IsReady>
 80176c0:	4603      	mov	r3, r0
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d101      	bne.n	80176ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176c6:	2301      	movs	r3, #1
 80176c8:	e04a      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7ff fa21 	bl	8016b16 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80176d4:	f7fd fd64 	bl	80151a0 <HAL_GetTick>
 80176d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176da:	e00a      	b.n	80176f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80176dc:	f7fd fd60 	bl	80151a0 <HAL_GetTick>
 80176e0:	4602      	mov	r2, r0
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	1ad3      	subs	r3, r2, r3
 80176e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80176ea:	4293      	cmp	r3, r2
 80176ec:	d901      	bls.n	80176f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80176ee:	2303      	movs	r3, #3
 80176f0:	e036      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176f2:	f7ff fa24 	bl	8016b3e <LL_RCC_GetSysClkSource>
 80176f6:	4602      	mov	r2, r0
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	009b      	lsls	r3, r3, #2
 80176fe:	429a      	cmp	r2, r3
 8017700:	d1ec      	bne.n	80176dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017702:	4b19      	ldr	r3, [pc, #100]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	f003 0307 	and.w	r3, r3, #7
 801770a:	683a      	ldr	r2, [r7, #0]
 801770c:	429a      	cmp	r2, r3
 801770e:	d21b      	bcs.n	8017748 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017710:	4b15      	ldr	r3, [pc, #84]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f023 0207 	bic.w	r2, r3, #7
 8017718:	4913      	ldr	r1, [pc, #76]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	4313      	orrs	r3, r2
 801771e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017720:	f7fd fd3e 	bl	80151a0 <HAL_GetTick>
 8017724:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017726:	e008      	b.n	801773a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017728:	f7fd fd3a 	bl	80151a0 <HAL_GetTick>
 801772c:	4602      	mov	r2, r0
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	1ad3      	subs	r3, r2, r3
 8017732:	2b02      	cmp	r3, #2
 8017734:	d901      	bls.n	801773a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017736:	2303      	movs	r3, #3
 8017738:	e012      	b.n	8017760 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801773a:	4b0b      	ldr	r3, [pc, #44]	; (8017768 <HAL_RCC_ClockConfig+0x278>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	f003 0307 	and.w	r3, r3, #7
 8017742:	683a      	ldr	r2, [r7, #0]
 8017744:	429a      	cmp	r2, r3
 8017746:	d1ef      	bne.n	8017728 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017748:	f000 f87e 	bl	8017848 <HAL_RCC_GetHCLKFreq>
 801774c:	4603      	mov	r3, r0
 801774e:	4a07      	ldr	r2, [pc, #28]	; (801776c <HAL_RCC_ClockConfig+0x27c>)
 8017750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8017752:	f7fd fd31 	bl	80151b8 <HAL_GetTickPrio>
 8017756:	4603      	mov	r3, r0
 8017758:	4618      	mov	r0, r3
 801775a:	f7fd fcd3 	bl	8015104 <HAL_InitTick>
 801775e:	4603      	mov	r3, r0
}
 8017760:	4618      	mov	r0, r3
 8017762:	3710      	adds	r7, #16
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}
 8017768:	58004000 	.word	0x58004000
 801776c:	20000008 	.word	0x20000008

08017770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017770:	b590      	push	{r4, r7, lr}
 8017772:	b085      	sub	sp, #20
 8017774:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017776:	f7ff f9e2 	bl	8016b3e <LL_RCC_GetSysClkSource>
 801777a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d10a      	bne.n	8017798 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017782:	f7ff f99e 	bl	8016ac2 <LL_RCC_MSI_GetRange>
 8017786:	4603      	mov	r3, r0
 8017788:	091b      	lsrs	r3, r3, #4
 801778a:	f003 030f 	and.w	r3, r3, #15
 801778e:	4a2b      	ldr	r2, [pc, #172]	; (801783c <HAL_RCC_GetSysClockFreq+0xcc>)
 8017790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017794:	60fb      	str	r3, [r7, #12]
 8017796:	e04b      	b.n	8017830 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b04      	cmp	r3, #4
 801779c:	d102      	bne.n	80177a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801779e:	4b28      	ldr	r3, [pc, #160]	; (8017840 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177a0:	60fb      	str	r3, [r7, #12]
 80177a2:	e045      	b.n	8017830 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b08      	cmp	r3, #8
 80177a8:	d10a      	bne.n	80177c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80177aa:	f7fe ffb7 	bl	801671c <LL_RCC_HSE_IsEnabledDiv2>
 80177ae:	4603      	mov	r3, r0
 80177b0:	2b01      	cmp	r3, #1
 80177b2:	d102      	bne.n	80177ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80177b4:	4b22      	ldr	r3, [pc, #136]	; (8017840 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177b6:	60fb      	str	r3, [r7, #12]
 80177b8:	e03a      	b.n	8017830 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80177ba:	4b22      	ldr	r3, [pc, #136]	; (8017844 <HAL_RCC_GetSysClockFreq+0xd4>)
 80177bc:	60fb      	str	r3, [r7, #12]
 80177be:	e037      	b.n	8017830 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80177c0:	f7ff fab9 	bl	8016d36 <LL_RCC_PLL_GetMainSource>
 80177c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	2b02      	cmp	r3, #2
 80177ca:	d003      	beq.n	80177d4 <HAL_RCC_GetSysClockFreq+0x64>
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	2b03      	cmp	r3, #3
 80177d0:	d003      	beq.n	80177da <HAL_RCC_GetSysClockFreq+0x6a>
 80177d2:	e00d      	b.n	80177f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80177d4:	4b1a      	ldr	r3, [pc, #104]	; (8017840 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177d6:	60bb      	str	r3, [r7, #8]
        break;
 80177d8:	e015      	b.n	8017806 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80177da:	f7fe ff9f 	bl	801671c <LL_RCC_HSE_IsEnabledDiv2>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d102      	bne.n	80177ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80177e4:	4b16      	ldr	r3, [pc, #88]	; (8017840 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80177e8:	e00d      	b.n	8017806 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80177ea:	4b16      	ldr	r3, [pc, #88]	; (8017844 <HAL_RCC_GetSysClockFreq+0xd4>)
 80177ec:	60bb      	str	r3, [r7, #8]
        break;
 80177ee:	e00a      	b.n	8017806 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80177f0:	f7ff f967 	bl	8016ac2 <LL_RCC_MSI_GetRange>
 80177f4:	4603      	mov	r3, r0
 80177f6:	091b      	lsrs	r3, r3, #4
 80177f8:	f003 030f 	and.w	r3, r3, #15
 80177fc:	4a0f      	ldr	r2, [pc, #60]	; (801783c <HAL_RCC_GetSysClockFreq+0xcc>)
 80177fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017802:	60bb      	str	r3, [r7, #8]
        break;
 8017804:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017806:	f7ff fa71 	bl	8016cec <LL_RCC_PLL_GetN>
 801780a:	4602      	mov	r2, r0
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	fb03 f402 	mul.w	r4, r3, r2
 8017812:	f7ff fa84 	bl	8016d1e <LL_RCC_PLL_GetDivider>
 8017816:	4603      	mov	r3, r0
 8017818:	091b      	lsrs	r3, r3, #4
 801781a:	3301      	adds	r3, #1
 801781c:	fbb4 f4f3 	udiv	r4, r4, r3
 8017820:	f7ff fa71 	bl	8016d06 <LL_RCC_PLL_GetR>
 8017824:	4603      	mov	r3, r0
 8017826:	0f5b      	lsrs	r3, r3, #29
 8017828:	3301      	adds	r3, #1
 801782a:	fbb4 f3f3 	udiv	r3, r4, r3
 801782e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017830:	68fb      	ldr	r3, [r7, #12]
}
 8017832:	4618      	mov	r0, r3
 8017834:	3714      	adds	r7, #20
 8017836:	46bd      	mov	sp, r7
 8017838:	bd90      	pop	{r4, r7, pc}
 801783a:	bf00      	nop
 801783c:	0801a4d8 	.word	0x0801a4d8
 8017840:	00f42400 	.word	0x00f42400
 8017844:	01e84800 	.word	0x01e84800

08017848 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017848:	b598      	push	{r3, r4, r7, lr}
 801784a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801784c:	f7ff ff90 	bl	8017770 <HAL_RCC_GetSysClockFreq>
 8017850:	4604      	mov	r4, r0
 8017852:	f7ff f9e9 	bl	8016c28 <LL_RCC_GetAHBPrescaler>
 8017856:	4603      	mov	r3, r0
 8017858:	091b      	lsrs	r3, r3, #4
 801785a:	f003 030f 	and.w	r3, r3, #15
 801785e:	4a03      	ldr	r2, [pc, #12]	; (801786c <HAL_RCC_GetHCLKFreq+0x24>)
 8017860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017864:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017868:	4618      	mov	r0, r3
 801786a:	bd98      	pop	{r3, r4, r7, pc}
 801786c:	0801a478 	.word	0x0801a478

08017870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017870:	b598      	push	{r3, r4, r7, lr}
 8017872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017874:	f7ff ffe8 	bl	8017848 <HAL_RCC_GetHCLKFreq>
 8017878:	4604      	mov	r4, r0
 801787a:	f7ff f9ef 	bl	8016c5c <LL_RCC_GetAPB1Prescaler>
 801787e:	4603      	mov	r3, r0
 8017880:	0a1b      	lsrs	r3, r3, #8
 8017882:	f003 0307 	and.w	r3, r3, #7
 8017886:	4a04      	ldr	r2, [pc, #16]	; (8017898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801788c:	f003 031f 	and.w	r3, r3, #31
 8017890:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017894:	4618      	mov	r0, r3
 8017896:	bd98      	pop	{r3, r4, r7, pc}
 8017898:	0801a4b8 	.word	0x0801a4b8

0801789c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801789c:	b598      	push	{r3, r4, r7, lr}
 801789e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80178a0:	f7ff ffd2 	bl	8017848 <HAL_RCC_GetHCLKFreq>
 80178a4:	4604      	mov	r4, r0
 80178a6:	f7ff f9e5 	bl	8016c74 <LL_RCC_GetAPB2Prescaler>
 80178aa:	4603      	mov	r3, r0
 80178ac:	0adb      	lsrs	r3, r3, #11
 80178ae:	f003 0307 	and.w	r3, r3, #7
 80178b2:	4a04      	ldr	r2, [pc, #16]	; (80178c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80178b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178b8:	f003 031f 	and.w	r3, r3, #31
 80178bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	bd98      	pop	{r3, r4, r7, pc}
 80178c4:	0801a4b8 	.word	0x0801a4b8

080178c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80178c8:	b590      	push	{r4, r7, lr}
 80178ca:	b085      	sub	sp, #20
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2bb0      	cmp	r3, #176	; 0xb0
 80178d4:	d903      	bls.n	80178de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80178d6:	4b15      	ldr	r3, [pc, #84]	; (801792c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80178d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178da:	60fb      	str	r3, [r7, #12]
 80178dc:	e007      	b.n	80178ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	091b      	lsrs	r3, r3, #4
 80178e2:	f003 030f 	and.w	r3, r3, #15
 80178e6:	4a11      	ldr	r2, [pc, #68]	; (801792c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80178e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80178ee:	f7ff f9a7 	bl	8016c40 <LL_RCC_GetAHB4Prescaler>
 80178f2:	4603      	mov	r3, r0
 80178f4:	091b      	lsrs	r3, r3, #4
 80178f6:	f003 030f 	and.w	r3, r3, #15
 80178fa:	4a0d      	ldr	r2, [pc, #52]	; (8017930 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80178fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017900:	68fa      	ldr	r2, [r7, #12]
 8017902:	fbb2 f3f3 	udiv	r3, r2, r3
 8017906:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017908:	68bb      	ldr	r3, [r7, #8]
 801790a:	4a0a      	ldr	r2, [pc, #40]	; (8017934 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801790c:	fba2 2303 	umull	r2, r3, r2, r3
 8017910:	0c9c      	lsrs	r4, r3, #18
 8017912:	f7fe fef5 	bl	8016700 <HAL_PWREx_GetVoltageRange>
 8017916:	4603      	mov	r3, r0
 8017918:	4619      	mov	r1, r3
 801791a:	4620      	mov	r0, r4
 801791c:	f000 f80c 	bl	8017938 <RCC_SetFlashLatency>
 8017920:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017922:	4618      	mov	r0, r3
 8017924:	3714      	adds	r7, #20
 8017926:	46bd      	mov	sp, r7
 8017928:	bd90      	pop	{r4, r7, pc}
 801792a:	bf00      	nop
 801792c:	0801a4d8 	.word	0x0801a4d8
 8017930:	0801a478 	.word	0x0801a478
 8017934:	431bde83 	.word	0x431bde83

08017938 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017938:	b590      	push	{r4, r7, lr}
 801793a:	b093      	sub	sp, #76	; 0x4c
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017942:	4b37      	ldr	r3, [pc, #220]	; (8017a20 <RCC_SetFlashLatency+0xe8>)
 8017944:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801794a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801794e:	4a35      	ldr	r2, [pc, #212]	; (8017a24 <RCC_SetFlashLatency+0xec>)
 8017950:	f107 031c 	add.w	r3, r7, #28
 8017954:	ca07      	ldmia	r2, {r0, r1, r2}
 8017956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801795a:	4b33      	ldr	r3, [pc, #204]	; (8017a28 <RCC_SetFlashLatency+0xf0>)
 801795c:	f107 040c 	add.w	r4, r7, #12
 8017960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017966:	2300      	movs	r3, #0
 8017968:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017970:	d11a      	bne.n	80179a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017972:	2300      	movs	r3, #0
 8017974:	643b      	str	r3, [r7, #64]	; 0x40
 8017976:	e013      	b.n	80179a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	3348      	adds	r3, #72	; 0x48
 801797e:	443b      	add	r3, r7
 8017980:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017984:	687a      	ldr	r2, [r7, #4]
 8017986:	429a      	cmp	r2, r3
 8017988:	d807      	bhi.n	801799a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	3348      	adds	r3, #72	; 0x48
 8017990:	443b      	add	r3, r7
 8017992:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017996:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017998:	e020      	b.n	80179dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801799a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801799c:	3301      	adds	r3, #1
 801799e:	643b      	str	r3, [r7, #64]	; 0x40
 80179a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179a2:	2b03      	cmp	r3, #3
 80179a4:	d9e8      	bls.n	8017978 <RCC_SetFlashLatency+0x40>
 80179a6:	e019      	b.n	80179dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80179a8:	2300      	movs	r3, #0
 80179aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179ac:	e013      	b.n	80179d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80179ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179b0:	009b      	lsls	r3, r3, #2
 80179b2:	3348      	adds	r3, #72	; 0x48
 80179b4:	443b      	add	r3, r7
 80179b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80179ba:	687a      	ldr	r2, [r7, #4]
 80179bc:	429a      	cmp	r2, r3
 80179be:	d807      	bhi.n	80179d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80179c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c2:	009b      	lsls	r3, r3, #2
 80179c4:	3348      	adds	r3, #72	; 0x48
 80179c6:	443b      	add	r3, r7
 80179c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80179cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80179ce:	e005      	b.n	80179dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80179d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179d2:	3301      	adds	r3, #1
 80179d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179d8:	2b02      	cmp	r3, #2
 80179da:	d9e8      	bls.n	80179ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80179dc:	4b13      	ldr	r3, [pc, #76]	; (8017a2c <RCC_SetFlashLatency+0xf4>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	f023 0207 	bic.w	r2, r3, #7
 80179e4:	4911      	ldr	r1, [pc, #68]	; (8017a2c <RCC_SetFlashLatency+0xf4>)
 80179e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179e8:	4313      	orrs	r3, r2
 80179ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80179ec:	f7fd fbd8 	bl	80151a0 <HAL_GetTick>
 80179f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80179f2:	e008      	b.n	8017a06 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80179f4:	f7fd fbd4 	bl	80151a0 <HAL_GetTick>
 80179f8:	4602      	mov	r2, r0
 80179fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179fc:	1ad3      	subs	r3, r2, r3
 80179fe:	2b02      	cmp	r3, #2
 8017a00:	d901      	bls.n	8017a06 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017a02:	2303      	movs	r3, #3
 8017a04:	e007      	b.n	8017a16 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017a06:	4b09      	ldr	r3, [pc, #36]	; (8017a2c <RCC_SetFlashLatency+0xf4>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	f003 0307 	and.w	r3, r3, #7
 8017a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d1ef      	bne.n	80179f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017a14:	2300      	movs	r3, #0
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	374c      	adds	r7, #76	; 0x4c
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd90      	pop	{r4, r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	0801a394 	.word	0x0801a394
 8017a24:	0801a3a4 	.word	0x0801a3a4
 8017a28:	0801a3b0 	.word	0x0801a3b0
 8017a2c:	58004000 	.word	0x58004000

08017a30 <LL_RCC_LSE_IsEnabled>:
{
 8017a30:	b480      	push	{r7}
 8017a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a3c:	f003 0301 	and.w	r3, r3, #1
 8017a40:	2b01      	cmp	r3, #1
 8017a42:	d101      	bne.n	8017a48 <LL_RCC_LSE_IsEnabled+0x18>
 8017a44:	2301      	movs	r3, #1
 8017a46:	e000      	b.n	8017a4a <LL_RCC_LSE_IsEnabled+0x1a>
 8017a48:	2300      	movs	r3, #0
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr

08017a54 <LL_RCC_LSE_IsReady>:
{
 8017a54:	b480      	push	{r7}
 8017a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a60:	f003 0302 	and.w	r3, r3, #2
 8017a64:	2b02      	cmp	r3, #2
 8017a66:	d101      	bne.n	8017a6c <LL_RCC_LSE_IsReady+0x18>
 8017a68:	2301      	movs	r3, #1
 8017a6a:	e000      	b.n	8017a6e <LL_RCC_LSE_IsReady+0x1a>
 8017a6c:	2300      	movs	r3, #0
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	46bd      	mov	sp, r7
 8017a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a76:	4770      	bx	lr

08017a78 <LL_RCC_MSI_EnablePLLMode>:
{
 8017a78:	b480      	push	{r7}
 8017a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017a86:	f043 0304 	orr.w	r3, r3, #4
 8017a8a:	6013      	str	r3, [r2, #0]
}
 8017a8c:	bf00      	nop
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a94:	4770      	bx	lr

08017a96 <LL_RCC_SetRFWKPClockSource>:
{
 8017a96:	b480      	push	{r7}
 8017a98:	b083      	sub	sp, #12
 8017a9a:	af00      	add	r7, sp, #0
 8017a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017aa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4313      	orrs	r3, r2
 8017ab2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017ab6:	bf00      	nop
 8017ab8:	370c      	adds	r7, #12
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr

08017ac2 <LL_RCC_SetSMPSClockSource>:
{
 8017ac2:	b480      	push	{r7}
 8017ac4:	b083      	sub	sp, #12
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ad0:	f023 0203 	bic.w	r2, r3, #3
 8017ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	4313      	orrs	r3, r2
 8017adc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017ade:	bf00      	nop
 8017ae0:	370c      	adds	r7, #12
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae8:	4770      	bx	lr

08017aea <LL_RCC_SetSMPSPrescaler>:
{
 8017aea:	b480      	push	{r7}
 8017aec:	b083      	sub	sp, #12
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	4313      	orrs	r3, r2
 8017b04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017b06:	bf00      	nop
 8017b08:	370c      	adds	r7, #12
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr

08017b12 <LL_RCC_SetUSARTClockSource>:
{
 8017b12:	b480      	push	{r7}
 8017b14:	b083      	sub	sp, #12
 8017b16:	af00      	add	r7, sp, #0
 8017b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b22:	f023 0203 	bic.w	r2, r3, #3
 8017b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	4313      	orrs	r3, r2
 8017b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017b32:	bf00      	nop
 8017b34:	370c      	adds	r7, #12
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr

08017b3e <LL_RCC_SetLPUARTClockSource>:
{
 8017b3e:	b480      	push	{r7}
 8017b40:	b083      	sub	sp, #12
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017b5e:	bf00      	nop
 8017b60:	370c      	adds	r7, #12
 8017b62:	46bd      	mov	sp, r7
 8017b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b68:	4770      	bx	lr

08017b6a <LL_RCC_SetI2CClockSource>:
{
 8017b6a:	b480      	push	{r7}
 8017b6c:	b083      	sub	sp, #12
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	091b      	lsrs	r3, r3, #4
 8017b7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017b82:	43db      	mvns	r3, r3
 8017b84:	401a      	ands	r2, r3
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	011b      	lsls	r3, r3, #4
 8017b8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b92:	4313      	orrs	r3, r2
 8017b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017b98:	bf00      	nop
 8017b9a:	370c      	adds	r7, #12
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba2:	4770      	bx	lr

08017ba4 <LL_RCC_SetLPTIMClockSource>:
{
 8017ba4:	b480      	push	{r7}
 8017ba6:	b083      	sub	sp, #12
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017bb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	0c1b      	lsrs	r3, r3, #16
 8017bb8:	041b      	lsls	r3, r3, #16
 8017bba:	43db      	mvns	r3, r3
 8017bbc:	401a      	ands	r2, r3
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	041b      	lsls	r3, r3, #16
 8017bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017bcc:	bf00      	nop
 8017bce:	370c      	adds	r7, #12
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd6:	4770      	bx	lr

08017bd8 <LL_RCC_SetSAIClockSource>:
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b083      	sub	sp, #12
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	4313      	orrs	r3, r2
 8017bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017bf8:	bf00      	nop
 8017bfa:	370c      	adds	r7, #12
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c02:	4770      	bx	lr

08017c04 <LL_RCC_SetRNGClockSource>:
{
 8017c04:	b480      	push	{r7}
 8017c06:	b083      	sub	sp, #12
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c14:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	4313      	orrs	r3, r2
 8017c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c24:	bf00      	nop
 8017c26:	370c      	adds	r7, #12
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr

08017c30 <LL_RCC_SetCLK48ClockSource>:
{
 8017c30:	b480      	push	{r7}
 8017c32:	b083      	sub	sp, #12
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	4313      	orrs	r3, r2
 8017c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c50:	bf00      	nop
 8017c52:	370c      	adds	r7, #12
 8017c54:	46bd      	mov	sp, r7
 8017c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5a:	4770      	bx	lr

08017c5c <LL_RCC_SetUSBClockSource>:
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f7ff ffe3 	bl	8017c30 <LL_RCC_SetCLK48ClockSource>
}
 8017c6a:	bf00      	nop
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}

08017c72 <LL_RCC_SetADCClockSource>:
{
 8017c72:	b480      	push	{r7}
 8017c74:	b083      	sub	sp, #12
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4313      	orrs	r3, r2
 8017c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c92:	bf00      	nop
 8017c94:	370c      	adds	r7, #12
 8017c96:	46bd      	mov	sp, r7
 8017c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9c:	4770      	bx	lr

08017c9e <LL_RCC_SetRTCClockSource>:
{
 8017c9e:	b480      	push	{r7}
 8017ca0:	b083      	sub	sp, #12
 8017ca2:	af00      	add	r7, sp, #0
 8017ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	4313      	orrs	r3, r2
 8017cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017cbe:	bf00      	nop
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <LL_RCC_GetRTCClockSource>:
{
 8017cca:	b480      	push	{r7}
 8017ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8017cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce2:	4770      	bx	lr

08017ce4 <LL_RCC_ForceBackupDomainReset>:
{
 8017ce4:	b480      	push	{r7}
 8017ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017cfc:	bf00      	nop
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d04:	4770      	bx	lr

08017d06 <LL_RCC_ReleaseBackupDomainReset>:
{
 8017d06:	b480      	push	{r7}
 8017d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017d1e:	bf00      	nop
 8017d20:	46bd      	mov	sp, r7
 8017d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d26:	4770      	bx	lr

08017d28 <LL_RCC_PLLSAI1_Enable>:
{
 8017d28:	b480      	push	{r7}
 8017d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017d3a:	6013      	str	r3, [r2, #0]
}
 8017d3c:	bf00      	nop
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr

08017d46 <LL_RCC_PLLSAI1_Disable>:
{
 8017d46:	b480      	push	{r7}
 8017d48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017d58:	6013      	str	r3, [r2, #0]
}
 8017d5a:	bf00      	nop
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d62:	4770      	bx	lr

08017d64 <LL_RCC_PLLSAI1_IsReady>:
{
 8017d64:	b480      	push	{r7}
 8017d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8017d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017d76:	d101      	bne.n	8017d7c <LL_RCC_PLLSAI1_IsReady+0x18>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	e000      	b.n	8017d7e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8017d7c:	2300      	movs	r3, #0
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr

08017d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b088      	sub	sp, #32
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8017d90:	2300      	movs	r3, #0
 8017d92:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8017d94:	2300      	movs	r3, #0
 8017d96:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d034      	beq.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017dac:	d021      	beq.n	8017df2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8017dae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017db2:	d81b      	bhi.n	8017dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017db4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017db8:	d01d      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8017dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017dbe:	d815      	bhi.n	8017dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d00b      	beq.n	8017ddc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8017dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017dc8:	d110      	bne.n	8017dec <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8017dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dce:	68db      	ldr	r3, [r3, #12]
 8017dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017dd8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8017dda:	e00d      	b.n	8017df8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	3304      	adds	r3, #4
 8017de0:	4618      	mov	r0, r3
 8017de2:	f000 f94d 	bl	8018080 <RCCEx_PLLSAI1_ConfigNP>
 8017de6:	4603      	mov	r3, r0
 8017de8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017dea:	e005      	b.n	8017df8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8017dec:	2301      	movs	r3, #1
 8017dee:	77fb      	strb	r3, [r7, #31]
        break;
 8017df0:	e002      	b.n	8017df8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017df2:	bf00      	nop
 8017df4:	e000      	b.n	8017df8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017df8:	7ffb      	ldrb	r3, [r7, #31]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d105      	bne.n	8017e0a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7ff fee8 	bl	8017bd8 <LL_RCC_SetSAIClockSource>
 8017e08:	e001      	b.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017e0a:	7ffb      	ldrb	r3, [r7, #31]
 8017e0c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d046      	beq.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8017e1a:	f7ff ff56 	bl	8017cca <LL_RCC_GetRTCClockSource>
 8017e1e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e24:	69ba      	ldr	r2, [r7, #24]
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d03c      	beq.n	8017ea4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017e2a:	f7fe fc59 	bl	80166e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8017e2e:	69bb      	ldr	r3, [r7, #24]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d105      	bne.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7ff ff30 	bl	8017c9e <LL_RCC_SetRTCClockSource>
 8017e3e:	e02e      	b.n	8017e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8017e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e48:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8017e4a:	f7ff ff4b 	bl	8017ce4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8017e4e:	f7ff ff5a 	bl	8017d06 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e5c:	4313      	orrs	r3, r2
 8017e5e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8017e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8017e6a:	f7ff fde1 	bl	8017a30 <LL_RCC_LSE_IsEnabled>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2b01      	cmp	r3, #1
 8017e72:	d114      	bne.n	8017e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017e74:	f7fd f994 	bl	80151a0 <HAL_GetTick>
 8017e78:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8017e7a:	e00b      	b.n	8017e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017e7c:	f7fd f990 	bl	80151a0 <HAL_GetTick>
 8017e80:	4602      	mov	r2, r0
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	1ad3      	subs	r3, r2, r3
 8017e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	d902      	bls.n	8017e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8017e8e:	2303      	movs	r3, #3
 8017e90:	77fb      	strb	r3, [r7, #31]
              break;
 8017e92:	e004      	b.n	8017e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8017e94:	f7ff fdde 	bl	8017a54 <LL_RCC_LSE_IsReady>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d1ee      	bne.n	8017e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8017e9e:	7ffb      	ldrb	r3, [r7, #31]
 8017ea0:	77bb      	strb	r3, [r7, #30]
 8017ea2:	e001      	b.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017ea4:	7ffb      	ldrb	r3, [r7, #31]
 8017ea6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	f003 0301 	and.w	r3, r3, #1
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d004      	beq.n	8017ebe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	699b      	ldr	r3, [r3, #24]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7ff fe2a 	bl	8017b12 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f003 0302 	and.w	r3, r3, #2
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d004      	beq.n	8017ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	69db      	ldr	r3, [r3, #28]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7ff fe35 	bl	8017b3e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	f003 0310 	and.w	r3, r3, #16
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d004      	beq.n	8017eea <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ff fe5d 	bl	8017ba4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	f003 0320 	and.w	r3, r3, #32
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d004      	beq.n	8017f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ff fe52 	bl	8017ba4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	f003 0304 	and.w	r3, r3, #4
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d004      	beq.n	8017f16 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	6a1b      	ldr	r3, [r3, #32]
 8017f10:	4618      	mov	r0, r3
 8017f12:	f7ff fe2a 	bl	8017b6a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f003 0308 	and.w	r3, r3, #8
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d004      	beq.n	8017f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7ff fe1f 	bl	8017b6a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d022      	beq.n	8017f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7ff fe8d 	bl	8017c5c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f4a:	d107      	bne.n	8017f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8017f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f50:	68db      	ldr	r3, [r3, #12]
 8017f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017f5a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017f64:	d10b      	bne.n	8017f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	3304      	adds	r3, #4
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f000 f8e3 	bl	8018136 <RCCEx_PLLSAI1_ConfigNQ>
 8017f70:	4603      	mov	r3, r0
 8017f72:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017f74:	7ffb      	ldrb	r3, [r7, #31]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d001      	beq.n	8017f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8017f7a:	7ffb      	ldrb	r3, [r7, #31]
 8017f7c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d02b      	beq.n	8017fe2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f92:	d008      	beq.n	8017fa6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017f9c:	d003      	beq.n	8017fa6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d105      	bne.n	8017fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7ff fe2a 	bl	8017c04 <LL_RCC_SetRNGClockSource>
 8017fb0:	e00a      	b.n	8017fc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017fba:	60fb      	str	r3, [r7, #12]
 8017fbc:	2000      	movs	r0, #0
 8017fbe:	f7ff fe21 	bl	8017c04 <LL_RCC_SetRNGClockSource>
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	f7ff fe34 	bl	8017c30 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fcc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8017fd0:	d107      	bne.n	8017fe2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8017fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fd6:	68db      	ldr	r3, [r3, #12]
 8017fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017fe0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d022      	beq.n	8018034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7ff fe3d 	bl	8017c72 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018000:	d107      	bne.n	8018012 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8018002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018006:	68db      	ldr	r3, [r3, #12]
 8018008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018010:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801801a:	d10b      	bne.n	8018034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	3304      	adds	r3, #4
 8018020:	4618      	mov	r0, r3
 8018022:	f000 f8e3 	bl	80181ec <RCCEx_PLLSAI1_ConfigNR>
 8018026:	4603      	mov	r3, r0
 8018028:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801802a:	7ffb      	ldrb	r3, [r7, #31]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d001      	beq.n	8018034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8018030:	7ffb      	ldrb	r3, [r7, #31]
 8018032:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801803c:	2b00      	cmp	r3, #0
 801803e:	d004      	beq.n	801804a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018044:	4618      	mov	r0, r3
 8018046:	f7ff fd26 	bl	8017a96 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018052:	2b00      	cmp	r3, #0
 8018054:	d009      	beq.n	801806a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801805a:	4618      	mov	r0, r3
 801805c:	f7ff fd45 	bl	8017aea <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018064:	4618      	mov	r0, r3
 8018066:	f7ff fd2c 	bl	8017ac2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801806a:	7fbb      	ldrb	r3, [r7, #30]
}
 801806c:	4618      	mov	r0, r3
 801806e:	3720      	adds	r7, #32
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}

08018074 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8018074:	b580      	push	{r7, lr}
 8018076:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018078:	f7ff fcfe 	bl	8017a78 <LL_RCC_MSI_EnablePLLMode>
}
 801807c:	bf00      	nop
 801807e:	bd80      	pop	{r7, pc}

08018080 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b084      	sub	sp, #16
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018088:	2300      	movs	r3, #0
 801808a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801808c:	f7ff fe5b 	bl	8017d46 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018090:	f7fd f886 	bl	80151a0 <HAL_GetTick>
 8018094:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018096:	e009      	b.n	80180ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018098:	f7fd f882 	bl	80151a0 <HAL_GetTick>
 801809c:	4602      	mov	r2, r0
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	1ad3      	subs	r3, r2, r3
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	d902      	bls.n	80180ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80180a6:	2303      	movs	r3, #3
 80180a8:	73fb      	strb	r3, [r7, #15]
      break;
 80180aa:	e004      	b.n	80180b6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80180ac:	f7ff fe5a 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 80180b0:	4603      	mov	r3, r0
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d1f0      	bne.n	8018098 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80180b6:	7bfb      	ldrb	r3, [r7, #15]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d137      	bne.n	801812c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80180bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180c0:	691b      	ldr	r3, [r3, #16]
 80180c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	021b      	lsls	r3, r3, #8
 80180cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180d0:	4313      	orrs	r3, r2
 80180d2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80180d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180d8:	691b      	ldr	r3, [r3, #16]
 80180da:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180e6:	4313      	orrs	r3, r2
 80180e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80180ea:	f7ff fe1d 	bl	8017d28 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80180ee:	f7fd f857 	bl	80151a0 <HAL_GetTick>
 80180f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80180f4:	e009      	b.n	801810a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80180f6:	f7fd f853 	bl	80151a0 <HAL_GetTick>
 80180fa:	4602      	mov	r2, r0
 80180fc:	68bb      	ldr	r3, [r7, #8]
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	2b02      	cmp	r3, #2
 8018102:	d902      	bls.n	801810a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8018104:	2303      	movs	r3, #3
 8018106:	73fb      	strb	r3, [r7, #15]
        break;
 8018108:	e004      	b.n	8018114 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801810a:	f7ff fe2b 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 801810e:	4603      	mov	r3, r0
 8018110:	2b01      	cmp	r3, #1
 8018112:	d1f0      	bne.n	80180f6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8018114:	7bfb      	ldrb	r3, [r7, #15]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d108      	bne.n	801812c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801811a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801811e:	691a      	ldr	r2, [r3, #16]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	691b      	ldr	r3, [r3, #16]
 8018124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018128:	4313      	orrs	r3, r2
 801812a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801812c:	7bfb      	ldrb	r3, [r7, #15]
}
 801812e:	4618      	mov	r0, r3
 8018130:	3710      	adds	r7, #16
 8018132:	46bd      	mov	sp, r7
 8018134:	bd80      	pop	{r7, pc}

08018136 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018136:	b580      	push	{r7, lr}
 8018138:	b084      	sub	sp, #16
 801813a:	af00      	add	r7, sp, #0
 801813c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801813e:	2300      	movs	r3, #0
 8018140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018142:	f7ff fe00 	bl	8017d46 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018146:	f7fd f82b 	bl	80151a0 <HAL_GetTick>
 801814a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801814c:	e009      	b.n	8018162 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801814e:	f7fd f827 	bl	80151a0 <HAL_GetTick>
 8018152:	4602      	mov	r2, r0
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	2b02      	cmp	r3, #2
 801815a:	d902      	bls.n	8018162 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801815c:	2303      	movs	r3, #3
 801815e:	73fb      	strb	r3, [r7, #15]
      break;
 8018160:	e004      	b.n	801816c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018162:	f7ff fdff 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 8018166:	4603      	mov	r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	d1f0      	bne.n	801814e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801816c:	7bfb      	ldrb	r3, [r7, #15]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d137      	bne.n	80181e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018176:	691b      	ldr	r3, [r3, #16]
 8018178:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	021b      	lsls	r3, r3, #8
 8018182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018186:	4313      	orrs	r3, r2
 8018188:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801818a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801818e:	691b      	ldr	r3, [r3, #16]
 8018190:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	689b      	ldr	r3, [r3, #8]
 8018198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801819c:	4313      	orrs	r3, r2
 801819e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80181a0:	f7ff fdc2 	bl	8017d28 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80181a4:	f7fc fffc 	bl	80151a0 <HAL_GetTick>
 80181a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80181aa:	e009      	b.n	80181c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80181ac:	f7fc fff8 	bl	80151a0 <HAL_GetTick>
 80181b0:	4602      	mov	r2, r0
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	1ad3      	subs	r3, r2, r3
 80181b6:	2b02      	cmp	r3, #2
 80181b8:	d902      	bls.n	80181c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80181ba:	2303      	movs	r3, #3
 80181bc:	73fb      	strb	r3, [r7, #15]
        break;
 80181be:	e004      	b.n	80181ca <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80181c0:	f7ff fdd0 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b01      	cmp	r3, #1
 80181c8:	d1f0      	bne.n	80181ac <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80181ca:	7bfb      	ldrb	r3, [r7, #15]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d108      	bne.n	80181e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80181d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181d4:	691a      	ldr	r2, [r3, #16]
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	691b      	ldr	r3, [r3, #16]
 80181da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181de:	4313      	orrs	r3, r2
 80181e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80181e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3710      	adds	r7, #16
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}

080181ec <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b084      	sub	sp, #16
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80181f4:	2300      	movs	r3, #0
 80181f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80181f8:	f7ff fda5 	bl	8017d46 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80181fc:	f7fc ffd0 	bl	80151a0 <HAL_GetTick>
 8018200:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018202:	e009      	b.n	8018218 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018204:	f7fc ffcc 	bl	80151a0 <HAL_GetTick>
 8018208:	4602      	mov	r2, r0
 801820a:	68bb      	ldr	r3, [r7, #8]
 801820c:	1ad3      	subs	r3, r2, r3
 801820e:	2b02      	cmp	r3, #2
 8018210:	d902      	bls.n	8018218 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8018212:	2303      	movs	r3, #3
 8018214:	73fb      	strb	r3, [r7, #15]
      break;
 8018216:	e004      	b.n	8018222 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018218:	f7ff fda4 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 801821c:	4603      	mov	r3, r0
 801821e:	2b00      	cmp	r3, #0
 8018220:	d1f0      	bne.n	8018204 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8018222:	7bfb      	ldrb	r3, [r7, #15]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d137      	bne.n	8018298 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801822c:	691b      	ldr	r3, [r3, #16]
 801822e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	021b      	lsls	r3, r3, #8
 8018238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801823c:	4313      	orrs	r3, r2
 801823e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018244:	691b      	ldr	r3, [r3, #16]
 8018246:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	68db      	ldr	r3, [r3, #12]
 801824e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018252:	4313      	orrs	r3, r2
 8018254:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018256:	f7ff fd67 	bl	8017d28 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801825a:	f7fc ffa1 	bl	80151a0 <HAL_GetTick>
 801825e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018260:	e009      	b.n	8018276 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018262:	f7fc ff9d 	bl	80151a0 <HAL_GetTick>
 8018266:	4602      	mov	r2, r0
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	1ad3      	subs	r3, r2, r3
 801826c:	2b02      	cmp	r3, #2
 801826e:	d902      	bls.n	8018276 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018270:	2303      	movs	r3, #3
 8018272:	73fb      	strb	r3, [r7, #15]
        break;
 8018274:	e004      	b.n	8018280 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018276:	f7ff fd75 	bl	8017d64 <LL_RCC_PLLSAI1_IsReady>
 801827a:	4603      	mov	r3, r0
 801827c:	2b01      	cmp	r3, #1
 801827e:	d1f0      	bne.n	8018262 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018280:	7bfb      	ldrb	r3, [r7, #15]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d108      	bne.n	8018298 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801828a:	691a      	ldr	r2, [r3, #16]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	691b      	ldr	r3, [r3, #16]
 8018290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018294:	4313      	orrs	r3, r2
 8018296:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018298:	7bfb      	ldrb	r3, [r7, #15]
}
 801829a:	4618      	mov	r0, r3
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}

080182a2 <LL_RCC_GetUSARTClockSource>:
{
 80182a2:	b480      	push	{r7}
 80182a4:	b083      	sub	sp, #12
 80182a6:	af00      	add	r7, sp, #0
 80182a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80182aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	4013      	ands	r3, r2
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	370c      	adds	r7, #12
 80182ba:	46bd      	mov	sp, r7
 80182bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c0:	4770      	bx	lr

080182c2 <LL_RCC_GetLPUARTClockSource>:
{
 80182c2:	b480      	push	{r7}
 80182c4:	b083      	sub	sp, #12
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80182ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	4013      	ands	r3, r2
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	370c      	adds	r7, #12
 80182da:	46bd      	mov	sp, r7
 80182dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e0:	4770      	bx	lr

080182e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b082      	sub	sp, #8
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d101      	bne.n	80182f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80182f0:	2301      	movs	r3, #1
 80182f2:	e042      	b.n	801837a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d106      	bne.n	801830c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2200      	movs	r2, #0
 8018302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	f000 f83b 	bl	8018382 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	2224      	movs	r2, #36	; 0x24
 8018310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	681a      	ldr	r2, [r3, #0]
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	f022 0201 	bic.w	r2, r2, #1
 8018322:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f000 f8c5 	bl	80184b4 <UART_SetConfig>
 801832a:	4603      	mov	r3, r0
 801832c:	2b01      	cmp	r3, #1
 801832e:	d101      	bne.n	8018334 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018330:	2301      	movs	r3, #1
 8018332:	e022      	b.n	801837a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018338:	2b00      	cmp	r3, #0
 801833a:	d002      	beq.n	8018342 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f000 fae1 	bl	8018904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	685a      	ldr	r2, [r3, #4]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	689a      	ldr	r2, [r3, #8]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018360:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	681a      	ldr	r2, [r3, #0]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	f042 0201 	orr.w	r2, r2, #1
 8018370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018372:	6878      	ldr	r0, [r7, #4]
 8018374:	f000 fb68 	bl	8018a48 <UART_CheckIdleState>
 8018378:	4603      	mov	r3, r0
}
 801837a:	4618      	mov	r0, r3
 801837c:	3708      	adds	r7, #8
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}

08018382 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8018382:	b480      	push	{r7}
 8018384:	b083      	sub	sp, #12
 8018386:	af00      	add	r7, sp, #0
 8018388:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 801838a:	bf00      	nop
 801838c:	370c      	adds	r7, #12
 801838e:	46bd      	mov	sp, r7
 8018390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018394:	4770      	bx	lr

08018396 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018396:	b580      	push	{r7, lr}
 8018398:	b08a      	sub	sp, #40	; 0x28
 801839a:	af02      	add	r7, sp, #8
 801839c:	60f8      	str	r0, [r7, #12]
 801839e:	60b9      	str	r1, [r7, #8]
 80183a0:	603b      	str	r3, [r7, #0]
 80183a2:	4613      	mov	r3, r2
 80183a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183ac:	2b20      	cmp	r3, #32
 80183ae:	d17b      	bne.n	80184a8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d002      	beq.n	80183bc <HAL_UART_Transmit+0x26>
 80183b6:	88fb      	ldrh	r3, [r7, #6]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d101      	bne.n	80183c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80183bc:	2301      	movs	r3, #1
 80183be:	e074      	b.n	80184aa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2200      	movs	r2, #0
 80183c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	2221      	movs	r2, #33	; 0x21
 80183cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80183d0:	f7fc fee6 	bl	80151a0 <HAL_GetTick>
 80183d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	88fa      	ldrh	r2, [r7, #6]
 80183da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	88fa      	ldrh	r2, [r7, #6]
 80183e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	689b      	ldr	r3, [r3, #8]
 80183ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80183ee:	d108      	bne.n	8018402 <HAL_UART_Transmit+0x6c>
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	691b      	ldr	r3, [r3, #16]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d104      	bne.n	8018402 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80183f8:	2300      	movs	r3, #0
 80183fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	61bb      	str	r3, [r7, #24]
 8018400:	e003      	b.n	801840a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018406:	2300      	movs	r3, #0
 8018408:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801840a:	e030      	b.n	801846e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	9300      	str	r3, [sp, #0]
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	2200      	movs	r2, #0
 8018414:	2180      	movs	r1, #128	; 0x80
 8018416:	68f8      	ldr	r0, [r7, #12]
 8018418:	f000 fbc0 	bl	8018b9c <UART_WaitOnFlagUntilTimeout>
 801841c:	4603      	mov	r3, r0
 801841e:	2b00      	cmp	r3, #0
 8018420:	d005      	beq.n	801842e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2220      	movs	r2, #32
 8018426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801842a:	2303      	movs	r3, #3
 801842c:	e03d      	b.n	80184aa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d10b      	bne.n	801844c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018434:	69bb      	ldr	r3, [r7, #24]
 8018436:	881b      	ldrh	r3, [r3, #0]
 8018438:	461a      	mov	r2, r3
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018442:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8018444:	69bb      	ldr	r3, [r7, #24]
 8018446:	3302      	adds	r3, #2
 8018448:	61bb      	str	r3, [r7, #24]
 801844a:	e007      	b.n	801845c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	781a      	ldrb	r2, [r3, #0]
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	3301      	adds	r3, #1
 801845a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8018462:	b29b      	uxth	r3, r3
 8018464:	3b01      	subs	r3, #1
 8018466:	b29a      	uxth	r2, r3
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8018474:	b29b      	uxth	r3, r3
 8018476:	2b00      	cmp	r3, #0
 8018478:	d1c8      	bne.n	801840c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	9300      	str	r3, [sp, #0]
 801847e:	697b      	ldr	r3, [r7, #20]
 8018480:	2200      	movs	r2, #0
 8018482:	2140      	movs	r1, #64	; 0x40
 8018484:	68f8      	ldr	r0, [r7, #12]
 8018486:	f000 fb89 	bl	8018b9c <UART_WaitOnFlagUntilTimeout>
 801848a:	4603      	mov	r3, r0
 801848c:	2b00      	cmp	r3, #0
 801848e:	d005      	beq.n	801849c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	2220      	movs	r2, #32
 8018494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8018498:	2303      	movs	r3, #3
 801849a:	e006      	b.n	80184aa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	2220      	movs	r2, #32
 80184a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80184a4:	2300      	movs	r3, #0
 80184a6:	e000      	b.n	80184aa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80184a8:	2302      	movs	r3, #2
  }
}
 80184aa:	4618      	mov	r0, r3
 80184ac:	3720      	adds	r7, #32
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
	...

080184b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80184b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80184b8:	b08c      	sub	sp, #48	; 0x30
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80184be:	2300      	movs	r3, #0
 80184c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80184c4:	697b      	ldr	r3, [r7, #20]
 80184c6:	689a      	ldr	r2, [r3, #8]
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	691b      	ldr	r3, [r3, #16]
 80184cc:	431a      	orrs	r2, r3
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	695b      	ldr	r3, [r3, #20]
 80184d2:	431a      	orrs	r2, r3
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	69db      	ldr	r3, [r3, #28]
 80184d8:	4313      	orrs	r3, r2
 80184da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	4baf      	ldr	r3, [pc, #700]	; (80187a0 <UART_SetConfig+0x2ec>)
 80184e4:	4013      	ands	r3, r2
 80184e6:	697a      	ldr	r2, [r7, #20]
 80184e8:	6812      	ldr	r2, [r2, #0]
 80184ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184ec:	430b      	orrs	r3, r1
 80184ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80184f0:	697b      	ldr	r3, [r7, #20]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	68da      	ldr	r2, [r3, #12]
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	430a      	orrs	r2, r1
 8018504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	699b      	ldr	r3, [r3, #24]
 801850a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	4aa4      	ldr	r2, [pc, #656]	; (80187a4 <UART_SetConfig+0x2f0>)
 8018512:	4293      	cmp	r3, r2
 8018514:	d004      	beq.n	8018520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	6a1b      	ldr	r3, [r3, #32]
 801851a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801851c:	4313      	orrs	r3, r2
 801851e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018520:	697b      	ldr	r3, [r7, #20]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	689b      	ldr	r3, [r3, #8]
 8018526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801852a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801852e:	697a      	ldr	r2, [r7, #20]
 8018530:	6812      	ldr	r2, [r2, #0]
 8018532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018534:	430b      	orrs	r3, r1
 8018536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801853e:	f023 010f 	bic.w	r1, r3, #15
 8018542:	697b      	ldr	r3, [r7, #20]
 8018544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	430a      	orrs	r2, r1
 801854c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	4a95      	ldr	r2, [pc, #596]	; (80187a8 <UART_SetConfig+0x2f4>)
 8018554:	4293      	cmp	r3, r2
 8018556:	d125      	bne.n	80185a4 <UART_SetConfig+0xf0>
 8018558:	2003      	movs	r0, #3
 801855a:	f7ff fea2 	bl	80182a2 <LL_RCC_GetUSARTClockSource>
 801855e:	4603      	mov	r3, r0
 8018560:	2b03      	cmp	r3, #3
 8018562:	d81b      	bhi.n	801859c <UART_SetConfig+0xe8>
 8018564:	a201      	add	r2, pc, #4	; (adr r2, 801856c <UART_SetConfig+0xb8>)
 8018566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801856a:	bf00      	nop
 801856c:	0801857d 	.word	0x0801857d
 8018570:	0801858d 	.word	0x0801858d
 8018574:	08018585 	.word	0x08018585
 8018578:	08018595 	.word	0x08018595
 801857c:	2301      	movs	r3, #1
 801857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018582:	e042      	b.n	801860a <UART_SetConfig+0x156>
 8018584:	2302      	movs	r3, #2
 8018586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801858a:	e03e      	b.n	801860a <UART_SetConfig+0x156>
 801858c:	2304      	movs	r3, #4
 801858e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018592:	e03a      	b.n	801860a <UART_SetConfig+0x156>
 8018594:	2308      	movs	r3, #8
 8018596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801859a:	e036      	b.n	801860a <UART_SetConfig+0x156>
 801859c:	2310      	movs	r3, #16
 801859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80185a2:	e032      	b.n	801860a <UART_SetConfig+0x156>
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4a7e      	ldr	r2, [pc, #504]	; (80187a4 <UART_SetConfig+0x2f0>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d12a      	bne.n	8018604 <UART_SetConfig+0x150>
 80185ae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80185b2:	f7ff fe86 	bl	80182c2 <LL_RCC_GetLPUARTClockSource>
 80185b6:	4603      	mov	r3, r0
 80185b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80185bc:	d01a      	beq.n	80185f4 <UART_SetConfig+0x140>
 80185be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80185c2:	d81b      	bhi.n	80185fc <UART_SetConfig+0x148>
 80185c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80185c8:	d00c      	beq.n	80185e4 <UART_SetConfig+0x130>
 80185ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80185ce:	d815      	bhi.n	80185fc <UART_SetConfig+0x148>
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d003      	beq.n	80185dc <UART_SetConfig+0x128>
 80185d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80185d8:	d008      	beq.n	80185ec <UART_SetConfig+0x138>
 80185da:	e00f      	b.n	80185fc <UART_SetConfig+0x148>
 80185dc:	2300      	movs	r3, #0
 80185de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80185e2:	e012      	b.n	801860a <UART_SetConfig+0x156>
 80185e4:	2302      	movs	r3, #2
 80185e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80185ea:	e00e      	b.n	801860a <UART_SetConfig+0x156>
 80185ec:	2304      	movs	r3, #4
 80185ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80185f2:	e00a      	b.n	801860a <UART_SetConfig+0x156>
 80185f4:	2308      	movs	r3, #8
 80185f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80185fa:	e006      	b.n	801860a <UART_SetConfig+0x156>
 80185fc:	2310      	movs	r3, #16
 80185fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018602:	e002      	b.n	801860a <UART_SetConfig+0x156>
 8018604:	2310      	movs	r3, #16
 8018606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	4a65      	ldr	r2, [pc, #404]	; (80187a4 <UART_SetConfig+0x2f0>)
 8018610:	4293      	cmp	r3, r2
 8018612:	f040 8097 	bne.w	8018744 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801861a:	2b08      	cmp	r3, #8
 801861c:	d823      	bhi.n	8018666 <UART_SetConfig+0x1b2>
 801861e:	a201      	add	r2, pc, #4	; (adr r2, 8018624 <UART_SetConfig+0x170>)
 8018620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018624:	08018649 	.word	0x08018649
 8018628:	08018667 	.word	0x08018667
 801862c:	08018651 	.word	0x08018651
 8018630:	08018667 	.word	0x08018667
 8018634:	08018657 	.word	0x08018657
 8018638:	08018667 	.word	0x08018667
 801863c:	08018667 	.word	0x08018667
 8018640:	08018667 	.word	0x08018667
 8018644:	0801865f 	.word	0x0801865f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018648:	f7ff f912 	bl	8017870 <HAL_RCC_GetPCLK1Freq>
 801864c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801864e:	e010      	b.n	8018672 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018650:	4b56      	ldr	r3, [pc, #344]	; (80187ac <UART_SetConfig+0x2f8>)
 8018652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018654:	e00d      	b.n	8018672 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018656:	f7ff f88b 	bl	8017770 <HAL_RCC_GetSysClockFreq>
 801865a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801865c:	e009      	b.n	8018672 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801865e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018664:	e005      	b.n	8018672 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018666:	2300      	movs	r3, #0
 8018668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801866a:	2301      	movs	r3, #1
 801866c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018674:	2b00      	cmp	r3, #0
 8018676:	f000 812b 	beq.w	80188d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801867e:	4a4c      	ldr	r2, [pc, #304]	; (80187b0 <UART_SetConfig+0x2fc>)
 8018680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018684:	461a      	mov	r2, r3
 8018686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018688:	fbb3 f3f2 	udiv	r3, r3, r2
 801868c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	685a      	ldr	r2, [r3, #4]
 8018692:	4613      	mov	r3, r2
 8018694:	005b      	lsls	r3, r3, #1
 8018696:	4413      	add	r3, r2
 8018698:	69ba      	ldr	r2, [r7, #24]
 801869a:	429a      	cmp	r2, r3
 801869c:	d305      	bcc.n	80186aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	685b      	ldr	r3, [r3, #4]
 80186a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80186a4:	69ba      	ldr	r2, [r7, #24]
 80186a6:	429a      	cmp	r2, r3
 80186a8:	d903      	bls.n	80186b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80186aa:	2301      	movs	r3, #1
 80186ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80186b0:	e10e      	b.n	80188d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80186b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b4:	2200      	movs	r2, #0
 80186b6:	60bb      	str	r3, [r7, #8]
 80186b8:	60fa      	str	r2, [r7, #12]
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186be:	4a3c      	ldr	r2, [pc, #240]	; (80187b0 <UART_SetConfig+0x2fc>)
 80186c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	2200      	movs	r2, #0
 80186c8:	603b      	str	r3, [r7, #0]
 80186ca:	607a      	str	r2, [r7, #4]
 80186cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80186d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80186d4:	f7e7 fdf4 	bl	80002c0 <__aeabi_uldivmod>
 80186d8:	4602      	mov	r2, r0
 80186da:	460b      	mov	r3, r1
 80186dc:	4610      	mov	r0, r2
 80186de:	4619      	mov	r1, r3
 80186e0:	f04f 0200 	mov.w	r2, #0
 80186e4:	f04f 0300 	mov.w	r3, #0
 80186e8:	020b      	lsls	r3, r1, #8
 80186ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80186ee:	0202      	lsls	r2, r0, #8
 80186f0:	6979      	ldr	r1, [r7, #20]
 80186f2:	6849      	ldr	r1, [r1, #4]
 80186f4:	0849      	lsrs	r1, r1, #1
 80186f6:	2000      	movs	r0, #0
 80186f8:	460c      	mov	r4, r1
 80186fa:	4605      	mov	r5, r0
 80186fc:	eb12 0804 	adds.w	r8, r2, r4
 8018700:	eb43 0905 	adc.w	r9, r3, r5
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2200      	movs	r2, #0
 801870a:	469a      	mov	sl, r3
 801870c:	4693      	mov	fp, r2
 801870e:	4652      	mov	r2, sl
 8018710:	465b      	mov	r3, fp
 8018712:	4640      	mov	r0, r8
 8018714:	4649      	mov	r1, r9
 8018716:	f7e7 fdd3 	bl	80002c0 <__aeabi_uldivmod>
 801871a:	4602      	mov	r2, r0
 801871c:	460b      	mov	r3, r1
 801871e:	4613      	mov	r3, r2
 8018720:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018722:	6a3b      	ldr	r3, [r7, #32]
 8018724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018728:	d308      	bcc.n	801873c <UART_SetConfig+0x288>
 801872a:	6a3b      	ldr	r3, [r7, #32]
 801872c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018730:	d204      	bcs.n	801873c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018732:	697b      	ldr	r3, [r7, #20]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	6a3a      	ldr	r2, [r7, #32]
 8018738:	60da      	str	r2, [r3, #12]
 801873a:	e0c9      	b.n	80188d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801873c:	2301      	movs	r3, #1
 801873e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018742:	e0c5      	b.n	80188d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	69db      	ldr	r3, [r3, #28]
 8018748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801874c:	d16d      	bne.n	801882a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801874e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018752:	3b01      	subs	r3, #1
 8018754:	2b07      	cmp	r3, #7
 8018756:	d82d      	bhi.n	80187b4 <UART_SetConfig+0x300>
 8018758:	a201      	add	r2, pc, #4	; (adr r2, 8018760 <UART_SetConfig+0x2ac>)
 801875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801875e:	bf00      	nop
 8018760:	08018781 	.word	0x08018781
 8018764:	08018789 	.word	0x08018789
 8018768:	080187b5 	.word	0x080187b5
 801876c:	0801878f 	.word	0x0801878f
 8018770:	080187b5 	.word	0x080187b5
 8018774:	080187b5 	.word	0x080187b5
 8018778:	080187b5 	.word	0x080187b5
 801877c:	08018797 	.word	0x08018797
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018780:	f7ff f88c 	bl	801789c <HAL_RCC_GetPCLK2Freq>
 8018784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018786:	e01b      	b.n	80187c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018788:	4b08      	ldr	r3, [pc, #32]	; (80187ac <UART_SetConfig+0x2f8>)
 801878a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801878c:	e018      	b.n	80187c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801878e:	f7fe ffef 	bl	8017770 <HAL_RCC_GetSysClockFreq>
 8018792:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018794:	e014      	b.n	80187c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801879a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801879c:	e010      	b.n	80187c0 <UART_SetConfig+0x30c>
 801879e:	bf00      	nop
 80187a0:	cfff69f3 	.word	0xcfff69f3
 80187a4:	40008000 	.word	0x40008000
 80187a8:	40013800 	.word	0x40013800
 80187ac:	00f42400 	.word	0x00f42400
 80187b0:	0801a518 	.word	0x0801a518
      default:
        pclk = 0U;
 80187b4:	2300      	movs	r3, #0
 80187b6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80187b8:	2301      	movs	r3, #1
 80187ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80187be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80187c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f000 8084 	beq.w	80188d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187cc:	4a4b      	ldr	r2, [pc, #300]	; (80188fc <UART_SetConfig+0x448>)
 80187ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80187d2:	461a      	mov	r2, r3
 80187d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80187da:	005a      	lsls	r2, r3, #1
 80187dc:	697b      	ldr	r3, [r7, #20]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	085b      	lsrs	r3, r3, #1
 80187e2:	441a      	add	r2, r3
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80187ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80187ee:	6a3b      	ldr	r3, [r7, #32]
 80187f0:	2b0f      	cmp	r3, #15
 80187f2:	d916      	bls.n	8018822 <UART_SetConfig+0x36e>
 80187f4:	6a3b      	ldr	r3, [r7, #32]
 80187f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187fa:	d212      	bcs.n	8018822 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80187fc:	6a3b      	ldr	r3, [r7, #32]
 80187fe:	b29b      	uxth	r3, r3
 8018800:	f023 030f 	bic.w	r3, r3, #15
 8018804:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018806:	6a3b      	ldr	r3, [r7, #32]
 8018808:	085b      	lsrs	r3, r3, #1
 801880a:	b29b      	uxth	r3, r3
 801880c:	f003 0307 	and.w	r3, r3, #7
 8018810:	b29a      	uxth	r2, r3
 8018812:	8bfb      	ldrh	r3, [r7, #30]
 8018814:	4313      	orrs	r3, r2
 8018816:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	8bfa      	ldrh	r2, [r7, #30]
 801881e:	60da      	str	r2, [r3, #12]
 8018820:	e056      	b.n	80188d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018822:	2301      	movs	r3, #1
 8018824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018828:	e052      	b.n	80188d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801882a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801882e:	3b01      	subs	r3, #1
 8018830:	2b07      	cmp	r3, #7
 8018832:	d822      	bhi.n	801887a <UART_SetConfig+0x3c6>
 8018834:	a201      	add	r2, pc, #4	; (adr r2, 801883c <UART_SetConfig+0x388>)
 8018836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801883a:	bf00      	nop
 801883c:	0801885d 	.word	0x0801885d
 8018840:	08018865 	.word	0x08018865
 8018844:	0801887b 	.word	0x0801887b
 8018848:	0801886b 	.word	0x0801886b
 801884c:	0801887b 	.word	0x0801887b
 8018850:	0801887b 	.word	0x0801887b
 8018854:	0801887b 	.word	0x0801887b
 8018858:	08018873 	.word	0x08018873
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801885c:	f7ff f81e 	bl	801789c <HAL_RCC_GetPCLK2Freq>
 8018860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018862:	e010      	b.n	8018886 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018864:	4b26      	ldr	r3, [pc, #152]	; (8018900 <UART_SetConfig+0x44c>)
 8018866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018868:	e00d      	b.n	8018886 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801886a:	f7fe ff81 	bl	8017770 <HAL_RCC_GetSysClockFreq>
 801886e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018870:	e009      	b.n	8018886 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018878:	e005      	b.n	8018886 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801887a:	2300      	movs	r3, #0
 801887c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801887e:	2301      	movs	r3, #1
 8018880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018884:	bf00      	nop
    }

    if (pclk != 0U)
 8018886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018888:	2b00      	cmp	r3, #0
 801888a:	d021      	beq.n	80188d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018890:	4a1a      	ldr	r2, [pc, #104]	; (80188fc <UART_SetConfig+0x448>)
 8018892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018896:	461a      	mov	r2, r3
 8018898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801889a:	fbb3 f2f2 	udiv	r2, r3, r2
 801889e:	697b      	ldr	r3, [r7, #20]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	085b      	lsrs	r3, r3, #1
 80188a4:	441a      	add	r2, r3
 80188a6:	697b      	ldr	r3, [r7, #20]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80188ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80188b0:	6a3b      	ldr	r3, [r7, #32]
 80188b2:	2b0f      	cmp	r3, #15
 80188b4:	d909      	bls.n	80188ca <UART_SetConfig+0x416>
 80188b6:	6a3b      	ldr	r3, [r7, #32]
 80188b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80188bc:	d205      	bcs.n	80188ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80188be:	6a3b      	ldr	r3, [r7, #32]
 80188c0:	b29a      	uxth	r2, r3
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	60da      	str	r2, [r3, #12]
 80188c8:	e002      	b.n	80188d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80188ca:	2301      	movs	r3, #1
 80188cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	2201      	movs	r2, #1
 80188d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	2201      	movs	r2, #1
 80188dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	2200      	movs	r2, #0
 80188e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80188e6:	697b      	ldr	r3, [r7, #20]
 80188e8:	2200      	movs	r2, #0
 80188ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80188ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3730      	adds	r7, #48	; 0x30
 80188f4:	46bd      	mov	sp, r7
 80188f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80188fa:	bf00      	nop
 80188fc:	0801a518 	.word	0x0801a518
 8018900:	00f42400 	.word	0x00f42400

08018904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018904:	b480      	push	{r7}
 8018906:	b083      	sub	sp, #12
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018910:	f003 0301 	and.w	r3, r3, #1
 8018914:	2b00      	cmp	r3, #0
 8018916:	d00a      	beq.n	801892e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	430a      	orrs	r2, r1
 801892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018932:	f003 0302 	and.w	r3, r3, #2
 8018936:	2b00      	cmp	r3, #0
 8018938:	d00a      	beq.n	8018950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	430a      	orrs	r2, r1
 801894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018954:	f003 0304 	and.w	r3, r3, #4
 8018958:	2b00      	cmp	r3, #0
 801895a:	d00a      	beq.n	8018972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	430a      	orrs	r2, r1
 8018970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018976:	f003 0308 	and.w	r3, r3, #8
 801897a:	2b00      	cmp	r3, #0
 801897c:	d00a      	beq.n	8018994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	685b      	ldr	r3, [r3, #4]
 8018984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	430a      	orrs	r2, r1
 8018992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018998:	f003 0310 	and.w	r3, r3, #16
 801899c:	2b00      	cmp	r3, #0
 801899e:	d00a      	beq.n	80189b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	689b      	ldr	r3, [r3, #8]
 80189a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	430a      	orrs	r2, r1
 80189b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ba:	f003 0320 	and.w	r3, r3, #32
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d00a      	beq.n	80189d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	689b      	ldr	r3, [r3, #8]
 80189c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	430a      	orrs	r2, r1
 80189d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d01a      	beq.n	8018a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	685b      	ldr	r3, [r3, #4]
 80189ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	430a      	orrs	r2, r1
 80189f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018a02:	d10a      	bne.n	8018a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	430a      	orrs	r2, r1
 8018a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d00a      	beq.n	8018a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	430a      	orrs	r2, r1
 8018a3a:	605a      	str	r2, [r3, #4]
  }
}
 8018a3c:	bf00      	nop
 8018a3e:	370c      	adds	r7, #12
 8018a40:	46bd      	mov	sp, r7
 8018a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a46:	4770      	bx	lr

08018a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b098      	sub	sp, #96	; 0x60
 8018a4c:	af02      	add	r7, sp, #8
 8018a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2200      	movs	r2, #0
 8018a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018a58:	f7fc fba2 	bl	80151a0 <HAL_GetTick>
 8018a5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f003 0308 	and.w	r3, r3, #8
 8018a68:	2b08      	cmp	r3, #8
 8018a6a:	d12f      	bne.n	8018acc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018a70:	9300      	str	r3, [sp, #0]
 8018a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a74:	2200      	movs	r2, #0
 8018a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f000 f88e 	bl	8018b9c <UART_WaitOnFlagUntilTimeout>
 8018a80:	4603      	mov	r3, r0
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d022      	beq.n	8018acc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a8e:	e853 3f00 	ldrex	r3, [r3]
 8018a92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8018aa6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018aa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018aac:	e841 2300 	strex	r3, r2, [r1]
 8018ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d1e6      	bne.n	8018a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2220      	movs	r2, #32
 8018abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018ac8:	2303      	movs	r3, #3
 8018aca:	e063      	b.n	8018b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	f003 0304 	and.w	r3, r3, #4
 8018ad6:	2b04      	cmp	r3, #4
 8018ad8:	d149      	bne.n	8018b6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018ada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018ade:	9300      	str	r3, [sp, #0]
 8018ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8018ae8:	6878      	ldr	r0, [r7, #4]
 8018aea:	f000 f857 	bl	8018b9c <UART_WaitOnFlagUntilTimeout>
 8018aee:	4603      	mov	r3, r0
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d03c      	beq.n	8018b6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afc:	e853 3f00 	ldrex	r3, [r3]
 8018b00:	623b      	str	r3, [r7, #32]
   return(result);
 8018b02:	6a3b      	ldr	r3, [r7, #32]
 8018b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	461a      	mov	r2, r3
 8018b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b12:	633b      	str	r3, [r7, #48]	; 0x30
 8018b14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b1a:	e841 2300 	strex	r3, r2, [r1]
 8018b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1e6      	bne.n	8018af4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3308      	adds	r3, #8
 8018b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b2e:	693b      	ldr	r3, [r7, #16]
 8018b30:	e853 3f00 	ldrex	r3, [r3]
 8018b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	f023 0301 	bic.w	r3, r3, #1
 8018b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	3308      	adds	r3, #8
 8018b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018b46:	61fa      	str	r2, [r7, #28]
 8018b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b4a:	69b9      	ldr	r1, [r7, #24]
 8018b4c:	69fa      	ldr	r2, [r7, #28]
 8018b4e:	e841 2300 	strex	r3, r2, [r1]
 8018b52:	617b      	str	r3, [r7, #20]
   return(result);
 8018b54:	697b      	ldr	r3, [r7, #20]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d1e5      	bne.n	8018b26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2220      	movs	r2, #32
 8018b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	2200      	movs	r2, #0
 8018b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018b6a:	2303      	movs	r3, #3
 8018b6c:	e012      	b.n	8018b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2220      	movs	r2, #32
 8018b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	2220      	movs	r2, #32
 8018b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2200      	movs	r2, #0
 8018b82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2200      	movs	r2, #0
 8018b88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018b92:	2300      	movs	r3, #0
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3758      	adds	r7, #88	; 0x58
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}

08018b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	603b      	str	r3, [r7, #0]
 8018ba8:	4613      	mov	r3, r2
 8018baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018bac:	e049      	b.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018bae:	69bb      	ldr	r3, [r7, #24]
 8018bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bb4:	d045      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018bb6:	f7fc faf3 	bl	80151a0 <HAL_GetTick>
 8018bba:	4602      	mov	r2, r0
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	1ad3      	subs	r3, r2, r3
 8018bc0:	69ba      	ldr	r2, [r7, #24]
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d302      	bcc.n	8018bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8018bc6:	69bb      	ldr	r3, [r7, #24]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d101      	bne.n	8018bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	e048      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f003 0304 	and.w	r3, r3, #4
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d031      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	69db      	ldr	r3, [r3, #28]
 8018be4:	f003 0308 	and.w	r3, r3, #8
 8018be8:	2b08      	cmp	r3, #8
 8018bea:	d110      	bne.n	8018c0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2208      	movs	r2, #8
 8018bf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018bf4:	68f8      	ldr	r0, [r7, #12]
 8018bf6:	f000 f838 	bl	8018c6a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2208      	movs	r2, #8
 8018bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	2200      	movs	r2, #0
 8018c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	e029      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	69db      	ldr	r3, [r3, #28]
 8018c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c1c:	d111      	bne.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018c28:	68f8      	ldr	r0, [r7, #12]
 8018c2a:	f000 f81e 	bl	8018c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	2220      	movs	r2, #32
 8018c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	2200      	movs	r2, #0
 8018c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8018c3e:	2303      	movs	r3, #3
 8018c40:	e00f      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	69da      	ldr	r2, [r3, #28]
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	4013      	ands	r3, r2
 8018c4c:	68ba      	ldr	r2, [r7, #8]
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	bf0c      	ite	eq
 8018c52:	2301      	moveq	r3, #1
 8018c54:	2300      	movne	r3, #0
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	461a      	mov	r2, r3
 8018c5a:	79fb      	ldrb	r3, [r7, #7]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d0a6      	beq.n	8018bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018c60:	2300      	movs	r3, #0
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	3710      	adds	r7, #16
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}

08018c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018c6a:	b480      	push	{r7}
 8018c6c:	b095      	sub	sp, #84	; 0x54
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c7a:	e853 3f00 	ldrex	r3, [r3]
 8018c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c90:	643b      	str	r3, [r7, #64]	; 0x40
 8018c92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018c98:	e841 2300 	strex	r3, r2, [r1]
 8018c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d1e6      	bne.n	8018c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	3308      	adds	r3, #8
 8018caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018cac:	6a3b      	ldr	r3, [r7, #32]
 8018cae:	e853 3f00 	ldrex	r3, [r3]
 8018cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8018cb4:	69fb      	ldr	r3, [r7, #28]
 8018cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018cba:	f023 0301 	bic.w	r3, r3, #1
 8018cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	3308      	adds	r3, #8
 8018cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cd0:	e841 2300 	strex	r3, r2, [r1]
 8018cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d1e3      	bne.n	8018ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ce0:	2b01      	cmp	r3, #1
 8018ce2:	d118      	bne.n	8018d16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	e853 3f00 	ldrex	r3, [r3]
 8018cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	f023 0310 	bic.w	r3, r3, #16
 8018cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	461a      	mov	r2, r3
 8018d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d02:	61bb      	str	r3, [r7, #24]
 8018d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d06:	6979      	ldr	r1, [r7, #20]
 8018d08:	69ba      	ldr	r2, [r7, #24]
 8018d0a:	e841 2300 	strex	r3, r2, [r1]
 8018d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8018d10:	693b      	ldr	r3, [r7, #16]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d1e6      	bne.n	8018ce4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	2220      	movs	r2, #32
 8018d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2200      	movs	r2, #0
 8018d22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2200      	movs	r2, #0
 8018d28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8018d2a:	bf00      	nop
 8018d2c:	3754      	adds	r7, #84	; 0x54
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018d36:	b480      	push	{r7}
 8018d38:	b085      	sub	sp, #20
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d101      	bne.n	8018d4c <HAL_UARTEx_DisableFifoMode+0x16>
 8018d48:	2302      	movs	r3, #2
 8018d4a:	e027      	b.n	8018d9c <HAL_UARTEx_DisableFifoMode+0x66>
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2201      	movs	r2, #1
 8018d50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2224      	movs	r2, #36	; 0x24
 8018d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	f022 0201 	bic.w	r2, r2, #1
 8018d72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018d7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2200      	movs	r2, #0
 8018d80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	68fa      	ldr	r2, [r7, #12]
 8018d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2220      	movs	r2, #32
 8018d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	2200      	movs	r2, #0
 8018d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018d9a:	2300      	movs	r3, #0
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3714      	adds	r7, #20
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr

08018da8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
 8018db0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018db8:	2b01      	cmp	r3, #1
 8018dba:	d101      	bne.n	8018dc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018dbc:	2302      	movs	r3, #2
 8018dbe:	e02d      	b.n	8018e1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2201      	movs	r2, #1
 8018dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2224      	movs	r2, #36	; 0x24
 8018dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	681a      	ldr	r2, [r3, #0]
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	f022 0201 	bic.w	r2, r2, #1
 8018de6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	689b      	ldr	r3, [r3, #8]
 8018dee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	683a      	ldr	r2, [r7, #0]
 8018df8:	430a      	orrs	r2, r1
 8018dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f000 f84f 	bl	8018ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	68fa      	ldr	r2, [r7, #12]
 8018e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2220      	movs	r2, #32
 8018e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2200      	movs	r2, #0
 8018e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018e1a:	2300      	movs	r3, #0
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3710      	adds	r7, #16
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}

08018e24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d101      	bne.n	8018e3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018e38:	2302      	movs	r3, #2
 8018e3a:	e02d      	b.n	8018e98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2201      	movs	r2, #1
 8018e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2224      	movs	r2, #36	; 0x24
 8018e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	681a      	ldr	r2, [r3, #0]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f022 0201 	bic.w	r2, r2, #1
 8018e62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	689b      	ldr	r3, [r3, #8]
 8018e6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	683a      	ldr	r2, [r7, #0]
 8018e74:	430a      	orrs	r2, r1
 8018e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 f811 	bl	8018ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	68fa      	ldr	r2, [r7, #12]
 8018e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2220      	movs	r2, #32
 8018e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2200      	movs	r2, #0
 8018e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018e96:	2300      	movs	r3, #0
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3710      	adds	r7, #16
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}

08018ea0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	b085      	sub	sp, #20
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d108      	bne.n	8018ec2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	2201      	movs	r2, #1
 8018eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2201      	movs	r2, #1
 8018ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018ec0:	e031      	b.n	8018f26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018ec2:	2308      	movs	r3, #8
 8018ec4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018ec6:	2308      	movs	r3, #8
 8018ec8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	689b      	ldr	r3, [r3, #8]
 8018ed0:	0e5b      	lsrs	r3, r3, #25
 8018ed2:	b2db      	uxtb	r3, r3
 8018ed4:	f003 0307 	and.w	r3, r3, #7
 8018ed8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	689b      	ldr	r3, [r3, #8]
 8018ee0:	0f5b      	lsrs	r3, r3, #29
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	f003 0307 	and.w	r3, r3, #7
 8018ee8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018eea:	7bbb      	ldrb	r3, [r7, #14]
 8018eec:	7b3a      	ldrb	r2, [r7, #12]
 8018eee:	4911      	ldr	r1, [pc, #68]	; (8018f34 <UARTEx_SetNbDataToProcess+0x94>)
 8018ef0:	5c8a      	ldrb	r2, [r1, r2]
 8018ef2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018ef6:	7b3a      	ldrb	r2, [r7, #12]
 8018ef8:	490f      	ldr	r1, [pc, #60]	; (8018f38 <UARTEx_SetNbDataToProcess+0x98>)
 8018efa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f00:	b29a      	uxth	r2, r3
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018f08:	7bfb      	ldrb	r3, [r7, #15]
 8018f0a:	7b7a      	ldrb	r2, [r7, #13]
 8018f0c:	4909      	ldr	r1, [pc, #36]	; (8018f34 <UARTEx_SetNbDataToProcess+0x94>)
 8018f0e:	5c8a      	ldrb	r2, [r1, r2]
 8018f10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018f14:	7b7a      	ldrb	r2, [r7, #13]
 8018f16:	4908      	ldr	r1, [pc, #32]	; (8018f38 <UARTEx_SetNbDataToProcess+0x98>)
 8018f18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018f1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f1e:	b29a      	uxth	r2, r3
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018f26:	bf00      	nop
 8018f28:	3714      	adds	r7, #20
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f30:	4770      	bx	lr
 8018f32:	bf00      	nop
 8018f34:	0801a530 	.word	0x0801a530
 8018f38:	0801a538 	.word	0x0801a538

08018f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018f3c:	b480      	push	{r7}
 8018f3e:	b085      	sub	sp, #20
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f44:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8018f48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018f50:	b29a      	uxth	r2, r3
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	43db      	mvns	r3, r3
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	4013      	ands	r3, r2
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8018f64:	2300      	movs	r3, #0
}
 8018f66:	4618      	mov	r0, r3
 8018f68:	3714      	adds	r7, #20
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f70:	4770      	bx	lr

08018f72 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018f72:	b084      	sub	sp, #16
 8018f74:	b480      	push	{r7}
 8018f76:	b083      	sub	sp, #12
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
 8018f7c:	f107 0014 	add.w	r0, r7, #20
 8018f80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2201      	movs	r2, #1
 8018f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2200      	movs	r2, #0
 8018f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2200      	movs	r2, #0
 8018f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8018fa4:	2300      	movs	r3, #0
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	370c      	adds	r7, #12
 8018faa:	46bd      	mov	sp, r7
 8018fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb0:	b004      	add	sp, #16
 8018fb2:	4770      	bx	lr

08018fb4 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 8018fb8:	f000 f808 	bl	8018fcc <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8018fbc:	bf00      	nop
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 8018fc4:	f000 f866 	bl	8019094 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8018fc8:	bf00      	nop
 8018fca:	bd80      	pop	{r7, pc}

08018fcc <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8018fd2:	2000      	movs	r0, #0
 8018fd4:	f7fb ff8c 	bl	8014ef0 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 8018fd8:	482a      	ldr	r0, [pc, #168]	; (8019084 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 8018fda:	f000 f9d1 	bl	8019380 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018fde:	2300      	movs	r3, #0
 8018fe0:	71fb      	strb	r3, [r7, #7]
 8018fe2:	e007      	b.n	8018ff4 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8018fe4:	79fb      	ldrb	r3, [r7, #7]
 8018fe6:	2101      	movs	r1, #1
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7e8 fa99 	bl	8001520 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018fee:	79fb      	ldrb	r3, [r7, #7]
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	71fb      	strb	r3, [r7, #7]
 8018ff4:	79fb      	ldrb	r3, [r7, #7]
 8018ff6:	2b02      	cmp	r3, #2
 8018ff8:	d9f4      	bls.n	8018fe4 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	71fb      	strb	r3, [r7, #7]
 8018ffe:	e039      	b.n	8019074 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8019000:	79fb      	ldrb	r3, [r7, #7]
 8019002:	2100      	movs	r1, #0
 8019004:	4618      	mov	r0, r3
 8019006:	f7e8 fa8b 	bl	8001520 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 801900a:	79fb      	ldrb	r3, [r7, #7]
 801900c:	4618      	mov	r0, r3
 801900e:	f7e8 f999 	bl	8001344 <VL53L1A2_RANGING_SENSOR_Init>
 8019012:	4603      	mov	r3, r0
 8019014:	4a1c      	ldr	r2, [pc, #112]	; (8019088 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8019016:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8019018:	4b1b      	ldr	r3, [pc, #108]	; (8019088 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	bf0c      	ite	eq
 8019020:	2301      	moveq	r3, #1
 8019022:	2300      	movne	r3, #0
 8019024:	b2da      	uxtb	r2, r3
 8019026:	79fb      	ldrb	r3, [r7, #7]
 8019028:	4611      	mov	r1, r2
 801902a:	4a18      	ldr	r2, [pc, #96]	; (801908c <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801902c:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 801902e:	79fb      	ldrb	r3, [r7, #7]
 8019030:	4a16      	ldr	r2, [pc, #88]	; (801908c <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8019032:	5cd3      	ldrb	r3, [r2, r3]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d019      	beq.n	801906c <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 8019038:	79fb      	ldrb	r3, [r7, #7]
 801903a:	3301      	adds	r3, #1
 801903c:	b29b      	uxth	r3, r3
 801903e:	3329      	adds	r3, #41	; 0x29
 8019040:	b29b      	uxth	r3, r3
 8019042:	005b      	lsls	r3, r3, #1
 8019044:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8019046:	79fb      	ldrb	r3, [r7, #7]
 8019048:	88ba      	ldrh	r2, [r7, #4]
 801904a:	4611      	mov	r1, r2
 801904c:	4618      	mov	r0, r3
 801904e:	f7e8 fa3f 	bl	80014d0 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 8019052:	79fb      	ldrb	r3, [r7, #7]
 8019054:	463a      	mov	r2, r7
 8019056:	4611      	mov	r1, r2
 8019058:	4618      	mov	r0, r3
 801905a:	f7e8 f999 	bl	8001390 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 801905e:	79fb      	ldrb	r3, [r7, #7]
 8019060:	683a      	ldr	r2, [r7, #0]
 8019062:	4619      	mov	r1, r3
 8019064:	480a      	ldr	r0, [pc, #40]	; (8019090 <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 8019066:	f000 f8ef 	bl	8019248 <iprintf>
 801906a:	e000      	b.n	801906e <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 801906c:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801906e:	79fb      	ldrb	r3, [r7, #7]
 8019070:	3301      	adds	r3, #1
 8019072:	71fb      	strb	r3, [r7, #7]
 8019074:	79fb      	ldrb	r3, [r7, #7]
 8019076:	2b02      	cmp	r3, #2
 8019078:	d9c2      	bls.n	8019000 <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 801907a:	bf00      	nop
 801907c:	bf00      	nop
 801907e:	3708      	adds	r7, #8
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	0801a3d8 	.word	0x0801a3d8
 8019088:	20008654 	.word	0x20008654
 801908c:	20008658 	.word	0x20008658
 8019090:	0801a408 	.word	0x0801a408

08019094 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 801909a:	4b2d      	ldr	r3, [pc, #180]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 801909c:	2202      	movs	r2, #2
 801909e:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 80190a0:	4b2b      	ldr	r3, [pc, #172]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 80190a2:	221e      	movs	r2, #30
 80190a4:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 80190a6:	4b2a      	ldr	r3, [pc, #168]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 80190a8:	2200      	movs	r2, #0
 80190aa:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 80190ac:	4b28      	ldr	r3, [pc, #160]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 80190ae:	2200      	movs	r2, #0
 80190b0:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 80190b2:	4b27      	ldr	r3, [pc, #156]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 80190b4:	2200      	movs	r2, #0
 80190b6:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80190b8:	2300      	movs	r3, #0
 80190ba:	71fb      	strb	r3, [r7, #7]
 80190bc:	e01d      	b.n	80190fa <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 80190be:	79fb      	ldrb	r3, [r7, #7]
 80190c0:	4a24      	ldr	r2, [pc, #144]	; (8019154 <MX_53L1A2_MultiSensorRanging_Process+0xc0>)
 80190c2:	5cd3      	ldrb	r3, [r2, r3]
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	d114      	bne.n	80190f2 <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 80190c8:	79fb      	ldrb	r3, [r7, #7]
 80190ca:	4921      	ldr	r1, [pc, #132]	; (8019150 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7e8 f987 	bl	80013e0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 80190d2:	79fb      	ldrb	r3, [r7, #7]
 80190d4:	2101      	movs	r1, #1
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7e8 f9d2 	bl	8001480 <VL53L1A2_RANGING_SENSOR_Start>
 80190dc:	4603      	mov	r3, r0
 80190de:	4a1e      	ldr	r2, [pc, #120]	; (8019158 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 80190e0:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 80190e2:	4b1d      	ldr	r3, [pc, #116]	; (8019158 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d004      	beq.n	80190f4 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 80190ea:	481c      	ldr	r0, [pc, #112]	; (801915c <MX_53L1A2_MultiSensorRanging_Process+0xc8>)
 80190ec:	f000 f948 	bl	8019380 <puts>
      while(1);
 80190f0:	e7fe      	b.n	80190f0 <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 80190f2:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 80190f4:	79fb      	ldrb	r3, [r7, #7]
 80190f6:	3301      	adds	r3, #1
 80190f8:	71fb      	strb	r3, [r7, #7]
 80190fa:	79fb      	ldrb	r3, [r7, #7]
 80190fc:	2b02      	cmp	r3, #2
 80190fe:	d9de      	bls.n	80190be <MX_53L1A2_MultiSensorRanging_Process+0x2a>
  }

  while (1)
  {
    /* polling mode */
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019100:	2300      	movs	r3, #0
 8019102:	71fb      	strb	r3, [r7, #7]
 8019104:	e01c      	b.n	8019140 <MX_53L1A2_MultiSensorRanging_Process+0xac>
    {
      status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 8019106:	79fb      	ldrb	r3, [r7, #7]
 8019108:	4915      	ldr	r1, [pc, #84]	; (8019160 <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 801910a:	4618      	mov	r0, r3
 801910c:	f7e8 f990 	bl	8001430 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8019110:	4603      	mov	r3, r0
 8019112:	4a11      	ldr	r2, [pc, #68]	; (8019158 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019114:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 8019116:	4b10      	ldr	r3, [pc, #64]	; (8019158 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d10d      	bne.n	801913a <MX_53L1A2_MultiSensorRanging_Process+0xa6>
      {
        printf("%s\t - ", TofDevStr[i]);
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	4a10      	ldr	r2, [pc, #64]	; (8019164 <MX_53L1A2_MultiSensorRanging_Process+0xd0>)
 8019122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019126:	4619      	mov	r1, r3
 8019128:	480f      	ldr	r0, [pc, #60]	; (8019168 <MX_53L1A2_MultiSensorRanging_Process+0xd4>)
 801912a:	f000 f88d 	bl	8019248 <iprintf>
        print_result(&Result);
 801912e:	480c      	ldr	r0, [pc, #48]	; (8019160 <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 8019130:	f000 f81c 	bl	801916c <print_result>
        HAL_Delay(POLLING_PERIOD);
 8019134:	20fa      	movs	r0, #250	; 0xfa
 8019136:	f7fc f84b 	bl	80151d0 <HAL_Delay>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801913a:	79fb      	ldrb	r3, [r7, #7]
 801913c:	3301      	adds	r3, #1
 801913e:	71fb      	strb	r3, [r7, #7]
 8019140:	79fb      	ldrb	r3, [r7, #7]
 8019142:	2b02      	cmp	r3, #2
 8019144:	d9df      	bls.n	8019106 <MX_53L1A2_MultiSensorRanging_Process+0x72>
      }
    }
    printf ("\n");
 8019146:	200a      	movs	r0, #10
 8019148:	f000 f896 	bl	8019278 <putchar>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801914c:	e7d8      	b.n	8019100 <MX_53L1A2_MultiSensorRanging_Process+0x6c>
 801914e:	bf00      	nop
 8019150:	2000865c 	.word	0x2000865c
 8019154:	20008658 	.word	0x20008658
 8019158:	20008654 	.word	0x20008654
 801915c:	0801a424 	.word	0x0801a424
 8019160:	20008670 	.word	0x20008670
 8019164:	2000007c 	.word	0x2000007c
 8019168:	0801a44c 	.word	0x0801a44c

0801916c <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b084      	sub	sp, #16
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8019174:	2300      	movs	r3, #0
 8019176:	73fb      	strb	r3, [r7, #15]
 8019178:	e01a      	b.n	80191b0 <print_result+0x44>
  {
    printf("Status = %2ld, Distance = %5ld mm",
      (long)Result->ZoneResult[i].Status[0],
 801917a:	7bfa      	ldrb	r2, [r7, #15]
 801917c:	6879      	ldr	r1, [r7, #4]
 801917e:	4613      	mov	r3, r2
 8019180:	011b      	lsls	r3, r3, #4
 8019182:	4413      	add	r3, r2
 8019184:	009b      	lsls	r3, r3, #2
 8019186:	440b      	add	r3, r1
 8019188:	3318      	adds	r3, #24
 801918a:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 801918c:	4618      	mov	r0, r3
      (long)Result->ZoneResult[i].Distance[0]);
 801918e:	7bfa      	ldrb	r2, [r7, #15]
 8019190:	6879      	ldr	r1, [r7, #4]
 8019192:	4613      	mov	r3, r2
 8019194:	011b      	lsls	r3, r3, #4
 8019196:	4413      	add	r3, r2
 8019198:	009b      	lsls	r3, r3, #2
 801919a:	440b      	add	r3, r1
 801919c:	3308      	adds	r3, #8
 801919e:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 80191a0:	461a      	mov	r2, r3
 80191a2:	4601      	mov	r1, r0
 80191a4:	4807      	ldr	r0, [pc, #28]	; (80191c4 <print_result+0x58>)
 80191a6:	f000 f84f 	bl	8019248 <iprintf>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80191aa:	7bfb      	ldrb	r3, [r7, #15]
 80191ac:	3301      	adds	r3, #1
 80191ae:	73fb      	strb	r3, [r7, #15]
 80191b0:	7bfb      	ldrb	r3, [r7, #15]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d0e1      	beq.n	801917a <print_result+0xe>
  }
  printf ("\n");
 80191b6:	200a      	movs	r0, #10
 80191b8:	f000 f85e 	bl	8019278 <putchar>
}
 80191bc:	bf00      	nop
 80191be:	3710      	adds	r7, #16
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	0801a454 	.word	0x0801a454

080191c8 <__errno>:
 80191c8:	4b01      	ldr	r3, [pc, #4]	; (80191d0 <__errno+0x8>)
 80191ca:	6818      	ldr	r0, [r3, #0]
 80191cc:	4770      	bx	lr
 80191ce:	bf00      	nop
 80191d0:	20000088 	.word	0x20000088

080191d4 <__libc_init_array>:
 80191d4:	b570      	push	{r4, r5, r6, lr}
 80191d6:	4d0d      	ldr	r5, [pc, #52]	; (801920c <__libc_init_array+0x38>)
 80191d8:	4c0d      	ldr	r4, [pc, #52]	; (8019210 <__libc_init_array+0x3c>)
 80191da:	1b64      	subs	r4, r4, r5
 80191dc:	10a4      	asrs	r4, r4, #2
 80191de:	2600      	movs	r6, #0
 80191e0:	42a6      	cmp	r6, r4
 80191e2:	d109      	bne.n	80191f8 <__libc_init_array+0x24>
 80191e4:	4d0b      	ldr	r5, [pc, #44]	; (8019214 <__libc_init_array+0x40>)
 80191e6:	4c0c      	ldr	r4, [pc, #48]	; (8019218 <__libc_init_array+0x44>)
 80191e8:	f001 f8a4 	bl	801a334 <_init>
 80191ec:	1b64      	subs	r4, r4, r5
 80191ee:	10a4      	asrs	r4, r4, #2
 80191f0:	2600      	movs	r6, #0
 80191f2:	42a6      	cmp	r6, r4
 80191f4:	d105      	bne.n	8019202 <__libc_init_array+0x2e>
 80191f6:	bd70      	pop	{r4, r5, r6, pc}
 80191f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80191fc:	4798      	blx	r3
 80191fe:	3601      	adds	r6, #1
 8019200:	e7ee      	b.n	80191e0 <__libc_init_array+0xc>
 8019202:	f855 3b04 	ldr.w	r3, [r5], #4
 8019206:	4798      	blx	r3
 8019208:	3601      	adds	r6, #1
 801920a:	e7f2      	b.n	80191f2 <__libc_init_array+0x1e>
 801920c:	0801a5e0 	.word	0x0801a5e0
 8019210:	0801a5e0 	.word	0x0801a5e0
 8019214:	0801a5e0 	.word	0x0801a5e0
 8019218:	0801a5e4 	.word	0x0801a5e4

0801921c <memcpy>:
 801921c:	440a      	add	r2, r1
 801921e:	4291      	cmp	r1, r2
 8019220:	f100 33ff 	add.w	r3, r0, #4294967295
 8019224:	d100      	bne.n	8019228 <memcpy+0xc>
 8019226:	4770      	bx	lr
 8019228:	b510      	push	{r4, lr}
 801922a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801922e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019232:	4291      	cmp	r1, r2
 8019234:	d1f9      	bne.n	801922a <memcpy+0xe>
 8019236:	bd10      	pop	{r4, pc}

08019238 <memset>:
 8019238:	4402      	add	r2, r0
 801923a:	4603      	mov	r3, r0
 801923c:	4293      	cmp	r3, r2
 801923e:	d100      	bne.n	8019242 <memset+0xa>
 8019240:	4770      	bx	lr
 8019242:	f803 1b01 	strb.w	r1, [r3], #1
 8019246:	e7f9      	b.n	801923c <memset+0x4>

08019248 <iprintf>:
 8019248:	b40f      	push	{r0, r1, r2, r3}
 801924a:	4b0a      	ldr	r3, [pc, #40]	; (8019274 <iprintf+0x2c>)
 801924c:	b513      	push	{r0, r1, r4, lr}
 801924e:	681c      	ldr	r4, [r3, #0]
 8019250:	b124      	cbz	r4, 801925c <iprintf+0x14>
 8019252:	69a3      	ldr	r3, [r4, #24]
 8019254:	b913      	cbnz	r3, 801925c <iprintf+0x14>
 8019256:	4620      	mov	r0, r4
 8019258:	f000 fa88 	bl	801976c <__sinit>
 801925c:	ab05      	add	r3, sp, #20
 801925e:	9a04      	ldr	r2, [sp, #16]
 8019260:	68a1      	ldr	r1, [r4, #8]
 8019262:	9301      	str	r3, [sp, #4]
 8019264:	4620      	mov	r0, r4
 8019266:	f000 fc91 	bl	8019b8c <_vfiprintf_r>
 801926a:	b002      	add	sp, #8
 801926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019270:	b004      	add	sp, #16
 8019272:	4770      	bx	lr
 8019274:	20000088 	.word	0x20000088

08019278 <putchar>:
 8019278:	4b09      	ldr	r3, [pc, #36]	; (80192a0 <putchar+0x28>)
 801927a:	b513      	push	{r0, r1, r4, lr}
 801927c:	681c      	ldr	r4, [r3, #0]
 801927e:	4601      	mov	r1, r0
 8019280:	b134      	cbz	r4, 8019290 <putchar+0x18>
 8019282:	69a3      	ldr	r3, [r4, #24]
 8019284:	b923      	cbnz	r3, 8019290 <putchar+0x18>
 8019286:	9001      	str	r0, [sp, #4]
 8019288:	4620      	mov	r0, r4
 801928a:	f000 fa6f 	bl	801976c <__sinit>
 801928e:	9901      	ldr	r1, [sp, #4]
 8019290:	68a2      	ldr	r2, [r4, #8]
 8019292:	4620      	mov	r0, r4
 8019294:	b002      	add	sp, #8
 8019296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801929a:	f000 bf3b 	b.w	801a114 <_putc_r>
 801929e:	bf00      	nop
 80192a0:	20000088 	.word	0x20000088

080192a4 <_puts_r>:
 80192a4:	b570      	push	{r4, r5, r6, lr}
 80192a6:	460e      	mov	r6, r1
 80192a8:	4605      	mov	r5, r0
 80192aa:	b118      	cbz	r0, 80192b4 <_puts_r+0x10>
 80192ac:	6983      	ldr	r3, [r0, #24]
 80192ae:	b90b      	cbnz	r3, 80192b4 <_puts_r+0x10>
 80192b0:	f000 fa5c 	bl	801976c <__sinit>
 80192b4:	69ab      	ldr	r3, [r5, #24]
 80192b6:	68ac      	ldr	r4, [r5, #8]
 80192b8:	b913      	cbnz	r3, 80192c0 <_puts_r+0x1c>
 80192ba:	4628      	mov	r0, r5
 80192bc:	f000 fa56 	bl	801976c <__sinit>
 80192c0:	4b2c      	ldr	r3, [pc, #176]	; (8019374 <_puts_r+0xd0>)
 80192c2:	429c      	cmp	r4, r3
 80192c4:	d120      	bne.n	8019308 <_puts_r+0x64>
 80192c6:	686c      	ldr	r4, [r5, #4]
 80192c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80192ca:	07db      	lsls	r3, r3, #31
 80192cc:	d405      	bmi.n	80192da <_puts_r+0x36>
 80192ce:	89a3      	ldrh	r3, [r4, #12]
 80192d0:	0598      	lsls	r0, r3, #22
 80192d2:	d402      	bmi.n	80192da <_puts_r+0x36>
 80192d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192d6:	f000 fae7 	bl	80198a8 <__retarget_lock_acquire_recursive>
 80192da:	89a3      	ldrh	r3, [r4, #12]
 80192dc:	0719      	lsls	r1, r3, #28
 80192de:	d51d      	bpl.n	801931c <_puts_r+0x78>
 80192e0:	6923      	ldr	r3, [r4, #16]
 80192e2:	b1db      	cbz	r3, 801931c <_puts_r+0x78>
 80192e4:	3e01      	subs	r6, #1
 80192e6:	68a3      	ldr	r3, [r4, #8]
 80192e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80192ec:	3b01      	subs	r3, #1
 80192ee:	60a3      	str	r3, [r4, #8]
 80192f0:	bb39      	cbnz	r1, 8019342 <_puts_r+0x9e>
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	da38      	bge.n	8019368 <_puts_r+0xc4>
 80192f6:	4622      	mov	r2, r4
 80192f8:	210a      	movs	r1, #10
 80192fa:	4628      	mov	r0, r5
 80192fc:	f000 f85c 	bl	80193b8 <__swbuf_r>
 8019300:	3001      	adds	r0, #1
 8019302:	d011      	beq.n	8019328 <_puts_r+0x84>
 8019304:	250a      	movs	r5, #10
 8019306:	e011      	b.n	801932c <_puts_r+0x88>
 8019308:	4b1b      	ldr	r3, [pc, #108]	; (8019378 <_puts_r+0xd4>)
 801930a:	429c      	cmp	r4, r3
 801930c:	d101      	bne.n	8019312 <_puts_r+0x6e>
 801930e:	68ac      	ldr	r4, [r5, #8]
 8019310:	e7da      	b.n	80192c8 <_puts_r+0x24>
 8019312:	4b1a      	ldr	r3, [pc, #104]	; (801937c <_puts_r+0xd8>)
 8019314:	429c      	cmp	r4, r3
 8019316:	bf08      	it	eq
 8019318:	68ec      	ldreq	r4, [r5, #12]
 801931a:	e7d5      	b.n	80192c8 <_puts_r+0x24>
 801931c:	4621      	mov	r1, r4
 801931e:	4628      	mov	r0, r5
 8019320:	f000 f89c 	bl	801945c <__swsetup_r>
 8019324:	2800      	cmp	r0, #0
 8019326:	d0dd      	beq.n	80192e4 <_puts_r+0x40>
 8019328:	f04f 35ff 	mov.w	r5, #4294967295
 801932c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801932e:	07da      	lsls	r2, r3, #31
 8019330:	d405      	bmi.n	801933e <_puts_r+0x9a>
 8019332:	89a3      	ldrh	r3, [r4, #12]
 8019334:	059b      	lsls	r3, r3, #22
 8019336:	d402      	bmi.n	801933e <_puts_r+0x9a>
 8019338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801933a:	f000 fab6 	bl	80198aa <__retarget_lock_release_recursive>
 801933e:	4628      	mov	r0, r5
 8019340:	bd70      	pop	{r4, r5, r6, pc}
 8019342:	2b00      	cmp	r3, #0
 8019344:	da04      	bge.n	8019350 <_puts_r+0xac>
 8019346:	69a2      	ldr	r2, [r4, #24]
 8019348:	429a      	cmp	r2, r3
 801934a:	dc06      	bgt.n	801935a <_puts_r+0xb6>
 801934c:	290a      	cmp	r1, #10
 801934e:	d004      	beq.n	801935a <_puts_r+0xb6>
 8019350:	6823      	ldr	r3, [r4, #0]
 8019352:	1c5a      	adds	r2, r3, #1
 8019354:	6022      	str	r2, [r4, #0]
 8019356:	7019      	strb	r1, [r3, #0]
 8019358:	e7c5      	b.n	80192e6 <_puts_r+0x42>
 801935a:	4622      	mov	r2, r4
 801935c:	4628      	mov	r0, r5
 801935e:	f000 f82b 	bl	80193b8 <__swbuf_r>
 8019362:	3001      	adds	r0, #1
 8019364:	d1bf      	bne.n	80192e6 <_puts_r+0x42>
 8019366:	e7df      	b.n	8019328 <_puts_r+0x84>
 8019368:	6823      	ldr	r3, [r4, #0]
 801936a:	250a      	movs	r5, #10
 801936c:	1c5a      	adds	r2, r3, #1
 801936e:	6022      	str	r2, [r4, #0]
 8019370:	701d      	strb	r5, [r3, #0]
 8019372:	e7db      	b.n	801932c <_puts_r+0x88>
 8019374:	0801a564 	.word	0x0801a564
 8019378:	0801a584 	.word	0x0801a584
 801937c:	0801a544 	.word	0x0801a544

08019380 <puts>:
 8019380:	4b02      	ldr	r3, [pc, #8]	; (801938c <puts+0xc>)
 8019382:	4601      	mov	r1, r0
 8019384:	6818      	ldr	r0, [r3, #0]
 8019386:	f7ff bf8d 	b.w	80192a4 <_puts_r>
 801938a:	bf00      	nop
 801938c:	20000088 	.word	0x20000088

08019390 <strncpy>:
 8019390:	b510      	push	{r4, lr}
 8019392:	3901      	subs	r1, #1
 8019394:	4603      	mov	r3, r0
 8019396:	b132      	cbz	r2, 80193a6 <strncpy+0x16>
 8019398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801939c:	f803 4b01 	strb.w	r4, [r3], #1
 80193a0:	3a01      	subs	r2, #1
 80193a2:	2c00      	cmp	r4, #0
 80193a4:	d1f7      	bne.n	8019396 <strncpy+0x6>
 80193a6:	441a      	add	r2, r3
 80193a8:	2100      	movs	r1, #0
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d100      	bne.n	80193b0 <strncpy+0x20>
 80193ae:	bd10      	pop	{r4, pc}
 80193b0:	f803 1b01 	strb.w	r1, [r3], #1
 80193b4:	e7f9      	b.n	80193aa <strncpy+0x1a>
	...

080193b8 <__swbuf_r>:
 80193b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ba:	460e      	mov	r6, r1
 80193bc:	4614      	mov	r4, r2
 80193be:	4605      	mov	r5, r0
 80193c0:	b118      	cbz	r0, 80193ca <__swbuf_r+0x12>
 80193c2:	6983      	ldr	r3, [r0, #24]
 80193c4:	b90b      	cbnz	r3, 80193ca <__swbuf_r+0x12>
 80193c6:	f000 f9d1 	bl	801976c <__sinit>
 80193ca:	4b21      	ldr	r3, [pc, #132]	; (8019450 <__swbuf_r+0x98>)
 80193cc:	429c      	cmp	r4, r3
 80193ce:	d12b      	bne.n	8019428 <__swbuf_r+0x70>
 80193d0:	686c      	ldr	r4, [r5, #4]
 80193d2:	69a3      	ldr	r3, [r4, #24]
 80193d4:	60a3      	str	r3, [r4, #8]
 80193d6:	89a3      	ldrh	r3, [r4, #12]
 80193d8:	071a      	lsls	r2, r3, #28
 80193da:	d52f      	bpl.n	801943c <__swbuf_r+0x84>
 80193dc:	6923      	ldr	r3, [r4, #16]
 80193de:	b36b      	cbz	r3, 801943c <__swbuf_r+0x84>
 80193e0:	6923      	ldr	r3, [r4, #16]
 80193e2:	6820      	ldr	r0, [r4, #0]
 80193e4:	1ac0      	subs	r0, r0, r3
 80193e6:	6963      	ldr	r3, [r4, #20]
 80193e8:	b2f6      	uxtb	r6, r6
 80193ea:	4283      	cmp	r3, r0
 80193ec:	4637      	mov	r7, r6
 80193ee:	dc04      	bgt.n	80193fa <__swbuf_r+0x42>
 80193f0:	4621      	mov	r1, r4
 80193f2:	4628      	mov	r0, r5
 80193f4:	f000 f926 	bl	8019644 <_fflush_r>
 80193f8:	bb30      	cbnz	r0, 8019448 <__swbuf_r+0x90>
 80193fa:	68a3      	ldr	r3, [r4, #8]
 80193fc:	3b01      	subs	r3, #1
 80193fe:	60a3      	str	r3, [r4, #8]
 8019400:	6823      	ldr	r3, [r4, #0]
 8019402:	1c5a      	adds	r2, r3, #1
 8019404:	6022      	str	r2, [r4, #0]
 8019406:	701e      	strb	r6, [r3, #0]
 8019408:	6963      	ldr	r3, [r4, #20]
 801940a:	3001      	adds	r0, #1
 801940c:	4283      	cmp	r3, r0
 801940e:	d004      	beq.n	801941a <__swbuf_r+0x62>
 8019410:	89a3      	ldrh	r3, [r4, #12]
 8019412:	07db      	lsls	r3, r3, #31
 8019414:	d506      	bpl.n	8019424 <__swbuf_r+0x6c>
 8019416:	2e0a      	cmp	r6, #10
 8019418:	d104      	bne.n	8019424 <__swbuf_r+0x6c>
 801941a:	4621      	mov	r1, r4
 801941c:	4628      	mov	r0, r5
 801941e:	f000 f911 	bl	8019644 <_fflush_r>
 8019422:	b988      	cbnz	r0, 8019448 <__swbuf_r+0x90>
 8019424:	4638      	mov	r0, r7
 8019426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019428:	4b0a      	ldr	r3, [pc, #40]	; (8019454 <__swbuf_r+0x9c>)
 801942a:	429c      	cmp	r4, r3
 801942c:	d101      	bne.n	8019432 <__swbuf_r+0x7a>
 801942e:	68ac      	ldr	r4, [r5, #8]
 8019430:	e7cf      	b.n	80193d2 <__swbuf_r+0x1a>
 8019432:	4b09      	ldr	r3, [pc, #36]	; (8019458 <__swbuf_r+0xa0>)
 8019434:	429c      	cmp	r4, r3
 8019436:	bf08      	it	eq
 8019438:	68ec      	ldreq	r4, [r5, #12]
 801943a:	e7ca      	b.n	80193d2 <__swbuf_r+0x1a>
 801943c:	4621      	mov	r1, r4
 801943e:	4628      	mov	r0, r5
 8019440:	f000 f80c 	bl	801945c <__swsetup_r>
 8019444:	2800      	cmp	r0, #0
 8019446:	d0cb      	beq.n	80193e0 <__swbuf_r+0x28>
 8019448:	f04f 37ff 	mov.w	r7, #4294967295
 801944c:	e7ea      	b.n	8019424 <__swbuf_r+0x6c>
 801944e:	bf00      	nop
 8019450:	0801a564 	.word	0x0801a564
 8019454:	0801a584 	.word	0x0801a584
 8019458:	0801a544 	.word	0x0801a544

0801945c <__swsetup_r>:
 801945c:	4b32      	ldr	r3, [pc, #200]	; (8019528 <__swsetup_r+0xcc>)
 801945e:	b570      	push	{r4, r5, r6, lr}
 8019460:	681d      	ldr	r5, [r3, #0]
 8019462:	4606      	mov	r6, r0
 8019464:	460c      	mov	r4, r1
 8019466:	b125      	cbz	r5, 8019472 <__swsetup_r+0x16>
 8019468:	69ab      	ldr	r3, [r5, #24]
 801946a:	b913      	cbnz	r3, 8019472 <__swsetup_r+0x16>
 801946c:	4628      	mov	r0, r5
 801946e:	f000 f97d 	bl	801976c <__sinit>
 8019472:	4b2e      	ldr	r3, [pc, #184]	; (801952c <__swsetup_r+0xd0>)
 8019474:	429c      	cmp	r4, r3
 8019476:	d10f      	bne.n	8019498 <__swsetup_r+0x3c>
 8019478:	686c      	ldr	r4, [r5, #4]
 801947a:	89a3      	ldrh	r3, [r4, #12]
 801947c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019480:	0719      	lsls	r1, r3, #28
 8019482:	d42c      	bmi.n	80194de <__swsetup_r+0x82>
 8019484:	06dd      	lsls	r5, r3, #27
 8019486:	d411      	bmi.n	80194ac <__swsetup_r+0x50>
 8019488:	2309      	movs	r3, #9
 801948a:	6033      	str	r3, [r6, #0]
 801948c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019490:	81a3      	strh	r3, [r4, #12]
 8019492:	f04f 30ff 	mov.w	r0, #4294967295
 8019496:	e03e      	b.n	8019516 <__swsetup_r+0xba>
 8019498:	4b25      	ldr	r3, [pc, #148]	; (8019530 <__swsetup_r+0xd4>)
 801949a:	429c      	cmp	r4, r3
 801949c:	d101      	bne.n	80194a2 <__swsetup_r+0x46>
 801949e:	68ac      	ldr	r4, [r5, #8]
 80194a0:	e7eb      	b.n	801947a <__swsetup_r+0x1e>
 80194a2:	4b24      	ldr	r3, [pc, #144]	; (8019534 <__swsetup_r+0xd8>)
 80194a4:	429c      	cmp	r4, r3
 80194a6:	bf08      	it	eq
 80194a8:	68ec      	ldreq	r4, [r5, #12]
 80194aa:	e7e6      	b.n	801947a <__swsetup_r+0x1e>
 80194ac:	0758      	lsls	r0, r3, #29
 80194ae:	d512      	bpl.n	80194d6 <__swsetup_r+0x7a>
 80194b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194b2:	b141      	cbz	r1, 80194c6 <__swsetup_r+0x6a>
 80194b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194b8:	4299      	cmp	r1, r3
 80194ba:	d002      	beq.n	80194c2 <__swsetup_r+0x66>
 80194bc:	4630      	mov	r0, r6
 80194be:	f000 fa5b 	bl	8019978 <_free_r>
 80194c2:	2300      	movs	r3, #0
 80194c4:	6363      	str	r3, [r4, #52]	; 0x34
 80194c6:	89a3      	ldrh	r3, [r4, #12]
 80194c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80194cc:	81a3      	strh	r3, [r4, #12]
 80194ce:	2300      	movs	r3, #0
 80194d0:	6063      	str	r3, [r4, #4]
 80194d2:	6923      	ldr	r3, [r4, #16]
 80194d4:	6023      	str	r3, [r4, #0]
 80194d6:	89a3      	ldrh	r3, [r4, #12]
 80194d8:	f043 0308 	orr.w	r3, r3, #8
 80194dc:	81a3      	strh	r3, [r4, #12]
 80194de:	6923      	ldr	r3, [r4, #16]
 80194e0:	b94b      	cbnz	r3, 80194f6 <__swsetup_r+0x9a>
 80194e2:	89a3      	ldrh	r3, [r4, #12]
 80194e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80194e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194ec:	d003      	beq.n	80194f6 <__swsetup_r+0x9a>
 80194ee:	4621      	mov	r1, r4
 80194f0:	4630      	mov	r0, r6
 80194f2:	f000 fa01 	bl	80198f8 <__smakebuf_r>
 80194f6:	89a0      	ldrh	r0, [r4, #12]
 80194f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80194fc:	f010 0301 	ands.w	r3, r0, #1
 8019500:	d00a      	beq.n	8019518 <__swsetup_r+0xbc>
 8019502:	2300      	movs	r3, #0
 8019504:	60a3      	str	r3, [r4, #8]
 8019506:	6963      	ldr	r3, [r4, #20]
 8019508:	425b      	negs	r3, r3
 801950a:	61a3      	str	r3, [r4, #24]
 801950c:	6923      	ldr	r3, [r4, #16]
 801950e:	b943      	cbnz	r3, 8019522 <__swsetup_r+0xc6>
 8019510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019514:	d1ba      	bne.n	801948c <__swsetup_r+0x30>
 8019516:	bd70      	pop	{r4, r5, r6, pc}
 8019518:	0781      	lsls	r1, r0, #30
 801951a:	bf58      	it	pl
 801951c:	6963      	ldrpl	r3, [r4, #20]
 801951e:	60a3      	str	r3, [r4, #8]
 8019520:	e7f4      	b.n	801950c <__swsetup_r+0xb0>
 8019522:	2000      	movs	r0, #0
 8019524:	e7f7      	b.n	8019516 <__swsetup_r+0xba>
 8019526:	bf00      	nop
 8019528:	20000088 	.word	0x20000088
 801952c:	0801a564 	.word	0x0801a564
 8019530:	0801a584 	.word	0x0801a584
 8019534:	0801a544 	.word	0x0801a544

08019538 <__sflush_r>:
 8019538:	898a      	ldrh	r2, [r1, #12]
 801953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801953e:	4605      	mov	r5, r0
 8019540:	0710      	lsls	r0, r2, #28
 8019542:	460c      	mov	r4, r1
 8019544:	d458      	bmi.n	80195f8 <__sflush_r+0xc0>
 8019546:	684b      	ldr	r3, [r1, #4]
 8019548:	2b00      	cmp	r3, #0
 801954a:	dc05      	bgt.n	8019558 <__sflush_r+0x20>
 801954c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801954e:	2b00      	cmp	r3, #0
 8019550:	dc02      	bgt.n	8019558 <__sflush_r+0x20>
 8019552:	2000      	movs	r0, #0
 8019554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801955a:	2e00      	cmp	r6, #0
 801955c:	d0f9      	beq.n	8019552 <__sflush_r+0x1a>
 801955e:	2300      	movs	r3, #0
 8019560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019564:	682f      	ldr	r7, [r5, #0]
 8019566:	602b      	str	r3, [r5, #0]
 8019568:	d032      	beq.n	80195d0 <__sflush_r+0x98>
 801956a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801956c:	89a3      	ldrh	r3, [r4, #12]
 801956e:	075a      	lsls	r2, r3, #29
 8019570:	d505      	bpl.n	801957e <__sflush_r+0x46>
 8019572:	6863      	ldr	r3, [r4, #4]
 8019574:	1ac0      	subs	r0, r0, r3
 8019576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019578:	b10b      	cbz	r3, 801957e <__sflush_r+0x46>
 801957a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801957c:	1ac0      	subs	r0, r0, r3
 801957e:	2300      	movs	r3, #0
 8019580:	4602      	mov	r2, r0
 8019582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019584:	6a21      	ldr	r1, [r4, #32]
 8019586:	4628      	mov	r0, r5
 8019588:	47b0      	blx	r6
 801958a:	1c43      	adds	r3, r0, #1
 801958c:	89a3      	ldrh	r3, [r4, #12]
 801958e:	d106      	bne.n	801959e <__sflush_r+0x66>
 8019590:	6829      	ldr	r1, [r5, #0]
 8019592:	291d      	cmp	r1, #29
 8019594:	d82c      	bhi.n	80195f0 <__sflush_r+0xb8>
 8019596:	4a2a      	ldr	r2, [pc, #168]	; (8019640 <__sflush_r+0x108>)
 8019598:	40ca      	lsrs	r2, r1
 801959a:	07d6      	lsls	r6, r2, #31
 801959c:	d528      	bpl.n	80195f0 <__sflush_r+0xb8>
 801959e:	2200      	movs	r2, #0
 80195a0:	6062      	str	r2, [r4, #4]
 80195a2:	04d9      	lsls	r1, r3, #19
 80195a4:	6922      	ldr	r2, [r4, #16]
 80195a6:	6022      	str	r2, [r4, #0]
 80195a8:	d504      	bpl.n	80195b4 <__sflush_r+0x7c>
 80195aa:	1c42      	adds	r2, r0, #1
 80195ac:	d101      	bne.n	80195b2 <__sflush_r+0x7a>
 80195ae:	682b      	ldr	r3, [r5, #0]
 80195b0:	b903      	cbnz	r3, 80195b4 <__sflush_r+0x7c>
 80195b2:	6560      	str	r0, [r4, #84]	; 0x54
 80195b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195b6:	602f      	str	r7, [r5, #0]
 80195b8:	2900      	cmp	r1, #0
 80195ba:	d0ca      	beq.n	8019552 <__sflush_r+0x1a>
 80195bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195c0:	4299      	cmp	r1, r3
 80195c2:	d002      	beq.n	80195ca <__sflush_r+0x92>
 80195c4:	4628      	mov	r0, r5
 80195c6:	f000 f9d7 	bl	8019978 <_free_r>
 80195ca:	2000      	movs	r0, #0
 80195cc:	6360      	str	r0, [r4, #52]	; 0x34
 80195ce:	e7c1      	b.n	8019554 <__sflush_r+0x1c>
 80195d0:	6a21      	ldr	r1, [r4, #32]
 80195d2:	2301      	movs	r3, #1
 80195d4:	4628      	mov	r0, r5
 80195d6:	47b0      	blx	r6
 80195d8:	1c41      	adds	r1, r0, #1
 80195da:	d1c7      	bne.n	801956c <__sflush_r+0x34>
 80195dc:	682b      	ldr	r3, [r5, #0]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d0c4      	beq.n	801956c <__sflush_r+0x34>
 80195e2:	2b1d      	cmp	r3, #29
 80195e4:	d001      	beq.n	80195ea <__sflush_r+0xb2>
 80195e6:	2b16      	cmp	r3, #22
 80195e8:	d101      	bne.n	80195ee <__sflush_r+0xb6>
 80195ea:	602f      	str	r7, [r5, #0]
 80195ec:	e7b1      	b.n	8019552 <__sflush_r+0x1a>
 80195ee:	89a3      	ldrh	r3, [r4, #12]
 80195f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195f4:	81a3      	strh	r3, [r4, #12]
 80195f6:	e7ad      	b.n	8019554 <__sflush_r+0x1c>
 80195f8:	690f      	ldr	r7, [r1, #16]
 80195fa:	2f00      	cmp	r7, #0
 80195fc:	d0a9      	beq.n	8019552 <__sflush_r+0x1a>
 80195fe:	0793      	lsls	r3, r2, #30
 8019600:	680e      	ldr	r6, [r1, #0]
 8019602:	bf08      	it	eq
 8019604:	694b      	ldreq	r3, [r1, #20]
 8019606:	600f      	str	r7, [r1, #0]
 8019608:	bf18      	it	ne
 801960a:	2300      	movne	r3, #0
 801960c:	eba6 0807 	sub.w	r8, r6, r7
 8019610:	608b      	str	r3, [r1, #8]
 8019612:	f1b8 0f00 	cmp.w	r8, #0
 8019616:	dd9c      	ble.n	8019552 <__sflush_r+0x1a>
 8019618:	6a21      	ldr	r1, [r4, #32]
 801961a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801961c:	4643      	mov	r3, r8
 801961e:	463a      	mov	r2, r7
 8019620:	4628      	mov	r0, r5
 8019622:	47b0      	blx	r6
 8019624:	2800      	cmp	r0, #0
 8019626:	dc06      	bgt.n	8019636 <__sflush_r+0xfe>
 8019628:	89a3      	ldrh	r3, [r4, #12]
 801962a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801962e:	81a3      	strh	r3, [r4, #12]
 8019630:	f04f 30ff 	mov.w	r0, #4294967295
 8019634:	e78e      	b.n	8019554 <__sflush_r+0x1c>
 8019636:	4407      	add	r7, r0
 8019638:	eba8 0800 	sub.w	r8, r8, r0
 801963c:	e7e9      	b.n	8019612 <__sflush_r+0xda>
 801963e:	bf00      	nop
 8019640:	20400001 	.word	0x20400001

08019644 <_fflush_r>:
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	690b      	ldr	r3, [r1, #16]
 8019648:	4605      	mov	r5, r0
 801964a:	460c      	mov	r4, r1
 801964c:	b913      	cbnz	r3, 8019654 <_fflush_r+0x10>
 801964e:	2500      	movs	r5, #0
 8019650:	4628      	mov	r0, r5
 8019652:	bd38      	pop	{r3, r4, r5, pc}
 8019654:	b118      	cbz	r0, 801965e <_fflush_r+0x1a>
 8019656:	6983      	ldr	r3, [r0, #24]
 8019658:	b90b      	cbnz	r3, 801965e <_fflush_r+0x1a>
 801965a:	f000 f887 	bl	801976c <__sinit>
 801965e:	4b14      	ldr	r3, [pc, #80]	; (80196b0 <_fflush_r+0x6c>)
 8019660:	429c      	cmp	r4, r3
 8019662:	d11b      	bne.n	801969c <_fflush_r+0x58>
 8019664:	686c      	ldr	r4, [r5, #4]
 8019666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d0ef      	beq.n	801964e <_fflush_r+0xa>
 801966e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019670:	07d0      	lsls	r0, r2, #31
 8019672:	d404      	bmi.n	801967e <_fflush_r+0x3a>
 8019674:	0599      	lsls	r1, r3, #22
 8019676:	d402      	bmi.n	801967e <_fflush_r+0x3a>
 8019678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801967a:	f000 f915 	bl	80198a8 <__retarget_lock_acquire_recursive>
 801967e:	4628      	mov	r0, r5
 8019680:	4621      	mov	r1, r4
 8019682:	f7ff ff59 	bl	8019538 <__sflush_r>
 8019686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019688:	07da      	lsls	r2, r3, #31
 801968a:	4605      	mov	r5, r0
 801968c:	d4e0      	bmi.n	8019650 <_fflush_r+0xc>
 801968e:	89a3      	ldrh	r3, [r4, #12]
 8019690:	059b      	lsls	r3, r3, #22
 8019692:	d4dd      	bmi.n	8019650 <_fflush_r+0xc>
 8019694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019696:	f000 f908 	bl	80198aa <__retarget_lock_release_recursive>
 801969a:	e7d9      	b.n	8019650 <_fflush_r+0xc>
 801969c:	4b05      	ldr	r3, [pc, #20]	; (80196b4 <_fflush_r+0x70>)
 801969e:	429c      	cmp	r4, r3
 80196a0:	d101      	bne.n	80196a6 <_fflush_r+0x62>
 80196a2:	68ac      	ldr	r4, [r5, #8]
 80196a4:	e7df      	b.n	8019666 <_fflush_r+0x22>
 80196a6:	4b04      	ldr	r3, [pc, #16]	; (80196b8 <_fflush_r+0x74>)
 80196a8:	429c      	cmp	r4, r3
 80196aa:	bf08      	it	eq
 80196ac:	68ec      	ldreq	r4, [r5, #12]
 80196ae:	e7da      	b.n	8019666 <_fflush_r+0x22>
 80196b0:	0801a564 	.word	0x0801a564
 80196b4:	0801a584 	.word	0x0801a584
 80196b8:	0801a544 	.word	0x0801a544

080196bc <std>:
 80196bc:	2300      	movs	r3, #0
 80196be:	b510      	push	{r4, lr}
 80196c0:	4604      	mov	r4, r0
 80196c2:	e9c0 3300 	strd	r3, r3, [r0]
 80196c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80196ca:	6083      	str	r3, [r0, #8]
 80196cc:	8181      	strh	r1, [r0, #12]
 80196ce:	6643      	str	r3, [r0, #100]	; 0x64
 80196d0:	81c2      	strh	r2, [r0, #14]
 80196d2:	6183      	str	r3, [r0, #24]
 80196d4:	4619      	mov	r1, r3
 80196d6:	2208      	movs	r2, #8
 80196d8:	305c      	adds	r0, #92	; 0x5c
 80196da:	f7ff fdad 	bl	8019238 <memset>
 80196de:	4b05      	ldr	r3, [pc, #20]	; (80196f4 <std+0x38>)
 80196e0:	6263      	str	r3, [r4, #36]	; 0x24
 80196e2:	4b05      	ldr	r3, [pc, #20]	; (80196f8 <std+0x3c>)
 80196e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80196e6:	4b05      	ldr	r3, [pc, #20]	; (80196fc <std+0x40>)
 80196e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80196ea:	4b05      	ldr	r3, [pc, #20]	; (8019700 <std+0x44>)
 80196ec:	6224      	str	r4, [r4, #32]
 80196ee:	6323      	str	r3, [r4, #48]	; 0x30
 80196f0:	bd10      	pop	{r4, pc}
 80196f2:	bf00      	nop
 80196f4:	0801a1c5 	.word	0x0801a1c5
 80196f8:	0801a1e7 	.word	0x0801a1e7
 80196fc:	0801a21f 	.word	0x0801a21f
 8019700:	0801a243 	.word	0x0801a243

08019704 <_cleanup_r>:
 8019704:	4901      	ldr	r1, [pc, #4]	; (801970c <_cleanup_r+0x8>)
 8019706:	f000 b8af 	b.w	8019868 <_fwalk_reent>
 801970a:	bf00      	nop
 801970c:	08019645 	.word	0x08019645

08019710 <__sfmoreglue>:
 8019710:	b570      	push	{r4, r5, r6, lr}
 8019712:	2268      	movs	r2, #104	; 0x68
 8019714:	1e4d      	subs	r5, r1, #1
 8019716:	4355      	muls	r5, r2
 8019718:	460e      	mov	r6, r1
 801971a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801971e:	f000 f997 	bl	8019a50 <_malloc_r>
 8019722:	4604      	mov	r4, r0
 8019724:	b140      	cbz	r0, 8019738 <__sfmoreglue+0x28>
 8019726:	2100      	movs	r1, #0
 8019728:	e9c0 1600 	strd	r1, r6, [r0]
 801972c:	300c      	adds	r0, #12
 801972e:	60a0      	str	r0, [r4, #8]
 8019730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019734:	f7ff fd80 	bl	8019238 <memset>
 8019738:	4620      	mov	r0, r4
 801973a:	bd70      	pop	{r4, r5, r6, pc}

0801973c <__sfp_lock_acquire>:
 801973c:	4801      	ldr	r0, [pc, #4]	; (8019744 <__sfp_lock_acquire+0x8>)
 801973e:	f000 b8b3 	b.w	80198a8 <__retarget_lock_acquire_recursive>
 8019742:	bf00      	nop
 8019744:	200086b9 	.word	0x200086b9

08019748 <__sfp_lock_release>:
 8019748:	4801      	ldr	r0, [pc, #4]	; (8019750 <__sfp_lock_release+0x8>)
 801974a:	f000 b8ae 	b.w	80198aa <__retarget_lock_release_recursive>
 801974e:	bf00      	nop
 8019750:	200086b9 	.word	0x200086b9

08019754 <__sinit_lock_acquire>:
 8019754:	4801      	ldr	r0, [pc, #4]	; (801975c <__sinit_lock_acquire+0x8>)
 8019756:	f000 b8a7 	b.w	80198a8 <__retarget_lock_acquire_recursive>
 801975a:	bf00      	nop
 801975c:	200086ba 	.word	0x200086ba

08019760 <__sinit_lock_release>:
 8019760:	4801      	ldr	r0, [pc, #4]	; (8019768 <__sinit_lock_release+0x8>)
 8019762:	f000 b8a2 	b.w	80198aa <__retarget_lock_release_recursive>
 8019766:	bf00      	nop
 8019768:	200086ba 	.word	0x200086ba

0801976c <__sinit>:
 801976c:	b510      	push	{r4, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	f7ff fff0 	bl	8019754 <__sinit_lock_acquire>
 8019774:	69a3      	ldr	r3, [r4, #24]
 8019776:	b11b      	cbz	r3, 8019780 <__sinit+0x14>
 8019778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801977c:	f7ff bff0 	b.w	8019760 <__sinit_lock_release>
 8019780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019784:	6523      	str	r3, [r4, #80]	; 0x50
 8019786:	4b13      	ldr	r3, [pc, #76]	; (80197d4 <__sinit+0x68>)
 8019788:	4a13      	ldr	r2, [pc, #76]	; (80197d8 <__sinit+0x6c>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	62a2      	str	r2, [r4, #40]	; 0x28
 801978e:	42a3      	cmp	r3, r4
 8019790:	bf04      	itt	eq
 8019792:	2301      	moveq	r3, #1
 8019794:	61a3      	streq	r3, [r4, #24]
 8019796:	4620      	mov	r0, r4
 8019798:	f000 f820 	bl	80197dc <__sfp>
 801979c:	6060      	str	r0, [r4, #4]
 801979e:	4620      	mov	r0, r4
 80197a0:	f000 f81c 	bl	80197dc <__sfp>
 80197a4:	60a0      	str	r0, [r4, #8]
 80197a6:	4620      	mov	r0, r4
 80197a8:	f000 f818 	bl	80197dc <__sfp>
 80197ac:	2200      	movs	r2, #0
 80197ae:	60e0      	str	r0, [r4, #12]
 80197b0:	2104      	movs	r1, #4
 80197b2:	6860      	ldr	r0, [r4, #4]
 80197b4:	f7ff ff82 	bl	80196bc <std>
 80197b8:	68a0      	ldr	r0, [r4, #8]
 80197ba:	2201      	movs	r2, #1
 80197bc:	2109      	movs	r1, #9
 80197be:	f7ff ff7d 	bl	80196bc <std>
 80197c2:	68e0      	ldr	r0, [r4, #12]
 80197c4:	2202      	movs	r2, #2
 80197c6:	2112      	movs	r1, #18
 80197c8:	f7ff ff78 	bl	80196bc <std>
 80197cc:	2301      	movs	r3, #1
 80197ce:	61a3      	str	r3, [r4, #24]
 80197d0:	e7d2      	b.n	8019778 <__sinit+0xc>
 80197d2:	bf00      	nop
 80197d4:	0801a540 	.word	0x0801a540
 80197d8:	08019705 	.word	0x08019705

080197dc <__sfp>:
 80197dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197de:	4607      	mov	r7, r0
 80197e0:	f7ff ffac 	bl	801973c <__sfp_lock_acquire>
 80197e4:	4b1e      	ldr	r3, [pc, #120]	; (8019860 <__sfp+0x84>)
 80197e6:	681e      	ldr	r6, [r3, #0]
 80197e8:	69b3      	ldr	r3, [r6, #24]
 80197ea:	b913      	cbnz	r3, 80197f2 <__sfp+0x16>
 80197ec:	4630      	mov	r0, r6
 80197ee:	f7ff ffbd 	bl	801976c <__sinit>
 80197f2:	3648      	adds	r6, #72	; 0x48
 80197f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80197f8:	3b01      	subs	r3, #1
 80197fa:	d503      	bpl.n	8019804 <__sfp+0x28>
 80197fc:	6833      	ldr	r3, [r6, #0]
 80197fe:	b30b      	cbz	r3, 8019844 <__sfp+0x68>
 8019800:	6836      	ldr	r6, [r6, #0]
 8019802:	e7f7      	b.n	80197f4 <__sfp+0x18>
 8019804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019808:	b9d5      	cbnz	r5, 8019840 <__sfp+0x64>
 801980a:	4b16      	ldr	r3, [pc, #88]	; (8019864 <__sfp+0x88>)
 801980c:	60e3      	str	r3, [r4, #12]
 801980e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019812:	6665      	str	r5, [r4, #100]	; 0x64
 8019814:	f000 f847 	bl	80198a6 <__retarget_lock_init_recursive>
 8019818:	f7ff ff96 	bl	8019748 <__sfp_lock_release>
 801981c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019824:	6025      	str	r5, [r4, #0]
 8019826:	61a5      	str	r5, [r4, #24]
 8019828:	2208      	movs	r2, #8
 801982a:	4629      	mov	r1, r5
 801982c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019830:	f7ff fd02 	bl	8019238 <memset>
 8019834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801983c:	4620      	mov	r0, r4
 801983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019840:	3468      	adds	r4, #104	; 0x68
 8019842:	e7d9      	b.n	80197f8 <__sfp+0x1c>
 8019844:	2104      	movs	r1, #4
 8019846:	4638      	mov	r0, r7
 8019848:	f7ff ff62 	bl	8019710 <__sfmoreglue>
 801984c:	4604      	mov	r4, r0
 801984e:	6030      	str	r0, [r6, #0]
 8019850:	2800      	cmp	r0, #0
 8019852:	d1d5      	bne.n	8019800 <__sfp+0x24>
 8019854:	f7ff ff78 	bl	8019748 <__sfp_lock_release>
 8019858:	230c      	movs	r3, #12
 801985a:	603b      	str	r3, [r7, #0]
 801985c:	e7ee      	b.n	801983c <__sfp+0x60>
 801985e:	bf00      	nop
 8019860:	0801a540 	.word	0x0801a540
 8019864:	ffff0001 	.word	0xffff0001

08019868 <_fwalk_reent>:
 8019868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801986c:	4606      	mov	r6, r0
 801986e:	4688      	mov	r8, r1
 8019870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019874:	2700      	movs	r7, #0
 8019876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801987a:	f1b9 0901 	subs.w	r9, r9, #1
 801987e:	d505      	bpl.n	801988c <_fwalk_reent+0x24>
 8019880:	6824      	ldr	r4, [r4, #0]
 8019882:	2c00      	cmp	r4, #0
 8019884:	d1f7      	bne.n	8019876 <_fwalk_reent+0xe>
 8019886:	4638      	mov	r0, r7
 8019888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801988c:	89ab      	ldrh	r3, [r5, #12]
 801988e:	2b01      	cmp	r3, #1
 8019890:	d907      	bls.n	80198a2 <_fwalk_reent+0x3a>
 8019892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019896:	3301      	adds	r3, #1
 8019898:	d003      	beq.n	80198a2 <_fwalk_reent+0x3a>
 801989a:	4629      	mov	r1, r5
 801989c:	4630      	mov	r0, r6
 801989e:	47c0      	blx	r8
 80198a0:	4307      	orrs	r7, r0
 80198a2:	3568      	adds	r5, #104	; 0x68
 80198a4:	e7e9      	b.n	801987a <_fwalk_reent+0x12>

080198a6 <__retarget_lock_init_recursive>:
 80198a6:	4770      	bx	lr

080198a8 <__retarget_lock_acquire_recursive>:
 80198a8:	4770      	bx	lr

080198aa <__retarget_lock_release_recursive>:
 80198aa:	4770      	bx	lr

080198ac <__swhatbuf_r>:
 80198ac:	b570      	push	{r4, r5, r6, lr}
 80198ae:	460e      	mov	r6, r1
 80198b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198b4:	2900      	cmp	r1, #0
 80198b6:	b096      	sub	sp, #88	; 0x58
 80198b8:	4614      	mov	r4, r2
 80198ba:	461d      	mov	r5, r3
 80198bc:	da08      	bge.n	80198d0 <__swhatbuf_r+0x24>
 80198be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80198c2:	2200      	movs	r2, #0
 80198c4:	602a      	str	r2, [r5, #0]
 80198c6:	061a      	lsls	r2, r3, #24
 80198c8:	d410      	bmi.n	80198ec <__swhatbuf_r+0x40>
 80198ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80198ce:	e00e      	b.n	80198ee <__swhatbuf_r+0x42>
 80198d0:	466a      	mov	r2, sp
 80198d2:	f000 fcdd 	bl	801a290 <_fstat_r>
 80198d6:	2800      	cmp	r0, #0
 80198d8:	dbf1      	blt.n	80198be <__swhatbuf_r+0x12>
 80198da:	9a01      	ldr	r2, [sp, #4]
 80198dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80198e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80198e4:	425a      	negs	r2, r3
 80198e6:	415a      	adcs	r2, r3
 80198e8:	602a      	str	r2, [r5, #0]
 80198ea:	e7ee      	b.n	80198ca <__swhatbuf_r+0x1e>
 80198ec:	2340      	movs	r3, #64	; 0x40
 80198ee:	2000      	movs	r0, #0
 80198f0:	6023      	str	r3, [r4, #0]
 80198f2:	b016      	add	sp, #88	; 0x58
 80198f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080198f8 <__smakebuf_r>:
 80198f8:	898b      	ldrh	r3, [r1, #12]
 80198fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198fc:	079d      	lsls	r5, r3, #30
 80198fe:	4606      	mov	r6, r0
 8019900:	460c      	mov	r4, r1
 8019902:	d507      	bpl.n	8019914 <__smakebuf_r+0x1c>
 8019904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	6123      	str	r3, [r4, #16]
 801990c:	2301      	movs	r3, #1
 801990e:	6163      	str	r3, [r4, #20]
 8019910:	b002      	add	sp, #8
 8019912:	bd70      	pop	{r4, r5, r6, pc}
 8019914:	ab01      	add	r3, sp, #4
 8019916:	466a      	mov	r2, sp
 8019918:	f7ff ffc8 	bl	80198ac <__swhatbuf_r>
 801991c:	9900      	ldr	r1, [sp, #0]
 801991e:	4605      	mov	r5, r0
 8019920:	4630      	mov	r0, r6
 8019922:	f000 f895 	bl	8019a50 <_malloc_r>
 8019926:	b948      	cbnz	r0, 801993c <__smakebuf_r+0x44>
 8019928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801992c:	059a      	lsls	r2, r3, #22
 801992e:	d4ef      	bmi.n	8019910 <__smakebuf_r+0x18>
 8019930:	f023 0303 	bic.w	r3, r3, #3
 8019934:	f043 0302 	orr.w	r3, r3, #2
 8019938:	81a3      	strh	r3, [r4, #12]
 801993a:	e7e3      	b.n	8019904 <__smakebuf_r+0xc>
 801993c:	4b0d      	ldr	r3, [pc, #52]	; (8019974 <__smakebuf_r+0x7c>)
 801993e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019940:	89a3      	ldrh	r3, [r4, #12]
 8019942:	6020      	str	r0, [r4, #0]
 8019944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019948:	81a3      	strh	r3, [r4, #12]
 801994a:	9b00      	ldr	r3, [sp, #0]
 801994c:	6163      	str	r3, [r4, #20]
 801994e:	9b01      	ldr	r3, [sp, #4]
 8019950:	6120      	str	r0, [r4, #16]
 8019952:	b15b      	cbz	r3, 801996c <__smakebuf_r+0x74>
 8019954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019958:	4630      	mov	r0, r6
 801995a:	f000 fcab 	bl	801a2b4 <_isatty_r>
 801995e:	b128      	cbz	r0, 801996c <__smakebuf_r+0x74>
 8019960:	89a3      	ldrh	r3, [r4, #12]
 8019962:	f023 0303 	bic.w	r3, r3, #3
 8019966:	f043 0301 	orr.w	r3, r3, #1
 801996a:	81a3      	strh	r3, [r4, #12]
 801996c:	89a0      	ldrh	r0, [r4, #12]
 801996e:	4305      	orrs	r5, r0
 8019970:	81a5      	strh	r5, [r4, #12]
 8019972:	e7cd      	b.n	8019910 <__smakebuf_r+0x18>
 8019974:	08019705 	.word	0x08019705

08019978 <_free_r>:
 8019978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801997a:	2900      	cmp	r1, #0
 801997c:	d044      	beq.n	8019a08 <_free_r+0x90>
 801997e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019982:	9001      	str	r0, [sp, #4]
 8019984:	2b00      	cmp	r3, #0
 8019986:	f1a1 0404 	sub.w	r4, r1, #4
 801998a:	bfb8      	it	lt
 801998c:	18e4      	addlt	r4, r4, r3
 801998e:	f000 fcb3 	bl	801a2f8 <__malloc_lock>
 8019992:	4a1e      	ldr	r2, [pc, #120]	; (8019a0c <_free_r+0x94>)
 8019994:	9801      	ldr	r0, [sp, #4]
 8019996:	6813      	ldr	r3, [r2, #0]
 8019998:	b933      	cbnz	r3, 80199a8 <_free_r+0x30>
 801999a:	6063      	str	r3, [r4, #4]
 801999c:	6014      	str	r4, [r2, #0]
 801999e:	b003      	add	sp, #12
 80199a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199a4:	f000 bcae 	b.w	801a304 <__malloc_unlock>
 80199a8:	42a3      	cmp	r3, r4
 80199aa:	d908      	bls.n	80199be <_free_r+0x46>
 80199ac:	6825      	ldr	r5, [r4, #0]
 80199ae:	1961      	adds	r1, r4, r5
 80199b0:	428b      	cmp	r3, r1
 80199b2:	bf01      	itttt	eq
 80199b4:	6819      	ldreq	r1, [r3, #0]
 80199b6:	685b      	ldreq	r3, [r3, #4]
 80199b8:	1949      	addeq	r1, r1, r5
 80199ba:	6021      	streq	r1, [r4, #0]
 80199bc:	e7ed      	b.n	801999a <_free_r+0x22>
 80199be:	461a      	mov	r2, r3
 80199c0:	685b      	ldr	r3, [r3, #4]
 80199c2:	b10b      	cbz	r3, 80199c8 <_free_r+0x50>
 80199c4:	42a3      	cmp	r3, r4
 80199c6:	d9fa      	bls.n	80199be <_free_r+0x46>
 80199c8:	6811      	ldr	r1, [r2, #0]
 80199ca:	1855      	adds	r5, r2, r1
 80199cc:	42a5      	cmp	r5, r4
 80199ce:	d10b      	bne.n	80199e8 <_free_r+0x70>
 80199d0:	6824      	ldr	r4, [r4, #0]
 80199d2:	4421      	add	r1, r4
 80199d4:	1854      	adds	r4, r2, r1
 80199d6:	42a3      	cmp	r3, r4
 80199d8:	6011      	str	r1, [r2, #0]
 80199da:	d1e0      	bne.n	801999e <_free_r+0x26>
 80199dc:	681c      	ldr	r4, [r3, #0]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	6053      	str	r3, [r2, #4]
 80199e2:	4421      	add	r1, r4
 80199e4:	6011      	str	r1, [r2, #0]
 80199e6:	e7da      	b.n	801999e <_free_r+0x26>
 80199e8:	d902      	bls.n	80199f0 <_free_r+0x78>
 80199ea:	230c      	movs	r3, #12
 80199ec:	6003      	str	r3, [r0, #0]
 80199ee:	e7d6      	b.n	801999e <_free_r+0x26>
 80199f0:	6825      	ldr	r5, [r4, #0]
 80199f2:	1961      	adds	r1, r4, r5
 80199f4:	428b      	cmp	r3, r1
 80199f6:	bf04      	itt	eq
 80199f8:	6819      	ldreq	r1, [r3, #0]
 80199fa:	685b      	ldreq	r3, [r3, #4]
 80199fc:	6063      	str	r3, [r4, #4]
 80199fe:	bf04      	itt	eq
 8019a00:	1949      	addeq	r1, r1, r5
 8019a02:	6021      	streq	r1, [r4, #0]
 8019a04:	6054      	str	r4, [r2, #4]
 8019a06:	e7ca      	b.n	801999e <_free_r+0x26>
 8019a08:	b003      	add	sp, #12
 8019a0a:	bd30      	pop	{r4, r5, pc}
 8019a0c:	200086bc 	.word	0x200086bc

08019a10 <sbrk_aligned>:
 8019a10:	b570      	push	{r4, r5, r6, lr}
 8019a12:	4e0e      	ldr	r6, [pc, #56]	; (8019a4c <sbrk_aligned+0x3c>)
 8019a14:	460c      	mov	r4, r1
 8019a16:	6831      	ldr	r1, [r6, #0]
 8019a18:	4605      	mov	r5, r0
 8019a1a:	b911      	cbnz	r1, 8019a22 <sbrk_aligned+0x12>
 8019a1c:	f000 fbc2 	bl	801a1a4 <_sbrk_r>
 8019a20:	6030      	str	r0, [r6, #0]
 8019a22:	4621      	mov	r1, r4
 8019a24:	4628      	mov	r0, r5
 8019a26:	f000 fbbd 	bl	801a1a4 <_sbrk_r>
 8019a2a:	1c43      	adds	r3, r0, #1
 8019a2c:	d00a      	beq.n	8019a44 <sbrk_aligned+0x34>
 8019a2e:	1cc4      	adds	r4, r0, #3
 8019a30:	f024 0403 	bic.w	r4, r4, #3
 8019a34:	42a0      	cmp	r0, r4
 8019a36:	d007      	beq.n	8019a48 <sbrk_aligned+0x38>
 8019a38:	1a21      	subs	r1, r4, r0
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	f000 fbb2 	bl	801a1a4 <_sbrk_r>
 8019a40:	3001      	adds	r0, #1
 8019a42:	d101      	bne.n	8019a48 <sbrk_aligned+0x38>
 8019a44:	f04f 34ff 	mov.w	r4, #4294967295
 8019a48:	4620      	mov	r0, r4
 8019a4a:	bd70      	pop	{r4, r5, r6, pc}
 8019a4c:	200086c0 	.word	0x200086c0

08019a50 <_malloc_r>:
 8019a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a54:	1ccd      	adds	r5, r1, #3
 8019a56:	f025 0503 	bic.w	r5, r5, #3
 8019a5a:	3508      	adds	r5, #8
 8019a5c:	2d0c      	cmp	r5, #12
 8019a5e:	bf38      	it	cc
 8019a60:	250c      	movcc	r5, #12
 8019a62:	2d00      	cmp	r5, #0
 8019a64:	4607      	mov	r7, r0
 8019a66:	db01      	blt.n	8019a6c <_malloc_r+0x1c>
 8019a68:	42a9      	cmp	r1, r5
 8019a6a:	d905      	bls.n	8019a78 <_malloc_r+0x28>
 8019a6c:	230c      	movs	r3, #12
 8019a6e:	603b      	str	r3, [r7, #0]
 8019a70:	2600      	movs	r6, #0
 8019a72:	4630      	mov	r0, r6
 8019a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a78:	4e2e      	ldr	r6, [pc, #184]	; (8019b34 <_malloc_r+0xe4>)
 8019a7a:	f000 fc3d 	bl	801a2f8 <__malloc_lock>
 8019a7e:	6833      	ldr	r3, [r6, #0]
 8019a80:	461c      	mov	r4, r3
 8019a82:	bb34      	cbnz	r4, 8019ad2 <_malloc_r+0x82>
 8019a84:	4629      	mov	r1, r5
 8019a86:	4638      	mov	r0, r7
 8019a88:	f7ff ffc2 	bl	8019a10 <sbrk_aligned>
 8019a8c:	1c43      	adds	r3, r0, #1
 8019a8e:	4604      	mov	r4, r0
 8019a90:	d14d      	bne.n	8019b2e <_malloc_r+0xde>
 8019a92:	6834      	ldr	r4, [r6, #0]
 8019a94:	4626      	mov	r6, r4
 8019a96:	2e00      	cmp	r6, #0
 8019a98:	d140      	bne.n	8019b1c <_malloc_r+0xcc>
 8019a9a:	6823      	ldr	r3, [r4, #0]
 8019a9c:	4631      	mov	r1, r6
 8019a9e:	4638      	mov	r0, r7
 8019aa0:	eb04 0803 	add.w	r8, r4, r3
 8019aa4:	f000 fb7e 	bl	801a1a4 <_sbrk_r>
 8019aa8:	4580      	cmp	r8, r0
 8019aaa:	d13a      	bne.n	8019b22 <_malloc_r+0xd2>
 8019aac:	6821      	ldr	r1, [r4, #0]
 8019aae:	3503      	adds	r5, #3
 8019ab0:	1a6d      	subs	r5, r5, r1
 8019ab2:	f025 0503 	bic.w	r5, r5, #3
 8019ab6:	3508      	adds	r5, #8
 8019ab8:	2d0c      	cmp	r5, #12
 8019aba:	bf38      	it	cc
 8019abc:	250c      	movcc	r5, #12
 8019abe:	4629      	mov	r1, r5
 8019ac0:	4638      	mov	r0, r7
 8019ac2:	f7ff ffa5 	bl	8019a10 <sbrk_aligned>
 8019ac6:	3001      	adds	r0, #1
 8019ac8:	d02b      	beq.n	8019b22 <_malloc_r+0xd2>
 8019aca:	6823      	ldr	r3, [r4, #0]
 8019acc:	442b      	add	r3, r5
 8019ace:	6023      	str	r3, [r4, #0]
 8019ad0:	e00e      	b.n	8019af0 <_malloc_r+0xa0>
 8019ad2:	6822      	ldr	r2, [r4, #0]
 8019ad4:	1b52      	subs	r2, r2, r5
 8019ad6:	d41e      	bmi.n	8019b16 <_malloc_r+0xc6>
 8019ad8:	2a0b      	cmp	r2, #11
 8019ada:	d916      	bls.n	8019b0a <_malloc_r+0xba>
 8019adc:	1961      	adds	r1, r4, r5
 8019ade:	42a3      	cmp	r3, r4
 8019ae0:	6025      	str	r5, [r4, #0]
 8019ae2:	bf18      	it	ne
 8019ae4:	6059      	strne	r1, [r3, #4]
 8019ae6:	6863      	ldr	r3, [r4, #4]
 8019ae8:	bf08      	it	eq
 8019aea:	6031      	streq	r1, [r6, #0]
 8019aec:	5162      	str	r2, [r4, r5]
 8019aee:	604b      	str	r3, [r1, #4]
 8019af0:	4638      	mov	r0, r7
 8019af2:	f104 060b 	add.w	r6, r4, #11
 8019af6:	f000 fc05 	bl	801a304 <__malloc_unlock>
 8019afa:	f026 0607 	bic.w	r6, r6, #7
 8019afe:	1d23      	adds	r3, r4, #4
 8019b00:	1af2      	subs	r2, r6, r3
 8019b02:	d0b6      	beq.n	8019a72 <_malloc_r+0x22>
 8019b04:	1b9b      	subs	r3, r3, r6
 8019b06:	50a3      	str	r3, [r4, r2]
 8019b08:	e7b3      	b.n	8019a72 <_malloc_r+0x22>
 8019b0a:	6862      	ldr	r2, [r4, #4]
 8019b0c:	42a3      	cmp	r3, r4
 8019b0e:	bf0c      	ite	eq
 8019b10:	6032      	streq	r2, [r6, #0]
 8019b12:	605a      	strne	r2, [r3, #4]
 8019b14:	e7ec      	b.n	8019af0 <_malloc_r+0xa0>
 8019b16:	4623      	mov	r3, r4
 8019b18:	6864      	ldr	r4, [r4, #4]
 8019b1a:	e7b2      	b.n	8019a82 <_malloc_r+0x32>
 8019b1c:	4634      	mov	r4, r6
 8019b1e:	6876      	ldr	r6, [r6, #4]
 8019b20:	e7b9      	b.n	8019a96 <_malloc_r+0x46>
 8019b22:	230c      	movs	r3, #12
 8019b24:	603b      	str	r3, [r7, #0]
 8019b26:	4638      	mov	r0, r7
 8019b28:	f000 fbec 	bl	801a304 <__malloc_unlock>
 8019b2c:	e7a1      	b.n	8019a72 <_malloc_r+0x22>
 8019b2e:	6025      	str	r5, [r4, #0]
 8019b30:	e7de      	b.n	8019af0 <_malloc_r+0xa0>
 8019b32:	bf00      	nop
 8019b34:	200086bc 	.word	0x200086bc

08019b38 <__sfputc_r>:
 8019b38:	6893      	ldr	r3, [r2, #8]
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	b410      	push	{r4}
 8019b40:	6093      	str	r3, [r2, #8]
 8019b42:	da08      	bge.n	8019b56 <__sfputc_r+0x1e>
 8019b44:	6994      	ldr	r4, [r2, #24]
 8019b46:	42a3      	cmp	r3, r4
 8019b48:	db01      	blt.n	8019b4e <__sfputc_r+0x16>
 8019b4a:	290a      	cmp	r1, #10
 8019b4c:	d103      	bne.n	8019b56 <__sfputc_r+0x1e>
 8019b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b52:	f7ff bc31 	b.w	80193b8 <__swbuf_r>
 8019b56:	6813      	ldr	r3, [r2, #0]
 8019b58:	1c58      	adds	r0, r3, #1
 8019b5a:	6010      	str	r0, [r2, #0]
 8019b5c:	7019      	strb	r1, [r3, #0]
 8019b5e:	4608      	mov	r0, r1
 8019b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <__sfputs_r>:
 8019b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b68:	4606      	mov	r6, r0
 8019b6a:	460f      	mov	r7, r1
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	18d5      	adds	r5, r2, r3
 8019b70:	42ac      	cmp	r4, r5
 8019b72:	d101      	bne.n	8019b78 <__sfputs_r+0x12>
 8019b74:	2000      	movs	r0, #0
 8019b76:	e007      	b.n	8019b88 <__sfputs_r+0x22>
 8019b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b7c:	463a      	mov	r2, r7
 8019b7e:	4630      	mov	r0, r6
 8019b80:	f7ff ffda 	bl	8019b38 <__sfputc_r>
 8019b84:	1c43      	adds	r3, r0, #1
 8019b86:	d1f3      	bne.n	8019b70 <__sfputs_r+0xa>
 8019b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b8c <_vfiprintf_r>:
 8019b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b90:	460d      	mov	r5, r1
 8019b92:	b09d      	sub	sp, #116	; 0x74
 8019b94:	4614      	mov	r4, r2
 8019b96:	4698      	mov	r8, r3
 8019b98:	4606      	mov	r6, r0
 8019b9a:	b118      	cbz	r0, 8019ba4 <_vfiprintf_r+0x18>
 8019b9c:	6983      	ldr	r3, [r0, #24]
 8019b9e:	b90b      	cbnz	r3, 8019ba4 <_vfiprintf_r+0x18>
 8019ba0:	f7ff fde4 	bl	801976c <__sinit>
 8019ba4:	4b89      	ldr	r3, [pc, #548]	; (8019dcc <_vfiprintf_r+0x240>)
 8019ba6:	429d      	cmp	r5, r3
 8019ba8:	d11b      	bne.n	8019be2 <_vfiprintf_r+0x56>
 8019baa:	6875      	ldr	r5, [r6, #4]
 8019bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bae:	07d9      	lsls	r1, r3, #31
 8019bb0:	d405      	bmi.n	8019bbe <_vfiprintf_r+0x32>
 8019bb2:	89ab      	ldrh	r3, [r5, #12]
 8019bb4:	059a      	lsls	r2, r3, #22
 8019bb6:	d402      	bmi.n	8019bbe <_vfiprintf_r+0x32>
 8019bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bba:	f7ff fe75 	bl	80198a8 <__retarget_lock_acquire_recursive>
 8019bbe:	89ab      	ldrh	r3, [r5, #12]
 8019bc0:	071b      	lsls	r3, r3, #28
 8019bc2:	d501      	bpl.n	8019bc8 <_vfiprintf_r+0x3c>
 8019bc4:	692b      	ldr	r3, [r5, #16]
 8019bc6:	b9eb      	cbnz	r3, 8019c04 <_vfiprintf_r+0x78>
 8019bc8:	4629      	mov	r1, r5
 8019bca:	4630      	mov	r0, r6
 8019bcc:	f7ff fc46 	bl	801945c <__swsetup_r>
 8019bd0:	b1c0      	cbz	r0, 8019c04 <_vfiprintf_r+0x78>
 8019bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bd4:	07dc      	lsls	r4, r3, #31
 8019bd6:	d50e      	bpl.n	8019bf6 <_vfiprintf_r+0x6a>
 8019bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bdc:	b01d      	add	sp, #116	; 0x74
 8019bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be2:	4b7b      	ldr	r3, [pc, #492]	; (8019dd0 <_vfiprintf_r+0x244>)
 8019be4:	429d      	cmp	r5, r3
 8019be6:	d101      	bne.n	8019bec <_vfiprintf_r+0x60>
 8019be8:	68b5      	ldr	r5, [r6, #8]
 8019bea:	e7df      	b.n	8019bac <_vfiprintf_r+0x20>
 8019bec:	4b79      	ldr	r3, [pc, #484]	; (8019dd4 <_vfiprintf_r+0x248>)
 8019bee:	429d      	cmp	r5, r3
 8019bf0:	bf08      	it	eq
 8019bf2:	68f5      	ldreq	r5, [r6, #12]
 8019bf4:	e7da      	b.n	8019bac <_vfiprintf_r+0x20>
 8019bf6:	89ab      	ldrh	r3, [r5, #12]
 8019bf8:	0598      	lsls	r0, r3, #22
 8019bfa:	d4ed      	bmi.n	8019bd8 <_vfiprintf_r+0x4c>
 8019bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bfe:	f7ff fe54 	bl	80198aa <__retarget_lock_release_recursive>
 8019c02:	e7e9      	b.n	8019bd8 <_vfiprintf_r+0x4c>
 8019c04:	2300      	movs	r3, #0
 8019c06:	9309      	str	r3, [sp, #36]	; 0x24
 8019c08:	2320      	movs	r3, #32
 8019c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c12:	2330      	movs	r3, #48	; 0x30
 8019c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019dd8 <_vfiprintf_r+0x24c>
 8019c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c1c:	f04f 0901 	mov.w	r9, #1
 8019c20:	4623      	mov	r3, r4
 8019c22:	469a      	mov	sl, r3
 8019c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c28:	b10a      	cbz	r2, 8019c2e <_vfiprintf_r+0xa2>
 8019c2a:	2a25      	cmp	r2, #37	; 0x25
 8019c2c:	d1f9      	bne.n	8019c22 <_vfiprintf_r+0x96>
 8019c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8019c32:	d00b      	beq.n	8019c4c <_vfiprintf_r+0xc0>
 8019c34:	465b      	mov	r3, fp
 8019c36:	4622      	mov	r2, r4
 8019c38:	4629      	mov	r1, r5
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	f7ff ff93 	bl	8019b66 <__sfputs_r>
 8019c40:	3001      	adds	r0, #1
 8019c42:	f000 80aa 	beq.w	8019d9a <_vfiprintf_r+0x20e>
 8019c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c48:	445a      	add	r2, fp
 8019c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	f000 80a2 	beq.w	8019d9a <_vfiprintf_r+0x20e>
 8019c56:	2300      	movs	r3, #0
 8019c58:	f04f 32ff 	mov.w	r2, #4294967295
 8019c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c60:	f10a 0a01 	add.w	sl, sl, #1
 8019c64:	9304      	str	r3, [sp, #16]
 8019c66:	9307      	str	r3, [sp, #28]
 8019c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c6e:	4654      	mov	r4, sl
 8019c70:	2205      	movs	r2, #5
 8019c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c76:	4858      	ldr	r0, [pc, #352]	; (8019dd8 <_vfiprintf_r+0x24c>)
 8019c78:	f7e6 fa82 	bl	8000180 <memchr>
 8019c7c:	9a04      	ldr	r2, [sp, #16]
 8019c7e:	b9d8      	cbnz	r0, 8019cb8 <_vfiprintf_r+0x12c>
 8019c80:	06d1      	lsls	r1, r2, #27
 8019c82:	bf44      	itt	mi
 8019c84:	2320      	movmi	r3, #32
 8019c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c8a:	0713      	lsls	r3, r2, #28
 8019c8c:	bf44      	itt	mi
 8019c8e:	232b      	movmi	r3, #43	; 0x2b
 8019c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c94:	f89a 3000 	ldrb.w	r3, [sl]
 8019c98:	2b2a      	cmp	r3, #42	; 0x2a
 8019c9a:	d015      	beq.n	8019cc8 <_vfiprintf_r+0x13c>
 8019c9c:	9a07      	ldr	r2, [sp, #28]
 8019c9e:	4654      	mov	r4, sl
 8019ca0:	2000      	movs	r0, #0
 8019ca2:	f04f 0c0a 	mov.w	ip, #10
 8019ca6:	4621      	mov	r1, r4
 8019ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cac:	3b30      	subs	r3, #48	; 0x30
 8019cae:	2b09      	cmp	r3, #9
 8019cb0:	d94e      	bls.n	8019d50 <_vfiprintf_r+0x1c4>
 8019cb2:	b1b0      	cbz	r0, 8019ce2 <_vfiprintf_r+0x156>
 8019cb4:	9207      	str	r2, [sp, #28]
 8019cb6:	e014      	b.n	8019ce2 <_vfiprintf_r+0x156>
 8019cb8:	eba0 0308 	sub.w	r3, r0, r8
 8019cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8019cc0:	4313      	orrs	r3, r2
 8019cc2:	9304      	str	r3, [sp, #16]
 8019cc4:	46a2      	mov	sl, r4
 8019cc6:	e7d2      	b.n	8019c6e <_vfiprintf_r+0xe2>
 8019cc8:	9b03      	ldr	r3, [sp, #12]
 8019cca:	1d19      	adds	r1, r3, #4
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	9103      	str	r1, [sp, #12]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	bfbb      	ittet	lt
 8019cd4:	425b      	neglt	r3, r3
 8019cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8019cda:	9307      	strge	r3, [sp, #28]
 8019cdc:	9307      	strlt	r3, [sp, #28]
 8019cde:	bfb8      	it	lt
 8019ce0:	9204      	strlt	r2, [sp, #16]
 8019ce2:	7823      	ldrb	r3, [r4, #0]
 8019ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8019ce6:	d10c      	bne.n	8019d02 <_vfiprintf_r+0x176>
 8019ce8:	7863      	ldrb	r3, [r4, #1]
 8019cea:	2b2a      	cmp	r3, #42	; 0x2a
 8019cec:	d135      	bne.n	8019d5a <_vfiprintf_r+0x1ce>
 8019cee:	9b03      	ldr	r3, [sp, #12]
 8019cf0:	1d1a      	adds	r2, r3, #4
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	9203      	str	r2, [sp, #12]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	bfb8      	it	lt
 8019cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8019cfe:	3402      	adds	r4, #2
 8019d00:	9305      	str	r3, [sp, #20]
 8019d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019de8 <_vfiprintf_r+0x25c>
 8019d06:	7821      	ldrb	r1, [r4, #0]
 8019d08:	2203      	movs	r2, #3
 8019d0a:	4650      	mov	r0, sl
 8019d0c:	f7e6 fa38 	bl	8000180 <memchr>
 8019d10:	b140      	cbz	r0, 8019d24 <_vfiprintf_r+0x198>
 8019d12:	2340      	movs	r3, #64	; 0x40
 8019d14:	eba0 000a 	sub.w	r0, r0, sl
 8019d18:	fa03 f000 	lsl.w	r0, r3, r0
 8019d1c:	9b04      	ldr	r3, [sp, #16]
 8019d1e:	4303      	orrs	r3, r0
 8019d20:	3401      	adds	r4, #1
 8019d22:	9304      	str	r3, [sp, #16]
 8019d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d28:	482c      	ldr	r0, [pc, #176]	; (8019ddc <_vfiprintf_r+0x250>)
 8019d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d2e:	2206      	movs	r2, #6
 8019d30:	f7e6 fa26 	bl	8000180 <memchr>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d03f      	beq.n	8019db8 <_vfiprintf_r+0x22c>
 8019d38:	4b29      	ldr	r3, [pc, #164]	; (8019de0 <_vfiprintf_r+0x254>)
 8019d3a:	bb1b      	cbnz	r3, 8019d84 <_vfiprintf_r+0x1f8>
 8019d3c:	9b03      	ldr	r3, [sp, #12]
 8019d3e:	3307      	adds	r3, #7
 8019d40:	f023 0307 	bic.w	r3, r3, #7
 8019d44:	3308      	adds	r3, #8
 8019d46:	9303      	str	r3, [sp, #12]
 8019d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d4a:	443b      	add	r3, r7
 8019d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d4e:	e767      	b.n	8019c20 <_vfiprintf_r+0x94>
 8019d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d54:	460c      	mov	r4, r1
 8019d56:	2001      	movs	r0, #1
 8019d58:	e7a5      	b.n	8019ca6 <_vfiprintf_r+0x11a>
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	3401      	adds	r4, #1
 8019d5e:	9305      	str	r3, [sp, #20]
 8019d60:	4619      	mov	r1, r3
 8019d62:	f04f 0c0a 	mov.w	ip, #10
 8019d66:	4620      	mov	r0, r4
 8019d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d6c:	3a30      	subs	r2, #48	; 0x30
 8019d6e:	2a09      	cmp	r2, #9
 8019d70:	d903      	bls.n	8019d7a <_vfiprintf_r+0x1ee>
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d0c5      	beq.n	8019d02 <_vfiprintf_r+0x176>
 8019d76:	9105      	str	r1, [sp, #20]
 8019d78:	e7c3      	b.n	8019d02 <_vfiprintf_r+0x176>
 8019d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d7e:	4604      	mov	r4, r0
 8019d80:	2301      	movs	r3, #1
 8019d82:	e7f0      	b.n	8019d66 <_vfiprintf_r+0x1da>
 8019d84:	ab03      	add	r3, sp, #12
 8019d86:	9300      	str	r3, [sp, #0]
 8019d88:	462a      	mov	r2, r5
 8019d8a:	4b16      	ldr	r3, [pc, #88]	; (8019de4 <_vfiprintf_r+0x258>)
 8019d8c:	a904      	add	r1, sp, #16
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f3af 8000 	nop.w
 8019d94:	4607      	mov	r7, r0
 8019d96:	1c78      	adds	r0, r7, #1
 8019d98:	d1d6      	bne.n	8019d48 <_vfiprintf_r+0x1bc>
 8019d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d9c:	07d9      	lsls	r1, r3, #31
 8019d9e:	d405      	bmi.n	8019dac <_vfiprintf_r+0x220>
 8019da0:	89ab      	ldrh	r3, [r5, #12]
 8019da2:	059a      	lsls	r2, r3, #22
 8019da4:	d402      	bmi.n	8019dac <_vfiprintf_r+0x220>
 8019da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019da8:	f7ff fd7f 	bl	80198aa <__retarget_lock_release_recursive>
 8019dac:	89ab      	ldrh	r3, [r5, #12]
 8019dae:	065b      	lsls	r3, r3, #25
 8019db0:	f53f af12 	bmi.w	8019bd8 <_vfiprintf_r+0x4c>
 8019db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019db6:	e711      	b.n	8019bdc <_vfiprintf_r+0x50>
 8019db8:	ab03      	add	r3, sp, #12
 8019dba:	9300      	str	r3, [sp, #0]
 8019dbc:	462a      	mov	r2, r5
 8019dbe:	4b09      	ldr	r3, [pc, #36]	; (8019de4 <_vfiprintf_r+0x258>)
 8019dc0:	a904      	add	r1, sp, #16
 8019dc2:	4630      	mov	r0, r6
 8019dc4:	f000 f880 	bl	8019ec8 <_printf_i>
 8019dc8:	e7e4      	b.n	8019d94 <_vfiprintf_r+0x208>
 8019dca:	bf00      	nop
 8019dcc:	0801a564 	.word	0x0801a564
 8019dd0:	0801a584 	.word	0x0801a584
 8019dd4:	0801a544 	.word	0x0801a544
 8019dd8:	0801a5a4 	.word	0x0801a5a4
 8019ddc:	0801a5ae 	.word	0x0801a5ae
 8019de0:	00000000 	.word	0x00000000
 8019de4:	08019b67 	.word	0x08019b67
 8019de8:	0801a5aa 	.word	0x0801a5aa

08019dec <_printf_common>:
 8019dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019df0:	4616      	mov	r6, r2
 8019df2:	4699      	mov	r9, r3
 8019df4:	688a      	ldr	r2, [r1, #8]
 8019df6:	690b      	ldr	r3, [r1, #16]
 8019df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	bfb8      	it	lt
 8019e00:	4613      	movlt	r3, r2
 8019e02:	6033      	str	r3, [r6, #0]
 8019e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e08:	4607      	mov	r7, r0
 8019e0a:	460c      	mov	r4, r1
 8019e0c:	b10a      	cbz	r2, 8019e12 <_printf_common+0x26>
 8019e0e:	3301      	adds	r3, #1
 8019e10:	6033      	str	r3, [r6, #0]
 8019e12:	6823      	ldr	r3, [r4, #0]
 8019e14:	0699      	lsls	r1, r3, #26
 8019e16:	bf42      	ittt	mi
 8019e18:	6833      	ldrmi	r3, [r6, #0]
 8019e1a:	3302      	addmi	r3, #2
 8019e1c:	6033      	strmi	r3, [r6, #0]
 8019e1e:	6825      	ldr	r5, [r4, #0]
 8019e20:	f015 0506 	ands.w	r5, r5, #6
 8019e24:	d106      	bne.n	8019e34 <_printf_common+0x48>
 8019e26:	f104 0a19 	add.w	sl, r4, #25
 8019e2a:	68e3      	ldr	r3, [r4, #12]
 8019e2c:	6832      	ldr	r2, [r6, #0]
 8019e2e:	1a9b      	subs	r3, r3, r2
 8019e30:	42ab      	cmp	r3, r5
 8019e32:	dc26      	bgt.n	8019e82 <_printf_common+0x96>
 8019e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e38:	1e13      	subs	r3, r2, #0
 8019e3a:	6822      	ldr	r2, [r4, #0]
 8019e3c:	bf18      	it	ne
 8019e3e:	2301      	movne	r3, #1
 8019e40:	0692      	lsls	r2, r2, #26
 8019e42:	d42b      	bmi.n	8019e9c <_printf_common+0xb0>
 8019e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e48:	4649      	mov	r1, r9
 8019e4a:	4638      	mov	r0, r7
 8019e4c:	47c0      	blx	r8
 8019e4e:	3001      	adds	r0, #1
 8019e50:	d01e      	beq.n	8019e90 <_printf_common+0xa4>
 8019e52:	6823      	ldr	r3, [r4, #0]
 8019e54:	68e5      	ldr	r5, [r4, #12]
 8019e56:	6832      	ldr	r2, [r6, #0]
 8019e58:	f003 0306 	and.w	r3, r3, #6
 8019e5c:	2b04      	cmp	r3, #4
 8019e5e:	bf08      	it	eq
 8019e60:	1aad      	subeq	r5, r5, r2
 8019e62:	68a3      	ldr	r3, [r4, #8]
 8019e64:	6922      	ldr	r2, [r4, #16]
 8019e66:	bf0c      	ite	eq
 8019e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e6c:	2500      	movne	r5, #0
 8019e6e:	4293      	cmp	r3, r2
 8019e70:	bfc4      	itt	gt
 8019e72:	1a9b      	subgt	r3, r3, r2
 8019e74:	18ed      	addgt	r5, r5, r3
 8019e76:	2600      	movs	r6, #0
 8019e78:	341a      	adds	r4, #26
 8019e7a:	42b5      	cmp	r5, r6
 8019e7c:	d11a      	bne.n	8019eb4 <_printf_common+0xc8>
 8019e7e:	2000      	movs	r0, #0
 8019e80:	e008      	b.n	8019e94 <_printf_common+0xa8>
 8019e82:	2301      	movs	r3, #1
 8019e84:	4652      	mov	r2, sl
 8019e86:	4649      	mov	r1, r9
 8019e88:	4638      	mov	r0, r7
 8019e8a:	47c0      	blx	r8
 8019e8c:	3001      	adds	r0, #1
 8019e8e:	d103      	bne.n	8019e98 <_printf_common+0xac>
 8019e90:	f04f 30ff 	mov.w	r0, #4294967295
 8019e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e98:	3501      	adds	r5, #1
 8019e9a:	e7c6      	b.n	8019e2a <_printf_common+0x3e>
 8019e9c:	18e1      	adds	r1, r4, r3
 8019e9e:	1c5a      	adds	r2, r3, #1
 8019ea0:	2030      	movs	r0, #48	; 0x30
 8019ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019ea6:	4422      	add	r2, r4
 8019ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019eb0:	3302      	adds	r3, #2
 8019eb2:	e7c7      	b.n	8019e44 <_printf_common+0x58>
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	4622      	mov	r2, r4
 8019eb8:	4649      	mov	r1, r9
 8019eba:	4638      	mov	r0, r7
 8019ebc:	47c0      	blx	r8
 8019ebe:	3001      	adds	r0, #1
 8019ec0:	d0e6      	beq.n	8019e90 <_printf_common+0xa4>
 8019ec2:	3601      	adds	r6, #1
 8019ec4:	e7d9      	b.n	8019e7a <_printf_common+0x8e>
	...

08019ec8 <_printf_i>:
 8019ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ecc:	7e0f      	ldrb	r7, [r1, #24]
 8019ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ed0:	2f78      	cmp	r7, #120	; 0x78
 8019ed2:	4691      	mov	r9, r2
 8019ed4:	4680      	mov	r8, r0
 8019ed6:	460c      	mov	r4, r1
 8019ed8:	469a      	mov	sl, r3
 8019eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019ede:	d807      	bhi.n	8019ef0 <_printf_i+0x28>
 8019ee0:	2f62      	cmp	r7, #98	; 0x62
 8019ee2:	d80a      	bhi.n	8019efa <_printf_i+0x32>
 8019ee4:	2f00      	cmp	r7, #0
 8019ee6:	f000 80d8 	beq.w	801a09a <_printf_i+0x1d2>
 8019eea:	2f58      	cmp	r7, #88	; 0x58
 8019eec:	f000 80a3 	beq.w	801a036 <_printf_i+0x16e>
 8019ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ef8:	e03a      	b.n	8019f70 <_printf_i+0xa8>
 8019efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019efe:	2b15      	cmp	r3, #21
 8019f00:	d8f6      	bhi.n	8019ef0 <_printf_i+0x28>
 8019f02:	a101      	add	r1, pc, #4	; (adr r1, 8019f08 <_printf_i+0x40>)
 8019f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f08:	08019f61 	.word	0x08019f61
 8019f0c:	08019f75 	.word	0x08019f75
 8019f10:	08019ef1 	.word	0x08019ef1
 8019f14:	08019ef1 	.word	0x08019ef1
 8019f18:	08019ef1 	.word	0x08019ef1
 8019f1c:	08019ef1 	.word	0x08019ef1
 8019f20:	08019f75 	.word	0x08019f75
 8019f24:	08019ef1 	.word	0x08019ef1
 8019f28:	08019ef1 	.word	0x08019ef1
 8019f2c:	08019ef1 	.word	0x08019ef1
 8019f30:	08019ef1 	.word	0x08019ef1
 8019f34:	0801a081 	.word	0x0801a081
 8019f38:	08019fa5 	.word	0x08019fa5
 8019f3c:	0801a063 	.word	0x0801a063
 8019f40:	08019ef1 	.word	0x08019ef1
 8019f44:	08019ef1 	.word	0x08019ef1
 8019f48:	0801a0a3 	.word	0x0801a0a3
 8019f4c:	08019ef1 	.word	0x08019ef1
 8019f50:	08019fa5 	.word	0x08019fa5
 8019f54:	08019ef1 	.word	0x08019ef1
 8019f58:	08019ef1 	.word	0x08019ef1
 8019f5c:	0801a06b 	.word	0x0801a06b
 8019f60:	682b      	ldr	r3, [r5, #0]
 8019f62:	1d1a      	adds	r2, r3, #4
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	602a      	str	r2, [r5, #0]
 8019f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f70:	2301      	movs	r3, #1
 8019f72:	e0a3      	b.n	801a0bc <_printf_i+0x1f4>
 8019f74:	6820      	ldr	r0, [r4, #0]
 8019f76:	6829      	ldr	r1, [r5, #0]
 8019f78:	0606      	lsls	r6, r0, #24
 8019f7a:	f101 0304 	add.w	r3, r1, #4
 8019f7e:	d50a      	bpl.n	8019f96 <_printf_i+0xce>
 8019f80:	680e      	ldr	r6, [r1, #0]
 8019f82:	602b      	str	r3, [r5, #0]
 8019f84:	2e00      	cmp	r6, #0
 8019f86:	da03      	bge.n	8019f90 <_printf_i+0xc8>
 8019f88:	232d      	movs	r3, #45	; 0x2d
 8019f8a:	4276      	negs	r6, r6
 8019f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f90:	485e      	ldr	r0, [pc, #376]	; (801a10c <_printf_i+0x244>)
 8019f92:	230a      	movs	r3, #10
 8019f94:	e019      	b.n	8019fca <_printf_i+0x102>
 8019f96:	680e      	ldr	r6, [r1, #0]
 8019f98:	602b      	str	r3, [r5, #0]
 8019f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019f9e:	bf18      	it	ne
 8019fa0:	b236      	sxthne	r6, r6
 8019fa2:	e7ef      	b.n	8019f84 <_printf_i+0xbc>
 8019fa4:	682b      	ldr	r3, [r5, #0]
 8019fa6:	6820      	ldr	r0, [r4, #0]
 8019fa8:	1d19      	adds	r1, r3, #4
 8019faa:	6029      	str	r1, [r5, #0]
 8019fac:	0601      	lsls	r1, r0, #24
 8019fae:	d501      	bpl.n	8019fb4 <_printf_i+0xec>
 8019fb0:	681e      	ldr	r6, [r3, #0]
 8019fb2:	e002      	b.n	8019fba <_printf_i+0xf2>
 8019fb4:	0646      	lsls	r6, r0, #25
 8019fb6:	d5fb      	bpl.n	8019fb0 <_printf_i+0xe8>
 8019fb8:	881e      	ldrh	r6, [r3, #0]
 8019fba:	4854      	ldr	r0, [pc, #336]	; (801a10c <_printf_i+0x244>)
 8019fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8019fbe:	bf0c      	ite	eq
 8019fc0:	2308      	moveq	r3, #8
 8019fc2:	230a      	movne	r3, #10
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fca:	6865      	ldr	r5, [r4, #4]
 8019fcc:	60a5      	str	r5, [r4, #8]
 8019fce:	2d00      	cmp	r5, #0
 8019fd0:	bfa2      	ittt	ge
 8019fd2:	6821      	ldrge	r1, [r4, #0]
 8019fd4:	f021 0104 	bicge.w	r1, r1, #4
 8019fd8:	6021      	strge	r1, [r4, #0]
 8019fda:	b90e      	cbnz	r6, 8019fe0 <_printf_i+0x118>
 8019fdc:	2d00      	cmp	r5, #0
 8019fde:	d04d      	beq.n	801a07c <_printf_i+0x1b4>
 8019fe0:	4615      	mov	r5, r2
 8019fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8019fea:	5dc7      	ldrb	r7, [r0, r7]
 8019fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ff0:	4637      	mov	r7, r6
 8019ff2:	42bb      	cmp	r3, r7
 8019ff4:	460e      	mov	r6, r1
 8019ff6:	d9f4      	bls.n	8019fe2 <_printf_i+0x11a>
 8019ff8:	2b08      	cmp	r3, #8
 8019ffa:	d10b      	bne.n	801a014 <_printf_i+0x14c>
 8019ffc:	6823      	ldr	r3, [r4, #0]
 8019ffe:	07de      	lsls	r6, r3, #31
 801a000:	d508      	bpl.n	801a014 <_printf_i+0x14c>
 801a002:	6923      	ldr	r3, [r4, #16]
 801a004:	6861      	ldr	r1, [r4, #4]
 801a006:	4299      	cmp	r1, r3
 801a008:	bfde      	ittt	le
 801a00a:	2330      	movle	r3, #48	; 0x30
 801a00c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a010:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a014:	1b52      	subs	r2, r2, r5
 801a016:	6122      	str	r2, [r4, #16]
 801a018:	f8cd a000 	str.w	sl, [sp]
 801a01c:	464b      	mov	r3, r9
 801a01e:	aa03      	add	r2, sp, #12
 801a020:	4621      	mov	r1, r4
 801a022:	4640      	mov	r0, r8
 801a024:	f7ff fee2 	bl	8019dec <_printf_common>
 801a028:	3001      	adds	r0, #1
 801a02a:	d14c      	bne.n	801a0c6 <_printf_i+0x1fe>
 801a02c:	f04f 30ff 	mov.w	r0, #4294967295
 801a030:	b004      	add	sp, #16
 801a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a036:	4835      	ldr	r0, [pc, #212]	; (801a10c <_printf_i+0x244>)
 801a038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a03c:	6829      	ldr	r1, [r5, #0]
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	f851 6b04 	ldr.w	r6, [r1], #4
 801a044:	6029      	str	r1, [r5, #0]
 801a046:	061d      	lsls	r5, r3, #24
 801a048:	d514      	bpl.n	801a074 <_printf_i+0x1ac>
 801a04a:	07df      	lsls	r7, r3, #31
 801a04c:	bf44      	itt	mi
 801a04e:	f043 0320 	orrmi.w	r3, r3, #32
 801a052:	6023      	strmi	r3, [r4, #0]
 801a054:	b91e      	cbnz	r6, 801a05e <_printf_i+0x196>
 801a056:	6823      	ldr	r3, [r4, #0]
 801a058:	f023 0320 	bic.w	r3, r3, #32
 801a05c:	6023      	str	r3, [r4, #0]
 801a05e:	2310      	movs	r3, #16
 801a060:	e7b0      	b.n	8019fc4 <_printf_i+0xfc>
 801a062:	6823      	ldr	r3, [r4, #0]
 801a064:	f043 0320 	orr.w	r3, r3, #32
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	2378      	movs	r3, #120	; 0x78
 801a06c:	4828      	ldr	r0, [pc, #160]	; (801a110 <_printf_i+0x248>)
 801a06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a072:	e7e3      	b.n	801a03c <_printf_i+0x174>
 801a074:	0659      	lsls	r1, r3, #25
 801a076:	bf48      	it	mi
 801a078:	b2b6      	uxthmi	r6, r6
 801a07a:	e7e6      	b.n	801a04a <_printf_i+0x182>
 801a07c:	4615      	mov	r5, r2
 801a07e:	e7bb      	b.n	8019ff8 <_printf_i+0x130>
 801a080:	682b      	ldr	r3, [r5, #0]
 801a082:	6826      	ldr	r6, [r4, #0]
 801a084:	6961      	ldr	r1, [r4, #20]
 801a086:	1d18      	adds	r0, r3, #4
 801a088:	6028      	str	r0, [r5, #0]
 801a08a:	0635      	lsls	r5, r6, #24
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	d501      	bpl.n	801a094 <_printf_i+0x1cc>
 801a090:	6019      	str	r1, [r3, #0]
 801a092:	e002      	b.n	801a09a <_printf_i+0x1d2>
 801a094:	0670      	lsls	r0, r6, #25
 801a096:	d5fb      	bpl.n	801a090 <_printf_i+0x1c8>
 801a098:	8019      	strh	r1, [r3, #0]
 801a09a:	2300      	movs	r3, #0
 801a09c:	6123      	str	r3, [r4, #16]
 801a09e:	4615      	mov	r5, r2
 801a0a0:	e7ba      	b.n	801a018 <_printf_i+0x150>
 801a0a2:	682b      	ldr	r3, [r5, #0]
 801a0a4:	1d1a      	adds	r2, r3, #4
 801a0a6:	602a      	str	r2, [r5, #0]
 801a0a8:	681d      	ldr	r5, [r3, #0]
 801a0aa:	6862      	ldr	r2, [r4, #4]
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	f7e6 f866 	bl	8000180 <memchr>
 801a0b4:	b108      	cbz	r0, 801a0ba <_printf_i+0x1f2>
 801a0b6:	1b40      	subs	r0, r0, r5
 801a0b8:	6060      	str	r0, [r4, #4]
 801a0ba:	6863      	ldr	r3, [r4, #4]
 801a0bc:	6123      	str	r3, [r4, #16]
 801a0be:	2300      	movs	r3, #0
 801a0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c4:	e7a8      	b.n	801a018 <_printf_i+0x150>
 801a0c6:	6923      	ldr	r3, [r4, #16]
 801a0c8:	462a      	mov	r2, r5
 801a0ca:	4649      	mov	r1, r9
 801a0cc:	4640      	mov	r0, r8
 801a0ce:	47d0      	blx	sl
 801a0d0:	3001      	adds	r0, #1
 801a0d2:	d0ab      	beq.n	801a02c <_printf_i+0x164>
 801a0d4:	6823      	ldr	r3, [r4, #0]
 801a0d6:	079b      	lsls	r3, r3, #30
 801a0d8:	d413      	bmi.n	801a102 <_printf_i+0x23a>
 801a0da:	68e0      	ldr	r0, [r4, #12]
 801a0dc:	9b03      	ldr	r3, [sp, #12]
 801a0de:	4298      	cmp	r0, r3
 801a0e0:	bfb8      	it	lt
 801a0e2:	4618      	movlt	r0, r3
 801a0e4:	e7a4      	b.n	801a030 <_printf_i+0x168>
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	4632      	mov	r2, r6
 801a0ea:	4649      	mov	r1, r9
 801a0ec:	4640      	mov	r0, r8
 801a0ee:	47d0      	blx	sl
 801a0f0:	3001      	adds	r0, #1
 801a0f2:	d09b      	beq.n	801a02c <_printf_i+0x164>
 801a0f4:	3501      	adds	r5, #1
 801a0f6:	68e3      	ldr	r3, [r4, #12]
 801a0f8:	9903      	ldr	r1, [sp, #12]
 801a0fa:	1a5b      	subs	r3, r3, r1
 801a0fc:	42ab      	cmp	r3, r5
 801a0fe:	dcf2      	bgt.n	801a0e6 <_printf_i+0x21e>
 801a100:	e7eb      	b.n	801a0da <_printf_i+0x212>
 801a102:	2500      	movs	r5, #0
 801a104:	f104 0619 	add.w	r6, r4, #25
 801a108:	e7f5      	b.n	801a0f6 <_printf_i+0x22e>
 801a10a:	bf00      	nop
 801a10c:	0801a5b5 	.word	0x0801a5b5
 801a110:	0801a5c6 	.word	0x0801a5c6

0801a114 <_putc_r>:
 801a114:	b570      	push	{r4, r5, r6, lr}
 801a116:	460d      	mov	r5, r1
 801a118:	4614      	mov	r4, r2
 801a11a:	4606      	mov	r6, r0
 801a11c:	b118      	cbz	r0, 801a126 <_putc_r+0x12>
 801a11e:	6983      	ldr	r3, [r0, #24]
 801a120:	b90b      	cbnz	r3, 801a126 <_putc_r+0x12>
 801a122:	f7ff fb23 	bl	801976c <__sinit>
 801a126:	4b1c      	ldr	r3, [pc, #112]	; (801a198 <_putc_r+0x84>)
 801a128:	429c      	cmp	r4, r3
 801a12a:	d124      	bne.n	801a176 <_putc_r+0x62>
 801a12c:	6874      	ldr	r4, [r6, #4]
 801a12e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a130:	07d8      	lsls	r0, r3, #31
 801a132:	d405      	bmi.n	801a140 <_putc_r+0x2c>
 801a134:	89a3      	ldrh	r3, [r4, #12]
 801a136:	0599      	lsls	r1, r3, #22
 801a138:	d402      	bmi.n	801a140 <_putc_r+0x2c>
 801a13a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a13c:	f7ff fbb4 	bl	80198a8 <__retarget_lock_acquire_recursive>
 801a140:	68a3      	ldr	r3, [r4, #8]
 801a142:	3b01      	subs	r3, #1
 801a144:	2b00      	cmp	r3, #0
 801a146:	60a3      	str	r3, [r4, #8]
 801a148:	da05      	bge.n	801a156 <_putc_r+0x42>
 801a14a:	69a2      	ldr	r2, [r4, #24]
 801a14c:	4293      	cmp	r3, r2
 801a14e:	db1c      	blt.n	801a18a <_putc_r+0x76>
 801a150:	b2eb      	uxtb	r3, r5
 801a152:	2b0a      	cmp	r3, #10
 801a154:	d019      	beq.n	801a18a <_putc_r+0x76>
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	1c5a      	adds	r2, r3, #1
 801a15a:	6022      	str	r2, [r4, #0]
 801a15c:	701d      	strb	r5, [r3, #0]
 801a15e:	b2ed      	uxtb	r5, r5
 801a160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a162:	07da      	lsls	r2, r3, #31
 801a164:	d405      	bmi.n	801a172 <_putc_r+0x5e>
 801a166:	89a3      	ldrh	r3, [r4, #12]
 801a168:	059b      	lsls	r3, r3, #22
 801a16a:	d402      	bmi.n	801a172 <_putc_r+0x5e>
 801a16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a16e:	f7ff fb9c 	bl	80198aa <__retarget_lock_release_recursive>
 801a172:	4628      	mov	r0, r5
 801a174:	bd70      	pop	{r4, r5, r6, pc}
 801a176:	4b09      	ldr	r3, [pc, #36]	; (801a19c <_putc_r+0x88>)
 801a178:	429c      	cmp	r4, r3
 801a17a:	d101      	bne.n	801a180 <_putc_r+0x6c>
 801a17c:	68b4      	ldr	r4, [r6, #8]
 801a17e:	e7d6      	b.n	801a12e <_putc_r+0x1a>
 801a180:	4b07      	ldr	r3, [pc, #28]	; (801a1a0 <_putc_r+0x8c>)
 801a182:	429c      	cmp	r4, r3
 801a184:	bf08      	it	eq
 801a186:	68f4      	ldreq	r4, [r6, #12]
 801a188:	e7d1      	b.n	801a12e <_putc_r+0x1a>
 801a18a:	4629      	mov	r1, r5
 801a18c:	4622      	mov	r2, r4
 801a18e:	4630      	mov	r0, r6
 801a190:	f7ff f912 	bl	80193b8 <__swbuf_r>
 801a194:	4605      	mov	r5, r0
 801a196:	e7e3      	b.n	801a160 <_putc_r+0x4c>
 801a198:	0801a564 	.word	0x0801a564
 801a19c:	0801a584 	.word	0x0801a584
 801a1a0:	0801a544 	.word	0x0801a544

0801a1a4 <_sbrk_r>:
 801a1a4:	b538      	push	{r3, r4, r5, lr}
 801a1a6:	4d06      	ldr	r5, [pc, #24]	; (801a1c0 <_sbrk_r+0x1c>)
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	4608      	mov	r0, r1
 801a1ae:	602b      	str	r3, [r5, #0]
 801a1b0:	f7e6 fe20 	bl	8000df4 <_sbrk>
 801a1b4:	1c43      	adds	r3, r0, #1
 801a1b6:	d102      	bne.n	801a1be <_sbrk_r+0x1a>
 801a1b8:	682b      	ldr	r3, [r5, #0]
 801a1ba:	b103      	cbz	r3, 801a1be <_sbrk_r+0x1a>
 801a1bc:	6023      	str	r3, [r4, #0]
 801a1be:	bd38      	pop	{r3, r4, r5, pc}
 801a1c0:	200086c4 	.word	0x200086c4

0801a1c4 <__sread>:
 801a1c4:	b510      	push	{r4, lr}
 801a1c6:	460c      	mov	r4, r1
 801a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1cc:	f000 f8a0 	bl	801a310 <_read_r>
 801a1d0:	2800      	cmp	r0, #0
 801a1d2:	bfab      	itete	ge
 801a1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a1d6:	89a3      	ldrhlt	r3, [r4, #12]
 801a1d8:	181b      	addge	r3, r3, r0
 801a1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a1de:	bfac      	ite	ge
 801a1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801a1e2:	81a3      	strhlt	r3, [r4, #12]
 801a1e4:	bd10      	pop	{r4, pc}

0801a1e6 <__swrite>:
 801a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ea:	461f      	mov	r7, r3
 801a1ec:	898b      	ldrh	r3, [r1, #12]
 801a1ee:	05db      	lsls	r3, r3, #23
 801a1f0:	4605      	mov	r5, r0
 801a1f2:	460c      	mov	r4, r1
 801a1f4:	4616      	mov	r6, r2
 801a1f6:	d505      	bpl.n	801a204 <__swrite+0x1e>
 801a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1fc:	2302      	movs	r3, #2
 801a1fe:	2200      	movs	r2, #0
 801a200:	f000 f868 	bl	801a2d4 <_lseek_r>
 801a204:	89a3      	ldrh	r3, [r4, #12]
 801a206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a20e:	81a3      	strh	r3, [r4, #12]
 801a210:	4632      	mov	r2, r6
 801a212:	463b      	mov	r3, r7
 801a214:	4628      	mov	r0, r5
 801a216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a21a:	f000 b817 	b.w	801a24c <_write_r>

0801a21e <__sseek>:
 801a21e:	b510      	push	{r4, lr}
 801a220:	460c      	mov	r4, r1
 801a222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a226:	f000 f855 	bl	801a2d4 <_lseek_r>
 801a22a:	1c43      	adds	r3, r0, #1
 801a22c:	89a3      	ldrh	r3, [r4, #12]
 801a22e:	bf15      	itete	ne
 801a230:	6560      	strne	r0, [r4, #84]	; 0x54
 801a232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a23a:	81a3      	strheq	r3, [r4, #12]
 801a23c:	bf18      	it	ne
 801a23e:	81a3      	strhne	r3, [r4, #12]
 801a240:	bd10      	pop	{r4, pc}

0801a242 <__sclose>:
 801a242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a246:	f000 b813 	b.w	801a270 <_close_r>
	...

0801a24c <_write_r>:
 801a24c:	b538      	push	{r3, r4, r5, lr}
 801a24e:	4d07      	ldr	r5, [pc, #28]	; (801a26c <_write_r+0x20>)
 801a250:	4604      	mov	r4, r0
 801a252:	4608      	mov	r0, r1
 801a254:	4611      	mov	r1, r2
 801a256:	2200      	movs	r2, #0
 801a258:	602a      	str	r2, [r5, #0]
 801a25a:	461a      	mov	r2, r3
 801a25c:	f7e6 fd79 	bl	8000d52 <_write>
 801a260:	1c43      	adds	r3, r0, #1
 801a262:	d102      	bne.n	801a26a <_write_r+0x1e>
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	b103      	cbz	r3, 801a26a <_write_r+0x1e>
 801a268:	6023      	str	r3, [r4, #0]
 801a26a:	bd38      	pop	{r3, r4, r5, pc}
 801a26c:	200086c4 	.word	0x200086c4

0801a270 <_close_r>:
 801a270:	b538      	push	{r3, r4, r5, lr}
 801a272:	4d06      	ldr	r5, [pc, #24]	; (801a28c <_close_r+0x1c>)
 801a274:	2300      	movs	r3, #0
 801a276:	4604      	mov	r4, r0
 801a278:	4608      	mov	r0, r1
 801a27a:	602b      	str	r3, [r5, #0]
 801a27c:	f7e6 fd85 	bl	8000d8a <_close>
 801a280:	1c43      	adds	r3, r0, #1
 801a282:	d102      	bne.n	801a28a <_close_r+0x1a>
 801a284:	682b      	ldr	r3, [r5, #0]
 801a286:	b103      	cbz	r3, 801a28a <_close_r+0x1a>
 801a288:	6023      	str	r3, [r4, #0]
 801a28a:	bd38      	pop	{r3, r4, r5, pc}
 801a28c:	200086c4 	.word	0x200086c4

0801a290 <_fstat_r>:
 801a290:	b538      	push	{r3, r4, r5, lr}
 801a292:	4d07      	ldr	r5, [pc, #28]	; (801a2b0 <_fstat_r+0x20>)
 801a294:	2300      	movs	r3, #0
 801a296:	4604      	mov	r4, r0
 801a298:	4608      	mov	r0, r1
 801a29a:	4611      	mov	r1, r2
 801a29c:	602b      	str	r3, [r5, #0]
 801a29e:	f7e6 fd80 	bl	8000da2 <_fstat>
 801a2a2:	1c43      	adds	r3, r0, #1
 801a2a4:	d102      	bne.n	801a2ac <_fstat_r+0x1c>
 801a2a6:	682b      	ldr	r3, [r5, #0]
 801a2a8:	b103      	cbz	r3, 801a2ac <_fstat_r+0x1c>
 801a2aa:	6023      	str	r3, [r4, #0]
 801a2ac:	bd38      	pop	{r3, r4, r5, pc}
 801a2ae:	bf00      	nop
 801a2b0:	200086c4 	.word	0x200086c4

0801a2b4 <_isatty_r>:
 801a2b4:	b538      	push	{r3, r4, r5, lr}
 801a2b6:	4d06      	ldr	r5, [pc, #24]	; (801a2d0 <_isatty_r+0x1c>)
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	4604      	mov	r4, r0
 801a2bc:	4608      	mov	r0, r1
 801a2be:	602b      	str	r3, [r5, #0]
 801a2c0:	f7e6 fd7f 	bl	8000dc2 <_isatty>
 801a2c4:	1c43      	adds	r3, r0, #1
 801a2c6:	d102      	bne.n	801a2ce <_isatty_r+0x1a>
 801a2c8:	682b      	ldr	r3, [r5, #0]
 801a2ca:	b103      	cbz	r3, 801a2ce <_isatty_r+0x1a>
 801a2cc:	6023      	str	r3, [r4, #0]
 801a2ce:	bd38      	pop	{r3, r4, r5, pc}
 801a2d0:	200086c4 	.word	0x200086c4

0801a2d4 <_lseek_r>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4d07      	ldr	r5, [pc, #28]	; (801a2f4 <_lseek_r+0x20>)
 801a2d8:	4604      	mov	r4, r0
 801a2da:	4608      	mov	r0, r1
 801a2dc:	4611      	mov	r1, r2
 801a2de:	2200      	movs	r2, #0
 801a2e0:	602a      	str	r2, [r5, #0]
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	f7e6 fd78 	bl	8000dd8 <_lseek>
 801a2e8:	1c43      	adds	r3, r0, #1
 801a2ea:	d102      	bne.n	801a2f2 <_lseek_r+0x1e>
 801a2ec:	682b      	ldr	r3, [r5, #0]
 801a2ee:	b103      	cbz	r3, 801a2f2 <_lseek_r+0x1e>
 801a2f0:	6023      	str	r3, [r4, #0]
 801a2f2:	bd38      	pop	{r3, r4, r5, pc}
 801a2f4:	200086c4 	.word	0x200086c4

0801a2f8 <__malloc_lock>:
 801a2f8:	4801      	ldr	r0, [pc, #4]	; (801a300 <__malloc_lock+0x8>)
 801a2fa:	f7ff bad5 	b.w	80198a8 <__retarget_lock_acquire_recursive>
 801a2fe:	bf00      	nop
 801a300:	200086b8 	.word	0x200086b8

0801a304 <__malloc_unlock>:
 801a304:	4801      	ldr	r0, [pc, #4]	; (801a30c <__malloc_unlock+0x8>)
 801a306:	f7ff bad0 	b.w	80198aa <__retarget_lock_release_recursive>
 801a30a:	bf00      	nop
 801a30c:	200086b8 	.word	0x200086b8

0801a310 <_read_r>:
 801a310:	b538      	push	{r3, r4, r5, lr}
 801a312:	4d07      	ldr	r5, [pc, #28]	; (801a330 <_read_r+0x20>)
 801a314:	4604      	mov	r4, r0
 801a316:	4608      	mov	r0, r1
 801a318:	4611      	mov	r1, r2
 801a31a:	2200      	movs	r2, #0
 801a31c:	602a      	str	r2, [r5, #0]
 801a31e:	461a      	mov	r2, r3
 801a320:	f7e6 fcfa 	bl	8000d18 <_read>
 801a324:	1c43      	adds	r3, r0, #1
 801a326:	d102      	bne.n	801a32e <_read_r+0x1e>
 801a328:	682b      	ldr	r3, [r5, #0]
 801a32a:	b103      	cbz	r3, 801a32e <_read_r+0x1e>
 801a32c:	6023      	str	r3, [r4, #0]
 801a32e:	bd38      	pop	{r3, r4, r5, pc}
 801a330:	200086c4 	.word	0x200086c4

0801a334 <_init>:
 801a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a336:	bf00      	nop
 801a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a33a:	bc08      	pop	{r3}
 801a33c:	469e      	mov	lr, r3
 801a33e:	4770      	bx	lr

0801a340 <_fini>:
 801a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a342:	bf00      	nop
 801a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a346:	bc08      	pop	{r3}
 801a348:	469e      	mov	lr, r3
 801a34a:	4770      	bx	lr
