
Test_Tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0801a5f0  0801a5f0  0002a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a854  0801a854  0002a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a85c  0801a85c  0002a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a860  0801a860  0002a860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000004  0801a864  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008554  200000d8  0801a938  000300d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000862c  0801a938  0003862c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000647f7  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000069aa  00000000  00000000  000948ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003290  00000000  00000000  0009b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002fc8  00000000  00000000  0009e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000469e9  00000000  00000000  000a1508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039cee  00000000  00000000  000e7ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011b08e  00000000  00000000  00121bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023cc6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e398  00000000  00000000  0023ccc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a5d8 	.word	0x0801a5d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801a5d8 	.word	0x0801a5d8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Init(void);
static void VL_53L1A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init();
 80005c8:	f000 f808 	bl	80005dc <VL_53L1A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  VL_53L1A2_SimpleRanging_Process();
 80005d4:	f000 f818 	bl	8000608 <VL_53L1A2_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <VL_53L1A2_SimpleRanging_Init>:

static void VL_53L1A2_SimpleRanging_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 f8c9 	bl	8001778 <VL53L1A2_RANGING_SENSOR_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <VL_53L1A2_SimpleRanging_Init+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <VL_53L1A2_SimpleRanging_Init+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <VL_53L1A2_SimpleRanging_Init+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <VL_53L1A2_SimpleRanging_Init+0x28>)
 80005f6:	f019 f815 	bl	8019624 <puts>
    while(1);
 80005fa:	e7fe      	b.n	80005fa <VL_53L1A2_SimpleRanging_Init+0x1e>
  }

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000108 	.word	0x20000108
 8000604:	0801a5f0 	.word	0x0801a5f0

08000608 <VL_53L1A2_SimpleRanging_Process>:

static void VL_53L1A2_SimpleRanging_Process(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 800060e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000612:	4619      	mov	r1, r3
 8000614:	2001      	movs	r0, #1
 8000616:	f001 f8d5 	bl	80017c4 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 8000622:	221e      	movs	r2, #30
 8000624:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8000638:	4913      	ldr	r1, [pc, #76]	; (8000688 <VL_53L1A2_SimpleRanging_Process+0x80>)
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f8ea 	bl	8001814 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000640:	2101      	movs	r1, #1
 8000642:	2001      	movs	r0, #1
 8000644:	f001 f936 	bl	80018b4 <VL53L1A2_RANGING_SENSOR_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <VL_53L1A2_SimpleRanging_Process+0x84>)
 800064c:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <VL_53L1A2_SimpleRanging_Process+0x84>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <VL_53L1A2_SimpleRanging_Process+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 8000658:	f018 ffe4 	bl	8019624 <puts>
    while(1);
 800065c:	e7fe      	b.n	800065c <VL_53L1A2_SimpleRanging_Process+0x54>
  }

  while (1)
  {
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	2001      	movs	r0, #1
 8000664:	f001 f8fe 	bl	8001864 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8000668:	4603      	mov	r3, r0
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <VL_53L1A2_SimpleRanging_Process+0x84>)
 800066c:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <VL_53L1A2_SimpleRanging_Process+0x84>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d103      	bne.n	800067e <VL_53L1A2_SimpleRanging_Process+0x76>
    {
      //printf("\n CENTER ");
      print_result(&Result_Center);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f80b 	bl	8000694 <print_result>
    }
    HAL_Delay(REPETITION);
 800067e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000682:	f014 fe61 	bl	8015348 <HAL_Delay>
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 8000686:	e7ea      	b.n	800065e <VL_53L1A2_SimpleRanging_Process+0x56>
 8000688:	200000f4 	.word	0x200000f4
 800068c:	20000108 	.word	0x20000108
 8000690:	0801a614 	.word	0x0801a614

08000694 <print_result>:

  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e03f      	b.n	8000722 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	4413      	add	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	3304      	adds	r3, #4
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4820      	ldr	r0, [pc, #128]	; (8000738 <print_result+0xa4>)
 80006b8:	f018 ff18 	bl	80194ec <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80006bc:	2300      	movs	r3, #0
 80006be:	73bb      	strb	r3, [r7, #14]
 80006c0:	e020      	b.n	8000704 <print_result+0x70>
    {
      printf("\n |---> ");
 80006c2:	481e      	ldr	r0, [pc, #120]	; (800073c <print_result+0xa8>)
 80006c4:	f018 ff12 	bl	80194ec <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	7bb8      	ldrb	r0, [r7, #14]
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	4613      	mov	r3, r2
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	4403      	add	r3, r0
 80006d6:	3304      	adds	r3, #4
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	440b      	add	r3, r1
 80006dc:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006de:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 80006e0:	7bfa      	ldrb	r2, [r7, #15]
 80006e2:	7bb8      	ldrb	r0, [r7, #14]
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	4613      	mov	r3, r2
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	4403      	add	r3, r0
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006f4:	461a      	mov	r2, r3
 80006f6:	4621      	mov	r1, r4
 80006f8:	4811      	ldr	r0, [pc, #68]	; (8000740 <print_result+0xac>)
 80006fa:	f018 fef7 	bl	80194ec <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	3301      	adds	r3, #1
 8000702:	73bb      	strb	r3, [r7, #14]
 8000704:	7bb9      	ldrb	r1, [r7, #14]
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	4613      	mov	r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4403      	add	r3, r0
 8000714:	3304      	adds	r3, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4299      	cmp	r1, r3
 800071a:	d3d2      	bcc.n	80006c2 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0bc      	beq.n	80006a2 <print_result+0xe>
    }
  }
  printf ("\n");
 8000728:	200a      	movs	r0, #10
 800072a:	f018 fef7 	bl	801951c <putchar>
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	0801a640 	.word	0x0801a640
 800073c:	0801a650 	.word	0x0801a650
 8000740:	0801a65c 	.word	0x0801a65c

08000744 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000750:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d013      	beq.n	8000784 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800075c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000760:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000764:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00b      	beq.n	8000784 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800076c:	e000      	b.n	8000770 <ITM_SendChar+0x2c>
    {
      __NOP();
 800076e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000770:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800077a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a2:	f023 0218 	bic.w	r2, r3, #24
 80007a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	e009      	b.n	8000816 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	60ba      	str	r2, [r7, #8]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff9a 	bl	8000744 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbf1      	blt.n	8000802 <_write+0x12>
}
return len;
 800081e:	687b      	ldr	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f014 fd40 	bl	80152b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f80e 	bl	8000850 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000834:	f000 f882 	bl	800093c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f914 	bl	8000a64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800083c:	f000 f89c 	bl	8000978 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000840:	f000 f8e8 	bl	8000a14 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  //start the initialization of tof application
  VL_TOF_Init();
 8000844:	f7ff febe 	bl	80005c4 <VL_TOF_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//start the process of tof application
	VL_TOF_Process();
 8000848:	f7ff fec2 	bl	80005d0 <VL_TOF_Process>
 800084c:	e7fc      	b.n	8000848 <main+0x20>
	...

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09a      	sub	sp, #104	; 0x68
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2248      	movs	r2, #72	; 0x48
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f018 fe3c 	bl	80194dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000884:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f023 0303 	bic.w	r3, r3, #3
 8000890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800089a:	f015 ffbf 	bl	801681c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff ff77 	bl	8000792 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xe8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <SystemClock_Config+0xe8>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <SystemClock_Config+0xe8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008c0:	2327      	movs	r3, #39	; 0x27
 80008c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f016 fb35 	bl	8016f5c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008f8:	f000 f90e 	bl	8000b18 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008fc:	236f      	movs	r3, #111	; 0x6f
 80008fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2101      	movs	r1, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f016 fe91 	bl	8017644 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000928:	f000 f8f6 	bl	8000b18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800092c:	f017 fc7e 	bl	801822c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000930:	bf00      	nop
 8000932:	3768      	adds	r7, #104	; 0x68
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58000400 	.word	0x58000400

0800093c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2250      	movs	r2, #80	; 0x50
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f018 fdc7 	bl	80194dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000958:	2300      	movs	r3, #0
 800095a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4618      	mov	r0, r3
 8000960:	f017 faee 	bl	8017f40 <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800096a:	f000 f8d5 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	; 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 800097e:	4a24      	ldr	r2, [pc, #144]	; (8000a10 <MX_USART1_UART_Init+0x98>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 800098c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000990:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009c4:	f017 ffe2 	bl	801898c <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80009ce:	f000 f8a3 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009d6:	f018 fc42 	bl	801925e <HAL_UARTEx_SetTxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80009e0:	f000 f89a 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009e8:	f018 fc77 	bl	80192da <HAL_UARTEx_SetRxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80009f2:	f000 f891 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 80009f8:	f018 fbf8 	bl	80191ec <HAL_UARTEx_DisableFifoMode>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a02:	f000 f889 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	40013800 	.word	0x40013800

08000a14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <MX_USB_PCD_Init+0x4c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a4a:	f015 fde4 	bl	8016616 <HAL_PCD_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a54:	f000 f860 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001a0 	.word	0x200001a0
 8000a60:	40006800 	.word	0x40006800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f7ff fea0 	bl	80007be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff fe9d 	bl	80007be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fe9a 	bl	80007be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	2008      	movs	r0, #8
 8000a8c:	f7ff fe97 	bl	80007be <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2123      	movs	r1, #35	; 0x23
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x84>)
 8000a96:	f014 ffc1 	bl	8015a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4810      	ldr	r0, [pc, #64]	; (8000aec <MX_GPIO_Init+0x88>)
 8000aac:	f014 fd50 	bl	8015550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ab0:	2323      	movs	r3, #35	; 0x23
 8000ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_GPIO_Init+0x84>)
 8000ac6:	f014 fd43 	bl	8015550 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000adc:	f014 fd38 	bl	8015550 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	48000800 	.word	0x48000800
 8000af0:	48000c00 	.word	0x48000c00

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b06:	f014 fbf3 	bl	80152f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40014800 	.word	0x40014800

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>

08000b22 <LL_AHB2_GRP1_EnableClock>:
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09c      	sub	sp, #112	; 0x70
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2250      	movs	r2, #80	; 0x50
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f018 fc77 	bl	80194dc <memset>
  if(huart->Instance==USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <HAL_UART_MspInit+0x84>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d124      	bne.n	8000c42 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4618      	mov	r0, r3
 8000c06:	f017 f99b 	bl	8017f40 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c10:	f7ff ff82 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c18:	f7ff ffb5 	bl	8000b86 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff ff80 	bl	8000b22 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c32:	2307      	movs	r3, #7
 8000c34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <HAL_UART_MspInit+0x88>)
 8000c3e:	f014 fc87 	bl	8015550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3770      	adds	r7, #112	; 0x70
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	48000400 	.word	0x48000400

08000c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	; 0x70
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2250      	movs	r2, #80	; 0x50
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f018 fc31 	bl	80194dc <memset>
  if(hpcd->Instance==USB)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_PCD_MspInit+0xa8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d136      	bne.n	8000cf2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c8a:	2318      	movs	r3, #24
 8000c8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ca4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f017 f945 	bl	8017f40 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000cbc:	f7ff ff2c 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff ff2e 	bl	8000b22 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f014 fc33 	bl	8015550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cee:	f7ff ff31 	bl	8000b54 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3770      	adds	r7, #112	; 0x70
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40006800 	.word	0x40006800

08000d00 <LL_APB2_GRP1_EnableClock>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	201a      	movs	r0, #26
 8000d4a:	f014 fbd9 	bl	8015500 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d4e:	201a      	movs	r0, #26
 8000d50:	f014 fbf0 	bl	8015534 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000d54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d58:	f7ff ffd2 	bl	8000d00 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5c:	f107 0208 	add.w	r2, r7, #8
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f016 fe58 	bl	8017a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d6c:	f016 fe40 	bl	80179f0 <HAL_RCC_GetPCLK2Freq>
 8000d70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_InitTick+0x8c>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	0c9b      	lsrs	r3, r3, #18
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_InitTick+0x90>)
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <HAL_InitTick+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_InitTick+0x90>)
 8000d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_InitTick+0x90>)
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_InitTick+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_InitTick+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <HAL_InitTick+0x90>)
 8000da2:	f017 fb5a 	bl	801845a <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_InitTick+0x90>)
 8000dae:	f017 fbb5 	bl	801851c <HAL_TIM_Base_Start_IT>
 8000db2:	4603      	mov	r3, r0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	20000494 	.word	0x20000494
 8000dc8:	40014800 	.word	0x40014800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e2a:	f017 fbc5 	bl	80185b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000494 	.word	0x20000494

08000e38 <LL_AHB2_GRP1_EnableClock>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_APB1_GRP1_EnableClock>:
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_APB1_GRP1_DisableClock>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <BSP_I2C1_Init+0x70>)
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <BSP_I2C1_Init+0x74>)
 8000ed2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <BSP_I2C1_Init+0x78>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	4918      	ldr	r1, [pc, #96]	; (8000f3c <BSP_I2C1_Init+0x78>)
 8000edc:	600a      	str	r2, [r1, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d122      	bne.n	8000f28 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <BSP_I2C1_Init+0x70>)
 8000ee4:	f015 f86e 	bl	8015fc4 <HAL_I2C_GetState>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d11c      	bne.n	8000f28 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <BSP_I2C1_Init+0x70>)
 8000ef0:	f000 f8ee 	bl	80010d0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <BSP_I2C1_Init+0x70>)
 8000efc:	f000 f8a4 	bl	8001048 <MX_I2C1_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f06:	f06f 0307 	mvn.w	r3, #7
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	e00c      	b.n	8000f28 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <BSP_I2C1_Init+0x70>)
 8000f12:	f015 fae9 	bl	80164e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1c:	f06f 0307 	mvn.w	r3, #7
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e001      	b.n	8000f28 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200004e0 	.word	0x200004e0
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	20000534 	.word	0x20000534

08000f40 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d014      	beq.n	8000f7c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <BSP_I2C1_DeInit+0x4c>)
 8000f66:	f000 f8f7 	bl	8001158 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <BSP_I2C1_DeInit+0x4c>)
 8000f6c:	f014 fdfd 	bl	8015b6a <HAL_I2C_DeInit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f76:	f06f 0307 	mvn.w	r3, #7
 8000f7a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000534 	.word	0x20000534
 8000f8c:	200004e0 	.word	0x200004e0

08000f90 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	88f9      	ldrh	r1, [r7, #6]
 8000fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <BSP_I2C1_Send+0x50>)
 8000fb2:	f014 fe1d 	bl	8015bf0 <HAL_I2C_Master_Transmit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00c      	beq.n	8000fd6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <BSP_I2C1_Send+0x50>)
 8000fbe:	f015 f80f 	bl	8015fe0 <HAL_I2C_GetError>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d003      	beq.n	8000fd0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fc8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e002      	b.n	8000fd6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000fd0:	f06f 0303 	mvn.w	r3, #3
 8000fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200004e0 	.word	0x200004e0

08000fe4 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	88f9      	ldrh	r1, [r7, #6]
 8000ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001000:	9200      	str	r2, [sp, #0]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <BSP_I2C1_Recv+0x50>)
 8001006:	f014 fee7 	bl	8015dd8 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <BSP_I2C1_Recv+0x50>)
 8001012:	f014 ffe5 	bl	8015fe0 <HAL_I2C_GetError>
 8001016:	4603      	mov	r3, r0
 8001018:	2b04      	cmp	r3, #4
 800101a:	d003      	beq.n	8001024 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800101c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e002      	b.n	800102a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001024:	f06f 0303 	mvn.w	r3, #3
 8001028:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200004e0 	.word	0x200004e0

08001038 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800103c:	f014 f96c 	bl	8015318 <HAL_GetTick>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_I2C1_Init+0x80>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <MX_I2C1_Init+0x84>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f014 fcde 	bl	8015a4c <HAL_I2C_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f015 fa23 	bl	80164e8 <HAL_I2CEx_ConfigAnalogFilter>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f015 fa65 	bl	801657e <HAL_I2CEx_ConfigDigitalFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005400 	.word	0x40005400
 80010cc:	00707cbb 	.word	0x00707cbb

080010d0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09c      	sub	sp, #112	; 0x70
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2250      	movs	r2, #80	; 0x50
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f018 f9fb 	bl	80194dc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e6:	2304      	movs	r3, #4
 80010e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4618      	mov	r0, r3
 80010f6:	f016 ff23 	bl	8017f40 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fe9c 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001106:	2312      	movs	r3, #18
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001112:	2304      	movs	r3, #4
 8001114:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001116:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800111a:	4619      	mov	r1, r3
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <I2C1_MspInit+0x84>)
 800111e:	f014 fa17 	bl	8015550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001134:	2304      	movs	r3, #4
 8001136:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <I2C1_MspInit+0x84>)
 8001140:	f014 fa06 	bl	8015550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001144:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001148:	f7ff fe8f 	bl	8000e6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3770      	adds	r7, #112	; 0x70
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	48000400 	.word	0x48000400

08001158 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001160:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001164:	f7ff fe9a 	bl	8000e9c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <I2C1_MspDeInit+0x2c>)
 800116e:	f014 fb5f 	bl	8015830 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <I2C1_MspDeInit+0x2c>)
 8001178:	f014 fb5a 	bl	8015830 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	48000400 	.word	0x48000400

08001188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
	}

return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f018 f906 	bl	801946c <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20030000 	.word	0x20030000
 800128c:	00000400 	.word	0x00000400
 8001290:	20000538 	.word	0x20000538
 8001294:	20008630 	.word	0x20008630

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <SystemInit+0x98>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <SystemInit+0x98>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <SystemInit+0x9c>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e2:	f023 0305 	bic.w	r3, r3, #5
 80012e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <SystemInit+0xa0>)
 8001304:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <SystemInit+0xa0>)
 800130c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	faf6fefb 	.word	0xfaf6fefb
 8001338:	22041000 	.word	0x22041000

0800133c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800133c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001340:	3304      	adds	r3, #4

08001342 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001342:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001344:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001346:	d3f9      	bcc.n	800133c <CopyDataInit>
  bx lr
 8001348:	4770      	bx	lr

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800134a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800134c:	3004      	adds	r0, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800134e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>
  bx lr
 8001352:	4770      	bx	lr

08001354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001358:	f7ff ff9e 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <LoopForever+0x8>)
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <LoopForever+0xc>)
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LoopForever+0x10>)
 8001362:	2300      	movs	r3, #0
 8001364:	f7ff ffed 	bl	8001342 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopForever+0x14>)
 800136a:	490c      	ldr	r1, [pc, #48]	; (800139c <LoopForever+0x18>)
 800136c:	2300      	movs	r3, #0
 800136e:	f7ff ffee 	bl	800134e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopForever+0x1c>)
 8001374:	490b      	ldr	r1, [pc, #44]	; (80013a4 <LoopForever+0x20>)
 8001376:	2300      	movs	r3, #0
 8001378:	f7ff ffe9 	bl	800134e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137c:	f018 f87c 	bl	8019478 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001380:	f7ff fa52 	bl	8000828 <main>

08001384 <LoopForever>:

LoopForever:
  b LoopForever
 8001384:	e7fe      	b.n	8001384 <LoopForever>
 8001386:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001388:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800138c:	20000004 	.word	0x20000004
 8001390:	200000d8 	.word	0x200000d8
 8001394:	0801a864 	.word	0x0801a864
  INIT_BSS _sbss, _ebss
 8001398:	200000d8 	.word	0x200000d8
 800139c:	2000862c 	.word	0x2000862c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80013a0:	20030000 	.word	0x20030000
 80013a4:	20030000 	.word	0x20030000

080013a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_IRQHandler>

080013aa <LL_AHB2_GRP1_EnableClock>:
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <VL53L1A2_Init+0xe4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4934      	ldr	r1, [pc, #208]	; (80014c0 <VL53L1A2_Init+0xe4>)
 80013ee:	600a      	str	r2, [r1, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d154      	bne.n	800149e <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80013f4:	f000 f8d4 	bl	80015a0 <_I2cFailRecover>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8001400:	f7ff fd60 	bl	8000ec4 <BSP_I2C1_Init>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d147      	bne.n	80014a2 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8001412:	463a      	mov	r2, r7
 8001414:	2302      	movs	r3, #2
 8001416:	2100      	movs	r1, #0
 8001418:	2086      	movs	r0, #134	; 0x86
 800141a:	f000 f953 	bl	80016c4 <_ExpanderRd>
 800141e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d13f      	bne.n	80014a6 <VL53L1A2_Init+0xca>
 8001426:	783b      	ldrb	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d13c      	bne.n	80014a6 <VL53L1A2_Init+0xca>
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b16      	cmp	r3, #22
 8001430:	d139      	bne.n	80014a6 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8001432:	463a      	mov	r2, r7
 8001434:	2302      	movs	r3, #2
 8001436:	2100      	movs	r1, #0
 8001438:	2084      	movs	r0, #132	; 0x84
 800143a:	f000 f943 	bl	80016c4 <_ExpanderRd>
 800143e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d131      	bne.n	80014aa <VL53L1A2_Init+0xce>
 8001446:	783b      	ldrb	r3, [r7, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d12e      	bne.n	80014aa <VL53L1A2_Init+0xce>
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b16      	cmp	r3, #22
 8001450:	d12b      	bne.n	80014aa <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <VL53L1A2_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001458:	23ff      	movs	r3, #255	; 0xff
 800145a:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 800145c:	23ff      	movs	r3, #255	; 0xff
 800145e:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001460:	463a      	mov	r2, r7
 8001462:	2302      	movs	r3, #2
 8001464:	2114      	movs	r1, #20
 8001466:	2086      	movs	r0, #134	; 0x86
 8001468:	f000 f95e 	bl	8001728 <_ExpanderWR>
 800146c:	6078      	str	r0, [r7, #4]

	  if (status)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d11c      	bne.n	80014ae <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001474:	23ff      	movs	r3, #255	; 0xff
 8001476:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001478:	23bf      	movs	r3, #191	; 0xbf
 800147a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 800147c:	463a      	mov	r2, r7
 800147e:	2302      	movs	r3, #2
 8001480:	2114      	movs	r1, #20
 8001482:	2084      	movs	r0, #132	; 0x84
 8001484:	f000 f950 	bl	8001728 <_ExpanderWR>
 8001488:	6078      	str	r0, [r7, #4]

	  if (status)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d110      	bne.n	80014b2 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <VL53L1A2_Init+0xe8>)
 8001492:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001496:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001498:	f000 f8f4 	bl	8001684 <_ExpandersSetAllIO>
 800149c:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800149e:	bf00      	nop
 80014a0:	e008      	b.n	80014b4 <VL53L1A2_Init+0xd8>
      goto done_err;
 80014a2:	bf00      	nop
 80014a4:	e006      	b.n	80014b4 <VL53L1A2_Init+0xd8>
      goto done_err;
 80014a6:	bf00      	nop
 80014a8:	e004      	b.n	80014b4 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80014aa:	bf00      	nop
 80014ac:	e002      	b.n	80014b4 <VL53L1A2_Init+0xd8>
		goto done_err;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <VL53L1A2_Init+0xd8>
		goto done_err;
 80014b2:	bf00      	nop
  return status;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000053c 	.word	0x2000053c
 80014c4:	20000540 	.word	0x20000540

080014c8 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d037      	beq.n	800154e <VL53L1A2_ResetId+0x86>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	dc4e      	bgt.n	8001580 <VL53L1A2_ResetId+0xb8>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01a      	beq.n	800151c <VL53L1A2_ResetId+0x54>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d14a      	bne.n	8001580 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 80014f6:	70da      	strb	r2, [r3, #3]

      if (state)
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 800150a:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 800150c:	2301      	movs	r3, #1
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <VL53L1A2_ResetId+0xd0>)
 8001510:	2113      	movs	r1, #19
 8001512:	2084      	movs	r0, #132	; 0x84
 8001514:	f000 f908 	bl	8001728 <_ExpanderWR>
 8001518:	60f8      	str	r0, [r7, #12]
      break;
 800151a:	e035      	b.n	8001588 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 8001528:	705a      	strb	r2, [r3, #1]

      if (state)
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 800153c:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800153e:	2301      	movs	r3, #1
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <VL53L1A2_ResetId+0xd4>)
 8001542:	2113      	movs	r1, #19
 8001544:	2086      	movs	r0, #134	; 0x86
 8001546:	f000 f8ef 	bl	8001728 <_ExpanderWR>
 800154a:	60f8      	str	r0, [r7, #12]
      break;
 800154c:	e01c      	b.n	8001588 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 800155a:	705a      	strb	r2, [r3, #1]

      if (state)
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <VL53L1A2_ResetId+0xcc>)
 800156e:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001570:	2301      	movs	r3, #1
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <VL53L1A2_ResetId+0xd4>)
 8001574:	2113      	movs	r1, #19
 8001576:	2086      	movs	r0, #134	; 0x86
 8001578:	f000 f8d6 	bl	8001728 <_ExpanderWR>
 800157c:	60f8      	str	r0, [r7, #12]
      break;
 800157e:	e003      	b.n	8001588 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	60fb      	str	r3, [r7, #12]
      goto done;
 8001586:	e000      	b.n	800158a <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001588:	bf00      	nop
  return status;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000540 	.word	0x20000540
 8001598:	20000543 	.word	0x20000543
 800159c:	20000541 	.word	0x20000541

080015a0 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <_I2cFailRecover+0xdc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e05e      	b.n	8001674 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff fef7 	bl	80013aa <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80015bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015c2:	2311      	movs	r3, #17
 80015c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	482c      	ldr	r0, [pc, #176]	; (8001680 <_I2cFailRecover+0xe0>)
 80015d0:	f013 ffbe 	bl	8015550 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015da:	2311      	movs	r3, #17
 80015dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015de:	2301      	movs	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80015e2:	463b      	mov	r3, r7
 80015e4:	4619      	mov	r1, r3
 80015e6:	4826      	ldr	r0, [pc, #152]	; (8001680 <_I2cFailRecover+0xe0>)
 80015e8:	f013 ffb2 	bl	8015550 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f2:	4823      	ldr	r0, [pc, #140]	; (8001680 <_I2cFailRecover+0xe0>)
 80015f4:	f014 fa12 	bl	8015a1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fe:	4820      	ldr	r0, [pc, #128]	; (8001680 <_I2cFailRecover+0xe0>)
 8001600:	f014 fa0c 	bl	8015a1c <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	e014      	b.n	8001634 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <_I2cFailRecover+0xe0>)
 8001612:	f014 fa03 	bl	8015a1c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f013 fe96 	bl	8015348 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	4817      	ldr	r0, [pc, #92]	; (8001680 <_I2cFailRecover+0xe0>)
 8001624:	f014 f9fa 	bl	8015a1c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f013 fe8d 	bl	8015348 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	3301      	adds	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d9e7      	bls.n	800160a <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 800163a:	7dbb      	ldrb	r3, [r7, #22]
 800163c:	3301      	adds	r3, #1
 800163e:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	480e      	ldr	r0, [pc, #56]	; (8001680 <_I2cFailRecover+0xe0>)
 8001646:	f014 f9d1 	bl	80159ec <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_I2cFailRecover+0xb6>
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	2b06      	cmp	r3, #6
 8001654:	d9d6      	bls.n	8001604 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <_I2cFailRecover+0xe0>)
 800165c:	f014 f9c6 	bl	80159ec <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001666:	f06f 0304 	mvn.w	r3, #4
 800166a:	e003      	b.n	8001674 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <_I2cFailRecover+0xdc>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000544 	.word	0x20000544
 8001680:	48000400 	.word	0x48000400

08001684 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800168a:	2302      	movs	r3, #2
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <_ExpandersSetAllIO+0x38>)
 800168e:	2112      	movs	r1, #18
 8001690:	2086      	movs	r0, #134	; 0x86
 8001692:	f000 f849 	bl	8001728 <_ExpanderWR>
 8001696:	6078      	str	r0, [r7, #4]

  if (status)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800169e:	2302      	movs	r3, #2
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <_ExpandersSetAllIO+0x3c>)
 80016a2:	2112      	movs	r1, #18
 80016a4:	2084      	movs	r0, #132	; 0x84
 80016a6:	f000 f83f 	bl	8001728 <_ExpanderWR>
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	e000      	b.n	80016b0 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80016ae:	bf00      	nop

done_err:
  return status;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000540 	.word	0x20000540
 80016c0:	20000542 	.word	0x20000542

080016c4 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	b299      	uxth	r1, r3
 80016dc:	f107 0213 	add.w	r2, r7, #19
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	480f      	ldr	r0, [pc, #60]	; (8001724 <_ExpanderRd+0x60>)
 80016e8:	f014 fa82 	bl	8015bf0 <HAL_I2C_Master_Transmit>
 80016ec:	4603      	mov	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

    if (status)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d110      	bne.n	8001718 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	b299      	uxth	r1, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2064      	movs	r0, #100	; 0x64
 8001702:	fb00 f303 	mul.w	r3, r0, r3
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <_ExpanderRd+0x60>)
 800170e:	f014 fb63 	bl	8015dd8 <HAL_I2C_Master_Receive>
 8001712:	4603      	mov	r3, r0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e000      	b.n	800171a <_ExpanderRd+0x56>
      break;
 8001718:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 800171a:	697b      	ldr	r3, [r7, #20]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200004e0 	.word	0x200004e0

08001728 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	3301      	adds	r3, #1
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	f017 feba 	bl	80194c0 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b299      	uxth	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3301      	adds	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	f107 0214 	add.w	r2, r7, #20
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	9000      	str	r0, [sp, #0]
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <_ExpanderWR+0x4c>)
 8001762:	f014 fa45 	bl	8015bf0 <HAL_I2C_Master_Transmit>
 8001766:	4603      	mov	r3, r0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800176c:	4618      	mov	r0, r3
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200004e0 	.word	0x200004e0

08001778 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d903      	bls.n	800178e <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001786:	f06f 0301 	mvn.w	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e014      	b.n	80017b8 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800178e:	f7ff fe25 	bl	80013dc <VL53L1A2_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001798:	f06f 0303 	mvn.w	r3, #3
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e00b      	b.n	80017b8 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80017a0:	2101      	movs	r1, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8ae 	bl	8001904 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80017a8:	2100      	movs	r1, #0
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f8aa 	bl	8001904 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f8e7 	bl	8001984 <VL53L1CB_Probe>
 80017b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d903      	bls.n	80017dc <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017d4:	f06f 0301 	mvn.w	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e012      	b.n	8001802 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	490b      	ldr	r1, [pc, #44]	; (8001810 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017ea:	6839      	ldr	r1, [r7, #0]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4798      	blx	r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da03      	bge.n	80017fe <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80017f6:	f06f 0304 	mvn.w	r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e001      	b.n	8001802 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000554 	.word	0x20000554
 8001810:	20000548 	.word	0x20000548

08001814 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d903      	bls.n	800182c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001824:	f06f 0301 	mvn.w	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e012      	b.n	8001852 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	490b      	ldr	r1, [pc, #44]	; (8001860 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4798      	blx	r3
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	da03      	bge.n	800184e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001846:	f06f 0304 	mvn.w	r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e001      	b.n	8001852 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000554 	.word	0x20000554
 8001860:	20000548 	.word	0x20000548

08001864 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d903      	bls.n	800187c <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001874:	f06f 0301 	mvn.w	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e012      	b.n	80018a2 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	490b      	ldr	r1, [pc, #44]	; (80018b0 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	4610      	mov	r0, r2
 800188e:	4798      	blx	r3
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	da03      	bge.n	800189e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001896:	f06f 0304 	mvn.w	r3, #4
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e001      	b.n	80018a2 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000554 	.word	0x20000554
 80018b0:	20000548 	.word	0x20000548

080018b4 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d903      	bls.n	80018cc <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018c4:	f06f 0301 	mvn.w	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e012      	b.n	80018f2 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	490b      	ldr	r1, [pc, #44]	; (8001900 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	4610      	mov	r0, r2
 80018de:	4798      	blx	r3
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da03      	bge.n	80018ee <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018e6:	f06f 0304 	mvn.w	r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e001      	b.n	80018f2 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000554 	.word	0x20000554
 8001900:	20000548 	.word	0x20000548

08001904 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d903      	bls.n	800191c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001914:	f06f 0301 	mvn.w	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e02e      	b.n	800197a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d112      	bne.n	8001948 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fdcd 	bl	80014c8 <VL53L1A2_ResetId>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	da03      	bge.n	800193c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001934:	f06f 0303 	mvn.w	r3, #3
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e01e      	b.n	800197a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 800193c:	2002      	movs	r0, #2
 800193e:	f013 fd03 	bl	8015348 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e018      	b.n	800197a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d112      	bne.n	8001974 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fdb7 	bl	80014c8 <VL53L1A2_ResetId>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	da03      	bge.n	8001968 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001960:	f06f 0303 	mvn.w	r3, #3
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e008      	b.n	800197a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001968:	2002      	movs	r0, #2
 800196a:	f013 fced 	bl	8015348 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e002      	b.n	800197a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001974:	f06f 0301 	mvn.w	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 800198c:	2352      	movs	r3, #82	; 0x52
 800198e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <VL53L1CB_Probe+0xf0>)
 8001992:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <VL53L1CB_Probe+0xf4>)
 8001996:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001998:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <VL53L1CB_Probe+0xf8>)
 800199a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <VL53L1CB_Probe+0xfc>)
 800199e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <VL53L1CB_Probe+0x100>)
 80019a2:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f642 2290 	movw	r2, #10896	; 0x2a90
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <VL53L1CB_Probe+0x104>)
 80019b0:	4413      	add	r3, r2
 80019b2:	f107 020c 	add.w	r2, r7, #12
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f013 f824 	bl	8014a06 <VL53L1CB_RegisterBusIO>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019c4:	f06f 0304 	mvn.w	r3, #4
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e04d      	b.n	8001a68 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f642 2290 	movw	r2, #10896	; 0x2a90
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <VL53L1CB_Probe+0x104>)
 80019d8:	4413      	add	r3, r2
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f013 f8cc 	bl	8014b7e <VL53L1CB_ReadID>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019ec:	f06f 0304 	mvn.w	r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	e039      	b.n	8001a68 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d003      	beq.n	8001a06 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80019fe:	f06f 0306 	mvn.w	r3, #6
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e030      	b.n	8001a68 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <VL53L1CB_Probe+0x108>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <VL53L1CB_Probe+0x10c>)
 8001a0a:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <VL53L1CB_Probe+0x104>)
 8001a18:	441a      	add	r2, r3
 8001a1a:	491e      	ldr	r1, [pc, #120]	; (8001a94 <VL53L1CB_Probe+0x110>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <VL53L1CB_Probe+0x108>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	491a      	ldr	r1, [pc, #104]	; (8001a94 <VL53L1CB_Probe+0x110>)
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a30:	4610      	mov	r0, r2
 8001a32:	4798      	blx	r3
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a3a:	f06f 0304 	mvn.w	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e012      	b.n	8001a68 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <VL53L1CB_Probe+0x108>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4912      	ldr	r1, [pc, #72]	; (8001a94 <VL53L1CB_Probe+0x110>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a50:	4911      	ldr	r1, [pc, #68]	; (8001a98 <VL53L1CB_Probe+0x114>)
 8001a52:	4610      	mov	r0, r2
 8001a54:	4798      	blx	r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a5c:	f06f 0304 	mvn.w	r3, #4
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e001      	b.n	8001a68 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	08000ec5 	.word	0x08000ec5
 8001a78:	08000f41 	.word	0x08000f41
 8001a7c:	08000f91 	.word	0x08000f91
 8001a80:	08000fe5 	.word	0x08000fe5
 8001a84:	08001039 	.word	0x08001039
 8001a88:	20000568 	.word	0x20000568
 8001a8c:	20000554 	.word	0x20000554
 8001a90:	20000034 	.word	0x20000034
 8001a94:	20000548 	.word	0x20000548
 8001a98:	20000558 	.word	0x20000558

08001a9c <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001aa8:	793b      	ldrb	r3, [r7, #4]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	d808      	bhi.n	8001ac0 <CheckValidRectRoi+0x24>
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d805      	bhi.n	8001ac0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d802      	bhi.n	8001ac0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d901      	bls.n	8001ac4 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ac0:	23fc      	movs	r3, #252	; 0xfc
 8001ac2:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001ac4:	793a      	ldrb	r2, [r7, #4]
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d803      	bhi.n	8001ad4 <CheckValidRectRoi+0x38>
 8001acc:	797a      	ldrb	r2, [r7, #5]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d201      	bcs.n	8001ad8 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ad4:	23fc      	movs	r3, #252	; 0xfc
 8001ad6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3318      	adds	r3, #24
 8001afc:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001b04:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f012 fd7d 	bl	8014610 <VL53L1_WrByte>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 fc56 	bl	80043fe <VL53L1_data_init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10b      	bne.n	8001b76 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3318      	adds	r3, #24
 8001b62:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f017 fcb3 	bl	80194dc <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73bb      	strb	r3, [r7, #14]
 8001b8e:	e012      	b.n	8001bb6 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d112      	bne.n	8001bbe <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fc90 	bl	80024c6 <VL53L1_SetLimitCheckEnable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	73bb      	strb	r3, [r7, #14]
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d9e9      	bls.n	8001b90 <VL53L1_DataInit+0x5a>
 8001bbc:	e000      	b.n	8001bc0 <VL53L1_DataInit+0x8a>
		else
			break;
 8001bbe:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001bc8:	2102      	movs	r1, #2
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f005 faef 	bl	80071ae <VL53L1_set_dmax_mode>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001c02:	2101      	movs	r1, #1
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f947 	bl	8001e98 <VL53L1_SetPresetMode>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001c0e:	2102      	movs	r1, #2
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f98b 	bl	8001f2c <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f001 fe69 	bl	80038fc <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001c42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f011 ffa1 	bl	8013b8e <VL53L1_poll_for_boot_completion>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	603a      	str	r2, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001c70:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <ComputeDevicePresetMode+0x138>)
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	8019      	strh	r1, [r3, #0]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	0c12      	lsrs	r2, r2, #16
 8001c80:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001c82:	4a45      	ldr	r2, [pc, #276]	; (8001d98 <ComputeDevicePresetMode+0x13c>)
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	8019      	strh	r1, [r3, #0]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	0c12      	lsrs	r2, r2, #16
 8001c92:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001c94:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <ComputeDevicePresetMode+0x140>)
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	8019      	strh	r1, [r3, #0]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	0c12      	lsrs	r2, r2, #16
 8001ca4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <ComputeDevicePresetMode+0x144>)
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	8019      	strh	r1, [r3, #0]
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	0c12      	lsrs	r2, r2, #16
 8001cb6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <ComputeDevicePresetMode+0x148>)
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	8019      	strh	r1, [r3, #0]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	0c12      	lsrs	r2, r2, #16
 8001cc8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001cd0:	79bb      	ldrb	r3, [r7, #6]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d002      	beq.n	8001cdc <ComputeDevicePresetMode+0x80>
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <ComputeDevicePresetMode+0x86>
 8001cda:	e005      	b.n	8001ce8 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	77bb      	strb	r3, [r7, #30]
		break;
 8001ce0:	e004      	b.n	8001cec <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	77bb      	strb	r3, [r7, #30]
		break;
 8001ce6:	e001      	b.n	8001cec <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d845      	bhi.n	8001d80 <ComputeDevicePresetMode+0x124>
 8001cf4:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <ComputeDevicePresetMode+0xa0>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d31 	.word	0x08001d31
 8001d00:	08001d41 	.word	0x08001d41
 8001d04:	08001d51 	.word	0x08001d51
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d81 	.word	0x08001d81
 8001d10:	08001d81 	.word	0x08001d81
 8001d14:	08001d71 	.word	0x08001d71
 8001d18:	08001d61 	.word	0x08001d61
 8001d1c:	08001d79 	.word	0x08001d79
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001d20:	7fbb      	ldrb	r3, [r7, #30]
 8001d22:	3320      	adds	r3, #32
 8001d24:	443b      	add	r3, r7
 8001d26:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	701a      	strb	r2, [r3, #0]
		break;
 8001d2e:	e029      	b.n	8001d84 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8001d30:	7fbb      	ldrb	r3, [r7, #30]
 8001d32:	3320      	adds	r3, #32
 8001d34:	443b      	add	r3, r7
 8001d36:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
		break;
 8001d3e:	e021      	b.n	8001d84 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001d40:	7fbb      	ldrb	r3, [r7, #30]
 8001d42:	3320      	adds	r3, #32
 8001d44:	443b      	add	r3, r7
 8001d46:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
		break;
 8001d4e:	e019      	b.n	8001d84 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001d50:	7fbb      	ldrb	r3, [r7, #30]
 8001d52:	3320      	adds	r3, #32
 8001d54:	443b      	add	r3, r7
 8001d56:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	701a      	strb	r2, [r3, #0]
		break;
 8001d5e:	e011      	b.n	8001d84 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001d60:	7fbb      	ldrb	r3, [r7, #30]
 8001d62:	3320      	adds	r3, #32
 8001d64:	443b      	add	r3, r7
 8001d66:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
		break;
 8001d6e:	e009      	b.n	8001d84 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2211      	movs	r2, #17
 8001d74:	701a      	strb	r2, [r3, #0]
		break;
 8001d76:	e005      	b.n	8001d84 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2227      	movs	r2, #39	; 0x27
 8001d7c:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8001d7e:	e001      	b.n	8001d84 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001d80:	23f8      	movs	r3, #248	; 0xf8
 8001d82:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8001d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3724      	adds	r7, #36	; 0x24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	0801a6ac 	.word	0x0801a6ac
 8001d98:	0801a6b0 	.word	0x0801a6b0
 8001d9c:	0801a6b4 	.word	0x0801a6b4
 8001da0:	0801a6b8 	.word	0x0801a6b8
 8001da4:	0801a6bc 	.word	0x0801a6bc

08001da8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af04      	add	r7, sp, #16
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	72fb      	strb	r3, [r7, #11]
 8001db6:	4613      	mov	r3, r2
 8001db8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d002      	beq.n	8001ddc <SetPresetMode+0x34>
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d103      	bne.n	8001de4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001ddc:	2340      	movs	r3, #64	; 0x40
 8001dde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001de2:	e002      	b.n	8001dea <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001de4:	2320      	movs	r3, #32
 8001de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001dea:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001dee:	7ab9      	ldrb	r1, [r7, #10]
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff32 	bl	8001c5c <ComputeDevicePresetMode>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001dfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001e06:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001e0a:	f107 001c 	add.w	r0, r7, #28
 8001e0e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f002 ffaf 	bl	8004d84 <VL53L1_get_preset_mode_timing_cfg>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d112      	bne.n	8001e5a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001e34:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001e38:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001e3a:	69fd      	ldr	r5, [r7, #28]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	9102      	str	r1, [sp, #8]
 8001e44:	9201      	str	r2, [sp, #4]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	462b      	mov	r3, r5
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	4601      	mov	r1, r0
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f003 f8ee 	bl	8005030 <VL53L1_set_preset_mode>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001e5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e68:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001e6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e78:	461a      	mov	r2, r3
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8001e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}

08001e98 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f00c f94a 	bl	800e146 <VL53L1_low_power_auto_data_init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d101      	bne.n	8001ec0 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8001ec0:	7bba      	ldrb	r2, [r7, #14]
 8001ec2:	78f9      	ldrb	r1, [r7, #3]
 8001ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff6d 	bl	8001da8 <SetPresetMode>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d117      	bne.n	8001f0a <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d005      	beq.n	8001eec <VL53L1_SetPresetMode+0x54>
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d002      	beq.n	8001eec <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d107      	bne.n	8001efc <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001eec:	f24a 0128 	movw	r1, #41000	; 0xa028
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8a9 	bl	8002048 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e006      	b.n	8001f0a <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001efc:	f248 2135 	movw	r1, #33333	; 0x8235
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8a1 	bl	8002048 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8001f12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa68 	bl	80023ec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0a2      	sub	sp, #136	; 0x88
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f50:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001f54:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001f58:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d105      	bne.n	8001f6c <VL53L1_SetDistanceMode+0x40>
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d002      	beq.n	8001f6c <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001f66:	f06f 0303 	mvn.w	r3, #3
 8001f6a:	e069      	b.n	8002040 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d008      	beq.n	8001f84 <VL53L1_SetDistanceMode+0x58>
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d005      	beq.n	8001f84 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d002      	beq.n	8001f84 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001f7e:	f06f 0303 	mvn.w	r3, #3
 8001f82:	e05d      	b.n	8002040 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8001f84:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f002 fede 	bl	8004d54 <VL53L1_get_zone_config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001fa6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001fae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fb2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001fb6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f002 fd8a 	bl	8004ad4 <VL53L1_get_timeouts_us>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8001fc6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fee5 	bl	8001da8 <SetPresetMode>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8001fe4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001ffa:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002002:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002004:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f002 fd2a 	bl	8004a62 <VL53L1_set_timeouts_us>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002014:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800201c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8002022:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f002 fe4c 	bl	8004cce <VL53L1_set_zone_config>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 800203c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8002040:	4618      	mov	r0, r3
 8002042:	3788      	adds	r7, #136	; 0x88
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800206c:	4b75      	ldr	r3, [pc, #468]	; (8002244 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800206e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d902      	bls.n	800207e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002078:	23fc      	movs	r3, #252	; 0xfc
 800207a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800207e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002086:	f107 031a 	add.w	r3, r7, #26
 800208a:	461a      	mov	r2, r3
 800208c:	2105      	movs	r1, #5
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb9a 	bl	80027c8 <VL53L1_GetSequenceStepEnable>
 8002094:	4603      	mov	r3, r0
 8002096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800209a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80020a2:	f107 0319 	add.w	r3, r7, #25
 80020a6:	461a      	mov	r2, r3
 80020a8:	2106      	movs	r1, #6
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fb8c 	bl	80027c8 <VL53L1_GetSequenceStepEnable>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80020b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	f107 010c 	add.w	r1, r7, #12
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f002 fd02 	bl	8004ad4 <VL53L1_get_timeouts_us>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80020d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 80a0 	bne.w	8002220 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020e6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80020ea:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80020f4:	7efb      	ldrb	r3, [r7, #27]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d861      	bhi.n	80021c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	080021a9 	.word	0x080021a9
 8002108:	080021a9 	.word	0x080021a9
 800210c:	08002145 	.word	0x08002145
 8002110:	08002129 	.word	0x08002129
 8002114:	080021c1 	.word	0x080021c1
 8002118:	080021c1 	.word	0x080021c1
 800211c:	080021b5 	.word	0x080021b5
 8002120:	0800216b 	.word	0x0800216b
 8002124:	080021a9 	.word	0x080021a9
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002128:	7ebb      	ldrb	r3, [r7, #26]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d002      	beq.n	8002134 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 800212e:	7e7b      	ldrb	r3, [r7, #25]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d103      	bne.n	800213c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8002134:	f241 3388 	movw	r3, #5000	; 0x1388
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800213a:	e044      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002142:	e040      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800214a:	7ebb      	ldrb	r3, [r7, #26]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d002      	beq.n	8002156 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8002150:	7e7b      	ldrb	r3, [r7, #25]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d103      	bne.n	800215e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8002156:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	e002      	b.n	8002164 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 800215e:	f245 4360 	movw	r3, #21600	; 0x5460
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002168:	e02d      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002170:	23f5      	movs	r3, #245	; 0xf5
 8002172:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	461a      	mov	r2, r3
 800217a:	f248 0188 	movw	r1, #32904	; 0x8088
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f005 f88c 	bl	800729c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	dd07      	ble.n	800219a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	22f5      	movs	r2, #245	; 0xf5
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	461a      	mov	r2, r3
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	4413      	add	r3, r2
 8002198:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80021a6:	e00e      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80021a8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80021ae:	2306      	movs	r3, #6
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80021b2:	e008      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80021ba:	3308      	adds	r3, #8
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80021be:	e002      	b.n	80021c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80021c0:	23f8      	movs	r3, #248	; 0xf8
 80021c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d803      	bhi.n	80021d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80021ce:	23fc      	movs	r3, #252	; 0xfc
 80021d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021d4:	e003      	b.n	80021de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80021dc:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80021de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11c      	bne.n	8002220 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d203      	bcs.n	80021f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80021ee:	23fc      	movs	r3, #252	; 0xfc
 80021f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021f4:	e00d      	b.n	8002212 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f002 fc2b 	bl	8004a62 <VL53L1_set_timeouts_us>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8002212:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8002220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002236:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800223a:	4618      	mov	r0, r3
 800223c:	3730      	adds	r7, #48	; 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	00086470 	.word	0x00086470
 8002248:	00989680 	.word	0x00989680

0800224c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800227a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002282:	f107 031b 	add.w	r3, r7, #27
 8002286:	461a      	mov	r2, r3
 8002288:	2105      	movs	r1, #5
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa9c 	bl	80027c8 <VL53L1_GetSequenceStepEnable>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8002296:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800229e:	f107 031a 	add.w	r3, r7, #26
 80022a2:	461a      	mov	r2, r3
 80022a4:	2106      	movs	r1, #6
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa8e 	bl	80027c8 <VL53L1_GetSequenceStepEnable>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80022b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	f107 0214 	add.w	r2, r7, #20
 80022c2:	f107 010c 	add.w	r1, r7, #12
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f002 fc04 	bl	8004ad4 <VL53L1_get_timeouts_us>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80022d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d179      	bne.n	80023ce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022e0:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80022e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80022e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ec:	3b01      	subs	r3, #1
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d869      	bhi.n	80023c6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	080023a5 	.word	0x080023a5
 80022fc:	080023a5 	.word	0x080023a5
 8002300:	0800233f 	.word	0x0800233f
 8002304:	0800231d 	.word	0x0800231d
 8002308:	080023c7 	.word	0x080023c7
 800230c:	080023c7 	.word	0x080023c7
 8002310:	080023b7 	.word	0x080023b7
 8002314:	08002367 	.word	0x08002367
 8002318:	080023a5 	.word	0x080023a5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800231c:	7efb      	ldrb	r3, [r7, #27]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d002      	beq.n	8002328 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8002322:	7ebb      	ldrb	r3, [r7, #26]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800232e:	3308      	adds	r3, #8
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8002332:	e04d      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800233c:	e048      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800233e:	7efb      	ldrb	r3, [r7, #27]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8002344:	7ebb      	ldrb	r3, [r7, #26]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d106      	bne.n	8002358 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002350:	3334      	adds	r3, #52	; 0x34
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8002356:	e03b      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800235e:	3330      	adds	r3, #48	; 0x30
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002364:	e034      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002366:	23f5      	movs	r3, #245	; 0xf5
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	461a      	mov	r2, r3
 8002370:	f248 0188 	movw	r1, #32904	; 0x8088
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f004 ff91 	bl	800729c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	dd07      	ble.n	8002390 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	22f5      	movs	r2, #245	; 0xf5
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	4413      	add	r3, r2
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002396:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023a2:	e015      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023b4:	e00c      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80023c0:	3308      	adds	r3, #8
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023c4:	e004      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80023c6:	23f8      	movs	r3, #248	; 0xf8
 80023c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023cc:	e000      	b.n	80023d0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80023ce:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80023d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023dc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80023de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop

080023ec <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f002 facc 	bl	80049b0 <VL53L1_set_inter_measurement_period_ms>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f002 fae3 	bl	8004a0c <VL53L1_get_inter_measurement_period_ms>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	019b      	lsls	r3, r3, #6
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8002452:	fba1 1303 	umull	r1, r3, r1, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	460b      	mov	r3, r1
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <SetLimitValue+0x1e>
 800248c:	2b01      	cmp	r3, #1
 800248e:	d009      	beq.n	80024a4 <SetLimitValue+0x30>
 8002490:	e011      	b.n	80024b6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0b9b      	lsrs	r3, r3, #14
 8002496:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8002498:	8abb      	ldrh	r3, [r7, #20]
 800249a:	4619      	mov	r1, r3
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f003 f988 	bl	80057b2 <VL53L1_set_lite_sigma_threshold>
		break;
 80024a2:	e00a      	b.n	80024ba <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0a5b      	lsrs	r3, r3, #9
 80024a8:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80024aa:	8abb      	ldrh	r3, [r7, #20]
 80024ac:	4619      	mov	r1, r3
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f003 f9ad 	bl	800580e <VL53L1_set_lite_min_count_rate>
		break;
 80024b4:	e001      	b.n	80024ba <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80024b6:	23fc      	movs	r3, #252	; 0xfc
 80024b8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	807b      	strh	r3, [r7, #2]
 80024d2:	4613      	mov	r3, r2
 80024d4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d902      	bls.n	80024ea <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80024e4:	23fc      	movs	r3, #252	; 0xfc
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e015      	b.n	8002516 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 80024ea:	787b      	ldrb	r3, [r7, #1]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	e007      	b.n	8002506 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	4619      	mov	r1, r3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ffb1 	bl	8002474 <SetLimitValue>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10e      	bne.n	800253c <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800251e:	787b      	ldrb	r3, [r7, #1]
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2da      	uxtb	r2, r3
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	4611      	mov	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002536:	3334      	adds	r3, #52	; 0x34
 8002538:	460a      	mov	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800253c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800255a:	897b      	ldrh	r3, [r7, #10]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d905      	bls.n	800256c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002560:	23fc      	movs	r3, #252	; 0xfc
 8002562:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e00a      	b.n	8002582 <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800256c:	897b      	ldrh	r3, [r7, #10]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002576:	3334      	adds	r3, #52	; 0x34
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7dba      	ldrb	r2, [r7, #22]
 8002580:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	460b      	mov	r3, r1
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <VL53L1_GetLimitCheckValue+0x22>
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00c      	beq.n	80025cc <VL53L1_GetLimitCheckValue+0x3a>
 80025b2:	e017      	b.n	80025e4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f003 f8e2 	bl	8005784 <VL53L1_get_lite_sigma_threshold>
 80025c0:	4603      	mov	r3, r0
 80025c2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80025c4:	8abb      	ldrh	r3, [r7, #20]
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	61bb      	str	r3, [r7, #24]
		break;
 80025ca:	e00d      	b.n	80025e8 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80025cc:	f107 0316 	add.w	r3, r7, #22
 80025d0:	4619      	mov	r1, r3
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f003 f904 	bl	80057e0 <VL53L1_get_lite_min_count_rate>
 80025d8:	4603      	mov	r3, r0
 80025da:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80025dc:	8afb      	ldrh	r3, [r7, #22]
 80025de:	025b      	lsls	r3, r3, #9
 80025e0:	61bb      	str	r3, [r7, #24]
		break;
 80025e2:	e001      	b.n	80025e8 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80025e4:	23fc      	movs	r3, #252	; 0xfc
 80025e6:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80025e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d129      	bne.n	8002644 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d113      	bne.n	800261e <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800260c:	897b      	ldrh	r3, [r7, #10]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002616:	3334      	adds	r3, #52	; 0x34
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e012      	b.n	8002644 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800263e:	3334      	adds	r3, #52	; 0x34
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002644:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002648:	4618      	mov	r0, r3
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0a0      	sub	sp, #128	; 0x80
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800266c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002670:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8002674:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002678:	2b02      	cmp	r3, #2
 800267a:	d102      	bne.n	8002682 <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 800267c:	2310      	movs	r3, #16
 800267e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800268a:	429a      	cmp	r2, r3
 800268c:	d303      	bcc.n	8002696 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002696:	23fc      	movs	r3, #252	; 0xfc
 8002698:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 800269c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d17e      	bne.n	80027a2 <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80026a4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80026a8:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80026ba:	e06a      	b.n	8002792 <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80026bc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	f107 0208 	add.w	r2, r7, #8
 80026ca:	3301      	adds	r3, #1
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80026d0:	68b8      	ldr	r0, [r7, #8]
 80026d2:	f7ff f9e3 	bl	8001a9c <CheckValidRectRoi>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80026dc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d15d      	bne.n	80027a0 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80026e4:	7abb      	ldrb	r3, [r7, #10]
 80026e6:	461a      	mov	r2, r3
 80026e8:	7a3b      	ldrb	r3, [r7, #8]
 80026ea:	4413      	add	r3, r2
 80026ec:	3301      	adds	r3, #1
					/ 2;
 80026ee:	0fda      	lsrs	r2, r3, #31
 80026f0:	4413      	add	r3, r2
 80026f2:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80026f4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80026f8:	7a7b      	ldrb	r3, [r7, #9]
 80026fa:	461a      	mov	r2, r3
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	4413      	add	r3, r2
 8002700:	3301      	adds	r3, #1
					/ 2;
 8002702:	0fda      	lsrs	r2, r3, #31
 8002704:	4413      	add	r3, r2
 8002706:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002708:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 800270c:	7aba      	ldrb	r2, [r7, #10]
 800270e:	7a3b      	ldrb	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002716:	7a7a      	ldrb	r2, [r7, #9]
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8002720:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002724:	2b02      	cmp	r3, #2
 8002726:	d903      	bls.n	8002730 <VL53L1_SetROI+0xe0>
 8002728:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800272c:	2b02      	cmp	r3, #2
 800272e:	d803      	bhi.n	8002738 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002730:	23fc      	movs	r3, #252	; 0xfc
 8002732:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002736:	e034      	b.n	80027a2 <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002738:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800273c:	3306      	adds	r3, #6
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	3380      	adds	r3, #128	; 0x80
 8002742:	443b      	add	r3, r7
 8002744:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002748:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 800274c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002750:	3306      	adds	r3, #6
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	3380      	adds	r3, #128	; 0x80
 8002756:	443b      	add	r3, r7
 8002758:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800275c:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8002760:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002764:	3306      	adds	r3, #6
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3380      	adds	r3, #128	; 0x80
 800276a:	443b      	add	r3, r7
 800276c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8002770:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8002774:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002778:	3306      	adds	r3, #6
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3380      	adds	r3, #128	; 0x80
 800277e:	443b      	add	r3, r7
 8002780:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8002784:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002788:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800278c:	3301      	adds	r3, #1
 800278e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 800279a:	429a      	cmp	r2, r3
 800279c:	d38e      	bcc.n	80026bc <VL53L1_SetROI+0x6c>
 800279e:	e000      	b.n	80027a2 <VL53L1_SetROI+0x152>
				break;
 80027a0:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80027a2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f002 fa8c 	bl	8004cce <VL53L1_set_zone_config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80027bc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3780      	adds	r7, #128	; 0x80
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	460b      	mov	r3, r1
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f002 f9e3 	bl	8004bac <VL53L1_get_sequence_config_bit>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80027ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3318      	adds	r3, #24
 8002808:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7edb      	ldrb	r3, [r3, #27]
 800280e:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d002      	beq.n	800281c <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f001 fc8e 	bl	8004138 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800281c:	2300      	movs	r3, #0
 800281e:	77bb      	strb	r3, [r7, #30]
 8002820:	e01a      	b.n	8002858 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002822:	7fbb      	ldrb	r3, [r7, #30]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800282a:	330c      	adds	r3, #12
 800282c:	2100      	movs	r1, #0
 800282e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002832:	7fbb      	ldrb	r3, [r7, #30]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800283c:	3320      	adds	r3, #32
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002842:	7fbb      	ldrb	r3, [r7, #30]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002852:	7fbb      	ldrb	r3, [r7, #30]
 8002854:	3301      	adds	r3, #1
 8002856:	77bb      	strb	r3, [r7, #30]
 8002858:	7fbb      	ldrb	r3, [r7, #30]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d9e1      	bls.n	8002822 <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002864:	2200      	movs	r2, #0
 8002866:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800287c:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8002880:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002882:	7dbb      	ldrb	r3, [r7, #22]
 8002884:	2b63      	cmp	r3, #99	; 0x63
 8002886:	dc12      	bgt.n	80028ae <VL53L1_StartMeasurement+0xb6>
 8002888:	2b62      	cmp	r3, #98	; 0x62
 800288a:	da0d      	bge.n	80028a8 <VL53L1_StartMeasurement+0xb0>
 800288c:	2b05      	cmp	r3, #5
 800288e:	dc0e      	bgt.n	80028ae <VL53L1_StartMeasurement+0xb6>
 8002890:	2b04      	cmp	r3, #4
 8002892:	da09      	bge.n	80028a8 <VL53L1_StartMeasurement+0xb0>
 8002894:	2b02      	cmp	r3, #2
 8002896:	dc02      	bgt.n	800289e <VL53L1_StartMeasurement+0xa6>
 8002898:	2b00      	cmp	r3, #0
 800289a:	da05      	bge.n	80028a8 <VL53L1_StartMeasurement+0xb0>
 800289c:	e007      	b.n	80028ae <VL53L1_StartMeasurement+0xb6>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d105      	bne.n	80028ae <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	77fb      	strb	r3, [r7, #31]
		break;
 80028a6:	e004      	b.n	80028b2 <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80028a8:	23f2      	movs	r3, #242	; 0xf2
 80028aa:	77fb      	strb	r3, [r7, #31]
		break;
 80028ac:	e001      	b.n	80028b2 <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80028ae:	23fd      	movs	r3, #253	; 0xfd
 80028b0:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80028b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11f      	bne.n	80028fa <VL53L1_StartMeasurement+0x102>
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d11c      	bne.n	80028fa <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fcc0 	bl	800224c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80028cc:	4603      	mov	r3, r0
 80028ce:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <VL53L1_StartMeasurement+0x13c>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fda2 	bl	800242c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80028e8:	4603      	mov	r3, r0
 80028ea:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d901      	bls.n	80028fa <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80028f6:	23fc      	movs	r3, #252	; 0xfc
 80028f8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 80028fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2206      	movs	r2, #6
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f002 ff97 	bl	800583c <VL53L1_init_and_start_range>
 800290e:	4603      	mov	r3, r0
 8002910:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002912:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002920:	2204      	movs	r2, #4
 8002922:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f003 fa47 	bl	8005dd8 <VL53L1_stop_range>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7edb      	ldrb	r3, [r3, #27]
 8002952:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002954:	7bbb      	ldrb	r3, [r7, #14]
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d002      	beq.n	8002960 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f001 fd1a 	bl	8004394 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800296e:	2203      	movs	r2, #3
 8002970:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7edb      	ldrb	r3, [r3, #27]
 8002990:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002992:	7bbb      	ldrb	r3, [r7, #14]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f003 ff4b 	bl	8006832 <VL53L1_clear_interrupt_and_enable_next_range>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80029a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f011 f8ac 	bl	8013b1a <VL53L1_is_new_data_ready>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	603a      	str	r2, [r7, #0]
 80029dc:	80fb      	strh	r3, [r7, #6]
 80029de:	460b      	mov	r3, r1
 80029e0:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 80029e2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80029e6:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 80029e8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80029ec:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 80029ee:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80029f2:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 80029f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80029f8:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 80029fa:	797b      	ldrb	r3, [r7, #5]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d002      	beq.n	8002a06 <GenNewPresetMode+0x34>
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d012      	beq.n	8002a2a <GenNewPresetMode+0x58>
 8002a04:	e023      	b.n	8002a4e <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dd03      	ble.n	8002a18 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2203      	movs	r2, #3
 8002a14:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002a16:	e02c      	b.n	8002a72 <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	dd27      	ble.n	8002a72 <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
		break;
 8002a28:	e023      	b.n	8002a72 <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002a2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a2e:	893b      	ldrh	r3, [r7, #8]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dd03      	ble.n	8002a3c <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2203      	movs	r2, #3
 8002a38:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002a3a:	e01c      	b.n	8002a76 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002a3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	da17      	bge.n	8002a76 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		break;
 8002a4c:	e013      	b.n	8002a76 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002a4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	da03      	bge.n	8002a60 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002a5e:	e00c      	b.n	8002a7a <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002a60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	da07      	bge.n	8002a7a <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
		break;
 8002a70:	e003      	b.n	8002a7a <GenNewPresetMode+0xa8>
		break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <GenNewPresetMode+0xaa>
		break;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <GenNewPresetMode+0xaa>
		break;
 8002a7a:	bf00      	nop
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	7ddb      	ldrb	r3, [r3, #23]
 8002a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <CheckAndChangeDistanceMode+0xbc>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d042      	beq.n	8002b3a <CheckAndChangeDistanceMode+0xb2>
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	dc07      	bgt.n	8002ac8 <CheckAndChangeDistanceMode+0x40>
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	dc02      	bgt.n	8002ac2 <CheckAndChangeDistanceMode+0x3a>
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	da3c      	bge.n	8002b3a <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002ac0:	e002      	b.n	8002ac8 <CheckAndChangeDistanceMode+0x40>
 8002ac2:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d938      	bls.n	8002b3a <CheckAndChangeDistanceMode+0xb2>
		break;
 8002ac8:	bf00      	nop
	}

	DmaxValid = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002ad6:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	db03      	blt.n	8002ae8 <CheckAndChangeDistanceMode+0x60>
 8002ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002af4:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002af8:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	7dfa      	ldrb	r2, [r7, #23]
 8002afe:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b0e:	7df9      	ldrb	r1, [r7, #23]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff5d 	bl	80029d2 <GenNewPresetMode>
 8002b18:	e010      	b.n	8002b3c <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002b22:	7df9      	ldrb	r1, [r7, #23]
 8002b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff51 	bl	80029d2 <GenNewPresetMode>
 8002b30:	e004      	b.n	8002b3c <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2203      	movs	r2, #3
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e000      	b.n	8002b3c <CheckAndChangeDistanceMode+0xb4>
		return;
 8002b3a:	bf00      	nop
	}
}
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000008 	.word	0x20000008

08002b48 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b08d      	sub	sp, #52	; 0x34
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	603a      	str	r2, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	460b      	mov	r3, r1
 8002b56:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002b58:	2396      	movs	r3, #150	; 0x96
 8002b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002b5c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b60:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002b62:	231e      	movs	r3, #30
 8002b64:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <ComputeRQL+0x104>)
 8002b68:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <ComputeRQL+0x108>)
 8002b6c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002b6e:	f641 139a 	movw	r3, #6554	; 0x199a
 8002b72:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <ComputeRQL+0x3a>
		returnvalue = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b80:	e05b      	b.n	8002c3a <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002b88:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002b90:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002b92:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002b96:	429a      	cmp	r2, r3
 8002b98:	da02      	bge.n	8002ba0 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d103      	bne.n	8002ba8 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002ba0:	2332      	movs	r3, #50	; 0x32
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ba6:	e048      	b.n	8002c3a <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002bae:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	dd03      	ble.n	8002bbe <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002bb6:	8c3b      	ldrh	r3, [r7, #32]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbc:	e007      	b.n	8002bce <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002bd8:	461a      	mov	r2, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d804      	bhi.n	8002c0e <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0c:	e006      	b.n	8002c1c <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002c0e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c14:	e002      	b.n	8002c1c <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002c16:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b32      	cmp	r3, #50	; 0x32
 8002c26:	d905      	bls.n	8002c34 <ComputeRQL+0xec>
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	bf28      	it	cs
 8002c2e:	2364      	movcs	r3, #100	; 0x64
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e000      	b.n	8002c36 <ComputeRQL+0xee>
 8002c34:	2332      	movs	r3, #50	; 0x32
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3734      	adds	r7, #52	; 0x34
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	0075b333 	.word	0x0075b333
 8002c50:	0030cccd 	.word	0x0030cccd

08002c54 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	3b04      	subs	r3, #4
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d83d      	bhi.n	8002ce2 <ConvertStatusLite+0x8e>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <ConvertStatusLite+0x18>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002cbf 	.word	0x08002cbf
 8002c70:	08002cb9 	.word	0x08002cb9
 8002c74:	08002cc5 	.word	0x08002cc5
 8002c78:	08002ccb 	.word	0x08002ccb
 8002c7c:	08002cd7 	.word	0x08002cd7
 8002c80:	08002cdd 	.word	0x08002cdd
 8002c84:	08002ce3 	.word	0x08002ce3
 8002c88:	08002ce3 	.word	0x08002ce3
 8002c8c:	08002cd1 	.word	0x08002cd1
 8002c90:	08002ce3 	.word	0x08002ce3
 8002c94:	08002ce3 	.word	0x08002ce3
 8002c98:	08002ce3 	.word	0x08002ce3
 8002c9c:	08002ce3 	.word	0x08002ce3
 8002ca0:	08002ce3 	.word	0x08002ce3
 8002ca4:	08002cad 	.word	0x08002cad
 8002ca8:	08002cb3 	.word	0x08002cb3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002cac:	230a      	movs	r3, #10
 8002cae:	73fb      	strb	r3, [r7, #15]
		break;
 8002cb0:	e019      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	73fb      	strb	r3, [r7, #15]
		break;
 8002cb6:	e016      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	73fb      	strb	r3, [r7, #15]
		break;
 8002cbc:	e013      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	73fb      	strb	r3, [r7, #15]
		break;
 8002cc2:	e010      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
		break;
 8002cc8:	e00d      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	73fb      	strb	r3, [r7, #15]
		break;
 8002cce:	e00a      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	73fb      	strb	r3, [r7, #15]
		break;
 8002cd4:	e007      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	73fb      	strb	r3, [r7, #15]
		break;
 8002cda:	e004      	b.n	8002ce6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
		break;
 8002ce0:	e001      	b.n	8002ce6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002ce2:	23ff      	movs	r3, #255	; 0xff
 8002ce4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	3b05      	subs	r3, #5
 8002d02:	2b12      	cmp	r3, #18
 8002d04:	d840      	bhi.n	8002d88 <ConvertStatusHisto+0x94>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <ConvertStatusHisto+0x18>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d59 	.word	0x08002d59
 8002d10:	08002d5f 	.word	0x08002d5f
 8002d14:	08002d6b 	.word	0x08002d6b
 8002d18:	08002d89 	.word	0x08002d89
 8002d1c:	08002d83 	.word	0x08002d83
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002d89 	.word	0x08002d89
 8002d2c:	08002d89 	.word	0x08002d89
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d89 	.word	0x08002d89
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d89 	.word	0x08002d89
 8002d40:	08002d89 	.word	0x08002d89
 8002d44:	08002d65 	.word	0x08002d65
 8002d48:	08002d77 	.word	0x08002d77
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002d7d 	.word	0x08002d7d
 8002d54:	08002d71 	.word	0x08002d71
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002d58:	2304      	movs	r3, #4
 8002d5a:	73fb      	strb	r3, [r7, #15]
		break;
 8002d5c:	e016      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
		break;
 8002d62:	e013      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002d64:	2306      	movs	r3, #6
 8002d66:	73fb      	strb	r3, [r7, #15]
		break;
 8002d68:	e010      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	73fb      	strb	r3, [r7, #15]
		break;
 8002d6e:	e00d      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002d70:	230c      	movs	r3, #12
 8002d72:	73fb      	strb	r3, [r7, #15]
		break;
 8002d74:	e00a      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002d76:	2307      	movs	r3, #7
 8002d78:	73fb      	strb	r3, [r7, #15]
		break;
 8002d7a:	e007      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002d7c:	230b      	movs	r3, #11
 8002d7e:	73fb      	strb	r3, [r7, #15]
		break;
 8002d80:	e004      	b.n	8002d8c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
		break;
 8002d86:	e001      	b.n	8002d8c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002d88:	23ff      	movs	r3, #255	; 0xff
 8002d8a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b092      	sub	sp, #72	; 0x48
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	460b      	mov	r3, r1
 8002db0:	70bb      	strb	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3318      	adds	r3, #24
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002ddc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff feaf 	bl	8002b48 <ComputeRQL>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df0:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002df6:	025b      	lsls	r3, r3, #9
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfe:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0c:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e12:	025b      	lsls	r3, r3, #9
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e24:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e28:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e32:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e38:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002e40:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e44:	2b11      	cmp	r3, #17
 8002e46:	d009      	beq.n	8002e5c <SetTargetData+0xc0>
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	dc0f      	bgt.n	8002e6c <SetTargetData+0xd0>
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	dc02      	bgt.n	8002e56 <SetTargetData+0xba>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dc03      	bgt.n	8002e5c <SetTargetData+0xc0>
 8002e54:	e00a      	b.n	8002e6c <SetTargetData+0xd0>
 8002e56:	2b0d      	cmp	r3, #13
 8002e58:	d004      	beq.n	8002e64 <SetTargetData+0xc8>
 8002e5a:	e007      	b.n	8002e6c <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5e:	2205      	movs	r2, #5
 8002e60:	75da      	strb	r2, [r3, #23]
		break;
 8002e62:	e006      	b.n	8002e72 <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e66:	220d      	movs	r2, #13
 8002e68:	75da      	strb	r2, [r3, #23]
		break;
 8002e6a:	e002      	b.n	8002e72 <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6e:	2200      	movs	r2, #0
 8002e70:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e74:	7ddb      	ldrb	r3, [r3, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d117      	bne.n	8002eaa <SetTargetData+0x10e>
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d114      	bne.n	8002eaa <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002e98:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ea0:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ea8:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eac:	7ddb      	ldrb	r3, [r3, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d125      	bne.n	8002efe <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002eb8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8002ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d007      	beq.n	8002ed8 <SetTargetData+0x13c>
 8002ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d003      	beq.n	8002ed8 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d109      	bne.n	8002eec <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8002ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff09 	bl	8002cf4 <ConvertStatusHisto>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee8:	75da      	strb	r2, [r3, #23]
 8002eea:	e008      	b.n	8002efe <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff feaf 	bl	8002c54 <ConvertStatusLite>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002efc:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f16:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f18:	025b      	lsls	r3, r3, #9
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f22:	461a      	mov	r2, r3
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fb2d 	bl	8002592 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8002f4a:	f107 0315 	add.w	r3, r7, #21
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff faf8 	bl	8002548 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002f58:	7d7b      	ldrb	r3, [r7, #21]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <SetTargetData+0x1ce>
 8002f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <SetTargetData+0x1ce>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <SetTargetData+0x1d0>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f76:	461a      	mov	r2, r3
 8002f78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f7c:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	461a      	mov	r2, r3
 8002f86:	2101      	movs	r1, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fb02 	bl	8002592 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002f9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8002fa0:	f107 0315 	add.w	r3, r7, #21
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff facd 	bl	8002548 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <SetTargetData+0x224>
 8002fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <SetTargetData+0x224>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <SetTargetData+0x226>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fd2:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd8:	8a9b      	ldrh	r3, [r3, #20]
 8002fda:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fde:	7ddb      	ldrb	r3, [r3, #23]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d110      	bne.n	8003006 <SetTargetData+0x26a>
 8002fe4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0c      	bge.n	8003006 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002fec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002ff0:	4ba3      	ldr	r3, [pc, #652]	; (8003280 <SetTargetData+0x4e4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	da03      	bge.n	8003000 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8002ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffa:	220e      	movs	r2, #14
 8002ffc:	75da      	strb	r2, [r3, #23]
 8002ffe:	e002      	b.n	8003006 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003002:	2200      	movs	r2, #0
 8003004:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	461a      	mov	r2, r3
 800300c:	f248 01be 	movw	r1, #32958	; 0x80be
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f004 f943 	bl	800729c <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 800301a:	787b      	ldrb	r3, [r7, #1]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003022:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302a:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	429a      	cmp	r2, r3
 8003030:	d902      	bls.n	8003038 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	220c      	movs	r2, #12
 8003036:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	461a      	mov	r2, r3
 800303e:	f248 0191 	movw	r1, #32913	; 0x8091
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f004 f92a 	bl	800729c <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003048:	78bb      	ldrb	r3, [r7, #2]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003058:	8a9b      	ldrh	r3, [r3, #20]
 800305a:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8003062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003064:	2200      	movs	r2, #0
 8003066:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d106      	bne.n	800307c <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003074:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8003078:	2b01      	cmp	r3, #1
 800307a:	d001      	beq.n	8003080 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8250 	beq.w	8003528 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8003088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800308a:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 800308c:	2b07      	cmp	r3, #7
 800308e:	d004      	beq.n	800309a <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003092:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003094:	2b04      	cmp	r3, #4
 8003096:	f040 8247 	bne.w	8003528 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800309a:	787b      	ldrb	r3, [r7, #1]
 800309c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309e:	4413      	add	r3, r2
 80030a0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030a4:	3320      	adds	r3, #32
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	d01c      	beq.n	80030e6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030b6:	3320      	adds	r3, #32
 80030b8:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d013      	beq.n	80030e6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80030be:	787b      	ldrb	r3, [r7, #1]
 80030c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030c8:	3320      	adds	r3, #32
 80030ca:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 822b 	bne.w	8003528 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80030d2:	787b      	ldrb	r3, [r7, #1]
 80030d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 8221 	bne.w	8003528 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 80030e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030ec:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80030f0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80030f8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d00c      	beq.n	8003118 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003104:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003108:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003110:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8003112:	429a      	cmp	r2, r3
 8003114:	f040 81dc 	bne.w	80034d0 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800311a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800311e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003124:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003128:	330c      	adds	r3, #12
 800312a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800312e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 800313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313e:	785b      	ldrb	r3, [r3, #1]
 8003140:	2b21      	cmp	r3, #33	; 0x21
 8003142:	d008      	beq.n	8003156 <SetTargetData+0x3ba>
 8003144:	2b21      	cmp	r3, #33	; 0x21
 8003146:	f300 81bf 	bgt.w	80034c8 <SetTargetData+0x72c>
 800314a:	2b1b      	cmp	r3, #27
 800314c:	f000 8113 	beq.w	8003376 <SetTargetData+0x5da>
 8003150:	2b1e      	cmp	r3, #30
 8003152:	d004      	beq.n	800315e <SetTargetData+0x3c2>
 8003154:	e1b8      	b.n	80034c8 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800315c:	e1b9      	b.n	80034d2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8003164:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003168:	429a      	cmp	r2, r3
 800316a:	dd0f      	ble.n	800318c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003172:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003176:	429a      	cmp	r2, r3
 8003178:	da08      	bge.n	800318c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 800317a:	7efb      	ldrb	r3, [r7, #27]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003186:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800318a:	e0f3      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800318c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8003196:	425b      	negs	r3, r3
 8003198:	429a      	cmp	r2, r3
 800319a:	da10      	bge.n	80031be <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800319c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80031a6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dd08      	ble.n	80031be <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80031ac:	7efb      	ldrb	r3, [r7, #27]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80031b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031bc:	e0da      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80031c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dd0f      	ble.n	80031ec <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80031d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	da08      	bge.n	80031ec <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80031da:	7efb      	ldrb	r3, [r7, #27]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80031e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031ea:	e0c3      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80031ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80031f6:	425b      	negs	r3, r3
 80031f8:	429a      	cmp	r2, r3
 80031fa:	da10      	bge.n	800321e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80031fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003206:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003208:	429a      	cmp	r2, r3
 800320a:	dd08      	ble.n	800321e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800320c:	7efb      	ldrb	r3, [r7, #27]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003218:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800321c:	e0aa      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003224:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003228:	429a      	cmp	r2, r3
 800322a:	dd0f      	ble.n	800324c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003232:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003236:	429a      	cmp	r2, r3
 8003238:	da08      	bge.n	800324c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003246:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800324a:	e093      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800324c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003256:	425b      	negs	r3, r3
 8003258:	429a      	cmp	r2, r3
 800325a:	da13      	bge.n	8003284 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800325c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8003266:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003268:	429a      	cmp	r2, r3
 800326a:	dd0b      	ble.n	8003284 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800326c:	7efb      	ldrb	r3, [r7, #27]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003278:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800327c:	e07a      	b.n	8003374 <SetTargetData+0x5d8>
 800327e:	bf00      	nop
 8003280:	20000008 	.word	0x20000008
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 800328a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800328e:	429a      	cmp	r2, r3
 8003290:	dd0f      	ble.n	80032b2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003298:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800329c:	429a      	cmp	r2, r3
 800329e:	da08      	bge.n	80032b2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80032a0:	7efb      	ldrb	r3, [r7, #27]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80032ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032b0:	e060      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80032b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80032bc:	425b      	negs	r3, r3
 80032be:	429a      	cmp	r2, r3
 80032c0:	da10      	bge.n	80032e4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80032c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80032cc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dd08      	ble.n	80032e4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80032d2:	7efb      	ldrb	r3, [r7, #27]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80032de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032e2:	e047      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80032ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	da0c      	bge.n	800330c <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80032f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dd05      	ble.n	800330c <SetTargetData+0x570>
					AddOffset =
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8003306:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800330a:	e033      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003312:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003316:	429a      	cmp	r2, r3
 8003318:	dd0f      	ble.n	800333a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003320:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003324:	429a      	cmp	r2, r3
 8003326:	da08      	bge.n	800333a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003328:	7efb      	ldrb	r3, [r7, #27]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003334:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003338:	e01c      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800333a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003344:	425b      	negs	r3, r3
 8003346:	429a      	cmp	r2, r3
 8003348:	da10      	bge.n	800336c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800334a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8003354:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003356:	429a      	cmp	r2, r3
 8003358:	dd08      	ble.n	800336c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 800335a:	7efb      	ldrb	r3, [r7, #27]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8003366:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800336a:	e003      	b.n	8003374 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003372:	e0ae      	b.n	80034d2 <SetTargetData+0x736>
 8003374:	e0ad      	b.n	80034d2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800337c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003380:	429a      	cmp	r2, r3
 8003382:	dd0f      	ble.n	80033a4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800338a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800338e:	429a      	cmp	r2, r3
 8003390:	da08      	bge.n	80033a4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003392:	7efb      	ldrb	r3, [r7, #27]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800339e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033a2:	e090      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80033a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80033ae:	425b      	negs	r3, r3
 80033b0:	429a      	cmp	r2, r3
 80033b2:	da10      	bge.n	80033d6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80033b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80033be:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dd08      	ble.n	80033d6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80033c4:	7efb      	ldrb	r3, [r7, #27]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80033d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033d4:	e077      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80033dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	dd0f      	ble.n	8003404 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80033ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	da08      	bge.n	8003404 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80033f2:	7efb      	ldrb	r3, [r7, #27]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80033fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003402:	e060      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003404:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800340e:	425b      	negs	r3, r3
 8003410:	429a      	cmp	r2, r3
 8003412:	da10      	bge.n	8003436 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800341e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003420:	429a      	cmp	r2, r3
 8003422:	dd08      	ble.n	8003436 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003424:	7efb      	ldrb	r3, [r7, #27]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8003430:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003434:	e047      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 800343c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003440:	429a      	cmp	r2, r3
 8003442:	da0c      	bge.n	800345e <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800344a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800344e:	429a      	cmp	r2, r3
 8003450:	dd05      	ble.n	800345e <SetTargetData+0x6c2>
					AddOffset =
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003458:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800345c:	e033      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003464:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003468:	429a      	cmp	r2, r3
 800346a:	dd0f      	ble.n	800348c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8003472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003476:	429a      	cmp	r2, r3
 8003478:	da08      	bge.n	800348c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 800347a:	7efb      	ldrb	r3, [r7, #27]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8003486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800348a:	e01c      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 800348c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003496:	425b      	negs	r3, r3
 8003498:	429a      	cmp	r2, r3
 800349a:	da10      	bge.n	80034be <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 800349c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80034a6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dd08      	ble.n	80034be <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80034ac:	7efb      	ldrb	r3, [r7, #27]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80034b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034bc:	e003      	b.n	80034c6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80034c4:	e005      	b.n	80034d2 <SetTargetData+0x736>
 80034c6:	e004      	b.n	80034d2 <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80034ce:	e000      	b.n	80034d2 <SetTargetData+0x736>
			}
		}
 80034d0:	bf00      	nop

		if (uwr_status) {
 80034d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d026      	beq.n	8003528 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80034da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e6:	4413      	add	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ee:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80034f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fc:	4413      	add	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	b21a      	sxth	r2, r3
 8003502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003504:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003508:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800350c:	b29a      	uxth	r2, r3
 800350e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003512:	4413      	add	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	b21a      	sxth	r2, r3
 8003518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351a:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 800351c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351e:	2201      	movs	r2, #1
 8003520:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 8003522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003524:	2200      	movs	r2, #0
 8003526:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800352c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003530:	330c      	adds	r3, #12
 8003532:	8b39      	ldrh	r1, [r7, #24]
 8003534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800353c:	7dd1      	ldrb	r1, [r2, #23]
 800353e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003540:	4413      	add	r3, r2
 8003542:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003546:	3320      	adds	r3, #32
 8003548:	460a      	mov	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 800354c:	787b      	ldrb	r3, [r7, #1]
 800354e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003550:	7e11      	ldrb	r1, [r2, #24]
 8003552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003554:	4413      	add	r3, r2
 8003556:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	460a      	mov	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003562:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003566:	461a      	mov	r2, r3
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800356e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8003572:	4618      	mov	r0, r3
 8003574:	3748      	adds	r7, #72	; 0x48
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b091      	sub	sp, #68	; 0x44
 8003580:	af04      	add	r7, sp, #16
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3318      	adds	r3, #24
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	7c9a      	ldrb	r2, [r3, #18]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	789a      	ldrb	r2, [r3, #2]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	bfa8      	it	ge
 80035ca:	4613      	movge	r3, r2
 80035cc:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035d2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	78da      	ldrb	r2, [r3, #3]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035ea:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	7c9b      	ldrb	r3, [r3, #18]
 80035f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 80035fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <SetMeasurementData+0x90>

		iteration = 1;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800360a:	e003      	b.n	8003614 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 800360c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003610:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800361a:	e048      	b.n	80036ae <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800361c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3308      	adds	r3, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8003630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003634:	224c      	movs	r2, #76	; 0x4c
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	3310      	adds	r3, #16
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8003644:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003648:	2b00      	cmp	r3, #0
 800364a:	d114      	bne.n	8003676 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7918      	ldrb	r0, [r3, #4]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	7c1b      	ldrb	r3, [r3, #16]
 8003654:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003658:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	9202      	str	r2, [sp, #8]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4623      	mov	r3, r4
 8003668:	4602      	mov	r2, r0
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff fb96 	bl	8002d9c <SetTargetData>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	7ddb      	ldrb	r3, [r3, #23]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800368e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003692:	429a      	cmp	r2, r3
 8003694:	da06      	bge.n	80036a4 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	8a9b      	ldrh	r3, [r3, #20]
 800369a:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 800369c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80036a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036a8:	3301      	adds	r3, #1
 80036aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d3b0      	bcc.n	800361c <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036c6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80036ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036d2:	e01f      	b.n	8003714 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80036d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80036de:	330c      	adds	r3, #12
 80036e0:	2100      	movs	r1, #0
 80036e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80036e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036f2:	3320      	adds	r3, #32
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80036f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4413      	add	r3, r2
 8003700:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800370a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800370e:	3301      	adds	r3, #1
 8003710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003718:	2b03      	cmp	r3, #3
 800371a:	d9db      	bls.n	80036d4 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 800371c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11b      	bne.n	800375c <SetMeasurementData+0x1e0>
 8003724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 800372c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3308      	adds	r3, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8003740:	2304      	movs	r3, #4
 8003742:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003744:	7efb      	ldrb	r3, [r7, #27]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	337e      	adds	r3, #126	; 0x7e
 8003754:	69f9      	ldr	r1, [r7, #28]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff f996 	bl	8002a88 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 800375c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8003760:	4618      	mov	r0, r3
 8003762:	3734      	adds	r7, #52	; 0x34
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}

08003768 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3318      	adds	r3, #24
 800377a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8003782:	3308      	adds	r3, #8
 8003784:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	21ff      	movs	r1, #255	; 0xff
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	f015 fea6 	bl	80194dc <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	2102      	movs	r1, #2
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f002 fc2e 	bl	8005ff6 <VL53L1_get_device_results>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 800379e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	d002      	beq.n	80037b4 <VL53L1_GetMultiRangingData+0x4c>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d004      	beq.n	80037bc <VL53L1_GetMultiRangingData+0x54>
 80037b2:	e007      	b.n	80037c4 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80037ba:	e006      	b.n	80037ca <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2202      	movs	r2, #2
 80037c0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 80037c2:	e002      	b.n	80037ca <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fed4 	bl	800357c <SetMeasurementData>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b090      	sub	sp, #64	; 0x40
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80037f2:	f240 3305 	movw	r3, #773	; 0x305
 80037f6:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3318      	adds	r3, #24
 80037fc:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003804:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11c      	bne.n	8003846 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003812:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 800381a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8e3 	bl	80039ec <VL53L1_run_ref_spad_char>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 800382c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fb2c 	bl	8001e98 <VL53L1_SetPresetMode>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003846:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800384a:	f113 0f1d 	cmn.w	r3, #29
 800384e:	d14e      	bne.n	80038ee <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	2206      	movs	r2, #6
 8003856:	2128      	movs	r1, #40	; 0x28
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f00e fbf6 	bl	801204a <VL53L1_read_nvm_raw_data>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003864:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 800386c:	f107 020c 	add.w	r2, r7, #12
 8003870:	2302      	movs	r3, #2
 8003872:	2114      	movs	r1, #20
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f010 fe5f 	bl	8014538 <VL53L1_WriteMulti>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8003880:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003888:	7b3a      	ldrb	r2, [r7, #12]
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 800388e:	7b7a      	ldrb	r2, [r7, #13]
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	3310      	adds	r3, #16
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 800389c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d108      	bne.n	80038b6 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80038a4:	2306      	movs	r3, #6
 80038a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a8:	210d      	movs	r1, #13
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f010 fe44 	bl	8014538 <VL53L1_WriteMulti>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80038b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d117      	bne.n	80038ee <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	785a      	ldrb	r2, [r3, #1]
 80038ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038cc:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	789a      	ldrb	r2, [r3, #2]
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	78da      	ldrb	r2, [r3, #3]
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	791a      	ldrb	r2, [r3, #4]
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	795a      	ldrb	r2, [r3, #5]
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 80038ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3740      	adds	r7, #64	; 0x40
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 800390c:	2300      	movs	r3, #0
 800390e:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003910:	2300      	movs	r3, #0
 8003912:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003914:	2300      	movs	r3, #0
 8003916:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d84a      	bhi.n	80039b4 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003935 	.word	0x08003935
 8003928:	08003955 	.word	0x08003955
 800392c:	08003975 	.word	0x08003975
 8003930:	08003995 	.word	0x08003995
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f004 fbee 	bl	8008116 <VL53L1_dynamic_xtalk_correction_disable>
 800393a:	4603      	mov	r3, r0
 800393c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f004 fc17 	bl	8008172 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003944:	4603      	mov	r3, r0
 8003946:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f004 fc40 	bl	80081ce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800394e:	4603      	mov	r3, r0
 8003950:	733b      	strb	r3, [r7, #12]
		break;
 8003952:	e032      	b.n	80039ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f004 fbc7 	bl	80080e8 <VL53L1_dynamic_xtalk_correction_enable>
 800395a:	4603      	mov	r3, r0
 800395c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f004 fbf0 	bl	8008144 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003964:	4603      	mov	r3, r0
 8003966:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f004 fc30 	bl	80081ce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800396e:	4603      	mov	r3, r0
 8003970:	733b      	strb	r3, [r7, #12]
		break;
 8003972:	e022      	b.n	80039ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f004 fbb7 	bl	80080e8 <VL53L1_dynamic_xtalk_correction_enable>
 800397a:	4603      	mov	r3, r0
 800397c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f004 fbe0 	bl	8008144 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003984:	4603      	mov	r3, r0
 8003986:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f004 fc09 	bl	80081a0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 800398e:	4603      	mov	r3, r0
 8003990:	733b      	strb	r3, [r7, #12]
		break;
 8003992:	e012      	b.n	80039ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f004 fba7 	bl	80080e8 <VL53L1_dynamic_xtalk_correction_enable>
 800399a:	4603      	mov	r3, r0
 800399c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f004 fbe7 	bl	8008172 <VL53L1_dynamic_xtalk_correction_apply_disable>
 80039a4:	4603      	mov	r3, r0
 80039a6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f004 fc10 	bl	80081ce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80039ae:	4603      	mov	r3, r0
 80039b0:	733b      	strb	r3, [r7, #12]
		break;
 80039b2:	e002      	b.n	80039ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80039b4:	23fc      	movs	r3, #252	; 0xfc
 80039b6:	73fb      	strb	r3, [r7, #15]
		break;
 80039b8:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80039da:	7b3b      	ldrb	r3, [r7, #12]
 80039dc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af04      	add	r7, sp, #16
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3318      	adds	r3, #24
 80039fe:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003a06:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003a08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f007 fc99 	bl	800b348 <VL53L1_enable_powerforce>
 8003a16:	4603      	mov	r3, r0
 8003a18:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d117      	bne.n	8003a52 <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	7858      	ldrb	r0, [r3, #1]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685c      	ldr	r4, [r3, #4]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	891d      	ldrh	r5, [r3, #8]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	899b      	ldrh	r3, [r3, #12]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	8952      	ldrh	r2, [r2, #10]
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003a3c:	9102      	str	r1, [sp, #8]
 8003a3e:	9201      	str	r2, [sp, #4]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	462b      	mov	r3, r5
 8003a44:	4622      	mov	r2, r4
 8003a46:	4601      	mov	r1, r0
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f009 fbda 	bl	800d202 <VL53L1_set_ref_spad_char_config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f891 	bl	8003b88 <VL53L1_run_device_test>
 8003a66:	4603      	mov	r3, r0
 8003a68:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003a6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003a72:	f107 020c 	add.w	r2, r7, #12
 8003a76:	2302      	movs	r3, #2
 8003a78:	21d9      	movs	r1, #217	; 0xd9
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f010 fd92 	bl	80145a4 <VL53L1_ReadMulti>
 8003a80:	4603      	mov	r3, r0
 8003a82:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003a84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003a8c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a94:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003a98:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003aac:	f107 020c 	add.w	r2, r7, #12
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	2114      	movs	r1, #20
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f010 fd3f 	bl	8014538 <VL53L1_WriteMulti>
 8003aba:	4603      	mov	r3, r0
 8003abc:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003ac6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003ace:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003ade:	f107 020c 	add.w	r2, r7, #12
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	21ac      	movs	r1, #172	; 0xac
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f010 fd5c 	bl	80145a4 <VL53L1_ReadMulti>
 8003aec:	4603      	mov	r3, r0
 8003aee:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003af8:	f107 020c 	add.w	r2, r7, #12
 8003afc:	2306      	movs	r3, #6
 8003afe:	210d      	movs	r1, #13
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f010 fd19 	bl	8014538 <VL53L1_WriteMulti>
 8003b06:	4603      	mov	r3, r0
 8003b08:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003b0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d117      	bne.n	8003b42 <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003b12:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003b1a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003b22:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003b32:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003b3a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d114      	bne.n	8003b74 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d00c      	beq.n	8003b6e <VL53L1_run_ref_spad_char+0x182>
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	dc0e      	bgt.n	8003b76 <VL53L1_run_ref_spad_char+0x18a>
 8003b58:	2b0e      	cmp	r3, #14
 8003b5a:	d002      	beq.n	8003b62 <VL53L1_run_ref_spad_char+0x176>
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d003      	beq.n	8003b68 <VL53L1_run_ref_spad_char+0x17c>
 8003b60:	e009      	b.n	8003b76 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003b62:	23e4      	movs	r3, #228	; 0xe4
 8003b64:	77fb      	strb	r3, [r7, #31]
			break;
 8003b66:	e006      	b.n	8003b76 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003b68:	23e3      	movs	r3, #227	; 0xe3
 8003b6a:	77fb      	strb	r3, [r7, #31]
			break;
 8003b6c:	e003      	b.n	8003b76 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003b6e:	23e2      	movs	r3, #226	; 0xe2
 8003b70:	77fb      	strb	r3, [r7, #31]
			break;
 8003b72:	e000      	b.n	8003b76 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003b74:	bf00      	nop



	*pcal_status = status;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	7ffa      	ldrb	r2, [r7, #31]
 8003b7a:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}

08003b88 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003baa:	f107 030b 	add.w	r3, r7, #11
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2130      	movs	r1, #48	; 0x30
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f010 fd88 	bl	80146c8 <VL53L1_RdByte>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003bbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003bc4:	7afa      	ldrb	r2, [r7, #11]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f007 fb39 	bl	800b250 <VL53L1_start_test>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f00f ff5c 	bl	8013aa8 <VL53L1_wait_for_test_completion>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003bfc:	f107 020c 	add.w	r2, r7, #12
 8003c00:	2302      	movs	r3, #2
 8003c02:	2189      	movs	r1, #137	; 0x89
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f010 fccd 	bl	80145a4 <VL53L1_ReadMulti>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003c16:	7b3a      	ldrb	r2, [r7, #12]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003c1e:	7b7a      	ldrb	r2, [r7, #13]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f007 fba1 	bl	800b390 <VL53L1_clear_interrupt>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f007 faf7 	bl	800b250 <VL53L1_start_test>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d006      	beq.n	8003c96 <select_offset_per_vcsel+0x24>
 8003c88:	2b21      	cmp	r3, #33	; 0x21
 8003c8a:	dc2b      	bgt.n	8003ce4 <select_offset_per_vcsel+0x72>
 8003c8c:	2b1b      	cmp	r3, #27
 8003c8e:	d01c      	beq.n	8003cca <select_offset_per_vcsel+0x58>
 8003c90:	2b1e      	cmp	r3, #30
 8003c92:	d00d      	beq.n	8003cb0 <select_offset_per_vcsel+0x3e>
 8003c94:	e026      	b.n	8003ce4 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9c:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003ca0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca8:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003cac:	817b      	strh	r3, [r7, #10]
		break;
 8003cae:	e02b      	b.n	8003d08 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb6:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003cba:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003cc6:	817b      	strh	r3, [r7, #10]
		break;
 8003cc8:	e01e      	b.n	8003d08 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003cd4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003ce0:	817b      	strh	r3, [r7, #10]
		break;
 8003ce2:	e011      	b.n	8003d08 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cea:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003cee:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf6:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003cfa:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003cfc:	23fc      	movs	r3, #252	; 0xfc
 8003cfe:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	801a      	strh	r2, [r3, #0]
		break;
 8003d06:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d0e:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8003d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003d18:	7a7b      	ldrb	r3, [r7, #9]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <select_offset_per_vcsel+0xb6>
 8003d22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d26:	e001      	b.n	8003d2c <select_offset_per_vcsel+0xba>
 8003d28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	8013      	strh	r3, [r2, #0]

	return status;
 8003d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003d40:	b490      	push	{r4, r7}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	460b      	mov	r3, r1
 8003d50:	71fb      	strb	r3, [r7, #7]
 8003d52:	4613      	mov	r3, r2
 8003d54:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d72:	e021      	b.n	8003db8 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003d74:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	0052      	lsls	r2, r2, #1
 8003d82:	441a      	add	r2, r3
 8003d84:	00d3      	lsls	r3, r2, #3
 8003d86:	461a      	mov	r2, r3
 8003d88:	460b      	mov	r3, r1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	440b      	add	r3, r1
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	4413      	add	r3, r2
 8003d92:	4423      	add	r3, r4
 8003d94:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003d98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	4413      	add	r3, r2
 8003da0:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003da2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3206      	adds	r2, #6
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003db4:	3301      	adds	r3, #1
 8003db6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003db8:	79bb      	ldrb	r3, [r7, #6]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3d8      	bcc.n	8003d74 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d047      	beq.n	8003e58 <vl53l1_diff_histo_stddev+0x118>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dd6:	e03a      	b.n	8003e4e <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003dd8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	461a      	mov	r2, r3
 8003de4:	0052      	lsls	r2, r2, #1
 8003de6:	441a      	add	r2, r3
 8003de8:	00d3      	lsls	r3, r2, #3
 8003dea:	461a      	mov	r2, r3
 8003dec:	460b      	mov	r3, r1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	440b      	add	r3, r1
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	4423      	add	r3, r4
 8003df8:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003dfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e00:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e08:	fb03 f202 	mul.w	r2, r3, r2
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e12:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003e14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3206      	adds	r2, #6
 8003e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e22:	fb03 f202 	mul.w	r2, r3, r2
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003e38:	69b8      	ldr	r0, [r7, #24]
 8003e3a:	6979      	ldr	r1, [r7, #20]
 8003e3c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	441a      	add	r2, r3
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e4e:	79bb      	ldrb	r3, [r7, #6]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3bf      	bcc.n	8003dd8 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003e58:	bf00      	nop
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc90      	pop	{r4, r7}
 8003e60:	4770      	bx	lr

08003e62 <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003e62:	b5b0      	push	{r4, r5, r7, lr}
 8003e64:	b08c      	sub	sp, #48	; 0x30
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8003e92:	2318      	movs	r3, #24
 8003e94:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f248 018f 	movw	r1, #32911	; 0x808f
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f003 f9fb 	bl	800729c <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f248 018e 	movw	r1, #32910	; 0x808e
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f003 f9f3 	bl	800729c <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f040 811b 	bne.w	80040fc <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003ee0:	7efb      	ldrb	r3, [r7, #27]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	7eba      	ldrb	r2, [r7, #26]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f00:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003f04:	3b01      	subs	r3, #1
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e004      	b.n	8003f16 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003f16:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003f1a:	7efb      	ldrb	r3, [r7, #27]
 8003f1c:	69f8      	ldr	r0, [r7, #28]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	0052      	lsls	r2, r2, #1
 8003f22:	441a      	add	r2, r3
 8003f24:	0153      	lsls	r3, r2, #5
 8003f26:	461a      	mov	r2, r3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	440b      	add	r3, r1
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	4413      	add	r3, r2
 8003f32:	4403      	add	r3, r0
 8003f34:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8003f38:	3308      	adds	r3, #8
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dd0c      	ble.n	8003f5a <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8003f40:	7e79      	ldrb	r1, [r7, #25]
 8003f42:	7efa      	ldrb	r2, [r7, #27]
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	460b      	mov	r3, r1
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	69f8      	ldr	r0, [r7, #28]
 8003f56:	f7ff fef3 	bl	8003d40 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	db23      	blt.n	8003faa <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003f68:	3318      	adds	r3, #24
 8003f6a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f015 fab3 	bl	80194dc <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003f88:	7efb      	ldrb	r3, [r7, #27]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f94:	2206      	movs	r2, #6
 8003f96:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003f9a:	e034      	b.n	8004006 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003fa8:	e02d      	b.n	8004006 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003fb4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003fbc:	e01e      	b.n	8003ffc <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003fbe:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003fc2:	7e39      	ldrb	r1, [r7, #24]
 8003fc4:	7efb      	ldrb	r3, [r7, #27]
 8003fc6:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	3006      	adds	r0, #6
 8003fce:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003fd2:	69f8      	ldr	r0, [r7, #28]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	0052      	lsls	r2, r2, #1
 8003fd8:	441a      	add	r2, r3
 8003fda:	00d3      	lsls	r3, r2, #3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	460b      	mov	r3, r1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	440b      	add	r3, r1
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4413      	add	r3, r2
 8003fe8:	442b      	add	r3, r5
 8003fea:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003fee:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003ffc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004000:	7ebb      	ldrb	r3, [r7, #26]
 8004002:	429a      	cmp	r2, r3
 8004004:	d3db      	bcc.n	8003fbe <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004010:	461a      	mov	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3b01      	subs	r3, #1
 8004016:	429a      	cmp	r2, r3
 8004018:	d109      	bne.n	800402e <vl53l1_histo_merge+0x1cc>
 800401a:	7efb      	ldrb	r3, [r7, #27]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 800402c:	e00e      	b.n	800404c <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 800402e:	7efb      	ldrb	r3, [r7, #27]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10b      	bne.n	800404c <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800403e:	3301      	adds	r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004048:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800404c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <vl53l1_histo_merge+0x1f8>
 8004054:	7efb      	ldrb	r3, [r7, #27]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d069      	beq.n	800412e <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004060:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	d162      	bne.n	800412e <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8004068:	2300      	movs	r3, #0
 800406a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800406c:	e008      	b.n	8004080 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 800406e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	3206      	adds	r2, #6
 8004074:	2100      	movs	r1, #0
 8004076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 800407a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800407c:	3301      	adds	r3, #1
 800407e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004080:	7ebb      	ldrb	r3, [r7, #26]
 8004082:	b29b      	uxth	r3, r3
 8004084:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004086:	429a      	cmp	r2, r3
 8004088:	d3f1      	bcc.n	800406e <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 800408a:	2300      	movs	r3, #0
 800408c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800408e:	e02f      	b.n	80040f0 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004096:	e023      	b.n	80040e0 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8004098:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3206      	adds	r2, #6
 800409e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80040a2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80040a6:	7efb      	ldrb	r3, [r7, #27]
 80040a8:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80040aa:	69fc      	ldr	r4, [r7, #28]
 80040ac:	461a      	mov	r2, r3
 80040ae:	0052      	lsls	r2, r2, #1
 80040b0:	441a      	add	r2, r3
 80040b2:	00d3      	lsls	r3, r2, #3
 80040b4:	461a      	mov	r2, r3
 80040b6:	460b      	mov	r3, r1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	440b      	add	r3, r1
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	442b      	add	r3, r5
 80040c2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80040c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80040ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040cc:	18c1      	adds	r1, r0, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	3206      	adds	r2, #6
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80040d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040da:	3301      	adds	r3, #1
 80040dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	dbd6      	blt.n	8004098 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 80040ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040ec:	3301      	adds	r3, #1
 80040ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040f0:	7ebb      	ldrb	r3, [r7, #26]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d3ca      	bcc.n	8004090 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80040fa:	e018      	b.n	800412e <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004102:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004106:	3b01      	subs	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800411e:	2bff      	cmp	r3, #255	; 0xff
 8004120:	d105      	bne.n	800412e <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 800412e:	bf00      	nop
 8004130:	3728      	adds	r7, #40	; 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004138 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b0c6      	sub	sp, #280	; 0x118
 800413c:	af00      	add	r7, sp, #0
 800413e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004142:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004146:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004154:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 800415c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004160:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004164:	2200      	movs	r2, #0
 8004166:	2185      	movs	r1, #133	; 0x85
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f010 fa51 	bl	8014610 <VL53L1_WrByte>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004174:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 800417c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004180:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f007 f8df 	bl	800b348 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 800418a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800418e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004192:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004196:	f248 018c 	movw	r1, #32908	; 0x808c
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	f003 f87e 	bl	800729c <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80041a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d81b      	bhi.n	80041e0 <VL53L1_load_patch+0xa8>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <VL53L1_load_patch+0x78>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041c9 	.word	0x080041c9
 80041b8:	080041d1 	.word	0x080041d1
 80041bc:	080041d9 	.word	0x080041d9
	case 0:
		patch_power = 0x00;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041c6:	e00e      	b.n	80041e6 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80041c8:	2310      	movs	r3, #16
 80041ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041ce:	e00a      	b.n	80041e6 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80041d0:	2320      	movs	r3, #32
 80041d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041d6:	e006      	b.n	80041e6 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041de:	e002      	b.n	80041e6 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 80041e6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d134      	bne.n	8004258 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80041ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041f6:	2229      	movs	r2, #41	; 0x29
 80041f8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80041fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004202:	22c9      	movs	r2, #201	; 0xc9
 8004204:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004206:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800420a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800420e:	220e      	movs	r2, #14
 8004210:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8004212:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004216:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800421e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004226:	2228      	movs	r2, #40	; 0x28
 8004228:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800422a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800422e:	b2da      	uxtb	r2, r3
 8004230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004234:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004238:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 800423a:	f107 020c 	add.w	r2, r7, #12
 800423e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004242:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004246:	2306      	movs	r3, #6
 8004248:	f240 4176 	movw	r1, #1142	; 0x476
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f010 f973 	bl	8014538 <VL53L1_WriteMulti>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004258:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800425c:	2b00      	cmp	r3, #0
 800425e:	d132      	bne.n	80042c6 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004260:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004264:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004268:	2203      	movs	r2, #3
 800426a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800426c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004274:	226d      	movs	r2, #109	; 0x6d
 8004276:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800427c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004280:	2203      	movs	r2, #3
 8004282:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004284:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800428c:	226f      	movs	r2, #111	; 0x6f
 800428e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004290:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004298:	2207      	movs	r2, #7
 800429a:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800429c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042a4:	2229      	movs	r2, #41	; 0x29
 80042a6:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80042a8:	f107 020c 	add.w	r2, r7, #12
 80042ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042b0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80042b4:	2306      	movs	r3, #6
 80042b6:	f240 4196 	movw	r1, #1174	; 0x496
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	f010 f93c 	bl	8014538 <VL53L1_WriteMulti>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80042c6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11a      	bne.n	8004304 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80042ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80042da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042e2:	2207      	movs	r2, #7
 80042e4:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80042e6:	f107 020c 	add.w	r2, r7, #12
 80042ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ee:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80042f2:	2302      	movs	r3, #2
 80042f4:	f240 4172 	movw	r1, #1138	; 0x472
 80042f8:	6800      	ldr	r0, [r0, #0]
 80042fa:	f010 f91d 	bl	8014538 <VL53L1_WriteMulti>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004304:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11a      	bne.n	8004342 <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 800430c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004318:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800431c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004320:	2207      	movs	r2, #7
 8004322:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8004324:	f107 020c 	add.w	r2, r7, #12
 8004328:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800432c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004330:	2302      	movs	r3, #2
 8004332:	f240 4174 	movw	r1, #1140	; 0x474
 8004336:	6800      	ldr	r0, [r0, #0]
 8004338:	f010 f8fe 	bl	8014538 <VL53L1_WriteMulti>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8004342:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 800434a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800434e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004352:	2201      	movs	r2, #1
 8004354:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	f010 f959 	bl	8014610 <VL53L1_WrByte>
 800435e:	4603      	mov	r3, r0
 8004360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8004364:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 800436c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004370:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004374:	2201      	movs	r2, #1
 8004376:	2185      	movs	r1, #133	; 0x85
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f010 f949 	bl	8014610 <VL53L1_WrByte>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004384:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004388:	4618      	mov	r0, r3
 800438a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop

08004394 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80043a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80043a8:	2200      	movs	r2, #0
 80043aa:	2185      	movs	r1, #133	; 0x85
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f010 f92f 	bl	8014610 <VL53L1_WrByte>
 80043b2:	4603      	mov	r3, r0
 80043b4:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80043b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f006 ffd4 	bl	800b36c <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80043c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f010 f91c 	bl	8014610 <VL53L1_WrByte>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 80043e4:	2201      	movs	r2, #1
 80043e6:	2185      	movs	r1, #133	; 0x85
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f010 f911 	bl	8014610 <VL53L1_WrByte>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80043fe:	b5b0      	push	{r4, r5, r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af04      	add	r7, sp, #16
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3318      	adds	r3, #24
 8004412:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800441a:	3308      	adds	r3, #8
 800441c:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 8004422:	2162      	movs	r1, #98	; 0x62
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f006 f810 	bl	800a44a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2204      	movs	r2, #4
 800442e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2210      	movs	r2, #16
 800443a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004446:	2300      	movs	r3, #0
 8004448:	75bb      	strb	r3, [r7, #22]
 800444a:	e01b      	b.n	8004484 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 800444c:	7dba      	ldrb	r2, [r7, #22]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	3308      	adds	r3, #8
 8004460:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800447e:	7dbb      	ldrb	r3, [r7, #22]
 8004480:	3301      	adds	r3, #1
 8004482:	75bb      	strb	r3, [r7, #22]
 8004484:	7dbb      	ldrb	r3, [r7, #22]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d9e0      	bls.n	800444c <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2210      	movs	r2, #16
 800448e:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2210      	movs	r2, #16
 800449e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80044aa:	2300      	movs	r3, #0
 80044ac:	75bb      	strb	r3, [r7, #22]
 80044ae:	e039      	b.n	8004524 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80044b0:	7dba      	ldrb	r2, [r7, #22]
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80044c6:	7dba      	ldrb	r2, [r7, #22]
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80044dc:	7dba      	ldrb	r2, [r7, #22]
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 80044f2:	7dba      	ldrb	r2, [r7, #22]
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004508:	7dba      	ldrb	r2, [r7, #22]
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800451e:	7dbb      	ldrb	r3, [r7, #22]
 8004520:	3301      	adds	r3, #1
 8004522:	75bb      	strb	r3, [r7, #22]
 8004524:	7dbb      	ldrb	r3, [r7, #22]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d9c2      	bls.n	80044b0 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2201      	movs	r2, #1
 8004534:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2200      	movs	r2, #0
 800453a:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2200      	movs	r2, #0
 8004540:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2201      	movs	r2, #1
 8004546:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2201      	movs	r2, #1
 800454c:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2201      	movs	r2, #1
 8004552:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004562:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800456a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2264      	movs	r2, #100	; 0x64
 8004570:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004578:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	2203      	movs	r2, #3
 800458a:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f240 72db 	movw	r2, #2011	; 0x7db
 80045a0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80045aa:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f005 ff2e 	bl	800a410 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80045ba:	3318      	adds	r3, #24
 80045bc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f014 ff8a 	bl	80194dc <memset>
	pdev->bin_rec_pos = 0;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <VL53L1_data_init+0x1fa>
 80045e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8b8 	bl	8004764 <VL53L1_read_p2p_data>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80045f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004606:	4618      	mov	r0, r3
 8004608:	f003 fdf8 	bl	80081fc <VL53L1_init_refspadchar_config_struct>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8004610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800461e:	4618      	mov	r0, r3
 8004620:	f003 fe10 	bl	8008244 <VL53L1_init_ssc_config_struct>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f003 fe21 	bl	8008286 <VL53L1_init_xtalk_config_struct>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004656:	4618      	mov	r0, r3
 8004658:	f003 fe89 	bl	800836e <VL53L1_init_xtalk_extract_config_struct>
 800465c:	4603      	mov	r3, r0
 800465e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800466e:	4618      	mov	r0, r3
 8004670:	f003 feac 	bl	80083cc <VL53L1_init_offset_cal_config_struct>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d107      	bne.n	8004690 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004686:	4618      	mov	r0, r3
 8004688:	f003 fec7 	bl	800841a <VL53L1_init_zone_cal_config_struct>
 800468c:	4603      	mov	r3, r0
 800468e:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004690:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f003 fedb 	bl	8008462 <VL53L1_init_hist_post_process_config_struct>
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80046b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80046be:	4618      	mov	r0, r3
 80046c0:	f004 f8f6 	bl	80088b0 <VL53L1_init_hist_gen3_dmax_config_struct>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80046c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80046d6:	4618      	mov	r0, r3
 80046d8:	f003 ff32 	bl	8008540 <VL53L1_init_tuning_parm_storage_struct>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80046e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d116      	bne.n	8004716 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	7858      	ldrb	r0, [r3, #1]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	8b1c      	ldrh	r4, [r3, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	689d      	ldr	r5, [r3, #8]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	6912      	ldr	r2, [r2, #16]
 80046fc:	6939      	ldr	r1, [r7, #16]
 80046fe:	6949      	ldr	r1, [r1, #20]
 8004700:	9102      	str	r1, [sp, #8]
 8004702:	9201      	str	r2, [sp, #4]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	462b      	mov	r3, r5
 8004708:	4622      	mov	r2, r4
 800470a:	4601      	mov	r1, r0
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fc8f 	bl	8005030 <VL53L1_set_preset_mode>
 8004712:	4603      	mov	r3, r0
 8004714:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800471c:	461a      	mov	r2, r3
 800471e:	2118      	movs	r1, #24
 8004720:	2000      	movs	r0, #0
 8004722:	f00a fa90 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800472c:	461a      	mov	r2, r3
 800472e:	2118      	movs	r1, #24
 8004730:	2000      	movs	r0, #0
 8004732:	f00a fa88 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800473c:	461a      	mov	r2, r3
 800473e:	210c      	movs	r1, #12
 8004740:	2000      	movs	r0, #0
 8004742:	f006 fc26 	bl	800af92 <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f009 fcd2 	bl	800e0f0 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f009 fbd1 	bl	800def4 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f009 fcf7 	bl	800e146 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bdb0      	pop	{r4, r5, r7, pc}

08004764 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b091      	sub	sp, #68	; 0x44
 8004768:	af04      	add	r7, sp, #16
 800476a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3318      	adds	r3, #24
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	3348      	adds	r3, #72	; 0x48
 8004784:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	339c      	adds	r3, #156	; 0x9c
 800478a:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800478c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f00d fdd1 	bl	8012344 <VL53L1_get_static_nvm_managed>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80047a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	3348      	adds	r3, #72	; 0x48
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f00d ff02 	bl	80125c0 <VL53L1_get_customer_nvm_managed>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80047c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d117      	bne.n	80047fa <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f00e fdda 	bl	801338c <VL53L1_get_nvm_copy_data>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 80047de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f006 f921 	bl	800aa3c <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 80047fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10e      	bne.n	8004820 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	895b      	ldrh	r3, [r3, #10]
 8004806:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8004820:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	33c0      	adds	r3, #192	; 0xc0
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f00d fc3c 	bl	80120ac <VL53L1_read_nvm_optical_centre>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 800483a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	3360      	adds	r3, #96	; 0x60
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f00d fc52 	bl	80120f2 <VL53L1_read_nvm_cal_peak_rate_map>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004854:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004858:	2b00      	cmp	r3, #0
 800485a:	d12d      	bne.n	80048b8 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	339c      	adds	r3, #156	; 0x9c
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f00d fc6b 	bl	801213e <VL53L1_read_nvm_additional_offset_cal_data>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	889b      	ldrh	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d120      	bne.n	80048b8 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11c      	bne.n	80048b8 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800488a:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	69f9      	ldr	r1, [r7, #28]
 80048a2:	3102      	adds	r1, #2
 80048a4:	9103      	str	r1, [sp, #12]
 80048a6:	9202      	str	r2, [sp, #8]
 80048a8:	2238      	movs	r2, #56	; 0x38
 80048aa:	9201      	str	r2, [sp, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	23ff      	movs	r3, #255	; 0xff
 80048b0:	22c7      	movs	r2, #199	; 0xc7
 80048b2:	4621      	mov	r1, r4
 80048b4:	f008 f934 	bl	800cb20 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80048b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d12f      	bne.n	8004920 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 80048c0:	f107 030c 	add.w	r3, r7, #12
 80048c4:	461a      	mov	r2, r3
 80048c6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f00d fc5a 	bl	8012184 <VL53L1_read_nvm_fmt_range_results_data>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 80048d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d120      	bne.n	8004920 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80048de:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80048e6:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80048ee:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800490c:	e003      	b.n	8004916 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	2214      	movs	r2, #20
 8004912:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004920:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800492e:	3308      	adds	r3, #8
 8004930:	461a      	mov	r2, r3
 8004932:	21de      	movs	r1, #222	; 0xde
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f00f fefb 	bl	8014730 <VL53L1_RdWord>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494a:	d204      	bcs.n	8004956 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004952:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004956:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	33bc      	adds	r3, #188	; 0xbc
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f97d 	bl	8004c64 <VL53L1_get_mode_mitigation_roi>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d114      	bne.n	80049a4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10f      	bne.n	80049a4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80049a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3734      	adds	r7, #52	; 0x34
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}

080049b0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3318      	adds	r3, #24
 80049c2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80049d2:	23f1      	movs	r3, #241	; 0xf1
 80049d4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80049d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10e      	bne.n	80049fc <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80049ee:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 80049fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004a2e:	23f1      	movs	r3, #241	; 0xf1
 8004a30:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a46:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004a4a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3318      	adds	r3, #24
 8004a78:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004a84:	23f1      	movs	r3, #241	; 0xf1
 8004a86:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11b      	bne.n	8004ac8 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004ab4:	9201      	str	r2, [sp, #4]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	68b8      	ldr	r0, [r7, #8]
 8004ac0:	f006 fe0b 	bl	800b6da <VL53L1_calc_timeout_register_values>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004afe:	23f1      	movs	r3, #241	; 0xf1
 8004b00:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d14a      	bne.n	8004ba0 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f006 fc56 	bl	800b3ca <VL53L1_calc_macro_period_us>
 8004b1e:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f006 fd14 	bl	800b556 <VL53L1_calc_timeout_us>
 8004b2e:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004b3a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b3c:	8a7b      	ldrh	r3, [r7, #18]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004b48:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004b4a:	4413      	add	r3, r2
 8004b4c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004b4e:	8a7b      	ldrh	r3, [r7, #18]
 8004b50:	6979      	ldr	r1, [r7, #20]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f006 fd66 	bl	800b624 <VL53L1_calc_decoded_timeout_us>
 8004b58:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004b64:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b66:	8a7b      	ldrh	r3, [r7, #18]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004b72:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004b74:	4413      	add	r3, r2
 8004b76:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004b78:	8a7b      	ldrh	r3, [r7, #18]
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f006 fd51 	bl	800b624 <VL53L1_calc_decoded_timeout_us>
 8004b82:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004ba0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	2b07      	cmp	r3, #7
 8004bcc:	d81c      	bhi.n	8004c08 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004bce:	7afb      	ldrb	r3, [r7, #11]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004be4:	7dbb      	ldrb	r3, [r7, #22]
 8004be6:	4013      	ands	r3, r2
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004bee:	7afb      	ldrb	r3, [r7, #11]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	fa42 f303 	asr.w	r3, r2, r3
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e001      	b.n	8004c0c <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004c08:	23fc      	movs	r3, #252	; 0xfc
 8004c0a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	7858      	ldrb	r0, [r3, #1]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	7819      	ldrb	r1, [r3, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f007 fdeb 	bl	800c81a <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	7898      	ldrb	r0, [r3, #2]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	78d9      	ldrb	r1, [r3, #3]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004c52:	461a      	mov	r2, r3
 8004c54:	f007 fe20 	bl	800c898 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3318      	adds	r3, #24
 8004c76:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c8a:	f107 020e 	add.w	r2, r7, #14
 8004c8e:	f107 010d 	add.w	r1, r7, #13
 8004c92:	4618      	mov	r0, r3
 8004c94:	f00a f880 	bl	800ed98 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004c98:	7bba      	ldrb	r2, [r7, #14]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004c9e:	7b7a      	ldrb	r2, [r7, #13]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004caa:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3318      	adds	r3, #24
 8004ce0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	331c      	adds	r3, #28
 8004cec:	2240      	movs	r2, #64	; 0x40
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f014 fbe6 	bl	80194c0 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	785a      	ldrb	r2, [r3, #1]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	33c2      	adds	r3, #194	; 0xc2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00f fbce 	bl	80144ae <VL53L1_init_zone_config_histogram_bins>
 8004d12:	4603      	mov	r3, r0
 8004d14:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004d26:	e00f      	b.n	8004d48 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b0f      	cmp	r3, #15
 8004d2e:	d807      	bhi.n	8004d40 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	3301      	adds	r3, #1
 8004d36:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004d3e:	e003      	b.n	8004d48 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2211      	movs	r2, #17
 8004d44:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004d48:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3318      	adds	r3, #24
 8004d66:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	33c2      	adds	r3, #194	; 0xc2
 8004d6c:	226c      	movs	r2, #108	; 0x6c
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f014 fba5 	bl	80194c0 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	460b      	mov	r3, r1
 8004d92:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004d9e:	7afb      	ldrb	r3, [r7, #11]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	2b26      	cmp	r3, #38	; 0x26
 8004da4:	f200 8139 	bhi.w	800501a <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004e4d 	.word	0x08004e4d
 8004db4:	08004e4d 	.word	0x08004e4d
 8004db8:	08004e4d 	.word	0x08004e4d
 8004dbc:	08004e4d 	.word	0x08004e4d
 8004dc0:	08004e4d 	.word	0x08004e4d
 8004dc4:	08004e77 	.word	0x08004e77
 8004dc8:	08004e77 	.word	0x08004e77
 8004dcc:	08004e77 	.word	0x08004e77
 8004dd0:	0800501b 	.word	0x0800501b
 8004dd4:	0800501b 	.word	0x0800501b
 8004dd8:	08004ecb 	.word	0x08004ecb
 8004ddc:	08004f73 	.word	0x08004f73
 8004de0:	08004ecb 	.word	0x08004ecb
 8004de4:	0800501b 	.word	0x0800501b
 8004de8:	0800501b 	.word	0x0800501b
 8004dec:	0800501b 	.word	0x0800501b
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e77 	.word	0x08004e77
 8004df8:	08004ecb 	.word	0x08004ecb
 8004dfc:	08004ecb 	.word	0x08004ecb
 8004e00:	08004ecb 	.word	0x08004ecb
 8004e04:	08004ecb 	.word	0x08004ecb
 8004e08:	08004ecb 	.word	0x08004ecb
 8004e0c:	08004ef5 	.word	0x08004ef5
 8004e10:	08004f1f 	.word	0x08004f1f
 8004e14:	08004f49 	.word	0x08004f49
 8004e18:	08004ecb 	.word	0x08004ecb
 8004e1c:	08004ecb 	.word	0x08004ecb
 8004e20:	08004ecb 	.word	0x08004ecb
 8004e24:	08004f9d 	.word	0x08004f9d
 8004e28:	08004f9d 	.word	0x08004f9d
 8004e2c:	08004f9d 	.word	0x08004f9d
 8004e30:	08004fc7 	.word	0x08004fc7
 8004e34:	08004fc7 	.word	0x08004fc7
 8004e38:	08004fc7 	.word	0x08004fc7
 8004e3c:	08004ea1 	.word	0x08004ea1
 8004e40:	08004ea1 	.word	0x08004ea1
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004ff1 	.word	0x08004ff1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	601a      	str	r2, [r3, #0]
	break;
 8004e74:	e0d4      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	601a      	str	r2, [r3, #0]
	break;
 8004e9e:	e0bf      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	601a      	str	r2, [r3, #0]
	break;
 8004ec8:	e0aa      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	601a      	str	r2, [r3, #0]

	break;
 8004ef2:	e095      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	601a      	str	r2, [r3, #0]
	break;
 8004f1c:	e080      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	601a      	str	r2, [r3, #0]
	break;
 8004f46:	e06b      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	601a      	str	r2, [r3, #0]
	break;
 8004f70:	e056      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	601a      	str	r2, [r3, #0]
	break;
 8004f9a:	e041      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	601a      	str	r2, [r3, #0]
	break;
 8004fc4:	e02c      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	601a      	str	r2, [r3, #0]
	break;
 8004fee:	e017      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	601a      	str	r2, [r3, #0]
	break;
 8005018:	e002      	b.n	8005020 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800501a:	23fc      	movs	r3, #252	; 0xfc
 800501c:	75fb      	strb	r3, [r7, #23]
		break;
 800501e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005024:	4618      	mov	r0, r3
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b098      	sub	sp, #96	; 0x60
 8005034:	af06      	add	r7, sp, #24
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	72fb      	strb	r3, [r7, #11]
 800503e:	4613      	mov	r3, r2
 8005040:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3318      	adds	r3, #24
 800504c:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005054:	3308      	adds	r3, #8
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8005068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005072:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800508e:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005092:	33c2      	adds	r3, #194	; 0xc2
 8005094:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800509c:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800509e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80050a4:	3318      	adds	r3, #24
 80050a6:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80050a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050aa:	7afa      	ldrb	r2, [r7, #11]
 80050ac:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80050ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050b2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050be:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80050c0:	2103      	movs	r1, #3
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f005 f9c1 	bl	800a44a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	2b26      	cmp	r3, #38	; 0x26
 80050ce:	f200 8321 	bhi.w	8005714 <VL53L1_set_preset_mode+0x6e4>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <VL53L1_set_preset_mode+0xa8>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	08005175 	.word	0x08005175
 80050dc:	08005199 	.word	0x08005199
 80050e0:	080051bd 	.word	0x080051bd
 80050e4:	080051e1 	.word	0x080051e1
 80050e8:	08005205 	.word	0x08005205
 80050ec:	08005229 	.word	0x08005229
 80050f0:	0800524d 	.word	0x0800524d
 80050f4:	08005271 	.word	0x08005271
 80050f8:	08005715 	.word	0x08005715
 80050fc:	08005715 	.word	0x08005715
 8005100:	08005295 	.word	0x08005295
 8005104:	080053fd 	.word	0x080053fd
 8005108:	0800558d 	.word	0x0800558d
 800510c:	080055b5 	.word	0x080055b5
 8005110:	080055dd 	.word	0x080055dd
 8005114:	08005605 	.word	0x08005605
 8005118:	0800562d 	.word	0x0800562d
 800511c:	08005651 	.word	0x08005651
 8005120:	080053d5 	.word	0x080053d5
 8005124:	080052bd 	.word	0x080052bd
 8005128:	080052e5 	.word	0x080052e5
 800512c:	0800530d 	.word	0x0800530d
 8005130:	08005335 	.word	0x08005335
 8005134:	0800535d 	.word	0x0800535d
 8005138:	08005385 	.word	0x08005385
 800513c:	080053ad 	.word	0x080053ad
 8005140:	08005425 	.word	0x08005425
 8005144:	0800544d 	.word	0x0800544d
 8005148:	08005475 	.word	0x08005475
 800514c:	0800549d 	.word	0x0800549d
 8005150:	080054c5 	.word	0x080054c5
 8005154:	080054ed 	.word	0x080054ed
 8005158:	08005515 	.word	0x08005515
 800515c:	0800553d 	.word	0x0800553d
 8005160:	08005565 	.word	0x08005565
 8005164:	08005675 	.word	0x08005675
 8005168:	0800569d 	.word	0x0800569d
 800516c:	080056c5 	.word	0x080056c5
 8005170:	080056ed 	.word	0x080056ed

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800518c:	f003 fbc6 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005196:	e2c1      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	9302      	str	r3, [sp, #8]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051b0:	f003 fd2d 	bl	8008c0e <VL53L1_preset_mode_standard_ranging_short_range>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051ba:	e2af      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	9303      	str	r3, [sp, #12]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051d4:	f003 fd60 	bl	8008c98 <VL53L1_preset_mode_standard_ranging_long_range>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051de:	e29d      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051f8:	f003 fd93 	bl	8008d22 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005202:	e28b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800521c:	f003 fdaa 	bl	8008d74 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005226:	e279      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9303      	str	r3, [sp, #12]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800523c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005240:	f003 fdc1 	bl	8008dc6 <VL53L1_preset_mode_timed_ranging>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800524a:	e267      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	9303      	str	r3, [sp, #12]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005262:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005264:	f003 fded 	bl	8008e42 <VL53L1_preset_mode_timed_ranging_short_range>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800526e:	e255      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005288:	f003 fe19 	bl	8008ebe <VL53L1_preset_mode_timed_ranging_long_range>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005292:	e243      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052b0:	f003 fefb 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052ba:	e22f      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052d8:	f003 ff7c 	bl	80091d4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052e2:	e21b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005300:	f003 ffcc 	bl	800929c <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800530a:	e207      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	9302      	str	r3, [sp, #8]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005326:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005328:	f003 ffe0 	bl	80092ec <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005332:	e1f3      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	9303      	str	r3, [sp, #12]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800534e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005350:	f004 f830 	bl	80093b4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800535a:	e1df      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	9304      	str	r3, [sp, #16]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	9303      	str	r3, [sp, #12]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	9302      	str	r3, [sp, #8]
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005376:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005378:	f004 fe25 	bl	8009fc6 <VL53L1_preset_mode_histogram_multizone>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005382:	e1cb      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	9302      	str	r3, [sp, #8]
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800539e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053a0:	f004 fe63 	bl	800a06a <VL53L1_preset_mode_histogram_multizone_short_range>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053aa:	e1b7      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	9304      	str	r3, [sp, #16]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053c8:	f004 fea1 	bl	800a10e <VL53L1_preset_mode_histogram_multizone_long_range>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053d2:	e1a3      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053f0:	f004 ffde 	bl	800a3b0 <VL53L1_preset_mode_histogram_ranging_ref>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053fa:	e18f      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	9304      	str	r3, [sp, #16]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005418:	f003 fff4 	bl	8009404 <VL53L1_preset_mode_histogram_ranging_short_timing>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005422:	e17b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	9303      	str	r3, [sp, #12]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	9302      	str	r3, [sp, #8]
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800543e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005440:	f004 f86c 	bl	800951c <VL53L1_preset_mode_histogram_long_range>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800544a:	e167      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	9304      	str	r3, [sp, #16]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005466:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005468:	f004 f8f6 	bl	8009658 <VL53L1_preset_mode_histogram_long_range_mm1>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005472:	e153      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	9303      	str	r3, [sp, #12]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	9302      	str	r3, [sp, #8]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800548e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005490:	f004 f943 	bl	800971a <VL53L1_preset_mode_histogram_long_range_mm2>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800549a:	e13f      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054b8:	f004 f957 	bl	800976a <VL53L1_preset_mode_histogram_medium_range>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054c2:	e12b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	9304      	str	r3, [sp, #16]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	9302      	str	r3, [sp, #8]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054e0:	f004 f9e1 	bl	80098a6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054ea:	e117      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005506:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005508:	f004 fa2e 	bl	8009968 <VL53L1_preset_mode_histogram_medium_range_mm2>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005512:	e103      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800552e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005530:	f004 fa42 	bl	80099b8 <VL53L1_preset_mode_histogram_short_range>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800553a:	e0ef      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005554:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005558:	f004 fb4c 	bl	8009bf4 <VL53L1_preset_mode_histogram_short_range_mm1>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005562:	e0db      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800557e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005580:	f004 fb99 	bl	8009cb6 <VL53L1_preset_mode_histogram_short_range_mm2>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800558a:	e0c7      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	9303      	str	r3, [sp, #12]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	9302      	str	r3, [sp, #8]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a8:	f004 fbad 	bl	8009d06 <VL53L1_preset_mode_histogram_characterisation>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055b2:	e0b3      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	9303      	str	r3, [sp, #12]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	9302      	str	r3, [sp, #8]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055d0:	f004 fbca 	bl	8009d68 <VL53L1_preset_mode_histogram_xtalk_planar>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055da:	e09f      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055f8:	f004 fc2d 	bl	8009e56 <VL53L1_preset_mode_histogram_xtalk_mm1>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005602:	e08b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	9302      	str	r3, [sp, #8]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800561e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005620:	f004 fcad 	bl	8009f7e <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800562a:	e077      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	9302      	str	r3, [sp, #8]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005644:	f004 fdb5 	bl	800a1b2 <VL53L1_preset_mode_olt>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800564e:	e065      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005666:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005668:	f003 fce5 	bl	8009036 <VL53L1_preset_mode_singleshot_ranging>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005672:	e053      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	9302      	str	r3, [sp, #8]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005690:	f003 fc7d 	bl	8008f8e <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800569a:	e03f      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056b8:	f003 fc3f 	bl	8008f3a <VL53L1_preset_mode_low_power_auto_ranging>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80056c2:	e02b      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056e0:	f003 fc7f 	bl	8008fe2 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80056ea:	e017      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005708:	f004 f9f4 	bl	8009af4 <VL53L1_preset_mode_special_histogram_short_range>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8005712:	e003      	b.n	800571c <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005714:	23fc      	movs	r3, #252	; 0xfc
 8005716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 800571a:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 800571c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	893a      	ldrh	r2, [r7, #8]
 8005728:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572c:	893a      	ldrh	r2, [r7, #8]
 800572e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8005730:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800573a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff f98f 	bl	8004a62 <VL53L1_set_timeouts_us>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800574a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff f92b 	bl	80049b0 <VL53L1_set_inter_measurement_period_ms>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005762:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005766:	3301      	adds	r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f005 fa82 	bl	800ac7c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005778:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800577c:	4618      	mov	r0, r3
 800577e:	3748      	adds	r7, #72	; 0x48
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3318      	adds	r3, #24
 8005796:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3318      	adds	r3, #24
 80057c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 80057d0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3318      	adds	r3, #24
 80057f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80057fe:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3318      	adds	r3, #24
 8005822:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800582c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b0d2      	sub	sp, #328	; 0x148
 8005840:	af00      	add	r7, sp, #0
 8005842:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005846:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800584a:	6018      	str	r0, [r3, #0]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005854:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005858:	4602      	mov	r2, r0
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005860:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005864:	460a      	mov	r2, r1
 8005866:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800586e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005872:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3318      	adds	r3, #24
 800587a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 800587e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005882:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800588c:	3308      	adds	r3, #8
 800588e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005892:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005896:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800589a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800589e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058a2:	3348      	adds	r3, #72	; 0x48
 80058a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80058a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058ac:	f203 3342 	addw	r3, r3, #834	; 0x342
 80058b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80058b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058b8:	f203 3362 	addw	r3, r3, #866	; 0x362
 80058bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80058c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058c4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80058c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80058cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058d0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80058d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80058d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80058e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80058e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058e8:	332c      	adds	r3, #44	; 0x2c
 80058ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80058ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058f2:	3348      	adds	r3, #72	; 0x48
 80058f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005918:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800591c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005920:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005924:	7812      	ldrb	r2, [r2, #0]
 8005926:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005928:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800592c:	791b      	ldrb	r3, [r3, #4]
 800592e:	b25b      	sxtb	r3, r3
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005936:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800593a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 800593e:	f993 3000 	ldrsb.w	r3, [r3]
 8005942:	4313      	orrs	r3, r2
 8005944:	b25b      	sxtb	r3, r3
 8005946:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005948:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800594c:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800594e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005952:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005956:	3336      	adds	r3, #54	; 0x36
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800595e:	4413      	add	r3, r2
 8005960:	1d9a      	adds	r2, r3, #6
 8005962:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005966:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800596a:	4611      	mov	r1, r2
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	f7ff f955 	bl	8004c1c <VL53L1_set_user_zone>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005978:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800597c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d019      	beq.n	80059b8 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005984:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005988:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800598c:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800599a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800599e:	4413      	add	r3, r2
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059aa:	4611      	mov	r1, r2
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	f001 fbd7 	bl	8007160 <VL53L1_set_zone_dss_config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80059b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059bc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10d      	bne.n	80059e4 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80059c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059cc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80059d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059d8:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80059dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059e0:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80059e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ec:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 80059f0:	2bff      	cmp	r3, #255	; 0xff
 80059f2:	d106      	bne.n	8005a02 <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80059f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d139      	bne.n	8005a86 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d131      	bne.n	8005a86 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005a22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a26:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005a36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a44:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005a50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a54:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005a58:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a60:	825a      	strh	r2, [r3, #18]
 8005a62:	e003      	b.n	8005a6c <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a68:	2200      	movs	r2, #0
 8005a6a:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005a6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a70:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d805      	bhi.n	8005a86 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005a7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a7e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005a82:	2205      	movs	r2, #5
 8005a84:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8e:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d117      	bne.n	8005ac6 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005a96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10f      	bne.n	8005ac6 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005aa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aae:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005ab2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ab6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005aba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005abe:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ac2:	2206      	movs	r2, #6
 8005ac4:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005ac6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005ace:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ad2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	f007 f98c 	bl	800cdf4 <VL53L1_save_cfg_data>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005ae2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ae6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d826      	bhi.n	8005b40 <VL53L1_init_and_start_range+0x304>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <VL53L1_init_and_start_range+0x2bc>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b39 	.word	0x08005b39
 8005afc:	08005b31 	.word	0x08005b31
 8005b00:	08005b29 	.word	0x08005b29
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b11 	.word	0x08005b11
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b16:	e017      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005b18:	230d      	movs	r3, #13
 8005b1a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b1e:	e013      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005b20:	2324      	movs	r3, #36	; 0x24
 8005b22:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b26:	e00f      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005b28:	2344      	movs	r3, #68	; 0x44
 8005b2a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b2e:	e00b      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005b30:	235a      	movs	r3, #90	; 0x5a
 8005b32:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b36:	e007      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005b38:	2371      	movs	r3, #113	; 0x71
 8005b3a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b3e:	e003      	b.n	8005b48 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005b40:	2383      	movs	r3, #131	; 0x83
 8005b42:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b46:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005b48:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005b4c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005b50:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005b62:	e00b      	b.n	8005b7c <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005b64:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005b72:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005b76:	3301      	adds	r3, #1
 8005b78:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005b7c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005b80:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d3ed      	bcc.n	8005b64 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005b88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b8c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d917      	bls.n	8005bc6 <VL53L1_init_and_start_range+0x38a>
 8005b96:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d113      	bne.n	8005bc6 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005b9e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ba2:	f1c3 0301 	rsb	r3, r3, #1
 8005ba6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005baa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005bae:	f107 020c 	add.w	r2, r7, #12
 8005bb2:	4413      	add	r3, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	210b      	movs	r1, #11
 8005bb8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005bbc:	f00c fb0d 	bl	80121da <VL53L1_i2c_encode_static_nvm_managed>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005bc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bca:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d917      	bls.n	8005c04 <VL53L1_init_and_start_range+0x3c8>
 8005bd4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d113      	bne.n	8005c04 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005bdc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005be0:	f1c3 030d 	rsb	r3, r3, #13
 8005be4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005be8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005bec:	f107 020c 	add.w	r2, r7, #12
 8005bf0:	4413      	add	r3, r2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2117      	movs	r1, #23
 8005bf6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005bfa:	f00c fbca 	bl	8012392 <VL53L1_i2c_encode_customer_nvm_managed>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005c04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c08:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d917      	bls.n	8005c42 <VL53L1_init_and_start_range+0x406>
 8005c12:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d113      	bne.n	8005c42 <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c1a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c1e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005c22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005c26:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005c2a:	f107 020c 	add.w	r2, r7, #12
 8005c2e:	4413      	add	r3, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	2120      	movs	r1, #32
 8005c34:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005c38:	f00c fce9 	bl	801260e <VL53L1_i2c_encode_static_config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005c42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c46:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d917      	bls.n	8005c80 <VL53L1_init_and_start_range+0x444>
 8005c50:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d113      	bne.n	8005c80 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c58:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c5c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005c60:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005c64:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005c68:	f107 020c 	add.w	r2, r7, #12
 8005c6c:	4413      	add	r3, r2
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2116      	movs	r1, #22
 8005c72:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005c76:	f00c fdad 	bl	80127d4 <VL53L1_i2c_encode_general_config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005c80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c84:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d917      	bls.n	8005cbe <VL53L1_init_and_start_range+0x482>
 8005c8e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c96:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c9a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005c9e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ca2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005ca6:	f107 020c 	add.w	r2, r7, #12
 8005caa:	4413      	add	r3, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	2117      	movs	r1, #23
 8005cb0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005cb4:	f00c fe12 	bl	80128dc <VL53L1_i2c_encode_timing_config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005cbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cc2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d036      	beq.n	8005d3a <VL53L1_init_and_start_range+0x4fe>
 8005ccc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d132      	bne.n	8005d3a <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005cd4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005cd8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005cdc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005ce0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ce4:	791b      	ldrb	r3, [r3, #4]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d017      	beq.n	8005d1e <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cfe:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d04:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d10:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d16:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d1c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d1e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005d22:	f107 020c 	add.w	r2, r7, #12
 8005d26:	4413      	add	r3, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2112      	movs	r1, #18
 8005d2c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005d30:	f00c fe56 	bl	80129e0 <VL53L1_i2c_encode_dynamic_config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005d3a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d113      	bne.n	8005d6a <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005d42:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d46:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005d4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005d52:	f107 020c 	add.w	r2, r7, #12
 8005d56:	4413      	add	r3, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2105      	movs	r1, #5
 8005d5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005d60:	f00c fec3 	bl	8012aea <VL53L1_i2c_encode_system_control>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005d6a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8005d72:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005d76:	f107 020c 	add.w	r2, r7, #12
 8005d7a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005d7e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005d82:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	f00e fbd6 	bl	8014538 <VL53L1_WriteMulti>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8005d92:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	f004 fb82 	bl	800a4ac <VL53L1_update_ll_driver_rd_state>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005dae:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005db6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	f004 fd15 	bl	800a7ee <VL53L1_update_ll_driver_cfg_state>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005dca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3318      	adds	r3, #24
 8005de8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005df0:	3308      	adds	r3, #8
 8005df2:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00c fea1 	bl	8012b60 <VL53L1_set_system_control>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005e34:	2103      	movs	r1, #3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f004 fb07 	bl	800a44a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f004 ff14 	bl	800ac7c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f004 ff46 	bl	800ace6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d102      	bne.n	8005e6e <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f008 f9b4 	bl	800e1d6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b0c8      	sub	sp, #288	; 0x120
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e88:	6018      	str	r0, [r3, #0]
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005e90:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005e94:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005ea0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3318      	adds	r3, #24
 8005ea8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005eac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eb0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005eb4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005eb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ebc:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005ec0:	331c      	adds	r3, #28
 8005ec2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005ec6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eca:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8005ed2:	2388      	movs	r3, #136	; 0x88
 8005ed4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8005ee4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005ee8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d008      	beq.n	8005f04 <VL53L1_get_measurement_results+0x8a>
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d10d      	bne.n	8005f12 <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005ef6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005efa:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005efe:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005f02:	e00a      	b.n	8005f1a <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8005f04:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f08:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005f0c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005f10:	e003      	b.n	8005f1a <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8005f12:	232c      	movs	r3, #44	; 0x2c
 8005f14:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005f18:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8005f1a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8005f22:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005f26:	f107 0208 	add.w	r2, r7, #8
 8005f2a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005f2e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005f32:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	f00e fb34 	bl	80145a4 <VL53L1_ReadMulti>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005f42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005f46:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d917      	bls.n	8005f80 <VL53L1_get_measurement_results+0x106>
 8005f50:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d113      	bne.n	8005f80 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f58:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f5c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005f60:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005f64:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8005f68:	f107 0208 	add.w	r2, r7, #8
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005f72:	4619      	mov	r1, r3
 8005f74:	2038      	movs	r0, #56	; 0x38
 8005f76:	f00c ff71 	bl	8012e5c <VL53L1_i2c_decode_debug_results>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005f80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005f84:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <VL53L1_get_measurement_results+0x144>
 8005f8e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d113      	bne.n	8005fbe <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f96:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f9a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005f9e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005fa2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005fa6:	f107 0208 	add.w	r2, r7, #8
 8005faa:	4413      	add	r3, r2
 8005fac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	2021      	movs	r0, #33	; 0x21
 8005fb4:	f00c fef1 	bl	8012d9a <VL53L1_i2c_decode_core_results>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005fbe:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d110      	bne.n	8005fe8 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005fcc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005fd0:	f107 0208 	add.w	r2, r7, #8
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005fda:	4619      	mov	r1, r3
 8005fdc:	202c      	movs	r0, #44	; 0x2c
 8005fde:	f00c fde6 	bl	8012bae <VL53L1_i2c_decode_system_results>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005fe8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffa:	b0a0      	sub	sp, #128	; 0x80
 8005ffc:	af06      	add	r7, sp, #24
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	460b      	mov	r3, r1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3318      	adds	r3, #24
 8006010:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006018:	3308      	adds	r3, #8
 800601a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 800601c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8006020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006022:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006026:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602a:	332c      	adds	r3, #44	; 0x2c
 800602c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 800602e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006030:	33c2      	adds	r3, #194	; 0xc2
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8006034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006036:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800603a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006044:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800604a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8006052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006054:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006058:	3318      	adds	r3, #24
 800605a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 800605c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006066:	3348      	adds	r3, #72	; 0x48
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 800606a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800606c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8006072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006074:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800607a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800608a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <VL53L1_get_device_results+0xa0>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <VL53L1_get_device_results+0xa2>
 8006096:	2300      	movs	r3, #0
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 800609c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 82a9 	beq.w	80065fe <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 80060ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060b2:	4619      	mov	r1, r3
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fbd7 	bl	8006868 <VL53L1_get_histogram_bin_data>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 80060c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d118      	bne.n	80060fa <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d114      	bne.n	80060fa <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 80060d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 80060da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e2:	4413      	add	r3, r2
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f005 fb6c 	bl	800b7cc <VL53L1_hist_copy_and_scale_ambient_info>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 80060fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 8220 	bne.w	8006544 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8006104:	f107 0313 	add.w	r3, r7, #19
 8006108:	4619      	mov	r1, r3
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f008 f91a 	bl	800e344 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8006116:	2301      	movs	r3, #1
 8006118:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	3b01      	subs	r3, #1
 800611e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8006122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800612a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	3202      	adds	r2, #2
 8006132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 800613a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f005 fa41 	bl	800b5d8 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8006156:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8006162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006164:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006168:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8006170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006172:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8006174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006176:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 800617a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617c:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800617e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006180:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8006184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006186:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800618e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006190:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8006194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006196:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619c:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80061a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80061a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80061ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ae:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80061b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80061b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b8:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80061ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061bc:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80061be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c0:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 80061ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061cc:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80061d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f004 fc2f 	bl	800aa3c <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80061de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e0:	795b      	ldrb	r3, [r3, #5]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d048      	beq.n	8006278 <VL53L1_get_device_results+0x282>
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	dc56      	bgt.n	8006298 <VL53L1_get_device_results+0x2a2>
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <VL53L1_get_device_results+0x1fe>
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d02e      	beq.n	8006250 <VL53L1_get_device_results+0x25a>
 80061f2:	e051      	b.n	8006298 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80061f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f6:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 80061fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 800620a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620c:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8006210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006212:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800621c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800621e:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8006222:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006224:	319c      	adds	r1, #156	; 0x9c
 8006226:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006228:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 800622c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8006230:	b2a4      	uxth	r4, r4
 8006232:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8006234:	351c      	adds	r5, #28
 8006236:	9505      	str	r5, [sp, #20]
 8006238:	9404      	str	r4, [sp, #16]
 800623a:	9003      	str	r0, [sp, #12]
 800623c:	9102      	str	r1, [sp, #8]
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4643      	mov	r3, r8
 8006244:	4672      	mov	r2, lr
 8006246:	4661      	mov	r1, ip
 8006248:	4630      	mov	r0, r6
 800624a:	f006 fa36 	bl	800c6ba <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800624e:	e027      	b.n	80062a0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8006250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006252:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 800625a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800625e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800626e:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8006270:	b21a      	sxth	r2, r3
 8006272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006274:	839a      	strh	r2, [r3, #28]
		break;
 8006276:	e013      	b.n	80062a0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	331c      	adds	r3, #28
 800627c:	4619      	mov	r1, r3
 800627e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006280:	f7fd fcf7 	bl	8003c72 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800628a:	b29b      	uxth	r3, r3
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	b29b      	uxth	r3, r3
 8006290:	b21a      	sxth	r2, r3
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	839a      	strh	r2, [r3, #28]
		break;
 8006296:	e003      	b.n	80062a0 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	2200      	movs	r2, #0
 800629c:	839a      	strh	r2, [r3, #28]
		break;
 800629e:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 80062a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 814f 	bne.w	8006548 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 80062b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b8:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80062bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062be:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 80062c2:	b29c      	uxth	r4, r3
 80062c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c6:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4623      	mov	r3, r4
 80062ce:	f006 fb99 	bl	800ca04 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 80062d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d4:	7999      	ldrb	r1, [r3, #6]
 80062d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80062dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 ff7b 	bl	80071da <VL53L1_get_dmax_calibration_data>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 80062ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 812c 	bne.w	800654c <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 80062f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f6:	f503 7526 	add.w	r5, r3, #664	; 0x298
 80062fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fc:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8006300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006302:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 800630c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8006312:	3308      	adds	r3, #8
				pdev->wArea2,
 8006314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006316:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 800631a:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 800631c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800631e:	9405      	str	r4, [sp, #20]
 8006320:	f107 0413 	add.w	r4, r7, #19
 8006324:	9404      	str	r4, [sp, #16]
 8006326:	9203      	str	r2, [sp, #12]
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	9001      	str	r0, [sp, #4]
 800632c:	9100      	str	r1, [sp, #0]
 800632e:	4633      	mov	r3, r6
 8006330:	462a      	mov	r2, r5
 8006332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f00e fb45 	bl	80149c4 <VL53L1_ipp_hist_process_data>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8006340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006344:	2b00      	cmp	r3, #0
 8006346:	d050      	beq.n	80063ea <VL53L1_get_device_results+0x3f4>
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d94d      	bls.n	80063ea <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800634e:	2300      	movs	r3, #0
 8006350:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006354:	e045      	b.n	80063e2 <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8006356:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800635a:	224c      	movs	r2, #76	; 0x4c
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	3310      	adds	r3, #16
 8006362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	7cfa      	ldrb	r2, [r7, #19]
 8006370:	fbb3 f2f2 	udiv	r2, r3, r2
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	7cfa      	ldrb	r2, [r7, #19]
 800637e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	7cfa      	ldrb	r2, [r7, #19]
 800638c:	fb93 f2f2 	sdiv	r2, r3, r2
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006398:	461a      	mov	r2, r3
 800639a:	7cfb      	ldrb	r3, [r7, #19]
 800639c:	fb92 f3f3 	sdiv	r3, r2, r3
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063aa:	461a      	mov	r2, r3
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80063bc:	461a      	mov	r2, r3
 80063be:	7cfb      	ldrb	r3, [r7, #19]
 80063c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	7cfa      	ldrb	r2, [r7, #19]
 80063d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80063d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80063dc:	3301      	adds	r3, #1
 80063de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80063e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d9b5      	bls.n	8006356 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 80063ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80ae 	bne.w	8006550 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 80063f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f6:	f503 7016 	add.w	r0, r3, #600	; 0x258
 80063fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fc:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006402:	330e      	adds	r3, #14
 8006404:	461a      	mov	r2, r3
 8006406:	f006 f922 	bl	800c64e <VL53L1_hist_wrap_dmax>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8006410:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 809d 	bne.w	8006554 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800641a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642c:	4413      	add	r3, r2
 800642e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006430:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006440:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006442:	4413      	add	r3, r2
 8006444:	f103 0208 	add.w	r2, r3, #8
 8006448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f005 fc1d 	bl	800bc8a <VL53L1_hist_phase_consistency_check>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8006456:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800645a:	2b00      	cmp	r3, #0
 800645c:	d17c      	bne.n	8006558 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800645e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006464:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006470:	4413      	add	r3, r2
 8006472:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006478:	4613      	mov	r3, r2
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006486:	4413      	add	r3, r2
 8006488:	f103 0208 	add.w	r2, r3, #8
 800648c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800648e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f006 f883 	bl	800c59e <VL53L1_hist_xmonitor_consistency_check>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 800649e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d15a      	bne.n	800655c <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80064a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2210      	movs	r2, #16
 80064b4:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80064b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80064bc:	3301      	adds	r3, #1
 80064be:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064ca:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80064cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ce:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80064d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d222      	bcs.n	8006520 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80064da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80064ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ee:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80064f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f6:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650a:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006514:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800651c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8006520:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11b      	bne.n	8006560 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800652a:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800652e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006530:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8006534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006536:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800653a:	331c      	adds	r3, #28
 800653c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800653e:	f006 fbbe 	bl	800ccbe <VL53L1_hist_copy_results_to_sys_and_core>
 8006542:	e00e      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006544:	bf00      	nop
 8006546:	e00c      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006548:	bf00      	nop
 800654a:	e00a      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800654c:	bf00      	nop
 800654e:	e008      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006550:	bf00      	nop
 8006552:	e006      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006554:	bf00      	nop
 8006556:	e004      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006558:	bf00      	nop
 800655a:	e002      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006560:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d036      	beq.n	80065d8 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 800656a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656c:	79db      	ldrb	r3, [r3, #7]
 800656e:	2b06      	cmp	r3, #6
 8006570:	d00a      	beq.n	8006588 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 8006572:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 800657a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f006 fc73 	bl	800ce68 <VL53L1_dynamic_zone_update>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800658e:	e015      	b.n	80065bc <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8006590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006592:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8006596:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <VL53L1_get_device_results+0x5ac>
 800659e:	2103      	movs	r1, #3
 80065a0:	e000      	b.n	80065a4 <VL53L1_get_device_results+0x5ae>
 80065a2:	2101      	movs	r1, #1
 80065a4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065aa:	4413      	add	r3, r2
 80065ac:	460a      	mov	r2, r1
 80065ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80065b2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065b6:	3301      	adds	r3, #1
 80065b8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80065bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065c0:	2b0f      	cmp	r3, #15
 80065c2:	d9e5      	bls.n	8006590 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80065c4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f006 fcc6 	bl	800cf5e <VL53L1_multizone_hist_bins_update>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 80065d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f007 f9d3 	bl	800d98c <VL53L1_dynamic_xtalk_correction_corrector>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 80065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d043      	beq.n	800667c <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e03e      	b.n	800667c <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 80065fe:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	4619      	mov	r1, r3
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fc35 	bl	8005e7a <VL53L1_get_measurement_results>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006616:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800661e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006620:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006624:	4618      	mov	r0, r3
 8006626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006628:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 800662c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800662e:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8006632:	321c      	adds	r2, #28
 8006634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006636:	f000 fc1f 	bl	8006e78 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d11c      	bne.n	800667c <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 8006642:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f007 fe24 	bl	800e2a0 <VL53L1_low_power_auto_setup_manual_calibration>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2201      	movs	r2, #1
 8006662:	709a      	strb	r2, [r3, #2]
 8006664:	e00a      	b.n	800667c <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006666:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006672:	2b01      	cmp	r3, #1
 8006674:	d102      	bne.n	800667c <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2202      	movs	r2, #2
 800667a:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800667c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006684:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800668c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800668e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006692:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006698:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 800669a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 80b0 	bne.w	8006804 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80066a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a6:	2210      	movs	r2, #16
 80066a8:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80066ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ae:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80066b2:	3301      	adds	r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80066bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80066c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80066cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066d0:	429a      	cmp	r2, r3
 80066d2:	f080 8097 	bcs.w	8006804 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80066d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80066da:	4613      	mov	r3, r2
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80066e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066e8:	4413      	add	r3, r2
 80066ea:	3308      	adds	r3, #8
 80066ec:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80066ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f0:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80066f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f4:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80066f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f8:	785a      	ldrb	r2, [r3, #1]
 80066fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066fc:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80066fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006700:	789a      	ldrb	r2, [r3, #2]
 8006702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006704:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006708:	78da      	ldrb	r2, [r3, #3]
 800670a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800670c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800670e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006710:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800671a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8006722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006724:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800672a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800672e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006730:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800673a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800673c:	7c5a      	ldrb	r2, [r3, #17]
 800673e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006740:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8006742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006744:	7c9a      	ldrb	r2, [r3, #18]
 8006746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006748:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800674a:	2300      	movs	r3, #0
 800674c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006750:	e052      	b.n	80067f8 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006752:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006756:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800675a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800675c:	204c      	movs	r0, #76	; 0x4c
 800675e:	fb00 f303 	mul.w	r3, r0, r3
 8006762:	440b      	add	r3, r1
 8006764:	3338      	adds	r3, #56	; 0x38
 8006766:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006768:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800676a:	4613      	mov	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4403      	add	r3, r0
 8006774:	3308      	adds	r3, #8
 8006776:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006778:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800677c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006782:	204c      	movs	r0, #76	; 0x4c
 8006784:	fb00 f303 	mul.w	r3, r0, r3
 8006788:	440b      	add	r3, r1
 800678a:	333c      	adds	r3, #60	; 0x3c
 800678c:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800678e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4403      	add	r3, r0
 800679a:	330c      	adds	r3, #12
 800679c:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800679e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80067a2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80067a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a8:	204c      	movs	r0, #76	; 0x4c
 80067aa:	fb00 f303 	mul.w	r3, r0, r3
 80067ae:	440b      	add	r3, r1
 80067b0:	3354      	adds	r3, #84	; 0x54
 80067b2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80067b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	3310      	adds	r3, #16
 80067c2:	4602      	mov	r2, r0
 80067c4:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 80067c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 80067ca:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 80067ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067d0:	204c      	movs	r0, #76	; 0x4c
 80067d2:	fb00 f303 	mul.w	r3, r0, r3
 80067d6:	440b      	add	r3, r1
 80067d8:	335e      	adds	r3, #94	; 0x5e
 80067da:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 80067dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067de:	4613      	mov	r3, r2
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	3312      	adds	r3, #18
 80067ea:	4602      	mov	r2, r0
 80067ec:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 80067ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80067f2:	3301      	adds	r3, #1
 80067f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80067f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067fa:	7c9b      	ldrb	r3, [r3, #18]
 80067fc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006800:	429a      	cmp	r2, r3
 8006802:	d3a6      	bcc.n	8006752 <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006804:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006808:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f012 fe58 	bl	80194c0 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006810:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f003 ff35 	bl	800a688 <VL53L1_check_ll_driver_rd_state>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006824:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006828:	4618      	mov	r0, r3
 800682a:	3768      	adds	r7, #104	; 0x68
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006832 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8006842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	2203      	movs	r2, #3
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fe fff3 	bl	800583c <VL53L1_init_and_start_range>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800685a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b0d2      	sub	sp, #328	; 0x148
 800686c:	af00      	add	r7, sp, #0
 800686e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006872:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006876:	6018      	str	r0, [r3, #0]
 8006878:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800687c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006880:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006888:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800688c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3318      	adds	r3, #24
 8006894:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006898:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800689c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80068a6:	3308      	adds	r3, #8
 80068a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80068ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068b0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80068b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80068b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068bc:	f203 3342 	addw	r3, r3, #834	; 0x342
 80068c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80068c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068c8:	f203 3362 	addw	r3, r3, #866	; 0x362
 80068cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80068d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068d4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80068d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 80068dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80068e4:	f107 030c 	add.w	r3, r7, #12
 80068e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006916:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800691a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006922:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 800692a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800692e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006932:	2353      	movs	r3, #83	; 0x53
 8006934:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006938:	2188      	movs	r1, #136	; 0x88
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	f00d fe32 	bl	80145a4 <VL53L1_ReadMulti>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006946:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006950:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 800695a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800695e:	785a      	ldrb	r2, [r3, #1]
 8006960:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006964:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800696e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006972:	789a      	ldrb	r2, [r3, #2]
 8006974:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006978:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006982:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006986:	78da      	ldrb	r2, [r3, #3]
 8006988:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800698c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006996:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	2002      	movs	r0, #2
 80069a0:	f004 fb75 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80069a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80069b6:	234e      	movs	r3, #78	; 0x4e
 80069b8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80069bc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80069c0:	f107 020c 	add.w	r2, r7, #12
 80069c4:	4413      	add	r3, r2
 80069c6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80069ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80069ce:	2002      	movs	r0, #2
 80069d0:	f004 fb5d 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80069d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80069e6:	2350      	movs	r3, #80	; 0x50
 80069e8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80069ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80069f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069f4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80069f8:	5cd2      	ldrb	r2, [r2, r3]
 80069fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006a08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1e:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006a22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006a30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a38:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006a3c:	2351      	movs	r3, #81	; 0x51
 8006a3e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006a42:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a46:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a4a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006a56:	2352      	movs	r3, #82	; 0x52
 8006a58:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006a5c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a60:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a64:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a68:	5cd2      	ldrb	r2, [r2, r3]
 8006a6a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006a6e:	4413      	add	r3, r2
 8006a70:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006a74:	234d      	movs	r3, #77	; 0x4d
 8006a76:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006a7a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a7e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a82:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a86:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006a8a:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006a8c:	2306      	movs	r3, #6
 8006a8e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006a92:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a96:	f107 020c 	add.w	r2, r7, #12
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006aa6:	e01a      	b.n	8006ade <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006aa8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006aac:	2003      	movs	r0, #3
 8006aae:	f004 fb8d 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8006ab2:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006ab4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006ab8:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006aba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006abe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3206      	adds	r2, #6
 8006ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006aca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ace:	3303      	adds	r3, #3
 8006ad0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006ad4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006ade:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006ae2:	2b17      	cmp	r3, #23
 8006ae4:	d9e0      	bls.n	8006aa8 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006ae6:	f107 0208 	add.w	r2, r7, #8
 8006aea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006aee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006af2:	f248 018d 	movw	r1, #32909	; 0x808d
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	f000 fbd0 	bl	800729c <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006afc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d118      	bne.n	8006b40 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b12:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006b16:	3318      	adds	r3, #24
 8006b18:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f012 fcdc 	bl	80194dc <memset>
		pdev->bin_rec_pos = 0;
 8006b24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006b32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006b40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10b      	bne.n	8006b66 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006b4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b52:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006b56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b5e:	6811      	ldr	r1, [r2, #0]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7fd f97e 	bl	8003e62 <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006b66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b6a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006b6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b72:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006b7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2200      	movs	r2, #0
 8006b86:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006b88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2218      	movs	r2, #24
 8006b94:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006b96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b9a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2218      	movs	r2, #24
 8006ba2:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006ba4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ba8:	78da      	ldrb	r2, [r3, #3]
 8006baa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006bb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bbc:	799b      	ldrb	r3, [r3, #6]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006bc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006bd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bd6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006be4:	7c1b      	ldrb	r3, [r3, #16]
 8006be6:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006be8:	4413      	add	r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006c00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006c0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c12:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006c16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c1e:	6811      	ldr	r1, [r2, #0]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	f004 fed4 	bl	800b9ce <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d117      	bne.n	8006c62 <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c36:	791b      	ldrb	r3, [r3, #4]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006c3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c42:	795b      	ldrb	r3, [r3, #5]
 8006c44:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006c46:	4413      	add	r3, r2
 8006c48:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006c4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c50:	799a      	ldrb	r2, [r3, #6]
 8006c52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c56:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006c60:	e016      	b.n	8006c90 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006c62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c66:	79db      	ldrb	r3, [r3, #7]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006c6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c72:	7a1b      	ldrb	r3, [r3, #8]
 8006c74:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006c76:	4413      	add	r3, r2
 8006c78:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c80:	7a5a      	ldrb	r2, [r3, #9]
 8006c82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006c90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006ca4:	e01f      	b.n	8006ce6 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006ca6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006caa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006cae:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	7b1b      	ldrb	r3, [r3, #12]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	d10d      	bne.n	8006cdc <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006cc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	7adb      	ldrb	r3, [r3, #11]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006cd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006cdc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006ce6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d9db      	bls.n	8006ca6 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006cee:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f004 fcdb 	bl	800b6ae <VL53L1_decode_timeout>
 8006cf8:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006cfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cfe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006d08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006d16:	4618      	mov	r0, r3
 8006d18:	f007 fb54 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 8006d1c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006d20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006d34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8006d42:	4619      	mov	r1, r3
 8006d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d4c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8006d50:	f007 fb4f 	bl	800e3f2 <VL53L1_duration_maths>
 8006d54:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006d56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d5a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006d64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006d74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f007 fc5e 	bl	800e63e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8006d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	f008 f875 	bl	800ee7a <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d94:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006d98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006da8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006dac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006db0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8006db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	789b      	ldrb	r3, [r3, #2]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006dd2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3302      	adds	r3, #2
 8006dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de2:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006de4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006de8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df6:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006df8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006e0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e12:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	2b11      	cmp	r3, #17
 8006e22:	bf8c      	ite	hi
 8006e24:	2201      	movhi	r2, #1
 8006e26:	2200      	movls	r2, #0
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d11b      	bne.n	8006e66 <VL53L1_get_histogram_bin_data+0x5fe>
 8006e2e:	2201      	movs	r2, #1
 8006e30:	409a      	lsls	r2, r3
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <VL53L1_get_histogram_bin_data+0x60c>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006e44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e5c:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006e5e:	23fa      	movs	r3, #250	; 0xfa
 8006e60:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006e64:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006e66:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	0002200e 	.word	0x0002200e

08006e78 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b08b      	sub	sp, #44	; 0x2c
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	78da      	ldrb	r2, [r3, #3]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	8a1b      	ldrh	r3, [r3, #16]
 8006eb8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	8a9b      	ldrh	r3, [r3, #20]
 8006ebe:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	8a5b      	ldrh	r3, [r3, #18]
 8006ec4:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ecc:	e00b      	b.n	8006ee6 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8006ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d9ef      	bls.n	8006ece <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006efa:	e0fe      	b.n	80070fa <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f02:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2200      	movs	r2, #0
 8006f08:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d104      	bne.n	8006f28 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	2213      	movs	r2, #19
 8006f22:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006f26:	e007      	b.n	8006f38 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	2200      	movs	r2, #0
 8006f42:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2200      	movs	r2, #0
 8006f48:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2200      	movs	r2, #0
 8006f54:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d05c      	beq.n	8007022 <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8006f68:	e0a8      	b.n	80070bc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	789b      	ldrb	r3, [r3, #2]
 8006f6e:	2b07      	cmp	r3, #7
 8006f70:	d103      	bne.n	8006f7a <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	8a7a      	ldrh	r2, [r7, #18]
 8006f76:	82da      	strh	r2, [r3, #22]
 8006f78:	e00b      	b.n	8006f92 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	789b      	ldrb	r3, [r3, #2]
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d103      	bne.n	8006f8a <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	8aba      	ldrh	r2, [r7, #20]
 8006f86:	82da      	strh	r2, [r3, #22]
 8006f88:	e003      	b.n	8006f92 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	8afa      	ldrh	r2, [r7, #22]
 8006f96:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	895b      	ldrh	r3, [r3, #10]
 8006fac:	015b      	lsls	r3, r3, #5
 8006fae:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb6:	d302      	bcc.n	8006fbe <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fbc:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006fd4:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe6:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	da01      	bge.n	8006ff2 <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8006fee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006ff2:	12db      	asrs	r3, r3, #11
 8006ff4:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	b21a      	sxth	r2, r3
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007020:	e04c      	b.n	80070bc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007038:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	8bdb      	ldrh	r3, [r3, #30]
 8007046:	015b      	lsls	r3, r3, #5
 8007048:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007050:	d302      	bcc.n	8007058 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8007052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007056:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	b29a      	uxth	r2, r3
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800706e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007080:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	da01      	bge.n	800708c <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8007088:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800708c:	12db      	asrs	r3, r3, #11
 800708e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	b21a      	sxth	r2, r3
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80070ba:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	334c      	adds	r3, #76	; 0x4c
 80070ee:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80070f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f4:	3301      	adds	r3, #1
 80070f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f67f aefc 	bls.w	8006efc <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	2b11      	cmp	r3, #17
 8007114:	bf8c      	ite	hi
 8007116:	2201      	movhi	r2, #1
 8007118:	2200      	movls	r2, #0
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	2a00      	cmp	r2, #0
 800711e:	d116      	bne.n	800714e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8007120:	2201      	movs	r2, #1
 8007122:	409a      	lsls	r2, r3
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	b2da      	uxtb	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 800714c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800714e:	bf00      	nop
 8007150:	372c      	adds	r7, #44	; 0x2c
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	0002200e 	.word	0x0002200e

08007160 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3318      	adds	r3, #24
 8007172:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	332c      	adds	r3, #44	; 0x2c
 8007178:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b05      	cmp	r3, #5
 8007180:	d109      	bne.n	8007196 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8007194:	e003      	b.n	800719e <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800719e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3318      	adds	r3, #24
 80071c2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	72fb      	strb	r3, [r7, #11]
 80071e8:	4613      	mov	r3, r2
 80071ea:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3318      	adds	r3, #24
 80071f4:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80071fc:	3308      	adds	r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d006      	beq.n	8007214 <VL53L1_get_dmax_calibration_data+0x3a>
 8007206:	2b03      	cmp	r3, #3
 8007208:	dc3e      	bgt.n	8007288 <VL53L1_get_dmax_calibration_data+0xae>
 800720a:	2b01      	cmp	r3, #1
 800720c:	d034      	beq.n	8007278 <VL53L1_get_dmax_calibration_data+0x9e>
 800720e:	2b02      	cmp	r3, #2
 8007210:	d02a      	beq.n	8007268 <VL53L1_get_dmax_calibration_data+0x8e>
 8007212:	e039      	b.n	8007288 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8007214:	7aba      	ldrb	r2, [r7, #10]
 8007216:	6979      	ldr	r1, [r7, #20]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 800722e:	7aba      	ldrb	r2, [r7, #10]
 8007230:	6979      	ldr	r1, [r7, #20]
 8007232:	4613      	mov	r3, r2
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 800724e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007264:	811a      	strh	r2, [r3, #8]
	break;
 8007266:	e012      	b.n	800728e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800726c:	220a      	movs	r2, #10
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f012 f925 	bl	80194c0 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007276:	e00a      	b.n	800728e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 800727c:	220a      	movs	r2, #10
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f012 f91d 	bl	80194c0 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007286:	e002      	b.n	800728e <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007288:	23fc      	movs	r3, #252	; 0xfc
 800728a:	77fb      	strb	r3, [r7, #31]
	break;
 800728c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800728e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	460b      	mov	r3, r1
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3318      	adds	r3, #24
 80072b2:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072ba:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80072c2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80072c4:	897b      	ldrh	r3, [r7, #10]
 80072c6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80072ca:	2bbe      	cmp	r3, #190	; 0xbe
 80072cc:	f200 86fc 	bhi.w	80080c8 <VL53L1_get_tuning_parm+0xe2c>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <VL53L1_get_tuning_parm+0x3c>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	080075d5 	.word	0x080075d5
 80072dc:	080075e5 	.word	0x080075e5
 80072e0:	080075f5 	.word	0x080075f5
 80072e4:	08007605 	.word	0x08007605
 80072e8:	08007613 	.word	0x08007613
 80072ec:	08007621 	.word	0x08007621
 80072f0:	0800762f 	.word	0x0800762f
 80072f4:	0800763d 	.word	0x0800763d
 80072f8:	0800764b 	.word	0x0800764b
 80072fc:	08007659 	.word	0x08007659
 8007300:	08007667 	.word	0x08007667
 8007304:	08007673 	.word	0x08007673
 8007308:	08007681 	.word	0x08007681
 800730c:	0800768f 	.word	0x0800768f
 8007310:	0800769b 	.word	0x0800769b
 8007314:	080076a9 	.word	0x080076a9
 8007318:	080076b7 	.word	0x080076b7
 800731c:	080076c7 	.word	0x080076c7
 8007320:	080076d7 	.word	0x080076d7
 8007324:	080076e5 	.word	0x080076e5
 8007328:	080076f5 	.word	0x080076f5
 800732c:	08007703 	.word	0x08007703
 8007330:	08007713 	.word	0x08007713
 8007334:	08007723 	.word	0x08007723
 8007338:	08007733 	.word	0x08007733
 800733c:	08007743 	.word	0x08007743
 8007340:	08007753 	.word	0x08007753
 8007344:	08007763 	.word	0x08007763
 8007348:	08007773 	.word	0x08007773
 800734c:	08007783 	.word	0x08007783
 8007350:	08007793 	.word	0x08007793
 8007354:	080077a1 	.word	0x080077a1
 8007358:	080077b1 	.word	0x080077b1
 800735c:	080077c1 	.word	0x080077c1
 8007360:	080077d1 	.word	0x080077d1
 8007364:	080077e1 	.word	0x080077e1
 8007368:	080077f1 	.word	0x080077f1
 800736c:	08007801 	.word	0x08007801
 8007370:	08007811 	.word	0x08007811
 8007374:	08007821 	.word	0x08007821
 8007378:	08007831 	.word	0x08007831
 800737c:	08007841 	.word	0x08007841
 8007380:	08007851 	.word	0x08007851
 8007384:	08007861 	.word	0x08007861
 8007388:	08007871 	.word	0x08007871
 800738c:	08007881 	.word	0x08007881
 8007390:	08007891 	.word	0x08007891
 8007394:	080078a1 	.word	0x080078a1
 8007398:	080078b1 	.word	0x080078b1
 800739c:	080078c1 	.word	0x080078c1
 80073a0:	080078d1 	.word	0x080078d1
 80073a4:	080078df 	.word	0x080078df
 80073a8:	080078ed 	.word	0x080078ed
 80073ac:	080078fb 	.word	0x080078fb
 80073b0:	08007909 	.word	0x08007909
 80073b4:	08007917 	.word	0x08007917
 80073b8:	08007925 	.word	0x08007925
 80073bc:	08007933 	.word	0x08007933
 80073c0:	08007941 	.word	0x08007941
 80073c4:	0800794f 	.word	0x0800794f
 80073c8:	0800795d 	.word	0x0800795d
 80073cc:	0800796b 	.word	0x0800796b
 80073d0:	08007979 	.word	0x08007979
 80073d4:	08007987 	.word	0x08007987
 80073d8:	08007995 	.word	0x08007995
 80073dc:	080079a3 	.word	0x080079a3
 80073e0:	080079b1 	.word	0x080079b1
 80073e4:	080079bf 	.word	0x080079bf
 80073e8:	080079cd 	.word	0x080079cd
 80073ec:	080079db 	.word	0x080079db
 80073f0:	080079e9 	.word	0x080079e9
 80073f4:	080079f7 	.word	0x080079f7
 80073f8:	08007a05 	.word	0x08007a05
 80073fc:	08007a13 	.word	0x08007a13
 8007400:	08007a1f 	.word	0x08007a1f
 8007404:	08007a2d 	.word	0x08007a2d
 8007408:	08007a3b 	.word	0x08007a3b
 800740c:	08007a47 	.word	0x08007a47
 8007410:	08007a53 	.word	0x08007a53
 8007414:	08007a5f 	.word	0x08007a5f
 8007418:	08007a6b 	.word	0x08007a6b
 800741c:	08007a77 	.word	0x08007a77
 8007420:	08007a83 	.word	0x08007a83
 8007424:	08007a91 	.word	0x08007a91
 8007428:	08007a9f 	.word	0x08007a9f
 800742c:	08007aad 	.word	0x08007aad
 8007430:	08007abb 	.word	0x08007abb
 8007434:	08007ac9 	.word	0x08007ac9
 8007438:	08007ad7 	.word	0x08007ad7
 800743c:	08007ae5 	.word	0x08007ae5
 8007440:	08007af3 	.word	0x08007af3
 8007444:	08007b01 	.word	0x08007b01
 8007448:	08007b0f 	.word	0x08007b0f
 800744c:	08007b1d 	.word	0x08007b1d
 8007450:	08007b2b 	.word	0x08007b2b
 8007454:	08007b39 	.word	0x08007b39
 8007458:	08007b47 	.word	0x08007b47
 800745c:	08007b55 	.word	0x08007b55
 8007460:	08007b63 	.word	0x08007b63
 8007464:	08007b71 	.word	0x08007b71
 8007468:	08007b7f 	.word	0x08007b7f
 800746c:	08007b8d 	.word	0x08007b8d
 8007470:	08007b9b 	.word	0x08007b9b
 8007474:	08007ba9 	.word	0x08007ba9
 8007478:	08007bb7 	.word	0x08007bb7
 800747c:	08007bc5 	.word	0x08007bc5
 8007480:	08007bd3 	.word	0x08007bd3
 8007484:	08007be1 	.word	0x08007be1
 8007488:	08007bef 	.word	0x08007bef
 800748c:	08007bfd 	.word	0x08007bfd
 8007490:	08007c0b 	.word	0x08007c0b
 8007494:	08007c19 	.word	0x08007c19
 8007498:	08007c27 	.word	0x08007c27
 800749c:	08007c35 	.word	0x08007c35
 80074a0:	08007c43 	.word	0x08007c43
 80074a4:	08007c51 	.word	0x08007c51
 80074a8:	08007c5f 	.word	0x08007c5f
 80074ac:	08007c6d 	.word	0x08007c6d
 80074b0:	08007c7b 	.word	0x08007c7b
 80074b4:	08007c8d 	.word	0x08007c8d
 80074b8:	08007c9f 	.word	0x08007c9f
 80074bc:	08007cb1 	.word	0x08007cb1
 80074c0:	08007cc3 	.word	0x08007cc3
 80074c4:	08007cd5 	.word	0x08007cd5
 80074c8:	08007ce7 	.word	0x08007ce7
 80074cc:	08007cf9 	.word	0x08007cf9
 80074d0:	08007d0b 	.word	0x08007d0b
 80074d4:	08007d1d 	.word	0x08007d1d
 80074d8:	08007d2f 	.word	0x08007d2f
 80074dc:	08007d41 	.word	0x08007d41
 80074e0:	08007d53 	.word	0x08007d53
 80074e4:	08007d65 	.word	0x08007d65
 80074e8:	08007d77 	.word	0x08007d77
 80074ec:	08007d89 	.word	0x08007d89
 80074f0:	08007d9b 	.word	0x08007d9b
 80074f4:	08007dad 	.word	0x08007dad
 80074f8:	08007dbf 	.word	0x08007dbf
 80074fc:	08007dd1 	.word	0x08007dd1
 8007500:	08007ddf 	.word	0x08007ddf
 8007504:	08007ded 	.word	0x08007ded
 8007508:	08007dfb 	.word	0x08007dfb
 800750c:	08007e09 	.word	0x08007e09
 8007510:	08007e17 	.word	0x08007e17
 8007514:	08007e25 	.word	0x08007e25
 8007518:	08007e33 	.word	0x08007e33
 800751c:	08007e45 	.word	0x08007e45
 8007520:	08007e53 	.word	0x08007e53
 8007524:	08007e61 	.word	0x08007e61
 8007528:	08007e6f 	.word	0x08007e6f
 800752c:	08007e7d 	.word	0x08007e7d
 8007530:	08007e8b 	.word	0x08007e8b
 8007534:	08007e99 	.word	0x08007e99
 8007538:	08007ea7 	.word	0x08007ea7
 800753c:	08007eb5 	.word	0x08007eb5
 8007540:	08007ec3 	.word	0x08007ec3
 8007544:	08007ed1 	.word	0x08007ed1
 8007548:	08007edf 	.word	0x08007edf
 800754c:	08007eed 	.word	0x08007eed
 8007550:	08007efb 	.word	0x08007efb
 8007554:	08007f09 	.word	0x08007f09
 8007558:	08007f17 	.word	0x08007f17
 800755c:	08007f25 	.word	0x08007f25
 8007560:	08007f33 	.word	0x08007f33
 8007564:	08007f41 	.word	0x08007f41
 8007568:	08007f4f 	.word	0x08007f4f
 800756c:	08007f5d 	.word	0x08007f5d
 8007570:	08007f6b 	.word	0x08007f6b
 8007574:	08007f79 	.word	0x08007f79
 8007578:	08007f87 	.word	0x08007f87
 800757c:	08007f95 	.word	0x08007f95
 8007580:	08007fa3 	.word	0x08007fa3
 8007584:	08007fb1 	.word	0x08007fb1
 8007588:	08007fbf 	.word	0x08007fbf
 800758c:	08007fcd 	.word	0x08007fcd
 8007590:	08007fdb 	.word	0x08007fdb
 8007594:	08007fe9 	.word	0x08007fe9
 8007598:	08007ff7 	.word	0x08007ff7
 800759c:	08008005 	.word	0x08008005
 80075a0:	08008013 	.word	0x08008013
 80075a4:	08008021 	.word	0x08008021
 80075a8:	0800802f 	.word	0x0800802f
 80075ac:	0800803d 	.word	0x0800803d
 80075b0:	0800804b 	.word	0x0800804b
 80075b4:	08008059 	.word	0x08008059
 80075b8:	08008067 	.word	0x08008067
 80075bc:	08008075 	.word	0x08008075
 80075c0:	08008083 	.word	0x08008083
 80075c4:	08008091 	.word	0x08008091
 80075c8:	0800809f 	.word	0x0800809f
 80075cc:	080080ad 	.word	0x080080ad
 80075d0:	080080bb 	.word	0x080080bb

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80075da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	601a      	str	r2, [r3, #0]
	break;
 80075e0:	f000 bd79 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80075ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
	break;
 80075f0:	f000 bd71 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 80075fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
	break;
 8007600:	f000 bd69 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
	break;
 800760e:	f000 bd62 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]
	break;
 800761c:	f000 bd5b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	789b      	ldrb	r3, [r3, #2]
 8007624:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
	break;
 800762a:	f000 bd54 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	78db      	ldrb	r3, [r3, #3]
 8007632:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
	break;
 8007638:	f000 bd4d 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
	break;
 8007646:	f000 bd46 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	795b      	ldrb	r3, [r3, #5]
 800764e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]
	break;
 8007654:	f000 bd3f 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	799b      	ldrb	r3, [r3, #6]
 800765c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
	break;
 8007662:	f000 bd38 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	break;
 800766e:	f000 bd32 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	891b      	ldrh	r3, [r3, #8]
 8007676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
	break;
 800767c:	f000 bd2b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	8a1b      	ldrh	r3, [r3, #16]
 8007684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	601a      	str	r2, [r3, #0]
	break;
 800768a:	f000 bd24 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	break;
 8007696:	f000 bd1e 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	7e1b      	ldrb	r3, [r3, #24]
 800769e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
	break;
 80076a4:	f000 bd17 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	8b5b      	ldrh	r3, [r3, #26]
 80076ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
	break;
 80076b2:	f000 bd10 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80076bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
	break;
 80076c2:	f000 bd08 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80076cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
	break;
 80076d2:	f000 bd00 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]
	break;
 80076e0:	f000 bcf9 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
	break;
 80076f0:	f000 bcf1 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
	break;
 80076fe:	f000 bcea 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007708:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
	break;
 800770e:	f000 bce2 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007718:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
	break;
 800771e:	f000 bcda 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007728:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
	break;
 800772e:	f000 bcd2 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007738:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
	break;
 800773e:	f000 bcca 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007748:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
	break;
 800774e:	f000 bcc2 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007758:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
	break;
 800775e:	f000 bcba 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007768:	461a      	mov	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
	break;
 800776e:	f000 bcb2 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
	break;
 800777e:	f000 bcaa 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8007788:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
	break;
 800778e:	f000 bca2 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007796:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
	break;
 800779c:	f000 bc9b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
	break;
 80077ac:	f000 bc93 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]
	break;
 80077bc:	f000 bc8b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 80077c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
	break;
 80077cc:	f000 bc83 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80077d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
	break;
 80077dc:	f000 bc7b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80077e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
	break;
 80077ec:	f000 bc73 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80077f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	601a      	str	r2, [r3, #0]
	break;
 80077fc:	f000 bc6b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007806:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	601a      	str	r2, [r3, #0]
	break;
 800780c:	f000 bc63 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007816:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
	break;
 800781c:	f000 bc5b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007826:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
	break;
 800782c:	f000 bc53 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007836:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
	break;
 800783c:	f000 bc4b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007846:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
	break;
 800784c:	f000 bc43 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]
	break;
 800785c:	f000 bc3b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007866:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	601a      	str	r2, [r3, #0]
	break;
 800786c:	f000 bc33 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
	break;
 800787c:	f000 bc2b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007886:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	601a      	str	r2, [r3, #0]
	break;
 800788c:	f000 bc23 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007896:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]
	break;
 800789c:	f000 bc1b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80078a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
	break;
 80078ac:	f000 bc13 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80078b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
	break;
 80078bc:	f000 bc0b 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 80078c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	break;
 80078cc:	f000 bc03 	b.w	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80078d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	601a      	str	r2, [r3, #0]
	break;
 80078dc:	e3fb      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80078e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
	break;
 80078ea:	e3f4      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 80078f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
	break;
 80078f8:	e3ed      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
	break;
 8007906:	e3e6      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800790e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
	break;
 8007914:	e3df      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800791c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
	break;
 8007922:	e3d8      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800792a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
	break;
 8007930:	e3d1      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
	break;
 800793e:	e3ca      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007946:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
	break;
 800794c:	e3c3      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	break;
 800795a:	e3bc      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
	break;
 8007968:	e3b5      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
	break;
 8007976:	e3ae      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800797e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	break;
 8007984:	e3a7      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800798c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
	break;
 8007992:	e3a0      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800799a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	601a      	str	r2, [r3, #0]
	break;
 80079a0:	e399      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 80079a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
	break;
 80079ae:	e392      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80079b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	601a      	str	r2, [r3, #0]
	break;
 80079bc:	e38b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80079c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
	break;
 80079ca:	e384      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 80079d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
	break;
 80079d8:	e37d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80079e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
	break;
 80079e6:	e376      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 80079ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	break;
 80079f4:	e36f      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80079fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
	break;
 8007a02:	e368      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007a0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
	break;
 8007a10:	e361      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
	break;
 8007a1c:	e35b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007a24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
	break;
 8007a2a:	e354      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]
	break;
 8007a38:	e34d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
	break;
 8007a44:	e347      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
	break;
 8007a50:	e341      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	8adb      	ldrh	r3, [r3, #22]
 8007a56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]
	break;
 8007a5c:	e33b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	8b1b      	ldrh	r3, [r3, #24]
 8007a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	break;
 8007a68:	e335      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
	break;
 8007a74:	e32f      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	break;
 8007a80:	e329      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007a88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
	break;
 8007a8e:	e322      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	break;
 8007a9c:	e31b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007aa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]
	break;
 8007aaa:	e314      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
	break;
 8007ab8:	e30d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
	break;
 8007ac6:	e306      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
	break;
 8007ad4:	e2ff      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007adc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
	break;
 8007ae2:	e2f8      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007aea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
	break;
 8007af0:	e2f1      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007af8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
	break;
 8007afe:	e2ea      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007b06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
	break;
 8007b0c:	e2e3      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007b14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
	break;
 8007b1a:	e2dc      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
	break;
 8007b28:	e2d5      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	break;
 8007b36:	e2ce      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	break;
 8007b44:	e2c7      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
	break;
 8007b52:	e2c0      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
	break;
 8007b60:	e2b9      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007b68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
	break;
 8007b6e:	e2b2      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
	break;
 8007b7c:	e2ab      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
	break;
 8007b8a:	e2a4      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
	break;
 8007b98:	e29d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007ba0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
	break;
 8007ba6:	e296      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]
	break;
 8007bb4:	e28f      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]
	break;
 8007bc2:	e288      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
	break;
 8007bd0:	e281      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007bd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
	break;
 8007bde:	e27a      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007be6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
	break;
 8007bec:	e273      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007bf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
	break;
 8007bfa:	e26c      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
	break;
 8007c08:	e265      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	break;
 8007c16:	e25e      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
	break;
 8007c24:	e257      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
	break;
 8007c32:	e250      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	break;
 8007c40:	e249      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007c48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	break;
 8007c4e:	e242      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007c56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
	break;
 8007c5c:	e23b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007c64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
	break;
 8007c6a:	e234      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007c72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
	break;
 8007c78:	e22d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c80:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
	break;
 8007c8a:	e224      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
	break;
 8007c9c:	e21b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007ca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
	break;
 8007cae:	e212      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
	break;
 8007cc0:	e209      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007ccc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
	break;
 8007cd2:	e200      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cda:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007cde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	601a      	str	r2, [r3, #0]
	break;
 8007ce4:	e1f7      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cec:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007cf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
	break;
 8007cf6:	e1ee      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]
	break;
 8007d08:	e1e5      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d10:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007d14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
	break;
 8007d1a:	e1dc      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	601a      	str	r2, [r3, #0]
	break;
 8007d2c:	e1d3      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d34:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007d38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
	break;
 8007d3e:	e1ca      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d46:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007d4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
	break;
 8007d50:	e1c1      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d58:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007d5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	601a      	str	r2, [r3, #0]
	break;
 8007d62:	e1b8      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	break;
 8007d74:	e1af      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
	break;
 8007d86:	e1a6      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]
	break;
 8007d98:	e19d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
	break;
 8007daa:	e194      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8007db6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
	break;
 8007dbc:	e18b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8007dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
	break;
 8007dce:	e182      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	break;
 8007ddc:	e17b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
	break;
 8007dea:	e174      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
	break;
 8007df8:	e16d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	break;
 8007e06:	e166      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
	break;
 8007e14:	e15f      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
	break;
 8007e22:	e158      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	601a      	str	r2, [r3, #0]
	break;
 8007e30:	e151      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e38:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
	break;
 8007e42:	e148      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007e4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	break;
 8007e50:	e141      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007e58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
	break;
 8007e5e:	e13a      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007e66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
	break;
 8007e6c:	e133      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007e74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
	break;
 8007e7a:	e12c      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8007e82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
	break;
 8007e88:	e125      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8007e90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
	break;
 8007e96:	e11e      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8007e9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
	break;
 8007ea4:	e117      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8007eac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
	break;
 8007eb2:	e110      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8007eba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
	break;
 8007ec0:	e109      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8007ec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
	break;
 8007ece:	e102      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007ed6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
	break;
 8007edc:	e0fb      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8007ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
	break;
 8007eea:	e0f4      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8007ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
	break;
 8007ef8:	e0ed      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8007f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
	break;
 8007f06:	e0e6      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
	break;
 8007f14:	e0df      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007f1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
	break;
 8007f22:	e0d8      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	break;
 8007f30:	e0d1      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
	break;
 8007f3e:	e0ca      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007f46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
	break;
 8007f4c:	e0c3      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8007f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
	break;
 8007f5a:	e0bc      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 8007f62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
	break;
 8007f68:	e0b5      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8007f70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
	break;
 8007f76:	e0ae      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8007f7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
	break;
 8007f84:	e0a7      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8007f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
	break;
 8007f92:	e0a0      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8007f9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
	break;
 8007fa0:	e099      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8007fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
	break;
 8007fae:	e092      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8007fb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
	break;
 8007fbc:	e08b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8007fc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
	break;
 8007fca:	e084      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 8007fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
	break;
 8007fd8:	e07d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8007fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	break;
 8007fe6:	e076      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8007fee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
	break;
 8007ff4:	e06f      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8007ffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
	break;
 8008002:	e068      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800800a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
	break;
 8008010:	e061      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
	break;
 800801e:	e05a      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8008026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
	break;
 800802c:	e053      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8008034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
	break;
 800803a:	e04c      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 8008042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
	break;
 8008048:	e045      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8008050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	break;
 8008056:	e03e      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800805e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	break;
 8008064:	e037      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800806c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
	break;
 8008072:	e030      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800807a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
	break;
 8008080:	e029      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8008088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
	break;
 800808e:	e022      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 8008096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
	break;
 800809c:	e01b      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 80080a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
	break;
 80080aa:	e014      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80080b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
	break;
 80080b8:	e00d      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	break;
 80080c6:	e006      	b.n	80080d6 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80080ce:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80080d0:	23fc      	movs	r3, #252	; 0xfc
 80080d2:	77fb      	strb	r3, [r7, #31]
	break;
 80080d4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80080d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3724      	adds	r7, #36	; 0x24
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop

080080e8 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3318      	adds	r3, #24
 80080f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	2201      	movs	r2, #1
 8008102:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3318      	adds	r3, #24
 8008126:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812e:	2200      	movs	r2, #0
 8008130:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3318      	adds	r3, #24
 8008154:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815c:	2201      	movs	r2, #1
 800815e:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3318      	adds	r3, #24
 8008182:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818a:	2200      	movs	r2, #0
 800818c:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3318      	adds	r3, #24
 80081b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80081be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3318      	adds	r3, #24
 80081de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80081ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2208      	movs	r2, #8
 800820c:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	220b      	movs	r2, #11
 8008212:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800821a:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008222:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800822a:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008232:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2212      	movs	r2, #18
 800825a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220f      	movs	r2, #15
 8008260:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800826e:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	220c      	movs	r2, #12
 8008274:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	895b      	ldrh	r3, [r3, #10]
 80082b6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d6:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2240      	movs	r2, #64	; 0x40
 80082e2:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10d      	bne.n	8008308 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	741a      	strb	r2, [r3, #16]
 8008306:	e002      	b.n	800830e <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2201      	movs	r2, #1
 800830c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800830e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d114      	bne.n	8008340 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800831a:	2b01      	cmp	r3, #1
 800831c:	d110      	bne.n	8008340 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	7d9b      	ldrb	r3, [r3, #22]
 8008332:	f003 f879 	bl	800b428 <VL53L1_calc_range_ignore_threshold>
 8008336:	4603      	mov	r3, r0
 8008338:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	831a      	strh	r2, [r3, #24]
 800833e:	e002      	b.n	8008346 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800834c:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2232      	movs	r2, #50	; 0x32
 8008352:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800835a:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	228c      	movs	r2, #140	; 0x8c
 8008360:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008380:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008388:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2207      	movs	r2, #7
 800838e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008396:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f242 7210 	movw	r2, #10000	; 0x2710
 800839e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80083a6:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2246      	movs	r2, #70	; 0x46
 80083ac:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80083b4:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	228c      	movs	r2, #140	; 0x8c
 80083ba:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80083bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80083de:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80083e6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80083ee:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80083f6:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2208      	movs	r2, #8
 80083fc:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2228      	movs	r2, #40	; 0x28
 8008402:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2209      	movs	r2, #9
 8008408:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800840a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800842c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008434:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800843c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008444:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2210      	movs	r2, #16
 800844a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2208      	movs	r2, #8
 8008450:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	4603      	mov	r3, r0
 800846a:	6039      	str	r1, [r7, #0]
 800846c:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2204      	movs	r2, #4
 8008476:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2201      	movs	r2, #1
 800847c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2201      	movs	r2, #1
 8008482:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2202      	movs	r2, #2
 8008488:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2250      	movs	r2, #80	; 0x50
 8008494:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2270      	movs	r2, #112	; 0x70
 800849a:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f241 023d 	movw	r2, #4157	; 0x103d
 80084a2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2210      	movs	r2, #16
 80084a8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2232      	movs	r2, #50	; 0x32
 80084ae:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2264      	movs	r2, #100	; 0x64
 80084b4:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2201      	movs	r2, #1
 80084ba:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	22a0      	movs	r2, #160	; 0xa0
 80084c0:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2200      	movs	r2, #0
 80084c6:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80084ce:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2208      	movs	r2, #8
 80084d4:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2288      	movs	r2, #136	; 0x88
 80084dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2208      	movs	r2, #8
 80084e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084f6:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	22fa      	movs	r2, #250	; 0xfa
 80084fc:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800850c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2232      	movs	r2, #50	; 0x32
 8008512:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800851a:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	228c      	movs	r2, #140	; 0x8c
 8008520:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2250      	movs	r2, #80	; 0x50
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2232      	movs	r2, #50	; 0x32
 800852e:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8008530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	220e      	movs	r2, #14
 8008556:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f642 7294 	movw	r2, #12180	; 0x2f94
 800855e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220e      	movs	r2, #14
 8008564:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	220a      	movs	r2, #10
 800856a:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2206      	movs	r2, #6
 8008570:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	220e      	movs	r2, #14
 8008576:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220a      	movs	r2, #10
 800857c:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2206      	movs	r2, #6
 8008582:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2209      	movs	r2, #9
 8008588:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2203      	movs	r2, #3
 8008594:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2206      	movs	r2, #6
 800859a:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2206      	movs	r2, #6
 80085a0:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2206      	movs	r2, #6
 80085a6:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2221      	movs	r2, #33	; 0x21
 80085b2:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	223c      	movs	r2, #60	; 0x3c
 80085c4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	223c      	movs	r2, #60	; 0x3c
 80085ca:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	223c      	movs	r2, #60	; 0x3c
 80085d0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2280      	movs	r2, #128	; 0x80
 80085d6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2280      	movs	r2, #128	; 0x80
 80085dc:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2280      	movs	r2, #128	; 0x80
 80085e2:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2208      	movs	r2, #8
 80085e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2210      	movs	r2, #16
 80085f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008622:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800862a:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008632:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800863a:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f643 2298 	movw	r2, #15000	; 0x3a98
 800864a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008652:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f241 7270 	movw	r2, #6000	; 0x1770
 800865a:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008662:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f242 3228 	movw	r2, #9000	; 0x2328
 800866a:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f241 7270 	movw	r2, #6000	; 0x1770
 8008672:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800867a:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008682:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800868a:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008692:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800869a:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f24f 6218 	movw	r2, #63000	; 0xf618
 80086a2:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80086aa:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80086b2:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086ba:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80086c8:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80086d0:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80086e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2206      	movs	r2, #6
 80086f0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008702:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f640 22be 	movw	r2, #2750	; 0xabe
 800870c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	22fa      	movs	r2, #250	; 0xfa
 8008714:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800871e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008728:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008732:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800873c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008746:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008750:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	22c8      	movs	r2, #200	; 0xc8
 8008758:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	22fa      	movs	r2, #250	; 0xfa
 8008760:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800876a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f640 1206 	movw	r2, #2310	; 0x906
 8008774:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f640 1206 	movw	r2, #2310	; 0x906
 8008786:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008790:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800879a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f640 421c 	movw	r2, #3100	; 0xc1c
 80087a4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80087ae:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f641 022e 	movw	r2, #6190	; 0x182e
 80087b8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f641 3230 	movw	r2, #6960	; 0x1b30
 80087d2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f641 022e 	movw	r2, #6190	; 0x182e
 80087dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	22fa      	movs	r2, #250	; 0xfa
 80087e4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80087ee:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80087f8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f241 1294 	movw	r2, #4500	; 0x1194
 8008802:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f64f 7238 	movw	r2, #65336	; 0xff38
 800880c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	22c8      	movs	r2, #200	; 0xc8
 8008814:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f640 3222 	movw	r2, #2850	; 0xb22
 800881e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008828:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f640 721e 	movw	r2, #3870	; 0xf1e
 8008842:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f241 222a 	movw	r2, #4650	; 0x122a
 800884c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008856:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008878:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008882:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f641 1288 	movw	r2, #6536	; 0x1988
 800889c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 80088a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80088c2:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2238      	movs	r2, #56	; 0x38
 80088c8:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2270      	movs	r2, #112	; 0x70
 80088d4:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2210      	movs	r2, #16
 80088da:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2264      	movs	r2, #100	; 0x64
 80088e0:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088e8:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	220f      	movs	r2, #15
 80088ee:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2234      	movs	r2, #52	; 0x34
 80088f4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	22c8      	movs	r2, #200	; 0xc8
 80088fa:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008902:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800890a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800890c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008934:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2211      	movs	r2, #17
 8008976:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2202      	movs	r2, #2
 800897c:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2202      	movs	r2, #2
 8008988:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2208      	movs	r2, #8
 800898e:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	22ff      	movs	r2, #255	; 0xff
 80089d0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	220b      	movs	r2, #11
 8008a0a:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	220d      	movs	r2, #13
 8008a1e:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008a46:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2238      	movs	r2, #56	; 0x38
 8008a52:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	22ff      	movs	r2, #255	; 0xff
 8008a58:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	221a      	movs	r2, #26
 8008a6a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2220      	movs	r2, #32
 8008a76:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	22cc      	movs	r2, #204	; 0xcc
 8008a82:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	220b      	movs	r2, #11
 8008a88:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	22f5      	movs	r2, #245	; 0xf5
 8008a94:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2209      	movs	r2, #9
 8008a9a:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2208      	movs	r2, #8
 8008ab0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2278      	movs	r2, #120	; 0x78
 8008ab6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2200      	movs	r2, #0
 8008abc:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2207      	movs	r2, #7
 8008ac8:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2221      	movs	r2, #33	; 0x21
 8008ace:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2243      	movs	r2, #67	; 0x43
 8008ad4:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2210      	movs	r2, #16
 8008ada:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2232      	movs	r2, #50	; 0x32
 8008ae0:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2254      	movs	r2, #84	; 0x54
 8008ae6:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2207      	movs	r2, #7
 8008aec:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2221      	movs	r2, #33	; 0x21
 8008af2:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2243      	movs	r2, #67	; 0x43
 8008af8:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2210      	movs	r2, #16
 8008afe:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2202      	movs	r2, #2
 8008b04:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2243      	movs	r2, #67	; 0x43
 8008b0a:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2205      	movs	r2, #5
 8008b10:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2200      	movs	r2, #0
 8008b16:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2207      	movs	r2, #7
 8008b1c:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2221      	movs	r2, #33	; 0x21
 8008b22:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2243      	movs	r2, #67	; 0x43
 8008b28:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2232      	movs	r2, #50	; 0x32
 8008b34:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2254      	movs	r2, #84	; 0x54
 8008b3a:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b42:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b4a:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2210      	movs	r2, #16
 8008b56:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	220f      	movs	r2, #15
 8008b62:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	220f      	movs	r2, #15
 8008b68:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	2208      	movs	r2, #8
 8008b74:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2200      	movs	r2, #0
 8008b86:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	220b      	movs	r2, #11
 8008b9c:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	2209      	movs	r2, #9
 8008ba2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	22c7      	movs	r2, #199	; 0xc7
 8008bd2:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	22db      	movs	r2, #219	; 0xdb
 8008bde:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	2202      	movs	r2, #2
 8008be4:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	2200      	movs	r2, #0
 8008bea:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	2201      	movs	r2, #1
 8008bf0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	2221      	movs	r2, #33	; 0x21
 8008bfc:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b08a      	sub	sp, #40	; 0x28
 8008c12:	af04      	add	r7, sp, #16
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	9303      	str	r3, [sp, #12]
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	9302      	str	r3, [sp, #8]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff fe70 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d121      	bne.n	8008c8c <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2207      	movs	r2, #7
 8008c4c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2205      	movs	r2, #5
 8008c52:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2208      	movs	r2, #8
 8008c68:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2238      	movs	r2, #56	; 0x38
 8008c6e:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2207      	movs	r2, #7
 8008c74:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	2205      	movs	r2, #5
 8008c7a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af04      	add	r7, sp, #16
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	9302      	str	r3, [sp, #8]
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff fe2b 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d121      	bne.n	8008d16 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	220f      	movs	r2, #15
 8008cd6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	220d      	movs	r2, #13
 8008cdc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	22b8      	movs	r2, #184	; 0xb8
 8008cf8:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	220f      	movs	r2, #15
 8008cfe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	220d      	movs	r2, #13
 8008d04:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b08a      	sub	sp, #40	; 0x28
 8008d26:	af04      	add	r7, sp, #16
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fde6 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	223b      	movs	r2, #59	; 0x3b
 8008d66:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7ff fdbd 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	225b      	movs	r2, #91	; 0x5b
 8008db8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b08a      	sub	sp, #40	; 0x28
 8008dca:	af04      	add	r7, sp, #16
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68b9      	ldr	r1, [r7, #8]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fd94 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d11a      	bne.n	8008e36 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	2200      	movs	r2, #0
 8008e04:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	22b1      	movs	r2, #177	; 0xb1
 8008e10:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2200      	movs	r2, #0
 8008e16:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	22d4      	movs	r2, #212	; 0xd4
 8008e1c:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008e24:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2240      	movs	r2, #64	; 0x40
 8008e34:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b08a      	sub	sp, #40	; 0x28
 8008e46:	af04      	add	r7, sp, #16
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff fecf 	bl	8008c0e <VL53L1_preset_mode_standard_ranging_short_range>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d11a      	bne.n	8008eb2 <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2201      	movs	r2, #1
 8008e86:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2284      	movs	r2, #132	; 0x84
 8008e8c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2201      	movs	r2, #1
 8008e92:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	22b1      	movs	r2, #177	; 0xb1
 8008e98:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008ea0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	2240      	movs	r2, #64	; 0x40
 8008eb0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b08a      	sub	sp, #40	; 0x28
 8008ec2:	af04      	add	r7, sp, #16
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	9302      	str	r3, [sp, #8]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff fed6 	bl	8008c98 <VL53L1_preset_mode_standard_ranging_long_range>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11a      	bne.n	8008f2e <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	2200      	movs	r2, #0
 8008efc:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2297      	movs	r2, #151	; 0x97
 8008f08:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	22b1      	movs	r2, #177	; 0xb1
 8008f14:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f1c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	2240      	movs	r2, #64	; 0x40
 8008f2c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08a      	sub	sp, #40	; 0x28
 8008f3e:	af04      	add	r7, sp, #16
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff2f 	bl	8008dc6 <VL53L1_preset_mode_timed_ranging>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f76:	6a39      	ldr	r1, [r7, #32]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f005 f978 	bl	800e26e <VL53L1_config_low_power_auto_mode>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b08a      	sub	sp, #40	; 0x28
 8008f92:	af04      	add	r7, sp, #16
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	9302      	str	r3, [sp, #8]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff ff43 	bl	8008e42 <VL53L1_preset_mode_timed_ranging_short_range>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fca:	6a39      	ldr	r1, [r7, #32]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f005 f94e 	bl	800e26e <VL53L1_config_low_power_auto_mode>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b08a      	sub	sp, #40	; 0x28
 8008fe6:	af04      	add	r7, sp, #16
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	9303      	str	r3, [sp, #12]
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	9302      	str	r3, [sp, #8]
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff ff57 	bl	8008ebe <VL53L1_preset_mode_timed_ranging_long_range>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	6a39      	ldr	r1, [r7, #32]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f005 f924 	bl	800e26e <VL53L1_config_low_power_auto_mode>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800902a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b08a      	sub	sp, #40	; 0x28
 800903a:	af04      	add	r7, sp, #16
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fc5c 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d116      	bne.n	800909e <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	2200      	movs	r2, #0
 8009074:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2200      	movs	r2, #0
 800907a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	22b1      	movs	r2, #177	; 0xb1
 8009080:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2200      	movs	r2, #0
 8009086:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	22d4      	movs	r2, #212	; 0xd4
 800908c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	2210      	movs	r2, #16
 800909c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800909e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b090      	sub	sp, #64	; 0x40
 80090ae:	af0a      	add	r7, sp, #40	; 0x28
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	9302      	str	r3, [sp, #8]
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	68b8      	ldr	r0, [r7, #8]
 80090d4:	f7ff fc22 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 80090d8:	4603      	mov	r3, r0
 80090da:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d171      	bne.n	80091c8 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80090ea:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	9308      	str	r3, [sp, #32]
 80090f0:	2305      	movs	r3, #5
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	2304      	movs	r3, #4
 80090f6:	9306      	str	r3, [sp, #24]
 80090f8:	2303      	movs	r3, #3
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	2302      	movs	r3, #2
 80090fe:	9304      	str	r3, [sp, #16]
 8009100:	2301      	movs	r3, #1
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	2300      	movs	r3, #0
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	2304      	movs	r3, #4
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	2303      	movs	r3, #3
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2302      	movs	r3, #2
 8009112:	2201      	movs	r2, #1
 8009114:	2100      	movs	r1, #0
 8009116:	2007      	movs	r0, #7
 8009118:	f001 fe1b 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	3302      	adds	r3, #2
 8009120:	9308      	str	r3, [sp, #32]
 8009122:	2305      	movs	r3, #5
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	2304      	movs	r3, #4
 8009128:	9306      	str	r3, [sp, #24]
 800912a:	2303      	movs	r3, #3
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	2302      	movs	r3, #2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	2301      	movs	r3, #1
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	2300      	movs	r3, #0
 8009138:	9302      	str	r3, [sp, #8]
 800913a:	2304      	movs	r3, #4
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	2303      	movs	r3, #3
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	2302      	movs	r3, #2
 8009144:	2201      	movs	r2, #1
 8009146:	2100      	movs	r1, #0
 8009148:	2007      	movs	r0, #7
 800914a:	f001 fe92 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	2209      	movs	r2, #9
 8009152:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	220b      	movs	r2, #11
 8009158:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	2209      	movs	r2, #9
 800915e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	220b      	movs	r2, #11
 8009164:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	2220      	movs	r2, #32
 8009170:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	2200      	movs	r2, #0
 8009176:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	221a      	movs	r2, #26
 800917c:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	2200      	movs	r2, #0
 8009182:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	2228      	movs	r2, #40	; 0x28
 8009188:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	2200      	movs	r2, #0
 800918e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	2221      	movs	r2, #33	; 0x21
 8009194:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	22f5      	movs	r2, #245	; 0xf5
 800919a:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2208      	movs	r2, #8
 80091a0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2288      	movs	r2, #136	; 0x88
 80091a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 f821 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	229b      	movs	r2, #155	; 0x9b
 80091c0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	2226      	movs	r2, #38	; 0x26
 80091c6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80091c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b090      	sub	sp, #64	; 0x40
 80091d8:	af0a      	add	r7, sp, #40	; 0x28
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	9303      	str	r3, [sp, #12]
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ff52 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800920a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d13e      	bne.n	8009290 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	9308      	str	r3, [sp, #32]
 8009216:	2305      	movs	r3, #5
 8009218:	9307      	str	r3, [sp, #28]
 800921a:	2304      	movs	r3, #4
 800921c:	9306      	str	r3, [sp, #24]
 800921e:	2303      	movs	r3, #3
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	230a      	movs	r3, #10
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	2309      	movs	r3, #9
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	2308      	movs	r3, #8
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	2304      	movs	r3, #4
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	2303      	movs	r3, #3
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	2302      	movs	r3, #2
 8009238:	2201      	movs	r2, #1
 800923a:	2100      	movs	r1, #0
 800923c:	2007      	movs	r0, #7
 800923e:	f001 fd88 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	3302      	adds	r3, #2
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	2305      	movs	r3, #5
 800924a:	9307      	str	r3, [sp, #28]
 800924c:	2304      	movs	r3, #4
 800924e:	9306      	str	r3, [sp, #24]
 8009250:	2303      	movs	r3, #3
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	230a      	movs	r3, #10
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	2309      	movs	r3, #9
 800925a:	9303      	str	r3, [sp, #12]
 800925c:	2308      	movs	r3, #8
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	2304      	movs	r3, #4
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	2303      	movs	r3, #3
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	2302      	movs	r3, #2
 800926a:	2201      	movs	r2, #1
 800926c:	2100      	movs	r1, #0
 800926e:	2007      	movs	r0, #7
 8009270:	f001 fdff 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 ffbd 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	22bb      	movs	r2, #187	; 0xbb
 8009288:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	2226      	movs	r2, #38	; 0x26
 800928e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08c      	sub	sp, #48	; 0x30
 80092a0:	af06      	add	r7, sp, #24
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	9303      	str	r3, [sp, #12]
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	9302      	str	r3, [sp, #8]
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff ff83 	bl	80091d4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d102      	bne.n	80092e0 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	22db      	movs	r2, #219	; 0xdb
 80092de:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80092e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b090      	sub	sp, #64	; 0x40
 80092f0:	af0a      	add	r7, sp, #40	; 0x28
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	9303      	str	r3, [sp, #12]
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fec6 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d13e      	bne.n	80093a8 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	9308      	str	r3, [sp, #32]
 800932e:	230d      	movs	r3, #13
 8009330:	9307      	str	r3, [sp, #28]
 8009332:	230c      	movs	r3, #12
 8009334:	9306      	str	r3, [sp, #24]
 8009336:	230b      	movs	r3, #11
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	230a      	movs	r3, #10
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	2309      	movs	r3, #9
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	2308      	movs	r3, #8
 8009344:	9302      	str	r3, [sp, #8]
 8009346:	230c      	movs	r3, #12
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	230b      	movs	r3, #11
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	230a      	movs	r3, #10
 8009350:	2209      	movs	r2, #9
 8009352:	2108      	movs	r1, #8
 8009354:	2007      	movs	r0, #7
 8009356:	f001 fcfc 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	3302      	adds	r3, #2
 800935e:	9308      	str	r3, [sp, #32]
 8009360:	230d      	movs	r3, #13
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	230c      	movs	r3, #12
 8009366:	9306      	str	r3, [sp, #24]
 8009368:	230b      	movs	r3, #11
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	230a      	movs	r3, #10
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	2309      	movs	r3, #9
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	2308      	movs	r3, #8
 8009376:	9302      	str	r3, [sp, #8]
 8009378:	230c      	movs	r3, #12
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	230b      	movs	r3, #11
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	230a      	movs	r3, #10
 8009382:	2209      	movs	r2, #9
 8009384:	2108      	movs	r1, #8
 8009386:	2007      	movs	r0, #7
 8009388:	f001 fd73 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 ff31 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2202      	movs	r2, #2
 80093a0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	22bb      	movs	r2, #187	; 0xbb
 80093a6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80093a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	; 0x30
 80093b8:	af06      	add	r7, sp, #24
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	9302      	str	r3, [sp, #8]
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff ff83 	bl	80092ec <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 80093ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	22db      	movs	r2, #219	; 0xdb
 80093f6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80093f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b090      	sub	sp, #64	; 0x40
 8009408:	af0a      	add	r7, sp, #40	; 0x28
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	9303      	str	r3, [sp, #12]
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7ff fe3a 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800943a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d166      	bne.n	8009510 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009448:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	9308      	str	r3, [sp, #32]
 800944e:	2304      	movs	r3, #4
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	2303      	movs	r3, #3
 8009454:	9306      	str	r3, [sp, #24]
 8009456:	2302      	movs	r3, #2
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	2301      	movs	r3, #1
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	2300      	movs	r3, #0
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	2307      	movs	r3, #7
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	2304      	movs	r3, #4
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	2303      	movs	r3, #3
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2302      	movs	r3, #2
 8009470:	2201      	movs	r2, #1
 8009472:	2100      	movs	r1, #0
 8009474:	2007      	movs	r0, #7
 8009476:	f001 fc6c 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	3302      	adds	r3, #2
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	2304      	movs	r3, #4
 8009482:	9307      	str	r3, [sp, #28]
 8009484:	2303      	movs	r3, #3
 8009486:	9306      	str	r3, [sp, #24]
 8009488:	2302      	movs	r3, #2
 800948a:	9305      	str	r3, [sp, #20]
 800948c:	2301      	movs	r3, #1
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	2300      	movs	r3, #0
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	2307      	movs	r3, #7
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2304      	movs	r3, #4
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	2303      	movs	r3, #3
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2302      	movs	r3, #2
 80094a2:	2201      	movs	r2, #1
 80094a4:	2100      	movs	r1, #0
 80094a6:	2007      	movs	r0, #7
 80094a8:	f001 fce3 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fea1 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2204      	movs	r2, #4
 80094c0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	2203      	movs	r2, #3
 80094c6:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	2242      	movs	r2, #66	; 0x42
 80094d2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	2200      	movs	r2, #0
 80094d8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	2242      	movs	r2, #66	; 0x42
 80094de:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2200      	movs	r2, #0
 80094e4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	2252      	movs	r2, #82	; 0x52
 80094ea:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2200      	movs	r2, #0
 80094f0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	2266      	movs	r2, #102	; 0x66
 80094f6:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2204      	movs	r2, #4
 80094fc:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	22a4      	movs	r2, #164	; 0xa4
 8009502:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	229b      	movs	r2, #155	; 0x9b
 8009508:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	2226      	movs	r2, #38	; 0x26
 800950e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009510:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	; 0x40
 8009520:	af0a      	add	r7, sp, #40	; 0x28
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	9303      	str	r3, [sp, #12]
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	9302      	str	r3, [sp, #8]
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fdae 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d178      	bne.n	800964c <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	9308      	str	r3, [sp, #32]
 800955e:	2305      	movs	r3, #5
 8009560:	9307      	str	r3, [sp, #28]
 8009562:	2304      	movs	r3, #4
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	2303      	movs	r3, #3
 8009568:	9305      	str	r3, [sp, #20]
 800956a:	2302      	movs	r3, #2
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	2301      	movs	r3, #1
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	2300      	movs	r3, #0
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	2304      	movs	r3, #4
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	2303      	movs	r3, #3
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2302      	movs	r3, #2
 8009580:	2201      	movs	r2, #1
 8009582:	2100      	movs	r1, #0
 8009584:	2007      	movs	r0, #7
 8009586:	f001 fbe4 	bl	800ad52 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	3302      	adds	r3, #2
 800958e:	9308      	str	r3, [sp, #32]
 8009590:	2305      	movs	r3, #5
 8009592:	9307      	str	r3, [sp, #28]
 8009594:	2304      	movs	r3, #4
 8009596:	9306      	str	r3, [sp, #24]
 8009598:	2303      	movs	r3, #3
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	2302      	movs	r3, #2
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	2301      	movs	r3, #1
 80095a2:	9303      	str	r3, [sp, #12]
 80095a4:	2300      	movs	r3, #0
 80095a6:	9302      	str	r3, [sp, #8]
 80095a8:	2304      	movs	r3, #4
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	2303      	movs	r3, #3
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	2302      	movs	r3, #2
 80095b2:	2201      	movs	r2, #1
 80095b4:	2100      	movs	r1, #0
 80095b6:	2007      	movs	r0, #7
 80095b8:	f001 fc5b 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fe19 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	2209      	movs	r2, #9
 80095d0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	220b      	movs	r2, #11
 80095d6:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	2221      	movs	r2, #33	; 0x21
 80095e2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	2200      	movs	r2, #0
 80095e8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	221b      	movs	r2, #27
 80095ee:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	2200      	movs	r2, #0
 80095f4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	2229      	movs	r2, #41	; 0x29
 80095fa:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2200      	movs	r2, #0
 8009600:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	2222      	movs	r2, #34	; 0x22
 8009606:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2209      	movs	r2, #9
 800960c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	22f5      	movs	r2, #245	; 0xf5
 8009612:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	2209      	movs	r2, #9
 8009618:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	220b      	movs	r2, #11
 800961e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962a:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2208      	movs	r2, #8
 8009634:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2288      	movs	r2, #136	; 0x88
 800963c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	229b      	movs	r2, #155	; 0x9b
 8009644:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	2226      	movs	r2, #38	; 0x26
 800964a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800964c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b090      	sub	sp, #64	; 0x40
 800965c:	af0a      	add	r7, sp, #40	; 0x28
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	9302      	str	r3, [sp, #8]
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff ff49 	bl	800951c <VL53L1_preset_mode_histogram_long_range>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800968e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d13b      	bne.n	800970e <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	2305      	movs	r3, #5
 800969c:	9307      	str	r3, [sp, #28]
 800969e:	2304      	movs	r3, #4
 80096a0:	9306      	str	r3, [sp, #24]
 80096a2:	2303      	movs	r3, #3
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	230a      	movs	r3, #10
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	2309      	movs	r3, #9
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	2308      	movs	r3, #8
 80096b0:	9302      	str	r3, [sp, #8]
 80096b2:	2304      	movs	r3, #4
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	2303      	movs	r3, #3
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	2302      	movs	r3, #2
 80096bc:	2201      	movs	r2, #1
 80096be:	2100      	movs	r1, #0
 80096c0:	2007      	movs	r0, #7
 80096c2:	f001 fb46 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	3302      	adds	r3, #2
 80096ca:	9308      	str	r3, [sp, #32]
 80096cc:	2305      	movs	r3, #5
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	2304      	movs	r3, #4
 80096d2:	9306      	str	r3, [sp, #24]
 80096d4:	2303      	movs	r3, #3
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	230a      	movs	r3, #10
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	2309      	movs	r3, #9
 80096de:	9303      	str	r3, [sp, #12]
 80096e0:	2308      	movs	r3, #8
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	2304      	movs	r3, #4
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2303      	movs	r3, #3
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2302      	movs	r3, #2
 80096ee:	2201      	movs	r2, #1
 80096f0:	2100      	movs	r1, #0
 80096f2:	2007      	movs	r0, #7
 80096f4:	f001 fbbd 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fd7b 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	22bb      	movs	r2, #187	; 0xbb
 800970c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800970e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b08c      	sub	sp, #48	; 0x30
 800971e:	af06      	add	r7, sp, #24
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009728:	2300      	movs	r3, #0
 800972a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	9302      	str	r3, [sp, #8]
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff ff86 	bl	8009658 <VL53L1_preset_mode_histogram_long_range_mm1>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	22db      	movs	r2, #219	; 0xdb
 800975c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800975e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b090      	sub	sp, #64	; 0x40
 800976e:	af0a      	add	r7, sp, #40	; 0x28
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009778:	2300      	movs	r3, #0
 800977a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	9303      	str	r3, [sp, #12]
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff fc87 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 800979c:	4603      	mov	r3, r0
 800979e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80097a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d178      	bne.n	800989a <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	9308      	str	r3, [sp, #32]
 80097ac:	2303      	movs	r3, #3
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	2302      	movs	r3, #2
 80097b2:	9306      	str	r3, [sp, #24]
 80097b4:	2301      	movs	r3, #1
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	2302      	movs	r3, #2
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	2301      	movs	r3, #1
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	2300      	movs	r3, #0
 80097c2:	9302      	str	r3, [sp, #8]
 80097c4:	2302      	movs	r3, #2
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	2302      	movs	r3, #2
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2301      	movs	r3, #1
 80097ce:	2201      	movs	r2, #1
 80097d0:	2100      	movs	r1, #0
 80097d2:	2007      	movs	r0, #7
 80097d4:	f001 fabd 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	3302      	adds	r3, #2
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	2303      	movs	r3, #3
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	2302      	movs	r3, #2
 80097e4:	9306      	str	r3, [sp, #24]
 80097e6:	2301      	movs	r3, #1
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	2302      	movs	r3, #2
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	2301      	movs	r3, #1
 80097f0:	9303      	str	r3, [sp, #12]
 80097f2:	2300      	movs	r3, #0
 80097f4:	9302      	str	r3, [sp, #8]
 80097f6:	2302      	movs	r3, #2
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	2302      	movs	r3, #2
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2301      	movs	r3, #1
 8009800:	2201      	movs	r2, #1
 8009802:	2100      	movs	r1, #0
 8009804:	2007      	movs	r0, #7
 8009806:	f001 fb34 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fcf2 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	2205      	movs	r2, #5
 800981e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2207      	movs	r2, #7
 8009824:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	2236      	movs	r2, #54	; 0x36
 8009830:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	2200      	movs	r2, #0
 8009836:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	2228      	movs	r2, #40	; 0x28
 800983c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	2200      	movs	r2, #0
 8009842:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	2244      	movs	r2, #68	; 0x44
 8009848:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	2200      	movs	r2, #0
 800984e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2233      	movs	r2, #51	; 0x33
 8009854:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2205      	movs	r2, #5
 800985a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	22f5      	movs	r2, #245	; 0xf5
 8009860:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	2205      	movs	r2, #5
 8009866:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	2207      	movs	r2, #7
 800986c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2208      	movs	r2, #8
 8009882:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2248      	movs	r2, #72	; 0x48
 800988a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	229b      	movs	r2, #155	; 0x9b
 8009892:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	2226      	movs	r2, #38	; 0x26
 8009898:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800989a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b090      	sub	sp, #64	; 0x40
 80098aa:	af0a      	add	r7, sp, #40	; 0x28
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	9303      	str	r3, [sp, #12]
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	9302      	str	r3, [sp, #8]
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff ff49 	bl	800976a <VL53L1_preset_mode_histogram_medium_range>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80098dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d13b      	bne.n	800995c <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	9308      	str	r3, [sp, #32]
 80098e8:	2303      	movs	r3, #3
 80098ea:	9307      	str	r3, [sp, #28]
 80098ec:	2302      	movs	r3, #2
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	2301      	movs	r3, #1
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	230a      	movs	r3, #10
 80098f6:	9304      	str	r3, [sp, #16]
 80098f8:	2309      	movs	r3, #9
 80098fa:	9303      	str	r3, [sp, #12]
 80098fc:	2308      	movs	r3, #8
 80098fe:	9302      	str	r3, [sp, #8]
 8009900:	2302      	movs	r3, #2
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	2302      	movs	r3, #2
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	2301      	movs	r3, #1
 800990a:	2201      	movs	r2, #1
 800990c:	2100      	movs	r1, #0
 800990e:	2007      	movs	r0, #7
 8009910:	f001 fa1f 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	3302      	adds	r3, #2
 8009918:	9308      	str	r3, [sp, #32]
 800991a:	2303      	movs	r3, #3
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	2302      	movs	r3, #2
 8009920:	9306      	str	r3, [sp, #24]
 8009922:	2301      	movs	r3, #1
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	230a      	movs	r3, #10
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	2309      	movs	r3, #9
 800992c:	9303      	str	r3, [sp, #12]
 800992e:	2308      	movs	r3, #8
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	2302      	movs	r3, #2
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	2302      	movs	r3, #2
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	2301      	movs	r3, #1
 800993c:	2201      	movs	r2, #1
 800993e:	2100      	movs	r1, #0
 8009940:	2007      	movs	r0, #7
 8009942:	f001 fa96 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fc54 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	22bb      	movs	r2, #187	; 0xbb
 800995a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800995c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08c      	sub	sp, #48	; 0x30
 800996c:	af06      	add	r7, sp, #24
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	9303      	str	r3, [sp, #12]
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	9302      	str	r3, [sp, #8]
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff ff86 	bl	80098a6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800999e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	22db      	movs	r2, #219	; 0xdb
 80099aa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b090      	sub	sp, #64	; 0x40
 80099bc:	af0a      	add	r7, sp, #40	; 0x28
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff fb60 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d178      	bne.n	8009ae8 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	9308      	str	r3, [sp, #32]
 80099fa:	2302      	movs	r3, #2
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	2302      	movs	r3, #2
 8009a00:	9306      	str	r3, [sp, #24]
 8009a02:	2301      	movs	r3, #1
 8009a04:	9305      	str	r3, [sp, #20]
 8009a06:	2301      	movs	r3, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9302      	str	r3, [sp, #8]
 8009a12:	2301      	movs	r3, #1
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	2301      	movs	r3, #1
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2107      	movs	r1, #7
 8009a20:	2007      	movs	r0, #7
 8009a22:	f001 f996 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	3302      	adds	r3, #2
 8009a2a:	9308      	str	r3, [sp, #32]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	2302      	movs	r3, #2
 8009a32:	9306      	str	r3, [sp, #24]
 8009a34:	2301      	movs	r3, #1
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	2301      	movs	r3, #1
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	2301      	movs	r3, #1
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2107      	movs	r1, #7
 8009a52:	2007      	movs	r0, #7
 8009a54:	f001 fa0d 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fbcb 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	2205      	movs	r2, #5
 8009a72:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	2252      	movs	r2, #82	; 0x52
 8009a7e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2200      	movs	r2, #0
 8009a84:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	2237      	movs	r2, #55	; 0x37
 8009a8a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2266      	movs	r2, #102	; 0x66
 8009a96:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	2244      	movs	r2, #68	; 0x44
 8009aa2:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	22f5      	movs	r2, #245	; 0xf5
 8009aae:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	2205      	movs	r2, #5
 8009aba:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2208      	movs	r2, #8
 8009ad0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2228      	movs	r2, #40	; 0x28
 8009ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	22bb      	movs	r2, #187	; 0xbb
 8009ae0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	2226      	movs	r2, #38	; 0x26
 8009ae6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b090      	sub	sp, #64	; 0x40
 8009af8:	af0a      	add	r7, sp, #40	; 0x28
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b02:	2300      	movs	r3, #0
 8009b04:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	9302      	str	r3, [sp, #8]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff ff49 	bl	80099b8 <VL53L1_preset_mode_histogram_short_range>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d15a      	bne.n	8009be8 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	9308      	str	r3, [sp, #32]
 8009b36:	2301      	movs	r3, #1
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9306      	str	r3, [sp, #24]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9305      	str	r3, [sp, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9304      	str	r3, [sp, #16]
 8009b46:	2300      	movs	r3, #0
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9302      	str	r3, [sp, #8]
 8009b4e:	2301      	movs	r3, #1
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	2301      	movs	r3, #1
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2107      	movs	r1, #7
 8009b5c:	2007      	movs	r0, #7
 8009b5e:	f001 f8f8 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	3302      	adds	r3, #2
 8009b66:	9308      	str	r3, [sp, #32]
 8009b68:	2301      	movs	r3, #1
 8009b6a:	9307      	str	r3, [sp, #28]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	2301      	movs	r3, #1
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	2300      	movs	r3, #0
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	2301      	movs	r3, #1
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	2301      	movs	r3, #1
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2107      	movs	r1, #7
 8009b8e:	2007      	movs	r0, #7
 8009b90:	f001 f96f 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fb2d 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	2203      	movs	r2, #3
 8009bae:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2231      	movs	r2, #49	; 0x31
 8009bba:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2210      	movs	r2, #16
 8009bdc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2218      	movs	r2, #24
 8009be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b090      	sub	sp, #64	; 0x40
 8009bf8:	af0a      	add	r7, sp, #40	; 0x28
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	9303      	str	r3, [sp, #12]
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68b9      	ldr	r1, [r7, #8]
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7ff fec9 	bl	80099b8 <VL53L1_preset_mode_histogram_short_range>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d13b      	bne.n	8009caa <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	9308      	str	r3, [sp, #32]
 8009c36:	2302      	movs	r3, #2
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	9306      	str	r3, [sp, #24]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	2309      	movs	r3, #9
 8009c48:	9303      	str	r3, [sp, #12]
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	2301      	movs	r3, #1
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2301      	movs	r3, #1
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2107      	movs	r1, #7
 8009c5c:	2007      	movs	r0, #7
 8009c5e:	f001 f878 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	3302      	adds	r3, #2
 8009c66:	9308      	str	r3, [sp, #32]
 8009c68:	2302      	movs	r3, #2
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	9306      	str	r3, [sp, #24]
 8009c70:	2301      	movs	r3, #1
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	2301      	movs	r3, #1
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	2309      	movs	r3, #9
 8009c7a:	9303      	str	r3, [sp, #12]
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	9302      	str	r3, [sp, #8]
 8009c80:	2301      	movs	r3, #1
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	2301      	movs	r3, #1
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	2301      	movs	r3, #1
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2107      	movs	r1, #7
 8009c8e:	2007      	movs	r0, #7
 8009c90:	f001 f8ef 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	68b9      	ldr	r1, [r7, #8]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 faad 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	22bb      	movs	r2, #187	; 0xbb
 8009ca8:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b08c      	sub	sp, #48	; 0x30
 8009cba:	af06      	add	r7, sp, #24
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff ff86 	bl	8009bf4 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	22db      	movs	r2, #219	; 0xdb
 8009cf8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b08c      	sub	sp, #48	; 0x30
 8009d0a:	af06      	add	r7, sp, #24
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff f9b9 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10b      	bne.n	8009d5c <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2201      	movs	r2, #1
 8009d48:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	2283      	movs	r2, #131	; 0x83
 8009d54:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	222e      	movs	r2, #46	; 0x2e
 8009d5a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b090      	sub	sp, #64	; 0x40
 8009d6c:	af0a      	add	r7, sp, #40	; 0x28
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f9ba 	bl	800a10e <VL53L1_preset_mode_histogram_multizone_long_range>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d151      	bne.n	8009e4a <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009da8:	6838      	ldr	r0, [r7, #0]
 8009daa:	f00a fb1c 	bl	80143e6 <VL53L1_zone_preset_xtalk_planar>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	2209      	movs	r2, #9
 8009db6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	2209      	movs	r2, #9
 8009dbc:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	9307      	str	r3, [sp, #28]
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	9306      	str	r3, [sp, #24]
 8009dca:	2302      	movs	r3, #2
 8009dcc:	9305      	str	r3, [sp, #20]
 8009dce:	2301      	movs	r3, #1
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	2307      	movs	r3, #7
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	2304      	movs	r3, #4
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	2303      	movs	r3, #3
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2302      	movs	r3, #2
 8009de4:	2201      	movs	r2, #1
 8009de6:	2100      	movs	r1, #0
 8009de8:	2007      	movs	r0, #7
 8009dea:	f000 ffb2 	bl	800ad52 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	3302      	adds	r3, #2
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	2304      	movs	r3, #4
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	2303      	movs	r3, #3
 8009dfa:	9306      	str	r3, [sp, #24]
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	2301      	movs	r3, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	2300      	movs	r3, #0
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	2307      	movs	r3, #7
 8009e0a:	9302      	str	r3, [sp, #8]
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	2303      	movs	r3, #3
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	2302      	movs	r3, #2
 8009e16:	2201      	movs	r2, #1
 8009e18:	2100      	movs	r1, #0
 8009e1a:	2007      	movs	r0, #7
 8009e1c:	f001 f829 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d108      	bne.n	8009e3a <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e32:	f003 f97d 	bl	800d130 <VL53L1_set_histogram_multizone_initial_bin_config>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f9da 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b090      	sub	sp, #64	; 0x40
 8009e5a:	af0a      	add	r7, sp, #40	; 0x28
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	607a      	str	r2, [r7, #4]
 8009e62:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	9302      	str	r3, [sp, #8]
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff f911 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 8009e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d16e      	bne.n	8009f72 <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	9308      	str	r3, [sp, #32]
 8009e98:	230c      	movs	r3, #12
 8009e9a:	9307      	str	r3, [sp, #28]
 8009e9c:	230b      	movs	r3, #11
 8009e9e:	9306      	str	r3, [sp, #24]
 8009ea0:	230a      	movs	r3, #10
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	2309      	movs	r3, #9
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	230f      	movs	r3, #15
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	230b      	movs	r3, #11
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	230a      	movs	r3, #10
 8009eba:	2209      	movs	r2, #9
 8009ebc:	2108      	movs	r1, #8
 8009ebe:	200f      	movs	r0, #15
 8009ec0:	f000 ff47 	bl	800ad52 <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	3302      	adds	r3, #2
 8009ec8:	9308      	str	r3, [sp, #32]
 8009eca:	230c      	movs	r3, #12
 8009ecc:	9307      	str	r3, [sp, #28]
 8009ece:	230b      	movs	r3, #11
 8009ed0:	9306      	str	r3, [sp, #24]
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	2309      	movs	r3, #9
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	2308      	movs	r3, #8
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	230f      	movs	r3, #15
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	230b      	movs	r3, #11
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	230a      	movs	r3, #10
 8009eec:	2209      	movs	r2, #9
 8009eee:	2108      	movs	r1, #8
 8009ef0:	200f      	movs	r0, #15
 8009ef2:	f000 ffbe 	bl	800ae72 <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f97c 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	2209      	movs	r2, #9
 8009f0a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	2209      	movs	r2, #9
 8009f10:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2221      	movs	r2, #33	; 0x21
 8009f1c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2200      	movs	r2, #0
 8009f22:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	2221      	movs	r2, #33	; 0x21
 8009f28:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	2229      	movs	r2, #41	; 0x29
 8009f34:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	2229      	movs	r2, #41	; 0x29
 8009f40:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2209      	movs	r2, #9
 8009f46:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	22f5      	movs	r2, #245	; 0xf5
 8009f4c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	2209      	movs	r2, #9
 8009f52:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	2209      	movs	r2, #9
 8009f58:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	2209      	movs	r2, #9
 8009f5e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	2206      	movs	r2, #6
 8009f64:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	22bb      	movs	r2, #187	; 0xbb
 8009f6a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	2226      	movs	r2, #38	; 0x26
 8009f70:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b08c      	sub	sp, #48	; 0x30
 8009f82:	af06      	add	r7, sp, #24
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff ff53 	bl	8009e56 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	22db      	movs	r2, #219	; 0xdb
 8009fb8:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 8009fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b08c      	sub	sp, #48	; 0x30
 8009fca:	af06      	add	r7, sp, #24
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	9303      	str	r3, [sp, #12]
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	9302      	str	r3, [sp, #8]
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f7ff fbb9 	bl	800976a <VL53L1_preset_mode_histogram_medium_range>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d12c      	bne.n	800a05e <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	2307      	movs	r3, #7
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	2307      	movs	r3, #7
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	2302      	movs	r3, #2
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	2308      	movs	r3, #8
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2304      	movs	r3, #4
 800a01a:	2202      	movs	r2, #2
 800a01c:	2108      	movs	r1, #8
 800a01e:	2004      	movs	r0, #4
 800a020:	f00a f96c 	bl	80142fc <VL53L1_init_zone_config_structure>
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	3301      	adds	r3, #1
 800a02e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	3302      	adds	r3, #2
 800a040:	461a      	mov	r2, r3
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a046:	f003 f873 	bl	800d130 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a04a:	4603      	mov	r3, r0
 800a04c:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f8d0 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b08c      	sub	sp, #48	; 0x30
 800a06e:	af06      	add	r7, sp, #24
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a078:	2300      	movs	r3, #0
 800a07a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	9304      	str	r3, [sp, #16]
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	9303      	str	r3, [sp, #12]
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fc8e 	bl	80099b8 <VL53L1_preset_mode_histogram_short_range>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d12c      	bne.n	800a102 <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	2307      	movs	r3, #7
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	2307      	movs	r3, #7
 800a0b2:	9302      	str	r3, [sp, #8]
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	2304      	movs	r3, #4
 800a0be:	2202      	movs	r2, #2
 800a0c0:	2108      	movs	r1, #8
 800a0c2:	2004      	movs	r0, #4
 800a0c4:	f00a f91a 	bl	80142fc <VL53L1_init_zone_config_structure>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	785b      	ldrb	r3, [r3, #1]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a0d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d108      	bne.n	800a0f2 <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ea:	f003 f821 	bl	800d130 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	68b9      	ldr	r1, [r7, #8]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f87e 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b08c      	sub	sp, #48	; 0x30
 800a112:	af06      	add	r7, sp, #24
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
 800a11a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	9303      	str	r3, [sp, #12]
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	9302      	str	r3, [sp, #8]
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7ff f9ee 	bl	800951c <VL53L1_preset_mode_histogram_long_range>
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d12c      	bne.n	800a1a6 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	2307      	movs	r3, #7
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	2307      	movs	r3, #7
 800a156:	9302      	str	r3, [sp, #8]
 800a158:	2302      	movs	r3, #2
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	2308      	movs	r3, #8
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	2304      	movs	r3, #4
 800a162:	2202      	movs	r2, #2
 800a164:	2108      	movs	r1, #8
 800a166:	2004      	movs	r0, #4
 800a168:	f00a f8c8 	bl	80142fc <VL53L1_init_zone_config_structure>
 800a16c:	4603      	mov	r3, r0
 800a16e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	3301      	adds	r3, #1
 800a176:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a17c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	3302      	adds	r3, #2
 800a188:	461a      	mov	r2, r3
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18e:	f002 ffcf 	bl	800d130 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a192:	4603      	mov	r3, r0
 800a194:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f82c 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b08a      	sub	sp, #40	; 0x28
 800a1b6:	af04      	add	r7, sp, #16
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7fe fb9e 	bl	800891c <VL53L1_preset_mode_standard_ranging>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a1e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b085      	sub	sp, #20
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	79db      	ldrb	r3, [r3, #7]
 800a240:	b29b      	uxth	r3, r3
				<< 8)
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7a1b      	ldrb	r3, [r3, #8]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4413      	add	r3, r2
 800a24e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	b29b      	uxth	r3, r3
				<< 8)
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	b29b      	uxth	r3, r3
 800a294:	4413      	add	r3, r2
 800a296:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	78db      	ldrb	r3, [r3, #3]
 800a2a0:	b29b      	uxth	r3, r3
				<< 8)
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	791b      	ldrb	r3, [r3, #4]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	79db      	ldrb	r3, [r3, #7]
 800a328:	b29b      	uxth	r3, r3
				<< 8)
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	7a1b      	ldrb	r3, [r3, #8]
 800a332:	b29b      	uxth	r3, r3
 800a334:	4413      	add	r3, r2
 800a336:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	b29b      	uxth	r3, r3
				<< 8)
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	789b      	ldrb	r3, [r3, #2]
 800a372:	b29b      	uxth	r3, r3
 800a374:	4413      	add	r3, r2
 800a376:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	b29b      	uxth	r3, r3
				<< 8)
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	4413      	add	r3, r2
 800a38e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	; 0x30
 800a3b4:	af06      	add	r7, sp, #24
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fe fe64 	bl	80090aa <VL53L1_preset_mode_histogram_ranging>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a3e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10a      	bne.n	800a404 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fefd 	bl	800a1fe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3318      	adds	r3, #24
 800a41c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2230      	movs	r2, #48	; 0x30
 800a432:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a43c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a43e:	bf00      	nop
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3318      	adds	r3, #24
 800a45a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	332c      	adds	r3, #44	; 0x2c
 800a460:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2200      	movs	r2, #0
 800a46c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2202      	movs	r2, #2
 800a472:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2200      	movs	r2, #0
 800a478:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2200      	movs	r2, #0
 800a47e:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2200      	movs	r2, #0
 800a48a:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2202      	movs	r2, #2
 800a490:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	735a      	strb	r2, [r3, #13]

}
 800a49e:	bf00      	nop
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	332c      	adds	r3, #44	; 0x2c
 800a4c2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a4ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d115      	bne.n	800a4fe <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2203      	movs	r2, #3
 800a4d6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	735a      	strb	r2, [r3, #13]
 800a4fc:	e0be      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	7a1b      	ldrb	r3, [r3, #8]
 800a502:	2bff      	cmp	r3, #255	; 0xff
 800a504:	d103      	bne.n	800a50e <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	721a      	strb	r2, [r3, #8]
 800a50c:	e005      	b.n	800a51a <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7a1b      	ldrb	r3, [r3, #8]
 800a512:	3301      	adds	r3, #1
 800a514:	b2da      	uxtb	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7a19      	ldrb	r1, [r3, #8]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f103 0209 	add.w	r2, r3, #9
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	330a      	adds	r3, #10
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f002 fdc2 	bl	800d0b2 <VL53L1_update_internal_stream_counters>
 800a52e:	4603      	mov	r3, r0
 800a530:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	7adb      	ldrb	r3, [r3, #11]
 800a536:	f083 0302 	eor.w	r3, r3, #2
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	79db      	ldrb	r3, [r3, #7]
 800a544:	3b03      	subs	r3, #3
 800a546:	2b05      	cmp	r3, #5
 800a548:	f200 8082 	bhi.w	800a650 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a56d 	.word	0x0800a56d
 800a558:	0800a651 	.word	0x0800a651
 800a55c:	0800a651 	.word	0x0800a651
 800a560:	0800a5bf 	.word	0x0800a5bf
 800a564:	0800a5f5 	.word	0x0800a5f5
 800a568:	0800a61f 	.word	0x0800a61f

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd03      	ble.n	800a582 <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2206      	movs	r2, #6
 800a57e:	71da      	strb	r2, [r3, #7]
 800a580:	e00d      	b.n	800a59e <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d303      	bcc.n	800a598 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2208      	movs	r2, #8
 800a594:	71da      	strb	r2, [r3, #7]
 800a596:	e002      	b.n	800a59e <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2207      	movs	r2, #7
 800a59c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	735a      	strb	r2, [r3, #13]

			break;
 800a5bc:	e05e      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d303      	bcc.n	800a5ec <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2208      	movs	r2, #8
 800a5e8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a5ea:	e047      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2207      	movs	r2, #7
 800a5f0:	71da      	strb	r2, [r3, #7]
			break;
 800a5f2:	e043      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	7b5b      	ldrb	r3, [r3, #13]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d303      	bcc.n	800a616 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2208      	movs	r2, #8
 800a612:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a614:	e032      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2207      	movs	r2, #7
 800a61a:	71da      	strb	r2, [r3, #7]
			break;
 800a61c:	e02e      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	7b1b      	ldrb	r3, [r3, #12]
 800a628:	f083 0301 	eor.w	r3, r3, #1
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d303      	bcc.n	800a648 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2208      	movs	r2, #8
 800a644:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a646:	e019      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2207      	movs	r2, #7
 800a64c:	71da      	strb	r2, [r3, #7]
			break;
 800a64e:	e015      	b.n	800a67c <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2203      	movs	r2, #3
 800a654:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2202      	movs	r2, #2
 800a66c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	735a      	strb	r2, [r3, #13]
			break;
 800a67a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a67c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a688:	b480      	push	{r7}
 800a68a:	b08d      	sub	sp, #52	; 0x34
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a690:	2300      	movs	r3, #0
 800a692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3318      	adds	r3, #24
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	332c      	adds	r3, #44	; 0x2c
 800a6aa:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a6b2:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a6ba:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a6c2:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a6e2:	f003 031f 	and.w	r3, r3, #31
 800a6e6:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	78db      	ldrb	r3, [r3, #3]
 800a6ec:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a6f4:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a702:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a708:	111b      	asrs	r3, r3, #4
 800a70a:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a70c:	f003 0302 	and.w	r3, r3, #2
 800a710:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a714:	7c7b      	ldrb	r3, [r7, #17]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a720:	111b      	asrs	r3, r3, #4
 800a722:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d04e      	beq.n	800a7d8 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	79db      	ldrb	r3, [r3, #7]
 800a73e:	2b06      	cmp	r3, #6
 800a740:	d109      	bne.n	800a756 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a742:	7c7b      	ldrb	r3, [r7, #17]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d14a      	bne.n	800a7de <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a748:	7cfb      	ldrb	r3, [r7, #19]
 800a74a:	2b12      	cmp	r3, #18
 800a74c:	d047      	beq.n	800a7de <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a74e:	23ef      	movs	r3, #239	; 0xef
 800a750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a754:	e043      	b.n	800a7de <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	7a1b      	ldrb	r3, [r3, #8]
 800a75a:	7cba      	ldrb	r2, [r7, #18]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d002      	beq.n	800a766 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a760:	23ee      	movs	r3, #238	; 0xee
 800a762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	7adb      	ldrb	r3, [r3, #11]
 800a76a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a76e:	429a      	cmp	r2, r3
 800a770:	d002      	beq.n	800a778 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a772:	23ed      	movs	r3, #237	; 0xed
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	7b5b      	ldrb	r3, [r3, #13]
 800a77c:	4619      	mov	r1, r3
		expected_stream_count =
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	460b      	mov	r3, r1
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	440b      	add	r3, r1
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	4413      	add	r3, r2
 800a78a:	3302      	adds	r3, #2
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	7b5b      	ldrb	r3, [r3, #13]
 800a794:	4619      	mov	r1, r3
		expected_gph_id =
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	460b      	mov	r3, r1
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	440b      	add	r3, r1
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a7a8:	7c3a      	ldrb	r2, [r7, #16]
 800a7aa:	7cbb      	ldrb	r3, [r7, #18]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d00a      	beq.n	800a7c6 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <VL53L1_check_ll_driver_rd_state+0x138>
 800a7ba:	7cbb      	ldrb	r3, [r7, #18]
 800a7bc:	2bff      	cmp	r3, #255	; 0xff
 800a7be:	d002      	beq.n	800a7c6 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a7c0:	23ec      	movs	r3, #236	; 0xec
 800a7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a7c6:	7bfa      	ldrb	r2, [r7, #15]
 800a7c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d005      	beq.n	800a7dc <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a7d0:	23eb      	movs	r3, #235	; 0xeb
 800a7d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7d6:	e002      	b.n	800a7de <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a7d8:	bf00      	nop
 800a7da:	e000      	b.n	800a7de <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a7dc:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a7de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3734      	adds	r7, #52	; 0x34
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a806:	3308      	adds	r3, #8
 800a808:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	332c      	adds	r3, #44	; 0x2c
 800a80e:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a816:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d11b      	bne.n	800a85e <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2203      	movs	r2, #3
 800a82a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2200      	movs	r2, #0
 800a830:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2200      	movs	r2, #0
 800a836:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2200      	movs	r2, #0
 800a83c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2202      	movs	r2, #2
 800a842:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2200      	movs	r2, #0
 800a848:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	2200      	movs	r2, #0
 800a84e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	773b      	strb	r3, [r7, #28]
 800a85c:	e0b1      	b.n	800a9c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	799b      	ldrb	r3, [r3, #6]
 800a868:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	785b      	ldrb	r3, [r3, #1]
 800a86e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	2bff      	cmp	r3, #255	; 0xff
 800a876:	d103      	bne.n	800a880 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	2280      	movs	r2, #128	; 0x80
 800a87c:	705a      	strb	r2, [r3, #1]
 800a87e:	e005      	b.n	800a88c <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	785b      	ldrb	r3, [r3, #1]
 800a884:	3301      	adds	r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	7859      	ldrb	r1, [r3, #1]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	1c9a      	adds	r2, r3, #2
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	3303      	adds	r3, #3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f002 fc0a 	bl	800d0b2 <VL53L1_update_internal_stream_counters>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	791b      	ldrb	r3, [r3, #4]
 800a8a6:	f083 0302 	eor.w	r3, r3, #2
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b05      	cmp	r3, #5
 800a8b6:	d053      	beq.n	800a960 <VL53L1_update_ll_driver_cfg_state+0x172>
 800a8b8:	2b05      	cmp	r3, #5
 800a8ba:	dc69      	bgt.n	800a990 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d002      	beq.n	800a8c6 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d02d      	beq.n	800a920 <VL53L1_update_ll_driver_cfg_state+0x132>
 800a8c4:	e064      	b.n	800a990 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d909      	bls.n	800a8ee <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	795b      	ldrb	r3, [r3, #5]
 800a8e4:	f083 0301 	eor.w	r3, r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2201      	movs	r2, #1
 800a902:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2200      	movs	r2, #0
 800a908:	70da      	strb	r2, [r3, #3]
 800a90a:	e005      	b.n	800a918 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2200      	movs	r2, #0
 800a910:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2201      	movs	r2, #1
 800a916:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2204      	movs	r2, #4
 800a91c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800a91e:	e050      	b.n	800a9c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	799b      	ldrb	r3, [r3, #6]
 800a924:	3301      	adds	r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a936:	429a      	cmp	r2, r3
 800a938:	d940      	bls.n	800a9bc <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	2200      	movs	r2, #0
 800a93e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	795b      	ldrb	r3, [r3, #5]
 800a944:	f083 0301 	eor.w	r3, r3, #1
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d031      	beq.n	800a9bc <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2205      	movs	r2, #5
 800a95c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800a95e:	e02d      	b.n	800a9bc <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	799b      	ldrb	r3, [r3, #6]
 800a964:	3301      	adds	r3, #1
 800a966:	b2da      	uxtb	r2, r3
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a976:	429a      	cmp	r2, r3
 800a978:	d922      	bls.n	800a9c0 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2200      	movs	r2, #0
 800a97e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	795b      	ldrb	r3, [r3, #5]
 800a984:	f083 0301 	eor.w	r3, r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	715a      	strb	r2, [r3, #5]
			}
			break;
 800a98e:	e017      	b.n	800a9c0 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2203      	movs	r2, #3
 800a994:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2200      	movs	r2, #0
 800a99a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	719a      	strb	r2, [r3, #6]
			break;
 800a9ba:	e002      	b.n	800a9c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a9bc:	bf00      	nop
 800a9be:	e000      	b.n	800a9c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a9c0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d11d      	bne.n	800aa08 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a9cc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800a9ce:	7f3b      	ldrb	r3, [r7, #28]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	b2d8      	uxtb	r0, r3
 800a9d4:	68f9      	ldr	r1, [r7, #12]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	440b      	add	r3, r1
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	7b5b      	ldrb	r3, [r3, #13]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	7f7b      	ldrb	r3, [r7, #29]
 800a9ee:	f083 0302 	eor.w	r3, r3, #2
 800a9f2:	b2d8      	uxtb	r0, r3
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4413      	add	r3, r2
 800aa00:	3303      	adds	r3, #3
 800aa02:	4602      	mov	r2, r0
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e013      	b.n	800aa30 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800aa08:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	440b      	add	r3, r1
 800aa16:	3302      	adds	r3, #2
 800aa18:	7f3a      	ldrb	r2, [r7, #28]
 800aa1a:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800aa1c:	7fba      	ldrb	r2, [r7, #30]
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	440b      	add	r3, r1
 800aa2a:	3303      	adds	r3, #3
 800aa2c:	7f7a      	ldrb	r2, [r7, #29]
 800aa2e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800aa30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7c1a      	ldrb	r2, [r3, #16]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	3301      	adds	r3, #1
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	7c52      	ldrb	r2, [r2, #17]
 800aa56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7c92      	ldrb	r2, [r2, #18]
 800aa60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	3303      	adds	r3, #3
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	7cd2      	ldrb	r2, [r2, #19]
 800aa6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7d12      	ldrb	r2, [r2, #20]
 800aa74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	3305      	adds	r3, #5
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	7d52      	ldrb	r2, [r2, #21]
 800aa7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	3306      	adds	r3, #6
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7d92      	ldrb	r2, [r2, #22]
 800aa88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	3307      	adds	r3, #7
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	7dd2      	ldrb	r2, [r2, #23]
 800aa92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	7e12      	ldrb	r2, [r2, #24]
 800aa9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	3309      	adds	r3, #9
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	7e52      	ldrb	r2, [r2, #25]
 800aaa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	330a      	adds	r3, #10
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7e92      	ldrb	r2, [r2, #26]
 800aab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	330b      	adds	r3, #11
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	7ed2      	ldrb	r2, [r2, #27]
 800aaba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	330c      	adds	r3, #12
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	7f12      	ldrb	r2, [r2, #28]
 800aac4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	330d      	adds	r3, #13
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	7f52      	ldrb	r2, [r2, #29]
 800aace:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	330e      	adds	r3, #14
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	7f92      	ldrb	r2, [r2, #30]
 800aad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	330f      	adds	r3, #15
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	7fd2      	ldrb	r2, [r2, #31]
 800aae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	3310      	adds	r3, #16
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f892 2020 	ldrb.w	r2, [r2, #32]
 800aaee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	3311      	adds	r3, #17
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800aafa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	3312      	adds	r3, #18
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ab06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	3313      	adds	r3, #19
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ab12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3314      	adds	r3, #20
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ab1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	3315      	adds	r3, #21
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ab2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	3316      	adds	r3, #22
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ab36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	3317      	adds	r3, #23
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ab42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	3318      	adds	r3, #24
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ab4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3319      	adds	r3, #25
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ab5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	331a      	adds	r3, #26
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ab66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	331b      	adds	r3, #27
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ab72:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	331c      	adds	r3, #28
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ab7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	331d      	adds	r3, #29
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ab8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	331e      	adds	r3, #30
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ab96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	331f      	adds	r3, #31
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800aba2:	701a      	strb	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	22ff      	movs	r2, #255	; 0xff
 800abbc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	22ff      	movs	r2, #255	; 0xff
 800abc2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	22ff      	movs	r2, #255	; 0xff
 800abc8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abde:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abe6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abee:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abf6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abfe:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac06:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac16:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac26:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac2e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac36:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac3e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac46:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac4e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac56:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac66:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	22ff      	movs	r2, #255	; 0xff
 800ac6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	79fa      	ldrb	r2, [r7, #7]
 800ac96:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
 800ac9c:	e017      	b.n	800acce <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800ac9e:	7bfa      	ldrb	r2, [r7, #15]
 800aca0:	4613      	mov	r3, r2
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	4413      	add	r3, r2
 800acac:	3304      	adds	r3, #4
 800acae:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2203      	movs	r2, #3
 800acb4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2203      	movs	r2, #3
 800acba:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2204      	movs	r2, #4
 800acc0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2200      	movs	r2, #0
 800acc6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	3301      	adds	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	7bfa      	ldrb	r2, [r7, #15]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d3e2      	bcc.n	800ac9e <V53L1_init_zone_results_structure+0x22>
	}
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b087      	sub	sp, #28
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800acf4:	3308      	adds	r3, #8
 800acf6:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800acfc:	2310      	movs	r3, #16
 800acfe:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ad06:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800ad08:	2300      	movs	r3, #0
 800ad0a:	75fb      	strb	r3, [r7, #23]
 800ad0c:	e016      	b.n	800ad3c <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800ad0e:	7dfa      	ldrb	r2, [r7, #23]
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	2201      	movs	r2, #1
 800ad20:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800ad22:	7dfa      	ldrb	r2, [r7, #23]
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	440b      	add	r3, r1
 800ad30:	3306      	adds	r3, #6
 800ad32:	2200      	movs	r2, #0
 800ad34:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
 800ad3c:	7dfa      	ldrb	r2, [r7, #23]
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d3e4      	bcc.n	800ad0e <V53L1_init_zone_dss_configs+0x28>
	}
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800ad52:	b490      	push	{r4, r7}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	4604      	mov	r4, r0
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	461a      	mov	r2, r3
 800ad60:	4623      	mov	r3, r4
 800ad62:	71fb      	strb	r3, [r7, #7]
 800ad64:	4603      	mov	r3, r0
 800ad66:	71bb      	strb	r3, [r7, #6]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	717b      	strb	r3, [r7, #5]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800ad70:	79bb      	ldrb	r3, [r7, #6]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	79fb      	ldrb	r3, [r7, #7]
 800ad78:	4413      	add	r3, r2
 800ad7a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800ad80:	793b      	ldrb	r3, [r7, #4]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	797b      	ldrb	r3, [r7, #5]
 800ad88:	4413      	add	r3, r2
 800ad8a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800ad90:	7d3b      	ldrb	r3, [r7, #20]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	7c3b      	ldrb	r3, [r7, #16]
 800ad98:	4413      	add	r3, r2
 800ad9a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800ada0:	7f3b      	ldrb	r3, [r7, #28]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	7e3b      	ldrb	r3, [r7, #24]
 800ada8:	4413      	add	r3, r2
 800adaa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800adb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adbc:	4413      	add	r3, r2
 800adbe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800adc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800add0:	4413      	add	r3, r2
 800add2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800adfe:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800ae00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae0c:	4413      	add	r3, r2
 800ae0e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ae1a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	2200      	movs	r2, #0
 800ae20:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae58:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae60:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]

}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bc90      	pop	{r4, r7}
 800ae70:	4770      	bx	lr

0800ae72 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800ae72:	b490      	push	{r4, r7}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	4604      	mov	r4, r0
 800ae7a:	4608      	mov	r0, r1
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4623      	mov	r3, r4
 800ae82:	71fb      	strb	r3, [r7, #7]
 800ae84:	4603      	mov	r3, r0
 800ae86:	71bb      	strb	r3, [r7, #6]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	717b      	strb	r3, [r7, #5]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800ae90:	79bb      	ldrb	r3, [r7, #6]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	4413      	add	r3, r2
 800ae9a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800aea0:	793b      	ldrb	r3, [r7, #4]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	797b      	ldrb	r3, [r7, #5]
 800aea8:	4413      	add	r3, r2
 800aeaa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800aeb0:	7d3b      	ldrb	r3, [r7, #20]
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	7c3b      	ldrb	r3, [r7, #16]
 800aeb8:	4413      	add	r3, r2
 800aeba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	789a      	ldrb	r2, [r3, #2]
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	78da      	ldrb	r2, [r3, #3]
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	789a      	ldrb	r2, [r3, #2]
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	78da      	ldrb	r2, [r3, #3]
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	791a      	ldrb	r2, [r3, #4]
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800aefe:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800af00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	b2da      	uxtb	r2, r3
 800af08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af0c:	4413      	add	r3, r2
 800af0e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800af1a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800af22:	7f3b      	ldrb	r3, [r7, #28]
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	b2da      	uxtb	r2, r3
 800af28:	7e3b      	ldrb	r3, [r7, #24]
 800af2a:	4413      	add	r3, r2
 800af2c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800af32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af3e:	4413      	add	r3, r2
 800af40:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800af46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af52:	4413      	add	r3, r2
 800af54:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	7bda      	ldrb	r2, [r3, #15]
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	7c1a      	ldrb	r2, [r3, #16]
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	7c5a      	ldrb	r2, [r3, #17]
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af78:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af80:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	2200      	movs	r2, #0
 800af86:	701a      	strb	r2, [r3, #0]
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc90      	pop	{r4, r7}
 800af90:	4770      	bx	lr

0800af92 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800af92:	b480      	push	{r7}
 800af94:	b087      	sub	sp, #28
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	460b      	mov	r3, r1
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	220c      	movs	r2, #12
 800afba:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800afbc:	897b      	ldrh	r3, [r7, #10]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800aff2:	2300      	movs	r3, #0
 800aff4:	82fb      	strh	r3, [r7, #22]
 800aff6:	e015      	b.n	800b024 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800aff8:	8afa      	ldrh	r2, [r7, #22]
 800affa:	897b      	ldrh	r3, [r7, #10]
 800affc:	429a      	cmp	r2, r3
 800affe:	d207      	bcs.n	800b010 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b000:	8afb      	ldrh	r3, [r7, #22]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	3302      	adds	r3, #2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	e006      	b.n	800b01e <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b010:	8afb      	ldrh	r3, [r7, #22]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	3302      	adds	r3, #2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b01e:	8afb      	ldrh	r3, [r7, #22]
 800b020:	3301      	adds	r3, #1
 800b022:	82fb      	strh	r3, [r7, #22]
 800b024:	8afb      	ldrh	r3, [r7, #22]
 800b026:	2b0b      	cmp	r3, #11
 800b028:	d9e6      	bls.n	800aff8 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	603a      	str	r2, [r7, #0]
 800b042:	80fb      	strh	r3, [r7, #6]
 800b044:	460b      	mov	r3, r1
 800b046:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b054:	2300      	movs	r3, #0
 800b056:	81fb      	strh	r3, [r7, #14]
 800b058:	e00e      	b.n	800b078 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b05a:	88ba      	ldrh	r2, [r7, #4]
 800b05c:	89fb      	ldrh	r3, [r7, #14]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	4413      	add	r3, r2
 800b066:	89ba      	ldrh	r2, [r7, #12]
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b06c:	89bb      	ldrh	r3, [r7, #12]
 800b06e:	0a1b      	lsrs	r3, r3, #8
 800b070:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b072:	89fb      	ldrh	r3, [r7, #14]
 800b074:	3301      	adds	r3, #1
 800b076:	81fb      	strh	r3, [r7, #14]
 800b078:	89fa      	ldrh	r2, [r7, #14]
 800b07a:	88bb      	ldrh	r3, [r7, #4]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d3ec      	bcc.n	800b05a <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	4603      	mov	r3, r0
 800b096:	6039      	str	r1, [r7, #0]
 800b098:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b09a:	2300      	movs	r3, #0
 800b09c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b09e:	e00a      	b.n	800b0b6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b0a0:	89fb      	ldrh	r3, [r7, #14]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	b21a      	sxth	r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	1c59      	adds	r1, r3, #1
 800b0aa:	6039      	str	r1, [r7, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	b21b      	sxth	r3, r3
 800b0b4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	1e5a      	subs	r2, r3, #1
 800b0ba:	80fa      	strh	r2, [r7, #6]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1ef      	bne.n	800b0a0 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b0c0:	89fb      	ldrh	r3, [r7, #14]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	603a      	str	r2, [r7, #0]
 800b0d8:	80fb      	strh	r3, [r7, #6]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	81fb      	strh	r3, [r7, #14]
 800b0ee:	e00f      	b.n	800b110 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b0f0:	88ba      	ldrh	r2, [r7, #4]
 800b0f2:	89fb      	ldrh	r3, [r7, #14]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	89ba      	ldrh	r2, [r7, #12]
 800b0fe:	b2d2      	uxtb	r2, r2
 800b100:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b102:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b106:	121b      	asrs	r3, r3, #8
 800b108:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b10a:	89fb      	ldrh	r3, [r7, #14]
 800b10c:	3301      	adds	r3, #1
 800b10e:	81fb      	strh	r3, [r7, #14]
 800b110:	89fa      	ldrh	r2, [r7, #14]
 800b112:	88bb      	ldrh	r3, [r7, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	d3eb      	bcc.n	800b0f0 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	4603      	mov	r3, r0
 800b12e:	6039      	str	r1, [r7, #0]
 800b130:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b132:	2300      	movs	r3, #0
 800b134:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da0e      	bge.n	800b15e <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b144:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b146:	e00a      	b.n	800b15e <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	b21a      	sxth	r2, r3
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	1c59      	adds	r1, r3, #1
 800b154:	6039      	str	r1, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	b21b      	sxth	r3, r3
 800b15a:	4313      	orrs	r3, r2
 800b15c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	1e5a      	subs	r2, r3, #1
 800b162:	80fa      	strh	r2, [r7, #6]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1ef      	bne.n	800b148 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	460b      	mov	r3, r1
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b192:	2300      	movs	r3, #0
 800b194:	82fb      	strh	r3, [r7, #22]
 800b196:	e00e      	b.n	800b1b6 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b198:	897a      	ldrh	r2, [r7, #10]
 800b19a:	8afb      	ldrh	r3, [r7, #22]
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	0a1b      	lsrs	r3, r3, #8
 800b1ae:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b1b0:	8afb      	ldrh	r3, [r7, #22]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	82fb      	strh	r3, [r7, #22]
 800b1b6:	8afa      	ldrh	r2, [r7, #22]
 800b1b8:	897b      	ldrh	r3, [r7, #10]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d3ec      	bcc.n	800b198 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b1dc:	e007      	b.n	800b1ee <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	021a      	lsls	r2, r3, #8
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	1c59      	adds	r1, r3, #1
 800b1e6:	6039      	str	r1, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b1ee:	88fb      	ldrh	r3, [r7, #6]
 800b1f0:	1e5a      	subs	r2, r3, #1
 800b1f2:	80fa      	strh	r2, [r7, #6]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1f2      	bne.n	800b1de <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	4603      	mov	r3, r0
 800b20e:	6039      	str	r1, [r7, #0]
 800b210:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	da0b      	bge.n	800b238 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b226:	e007      	b.n	800b238 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	021a      	lsls	r2, r3, #8
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	1c59      	adds	r1, r3, #1
 800b230:	6039      	str	r1, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	4313      	orrs	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	1e5a      	subs	r2, r3, #1
 800b23c:	80fa      	strh	r2, [r7, #6]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f2      	bne.n	800b228 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b242:	68fb      	ldr	r3, [r7, #12]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	461a      	mov	r2, r3
 800b26c:	2127      	movs	r1, #39	; 0x27
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f009 f9ce 	bl	8014610 <VL53L1_WrByte>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3318      	adds	r3, #24
 800b298:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	2185      	movs	r1, #133	; 0x85
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f009 f9af 	bl	8014610 <VL53L1_WrByte>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ffd7 	bl	800b284 <VL53L1_set_firmware_enable_register>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff ffc5 	bl	800b284 <VL53L1_set_firmware_enable_register>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3318      	adds	r3, #24
 800b31e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b32e:	461a      	mov	r2, r3
 800b330:	2183      	movs	r1, #131	; 0x83
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f009 f96c 	bl	8014610 <VL53L1_WrByte>
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b354:	2101      	movs	r1, #1
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff ffd7 	bl	800b30a <VL53L1_set_powerforce_register>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b378:	2100      	movs	r1, #0
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ffc5 	bl	800b30a <VL53L1_set_powerforce_register>
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3318      	adds	r3, #24
 800b3a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	2186      	movs	r1, #134	; 0x86
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f009 f92b 	bl	8014610 <VL53L1_WrByte>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b086      	sub	sp, #24
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	80fb      	strh	r3, [r7, #6]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f002 ffeb 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 800b3ee:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b3f0:	797b      	ldrb	r3, [r7, #5]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f003 fbd6 	bl	800eba4 <VL53L1_decode_vcsel_period>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4613      	mov	r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	4413      	add	r3, r2
 800b404:	021b      	lsls	r3, r3, #8
 800b406:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	099b      	lsrs	r3, r3, #6
 800b40c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b40e:	7cfa      	ldrb	r2, [r7, #19]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	fb02 f303 	mul.w	r3, r2, r3
 800b416:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	099b      	lsrs	r3, r3, #6
 800b41c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b41e:	68fb      	ldr	r3, [r7, #12]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b428:	b480      	push	{r7}
 800b42a:	b089      	sub	sp, #36	; 0x24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	4608      	mov	r0, r1
 800b432:	4611      	mov	r1, r2
 800b434:	461a      	mov	r2, r3
 800b436:	4603      	mov	r3, r0
 800b438:	817b      	strh	r3, [r7, #10]
 800b43a:	460b      	mov	r3, r1
 800b43c:	813b      	strh	r3, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	011b      	lsls	r3, r3, #4
 800b45a:	4a23      	ldr	r2, [pc, #140]	; (800b4e8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b45c:	fb82 1203 	smull	r1, r2, r2, r3
 800b460:	1192      	asrs	r2, r2, #6
 800b462:	17db      	asrs	r3, r3, #31
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	da03      	bge.n	800b478 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b470:	897b      	ldrh	r3, [r7, #10]
 800b472:	425b      	negs	r3, r3
 800b474:	b29b      	uxth	r3, r3
 800b476:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b478:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da03      	bge.n	800b488 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b480:	893b      	ldrh	r3, [r7, #8]
 800b482:	425b      	negs	r3, r3
 800b484:	b29b      	uxth	r3, r3
 800b486:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b488:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b48c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b490:	4413      	add	r3, r2
 800b492:	015b      	lsls	r3, r3, #5
 800b494:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	4a13      	ldr	r2, [pc, #76]	; (800b4e8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b49a:	fb82 1203 	smull	r1, r2, r2, r3
 800b49e:	1192      	asrs	r2, r2, #6
 800b4a0:	17db      	asrs	r3, r3, #31
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b4ae:	79fa      	ldrb	r2, [r7, #7]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	3310      	adds	r3, #16
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	da00      	bge.n	800b4c2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800b4c0:	331f      	adds	r3, #31
 800b4c2:	115b      	asrs	r3, r3, #5
 800b4c4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4cc:	db03      	blt.n	800b4d6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4d2:	83fb      	strh	r3, [r7, #30]
 800b4d4:	e001      	b.n	800b4da <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b4da:	8bfb      	ldrh	r3, [r7, #30]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3724      	adds	r7, #36	; 0x24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	10624dd3 	.word	0x10624dd3

0800b4ec <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	e008      	b.n	800b518 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	031a      	lsls	r2, r3, #12
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	085b      	lsrs	r3, r3, #1
 800b50e:	441a      	add	r2, r3
		timeout_mclks =
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	fbb2 f3f3 	udiv	r3, r2, r3
 800b516:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b518:	68fb      	ldr	r3, [r7, #12]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff ffd6 	bl	800b4ec <VL53L1_calc_timeout_mclks>
 800b540:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 f887 	bl	800b656 <VL53L1_encode_timeout>
 800b548:	4603      	mov	r3, r0
 800b54a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b54c:	897b      	ldrh	r3, [r7, #10]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b556:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b562:	2100      	movs	r1, #0
 800b564:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b566:	f04f 0000 	mov.w	r0, #0
 800b56a:	f04f 0100 	mov.w	r1, #0
 800b56e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	2000      	movs	r0, #0
 800b576:	4688      	mov	r8, r1
 800b578:	4681      	mov	r9, r0
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	2000      	movs	r0, #0
 800b57e:	460c      	mov	r4, r1
 800b580:	4605      	mov	r5, r0
 800b582:	fb04 f009 	mul.w	r0, r4, r9
 800b586:	fb08 f105 	mul.w	r1, r8, r5
 800b58a:	4401      	add	r1, r0
 800b58c:	fba8 2304 	umull	r2, r3, r8, r4
 800b590:	4419      	add	r1, r3
 800b592:	460b      	mov	r3, r1
 800b594:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b598:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b59c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5a0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b5a4:	f143 0b00 	adc.w	fp, r3, #0
 800b5a8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b5ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5b0:	f04f 0200 	mov.w	r2, #0
 800b5b4:	f04f 0300 	mov.w	r3, #0
 800b5b8:	0b02      	lsrs	r2, r0, #12
 800b5ba:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b5be:	0b0b      	lsrs	r3, r1, #12
 800b5c0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b5c8:	697b      	ldr	r3, [r7, #20]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b5ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b5f0:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b5f2:	4413      	add	r3, r2
 800b5f4:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da02      	bge.n	800b602 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	e005      	b.n	800b60e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b608:	db01      	blt.n	800b60e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b60c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b612:	68bb      	ldr	r3, [r7, #8]

}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	0003ffff 	.word	0x0003ffff

0800b624 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b638:	88fb      	ldrh	r3, [r7, #6]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 f837 	bl	800b6ae <VL53L1_decode_timeout>
 800b640:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7ff ff86 	bl	800b556 <VL53L1_calc_timeout_us>
 800b64a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b64c:	68bb      	ldr	r3, [r7, #8]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b656:	b480      	push	{r7}
 800b658:	b087      	sub	sp, #28
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d017      	beq.n	800b6a0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3b01      	subs	r3, #1
 800b674:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b676:	e005      	b.n	800b684 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b67e:	89fb      	ldrh	r3, [r7, #14]
 800b680:	3301      	adds	r3, #1
 800b682:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1f4      	bne.n	800b678 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b68e:	89fb      	ldrh	r3, [r7, #14]
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	b29b      	uxth	r3, r3
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b69c:	4413      	add	r3, r2
 800b69e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b6a0:	8afb      	ldrh	r3, [r7, #22]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b6c0:	88fa      	ldrh	r2, [r7, #6]
 800b6c2:	0a12      	lsrs	r2, r2, #8
 800b6c4:	b292      	uxth	r2, r2
 800b6c6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b088      	sub	sp, #32
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
 800b6e6:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b6f8:	887b      	ldrh	r3, [r7, #2]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d102      	bne.n	800b704 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b6fe:	23f1      	movs	r3, #241	; 0xf1
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	e05d      	b.n	800b7c0 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	799a      	ldrb	r2, [r3, #6]
 800b708:	887b      	ldrh	r3, [r7, #2]
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fe5c 	bl	800b3ca <VL53L1_calc_macro_period_us>
 800b712:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f7ff fee8 	bl	800b4ec <VL53L1_calc_timeout_mclks>
 800b71c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	2bff      	cmp	r3, #255	; 0xff
 800b722:	d901      	bls.n	800b728 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b724:	23ff      	movs	r3, #255	; 0xff
 800b726:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b730:	6979      	ldr	r1, [r7, #20]
 800b732:	68b8      	ldr	r0, [r7, #8]
 800b734:	f7ff fef7 	bl	800b526 <VL53L1_calc_encoded_timeout>
 800b738:	4603      	mov	r3, r0
 800b73a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b73c:	8a7b      	ldrh	r3, [r7, #18]
 800b73e:	0a1b      	lsrs	r3, r3, #8
 800b740:	b29b      	uxth	r3, r3
 800b742:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b748:	8a7b      	ldrh	r3, [r7, #18]
 800b74a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b750:	6979      	ldr	r1, [r7, #20]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff fee7 	bl	800b526 <VL53L1_calc_encoded_timeout>
 800b758:	4603      	mov	r3, r0
 800b75a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b75c:	8a7b      	ldrh	r3, [r7, #18]
 800b75e:	0a1b      	lsrs	r3, r3, #8
 800b760:	b29b      	uxth	r3, r3
 800b762:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b768:	8a7b      	ldrh	r3, [r7, #18]
 800b76a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	7a5a      	ldrb	r2, [r3, #9]
 800b774:	887b      	ldrh	r3, [r7, #2]
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fe26 	bl	800b3ca <VL53L1_calc_macro_period_us>
 800b77e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b780:	6979      	ldr	r1, [r7, #20]
 800b782:	68b8      	ldr	r0, [r7, #8]
 800b784:	f7ff fecf 	bl	800b526 <VL53L1_calc_encoded_timeout>
 800b788:	4603      	mov	r3, r0
 800b78a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b78c:	8a7b      	ldrh	r3, [r7, #18]
 800b78e:	0a1b      	lsrs	r3, r3, #8
 800b790:	b29b      	uxth	r3, r3
 800b792:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b798:	8a7b      	ldrh	r3, [r7, #18]
 800b79a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b7a0:	6979      	ldr	r1, [r7, #20]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff febf 	bl	800b526 <VL53L1_calc_encoded_timeout>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b7ac:	8a7b      	ldrh	r3, [r7, #18]
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b7b8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ba:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7be:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b7c0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3720      	adds	r7, #32
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b7cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7d0:	b09e      	sub	sp, #120	; 0x78
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6578      	str	r0, [r7, #84]	; 0x54
 800b7d6:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b7de:	f04f 0200 	mov.w	r2, #0
 800b7e2:	f04f 0300 	mov.w	r3, #0
 800b7e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b7ea:	f04f 0200 	mov.w	r2, #0
 800b7ee:	f04f 0300 	mov.w	r3, #0
 800b7f2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b7f6:	f04f 0200 	mov.w	r2, #0
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b804:	885b      	ldrh	r3, [r3, #2]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d103      	bne.n	800b812 <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b80a:	23f1      	movs	r3, #241	; 0xf1
 800b80c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b810:	e0d6      	b.n	800b9c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b814:	785b      	ldrb	r3, [r3, #1]
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 80d2 	beq.w	800b9c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b820:	2b00      	cmp	r3, #0
 800b822:	f040 80cd 	bne.w	800b9c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b82c:	2200      	movs	r2, #0
 800b82e:	643b      	str	r3, [r7, #64]	; 0x40
 800b830:	647a      	str	r2, [r7, #68]	; 0x44
 800b832:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b836:	460b      	mov	r3, r1
 800b838:	3301      	adds	r3, #1
 800b83a:	623b      	str	r3, [r7, #32]
 800b83c:	4613      	mov	r3, r2
 800b83e:	f143 0300 	adc.w	r3, r3, #0
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
 800b844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b848:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b84e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b852:	b29b      	uxth	r3, r3
 800b854:	2200      	movs	r2, #0
 800b856:	64bb      	str	r3, [r7, #72]	; 0x48
 800b858:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b85c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b860:	4602      	mov	r2, r0
 800b862:	fb02 f203 	mul.w	r2, r2, r3
 800b866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b868:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b86c:	fb01 f303 	mul.w	r3, r1, r3
 800b870:	441a      	add	r2, r3
 800b872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b874:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b876:	fba3 4501 	umull	r4, r5, r3, r1
 800b87a:	1953      	adds	r3, r2, r5
 800b87c:	461d      	mov	r5, r3
 800b87e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800b882:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800b886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b88e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b890:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b894:	460b      	mov	r3, r1
 800b896:	3301      	adds	r3, #1
 800b898:	61bb      	str	r3, [r7, #24]
 800b89a:	4613      	mov	r3, r2
 800b89c:	f143 0300 	adc.w	r3, r3, #0
 800b8a0:	61fb      	str	r3, [r7, #28]
 800b8a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b8a6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800b8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ac:	885b      	ldrh	r3, [r3, #2]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b8b4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800b8b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b8bc:	4622      	mov	r2, r4
 800b8be:	fb02 f203 	mul.w	r2, r2, r3
 800b8c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	441a      	add	r2, r3
 800b8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	fba3 ab01 	umull	sl, fp, r3, r1
 800b8d4:	eb02 030b 	add.w	r3, r2, fp
 800b8d8:	469b      	mov	fp, r3
 800b8da:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800b8de:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800b8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	17da      	asrs	r2, r3, #31
 800b8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ea:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800b8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	fb02 f203 	mul.w	r2, r2, r3
 800b8f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	4413      	add	r3, r2
 800b902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b904:	4621      	mov	r1, r4
 800b906:	fba2 8901 	umull	r8, r9, r2, r1
 800b90a:	444b      	add	r3, r9
 800b90c:	4699      	mov	r9, r3
 800b90e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800b912:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800b916:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b91a:	0fd9      	lsrs	r1, r3, #31
 800b91c:	2000      	movs	r0, #0
 800b91e:	6139      	str	r1, [r7, #16]
 800b920:	6178      	str	r0, [r7, #20]
 800b922:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b926:	4621      	mov	r1, r4
 800b928:	1889      	adds	r1, r1, r2
 800b92a:	60b9      	str	r1, [r7, #8]
 800b92c:	4629      	mov	r1, r5
 800b92e:	eb43 0101 	adc.w	r1, r3, r1
 800b932:	60f9      	str	r1, [r7, #12]
 800b934:	f04f 0200 	mov.w	r2, #0
 800b938:	f04f 0300 	mov.w	r3, #0
 800b93c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b940:	4621      	mov	r1, r4
 800b942:	084a      	lsrs	r2, r1, #1
 800b944:	4629      	mov	r1, r5
 800b946:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800b94a:	4629      	mov	r1, r5
 800b94c:	104b      	asrs	r3, r1, #1
 800b94e:	4610      	mov	r0, r2
 800b950:	4619      	mov	r1, r3
 800b952:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b956:	1814      	adds	r4, r2, r0
 800b958:	603c      	str	r4, [r7, #0]
 800b95a:	414b      	adcs	r3, r1
 800b95c:	607b      	str	r3, [r7, #4]
 800b95e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b962:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800b966:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b96a:	4313      	orrs	r3, r2
 800b96c:	d009      	beq.n	800b982 <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800b96e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b972:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b976:	f7f4 fc53 	bl	8000220 <__aeabi_ldivmod>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800b982:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b986:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800b98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800b990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b992:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800b996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800b99c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b99e:	7852      	ldrb	r2, [r2, #1]
 800b9a0:	0852      	lsrs	r2, r2, #1
 800b9a2:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800b9a4:	441a      	add	r2, r3
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800b9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9b4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800b9b6:	fb93 f2f2 	sdiv	r2, r3, r2
 800b9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800b9c0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3778      	adds	r7, #120	; 0x78
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9ce <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b087      	sub	sp, #28
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800b9f0:	029b      	lsls	r3, r3, #10
 800b9f2:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800b9fa:	029b      	lsls	r3, r3, #10
 800b9fc:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f040 8095 	bne.w	800bb38 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800ba14:	091b      	lsrs	r3, r3, #4
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800ba32:	091b      	lsrs	r3, r3, #4
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ba40:	f003 030f 	and.w	r3, r3, #15
 800ba44:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800ba50:	091b      	lsrs	r3, r3, #4
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800ba5e:	f003 030f 	and.w	r3, r3, #15
 800ba62:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	da2c      	bge.n	800bace <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800ba7a:	091b      	lsrs	r3, r3, #4
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bab6:	091b      	lsrs	r3, r3, #4
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	f340 80c2 	ble.w	800bc60 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bae2:	091b      	lsrs	r3, r3, #4
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800baf0:	f003 030f 	and.w	r3, r3, #15
 800baf4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bb00:	091b      	lsrs	r3, r3, #4
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800bb1e:	091b      	lsrs	r3, r3, #4
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	731a      	strb	r2, [r3, #12]
 800bb36:	e093      	b.n	800bc60 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800bb5e:	091b      	lsrs	r3, r3, #4
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800bb8a:	f003 030f 	and.w	r3, r3, #15
 800bb8e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	da2c      	bge.n	800bbfa <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800bba6:	091b      	lsrs	r3, r3, #4
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bbb4:	f003 030f 	and.w	r3, r3, #15
 800bbb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800bbc4:	091b      	lsrs	r3, r3, #4
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800bbe2:	091b      	lsrs	r3, r3, #4
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bbf0:	f003 030f 	and.w	r3, r3, #15
 800bbf4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	dd2c      	ble.n	800bc60 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800bc0c:	091b      	lsrs	r3, r3, #4
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bc2a:	091b      	lsrs	r3, r3, #4
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bc38:	f003 030f 	and.w	r3, r3, #15
 800bc3c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bc48:	091b      	lsrs	r3, r3, #4
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bc56:	f003 030f 	and.w	r3, r3, #15
 800bc5a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]
 800bc64:	e007      	b.n	800bc76 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
 800bc72:	3301      	adds	r3, #1
 800bc74:	75fb      	strb	r3, [r7, #23]
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	d9f4      	bls.n	800bc66 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	371c      	adds	r7, #28
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bc8a:	b590      	push	{r4, r7, lr}
 800bc8c:	b093      	sub	sp, #76	; 0x4c
 800bc8e:	af04      	add	r7, sp, #16
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3318      	adds	r3, #24
 800bca2:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bcca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bcd4:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800bcdc:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800bce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800bce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcec:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800bcee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	2b07      	cmp	r3, #7
 800bcfa:	d006      	beq.n	800bd0a <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800bd00:	2b08      	cmp	r3, #8
 800bd02:	d002      	beq.n	800bd0a <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800bd04:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd08:	e0ec      	b.n	800bee4 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800bd0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800bd10:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd14:	e0e6      	b.n	800bee4 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bd16:	2300      	movs	r3, #0
 800bd18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bd1c:	e0d9      	b.n	800bed2 <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bd1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	214c      	movs	r1, #76	; 0x4c
 800bd26:	fb01 f303 	mul.w	r3, r1, r3
 800bd2a:	4413      	add	r3, r2
 800bd2c:	335e      	adds	r3, #94	; 0x5e
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d00b      	beq.n	800bd4c <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800bd34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	214c      	movs	r1, #76	; 0x4c
 800bd3c:	fb01 f303 	mul.w	r3, r1, r3
 800bd40:	4413      	add	r3, r2
 800bd42:	335e      	adds	r3, #94	; 0x5e
 800bd44:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bd46:	2b13      	cmp	r3, #19
 800bd48:	f040 80bd 	bne.w	800bec6 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	795b      	ldrb	r3, [r3, #5]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800bd54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	214c      	movs	r1, #76	; 0x4c
 800bd5c:	fb01 f303 	mul.w	r3, r1, r3
 800bd60:	4413      	add	r3, r2
 800bd62:	335e      	adds	r3, #94	; 0x5e
 800bd64:	2217      	movs	r2, #23
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e009      	b.n	800bd7e <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800bd6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	214c      	movs	r1, #76	; 0x4c
 800bd72:	fb01 f303 	mul.w	r3, r1, r3
 800bd76:	4413      	add	r3, r2
 800bd78:	335e      	adds	r3, #94	; 0x5e
 800bd7a:	2207      	movs	r2, #7
 800bd7c:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bd84:	e097      	b.n	800beb6 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bd86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	214c      	movs	r1, #76	; 0x4c
 800bd8e:	fb01 f303 	mul.w	r3, r1, r3
 800bd92:	4413      	add	r3, r2
 800bd94:	3354      	adds	r3, #84	; 0x54
 800bd96:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800bd98:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4403      	add	r3, r0
 800bda8:	3310      	adds	r3, #16
 800bdaa:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bdac:	4299      	cmp	r1, r3
 800bdae:	d915      	bls.n	800bddc <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800bdb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	214c      	movs	r1, #76	; 0x4c
 800bdb8:	fb01 f303 	mul.w	r3, r1, r3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3354      	adds	r3, #84	; 0x54
 800bdc0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800bdc2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4403      	add	r3, r0
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800bdd6:	1acb      	subs	r3, r1, r3
 800bdd8:	867b      	strh	r3, [r7, #50]	; 0x32
 800bdda:	e014      	b.n	800be06 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800bddc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4613      	mov	r3, r2
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	440b      	add	r3, r1
 800bdec:	3310      	adds	r3, #16
 800bdee:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800bdf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	204c      	movs	r0, #76	; 0x4c
 800bdf8:	fb00 f303 	mul.w	r3, r0, r3
 800bdfc:	440b      	add	r3, r1
 800bdfe:	3354      	adds	r3, #84	; 0x54
 800be00:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800be06:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800be08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d24e      	bcs.n	800beac <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800be0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be12:	2b00      	cmp	r3, #0
 800be14:	d125      	bne.n	800be62 <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800be16:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800be1a:	4613      	mov	r3, r2
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	3308      	adds	r3, #8
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800be28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800be2c:	224c      	movs	r2, #76	; 0x4c
 800be2e:	fb02 f303 	mul.w	r3, r2, r3
 800be32:	3310      	adds	r3, #16
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	4413      	add	r3, r2
 800be38:	3304      	adds	r3, #4
 800be3a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800be3c:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800be40:	f107 0217 	add.w	r2, r7, #23
 800be44:	9203      	str	r2, [sp, #12]
 800be46:	f107 021c 	add.w	r2, r7, #28
 800be4a:	9202      	str	r2, [sp, #8]
 800be4c:	f107 0218 	add.w	r2, r7, #24
 800be50:	9201      	str	r2, [sp, #4]
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	4623      	mov	r3, r4
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	f000 f848 	bl	800beec <VL53L1_hist_events_consistency_check>
 800be5c:	4603      	mov	r3, r0
 800be5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800be62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be66:	2b00      	cmp	r3, #0
 800be68:	d115      	bne.n	800be96 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800be6c:	2b09      	cmp	r3, #9
 800be6e:	d112      	bne.n	800be96 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800be70:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800be74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800be78:	224c      	movs	r2, #76	; 0x4c
 800be7a:	fb02 f303 	mul.w	r3, r2, r3
 800be7e:	3310      	adds	r3, #16
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	4413      	add	r3, r2
 800be84:	3304      	adds	r3, #4
 800be86:	f107 0217 	add.w	r2, r7, #23
 800be8a:	4619      	mov	r1, r3
 800be8c:	f000 fb44 	bl	800c518 <VL53L1_hist_merged_pulse_check>
 800be90:	4603      	mov	r3, r0
 800be92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800be96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be9a:	7df8      	ldrb	r0, [r7, #23]
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	214c      	movs	r1, #76	; 0x4c
 800bea0:	fb01 f303 	mul.w	r3, r1, r3
 800bea4:	4413      	add	r3, r2
 800bea6:	335e      	adds	r3, #94	; 0x5e
 800bea8:	4602      	mov	r2, r0
 800beaa:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800beac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800beb0:	3301      	adds	r3, #1
 800beb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	795b      	ldrb	r3, [r3, #5]
 800beba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bebe:	429a      	cmp	r2, r3
 800bec0:	f4ff af61 	bcc.w	800bd86 <VL53L1_hist_phase_consistency_check+0xfc>
 800bec4:	e000      	b.n	800bec8 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800bec6:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bec8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800becc:	3301      	adds	r3, #1
 800bece:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	7c9b      	ldrb	r3, [r3, #18]
 800bed6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800beda:	429a      	cmp	r2, r3
 800bedc:	f4ff af1f 	bcc.w	800bd1e <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800bee0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	373c      	adds	r7, #60	; 0x3c
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd90      	pop	{r4, r7, pc}

0800beec <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800beec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bef0:	b0d4      	sub	sp, #336	; 0x150
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800bef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800befc:	4603      	mov	r3, r0
 800befe:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800bf02:	460b      	mov	r3, r1
 800bf04:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800bf0e:	f04f 0200 	mov.w	r2, #0
 800bf12:	f04f 0300 	mov.w	r3, #0
 800bf16:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800bf1a:	f04f 0200 	mov.w	r2, #0
 800bf1e:	f04f 0300 	mov.w	r3, #0
 800bf22:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	f04f 0300 	mov.w	r3, #0
 800bf3a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	f04f 0300 	mov.w	r3, #0
 800bf46:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	f04f 0300 	mov.w	r3, #0
 800bf52:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800bf56:	f04f 0200 	mov.w	r2, #0
 800bf5a:	f04f 0300 	mov.w	r3, #0
 800bf5e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800bf74:	2300      	movs	r3, #0
 800bf76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800bf7a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800bf82:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800bf86:	2209      	movs	r2, #9
 800bf88:	701a      	strb	r2, [r3, #0]
		return status;
 800bf8a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800bf8e:	e2bd      	b.n	800c50c <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800bf90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf9c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bfa0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfac:	4613      	mov	r3, r2
 800bfae:	f143 0300 	adc.w	r3, r3, #0
 800bfb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfb6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800bfba:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800bfbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfc2:	885b      	ldrh	r3, [r3, #2]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	469a      	mov	sl, r3
 800bfca:	4693      	mov	fp, r2
 800bfcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bfd0:	fb0a f203 	mul.w	r2, sl, r3
 800bfd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bfd8:	fb0b f303 	mul.w	r3, fp, r3
 800bfdc:	441a      	add	r2, r3
 800bfde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bfe2:	fba3 450a 	umull	r4, r5, r3, sl
 800bfe6:	1953      	adds	r3, r2, r5
 800bfe8:	461d      	mov	r5, r3
 800bfea:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800bfee:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800bff2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bffe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c002:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c006:	460b      	mov	r3, r1
 800c008:	3301      	adds	r3, #1
 800c00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c00e:	4613      	mov	r3, r2
 800c010:	f143 0300 	adc.w	r3, r3, #0
 800c014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c018:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c01c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c020:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c024:	8adb      	ldrh	r3, [r3, #22]
 800c026:	b29b      	uxth	r3, r3
 800c028:	2200      	movs	r2, #0
 800c02a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c02e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c032:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c036:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c03a:	4622      	mov	r2, r4
 800c03c:	fb02 f203 	mul.w	r2, r2, r3
 800c040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c044:	4629      	mov	r1, r5
 800c046:	fb01 f303 	mul.w	r3, r1, r3
 800c04a:	441a      	add	r2, r3
 800c04c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c050:	4621      	mov	r1, r4
 800c052:	fba3 8901 	umull	r8, r9, r3, r1
 800c056:	eb02 0309 	add.w	r3, r2, r9
 800c05a:	4699      	mov	r9, r3
 800c05c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c060:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c064:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c068:	f04f 0000 	mov.w	r0, #0
 800c06c:	f04f 0100 	mov.w	r1, #0
 800c070:	0319      	lsls	r1, r3, #12
 800c072:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c076:	0310      	lsls	r0, r2, #12
 800c078:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c07c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c080:	0fd9      	lsrs	r1, r3, #31
 800c082:	2000      	movs	r0, #0
 800c084:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c088:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c08c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c090:	4621      	mov	r1, r4
 800c092:	1889      	adds	r1, r1, r2
 800c094:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c098:	4629      	mov	r1, r5
 800c09a:	eb43 0101 	adc.w	r1, r3, r1
 800c09e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	f04f 0300 	mov.w	r3, #0
 800c0aa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	084a      	lsrs	r2, r1, #1
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	104b      	asrs	r3, r1, #1
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4619      	mov	r1, r3
 800c0c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c0c4:	1814      	adds	r4, r2, r0
 800c0c6:	67bc      	str	r4, [r7, #120]	; 0x78
 800c0c8:	414b      	adcs	r3, r1
 800c0ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0cc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c0d0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c0d4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d009      	beq.n	800c0f0 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c0dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c0e0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c0e4:	f7f4 f89c 	bl	8000220 <__aeabi_ldivmod>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c0f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c0f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c0f8:	fb03 f102 	mul.w	r1, r3, r2
 800c0fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c100:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c104:	fb02 f303 	mul.w	r3, r2, r3
 800c108:	18ca      	adds	r2, r1, r3
 800c10a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c10e:	fba3 1303 	umull	r1, r3, r3, r3
 800c112:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c116:	460b      	mov	r3, r1
 800c118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c11c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c120:	18d3      	adds	r3, r2, r3
 800c122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c126:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c12a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c12e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c132:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c136:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c13a:	6739      	str	r1, [r7, #112]	; 0x70
 800c13c:	f143 0300 	adc.w	r3, r3, #0
 800c140:	677b      	str	r3, [r7, #116]	; 0x74
 800c142:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c146:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c14a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da08      	bge.n	800c164 <VL53L1_hist_events_consistency_check+0x278>
 800c152:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c156:	1851      	adds	r1, r2, r1
 800c158:	66b9      	str	r1, [r7, #104]	; 0x68
 800c15a:	f143 0300 	adc.w	r3, r3, #0
 800c15e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c160:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c164:	f04f 0000 	mov.w	r0, #0
 800c168:	f04f 0100 	mov.w	r1, #0
 800c16c:	0b10      	lsrs	r0, r2, #12
 800c16e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c172:	1319      	asrs	r1, r3, #12
 800c174:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c178:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17e:	2200      	movs	r2, #0
 800c180:	663b      	str	r3, [r7, #96]	; 0x60
 800c182:	667a      	str	r2, [r7, #100]	; 0x64
 800c184:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c188:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c18c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c192:	2200      	movs	r2, #0
 800c194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c198:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c19c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c1a0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	1a51      	subs	r1, r2, r1
 800c1a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	eb63 0301 	sbc.w	r3, r3, r1
 800c1b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1b2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c1b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c1ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c1be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c1c2:	fb03 f102 	mul.w	r1, r3, r2
 800c1c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c1ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1ce:	fb02 f303 	mul.w	r3, r2, r3
 800c1d2:	4419      	add	r1, r3
 800c1d4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c1d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c1e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ee:	18cb      	adds	r3, r1, r3
 800c1f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1f4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c1f8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c1fc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c200:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c204:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c208:	6539      	str	r1, [r7, #80]	; 0x50
 800c20a:	f143 0300 	adc.w	r3, r3, #0
 800c20e:	657b      	str	r3, [r7, #84]	; 0x54
 800c210:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c214:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c218:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da08      	bge.n	800c232 <VL53L1_hist_events_consistency_check+0x346>
 800c220:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c224:	1851      	adds	r1, r2, r1
 800c226:	64b9      	str	r1, [r7, #72]	; 0x48
 800c228:	f143 0300 	adc.w	r3, r3, #0
 800c22c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c22e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f04f 0100 	mov.w	r1, #0
 800c23a:	0b10      	lsrs	r0, r2, #12
 800c23c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c240:	1319      	asrs	r1, r3, #12
 800c242:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c246:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c24a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c24e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c254:	2200      	movs	r2, #0
 800c256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c25a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c25e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c262:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c266:	4622      	mov	r2, r4
 800c268:	fb02 f203 	mul.w	r2, r2, r3
 800c26c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c270:	4629      	mov	r1, r5
 800c272:	fb01 f303 	mul.w	r3, r1, r3
 800c276:	441a      	add	r2, r3
 800c278:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c27c:	4621      	mov	r1, r4
 800c27e:	fba3 1301 	umull	r1, r3, r3, r1
 800c282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c286:	460b      	mov	r3, r1
 800c288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c290:	18d3      	adds	r3, r2, r3
 800c292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c296:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c29a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c29e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c2a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c2a6:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c2aa:	6439      	str	r1, [r7, #64]	; 0x40
 800c2ac:	f143 0300 	adc.w	r3, r3, #0
 800c2b0:	647b      	str	r3, [r7, #68]	; 0x44
 800c2b2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c2b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c2ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	da08      	bge.n	800c2d4 <VL53L1_hist_events_consistency_check+0x3e8>
 800c2c2:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c2c6:	1851      	adds	r1, r2, r1
 800c2c8:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2ca:	f143 0300 	adc.w	r3, r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2d4:	f04f 0000 	mov.w	r0, #0
 800c2d8:	f04f 0100 	mov.w	r1, #0
 800c2dc:	0b10      	lsrs	r0, r2, #12
 800c2de:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c2e2:	1319      	asrs	r1, r3, #12
 800c2e4:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c2e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c2ec:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c2f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c304:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c308:	4622      	mov	r2, r4
 800c30a:	fb02 f203 	mul.w	r2, r2, r3
 800c30e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c312:	4629      	mov	r1, r5
 800c314:	fb01 f303 	mul.w	r3, r1, r3
 800c318:	441a      	add	r2, r3
 800c31a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c31e:	4621      	mov	r1, r4
 800c320:	fba3 1301 	umull	r1, r3, r3, r1
 800c324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c328:	460b      	mov	r3, r1
 800c32a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c32e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c332:	18d3      	adds	r3, r2, r3
 800c334:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c338:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c33c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c340:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c344:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c348:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c34c:	6339      	str	r1, [r7, #48]	; 0x30
 800c34e:	f143 0300 	adc.w	r3, r3, #0
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
 800c354:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c358:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c35c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	2900      	cmp	r1, #0
 800c366:	da08      	bge.n	800c37a <VL53L1_hist_events_consistency_check+0x48e>
 800c368:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c36c:	18c3      	adds	r3, r0, r3
 800c36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c370:	f141 0300 	adc.w	r3, r1, #0
 800c374:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c37a:	f04f 0200 	mov.w	r2, #0
 800c37e:	f04f 0300 	mov.w	r3, #0
 800c382:	0b02      	lsrs	r2, r0, #12
 800c384:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c388:	130b      	asrs	r3, r1, #12
 800c38a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c38e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c392:	1c91      	adds	r1, r2, #2
 800c394:	6239      	str	r1, [r7, #32]
 800c396:	f143 0300 	adc.w	r3, r3, #0
 800c39a:	627b      	str	r3, [r7, #36]	; 0x24
 800c39c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c3a0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c3a4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da06      	bge.n	800c3ba <VL53L1_hist_events_consistency_check+0x4ce>
 800c3ac:	1cd1      	adds	r1, r2, #3
 800c3ae:	61b9      	str	r1, [r7, #24]
 800c3b0:	f143 0300 	adc.w	r3, r3, #0
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3ba:	f04f 0000 	mov.w	r0, #0
 800c3be:	f04f 0100 	mov.w	r1, #0
 800c3c2:	0890      	lsrs	r0, r2, #2
 800c3c4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c3c8:	1099      	asrs	r1, r3, #2
 800c3ca:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3d2:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	613b      	str	r3, [r7, #16]
 800c3d8:	617a      	str	r2, [r7, #20]
 800c3da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c3de:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c3e2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c3e6:	1c91      	adds	r1, r2, #2
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	f143 0300 	adc.w	r3, r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c3f4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c3f8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da06      	bge.n	800c40e <VL53L1_hist_events_consistency_check+0x522>
 800c400:	1cd1      	adds	r1, r2, #3
 800c402:	6039      	str	r1, [r7, #0]
 800c404:	f143 0300 	adc.w	r3, r3, #0
 800c408:	607b      	str	r3, [r7, #4]
 800c40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40e:	f04f 0000 	mov.w	r0, #0
 800c412:	f04f 0100 	mov.w	r1, #0
 800c416:	0890      	lsrs	r0, r2, #2
 800c418:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c41c:	1099      	asrs	r1, r3, #2
 800c41e:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c426:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c428:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c42c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c42e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c432:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c434:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c438:	4413      	add	r3, r2
 800c43a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c43e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	4618      	mov	r0, r3
 800c446:	f002 f8c6 	bl	800e5d6 <VL53L1_isqrt>
 800c44a:	4603      	mov	r3, r0
 800c44c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c44e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c452:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c454:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c45e:	fb03 f202 	mul.w	r2, r3, r2
 800c462:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c466:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c468:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f103 0220 	add.w	r2, r3, #32
 800c472:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c476:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c478:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	da00      	bge.n	800c484 <VL53L1_hist_events_consistency_check+0x598>
 800c482:	333f      	adds	r3, #63	; 0x3f
 800c484:	119b      	asrs	r3, r3, #6
 800c486:	461a      	mov	r2, r3
 800c488:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c48c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a4:	1a9b      	subs	r3, r3, r2
 800c4a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c4aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	da08      	bge.n	800c4c8 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c4b6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4be:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c4c0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	e007      	b.n	800c4d8 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c4c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c4d0:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c4d2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4d6:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c4d8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	dd0b      	ble.n	800c500 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c4e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c4ec:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c4ee:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d204      	bcs.n	800c500 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c4f6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c4fa:	2214      	movs	r2, #20
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e003      	b.n	800c508 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c500:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c504:	2209      	movs	r2, #9
 800c506:	701a      	strb	r2, [r3, #0]





	return status;
 800c508:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c512:	46bd      	mov	sp, r7
 800c514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c518 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c526:	2300      	movs	r3, #0
 800c528:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c53a:	429a      	cmp	r2, r3
 800c53c:	dd0b      	ble.n	800c556 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c544:	b29a      	uxth	r2, r3
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	b29b      	uxth	r3, r3
		delta_mm =
 800c552:	82fb      	strh	r3, [r7, #22]
 800c554:	e00a      	b.n	800c56c <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c564:	b29b      	uxth	r3, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	b29b      	uxth	r3, r3
		delta_mm =
 800c56a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c56c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c570:	2b00      	cmp	r3, #0
 800c572:	dd09      	ble.n	800c588 <VL53L1_hist_merged_pulse_check+0x70>
 800c574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	dd03      	ble.n	800c588 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2216      	movs	r2, #22
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	e002      	b.n	800c58e <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2209      	movs	r2, #9
 800c58c:	701a      	strb	r2, [r3, #0]

	return status;
 800c58e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b08e      	sub	sp, #56	; 0x38
 800c5a2:	af04      	add	r7, sp, #16
 800c5a4:	60f8      	str	r0, [r7, #12]
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3318      	adds	r3, #24
 800c5b6:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c5c6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c5ce:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d009      	beq.n	800c5ee <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c5e0:	2b13      	cmp	r3, #19
 800c5e2:	d004      	beq.n	800c5ee <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c5ea:	2b14      	cmp	r3, #20
 800c5ec:	d129      	bne.n	800c642 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	d009      	beq.n	800c60c <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c5fe:	2b13      	cmp	r3, #19
 800c600:	d004      	beq.n	800c60c <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c608:	2b14      	cmp	r3, #20
 800c60a:	d11a      	bne.n	800c642 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2209      	movs	r2, #9
 800c610:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c61e:	8bb9      	ldrh	r1, [r7, #28]
 800c620:	7ff8      	ldrb	r0, [r7, #31]
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	f107 0318 	add.w	r3, r7, #24
 800c628:	9302      	str	r3, [sp, #8]
 800c62a:	f107 0314 	add.w	r3, r7, #20
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	4613      	mov	r3, r2
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	f7ff fc58 	bl	800beec <VL53L1_hist_events_consistency_check>
 800c63c:	4603      	mov	r3, r0
 800c63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c646:	4618      	mov	r0, r3
 800c648:	3728      	adds	r7, #40	; 0x28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b088      	sub	sp, #32
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c676:	2b00      	cmp	r3, #0
 800c678:	d019      	beq.n	800c6ae <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c680:	4618      	mov	r0, r3
 800c682:	f002 f90f 	bl	800e8a4 <VL53L1_calc_pll_period_mm>
 800c686:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	69ba      	ldr	r2, [r7, #24]
 800c696:	fb02 f303 	mul.w	r3, r2, r3
 800c69a:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c6a2:	0bdb      	lsrs	r3, r3, #15
 800c6a4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	b21a      	sxth	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c6ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c6ba:	b590      	push	{r4, r7, lr}
 800c6bc:	b08d      	sub	sp, #52	; 0x34
 800c6be:	af04      	add	r7, sp, #16
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	4608      	mov	r0, r1
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4623      	mov	r3, r4
 800c6ca:	80fb      	strh	r3, [r7, #6]
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	80bb      	strh	r3, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c6f8:	78b9      	ldrb	r1, [r7, #2]
 800c6fa:	78f8      	ldrb	r0, [r7, #3]
 800c6fc:	f107 030c 	add.w	r3, r7, #12
 800c700:	9303      	str	r3, [sp, #12]
 800c702:	f107 030e 	add.w	r3, r7, #14
 800c706:	9302      	str	r3, [sp, #8]
 800c708:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	23ff      	movs	r3, #255	; 0xff
 800c714:	22c7      	movs	r2, #199	; 0xc7
 800c716:	f000 fa03 	bl	800cb20 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c71a:	89fb      	ldrh	r3, [r7, #14]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d050      	beq.n	800c7c2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c720:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c722:	2b00      	cmp	r3, #0
 800c724:	d04d      	beq.n	800c7c2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c726:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c72a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c72e:	78b9      	ldrb	r1, [r7, #2]
 800c730:	78f8      	ldrb	r0, [r7, #3]
 800c732:	f107 0308 	add.w	r3, r7, #8
 800c736:	9303      	str	r3, [sp, #12]
 800c738:	f107 030a 	add.w	r3, r7, #10
 800c73c:	9302      	str	r3, [sp, #8]
 800c73e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c742:	9301      	str	r3, [sp, #4]
 800c744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	4623      	mov	r3, r4
 800c74a:	f000 f9e9 	bl	800cb20 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c752:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c754:	897b      	ldrh	r3, [r7, #10]
 800c756:	461a      	mov	r2, r3
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	fb02 f303 	mul.w	r3, r2, r3
 800c75e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	461a      	mov	r2, r3
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c770:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c772:	893b      	ldrh	r3, [r7, #8]
 800c774:	461a      	mov	r2, r3
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	fb02 f303 	mul.w	r3, r2, r3
 800c77c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c77e:	89bb      	ldrh	r3, [r7, #12]
 800c780:	461a      	mov	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	fbb3 f3f2 	udiv	r3, r3, r2
 800c788:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c78a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	fb02 f303 	mul.w	r3, r2, r3
 800c794:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c796:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c7a6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c7a8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c7aa:	4413      	add	r3, r2
 800c7ac:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d008      	beq.n	800c7c6 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	009a      	lsls	r2, r3, #2
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	fb92 f3f3 	sdiv	r3, r2, r3
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	e002      	b.n	800c7c8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c7c2:	bf00      	nop
 800c7c4:	e000      	b.n	800c7c8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c7c6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	b21a      	sxth	r2, r3
 800c7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ce:	801a      	strh	r2, [r3, #0]

}
 800c7d0:	bf00      	nop
 800c7d2:	3724      	adds	r7, #36	; 0x24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd90      	pop	{r4, r7, pc}

0800c7d8 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	603b      	str	r3, [r7, #0]
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	08db      	lsrs	r3, r3, #3
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	f003 0307 	and.w	r3, r3, #7
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	2301      	movs	r3, #1
 800c806:	4093      	lsls	r3, r2
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	701a      	strb	r2, [r3, #0]

}
 800c80e:	bf00      	nop
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b083      	sub	sp, #12
 800c81e:	af00      	add	r7, sp, #0
 800c820:	4603      	mov	r3, r0
 800c822:	603a      	str	r2, [r7, #0]
 800c824:	71fb      	strb	r3, [r7, #7]
 800c826:	460b      	mov	r3, r1
 800c828:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b07      	cmp	r3, #7
 800c82e:	d90a      	bls.n	800c846 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c830:	79bb      	ldrb	r3, [r7, #6]
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	b2da      	uxtb	r2, r3
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	3b71      	subs	r3, #113	; 0x71
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c844:	e00a      	b.n	800c85c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c846:	79bb      	ldrb	r3, [r7, #6]
 800c848:	f1c3 030f 	rsb	r3, r3, #15
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	b2da      	uxtb	r2, r3
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	4413      	add	r3, r2
 800c856:	b2da      	uxtb	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	701a      	strb	r2, [r3, #0]
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	091b      	lsrs	r3, r3, #4
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	b2da      	uxtb	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	701a      	strb	r2, [r3, #0]

}
 800c88c:	bf00      	nop
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	603a      	str	r2, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800c8a8:	79bb      	ldrb	r3, [r7, #6]
 800c8aa:	011b      	lsls	r3, r3, #4
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	701a      	strb	r2, [r3, #0]

}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60ba      	str	r2, [r7, #8]
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800c8e6:	f107 0217 	add.w	r2, r7, #23
 800c8ea:	f107 0116 	add.w	r1, r7, #22
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f002 fa51 	bl	800ed98 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800c8f6:	f107 0214 	add.w	r2, r7, #20
 800c8fa:	f107 0115 	add.w	r1, r7, #21
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff ffb1 	bl	800c868 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	b29a      	uxth	r2, r3
 800c90a:	7d7b      	ldrb	r3, [r7, #21]
 800c90c:	3301      	adds	r3, #1
 800c90e:	0fd9      	lsrs	r1, r3, #31
 800c910:	440b      	add	r3, r1
 800c912:	105b      	asrs	r3, r3, #1
 800c914:	425b      	negs	r3, r3
 800c916:	b29b      	uxth	r3, r3
 800c918:	4413      	add	r3, r2
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	b21a      	sxth	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	da02      	bge.n	800c932 <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2200      	movs	r2, #0
 800c930:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c938:	b29a      	uxth	r2, r3
 800c93a:	7d7b      	ldrb	r3, [r7, #21]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	4413      	add	r3, r2
 800c940:	b29b      	uxth	r3, r3
 800c942:	b21a      	sxth	r2, r3
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c94e:	2b0f      	cmp	r3, #15
 800c950:	dd02      	ble.n	800c958 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	220f      	movs	r2, #15
 800c956:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800c958:	7dbb      	ldrb	r3, [r7, #22]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	7d3b      	ldrb	r3, [r7, #20]
 800c95e:	3301      	adds	r3, #1
 800c960:	0fd9      	lsrs	r1, r3, #31
 800c962:	440b      	add	r3, r1
 800c964:	105b      	asrs	r3, r3, #1
 800c966:	425b      	negs	r3, r3
 800c968:	b29b      	uxth	r3, r3
 800c96a:	4413      	add	r3, r2
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b21a      	sxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	da02      	bge.n	800c984 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	7d3b      	ldrb	r3, [r7, #20]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	4413      	add	r3, r2
 800c992:	b29b      	uxth	r3, r3
 800c994:	b21a      	sxth	r2, r3
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9a0:	2b0f      	cmp	r3, #15
 800c9a2:	dd02      	ble.n	800c9aa <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	220f      	movs	r2, #15
 800c9a8:	801a      	strh	r2, [r3, #0]
}
 800c9aa:	bf00      	nop
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	71fb      	strb	r3, [r7, #7]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800c9ce:	79bb      	ldrb	r3, [r7, #6]
 800c9d0:	f003 0303 	and.w	r3, r3, #3
 800c9d4:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d104      	bne.n	800c9e6 <VL53L1_is_aperture_location+0x34>
 800c9dc:	7b7b      	ldrb	r3, [r7, #13]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d101      	bne.n	800c9e6 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d104      	bne.n	800c9f6 <VL53L1_is_aperture_location+0x44>
 800c9ec:	7b7b      	ldrb	r3, [r7, #13]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800ca04:	b590      	push	{r4, r7, lr}
 800ca06:	b08b      	sub	sp, #44	; 0x2c
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	603a      	str	r2, [r7, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	4603      	mov	r3, r0
 800ca10:	71fb      	strb	r3, [r7, #7]
 800ca12:	460b      	mov	r3, r1
 800ca14:	71bb      	strb	r3, [r7, #6]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800ca46:	f107 0416 	add.w	r4, r7, #22
 800ca4a:	f107 0218 	add.w	r2, r7, #24
 800ca4e:	79b9      	ldrb	r1, [r7, #6]
 800ca50:	79f8      	ldrb	r0, [r7, #7]
 800ca52:	f107 0312 	add.w	r3, r7, #18
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	f107 0314 	add.w	r3, r7, #20
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	4623      	mov	r3, r4
 800ca60:	f7ff ff30 	bl	800c8c4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	2200      	movs	r2, #0
 800ca68:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ca6a:	8afb      	ldrh	r3, [r7, #22]
 800ca6c:	83bb      	strh	r3, [r7, #28]
 800ca6e:	e04c      	b.n	800cb0a <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ca70:	8b3b      	ldrh	r3, [r7, #24]
 800ca72:	83fb      	strh	r3, [r7, #30]
 800ca74:	e03d      	b.n	800caf2 <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800ca76:	8bbb      	ldrh	r3, [r7, #28]
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	8bfa      	ldrh	r2, [r7, #30]
 800ca7c:	b2d1      	uxtb	r1, r2
 800ca7e:	f107 0211 	add.w	r2, r7, #17
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fec9 	bl	800c81a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ca88:	7c78      	ldrb	r0, [r7, #17]
 800ca8a:	f107 030e 	add.w	r3, r7, #14
 800ca8e:	f107 020f 	add.w	r2, r7, #15
 800ca92:	f107 0110 	add.w	r1, r7, #16
 800ca96:	f7ff fe9f 	bl	800c7d8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ca9a:	7c3b      	ldrb	r3, [r7, #16]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	4413      	add	r3, r2
 800caa2:	781a      	ldrb	r2, [r3, #0]
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	4013      	ands	r3, r2
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d01b      	beq.n	800cae6 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800caae:	8bbb      	ldrh	r3, [r7, #28]
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	8bfa      	ldrh	r2, [r7, #30]
 800cab4:	b2d2      	uxtb	r2, r2
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff ff7a 	bl	800c9b2 <VL53L1_is_aperture_location>
 800cabe:	4603      	mov	r3, r0
 800cac0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cac2:	7efb      	ldrb	r3, [r7, #27]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d007      	beq.n	800cad8 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	881a      	ldrh	r2, [r3, #0]
 800cacc:	88bb      	ldrh	r3, [r7, #4]
 800cace:	4413      	add	r3, r2
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	e006      	b.n	800cae6 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cae6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800caea:	b29b      	uxth	r3, r3
 800caec:	3301      	adds	r3, #1
 800caee:	b29b      	uxth	r3, r3
 800caf0:	83fb      	strh	r3, [r7, #30]
 800caf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800caf6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	ddbb      	ble.n	800ca76 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cafe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	3301      	adds	r3, #1
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	83bb      	strh	r3, [r7, #28]
 800cb0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb0e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	ddac      	ble.n	800ca70 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800cb16:	bf00      	nop
 800cb18:	bf00      	nop
 800cb1a:	3724      	adds	r7, #36	; 0x24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd90      	pop	{r4, r7, pc}

0800cb20 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800cb20:	b590      	push	{r4, r7, lr}
 800cb22:	b08d      	sub	sp, #52	; 0x34
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	4604      	mov	r4, r0
 800cb28:	4608      	mov	r0, r1
 800cb2a:	4611      	mov	r1, r2
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	4623      	mov	r3, r4
 800cb30:	71fb      	strb	r3, [r7, #7]
 800cb32:	4603      	mov	r3, r0
 800cb34:	71bb      	strb	r3, [r7, #6]
 800cb36:	460b      	mov	r3, r1
 800cb38:	717b      	strb	r3, [r7, #5]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800cb80:	f107 041c 	add.w	r4, r7, #28
 800cb84:	f107 021e 	add.w	r2, r7, #30
 800cb88:	79b9      	ldrb	r1, [r7, #6]
 800cb8a:	79f8      	ldrb	r0, [r7, #7]
 800cb8c:	f107 0318 	add.w	r3, r7, #24
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	f107 031a 	add.w	r3, r7, #26
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	4623      	mov	r3, r4
 800cb9a:	f7ff fe93 	bl	800c8c4 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800cb9e:	f107 0414 	add.w	r4, r7, #20
 800cba2:	f107 0216 	add.w	r2, r7, #22
 800cba6:	7939      	ldrb	r1, [r7, #4]
 800cba8:	7978      	ldrb	r0, [r7, #5]
 800cbaa:	f107 0310 	add.w	r3, r7, #16
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	f107 0312 	add.w	r3, r7, #18
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4623      	mov	r3, r4
 800cbb8:	f7ff fe84 	bl	800c8c4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800cbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800cbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cbc8:	8abb      	ldrh	r3, [r7, #20]
 800cbca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cbcc:	e06c      	b.n	800cca8 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cbce:	8afb      	ldrh	r3, [r7, #22]
 800cbd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cbd2:	e05d      	b.n	800cc90 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800cbd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbda:	b2d1      	uxtb	r1, r2
 800cbdc:	f107 020f 	add.w	r2, r7, #15
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff fe1a 	bl	800c81a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cbe6:	7bf8      	ldrb	r0, [r7, #15]
 800cbe8:	f107 030c 	add.w	r3, r7, #12
 800cbec:	f107 020d 	add.w	r2, r7, #13
 800cbf0:	f107 010e 	add.w	r1, r7, #14
 800cbf4:	f7ff fdf0 	bl	800c7d8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	4413      	add	r3, r2
 800cc00:	781a      	ldrb	r2, [r3, #0]
 800cc02:	7b3b      	ldrb	r3, [r7, #12]
 800cc04:	4013      	ands	r3, r2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d03b      	beq.n	800cc84 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cc0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc12:	b2d2      	uxtb	r2, r2
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fecb 	bl	800c9b2 <VL53L1_is_aperture_location>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cc22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d002      	beq.n	800cc30 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cc2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc2c:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc2e:	e002      	b.n	800cc36 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cc30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc34:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cc36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	db19      	blt.n	800cc76 <VL53L1_calc_mm_effective_spads+0x156>
 800cc42:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cc46:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	dc13      	bgt.n	800cc76 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cc4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cc52:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cc56:	429a      	cmp	r2, r3
 800cc58:	db0d      	blt.n	800cc76 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cc5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cc5e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cc62:	429a      	cmp	r2, r3
 800cc64:	dc07      	bgt.n	800cc76 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc68:	881a      	ldrh	r2, [r3, #0]
 800cc6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc72:	801a      	strh	r2, [r3, #0]
 800cc74:	e006      	b.n	800cc84 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cc76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc78:	881a      	ldrh	r2, [r3, #0]
 800cc7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc7c:	4413      	add	r3, r2
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc82:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cc84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	dd9b      	ble.n	800cbd4 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cc9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3301      	adds	r3, #1
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cca8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ccac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	dd8c      	ble.n	800cbce <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	372c      	adds	r7, #44	; 0x2c
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd90      	pop	{r4, r7, pc}

0800ccbe <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b086      	sub	sp, #24
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	60f8      	str	r0, [r7, #12]
 800ccc6:	60b9      	str	r1, [r7, #8]
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7fd ff6d 	bl	800abb0 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	7c9a      	ldrb	r2, [r3, #18]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	3314      	adds	r3, #20
 800cd00:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800cd02:	2300      	movs	r3, #0
 800cd04:	75fb      	strb	r3, [r7, #23]
 800cd06:	e06b      	b.n	800cde0 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d034      	beq.n	800cd7c <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800cd12:	e05f      	b.n	800cdd4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cd4c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	8a9a      	ldrh	r2, [r3, #20]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	601a      	str	r2, [r3, #0]

			break;
 800cd7a:	e02b      	b.n	800cdd4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cdac:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	611a      	str	r2, [r3, #16]
			break;
 800cdd2:	bf00      	nop
		}

		pdata++;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	334c      	adds	r3, #76	; 0x4c
 800cdd8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	3301      	adds	r3, #1
 800cdde:	75fb      	strb	r3, [r7, #23]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	7c9b      	ldrb	r3, [r3, #18]
 800cde4:	7dfa      	ldrb	r2, [r7, #23]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d38e      	bcc.n	800cd08 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800cdea:	bf00      	nop
 800cdec:	bf00      	nop
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b089      	sub	sp, #36	; 0x24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3318      	adds	r3, #24
 800ce04:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800ce16:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ce1e:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	3302      	adds	r3, #2
 800ce32:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800ce58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3724      	adds	r7, #36	; 0x24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b08b      	sub	sp, #44	; 0x2c
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3318      	adds	r3, #24
 800ce7a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ce82:	3308      	adds	r3, #8
 800ce84:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ce8c:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce94:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800ce9c:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800ce9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cea2:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800cea4:	7bfa      	ldrb	r2, [r7, #15]
 800cea6:	6939      	ldr	r1, [r7, #16]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	440b      	add	r3, r1
 800ceb2:	3306      	adds	r3, #6
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cebe:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cec6:	e01a      	b.n	800cefe <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800cec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	214c      	movs	r1, #76	; 0x4c
 800ced0:	fb01 f303 	mul.w	r3, r1, r3
 800ced4:	4413      	add	r3, r2
 800ced6:	334a      	adds	r3, #74	; 0x4a
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cedc:	429a      	cmp	r2, r3
 800cede:	d209      	bcs.n	800cef4 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800cee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800cee4:	683a      	ldr	r2, [r7, #0]
 800cee6:	214c      	movs	r1, #76	; 0x4c
 800cee8:	fb01 f303 	mul.w	r3, r1, r3
 800ceec:	4413      	add	r3, r2
 800ceee:	334a      	adds	r3, #74	; 0x4a
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800cef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef8:	3301      	adds	r3, #1
 800cefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	7c9b      	ldrb	r3, [r3, #18]
 800cf02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d3de      	bcc.n	800cec8 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800cf0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800cf10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf14:	623b      	str	r3, [r7, #32]
 800cf16:	e00e      	b.n	800cf36 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800cf18:	89bb      	ldrh	r3, [r7, #12]
 800cf1a:	039b      	lsls	r3, r3, #14
 800cf1c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800cf1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf20:	6a3a      	ldr	r2, [r7, #32]
 800cf22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf26:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf2e:	d302      	bcc.n	800cf36 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800cf30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf34:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cf36:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cf3c:	6939      	ldr	r1, [r7, #16]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	440b      	add	r3, r1
 800cf48:	3306      	adds	r3, #6
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800cf4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	372c      	adds	r7, #44	; 0x2c
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b08a      	sub	sp, #40	; 0x28
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf66:	2300      	movs	r3, #0
 800cf68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3318      	adds	r3, #24
 800cf70:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	332c      	adds	r3, #44	; 0x2c
 800cf76:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800cf78:	6a3b      	ldr	r3, [r7, #32]
 800cf7a:	33c2      	adds	r3, #194	; 0xc2
 800cf7c:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800cf84:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	3302      	adds	r3, #2
 800cf8a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	785b      	ldrb	r3, [r3, #1]
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d11e      	bne.n	800cfe8 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10b      	bne.n	800cfc8 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d05d      	beq.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	719a      	strb	r2, [r3, #6]
 800cfe6:	e050      	b.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cfee:	461a      	mov	r2, r3
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	4413      	add	r3, r2
 800cff4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d11e      	bne.n	800d03a <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d034      	beq.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	719a      	strb	r2, [r3, #6]
 800d038:	e027      	b.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d040:	461a      	mov	r2, r3
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	4413      	add	r3, r2
 800d046:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d11d      	bne.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10b      	bne.n	800d06c <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00b      	beq.n	800d08a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d08a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d109      	bne.n	800d0a6 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6978      	ldr	r0, [r7, #20]
 800d0a2:	f7fd f921 	bl	800a2e8 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3728      	adds	r7, #40	; 0x28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b089      	sub	sp, #36	; 0x24
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
 800d0be:	460b      	mov	r3, r1
 800d0c0:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3318      	adds	r3, #24
 800d0ca:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d0d2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d103      	bne.n	800d0e2 <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7afa      	ldrb	r2, [r7, #11]
 800d0de:	701a      	strb	r2, [r3, #0]
 800d0e0:	e01e      	b.n	800d120 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d111      	bne.n	800d114 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2bff      	cmp	r3, #255	; 0xff
 800d0f6:	d103      	bne.n	800d100 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2280      	movs	r2, #128	; 0x80
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	e005      	b.n	800d10c <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	e005      	b.n	800d120 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d120:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3724      	adds	r7, #36	; 0x24
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d146:	2b01      	cmp	r3, #1
 800d148:	d118      	bne.n	800d17c <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	719a      	strb	r2, [r3, #6]
 800d17a:	e03a      	b.n	800d1f2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d182:	2b02      	cmp	r3, #2
 800d184:	d118      	bne.n	800d1b8 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	719a      	strb	r2, [r3, #6]
 800d1b6:	e01c      	b.n	800d1f2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d117      	bne.n	800d1f2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b08a      	sub	sp, #40	; 0x28
 800d206:	af00      	add	r7, sp, #0
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	461a      	mov	r2, r3
 800d20e:	460b      	mov	r3, r1
 800d210:	72fb      	strb	r3, [r7, #11]
 800d212:	4613      	mov	r3, r2
 800d214:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d216:	2300      	movs	r3, #0
 800d218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3318      	adds	r3, #24
 800d220:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d22a:	7afa      	ldrb	r2, [r7, #11]
 800d22c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe f8ca 	bl	800b3ca <VL53L1_calc_macro_period_us>
 800d236:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d101      	bne.n	800d242 <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d23e:	2301      	movs	r3, #1
 800d240:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	031b      	lsls	r3, r3, #12
 800d246:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	085b      	lsrs	r3, r3, #1
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	4413      	add	r3, r2
 800d250:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d252:	69ba      	ldr	r2, [r7, #24]
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	2bff      	cmp	r3, #255	; 0xff
 800d260:	d904      	bls.n	800d26c <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	22ff      	movs	r2, #255	; 0xff
 800d266:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d26a:	e004      	b.n	800d276 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	7afa      	ldrb	r2, [r7, #11]
 800d27a:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d27e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d28c:	461a      	mov	r2, r3
 800d28e:	214b      	movs	r1, #75	; 0x4b
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f007 f9bd 	bl	8014610 <VL53L1_WrByte>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10a      	bne.n	800d2ba <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	2160      	movs	r1, #96	; 0x60
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f007 f9ae 	bl	8014610 <VL53L1_WrByte>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2c0:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2c8:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d2ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d2d2:	f107 0214 	add.w	r2, r7, #20
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	2178      	movs	r1, #120	; 0x78
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f007 f92c 	bl	8014538 <VL53L1_WriteMulti>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	893a      	ldrh	r2, [r7, #8]
 800d2ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d2ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d108      	bne.n	800d308 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d2f6:	893b      	ldrh	r3, [r7, #8]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	211c      	movs	r1, #28
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f007 f9b1 	bl	8014664 <VL53L1_WrWord>
 800d302:	4603      	mov	r3, r0
 800d304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d108      	bne.n	800d322 <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d310:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d312:	461a      	mov	r2, r3
 800d314:	2164      	movs	r1, #100	; 0x64
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f007 f9a4 	bl	8014664 <VL53L1_WrWord>
 800d31c:	4603      	mov	r3, r0
 800d31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d326:	2b00      	cmp	r3, #0
 800d328:	d108      	bne.n	800d33c <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d32a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d32c:	461a      	mov	r2, r3
 800d32e:	2166      	movs	r1, #102	; 0x66
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f007 f997 	bl	8014664 <VL53L1_WrWord>
 800d336:	4603      	mov	r3, r0
 800d338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d340:	4618      	mov	r0, r3
 800d342:	3728      	adds	r7, #40	; 0x28
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d34c:	b0a2      	sub	sp, #136	; 0x88
 800d34e:	af00      	add	r7, sp, #0
 800d350:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d352:	2300      	movs	r3, #0
 800d354:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d35a:	3318      	adds	r3, #24
 800d35c:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d360:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d364:	3308      	adds	r3, #8
 800d366:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d36a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d36e:	3318      	adds	r3, #24
 800d370:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d374:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d378:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d37c:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d380:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d384:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d38e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d392:	2b00      	cmp	r3, #0
 800d394:	d103      	bne.n	800d39e <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d39a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d39e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d3a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d3a6:	4413      	add	r3, r2
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	461c      	mov	r4, r3
 800d3ac:	4615      	mov	r5, r2
 800d3ae:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d3b2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	462b      	mov	r3, r5
 800d3ba:	f04f 0000 	mov.w	r0, #0
 800d3be:	f04f 0100 	mov.w	r1, #0
 800d3c2:	0159      	lsls	r1, r3, #5
 800d3c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d3c8:	0150      	lsls	r0, r2, #5
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	ebb2 0804 	subs.w	r8, r2, r4
 800d3d2:	eb63 0905 	sbc.w	r9, r3, r5
 800d3d6:	f04f 0200 	mov.w	r2, #0
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d3e2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d3e6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d3ea:	4690      	mov	r8, r2
 800d3ec:	4699      	mov	r9, r3
 800d3ee:	eb18 0304 	adds.w	r3, r8, r4
 800d3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d3f4:	eb49 0305 	adc.w	r3, r9, r5
 800d3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fa:	f04f 0200 	mov.w	r2, #0
 800d3fe:	f04f 0300 	mov.w	r3, #0
 800d402:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d406:	4629      	mov	r1, r5
 800d408:	00cb      	lsls	r3, r1, #3
 800d40a:	4621      	mov	r1, r4
 800d40c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d410:	4621      	mov	r1, r4
 800d412:	00ca      	lsls	r2, r1, #3
 800d414:	4610      	mov	r0, r2
 800d416:	4619      	mov	r1, r3
 800d418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d41c:	2200      	movs	r2, #0
 800d41e:	643b      	str	r3, [r7, #64]	; 0x40
 800d420:	647a      	str	r2, [r7, #68]	; 0x44
 800d422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d426:	f7f2 ff4b 	bl	80002c0 <__aeabi_uldivmod>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d432:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d436:	4622      	mov	r2, r4
 800d438:	462b      	mov	r3, r5
 800d43a:	f04f 0000 	mov.w	r0, #0
 800d43e:	f04f 0100 	mov.w	r1, #0
 800d442:	0159      	lsls	r1, r3, #5
 800d444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d448:	0150      	lsls	r0, r2, #5
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	ebb2 0a04 	subs.w	sl, r2, r4
 800d452:	eb63 0b05 	sbc.w	fp, r3, r5
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d462:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d466:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d46a:	4692      	mov	sl, r2
 800d46c:	469b      	mov	fp, r3
 800d46e:	eb1a 0304 	adds.w	r3, sl, r4
 800d472:	62bb      	str	r3, [r7, #40]	; 0x28
 800d474:	eb4b 0305 	adc.w	r3, fp, r5
 800d478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d47a:	f04f 0200 	mov.w	r2, #0
 800d47e:	f04f 0300 	mov.w	r3, #0
 800d482:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d486:	4629      	mov	r1, r5
 800d488:	00cb      	lsls	r3, r1, #3
 800d48a:	4621      	mov	r1, r4
 800d48c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d490:	4621      	mov	r1, r4
 800d492:	00ca      	lsls	r2, r1, #3
 800d494:	4610      	mov	r0, r2
 800d496:	4619      	mov	r1, r3
 800d498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d49c:	2200      	movs	r2, #0
 800d49e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d4a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4a6:	f7f2 ff0b 	bl	80002c0 <__aeabi_uldivmod>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d4b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4b8:	8ad2      	ldrh	r2, [r2, #22]
 800d4ba:	fb02 f303 	mul.w	r3, r2, r3
 800d4be:	2200      	movs	r2, #0
 800d4c0:	623b      	str	r3, [r7, #32]
 800d4c2:	627a      	str	r2, [r7, #36]	; 0x24
 800d4c4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d4c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d4cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	d105      	bne.n	800d4e0 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d4d4:	f04f 0201 	mov.w	r2, #1
 800d4d8:	f04f 0300 	mov.w	r3, #0
 800d4dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d4e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	f04f 0400 	mov.w	r4, #0
 800d4ec:	f04f 0500 	mov.w	r5, #0
 800d4f0:	015d      	lsls	r5, r3, #5
 800d4f2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d4f6:	0154      	lsls	r4, r2, #5
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	462b      	mov	r3, r5
 800d4fc:	1a14      	subs	r4, r2, r0
 800d4fe:	61bc      	str	r4, [r7, #24]
 800d500:	eb63 0301 	sbc.w	r3, r3, r1
 800d504:	61fb      	str	r3, [r7, #28]
 800d506:	f04f 0200 	mov.w	r2, #0
 800d50a:	f04f 0300 	mov.w	r3, #0
 800d50e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d512:	464c      	mov	r4, r9
 800d514:	00a3      	lsls	r3, r4, #2
 800d516:	4644      	mov	r4, r8
 800d518:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d51c:	4644      	mov	r4, r8
 800d51e:	00a2      	lsls	r2, r4, #2
 800d520:	4614      	mov	r4, r2
 800d522:	461d      	mov	r5, r3
 800d524:	4623      	mov	r3, r4
 800d526:	181b      	adds	r3, r3, r0
 800d528:	613b      	str	r3, [r7, #16]
 800d52a:	462b      	mov	r3, r5
 800d52c:	eb41 0303 	adc.w	r3, r1, r3
 800d530:	617b      	str	r3, [r7, #20]
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	f04f 0300 	mov.w	r3, #0
 800d53a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d53e:	4629      	mov	r1, r5
 800d540:	02cb      	lsls	r3, r1, #11
 800d542:	4621      	mov	r1, r4
 800d544:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d548:	4621      	mov	r1, r4
 800d54a:	02ca      	lsls	r2, r1, #11
 800d54c:	461c      	mov	r4, r3
 800d54e:	4613      	mov	r3, r2
 800d550:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d554:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d558:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d55c:	f7f2 feb0 	bl	80002c0 <__aeabi_uldivmod>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d568:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	f04f 0400 	mov.w	r4, #0
 800d574:	f04f 0500 	mov.w	r5, #0
 800d578:	015d      	lsls	r5, r3, #5
 800d57a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d57e:	0154      	lsls	r4, r2, #5
 800d580:	4622      	mov	r2, r4
 800d582:	462b      	mov	r3, r5
 800d584:	1a14      	subs	r4, r2, r0
 800d586:	60bc      	str	r4, [r7, #8]
 800d588:	eb63 0301 	sbc.w	r3, r3, r1
 800d58c:	60fb      	str	r3, [r7, #12]
 800d58e:	f04f 0200 	mov.w	r2, #0
 800d592:	f04f 0300 	mov.w	r3, #0
 800d596:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d59a:	464c      	mov	r4, r9
 800d59c:	00a3      	lsls	r3, r4, #2
 800d59e:	4644      	mov	r4, r8
 800d5a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d5a4:	4644      	mov	r4, r8
 800d5a6:	00a2      	lsls	r2, r4, #2
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	461d      	mov	r5, r3
 800d5ac:	4623      	mov	r3, r4
 800d5ae:	181b      	adds	r3, r3, r0
 800d5b0:	603b      	str	r3, [r7, #0]
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	eb41 0303 	adc.w	r3, r1, r3
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	f04f 0200 	mov.w	r2, #0
 800d5be:	f04f 0300 	mov.w	r3, #0
 800d5c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	02cb      	lsls	r3, r1, #11
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	02ca      	lsls	r2, r1, #11
 800d5d4:	461c      	mov	r4, r3
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d5dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d5e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5e4:	f7f2 fe6c 	bl	80002c0 <__aeabi_uldivmod>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d5f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5f4:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d5f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d802      	bhi.n	800d604 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d5fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d600:	2202      	movs	r2, #2
 800d602:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d604:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3788      	adds	r7, #136	; 0x88
 800d60c:	46bd      	mov	sp, r7
 800d60e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d614 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b096      	sub	sp, #88	; 0x58
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d622:	2300      	movs	r3, #0
 800d624:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	3318      	adds	r3, #24
 800d62c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d630:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d634:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d638:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d640:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d644:	2b01      	cmp	r3, #1
 800d646:	d108      	bne.n	800d65a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d64e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d652:	2b01      	cmp	r3, #1
 800d654:	d101      	bne.n	800d65a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d656:	2301      	movs	r3, #1
 800d658:	e000      	b.n	800d65c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d65a:	2300      	movs	r3, #0
 800d65c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d660:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d664:	2b01      	cmp	r3, #1
 800d666:	d107      	bne.n	800d678 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	889b      	ldrh	r3, [r3, #4]
 800d66c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	609a      	str	r2, [r3, #8]
 800d676:	e002      	b.n	800d67e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	899b      	ldrh	r3, [r3, #12]
 800d688:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	89db      	ldrh	r3, [r3, #14]
 800d690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d004      	beq.n	800d6a8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d125      	bne.n	800d6f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d021      	beq.n	800d6f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d6b0:	f107 0313 	add.w	r3, r7, #19
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 fe44 	bl	800e344 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d6bc:	7cfb      	ldrb	r3, [r7, #19]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d6c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d103      	bne.n	800d6d6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	653b      	str	r3, [r7, #80]	; 0x50
 800d6d4:	e006      	b.n	800d6e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d6d6:	7cfb      	ldrb	r3, [r7, #19]
 800d6d8:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	3202      	adds	r2, #2
 800d6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e2:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	889b      	ldrh	r3, [r3, #4]
 800d6e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	88db      	ldrh	r3, [r3, #6]
 800d6f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10a      	bne.n	800d714 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d6fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	795b      	ldrb	r3, [r3, #5]
 800d70a:	f043 0301 	orr.w	r3, r3, #1
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d71e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d722:	2b00      	cmp	r3, #0
 800d724:	d106      	bne.n	800d734 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	795b      	ldrb	r3, [r3, #5]
 800d72a:	f043 0302 	orr.w	r3, r3, #2
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d73a:	2301      	movs	r3, #1
 800d73c:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d744:	2b01      	cmp	r3, #1
 800d746:	d108      	bne.n	800d75a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d754:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d758:	e019      	b.n	800d78e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d75a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d75e:	019b      	lsls	r3, r3, #6
 800d760:	461a      	mov	r2, r3
 800d762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d764:	fbb2 f3f3 	udiv	r3, r2, r3
 800d768:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d772:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d774:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d778:	019b      	lsls	r3, r3, #6
 800d77a:	461a      	mov	r2, r3
 800d77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d782:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d78c:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d794:	2b00      	cmp	r3, #0
 800d796:	d12a      	bne.n	800d7ee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d7a0:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d7a4:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a8:	119b      	asrs	r3, r3, #6
 800d7aa:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7b2:	db02      	blt.n	800d7ba <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d7b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7b8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7bc:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d7ca:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d7ce:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d7d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d2:	119b      	asrs	r3, r3, #6
 800d7d4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7dc:	db02      	blt.n	800d7e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d7de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7e2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	81da      	strh	r2, [r3, #14]
 800d7ec:	e042      	b.n	800d874 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d13d      	bne.n	800d874 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d7fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d804:	2b00      	cmp	r3, #0
 800d806:	da00      	bge.n	800d80a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d808:	330f      	adds	r3, #15
 800d80a:	111b      	asrs	r3, r3, #4
 800d80c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d814:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d81a:	4413      	add	r3, r2
 800d81c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d824:	db02      	blt.n	800d82c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d82a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d82e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d840:	4a51      	ldr	r2, [pc, #324]	; (800d988 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d842:	fb82 1203 	smull	r1, r2, r2, r3
 800d846:	1152      	asrs	r2, r2, #5
 800d848:	17db      	asrs	r3, r3, #31
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d854:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d85a:	4413      	add	r3, r2
 800d85c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d864:	db02      	blt.n	800d86c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d86a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	785b      	ldrb	r3, [r3, #1]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d177      	bne.n	800d96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800d87c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d880:	2b01      	cmp	r3, #1
 800d882:	d073      	beq.n	800d96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2201      	movs	r2, #1
 800d888:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d890:	f107 0313 	add.w	r3, r7, #19
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 fd54 	bl	800e344 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800d89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d89e:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800d8a2:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800d8aa:	7cfb      	ldrb	r3, [r7, #19]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d041      	beq.n	800d934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d8b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d03d      	beq.n	800d934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d03a      	beq.n	800d934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8ca:	fb03 f202 	mul.w	r2, r3, r2
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d4:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d004      	beq.n	800d8e6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800d8e0:	69ba      	ldr	r2, [r7, #24]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d303      	bcc.n	800d8ee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	719a      	strb	r2, [r3, #6]
 800d8ec:	e022      	b.n	800d934 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800d8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f6:	617b      	str	r3, [r7, #20]
				cval = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d902:	e00e      	b.n	800d922 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800d904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	4413      	add	r3, r2
 800d90a:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800d90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d90e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d910:	601a      	str	r2, [r3, #0]
					pcpo++;
 800d912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d914:	3304      	adds	r3, #4
 800d916:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800d918:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d91c:	3301      	adds	r3, #1
 800d91e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d922:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	3b01      	subs	r3, #1
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d3ea      	bcc.n	800d904 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800d92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d932:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	799b      	ldrb	r3, [r3, #6]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d017      	beq.n	800d96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	789b      	ldrb	r3, [r3, #2]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d105      	bne.n	800d96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800d96c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d970:	2b01      	cmp	r3, #1
 800d972:	d002      	beq.n	800d97a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2201      	movs	r2, #1
 800d978:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d97a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3758      	adds	r7, #88	; 0x58
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	66666667 	.word	0x66666667

0800d98c <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800d98c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d990:	b0a2      	sub	sp, #136	; 0x88
 800d992:	af02      	add	r7, sp, #8
 800d994:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d996:	2300      	movs	r3, #0
 800d998:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99e:	3318      	adds	r3, #24
 800d9a0:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800d9ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9ae:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d9b2:	3318      	adds	r3, #24
 800d9b4:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d9b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9b8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800d9be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d9c4:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800d9c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9c8:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d9ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9cc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d9d0:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800d9ee:	f04f 0200 	mov.w	r2, #0
 800d9f2:	f04f 0300 	mov.w	r3, #0
 800d9f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800da08:	2300      	movs	r3, #0
 800da0a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800da1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da1e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800da22:	2b01      	cmp	r3, #1
 800da24:	d108      	bne.n	800da38 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800da2c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800da30:	2b01      	cmp	r3, #1
 800da32:	d101      	bne.n	800da38 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800da38:	2300      	movs	r3, #0
 800da3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800da3e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800da42:	4619      	mov	r1, r3
 800da44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da46:	f000 fc7d 	bl	800e344 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800da4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800da52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da56:	2b00      	cmp	r3, #0
 800da58:	d102      	bne.n	800da60 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800da5a:	2301      	movs	r3, #1
 800da5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800da60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800da62:	f000 fb15 	bl	800e090 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800da66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00a      	beq.n	800da84 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800da6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da76:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800da7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da7c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800da80:	429a      	cmp	r2, r3
 800da82:	d901      	bls.n	800da88 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800da8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da92:	2b00      	cmp	r3, #0
 800da94:	d006      	beq.n	800daa4 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800da96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da98:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800da9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d101      	bne.n	800daa8 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800daa4:	2301      	movs	r3, #1
 800daa6:	e000      	b.n	800daaa <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800daa8:	2300      	movs	r3, #0
 800daaa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800daae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dab0:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d10e      	bne.n	800dad4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dab6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800dabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac0:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d105      	bne.n	800dad4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dac8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e000      	b.n	800dad6 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dad4:	2300      	movs	r3, #0
	run_smudge_detection =
 800dad6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dadc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800dae0:	2b09      	cmp	r3, #9
 800dae2:	f000 80a6 	beq.w	800dc32 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800dae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dae8:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800daea:	2b01      	cmp	r3, #1
 800daec:	f040 80a1 	bne.w	800dc32 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800daf0:	2302      	movs	r3, #2
 800daf2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800daf6:	2300      	movs	r3, #0
 800daf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dafc:	e02d      	b.n	800db5a <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800dafe:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800db02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db04:	234c      	movs	r3, #76	; 0x4c
 800db06:	fb01 f303 	mul.w	r3, r1, r3
 800db0a:	4413      	add	r3, r2
 800db0c:	335e      	adds	r3, #94	; 0x5e
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b09      	cmp	r3, #9
 800db12:	d11d      	bne.n	800db50 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800db14:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800db18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db1a:	234c      	movs	r3, #76	; 0x4c
 800db1c:	fb01 f303 	mul.w	r3, r1, r3
 800db20:	4413      	add	r3, r2
 800db22:	335a      	adds	r3, #90	; 0x5a
 800db24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db28:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800db2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800db2e:	429a      	cmp	r2, r3
 800db30:	dc03      	bgt.n	800db3a <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800db38:	e00a      	b.n	800db50 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800db3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d106      	bne.n	800db50 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800db42:	2301      	movs	r3, #1
 800db44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800db48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db4c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800db50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db54:	3301      	adds	r3, #1
 800db56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800db5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5c:	7c9a      	ldrb	r2, [r3, #18]
 800db5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db62:	4293      	cmp	r3, r2
 800db64:	d3cb      	bcc.n	800dafe <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800db66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d102      	bne.n	800db74 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800db74:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800db78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db7a:	234c      	movs	r3, #76	; 0x4c
 800db7c:	fb01 f303 	mul.w	r3, r1, r3
 800db80:	4413      	add	r3, r2
 800db82:	3348      	adds	r3, #72	; 0x48
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800db88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d150      	bne.n	800dc32 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800db90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800db92:	2200      	movs	r2, #0
 800db94:	469a      	mov	sl, r3
 800db96:	4693      	mov	fp, r2
 800db98:	4652      	mov	r2, sl
 800db9a:	465b      	mov	r3, fp
 800db9c:	f04f 0000 	mov.w	r0, #0
 800dba0:	f04f 0100 	mov.w	r1, #0
 800dba4:	0159      	lsls	r1, r3, #5
 800dba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dbaa:	0150      	lsls	r0, r2, #5
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	ebb2 040a 	subs.w	r4, r2, sl
 800dbb4:	eb63 050b 	sbc.w	r5, r3, fp
 800dbb8:	f04f 0200 	mov.w	r2, #0
 800dbbc:	f04f 0300 	mov.w	r3, #0
 800dbc0:	00ab      	lsls	r3, r5, #2
 800dbc2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dbc6:	00a2      	lsls	r2, r4, #2
 800dbc8:	4614      	mov	r4, r2
 800dbca:	461d      	mov	r5, r3
 800dbcc:	eb14 080a 	adds.w	r8, r4, sl
 800dbd0:	eb45 090b 	adc.w	r9, r5, fp
 800dbd4:	f04f 0200 	mov.w	r2, #0
 800dbd8:	f04f 0300 	mov.w	r3, #0
 800dbdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbe8:	4690      	mov	r8, r2
 800dbea:	4699      	mov	r9, r3
 800dbec:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800dbf0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dbf4:	f04f 0200 	mov.w	r2, #0
 800dbf8:	f04f 0300 	mov.w	r3, #0
 800dbfc:	024b      	lsls	r3, r1, #9
 800dbfe:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800dc02:	0242      	lsls	r2, r0, #9
 800dc04:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800dc08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	61bb      	str	r3, [r7, #24]
 800dc10:	61fa      	str	r2, [r7, #28]
 800dc12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc16:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	428a      	cmp	r2, r1
 800dc1e:	4629      	mov	r1, r5
 800dc20:	418b      	sbcs	r3, r1
 800dc22:	d203      	bcs.n	800dc2c <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800dc24:	2301      	movs	r3, #1
 800dc26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dc2a:	e002      	b.n	800dc32 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800dc32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f000 810b 	beq.w	800de52 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800dc3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc3e:	2200      	movs	r2, #0
 800dc40:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800dc42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc44:	f7ff fb80 	bl	800d348 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800dc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc4a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800dc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800dc5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc5e:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800dc64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	1ad2      	subs	r2, r2, r3
 800dc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc6c:	4413      	add	r3, r2
 800dc6e:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800dc70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	da02      	bge.n	800dc7c <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800dc76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc78:	425b      	negs	r3, r3
 800dc7a:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800dc7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	461a      	mov	r2, r3
 800dc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc84:	4293      	cmp	r3, r2
 800dc86:	dd0c      	ble.n	800dca2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800dc88:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800dc8c:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800dc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc90:	429a      	cmp	r2, r3
 800dc92:	da03      	bge.n	800dc9c <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800dc94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc96:	2201      	movs	r2, #1
 800dc98:	709a      	strb	r2, [r3, #2]
 800dc9a:	e002      	b.n	800dca2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800dc9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc9e:	2202      	movs	r2, #2
 800dca0:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800dca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcaa:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800dcac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d906      	bls.n	800dcc6 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800dcb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcba:	2201      	movs	r2, #1
 800dcbc:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800dcbe:	2302      	movs	r3, #2
 800dcc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dcc4:	e014      	b.n	800dcf0 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800dcc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dcce:	2000      	movs	r0, #0
 800dcd0:	6139      	str	r1, [r7, #16]
 800dcd2:	6178      	str	r0, [r7, #20]
 800dcd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dcd8:	4621      	mov	r1, r4
 800dcda:	1851      	adds	r1, r2, r1
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4629      	mov	r1, r5
 800dce0:	eb43 0101 	adc.w	r1, r3, r1
 800dce4:	60f9      	str	r1, [r7, #12]
 800dce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dcec:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800dcf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d202      	bcs.n	800dd02 <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800dd02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd04:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dd08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	603b      	str	r3, [r7, #0]
 800dd10:	607a      	str	r2, [r7, #4]
 800dd12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd16:	f7f2 fad3 	bl	80002c0 <__aeabi_uldivmod>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
		xtalk_offset_out =
 800dd1e:	4613      	mov	r3, r2
 800dd20:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800dd22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd26:	1ad2      	subs	r2, r2, r3
 800dd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2a:	4413      	add	r3, r2
 800dd2c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800dd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	da02      	bge.n	800dd3a <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800dd34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd36:	425b      	negs	r3, r3
 800dd38:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800dd3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d112      	bne.n	800dd68 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800dd42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800dd48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	db0c      	blt.n	800dd68 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800dd4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800dd52:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800dd54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd56:	429a      	cmp	r2, r3
 800dd58:	da03      	bge.n	800dd62 <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800dd5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	70da      	strb	r2, [r3, #3]
 800dd60:	e002      	b.n	800dd68 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800dd62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd64:	2202      	movs	r2, #2
 800dd66:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800dd68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d108      	bne.n	800dd82 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800dd70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800dd76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	da02      	bge.n	800dd82 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800dd82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd84:	2200      	movs	r2, #0
 800dd86:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800dd88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d112      	bne.n	800ddb6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800dd90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd92:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00e      	beq.n	800ddb6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800dd98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd9a:	6a1b      	ldr	r3, [r3, #32]
 800dd9c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800dda0:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800dda4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d905      	bls.n	800ddb6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800ddaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddac:	2201      	movs	r2, #1
 800ddae:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ddb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddb8:	7c1b      	ldrb	r3, [r3, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ddbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddc0:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ddc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d902      	bls.n	800ddce <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800ddc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ddce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddd0:	7c1b      	ldrb	r3, [r3, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d107      	bne.n	800dde6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800ddd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddd8:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ddda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d202      	bcs.n	800dde6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800dde0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800dde6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dde8:	089b      	lsrs	r3, r3, #2
 800ddea:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800ddec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ddf2:	d301      	bcc.n	800ddf8 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800ddf4:	4b3e      	ldr	r3, [pc, #248]	; (800def0 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800ddf6:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800ddf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10d      	bne.n	800de1c <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de00:	2300      	movs	r3, #0
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	2301      	movs	r3, #1
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de10:	f7ff fc00 	bl	800d614 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800de14:	2302      	movs	r3, #2
 800de16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800de1a:	e009      	b.n	800de30 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de1c:	2301      	movs	r3, #1
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	2301      	movs	r3, #1
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de2c:	f7ff fbf2 	bl	800d614 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800de30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de34:	2b02      	cmp	r3, #2
 800de36:	d10c      	bne.n	800de52 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800de38:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de3a:	f04f 0200 	mov.w	r2, #0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800de46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de48:	2200      	movs	r2, #0
 800de4a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800de4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de4e:	2200      	movs	r2, #0
 800de50:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800de52:	2300      	movs	r3, #0
 800de54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800de58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d140      	bne.n	800dee2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800de60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de68:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800de6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de6c:	691a      	ldr	r2, [r3, #16]
 800de6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de72:	429a      	cmp	r2, r3
 800de74:	d202      	bcs.n	800de7c <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800de76:	2301      	movs	r3, #1
 800de78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800de7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de80:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800de82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de86:	2b00      	cmp	r3, #0
 800de88:	d110      	bne.n	800deac <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de8a:	2300      	movs	r3, #0
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	2300      	movs	r3, #0
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de9a:	f7ff fbbb 	bl	800d614 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800de9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dea0:	2202      	movs	r2, #2
 800dea2:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800dea4:	2302      	movs	r3, #2
 800dea6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800deaa:	e009      	b.n	800dec0 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800deac:	2301      	movs	r3, #1
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	2300      	movs	r3, #0
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800deb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800deba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800debc:	f7ff fbaa 	bl	800d614 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800dec0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d10c      	bne.n	800dee2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800dec8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800deca:	f04f 0200 	mov.w	r2, #0
 800dece:	f04f 0300 	mov.w	r3, #0
 800ded2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800ded6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800dedc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dede:	2200      	movs	r2, #0
 800dee0:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800dee2:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3780      	adds	r7, #128	; 0x80
 800deea:	46bd      	mov	sp, r7
 800deec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800def0:	0003ffff 	.word	0x0003ffff

0800def4 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800defc:	2300      	movs	r3, #0
 800defe:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3318      	adds	r3, #24
 800df04:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800df0c:	3308      	adds	r3, #8
 800df0e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df16:	2201      	movs	r2, #1
 800df18:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df22:	2201      	movs	r2, #1
 800df24:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df3e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df48:	461a      	mov	r2, r3
 800df4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800df4e:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df58:	461a      	mov	r2, r3
 800df5a:	2300      	movs	r3, #0
 800df5c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df66:	2200      	movs	r2, #0
 800df68:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df72:	461a      	mov	r2, r3
 800df74:	23c8      	movs	r3, #200	; 0xc8
 800df76:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df80:	461a      	mov	r2, r3
 800df82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df86:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df90:	461a      	mov	r2, r3
 800df92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df96:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4b3a      	ldr	r3, [pc, #232]	; (800e08c <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800dfa4:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800dfb4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfdc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff2:	461a      	mov	r2, r3
 800dff4:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800dff8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e002:	461a      	mov	r2, r3
 800e004:	230a      	movs	r3, #10
 800e006:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e010:	461a      	mov	r2, r3
 800e012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e016:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e020:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e024:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e02e:	461a      	mov	r2, r3
 800e030:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e034:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03e:	461a      	mov	r2, r3
 800e040:	2300      	movs	r3, #0
 800e042:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e04c:	461a      	mov	r2, r3
 800e04e:	2300      	movs	r3, #0
 800e050:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e05a:	3310      	adds	r3, #16
 800e05c:	4619      	mov	r1, r3
 800e05e:	f04f 0200 	mov.w	r2, #0
 800e062:	f04f 0300 	mov.w	r3, #0
 800e066:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e070:	461a      	mov	r2, r3
 800e072:	2300      	movs	r3, #0
 800e074:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f000 f809 	bl	800e090 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e07e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3718      	adds	r7, #24
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	000ff800 	.word	0x000ff800

0800e090 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e098:	2300      	movs	r3, #0
 800e09a:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0a2:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3318      	adds	r3, #24
 800e100:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e108:	461a      	mov	r2, r3
 800e10a:	2300      	movs	r3, #0
 800e10c:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e116:	2200      	movs	r2, #0
 800e118:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e122:	2200      	movs	r2, #0
 800e124:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e12e:	3308      	adds	r3, #8
 800e130:	2218      	movs	r2, #24
 800e132:	2100      	movs	r1, #0
 800e134:	4618      	mov	r0, r3
 800e136:	f00b f9d1 	bl	80194dc <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e146:	b480      	push	{r7}
 800e148:	b085      	sub	sp, #20
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e14e:	2300      	movs	r3, #0
 800e150:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	3318      	adds	r3, #24
 800e156:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e15e:	2203      	movs	r2, #3
 800e160:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e176:	2200      	movs	r2, #0
 800e178:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e182:	2200      	movs	r2, #0
 800e184:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b085      	sub	sp, #20
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	3318      	adds	r3, #24
 800e1e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ee:	22ff      	movs	r2, #255	; 0xff
 800e1f0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e206:	461a      	mov	r2, r3
 800e208:	2300      	movs	r3, #0
 800e20a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e214:	2200      	movs	r2, #0
 800e216:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e220:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d007      	beq.n	800e238 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e22e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e242:	2b00      	cmp	r3, #0
 800e244:	d007      	beq.n	800e256 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24c:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e26e:	b480      	push	{r7}
 800e270:	b087      	sub	sp, #28
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	60b9      	str	r1, [r7, #8]
 800e278:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	229b      	movs	r2, #155	; 0x9b
 800e28e:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e294:	4618      	mov	r0, r3
 800e296:	371c      	adds	r7, #28
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3318      	adds	r3, #24
 800e2ac:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2be:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ce:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e2ea:	f003 0303 	and.w	r3, r3, #3
 800e2ee:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e2fe:	4413      	add	r3, r2
 800e300:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e316:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e320:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32a:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e344:	b480      	push	{r7}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3318      	adds	r3, #24
 800e352:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e354:	2300      	movs	r3, #0
 800e356:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e362:	2b07      	cmp	r3, #7
 800e364:	bf0c      	ite	eq
 800e366:	2301      	moveq	r3, #1
 800e368:	2300      	movne	r3, #0
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e36e:	2300      	movs	r3, #0
 800e370:	75fb      	strb	r3, [r7, #23]
 800e372:	e019      	b.n	800e3a8 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e374:	7df9      	ldrb	r1, [r7, #23]
 800e376:	7bbb      	ldrb	r3, [r7, #14]
 800e378:	6938      	ldr	r0, [r7, #16]
 800e37a:	461a      	mov	r2, r3
 800e37c:	0052      	lsls	r2, r2, #1
 800e37e:	441a      	add	r2, r3
 800e380:	0153      	lsls	r3, r2, #5
 800e382:	461a      	mov	r2, r3
 800e384:	460b      	mov	r3, r1
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	440b      	add	r3, r1
 800e38a:	019b      	lsls	r3, r3, #6
 800e38c:	4413      	add	r3, r2
 800e38e:	4403      	add	r3, r0
 800e390:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e394:	3314      	adds	r3, #20
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	dd02      	ble.n	800e3a2 <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e39c:	7dbb      	ldrb	r3, [r7, #22]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	75fb      	strb	r3, [r7, #23]
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	2b05      	cmp	r3, #5
 800e3ac:	d9e2      	bls.n	800e374 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	7dba      	ldrb	r2, [r7, #22]
 800e3b2:	701a      	strb	r2, [r3, #0]

	return status;
 800e3b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	371c      	adds	r7, #28
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e3d2:	88fb      	ldrh	r3, [r7, #6]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d005      	beq.n	800e3e4 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e3d8:	88fb      	ldrh	r3, [r7, #6]
 800e3da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e3de:	fb92 f3f3 	sdiv	r3, r2, r3
 800e3e2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e3f2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e3f6:	b089      	sub	sp, #36	; 0x24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e402:	f04f 0200 	mov.w	r2, #0
 800e406:	f04f 0300 	mov.w	r3, #0
 800e40a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	fb02 f303 	mul.w	r3, r2, r3
 800e41a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	0b1b      	lsrs	r3, r3, #12
 800e420:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2200      	movs	r2, #0
 800e426:	469a      	mov	sl, r3
 800e428:	4693      	mov	fp, r2
 800e42a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	fb02 f303 	mul.w	r3, r2, r3
 800e436:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	091b      	lsrs	r3, r3, #4
 800e43c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	2200      	movs	r2, #0
 800e442:	4698      	mov	r8, r3
 800e444:	4691      	mov	r9, r2
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	fb08 f203 	mul.w	r2, r8, r3
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	fb09 f303 	mul.w	r3, r9, r3
 800e452:	4413      	add	r3, r2
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	fba2 4508 	umull	r4, r5, r2, r8
 800e45a:	442b      	add	r3, r5
 800e45c:	461d      	mov	r5, r3
 800e45e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e462:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e46a:	f04f 0200 	mov.w	r2, #0
 800e46e:	f04f 0300 	mov.w	r3, #0
 800e472:	0b02      	lsrs	r2, r0, #12
 800e474:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e478:	0b0b      	lsrs	r3, r1, #12
 800e47a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e47e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d305      	bcc.n	800e492 <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e486:	f04f 32ff 	mov.w	r2, #4294967295
 800e48a:	f04f 0300 	mov.w	r3, #0
 800e48e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e496:	697b      	ldr	r3, [r7, #20]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3724      	adds	r7, #36	; 0x24
 800e49c:	46bd      	mov	sp, r7
 800e49e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e4a2:	4770      	bx	lr

0800e4a4 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4a8:	b096      	sub	sp, #88	; 0x58
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	627a      	str	r2, [r7, #36]	; 0x24
 800e4b2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e4b4:	f04f 0200 	mov.w	r2, #0
 800e4b8:	f04f 0300 	mov.w	r3, #0
 800e4bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e4c0:	f04f 0200 	mov.w	r2, #0
 800e4c4:	f04f 0300 	mov.w	r3, #0
 800e4c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	17da      	asrs	r2, r3, #31
 800e4d4:	469a      	mov	sl, r3
 800e4d6:	4693      	mov	fp, r2
 800e4d8:	4652      	mov	r2, sl
 800e4da:	465b      	mov	r3, fp
 800e4dc:	f04f 0000 	mov.w	r0, #0
 800e4e0:	f04f 0100 	mov.w	r1, #0
 800e4e4:	0159      	lsls	r1, r3, #5
 800e4e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4ea:	0150      	lsls	r0, r2, #5
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	ebb2 040a 	subs.w	r4, r2, sl
 800e4f4:	eb63 050b 	sbc.w	r5, r3, fp
 800e4f8:	f04f 0200 	mov.w	r2, #0
 800e4fc:	f04f 0300 	mov.w	r3, #0
 800e500:	00ab      	lsls	r3, r5, #2
 800e502:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e506:	00a2      	lsls	r2, r4, #2
 800e508:	4614      	mov	r4, r2
 800e50a:	461d      	mov	r5, r3
 800e50c:	eb14 080a 	adds.w	r8, r4, sl
 800e510:	eb45 090b 	adc.w	r9, r5, fp
 800e514:	f04f 0200 	mov.w	r2, #0
 800e518:	f04f 0300 	mov.w	r3, #0
 800e51c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e520:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e524:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e528:	4690      	mov	r8, r2
 800e52a:	4699      	mov	r9, r3
 800e52c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00d      	beq.n	800e552 <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e538:	2200      	movs	r2, #0
 800e53a:	61bb      	str	r3, [r7, #24]
 800e53c:	61fa      	str	r2, [r7, #28]
 800e53e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e542:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e546:	f7f1 febb 	bl	80002c0 <__aeabi_uldivmod>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	2b00      	cmp	r3, #0
 800e556:	d02a      	beq.n	800e5ae <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e558:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e55c:	f04f 0200 	mov.w	r2, #0
 800e560:	f04f 0300 	mov.w	r3, #0
 800e564:	02cb      	lsls	r3, r1, #11
 800e566:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e56a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e56c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e56e:	0849      	lsrs	r1, r1, #1
 800e570:	2000      	movs	r0, #0
 800e572:	6139      	str	r1, [r7, #16]
 800e574:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e576:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e57a:	4621      	mov	r1, r4
 800e57c:	1851      	adds	r1, r2, r1
 800e57e:	6039      	str	r1, [r7, #0]
 800e580:	4629      	mov	r1, r5
 800e582:	eb43 0101 	adc.w	r1, r3, r1
 800e586:	6079      	str	r1, [r7, #4]
 800e588:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e58c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	2200      	movs	r2, #0
 800e594:	60bb      	str	r3, [r7, #8]
 800e596:	60fa      	str	r2, [r7, #12]
 800e598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e59c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e5a0:	f7f1 fe8e 	bl	80002c0 <__aeabi_uldivmod>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e5ac:	e00b      	b.n	800e5c6 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e5ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	f04f 0300 	mov.w	r3, #0
 800e5ba:	02cb      	lsls	r3, r1, #11
 800e5bc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e5c0:	02c2      	lsls	r2, r0, #11
 800e5c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5c8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3758      	adds	r7, #88	; 0x58
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e5d6 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b085      	sub	sp, #20
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e5e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5e6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e5e8:	e002      	b.n	800e5f0 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	089b      	lsrs	r3, r3, #2
 800e5ee:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d8f8      	bhi.n	800e5ea <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e5f8:	e017      	b.n	800e62a <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	4413      	add	r3, r2
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	429a      	cmp	r2, r3
 800e604:	d30b      	bcc.n	800e61e <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	4413      	add	r3, r2
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	085b      	lsrs	r3, r3, #1
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	4413      	add	r3, r2
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e002      	b.n	800e624 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	085b      	lsrs	r3, r3, #1
 800e622:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	089b      	lsrs	r3, r3, #2
 800e628:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1e4      	bne.n	800e5fa <VL53L1_isqrt+0x24>
	}

	return res;
 800e630:	68fb      	ldr	r3, [r7, #12]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e654:	4618      	mov	r0, r3
 800e656:	f000 faa5 	bl	800eba4 <VL53L1_decode_vcsel_period>
 800e65a:	4603      	mov	r3, r0
	period = 2048 *
 800e65c:	02db      	lsls	r3, r3, #11
 800e65e:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e66a:	461a      	mov	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e678:	02db      	lsls	r3, r3, #11
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	4413      	add	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e686:	02db      	lsls	r3, r3, #11
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d009      	beq.n	800e6a8 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	fbb3 f2f2 	udiv	r2, r3, r2
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	fb01 f202 	mul.w	r2, r1, r2
 800e6a2:	1a9b      	subs	r3, r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	e001      	b.n	800e6ac <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e6d0:	6838      	ldr	r0, [r7, #0]
 800e6d2:	f000 fb90 	bl	800edf6 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7ff ff7a 	bl	800e5d6 <VL53L1_isqrt>
 800e6e2:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e6e4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	fb02 f303 	mul.w	r3, r2, r3
 800e6ee:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	3307      	adds	r3, #7
 800e6f4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	111b      	asrs	r3, r3, #4
 800e6fa:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	4413      	add	r3, r2
 800e706:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	2200      	movs	r2, #0
 800e714:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e718:	2300      	movs	r3, #0
 800e71a:	73fb      	strb	r3, [r7, #15]
 800e71c:	e01e      	b.n	800e75c <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e71e:	7bfa      	ldrb	r2, [r7, #15]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	3206      	adds	r2, #6
 800e724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	dd13      	ble.n	800e756 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e734:	7bf9      	ldrb	r1, [r7, #15]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	3106      	adds	r1, #6
 800e73a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e73e:	441a      	add	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e74c:	3301      	adds	r3, #1
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e756:	7bfb      	ldrb	r3, [r7, #15]
 800e758:	3301      	adds	r3, #1
 800e75a:	73fb      	strb	r3, [r7, #15]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	7a9b      	ldrb	r3, [r3, #10]
 800e760:	7bfa      	ldrb	r2, [r7, #15]
 800e762:	429a      	cmp	r2, r3
 800e764:	d3db      	bcc.n	800e71e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01c      	beq.n	800e7aa <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e788:	0852      	lsrs	r2, r2, #1
 800e78a:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e78c:	441a      	add	r2, r3
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e79a:	683a      	ldr	r2, [r7, #0]
 800e79c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e7a0:	fb93 f2f2 	sdiv	r2, r3, r2
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b085      	sub	sp, #20
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	7b1b      	ldrb	r3, [r3, #12]
 800e7ca:	f003 0307 	and.w	r3, r3, #7
 800e7ce:	2b07      	cmp	r3, #7
 800e7d0:	d13a      	bne.n	800e848 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	73bb      	strb	r3, [r7, #14]
 800e7da:	e01f      	b.n	800e81c <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	7b1b      	ldrb	r3, [r3, #12]
 800e7e4:	f003 0307 	and.w	r3, r3, #7
 800e7e8:	2b07      	cmp	r3, #7
 800e7ea:	d014      	beq.n	800e816 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e7ec:	7bba      	ldrb	r2, [r7, #14]
 800e7ee:	7b7b      	ldrb	r3, [r7, #13]
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	440a      	add	r2, r1
 800e7f4:	7b11      	ldrb	r1, [r2, #12]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	460a      	mov	r2, r1
 800e7fc:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e7fe:	7bba      	ldrb	r2, [r7, #14]
 800e800:	7b7b      	ldrb	r3, [r7, #13]
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	440a      	add	r2, r1
 800e806:	7c91      	ldrb	r1, [r2, #18]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	4413      	add	r3, r2
 800e80c:	460a      	mov	r2, r1
 800e80e:	749a      	strb	r2, [r3, #18]
				i++;
 800e810:	7b7b      	ldrb	r3, [r7, #13]
 800e812:	3301      	adds	r3, #1
 800e814:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e816:	7bbb      	ldrb	r3, [r7, #14]
 800e818:	3301      	adds	r3, #1
 800e81a:	73bb      	strb	r3, [r7, #14]
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d9dc      	bls.n	800e7dc <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e822:	7b7b      	ldrb	r3, [r7, #13]
 800e824:	73bb      	strb	r3, [r7, #14]
 800e826:	e00c      	b.n	800e842 <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e828:	7bbb      	ldrb	r3, [r7, #14]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	4413      	add	r3, r2
 800e82e:	2210      	movs	r2, #16
 800e830:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e832:	7bbb      	ldrb	r3, [r7, #14]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	4413      	add	r3, r2
 800e838:	2200      	movs	r2, #0
 800e83a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e83c:	7bbb      	ldrb	r3, [r7, #14]
 800e83e:	3301      	adds	r3, #1
 800e840:	73bb      	strb	r3, [r7, #14]
 800e842:	7bbb      	ldrb	r3, [r7, #14]
 800e844:	2b05      	cmp	r3, #5
 800e846:	d9ef      	bls.n	800e828 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7adb      	ldrb	r3, [r3, #11]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d023      	beq.n	800e898 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7adb      	ldrb	r3, [r3, #11]
 800e854:	73fb      	strb	r3, [r7, #15]
 800e856:	e00f      	b.n	800e878 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e858:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	7ad2      	ldrb	r2, [r2, #11]
 800e860:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	3106      	adds	r1, #6
 800e866:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3206      	adds	r2, #6
 800e86e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e872:	7bfb      	ldrb	r3, [r7, #15]
 800e874:	3301      	adds	r3, #1
 800e876:	73fb      	strb	r3, [r7, #15]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800e87c:	7bfa      	ldrb	r2, [r7, #15]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d3ea      	bcc.n	800e858 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	72da      	strb	r2, [r3, #11]
	}
}
 800e898:	bf00      	nop
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e8b6:	88fb      	ldrh	r3, [r7, #6]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff fd83 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 800e8be:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800e8c4:	f249 2257 	movw	r2, #37463	; 0x9257
 800e8c8:	fb02 f303 	mul.w	r3, r2, r3
 800e8cc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e8d4:	0c1b      	lsrs	r3, r3, #16
 800e8d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800e8d8:	68bb      	ldr	r3, [r7, #8]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800e8e2:	b480      	push	{r7}
 800e8e4:	b087      	sub	sp, #28
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800e8f0:	2307      	movs	r3, #7
 800e8f2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8fe:	db03      	blt.n	800e908 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800e900:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e904:	617b      	str	r3, [r7, #20]
 800e906:	e004      	b.n	800e912 <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	dd01      	ble.n	800e912 <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e918:	dd02      	ble.n	800e920 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800e91a:	2303      	movs	r3, #3
 800e91c:	613b      	str	r3, [r7, #16]
 800e91e:	e001      	b.n	800e924 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800e920:	2307      	movs	r3, #7
 800e922:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	409a      	lsls	r2, r3
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	085b      	lsrs	r3, r3, #1
 800e934:	441a      	add	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	fbb2 f3f3 	udiv	r3, r2, r3
 800e93c:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e944:	dd02      	ble.n	800e94c <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	011b      	lsls	r3, r3, #4
 800e94a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e952:	d302      	bcc.n	800e95a <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800e954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e958:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800e95e:	89fb      	ldrh	r3, [r7, #14]
}
 800e960:	4618      	mov	r0, r3
 800e962:	371c      	adds	r7, #28
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b087      	sub	sp, #28
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	4613      	mov	r3, r2
 800e97a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d010      	beq.n	800e9ac <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	021a      	lsls	r2, r3, #8
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	fa02 f303 	lsl.w	r3, r2, r3
 800e994:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800e996:	88fb      	ldrh	r3, [r7, #6]
 800e998:	085b      	lsrs	r3, r3, #1
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800e9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	e004      	b.n	800e9b6 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d901      	bls.n	800e9c2 <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800e9c6:	8a7b      	ldrh	r3, [r7, #18]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	371c      	adds	r7, #28
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d8:	b093      	sub	sp, #76	; 0x4c
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	461e      	mov	r6, r3
 800e9de:	4603      	mov	r3, r0
 800e9e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e9ea:	4633      	mov	r3, r6
 800e9ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800e9f4:	f04f 0200 	mov.w	r2, #0
 800e9f8:	f04f 0300 	mov.w	r3, #0
 800e9fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ea04:	2300      	movs	r3, #0
 800ea06:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ea08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7ff fcda 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 800ea10:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800ea12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea14:	2200      	movs	r2, #0
 800ea16:	623b      	str	r3, [r7, #32]
 800ea18:	627a      	str	r2, [r7, #36]	; 0x24
 800ea1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	61bb      	str	r3, [r7, #24]
 800ea20:	61fa      	str	r2, [r7, #28]
 800ea22:	6a3b      	ldr	r3, [r7, #32]
 800ea24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ea28:	4602      	mov	r2, r0
 800ea2a:	1a9b      	subs	r3, r3, r2
 800ea2c:	613b      	str	r3, [r7, #16]
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	460a      	mov	r2, r1
 800ea32:	eb63 0302 	sbc.w	r3, r3, r2
 800ea36:	617b      	str	r3, [r7, #20]
 800ea38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ea40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea42:	2200      	movs	r2, #0
 800ea44:	469a      	mov	sl, r3
 800ea46:	4693      	mov	fp, r2
 800ea48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4a:	fb0a f203 	mul.w	r2, sl, r3
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	fb0b f303 	mul.w	r3, fp, r3
 800ea54:	4413      	add	r3, r2
 800ea56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea58:	fba2 890a 	umull	r8, r9, r2, sl
 800ea5c:	444b      	add	r3, r9
 800ea5e:	4699      	mov	r9, r3
 800ea60:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ea64:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ea68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da08      	bge.n	800ea82 <VL53L1_range_maths+0xae>
 800ea70:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ea74:	1851      	adds	r1, r2, r1
 800ea76:	60b9      	str	r1, [r7, #8]
 800ea78:	f143 0300 	adc.w	r3, r3, #0
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea82:	f04f 0000 	mov.w	r0, #0
 800ea86:	f04f 0100 	mov.w	r1, #0
 800ea8a:	0a50      	lsrs	r0, r2, #9
 800ea8c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ea90:	1259      	asrs	r1, r3, #9
 800ea92:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ea96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea98:	f249 2257 	movw	r2, #37463	; 0x9257
 800ea9c:	fb03 f202 	mul.w	r2, r3, r2
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	fb01 f303 	mul.w	r3, r1, r3
 800eaa8:	4413      	add	r3, r2
 800eaaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaac:	f249 2157 	movw	r1, #37463	; 0x9257
 800eab0:	fba2 4501 	umull	r4, r5, r2, r1
 800eab4:	442b      	add	r3, r5
 800eab6:	461d      	mov	r5, r3
 800eab8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800eabc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800eac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	da07      	bge.n	800ead8 <VL53L1_range_maths+0x104>
 800eac8:	4934      	ldr	r1, [pc, #208]	; (800eb9c <VL53L1_range_maths+0x1c8>)
 800eaca:	1851      	adds	r1, r2, r1
 800eacc:	6039      	str	r1, [r7, #0]
 800eace:	f143 0300 	adc.w	r3, r3, #0
 800ead2:	607b      	str	r3, [r7, #4]
 800ead4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead8:	f04f 0000 	mov.w	r0, #0
 800eadc:	f04f 0100 	mov.w	r1, #0
 800eae0:	0d90      	lsrs	r0, r2, #22
 800eae2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800eae6:	1599      	asrs	r1, r3, #22
 800eae8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eaf0:	4413      	add	r3, r2
 800eaf2:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800eaf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eaf8:	fb02 f303 	mul.w	r3, r2, r3
 800eafc:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800eafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb04:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800eb06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	da01      	bge.n	800eb10 <VL53L1_range_maths+0x13c>
 800eb0c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800eb10:	12db      	asrs	r3, r3, #11
 800eb12:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800eb14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d130      	bne.n	800eb7e <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800eb1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb1e:	4613      	mov	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	4413      	add	r3, r2
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	da00      	bge.n	800eb30 <VL53L1_range_maths+0x15c>
 800eb2e:	3303      	adds	r3, #3
 800eb30:	109b      	asrs	r3, r3, #2
 800eb32:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800eb34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb36:	4b1a      	ldr	r3, [pc, #104]	; (800eba0 <VL53L1_range_maths+0x1cc>)
 800eb38:	fb83 2301 	smull	r2, r3, r3, r1
 800eb3c:	109a      	asrs	r2, r3, #2
 800eb3e:	17cb      	asrs	r3, r1, #31
 800eb40:	1ad2      	subs	r2, r2, r3
 800eb42:	4613      	mov	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	1aca      	subs	r2, r1, r3
 800eb4c:	2a04      	cmp	r2, #4
 800eb4e:	dc09      	bgt.n	800eb64 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800eb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb52:	4a13      	ldr	r2, [pc, #76]	; (800eba0 <VL53L1_range_maths+0x1cc>)
 800eb54:	fb82 1203 	smull	r1, r2, r2, r3
 800eb58:	1092      	asrs	r2, r2, #2
 800eb5a:	17db      	asrs	r3, r3, #31
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	b21b      	sxth	r3, r3
 800eb60:	647b      	str	r3, [r7, #68]	; 0x44
 800eb62:	e015      	b.n	800eb90 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800eb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb66:	4a0e      	ldr	r2, [pc, #56]	; (800eba0 <VL53L1_range_maths+0x1cc>)
 800eb68:	fb82 1203 	smull	r1, r2, r2, r3
 800eb6c:	1092      	asrs	r2, r2, #2
 800eb6e:	17db      	asrs	r3, r3, #31
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	3301      	adds	r3, #1
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	b21b      	sxth	r3, r3
 800eb7a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb7c:	e008      	b.n	800eb90 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800eb7e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d104      	bne.n	800eb90 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800eb86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb88:	0fda      	lsrs	r2, r3, #31
 800eb8a:	4413      	add	r3, r2
 800eb8c:	105b      	asrs	r3, r3, #1
 800eb8e:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800eb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	374c      	adds	r7, #76	; 0x4c
 800eb96:	46bd      	mov	sp, r7
 800eb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9c:	003fffff 	.word	0x003fffff
 800eba0:	66666667 	.word	0x66666667

0800eba4 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4603      	mov	r3, r0
 800ebac:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	7a5a      	ldrb	r2, [r3, #9]
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	605a      	str	r2, [r3, #4]
}
 800ec3a:	bf00      	nop
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b087      	sub	sp, #28
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	607a      	str	r2, [r7, #4]
 800ec52:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ec54:	2300      	movs	r3, #0
 800ec56:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2203      	movs	r2, #3
 800ec62:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2218      	movs	r2, #24
 800ec7a:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ec7c:	897b      	ldrh	r3, [r7, #10]
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	82fb      	strh	r3, [r7, #22]
 800ed1e:	e009      	b.n	800ed34 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ed20:	8afb      	ldrh	r3, [r7, #22]
 800ed22:	8afa      	ldrh	r2, [r7, #22]
 800ed24:	b2d1      	uxtb	r1, r2
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	4413      	add	r3, r2
 800ed2a:	460a      	mov	r2, r1
 800ed2c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed2e:	8afb      	ldrh	r3, [r7, #22]
 800ed30:	3301      	adds	r3, #1
 800ed32:	82fb      	strh	r3, [r7, #22]
 800ed34:	8afb      	ldrh	r3, [r7, #22]
 800ed36:	2b05      	cmp	r3, #5
 800ed38:	d9f2      	bls.n	800ed20 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	82fb      	strh	r3, [r7, #22]
 800ed3e:	e007      	b.n	800ed50 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ed40:	8afb      	ldrh	r3, [r7, #22]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	4413      	add	r3, r2
 800ed46:	2201      	movs	r2, #1
 800ed48:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed4a:	8afb      	ldrh	r3, [r7, #22]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	82fb      	strh	r3, [r7, #22]
 800ed50:	8afb      	ldrh	r3, [r7, #22]
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	d9f4      	bls.n	800ed40 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ed56:	2300      	movs	r3, #0
 800ed58:	82fb      	strh	r3, [r7, #22]
 800ed5a:	e013      	b.n	800ed84 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800ed5c:	8afa      	ldrh	r2, [r7, #22]
 800ed5e:	897b      	ldrh	r3, [r7, #10]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d206      	bcs.n	800ed72 <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800ed64:	8afa      	ldrh	r2, [r7, #22]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3206      	adds	r2, #6
 800ed6a:	68f9      	ldr	r1, [r7, #12]
 800ed6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ed70:	e005      	b.n	800ed7e <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800ed72:	8afa      	ldrh	r2, [r7, #22]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3206      	adds	r2, #6
 800ed78:	2100      	movs	r1, #0
 800ed7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ed7e:	8afb      	ldrh	r3, [r7, #22]
 800ed80:	3301      	adds	r3, #1
 800ed82:	82fb      	strh	r3, [r7, #22]
 800ed84:	8afb      	ldrh	r3, [r7, #22]
 800ed86:	2b17      	cmp	r3, #23
 800ed88:	d9e8      	bls.n	800ed5c <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	371c      	adds	r7, #28
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800eda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	da10      	bge.n	800edd0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800edae:	7bfb      	ldrb	r3, [r7, #15]
 800edb0:	43db      	mvns	r3, r3
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	f003 0307 	and.w	r3, r3, #7
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	3308      	adds	r3, #8
 800edbc:	b2da      	uxtb	r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
 800edc4:	3b80      	subs	r3, #128	; 0x80
 800edc6:	10db      	asrs	r3, r3, #3
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800edce:	e00c      	b.n	800edea <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	f003 0307 	and.w	r3, r3, #7
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
 800edde:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ede2:	10db      	asrs	r3, r3, #3
 800ede4:	b2da      	uxtb	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	701a      	strb	r2, [r3, #0]
}
 800edea:	bf00      	nop
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b085      	sub	sp, #20
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ee02:	2300      	movs	r3, #0
 800ee04:	73fb      	strb	r3, [r7, #15]
 800ee06:	e02c      	b.n	800ee62 <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d009      	beq.n	800ee22 <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ee14:	7bf9      	ldrb	r1, [r7, #15]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3106      	adds	r1, #6
 800ee1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	db07      	blt.n	800ee32 <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ee22:	7bfa      	ldrb	r2, [r7, #15]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	3206      	adds	r2, #6
 800ee28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d009      	beq.n	800ee4c <VL53L1_hist_find_min_max_bin_values+0x56>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ee3e:	7bf9      	ldrb	r1, [r7, #15]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3106      	adds	r1, #6
 800ee44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	dc07      	bgt.n	800ee5c <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ee4c:	7bfa      	ldrb	r2, [r7, #15]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	3206      	adds	r2, #6
 800ee52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	73fb      	strb	r3, [r7, #15]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	7a9b      	ldrb	r3, [r3, #10]
 800ee66:	7bfa      	ldrb	r2, [r7, #15]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d3cd      	bcc.n	800ee08 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ee6c:	bf00      	nop
 800ee6e:	bf00      	nop
 800ee70:	3714      	adds	r7, #20
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b085      	sub	sp, #20
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	7adb      	ldrb	r3, [r3, #11]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d03a      	beq.n	800ef04 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eea0:	2300      	movs	r3, #0
 800eea2:	73fb      	strb	r3, [r7, #15]
 800eea4:	e00e      	b.n	800eec4 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eeac:	7bf9      	ldrb	r1, [r7, #15]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3106      	adds	r1, #6
 800eeb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
 800eec0:	3301      	adds	r3, #1
 800eec2:	73fb      	strb	r3, [r7, #15]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7adb      	ldrb	r3, [r3, #11]
 800eec8:	7bfa      	ldrb	r2, [r7, #15]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d3eb      	bcc.n	800eea6 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	7ad2      	ldrb	r2, [r2, #11]
 800eee4:	0852      	lsrs	r2, r2, #1
 800eee6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800eee8:	441a      	add	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800eefa:	fb93 f2f2 	sdiv	r2, r3, r2
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800ef04:	bf00      	nop
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800ef10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef14:	b0ca      	sub	sp, #296	; 0x128
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ef1c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ef20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ef24:	4603      	mov	r3, r0
 800ef26:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800ef42:	f04f 0200 	mov.w	r2, #0
 800ef46:	f04f 0300 	mov.w	r3, #0
 800ef4a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800ef54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef58:	2300      	movs	r3, #0
 800ef5a:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800ef5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef60:	2300      	movs	r3, #0
 800ef62:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800ef64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef68:	2300      	movs	r3, #0
 800ef6a:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800ef6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef70:	2300      	movs	r3, #0
 800ef72:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800ef74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef78:	2300      	movs	r3, #0
 800ef7a:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800ef7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef80:	2300      	movs	r3, #0
 800ef82:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800ef84:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef88:	2300      	movs	r3, #0
 800ef8a:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800ef8c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef90:	2300      	movs	r3, #0
 800ef92:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800ef94:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ef98:	2300      	movs	r3, #0
 800ef9a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800ef9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efa0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 80e1 	beq.w	800f16c <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800efaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 80da 	beq.w	800f16c <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800efb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efbc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff f9ff 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 800efc6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800efca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efd2:	3301      	adds	r3, #1
 800efd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800efd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efe0:	2110      	movs	r1, #16
 800efe2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800efe6:	f7ff fa04 	bl	800e3f2 <VL53L1_duration_maths>
 800efea:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800efec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eff0:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800eff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eff6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800effa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7ff fc6d 	bl	800e8e2 <VL53L1_rate_maths>
 800f008:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f00a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f00e:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f010:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f014:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f01c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f020:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	f7ff fa3c 	bl	800e4a4 <VL53L1_events_per_spad_maths>
 800f02c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f02e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f032:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f038:	8adb      	ldrh	r3, [r3, #22]
 800f03a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f03e:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f044:	8adb      	ldrh	r3, [r3, #22]
 800f046:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f04a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f04c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 808a 	beq.w	800f16c <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f05c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f05e:	b29b      	uxth	r3, r3
 800f060:	2200      	movs	r2, #0
 800f062:	461c      	mov	r4, r3
 800f064:	4615      	mov	r5, r2
 800f066:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f06a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f06e:	4622      	mov	r2, r4
 800f070:	462b      	mov	r3, r5
 800f072:	f04f 0000 	mov.w	r0, #0
 800f076:	f04f 0100 	mov.w	r1, #0
 800f07a:	0159      	lsls	r1, r3, #5
 800f07c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f080:	0150      	lsls	r0, r2, #5
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	ebb2 0804 	subs.w	r8, r2, r4
 800f08a:	eb63 0905 	sbc.w	r9, r3, r5
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	f04f 0300 	mov.w	r3, #0
 800f096:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f09a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f09e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f0a2:	4690      	mov	r8, r2
 800f0a4:	4699      	mov	r9, r3
 800f0a6:	eb18 0a04 	adds.w	sl, r8, r4
 800f0aa:	eb49 0b05 	adc.w	fp, r9, r5
 800f0ae:	f04f 0200 	mov.w	r2, #0
 800f0b2:	f04f 0300 	mov.w	r3, #0
 800f0b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f0ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f0be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0c2:	4692      	mov	sl, r2
 800f0c4:	469b      	mov	fp, r3
 800f0c6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f0ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f0ce:	f04f 0000 	mov.w	r0, #0
 800f0d2:	f04f 0100 	mov.w	r1, #0
 800f0d6:	0319      	lsls	r1, r3, #12
 800f0d8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f0dc:	0310      	lsls	r0, r2, #12
 800f0de:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f0e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	085b      	lsrs	r3, r3, #1
 800f0ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f0ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f0f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f0fc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f100:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f104:	4621      	mov	r1, r4
 800f106:	1851      	adds	r1, r2, r1
 800f108:	65b9      	str	r1, [r7, #88]	; 0x58
 800f10a:	4629      	mov	r1, r5
 800f10c:	eb43 0101 	adc.w	r1, r3, r1
 800f110:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f112:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f116:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f11a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f11e:	695b      	ldr	r3, [r3, #20]
 800f120:	2200      	movs	r2, #0
 800f122:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f126:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f12a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f12e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f132:	f7f1 f8c5 	bl	80002c0 <__aeabi_uldivmod>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f13e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f142:	8adb      	ldrh	r3, [r3, #22]
 800f144:	b29b      	uxth	r3, r3
 800f146:	2200      	movs	r2, #0
 800f148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f14c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f150:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f154:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f158:	4621      	mov	r1, r4
 800f15a:	428a      	cmp	r2, r1
 800f15c:	4629      	mov	r1, r5
 800f15e:	418b      	sbcs	r3, r1
 800f160:	d204      	bcs.n	800f16c <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f162:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f166:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f16a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f16c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 82e9 	beq.w	800f74a <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f17c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 82e2 	beq.w	800f74a <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f186:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f18a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f000 82dc 	beq.w	800f74a <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 82d5 	beq.w	800f74a <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f1a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1a4:	885b      	ldrh	r3, [r3, #2]
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	653b      	str	r3, [r7, #80]	; 0x50
 800f1ac:	657a      	str	r2, [r7, #84]	; 0x54
 800f1ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f1b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f1b6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f1ba:	4622      	mov	r2, r4
 800f1bc:	462b      	mov	r3, r5
 800f1be:	f04f 0000 	mov.w	r0, #0
 800f1c2:	f04f 0100 	mov.w	r1, #0
 800f1c6:	0159      	lsls	r1, r3, #5
 800f1c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f1cc:	0150      	lsls	r0, r2, #5
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	1b11      	subs	r1, r2, r4
 800f1d4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1d6:	eb63 0305 	sbc.w	r3, r3, r5
 800f1da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1dc:	f04f 0200 	mov.w	r2, #0
 800f1e0:	f04f 0300 	mov.w	r3, #0
 800f1e4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f1e8:	4649      	mov	r1, r9
 800f1ea:	008b      	lsls	r3, r1, #2
 800f1ec:	4641      	mov	r1, r8
 800f1ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1f2:	4641      	mov	r1, r8
 800f1f4:	008a      	lsls	r2, r1, #2
 800f1f6:	4611      	mov	r1, r2
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	191b      	adds	r3, r3, r4
 800f1fe:	643b      	str	r3, [r7, #64]	; 0x40
 800f200:	4613      	mov	r3, r2
 800f202:	eb45 0303 	adc.w	r3, r5, r3
 800f206:	647b      	str	r3, [r7, #68]	; 0x44
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	f04f 0300 	mov.w	r3, #0
 800f210:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f214:	4629      	mov	r1, r5
 800f216:	02cb      	lsls	r3, r1, #11
 800f218:	4621      	mov	r1, r4
 800f21a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f21e:	4621      	mov	r1, r4
 800f220:	02ca      	lsls	r2, r1, #11
 800f222:	461c      	mov	r4, r3
 800f224:	4613      	mov	r3, r2
 800f226:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f22a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	085b      	lsrs	r3, r3, #1
 800f232:	b29b      	uxth	r3, r3
 800f234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f238:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f242:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f246:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f24a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f24e:	4621      	mov	r1, r4
 800f250:	1851      	adds	r1, r2, r1
 800f252:	63b9      	str	r1, [r7, #56]	; 0x38
 800f254:	4629      	mov	r1, r5
 800f256:	eb43 0101 	adc.w	r1, r3, r1
 800f25a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f25c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f260:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f264:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	2200      	movs	r2, #0
 800f26e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f272:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f276:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f27a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f27e:	f7f1 f81f 	bl	80002c0 <__aeabi_uldivmod>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f28a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f28e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f292:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f294:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	011a      	lsls	r2, r3, #4
 800f29c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2a0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f2a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f2ac:	637a      	str	r2, [r7, #52]	; 0x34
 800f2ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f2b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f2b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2ba:	695b      	ldr	r3, [r3, #20]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f2c2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f2c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f2ca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	fb02 f203 	mul.w	r2, r2, r3
 800f2d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f2d8:	4629      	mov	r1, r5
 800f2da:	fb01 f303 	mul.w	r3, r1, r3
 800f2de:	441a      	add	r2, r3
 800f2e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	fba3 1301 	umull	r1, r3, r3, r1
 800f2ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f2f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f2f8:	18d3      	adds	r3, r2, r3
 800f2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f2fe:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f302:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f306:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f30a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f30e:	8b5b      	ldrh	r3, [r3, #26]
 800f310:	b29b      	uxth	r3, r3
 800f312:	2200      	movs	r2, #0
 800f314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f318:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f31c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f320:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f324:	4622      	mov	r2, r4
 800f326:	fb02 f203 	mul.w	r2, r2, r3
 800f32a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f32e:	4629      	mov	r1, r5
 800f330:	fb01 f303 	mul.w	r3, r1, r3
 800f334:	441a      	add	r2, r3
 800f336:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f33a:	4621      	mov	r1, r4
 800f33c:	fba3 1301 	umull	r1, r3, r3, r1
 800f340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f344:	460b      	mov	r3, r1
 800f346:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f34e:	18d3      	adds	r3, r2, r3
 800f350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f354:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f358:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f35c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f360:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f364:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f368:	62b9      	str	r1, [r7, #40]	; 0x28
 800f36a:	f143 0300 	adc.w	r3, r3, #0
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f370:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f374:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f378:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f37c:	f04f 0000 	mov.w	r0, #0
 800f380:	f04f 0100 	mov.w	r1, #0
 800f384:	0cd0      	lsrs	r0, r2, #19
 800f386:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f38a:	0cd9      	lsrs	r1, r3, #19
 800f38c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f390:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f394:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f398:	6239      	str	r1, [r7, #32]
 800f39a:	f143 0300 	adc.w	r3, r3, #0
 800f39e:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f3a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f3a8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f3ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f3b0:	f04f 0300 	mov.w	r3, #0
 800f3b4:	f7f0 ff84 	bl	80002c0 <__aeabi_uldivmod>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f3c0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3c4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f3c8:	f173 0300 	sbcs.w	r3, r3, #0
 800f3cc:	d305      	bcc.n	800f3da <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f3ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f3d2:	f04f 0300 	mov.w	r3, #0
 800f3d6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f3da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f3de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3e2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f3e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	61bb      	str	r3, [r7, #24]
 800f3ee:	61fa      	str	r2, [r7, #28]
 800f3f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f3f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f3f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f408:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f40c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f410:	4622      	mov	r2, r4
 800f412:	fb02 f203 	mul.w	r2, r2, r3
 800f416:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f41a:	4629      	mov	r1, r5
 800f41c:	fb01 f303 	mul.w	r3, r1, r3
 800f420:	441a      	add	r2, r3
 800f422:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f426:	4621      	mov	r1, r4
 800f428:	fba3 1301 	umull	r1, r3, r3, r1
 800f42c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f430:	460b      	mov	r3, r1
 800f432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f43a:	18d3      	adds	r3, r2, r3
 800f43c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f440:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f444:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f448:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f44c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f450:	8b5b      	ldrh	r3, [r3, #26]
 800f452:	b29b      	uxth	r3, r3
 800f454:	2200      	movs	r2, #0
 800f456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f45a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f45e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f462:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f466:	4622      	mov	r2, r4
 800f468:	fb02 f203 	mul.w	r2, r2, r3
 800f46c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f470:	4629      	mov	r1, r5
 800f472:	fb01 f303 	mul.w	r3, r1, r3
 800f476:	441a      	add	r2, r3
 800f478:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f47c:	4621      	mov	r1, r4
 800f47e:	fba3 1301 	umull	r1, r3, r3, r1
 800f482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f486:	460b      	mov	r3, r1
 800f488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f48c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f490:	18d3      	adds	r3, r2, r3
 800f492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f496:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f49a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f49e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f4a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4a6:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f4aa:	6139      	str	r1, [r7, #16]
 800f4ac:	f143 0300 	adc.w	r3, r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f4b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f4ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4be:	f04f 0000 	mov.w	r0, #0
 800f4c2:	f04f 0100 	mov.w	r1, #0
 800f4c6:	0cd0      	lsrs	r0, r2, #19
 800f4c8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f4cc:	0cd9      	lsrs	r1, r3, #19
 800f4ce:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f4d2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800f4da:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f4dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f4e0:	891b      	ldrh	r3, [r3, #8]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	673b      	str	r3, [r7, #112]	; 0x70
 800f4e8:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f4ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f4ee:	462b      	mov	r3, r5
 800f4f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f4f4:	4642      	mov	r2, r8
 800f4f6:	fb02 f203 	mul.w	r2, r2, r3
 800f4fa:	464b      	mov	r3, r9
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	fb01 f303 	mul.w	r3, r1, r3
 800f502:	4413      	add	r3, r2
 800f504:	4622      	mov	r2, r4
 800f506:	4641      	mov	r1, r8
 800f508:	fba2 1201 	umull	r1, r2, r2, r1
 800f50c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f510:	460a      	mov	r2, r1
 800f512:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f516:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f51a:	4413      	add	r3, r2
 800f51c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f520:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f524:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f528:	4622      	mov	r2, r4
 800f52a:	fb02 f203 	mul.w	r2, r2, r3
 800f52e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f532:	4629      	mov	r1, r5
 800f534:	fb01 f303 	mul.w	r3, r1, r3
 800f538:	4413      	add	r3, r2
 800f53a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f53e:	4621      	mov	r1, r4
 800f540:	fba2 1201 	umull	r1, r2, r2, r1
 800f544:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f548:	460a      	mov	r2, r1
 800f54a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f54e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f552:	4413      	add	r3, r2
 800f554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f558:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f55c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f560:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f564:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f568:	88db      	ldrh	r3, [r3, #6]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	2200      	movs	r2, #0
 800f56e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f570:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f572:	f04f 0200 	mov.w	r2, #0
 800f576:	f04f 0300 	mov.w	r3, #0
 800f57a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f57e:	4629      	mov	r1, r5
 800f580:	01cb      	lsls	r3, r1, #7
 800f582:	4621      	mov	r1, r4
 800f584:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f588:	4621      	mov	r1, r4
 800f58a:	01ca      	lsls	r2, r1, #7
 800f58c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f590:	1884      	adds	r4, r0, r2
 800f592:	60bc      	str	r4, [r7, #8]
 800f594:	eb41 0303 	adc.w	r3, r1, r3
 800f598:	60fb      	str	r3, [r7, #12]
 800f59a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f59e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f5a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f5a6:	88db      	ldrh	r3, [r3, #6]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	663b      	str	r3, [r7, #96]	; 0x60
 800f5ae:	667a      	str	r2, [r7, #100]	; 0x64
 800f5b0:	f04f 0200 	mov.w	r2, #0
 800f5b4:	f04f 0300 	mov.w	r3, #0
 800f5b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f5bc:	4629      	mov	r1, r5
 800f5be:	020b      	lsls	r3, r1, #8
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	020a      	lsls	r2, r1, #8
 800f5ca:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f5ce:	f7f0 fe77 	bl	80002c0 <__aeabi_uldivmod>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f5da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5de:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f5e2:	6039      	str	r1, [r7, #0]
 800f5e4:	f143 0300 	adc.w	r3, r3, #0
 800f5e8:	607b      	str	r3, [r7, #4]
 800f5ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f5ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f5f2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f5f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5fa:	f04f 0300 	mov.w	r3, #0
 800f5fe:	f7f0 fe5f 	bl	80002c0 <__aeabi_uldivmod>
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f60a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f60e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f612:	f173 0300 	sbcs.w	r3, r3, #0
 800f616:	d305      	bcc.n	800f624 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f618:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f61c:	f04f 0300 	mov.w	r3, #0
 800f620:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f624:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f628:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f62c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f62e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	021b      	lsls	r3, r3, #8
 800f636:	4618      	mov	r0, r3
 800f638:	f7fe ffcd 	bl	800e5d6 <VL53L1_isqrt>
 800f63c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f644:	785b      	ldrb	r3, [r3, #1]
 800f646:	461a      	mov	r2, r3
 800f648:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f64c:	fb02 f303 	mul.w	r3, r2, r3
 800f650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f654:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f658:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f65a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f65e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f660:	4293      	cmp	r3, r2
 800f662:	d218      	bcs.n	800f696 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f66c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f670:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f672:	1ad3      	subs	r3, r2, r3
 800f674:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f678:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f67c:	021b      	lsls	r3, r3, #8
 800f67e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f682:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d203      	bcs.n	800f696 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f68e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f692:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f696:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f69a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f69c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6a0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f6a2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f6a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f6a8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f6aa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f6ae:	f000 f854 	bl	800f75a <VL53L1_f_002>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f6b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6ba:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f6bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f6c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f6ca:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6d4:	fb02 f303 	mul.w	r3, r2, r3
 800f6d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f6dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f6e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6ea:	091b      	lsrs	r3, r3, #4
 800f6ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f6f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f6f4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f6f6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f6f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6fc:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f6fe:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f704:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f706:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f70a:	f000 f826 	bl	800f75a <VL53L1_f_002>
 800f70e:	4603      	mov	r3, r0
 800f710:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f712:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f716:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f718:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f71c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f720:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f724:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f728:	429a      	cmp	r2, r3
 800f72a:	da07      	bge.n	800f73c <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f72c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f730:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f738:	801a      	strh	r2, [r3, #0]
 800f73a:	e006      	b.n	800f74a <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f73c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f740:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f748:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f74a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f74e:	4618      	mov	r0, r3
 800f750:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f754:	46bd      	mov	sp, r7
 800f756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f75a <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b086      	sub	sp, #24
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
 800f766:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f768:	2300      	movs	r3, #0
 800f76a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f76c:	2300      	movs	r3, #0
 800f76e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	fb03 f303 	mul.w	r3, r3, r3
 800f77c:	693a      	ldr	r2, [r7, #16]
 800f77e:	4413      	add	r3, r2
 800f780:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f782:	6938      	ldr	r0, [r7, #16]
 800f784:	f7fe ff27 	bl	800e5d6 <VL53L1_isqrt>
 800f788:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	4413      	add	r3, r2
 800f790:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	011b      	lsls	r3, r3, #4
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe ff1d 	bl	800e5d6 <VL53L1_isqrt>
 800f79c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	fb02 f303 	mul.w	r3, r2, r3
 800f7a6:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d009      	beq.n	800f7c2 <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7c0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f7c2:	697b      	ldr	r3, [r7, #20]

}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3718      	adds	r7, #24
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2218      	movs	r2, #24
 800f7dc:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	73fb      	strb	r3, [r7, #15]
 800f802:	e01f      	b.n	800f844 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	4413      	add	r3, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	4413      	add	r3, r2
 800f814:	2200      	movs	r2, #0
 800f816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f81a:	7bfb      	ldrb	r3, [r7, #15]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f826:	7bfa      	ldrb	r2, [r7, #15]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	322e      	adds	r2, #46	; 0x2e
 800f82c:	2100      	movs	r1, #0
 800f82e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f832:	7bfa      	ldrb	r2, [r7, #15]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	3246      	adds	r2, #70	; 0x46
 800f838:	2100      	movs	r1, #0
 800f83a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f83e:	7bfb      	ldrb	r3, [r7, #15]
 800f840:	3301      	adds	r3, #1
 800f842:	73fb      	strb	r3, [r7, #15]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	785b      	ldrb	r3, [r3, #1]
 800f848:	7bfa      	ldrb	r2, [r7, #15]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d3da      	bcc.n	800f804 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2208      	movs	r2, #8
 800f85a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f86c:	461a      	mov	r2, r3
 800f86e:	2118      	movs	r1, #24
 800f870:	2000      	movs	r0, #0
 800f872:	f7ff f9e8 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800f87c:	461a      	mov	r2, r3
 800f87e:	2118      	movs	r1, #24
 800f880:	2000      	movs	r0, #0
 800f882:	f7ff f9e0 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f88c:	461a      	mov	r2, r3
 800f88e:	2118      	movs	r1, #24
 800f890:	2000      	movs	r0, #0
 800f892:	f7ff f9d8 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800f89c:	461a      	mov	r2, r3
 800f89e:	2118      	movs	r1, #24
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	f7ff f9d0 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	2118      	movs	r1, #24
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	f7ff f9c8 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800f8b6:	bf00      	nop
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f8be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8c2:	b090      	sub	sp, #64	; 0x40
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	61b9      	str	r1, [r7, #24]
 800f8c8:	617a      	str	r2, [r7, #20]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	83fb      	strh	r3, [r7, #30]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800f8e6:	f04f 0200 	mov.w	r2, #0
 800f8ea:	f04f 0300 	mov.w	r3, #0
 800f8ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800f8fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f900:	7a5a      	ldrb	r2, [r3, #9]
 800f902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f904:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800f906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f908:	7a1a      	ldrb	r2, [r3, #8]
 800f90a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f90c:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800f90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f910:	7a9a      	ldrb	r2, [r3, #10]
 800f912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f914:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800f916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f918:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f91c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f91e:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800f920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff f93c 	bl	800eba4 <VL53L1_decode_vcsel_period>
 800f92c:	4603      	mov	r3, r0
 800f92e:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800f930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f932:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800f934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f93a:	17da      	asrs	r2, r3, #31
 800f93c:	60bb      	str	r3, [r7, #8]
 800f93e:	60fa      	str	r2, [r7, #12]
 800f940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f944:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800f948:	8bfb      	ldrh	r3, [r7, #30]
 800f94a:	2200      	movs	r2, #0
 800f94c:	4698      	mov	r8, r3
 800f94e:	4691      	mov	r9, r2
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	fb08 f203 	mul.w	r2, r8, r3
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	fb09 f303 	mul.w	r3, r9, r3
 800f95c:	4413      	add	r3, r2
 800f95e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f960:	fba2 4508 	umull	r4, r5, r2, r8
 800f964:	442b      	add	r3, r5
 800f966:	461d      	mov	r5, r3
 800f968:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800f96c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800f970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f974:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800f978:	f143 0b00 	adc.w	fp, r3, #0
 800f97c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800f980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f984:	2b00      	cmp	r3, #0
 800f986:	da08      	bge.n	800f99a <VL53L1_f_018+0xdc>
 800f988:	f640 71ff 	movw	r1, #4095	; 0xfff
 800f98c:	1851      	adds	r1, r2, r1
 800f98e:	6039      	str	r1, [r7, #0]
 800f990:	f143 0300 	adc.w	r3, r3, #0
 800f994:	607b      	str	r3, [r7, #4]
 800f996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f99a:	f04f 0000 	mov.w	r0, #0
 800f99e:	f04f 0100 	mov.w	r1, #0
 800f9a2:	0b10      	lsrs	r0, r2, #12
 800f9a4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800f9a8:	1319      	asrs	r1, r3, #12
 800f9aa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f9b8:	e062      	b.n	800fa80 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800f9ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9be:	089b      	lsrs	r3, r3, #2
 800f9c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800f9c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f9c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9ca:	4413      	add	r3, r2
 800f9cc:	7c9b      	ldrb	r3, [r3, #18]
 800f9ce:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	dd4f      	ble.n	800fa76 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800f9d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9d8:	7a9b      	ldrb	r3, [r3, #10]
 800f9da:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d20f      	bcs.n	800fa02 <VL53L1_f_018+0x144>
 800f9e2:	7f7b      	ldrb	r3, [r7, #29]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00c      	beq.n	800fa02 <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800f9e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ee:	3206      	adds	r2, #6
 800f9f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	441a      	add	r2, r3
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	fb02 f303 	mul.w	r3, r2, r3
 800f9fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa00:	e004      	b.n	800fa0c <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa06:	fb02 f303 	mul.w	r3, r2, r3
 800fa0a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fe fde1 	bl	800e5d6 <VL53L1_isqrt>
 800fa14:	4603      	mov	r3, r0
 800fa16:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fa18:	6a3b      	ldr	r3, [r7, #32]
 800fa1a:	0fda      	lsrs	r2, r3, #31
 800fa1c:	4413      	add	r3, r2
 800fa1e:	105b      	asrs	r3, r3, #1
 800fa20:	461a      	mov	r2, r3
 800fa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa24:	4413      	add	r3, r2
 800fa26:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fa28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	fb92 f3f3 	sdiv	r3, r2, r3
 800fa30:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	69ba      	ldr	r2, [r7, #24]
 800fa36:	fb02 f303 	mul.w	r3, r2, r3
 800fa3a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3e:	3308      	adds	r3, #8
 800fa40:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	da00      	bge.n	800fa4a <VL53L1_f_018+0x18c>
 800fa48:	330f      	adds	r3, #15
 800fa4a:	111b      	asrs	r3, r3, #4
 800fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fa4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	4413      	add	r3, r2
 800fa54:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fa56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	da01      	bge.n	800fa62 <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fa62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa68:	3216      	adds	r2, #22
 800fa6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fa70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa74:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fa76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa82:	7a9b      	ldrb	r3, [r3, #10]
 800fa84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d396      	bcc.n	800f9ba <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fa8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa8e:	2200      	movs	r2, #0
 800fa90:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fa92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa94:	7a1b      	ldrb	r3, [r3, #8]
 800fa96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa9a:	e033      	b.n	800fb04 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fa9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800faa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faa2:	3206      	adds	r2, #6
 800faa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800faa8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800faac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faae:	3116      	adds	r1, #22
 800fab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	dd13      	ble.n	800fae0 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fabc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fabe:	4413      	add	r3, r2
 800fac0:	2201      	movs	r2, #1
 800fac2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faca:	4413      	add	r3, r2
 800facc:	2201      	movs	r2, #1
 800face:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fad4:	791b      	ldrb	r3, [r3, #4]
 800fad6:	3301      	adds	r3, #1
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fadc:	711a      	strb	r2, [r3, #4]
 800fade:	e00c      	b.n	800fafa <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fae6:	4413      	add	r3, r2
 800fae8:	2200      	movs	r2, #0
 800faea:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800faec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faf2:	4413      	add	r3, r2
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fafa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fafe:	3301      	adds	r3, #1
 800fb00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb06:	7a9b      	ldrb	r3, [r3, #10]
 800fb08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d3c5      	bcc.n	800fa9c <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fb10:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3740      	adds	r7, #64	; 0x40
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb1e <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fb1e:	b480      	push	{r7}
 800fb20:	b085      	sub	sp, #20
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fb32:	2300      	movs	r3, #0
 800fb34:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
 800fb42:	e02d      	b.n	800fba0 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	3301      	adds	r3, #1
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	78d2      	ldrb	r2, [r2, #3]
 800fb4c:	fb93 f1f2 	sdiv	r1, r3, r2
 800fb50:	fb01 f202 	mul.w	r2, r1, r2
 800fb54:	1a9b      	subs	r3, r3, r2
 800fb56:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	789b      	ldrb	r3, [r3, #2]
 800fb5c:	7bfa      	ldrb	r2, [r7, #15]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d21b      	bcs.n	800fb9a <VL53L1_f_019+0x7c>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	789b      	ldrb	r3, [r3, #2]
 800fb66:	7b3a      	ldrb	r2, [r7, #12]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d216      	bcs.n	800fb9a <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	4413      	add	r3, r2
 800fb72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10f      	bne.n	800fb9a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fb7a:	7b3b      	ldrb	r3, [r7, #12]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d108      	bne.n	800fb9a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fb88:	7bbb      	ldrb	r3, [r7, #14]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d105      	bne.n	800fb9a <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	7bfa      	ldrb	r2, [r7, #15]
 800fb92:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fb96:	2301      	movs	r3, #1
 800fb98:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	73fb      	strb	r3, [r7, #15]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	78db      	ldrb	r3, [r3, #3]
 800fba4:	7bfa      	ldrb	r2, [r7, #15]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d3cc      	bcc.n	800fb44 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fbaa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3714      	adds	r7, #20
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b085      	sub	sp, #20
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fbd8:	73fb      	strb	r3, [r7, #15]
 800fbda:	e05a      	b.n	800fc92 <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	78da      	ldrb	r2, [r3, #3]
 800fbe0:	7bfb      	ldrb	r3, [r7, #15]
 800fbe2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbe6:	fb01 f202 	mul.w	r2, r1, r2
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	78d2      	ldrb	r2, [r2, #3]
 800fbf6:	fb93 f1f2 	sdiv	r1, r3, r2
 800fbfa:	fb01 f202 	mul.w	r2, r1, r2
 800fbfe:	1a9b      	subs	r3, r3, r2
 800fc00:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	789b      	ldrb	r3, [r3, #2]
 800fc06:	7b7a      	ldrb	r2, [r7, #13]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d23f      	bcs.n	800fc8c <VL53L1_f_020+0xd2>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	789b      	ldrb	r3, [r3, #2]
 800fc10:	7b3a      	ldrb	r2, [r7, #12]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d23a      	bcs.n	800fc8c <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800fc16:	7b7b      	ldrb	r3, [r7, #13]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10e      	bne.n	800fc42 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800fc24:	7b3b      	ldrb	r3, [r7, #12]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	4413      	add	r3, r2
 800fc2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d107      	bne.n	800fc42 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fc38:	3301      	adds	r3, #1
 800fc3a:	b2da      	uxtb	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d905      	bls.n	800fc5e <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800fc5e:	7b7b      	ldrb	r3, [r7, #13]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d009      	beq.n	800fc80 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800fc6c:	7b7b      	ldrb	r3, [r7, #13]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	4413      	add	r3, r2
 800fc78:	460a      	mov	r2, r1
 800fc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc7e:	e005      	b.n	800fc8c <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800fc80:	7b7b      	ldrb	r3, [r7, #13]
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	4413      	add	r3, r2
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800fc8c:	7bfb      	ldrb	r3, [r7, #15]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800fc92:	7bfa      	ldrb	r2, [r7, #15]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fc9a:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800fca0:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800fca2:	429a      	cmp	r2, r3
 800fca4:	db9a      	blt.n	800fbdc <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fca6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr

0800fcb6 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b087      	sub	sp, #28
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	78db      	ldrb	r3, [r3, #3]
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800fcde:	7cbb      	ldrb	r3, [r7, #18]
 800fce0:	085b      	lsrs	r3, r3, #1
 800fce2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fcea:	75fb      	strb	r3, [r7, #23]
 800fcec:	e0a2      	b.n	800fe34 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	78da      	ldrb	r2, [r3, #3]
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcf8:	fb01 f202 	mul.w	r2, r1, r2
 800fcfc:	1a9b      	subs	r3, r3, r2
 800fcfe:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800fd00:	7dfb      	ldrb	r3, [r7, #23]
 800fd02:	3301      	adds	r3, #1
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	78d2      	ldrb	r2, [r2, #3]
 800fd08:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd0c:	fb01 f202 	mul.w	r2, r1, r2
 800fd10:	1a9b      	subs	r3, r3, r2
 800fd12:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	789b      	ldrb	r3, [r3, #2]
 800fd18:	7d7a      	ldrb	r2, [r7, #21]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	f080 8087 	bcs.w	800fe2e <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800fd24:	7d3a      	ldrb	r2, [r7, #20]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	f080 8081 	bcs.w	800fe2e <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800fd2c:	7d7b      	ldrb	r3, [r7, #21]
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	4413      	add	r3, r2
 800fd32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d12f      	bne.n	800fd9a <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800fd3a:	7d3b      	ldrb	r3, [r7, #20]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	4413      	add	r3, r2
 800fd40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d028      	beq.n	800fd9a <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800fd48:	7d3b      	ldrb	r3, [r7, #20]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd52:	3b01      	subs	r3, #1
 800fd54:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fd5c:	7cfa      	ldrb	r2, [r7, #19]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d21b      	bcs.n	800fd9a <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fd62:	7cfa      	ldrb	r2, [r7, #19]
 800fd64:	4613      	mov	r3, r2
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	4413      	add	r3, r2
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	4413      	add	r3, r2
 800fd74:	3304      	adds	r3, #4
 800fd76:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	7dfa      	ldrb	r2, [r7, #23]
 800fd7c:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	3301      	adds	r3, #1
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	22ff      	movs	r2, #255	; 0xff
 800fd8c:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2200      	movs	r2, #0
 800fd98:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800fd9a:	7d7b      	ldrb	r3, [r7, #21]
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d042      	beq.n	800fe2e <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800fda8:	7d3b      	ldrb	r3, [r7, #20]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	4413      	add	r3, r2
 800fdae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d13b      	bne.n	800fe2e <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800fdb6:	7d7b      	ldrb	r3, [r7, #21]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fdca:	7cfa      	ldrb	r2, [r7, #19]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d22e      	bcs.n	800fe2e <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fdd0:	7cfa      	ldrb	r2, [r7, #19]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	00db      	lsls	r3, r3, #3
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4413      	add	r3, r2
 800fde2:	3304      	adds	r3, #4
 800fde4:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	7dfa      	ldrb	r2, [r7, #23]
 800fdea:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800fdec:	7dfb      	ldrb	r3, [r7, #23]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	3301      	adds	r3, #1
 800fe04:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	799b      	ldrb	r3, [r3, #6]
 800fe22:	7cba      	ldrb	r2, [r7, #18]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d202      	bcs.n	800fe2e <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	7cba      	ldrb	r2, [r7, #18]
 800fe2c:	719a      	strb	r2, [r3, #6]
		blb++) {
 800fe2e:	7dfb      	ldrb	r3, [r7, #23]
 800fe30:	3301      	adds	r3, #1
 800fe32:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800fe34:	7dfa      	ldrb	r2, [r7, #23]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe3c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800fe42:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800fe44:	429a      	cmp	r2, r3
 800fe46:	f6ff af52 	blt.w	800fcee <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe4a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b090      	sub	sp, #64	; 0x40
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	4603      	mov	r3, r0
 800fe62:	6039      	str	r1, [r7, #0]
 800fe64:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800fe6c:	f107 030c 	add.w	r3, r7, #12
 800fe70:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d965      	bls.n	800ff54 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800fe88:	e05f      	b.n	800ff4a <VL53L1_f_028+0xf0>

		swapped = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800fe90:	2301      	movs	r3, #1
 800fe92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fe96:	e051      	b.n	800ff3c <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 800fe98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe9c:	1e5a      	subs	r2, r3, #1
 800fe9e:	4613      	mov	r3, r2
 800fea0:	00db      	lsls	r3, r3, #3
 800fea2:	4413      	add	r3, r2
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	4413      	add	r3, r2
 800feae:	3304      	adds	r3, #4
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 800feb2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800feb6:	4613      	mov	r3, r2
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	4413      	add	r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fec2:	683a      	ldr	r2, [r7, #0]
 800fec4:	4413      	add	r3, r2
 800fec6:	3304      	adds	r3, #4
 800fec8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d118      	bne.n	800ff02 <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800fed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed2:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 800fed8:	429a      	cmp	r2, r3
 800feda:	da2a      	bge.n	800ff32 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800fedc:	2224      	movs	r2, #36	; 0x24
 800fede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fee2:	f009 faed 	bl	80194c0 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fee6:	2224      	movs	r2, #36	; 0x24
 800fee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800feea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feec:	f009 fae8 	bl	80194c0 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fef0:	2224      	movs	r2, #36	; 0x24
 800fef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fef4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fef6:	f009 fae3 	bl	80194c0 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800fefa:	2301      	movs	r3, #1
 800fefc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ff00:	e017      	b.n	800ff32 <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 800ff02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff04:	699a      	ldr	r2, [r3, #24]
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	699b      	ldr	r3, [r3, #24]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d911      	bls.n	800ff32 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800ff0e:	2224      	movs	r2, #36	; 0x24
 800ff10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff14:	f009 fad4 	bl	80194c0 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800ff18:	2224      	movs	r2, #36	; 0x24
 800ff1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff1e:	f009 facf 	bl	80194c0 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800ff22:	2224      	movs	r2, #36	; 0x24
 800ff24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff28:	f009 faca 	bl	80194c0 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800ff32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ff36:	3301      	adds	r3, #1
 800ff38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ff42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d3a6      	bcc.n	800fe98 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 800ff4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d19b      	bne.n	800fe8a <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 800ff52:	e000      	b.n	800ff56 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 800ff54:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800ff56:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3740      	adds	r7, #64	; 0x40
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b087      	sub	sp, #28
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	4603      	mov	r3, r0
 800ff6a:	60b9      	str	r1, [r7, #8]
 800ff6c:	607a      	str	r2, [r7, #4]
 800ff6e:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ff70:	2300      	movs	r3, #0
 800ff72:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800ff7c:	7bfa      	ldrb	r2, [r7, #15]
 800ff7e:	4613      	mov	r3, r2
 800ff80:	00db      	lsls	r3, r3, #3
 800ff82:	4413      	add	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	3304      	adds	r3, #4
 800ff90:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	2200      	movs	r2, #0
 800ff96:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	75fb      	strb	r3, [r7, #23]
 800ffa4:	e01c      	b.n	800ffe0 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	78da      	ldrb	r2, [r3, #3]
 800ffaa:	7dfb      	ldrb	r3, [r7, #23]
 800ffac:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffb0:	fb01 f202 	mul.w	r2, r1, r2
 800ffb4:	1a9b      	subs	r3, r3, r2
 800ffb6:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	68da      	ldr	r2, [r3, #12]
 800ffbc:	7d79      	ldrb	r1, [r7, #21]
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	3106      	adds	r1, #6
 800ffc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ffc6:	441a      	add	r2, r3
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	689a      	ldr	r2, [r3, #8]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	441a      	add	r2, r3
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800ffda:	7dfb      	ldrb	r3, [r7, #23]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	75fb      	strb	r3, [r7, #23]
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	791b      	ldrb	r3, [r3, #4]
 800ffe4:	7dfa      	ldrb	r2, [r7, #23]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d9dd      	bls.n	800ffa6 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	68da      	ldr	r2, [r3, #12]
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	689b      	ldr	r3, [r3, #8]
 800fff2:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800fff8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	371c      	adds	r7, #28
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010008:	b590      	push	{r4, r7, lr}
 801000a:	b08d      	sub	sp, #52	; 0x34
 801000c:	af02      	add	r7, sp, #8
 801000e:	60ba      	str	r2, [r7, #8]
 8010010:	607b      	str	r3, [r7, #4]
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
 8010016:	460b      	mov	r3, r1
 8010018:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801001a:	2300      	movs	r3, #0
 801001c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8010020:	2300      	movs	r3, #0
 8010022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8010026:	2300      	movs	r3, #0
 8010028:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 801002a:	2300      	movs	r3, #0
 801002c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 801002e:	2300      	movs	r3, #0
 8010030:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010036:	7bfa      	ldrb	r2, [r7, #15]
 8010038:	4613      	mov	r3, r2
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	4413      	add	r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4413      	add	r3, r2
 8010048:	3304      	adds	r3, #4
 801004a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	789b      	ldrb	r3, [r3, #2]
 8010050:	2bff      	cmp	r3, #255	; 0xff
 8010052:	d102      	bne.n	801005a <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	2201      	movs	r2, #1
 8010058:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	789b      	ldrb	r3, [r3, #2]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	78d2      	ldrb	r2, [r2, #3]
 8010062:	fbb3 f1f2 	udiv	r1, r3, r2
 8010066:	fb01 f202 	mul.w	r2, r1, r2
 801006a:	1a9b      	subs	r3, r3, r2
 801006c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8010070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010074:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	b29a      	uxth	r2, r3
 801007c:	8c3b      	ldrh	r3, [r7, #32]
 801007e:	4413      	add	r3, r2
 8010080:	b29b      	uxth	r3, r3
 8010082:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8010084:	8c3a      	ldrh	r2, [r7, #32]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	789b      	ldrb	r3, [r3, #2]
 801008a:	b29b      	uxth	r3, r3
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	b29b      	uxth	r3, r3
 8010090:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 8010092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010096:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	791b      	ldrb	r3, [r3, #4]
 801009c:	b29a      	uxth	r2, r3
 801009e:	8bfb      	ldrh	r3, [r7, #30]
 80100a0:	4413      	add	r3, r2
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80100a6:	8bfa      	ldrh	r2, [r7, #30]
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	789b      	ldrb	r3, [r3, #2]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80100b4:	8bfa      	ldrh	r2, [r7, #30]
 80100b6:	8c3b      	ldrh	r3, [r7, #32]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80100be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	dd01      	ble.n	80100ca <VL53L1_f_027+0xc2>
		window_width = 3;
 80100c6:	2303      	movs	r3, #3
 80100c8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80100ca:	8c3a      	ldrh	r2, [r7, #32]
 80100cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100ce:	4413      	add	r3, r2
 80100d0:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80100d2:	b219      	sxth	r1, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	78da      	ldrb	r2, [r3, #3]
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	3314      	adds	r3, #20
 80100dc:	7bbc      	ldrb	r4, [r7, #14]
 80100de:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80100e2:	9301      	str	r3, [sp, #4]
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	4623      	mov	r3, r4
 80100ea:	f000 f846 	bl	801017a <VL53L1_f_030>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 80100f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d114      	bne.n	8010126 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 80100fc:	8bfa      	ldrh	r2, [r7, #30]
 80100fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010100:	1ad3      	subs	r3, r2, r3
 8010102:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8010104:	b218      	sxth	r0, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	78da      	ldrb	r2, [r3, #3]
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	331c      	adds	r3, #28
 801010e:	7bbc      	ldrb	r4, [r7, #14]
 8010110:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8010114:	9301      	str	r3, [sp, #4]
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	4623      	mov	r3, r4
 801011c:	f000 f82d 	bl	801017a <VL53L1_f_030>
 8010120:	4603      	mov	r3, r0
 8010122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	695a      	ldr	r2, [r3, #20]
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	69db      	ldr	r3, [r3, #28]
 801012e:	429a      	cmp	r2, r3
 8010130:	d909      	bls.n	8010146 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	695b      	ldr	r3, [r3, #20]
 8010136:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	69ba      	ldr	r2, [r7, #24]
 8010144:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	699a      	ldr	r2, [r3, #24]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	695b      	ldr	r3, [r3, #20]
 801014e:	429a      	cmp	r2, r3
 8010150:	d203      	bcs.n	801015a <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	699a      	ldr	r2, [r3, #24]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	699a      	ldr	r2, [r3, #24]
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	69db      	ldr	r3, [r3, #28]
 8010162:	429a      	cmp	r2, r3
 8010164:	d903      	bls.n	801016e <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	699a      	ldr	r2, [r3, #24]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 801016e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010172:	4618      	mov	r0, r3
 8010174:	372c      	adds	r7, #44	; 0x2c
 8010176:	46bd      	mov	sp, r7
 8010178:	bd90      	pop	{r4, r7, pc}

0801017a <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 801017a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017e:	b09d      	sub	sp, #116	; 0x74
 8010180:	af00      	add	r7, sp, #0
 8010182:	461c      	mov	r4, r3
 8010184:	4603      	mov	r3, r0
 8010186:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801018a:	460b      	mov	r3, r1
 801018c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010190:	4613      	mov	r3, r2
 8010192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010196:	4623      	mov	r3, r4
 8010198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801019c:	2300      	movs	r3, #0
 801019e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80101a8:	2300      	movs	r3, #0
 80101aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80101ae:	f04f 0200 	mov.w	r2, #0
 80101b2:	f04f 0300 	mov.w	r3, #0
 80101b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80101ba:	f04f 0200 	mov.w	r2, #0
 80101be:	f04f 0300 	mov.w	r3, #0
 80101c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80101c6:	f04f 0200 	mov.w	r2, #0
 80101ca:	f04f 0300 	mov.w	r3, #0
 80101ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80101d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80101d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101da:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80101dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f000 809c 	beq.w	801031e <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80101e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80101ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80101ee:	e08f      	b.n	8010310 <VL53L1_f_030+0x196>

		if (lb < 0)
 80101f0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	da09      	bge.n	801020c <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 80101f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010202:	4413      	add	r3, r2
 8010204:	b29b      	uxth	r3, r3
 8010206:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801020a:	e00a      	b.n	8010222 <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 801020c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8010210:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8010214:	fb91 f3f2 	sdiv	r3, r1, r2
 8010218:	fb02 f303 	mul.w	r3, r2, r3
 801021c:	1acb      	subs	r3, r1, r3
 801021e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 8010222:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010226:	2b00      	cmp	r3, #0
 8010228:	db6b      	blt.n	8010302 <VL53L1_f_030+0x188>
 801022a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801022e:	2b17      	cmp	r3, #23
 8010230:	dc67      	bgt.n	8010302 <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 8010232:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010236:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801023a:	3306      	adds	r3, #6
 801023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010240:	17da      	asrs	r2, r3, #31
 8010242:	633b      	str	r3, [r7, #48]	; 0x30
 8010244:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8010246:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801024a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801024e:	17da      	asrs	r2, r3, #31
 8010250:	62bb      	str	r3, [r7, #40]	; 0x28
 8010252:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8010254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801025a:	4602      	mov	r2, r0
 801025c:	1a9b      	subs	r3, r3, r2
 801025e:	623b      	str	r3, [r7, #32]
 8010260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010262:	460a      	mov	r2, r1
 8010264:	eb63 0302 	sbc.w	r3, r3, r2
 8010268:	627b      	str	r3, [r7, #36]	; 0x24
 801026a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801026e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 8010272:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010276:	2b00      	cmp	r3, #0
 8010278:	d009      	beq.n	801028e <VL53L1_f_030+0x114>
 801027a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801027e:	2b00      	cmp	r3, #0
 8010280:	da05      	bge.n	801028e <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 8010282:	f04f 0200 	mov.w	r2, #0
 8010286:	f04f 0300 	mov.w	r3, #0
 801028a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 801028e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010292:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010296:	1884      	adds	r4, r0, r2
 8010298:	61bc      	str	r4, [r7, #24]
 801029a:	eb41 0303 	adc.w	r3, r1, r3
 801029e:	61fb      	str	r3, [r7, #28]
 80102a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80102a4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80102a8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80102ac:	17da      	asrs	r2, r3, #31
 80102ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80102b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80102b2:	f04f 0200 	mov.w	r2, #0
 80102b6:	f04f 0300 	mov.w	r3, #0
 80102ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102bc:	02cb      	lsls	r3, r1, #11
 80102be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102c0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80102c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102c6:	02ca      	lsls	r2, r1, #11
 80102c8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80102cc:	f143 0600 	adc.w	r6, r3, #0
 80102d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102d2:	fb06 f203 	mul.w	r2, r6, r3
 80102d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d8:	fb05 f303 	mul.w	r3, r5, r3
 80102dc:	441a      	add	r2, r3
 80102de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102e0:	fba3 ab05 	umull	sl, fp, r3, r5
 80102e4:	eb02 030b 	add.w	r3, r2, fp
 80102e8:	469b      	mov	fp, r3
			weighted_sum +=
 80102ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80102ee:	eb12 010a 	adds.w	r1, r2, sl
 80102f2:	6139      	str	r1, [r7, #16]
 80102f4:	eb43 030b 	adc.w	r3, r3, fp
 80102f8:	617b      	str	r3, [r7, #20]
 80102fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80102fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8010302:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010306:	b29b      	uxth	r3, r3
 8010308:	3301      	adds	r3, #1
 801030a:	b29b      	uxth	r3, r3
 801030c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010310:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8010314:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010318:	429a      	cmp	r2, r3
 801031a:	f77f af69 	ble.w	80101f0 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 801031e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010322:	2a01      	cmp	r2, #1
 8010324:	f173 0300 	sbcs.w	r3, r3, #0
 8010328:	db3b      	blt.n	80103a2 <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 801032a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801032e:	0fd9      	lsrs	r1, r3, #31
 8010330:	2000      	movs	r0, #0
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	60f8      	str	r0, [r7, #12]
 8010336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801033a:	4621      	mov	r1, r4
 801033c:	eb11 0802 	adds.w	r8, r1, r2
 8010340:	4629      	mov	r1, r5
 8010342:	eb41 0903 	adc.w	r9, r1, r3
 8010346:	f04f 0200 	mov.w	r2, #0
 801034a:	f04f 0300 	mov.w	r3, #0
 801034e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8010352:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8010356:	ea4f 0369 	mov.w	r3, r9, asr #1
 801035a:	4610      	mov	r0, r2
 801035c:	4619      	mov	r1, r3
 801035e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010362:	1814      	adds	r4, r2, r0
 8010364:	603c      	str	r4, [r7, #0]
 8010366:	414b      	adcs	r3, r1
 8010368:	607b      	str	r3, [r7, #4]
 801036a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801036e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8010372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010376:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801037a:	f7ef ff51 	bl	8000220 <__aeabi_ldivmod>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8010386:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801038a:	2b00      	cmp	r3, #0
 801038c:	da05      	bge.n	801039a <VL53L1_f_030+0x220>
			weighted_sum = 0;
 801038e:	f04f 0200 	mov.w	r2, #0
 8010392:	f04f 0300 	mov.w	r3, #0
 8010396:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 801039a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801039c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103a0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80103a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3774      	adds	r7, #116	; 0x74
 80103aa:	46bd      	mov	sp, r7
 80103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103b0 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60b9      	str	r1, [r7, #8]
 80103b8:	607a      	str	r2, [r7, #4]
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	4603      	mov	r3, r0
 80103be:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80103c0:	2300      	movs	r3, #0
 80103c2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80103c8:	2300      	movs	r3, #0
 80103ca:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80103cc:	7bfa      	ldrb	r2, [r7, #15]
 80103ce:	4613      	mov	r3, r2
 80103d0:	00db      	lsls	r3, r3, #3
 80103d2:	4413      	add	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	3304      	adds	r3, #4
 80103e0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 80103e2:	22ac      	movs	r2, #172	; 0xac
 80103e4:	68b9      	ldr	r1, [r7, #8]
 80103e6:	6a38      	ldr	r0, [r7, #32]
 80103e8:	f009 f86a 	bl	80194c0 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80103f2:	75fb      	strb	r3, [r7, #23]
 80103f4:	e020      	b.n	8010438 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	7dfa      	ldrb	r2, [r7, #23]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d304      	bcc.n	801040a <VL53L1_f_023+0x5a>
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	791b      	ldrb	r3, [r3, #4]
 8010404:	7dfa      	ldrb	r2, [r7, #23]
 8010406:	429a      	cmp	r2, r3
 8010408:	d913      	bls.n	8010432 <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	78da      	ldrb	r2, [r3, #3]
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	fbb3 f1f2 	udiv	r1, r3, r2
 8010414:	fb01 f202 	mul.w	r2, r1, r2
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 801041c:	6a3b      	ldr	r3, [r7, #32]
 801041e:	7a9b      	ldrb	r3, [r3, #10]
 8010420:	7d7a      	ldrb	r2, [r7, #21]
 8010422:	429a      	cmp	r2, r3
 8010424:	d205      	bcs.n	8010432 <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010426:	7d7a      	ldrb	r2, [r7, #21]
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	3206      	adds	r2, #6
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8010432:	7dfb      	ldrb	r3, [r7, #23]
 8010434:	3301      	adds	r3, #1
 8010436:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010438:	7dfa      	ldrb	r2, [r7, #23]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010440:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010446:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010448:	429a      	cmp	r2, r3
 801044a:	dbd4      	blt.n	80103f6 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801044c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801045c:	b096      	sub	sp, #88	; 0x58
 801045e:	af08      	add	r7, sp, #32
 8010460:	4604      	mov	r4, r0
 8010462:	4608      	mov	r0, r1
 8010464:	4611      	mov	r1, r2
 8010466:	461a      	mov	r2, r3
 8010468:	4623      	mov	r3, r4
 801046a:	73fb      	strb	r3, [r7, #15]
 801046c:	4603      	mov	r3, r0
 801046e:	73bb      	strb	r3, [r7, #14]
 8010470:	460b      	mov	r3, r1
 8010472:	737b      	strb	r3, [r7, #13]
 8010474:	4613      	mov	r3, r2
 8010476:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010478:	2300      	movs	r3, #0
 801047a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801047e:	2300      	movs	r3, #0
 8010480:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8010484:	2300      	movs	r3, #0
 8010486:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 801049a:	2300      	movs	r3, #0
 801049c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80104aa:	7b7b      	ldrb	r3, [r7, #13]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d106      	bne.n	80104be <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80104b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b6:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80104b8:	f06f 030e 	mvn.w	r3, #14
 80104bc:	e06f      	b.n	801059e <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	7b7a      	ldrb	r2, [r7, #13]
 80104c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80104c6:	fb01 f202 	mul.w	r2, r1, r2
 80104ca:	1a9b      	subs	r3, r3, r2
 80104cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80104d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80104d4:	7b39      	ldrb	r1, [r7, #12]
 80104d6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80104da:	f107 0320 	add.w	r3, r7, #32
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	4613      	mov	r3, r2
 80104e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104ea:	f000 fddb 	bl	80110a4 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80104ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80104f2:	7b39      	ldrb	r1, [r7, #12]
 80104f4:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80104f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4613      	mov	r3, r2
 8010506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010508:	f000 fdcc 	bl	80110a4 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 801050c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010510:	2b00      	cmp	r3, #0
 8010512:	d00e      	beq.n	8010532 <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010514:	f107 021c 	add.w	r2, r7, #28
 8010518:	7b39      	ldrb	r1, [r7, #12]
 801051a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801051e:	f107 0314 	add.w	r3, r7, #20
 8010522:	9301      	str	r3, [sp, #4]
 8010524:	f107 0318 	add.w	r3, r7, #24
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	4613      	mov	r3, r2
 801052c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801052e:	f000 fdb9 	bl	80110a4 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	469c      	mov	ip, r3
 8010536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010538:	469e      	mov	lr, r3
 801053a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053c:	4698      	mov	r8, r3
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	4619      	mov	r1, r3
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	461c      	mov	r4, r3
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	461d      	mov	r5, r3
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	461e      	mov	r6, r3
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8010552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010554:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010558:	607b      	str	r3, [r7, #4]
 801055a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801055c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010560:	7bb8      	ldrb	r0, [r7, #14]
 8010562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010564:	9207      	str	r2, [sp, #28]
 8010566:	9306      	str	r3, [sp, #24]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	9205      	str	r2, [sp, #20]
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	9304      	str	r3, [sp, #16]
 8010570:	9603      	str	r6, [sp, #12]
 8010572:	9502      	str	r5, [sp, #8]
 8010574:	9401      	str	r4, [sp, #4]
 8010576:	9100      	str	r1, [sp, #0]
 8010578:	4643      	mov	r3, r8
 801057a:	4672      	mov	r2, lr
 801057c:	4661      	mov	r1, ip
 801057e:	f002 ff30 	bl	80133e2 <VL53L1_f_014>
 8010582:	4603      	mov	r3, r0
 8010584:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8010588:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 801058c:	f113 0f0f 	cmn.w	r3, #15
 8010590:	d103      	bne.n	801059a <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 8010592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010598:	801a      	strh	r2, [r3, #0]


	return status;
 801059a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3738      	adds	r7, #56	; 0x38
 80105a2:	46bd      	mov	sp, r7
 80105a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105a8 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80105a8:	b490      	push	{r4, r7}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	4611      	mov	r1, r2
 80105b4:	461a      	mov	r2, r3
 80105b6:	4623      	mov	r3, r4
 80105b8:	71fb      	strb	r3, [r7, #7]
 80105ba:	4603      	mov	r3, r0
 80105bc:	71bb      	strb	r3, [r7, #6]
 80105be:	460b      	mov	r3, r1
 80105c0:	717b      	strb	r3, [r7, #5]
 80105c2:	4613      	mov	r3, r2
 80105c4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80105c6:	2300      	movs	r3, #0
 80105c8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	79fa      	ldrb	r2, [r7, #7]
 80105d2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	2200      	movs	r2, #0
 80105d8:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	781a      	ldrb	r2, [r3, #0]
 80105de:	6a3b      	ldr	r3, [r7, #32]
 80105e0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	785a      	ldrb	r2, [r3, #1]
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	789a      	ldrb	r2, [r3, #2]
 80105ee:	6a3b      	ldr	r3, [r7, #32]
 80105f0:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	78da      	ldrb	r2, [r3, #3]
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	791a      	ldrb	r2, [r3, #4]
 80105fe:	6a3b      	ldr	r3, [r7, #32]
 8010600:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	795a      	ldrb	r2, [r3, #5]
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	791a      	ldrb	r2, [r3, #4]
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	b2db      	uxtb	r3, r3
 8010616:	3301      	adds	r3, #1
 8010618:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 801061a:	6a3b      	ldr	r3, [r7, #32]
 801061c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	8c1a      	ldrh	r2, [r3, #32]
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	b29a      	uxth	r2, r3
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	699b      	ldr	r3, [r3, #24]
 801063e:	b29a      	uxth	r2, r3
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	69db      	ldr	r3, [r3, #28]
 801064a:	b29a      	uxth	r2, r3
 801064c:	6a3b      	ldr	r3, [r7, #32]
 801064e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	461a      	mov	r2, r3
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	691a      	ldr	r2, [r3, #16]
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	461a      	mov	r2, r3
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010678:	6a3b      	ldr	r3, [r7, #32]
 801067a:	2213      	movs	r2, #19
 801067c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8010680:	887b      	ldrh	r3, [r7, #2]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00a      	beq.n	801069c <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	8c1b      	ldrh	r3, [r3, #32]
 801068a:	461a      	mov	r2, r3
 801068c:	887b      	ldrh	r3, [r7, #2]
 801068e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8010690:	429a      	cmp	r2, r3
 8010692:	d903      	bls.n	801069c <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8010694:	6a3b      	ldr	r3, [r7, #32]
 8010696:	2206      	movs	r2, #6
 8010698:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 801069c:	79bb      	ldrb	r3, [r7, #6]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	021b      	lsls	r3, r3, #8
 80106a2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	8a9b      	ldrh	r3, [r3, #20]
 80106a8:	89fa      	ldrh	r2, [r7, #14]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d205      	bcs.n	80106ba <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80106b2:	89fb      	ldrh	r3, [r7, #14]
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	81fb      	strh	r3, [r7, #14]
 80106b8:	e001      	b.n	80106be <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80106be:	797b      	ldrb	r3, [r7, #5]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	021b      	lsls	r3, r3, #8
 80106c4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80106cc:	89bb      	ldrh	r3, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80106d2:	6a3b      	ldr	r3, [r7, #32]
 80106d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80106d8:	89fa      	ldrh	r2, [r7, #14]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d805      	bhi.n	80106ea <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80106e4:	89ba      	ldrh	r2, [r7, #12]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d203      	bcs.n	80106f2 <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	2205      	movs	r2, #5
 80106ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 80106f2:	bf00      	nop
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bc90      	pop	{r4, r7}
 80106fa:	4770      	bx	lr

080106fc <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 80106fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106fe:	b08f      	sub	sp, #60	; 0x3c
 8010700:	af06      	add	r7, sp, #24
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	607a      	str	r2, [r7, #4]
 8010708:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801070a:	2300      	movs	r3, #0
 801070c:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8010712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010714:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010718:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 801071a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801071c:	f7ff f856 	bl	800f7cc <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8010720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010722:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010726:	22ac      	movs	r2, #172	; 0xac
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	4618      	mov	r0, r3
 801072c:	f008 fec8 	bl	80194c0 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	781a      	ldrb	r2, [r3, #0]
 8010734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010736:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	785a      	ldrb	r2, [r3, #1]
 801073c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801073e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	789a      	ldrb	r2, [r3, #2]
 8010744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010746:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801074e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010750:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8010752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010754:	2200      	movs	r2, #0
 8010756:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801075a:	2204      	movs	r2, #4
 801075c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 801075e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010760:	2200      	movs	r2, #0
 8010762:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010764:	2300      	movs	r3, #0
 8010766:	77bb      	strb	r3, [r7, #30]
 8010768:	e008      	b.n	801077c <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 801076a:	7fbb      	ldrb	r3, [r7, #30]
 801076c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	4413      	add	r3, r2
 8010772:	2200      	movs	r2, #0
 8010774:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010776:	7fbb      	ldrb	r3, [r7, #30]
 8010778:	3301      	adds	r3, #1
 801077a:	77bb      	strb	r3, [r7, #30]
 801077c:	7fbb      	ldrb	r3, [r7, #30]
 801077e:	2b04      	cmp	r3, #4
 8010780:	d9f3      	bls.n	801076a <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8010782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010784:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010788:	4618      	mov	r0, r3
 801078a:	f7fd ff58 	bl	800e63e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8010792:	461a      	mov	r2, r3
 8010794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010796:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801079a:	4619      	mov	r1, r3
 801079c:	4610      	mov	r0, r2
 801079e:	f7fd ff8e 	bl	800e6be <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80107a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe fb66 	bl	800ee7a <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80107ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fd fffc 	bl	800e7b2 <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d009      	beq.n	80107d8 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 80107c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80107ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107cc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80107d0:	461a      	mov	r2, r3
 80107d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107d4:	f000 fdae 	bl	8011334 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80107e0:	2300      	movs	r3, #0
 80107e2:	77bb      	strb	r3, [r7, #30]
 80107e4:	e01e      	b.n	8010824 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 80107e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d117      	bne.n	801081e <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 80107ee:	7fbb      	ldrb	r3, [r7, #30]
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	3304      	adds	r3, #4
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	4413      	add	r3, r2
 80107f8:	8898      	ldrh	r0, [r3, #4]
 80107fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010800:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010806:	4413      	add	r3, r2
 8010808:	3304      	adds	r3, #4
 801080a:	9301      	str	r3, [sp, #4]
 801080c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	460b      	mov	r3, r1
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	68f9      	ldr	r1, [r7, #12]
 8010816:	f7fe fb7b 	bl	800ef10 <VL53L1_f_001>
 801081a:	4603      	mov	r3, r0
 801081c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801081e:	7fbb      	ldrb	r3, [r7, #30]
 8010820:	3301      	adds	r3, #1
 8010822:	77bb      	strb	r3, [r7, #30]
 8010824:	7fbb      	ldrb	r3, [r7, #30]
 8010826:	2b04      	cmp	r3, #4
 8010828:	d9dd      	bls.n	80107e6 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 801082a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d11a      	bne.n	8010868 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 801083a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010848:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801084c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801084e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8010852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010854:	9102      	str	r1, [sp, #8]
 8010856:	9201      	str	r2, [sp, #4]
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	462b      	mov	r3, r5
 801085c:	4622      	mov	r2, r4
 801085e:	4631      	mov	r1, r6
 8010860:	f7ff f82d 	bl	800f8be <VL53L1_f_018>
 8010864:	4603      	mov	r3, r0
 8010866:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010868:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d104      	bne.n	801087a <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8010870:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010872:	f7ff f954 	bl	800fb1e <VL53L1_f_019>
 8010876:	4603      	mov	r3, r0
 8010878:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 801087a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d104      	bne.n	801088c <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8010882:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010884:	f7ff f999 	bl	800fbba <VL53L1_f_020>
 8010888:	4603      	mov	r3, r0
 801088a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 801088c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d104      	bne.n	801089e <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010894:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010896:	f7ff fa0e 	bl	800fcb6 <VL53L1_f_021>
 801089a:	4603      	mov	r3, r0
 801089c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 801089e:	2300      	movs	r3, #0
 80108a0:	77bb      	strb	r3, [r7, #30]
 80108a2:	e0a6      	b.n	80109f2 <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80108a4:	7fba      	ldrb	r2, [r7, #30]
 80108a6:	4613      	mov	r3, r2
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	4413      	add	r3, r2
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80108b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108b4:	4413      	add	r3, r2
 80108b6:	3304      	adds	r3, #4
 80108b8:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80108ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d109      	bne.n	80108d6 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 80108c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80108c8:	7fbb      	ldrb	r3, [r7, #30]
 80108ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fb48 	bl	800ff62 <VL53L1_f_022>
 80108d2:	4603      	mov	r3, r0
 80108d4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 80108d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d110      	bne.n	8010900 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 80108de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80108e4:	69bb      	ldr	r3, [r7, #24]
 80108e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80108ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ec:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80108f0:	7fb8      	ldrb	r0, [r7, #30]
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	4613      	mov	r3, r2
 80108f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108f8:	f7ff fd5a 	bl	80103b0 <VL53L1_f_023>
 80108fc:	4603      	mov	r3, r0
 80108fe:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010900:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d10d      	bne.n	8010924 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801090e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010910:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010914:	7fb8      	ldrb	r0, [r7, #30]
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	2300      	movs	r3, #0
 801091a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801091c:	f7ff fd48 	bl	80103b0 <VL53L1_f_023>
 8010920:	4603      	mov	r3, r0
 8010922:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010924:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10d      	bne.n	8010948 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 801092c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801092e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010934:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010938:	7fb8      	ldrb	r0, [r7, #30]
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	2300      	movs	r3, #0
 801093e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010940:	f7ff fd36 	bl	80103b0 <VL53L1_f_023>
 8010944:	4603      	mov	r3, r0
 8010946:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d109      	bne.n	8010964 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010952:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010956:	7fb8      	ldrb	r0, [r7, #30]
 8010958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801095a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801095c:	f000 f8dd 	bl	8010b1a <VL53L1_f_034>
 8010960:	4603      	mov	r3, r0
 8010962:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d108      	bne.n	801097e <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	8a19      	ldrh	r1, [r3, #16]
 8010970:	7fb8      	ldrb	r0, [r7, #30]
 8010972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010976:	f000 f95c 	bl	8010c32 <VL53L1_f_035>
 801097a:	4603      	mov	r3, r0
 801097c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 801097e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d124      	bne.n	80109d0 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	789d      	ldrb	r5, [r3, #2]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	7e1e      	ldrb	r6, [r3, #24]
 801098e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010990:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f893 e006 	ldrb.w	lr, [r3, #6]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109a2:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80109a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109a8:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80109ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109ae:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 80109b2:	697c      	ldr	r4, [r7, #20]
 80109b4:	3420      	adds	r4, #32
 80109b6:	9404      	str	r4, [sp, #16]
 80109b8:	9003      	str	r0, [sp, #12]
 80109ba:	9102      	str	r1, [sp, #8]
 80109bc:	9201      	str	r2, [sp, #4]
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	4673      	mov	r3, lr
 80109c2:	4662      	mov	r2, ip
 80109c4:	4631      	mov	r1, r6
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7ff fd46 	bl	8010458 <VL53L1_f_026>
 80109cc:	4603      	mov	r3, r0
 80109ce:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 80109d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d109      	bne.n	80109ec <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 80109d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109da:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80109de:	7fb8      	ldrb	r0, [r7, #30]
 80109e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e2:	2101      	movs	r1, #1
 80109e4:	f7ff fb10 	bl	8010008 <VL53L1_f_027>
 80109e8:	4603      	mov	r3, r0
 80109ea:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80109ec:	7fbb      	ldrb	r3, [r7, #30]
 80109ee:	3301      	adds	r3, #1
 80109f0:	77bb      	strb	r3, [r7, #30]
 80109f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80109f8:	7fba      	ldrb	r2, [r7, #30]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	f4ff af52 	bcc.w	80108a4 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d107      	bne.n	8010a18 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	785b      	ldrb	r3, [r3, #1]
 8010a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7ff fa23 	bl	800fe5a <VL53L1_f_028>
 8010a14:	4603      	mov	r3, r0
 8010a16:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010a18:	2300      	movs	r3, #0
 8010a1a:	77bb      	strb	r3, [r7, #30]
 8010a1c:	e071      	b.n	8010b02 <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010a1e:	7fba      	ldrb	r2, [r7, #30]
 8010a20:	4613      	mov	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	4413      	add	r3, r2
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a2e:	4413      	add	r3, r2
 8010a30:	3304      	adds	r3, #4
 8010a32:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a36:	7c9a      	ldrb	r2, [r3, #18]
 8010a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a3a:	7c5b      	ldrb	r3, [r3, #17]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d25c      	bcs.n	8010afa <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	dd57      	ble.n	8010afc <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010a50:	2bff      	cmp	r3, #255	; 0xff
 8010a52:	d053      	beq.n	8010afc <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a56:	7c9b      	ldrb	r3, [r3, #18]
 8010a58:	461a      	mov	r2, r3
			prange_data =
 8010a5a:	234c      	movs	r3, #76	; 0x4c
 8010a5c:	fb02 f303 	mul.w	r3, r2, r3
 8010a60:	3310      	adds	r3, #16
 8010a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a64:	4413      	add	r3, r2
 8010a66:	3304      	adds	r3, #4
 8010a68:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010a6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d115      	bne.n	8010a9e <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a74:	7c98      	ldrb	r0, [r3, #18]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	8b5d      	ldrh	r5, [r3, #26]
 8010a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a8c:	693a      	ldr	r2, [r7, #16]
 8010a8e:	9202      	str	r2, [sp, #8]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	9201      	str	r2, [sp, #4]
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	462b      	mov	r3, r5
 8010a98:	4622      	mov	r2, r4
 8010a9a:	f7ff fd85 	bl	80105a8 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010a9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d115      	bne.n	8010ad2 <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010abe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010ac2:	9301      	str	r3, [sp, #4]
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	4623      	mov	r3, r4
 8010aca:	f000 fb44 	bl	8011156 <VL53L1_f_011>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010ad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d108      	bne.n	8010aec <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	8bd8      	ldrh	r0, [r3, #30]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010ae4:	693a      	ldr	r2, [r7, #16]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f000 fbda 	bl	80112a0 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aee:	7c9b      	ldrb	r3, [r3, #18]
 8010af0:	3301      	adds	r3, #1
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010af6:	749a      	strb	r2, [r3, #18]
 8010af8:	e000      	b.n	8010afc <VL53L1_f_033+0x400>
			continue;
 8010afa:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010afc:	7fbb      	ldrb	r3, [r7, #30]
 8010afe:	3301      	adds	r3, #1
 8010b00:	77bb      	strb	r3, [r7, #30]
 8010b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b04:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010b08:	7fba      	ldrb	r2, [r7, #30]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d387      	bcc.n	8010a1e <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3724      	adds	r7, #36	; 0x24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b1a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b08c      	sub	sp, #48	; 0x30
 8010b1e:	af02      	add	r7, sp, #8
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
 8010b24:	603b      	str	r3, [r7, #0]
 8010b26:	4603      	mov	r3, r0
 8010b28:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010b30:	7bfa      	ldrb	r2, [r7, #15]
 8010b32:	4613      	mov	r3, r2
 8010b34:	00db      	lsls	r3, r3, #3
 8010b36:	4413      	add	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	4413      	add	r3, r2
 8010b42:	3304      	adds	r3, #4
 8010b44:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010b46:	2300      	movs	r3, #0
 8010b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010b50:	2300      	movs	r3, #0
 8010b52:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010b54:	2300      	movs	r3, #0
 8010b56:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	785a      	ldrb	r2, [r3, #1]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	781a      	ldrb	r2, [r3, #0]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	789a      	ldrb	r2, [r3, #2]
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010b74:	6a3b      	ldr	r3, [r7, #32]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b7c:	e04d      	b.n	8010c1a <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	78da      	ldrb	r2, [r3, #3]
 8010b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b86:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b8a:	fb01 f202 	mul.w	r2, r1, r2
 8010b8e:	1a9b      	subs	r3, r3, r2
 8010b90:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	7999      	ldrb	r1, [r3, #6]
 8010b96:	f107 0218 	add.w	r2, r7, #24
 8010b9a:	7ff8      	ldrb	r0, [r7, #31]
 8010b9c:	f107 0310 	add.w	r3, r7, #16
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	f107 0314 	add.w	r3, r7, #20
 8010ba6:	9300      	str	r3, [sp, #0]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	68ba      	ldr	r2, [r7, #8]
 8010bac:	f000 fa7a 	bl	80110a4 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010bb0:	7ffb      	ldrb	r3, [r7, #31]
 8010bb2:	69ba      	ldr	r2, [r7, #24]
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	440b      	add	r3, r1
 8010bba:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010bbc:	7ffb      	ldrb	r3, [r7, #31]
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	3318      	adds	r3, #24
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010bca:	7ffb      	ldrb	r3, [r7, #31]
 8010bcc:	693a      	ldr	r2, [r7, #16]
 8010bce:	6839      	ldr	r1, [r7, #0]
 8010bd0:	3330      	adds	r3, #48	; 0x30
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	440b      	add	r3, r1
 8010bd6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	689a      	ldr	r2, [r3, #8]
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010be6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010be8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010bea:	6839      	ldr	r1, [r7, #0]
 8010bec:	3348      	adds	r3, #72	; 0x48
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	440b      	add	r3, r1
 8010bf2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	689a      	ldr	r2, [r3, #8]
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010c02:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010c04:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	3360      	adds	r3, #96	; 0x60
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	440b      	add	r3, r1
 8010c0e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c14:	3301      	adds	r3, #1
 8010c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c1a:	6a3b      	ldr	r3, [r7, #32]
 8010c1c:	791b      	ldrb	r3, [r3, #4]
 8010c1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d9ab      	bls.n	8010b7e <VL53L1_f_034+0x64>
	}

	return status;
 8010c26:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3728      	adds	r7, #40	; 0x28
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c34:	b08f      	sub	sp, #60	; 0x3c
 8010c36:	af06      	add	r7, sp, #24
 8010c38:	60ba      	str	r2, [r7, #8]
 8010c3a:	607b      	str	r3, [r7, #4]
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
 8010c40:	460b      	mov	r3, r1
 8010c42:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010c44:	2300      	movs	r3, #0
 8010c46:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010c4c:	7bfa      	ldrb	r2, [r7, #15]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	00db      	lsls	r3, r3, #3
 8010c52:	4413      	add	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	3304      	adds	r3, #4
 8010c60:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	77fb      	strb	r3, [r7, #31]
 8010c74:	e0b9      	b.n	8010dea <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	78da      	ldrb	r2, [r3, #3]
 8010c7a:	7ffb      	ldrb	r3, [r7, #31]
 8010c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c80:	fb01 f202 	mul.w	r2, r1, r2
 8010c84:	1a9b      	subs	r3, r3, r2
 8010c86:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010c88:	7ffb      	ldrb	r3, [r7, #31]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	78d2      	ldrb	r2, [r2, #3]
 8010c90:	fb93 f1f2 	sdiv	r1, r3, r2
 8010c94:	fb01 f202 	mul.w	r2, r1, r2
 8010c98:	1a9b      	subs	r3, r3, r2
 8010c9a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	789b      	ldrb	r3, [r3, #2]
 8010ca0:	7dfa      	ldrb	r2, [r7, #23]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	f080 809e 	bcs.w	8010de4 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010cac:	7dba      	ldrb	r2, [r7, #22]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f080 8098 	bcs.w	8010de4 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	3348      	adds	r3, #72	; 0x48
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	4413      	add	r3, r2
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10e      	bne.n	8010ce2 <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	3360      	adds	r3, #96	; 0x60
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d106      	bne.n	8010ce2 <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010cd4:	7dfb      	ldrb	r3, [r7, #23]
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	4413      	add	r3, r2
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010ce0:	e043      	b.n	8010d6a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010ce2:	7dfb      	ldrb	r3, [r7, #23]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	3348      	adds	r3, #72	; 0x48
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4413      	add	r3, r2
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	db0e      	blt.n	8010d10 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010cf2:	7dfb      	ldrb	r3, [r7, #23]
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	3360      	adds	r3, #96	; 0x60
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	4413      	add	r3, r2
 8010cfc:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	db06      	blt.n	8010d10 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	68ba      	ldr	r2, [r7, #8]
 8010d06:	4413      	add	r3, r2
 8010d08:	2201      	movs	r2, #1
 8010d0a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010d0e:	e02c      	b.n	8010d6a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010d10:	7dfb      	ldrb	r3, [r7, #23]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	3348      	adds	r3, #72	; 0x48
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	da1e      	bge.n	8010d5e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	3360      	adds	r3, #96	; 0x60
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	db16      	blt.n	8010d5e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010d30:	7dbb      	ldrb	r3, [r7, #22]
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	3348      	adds	r3, #72	; 0x48
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	4413      	add	r3, r2
 8010d3a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	db0e      	blt.n	8010d5e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8010d40:	7dbb      	ldrb	r3, [r7, #22]
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	3360      	adds	r3, #96	; 0x60
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	da06      	bge.n	8010d5e <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8010d50:	7dfb      	ldrb	r3, [r7, #23]
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	4413      	add	r3, r2
 8010d56:	2201      	movs	r2, #1
 8010d58:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010d5c:	e005      	b.n	8010d6a <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8010d5e:	7dfb      	ldrb	r3, [r7, #23]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	4413      	add	r3, r2
 8010d64:	2200      	movs	r2, #0
 8010d66:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	4413      	add	r3, r2
 8010d70:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d035      	beq.n	8010de4 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	7ffa      	ldrb	r2, [r7, #31]
 8010d7c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8010d7e:	7dfb      	ldrb	r3, [r7, #23]
 8010d80:	68ba      	ldr	r2, [r7, #8]
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	685c      	ldr	r4, [r3, #4]
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	3318      	adds	r3, #24
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4413      	add	r3, r2
 8010d92:	685d      	ldr	r5, [r3, #4]
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	3330      	adds	r3, #48	; 0x30
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	685e      	ldr	r6, [r3, #4]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	78d2      	ldrb	r2, [r2, #3]
 8010da8:	69b9      	ldr	r1, [r7, #24]
 8010daa:	3118      	adds	r1, #24
 8010dac:	7ff8      	ldrb	r0, [r7, #31]
 8010dae:	9105      	str	r1, [sp, #20]
 8010db0:	9204      	str	r2, [sp, #16]
 8010db2:	9303      	str	r3, [sp, #12]
 8010db4:	2300      	movs	r3, #0
 8010db6:	9302      	str	r3, [sp, #8]
 8010db8:	2300      	movs	r3, #0
 8010dba:	9301      	str	r3, [sp, #4]
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	4633      	mov	r3, r6
 8010dc2:	462a      	mov	r2, r5
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	f000 f81c 	bl	8010e02 <VL53L1_f_036>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8010dce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010dd2:	f113 0f0f 	cmn.w	r3, #15
 8010dd6:	d105      	bne.n	8010de4 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8010dd8:	7dfb      	ldrb	r3, [r7, #23]
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	4413      	add	r3, r2
 8010dde:	2200      	movs	r2, #0
 8010de0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010de4:	7ffb      	ldrb	r3, [r7, #31]
 8010de6:	3301      	adds	r3, #1
 8010de8:	77fb      	strb	r3, [r7, #31]
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	791b      	ldrb	r3, [r3, #4]
 8010dee:	7ffa      	ldrb	r2, [r7, #31]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	f4ff af40 	bcc.w	8010c76 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010df6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3724      	adds	r7, #36	; 0x24
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e02 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010e02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e06:	b0b2      	sub	sp, #200	; 0xc8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e16:	4603      	mov	r3, r0
 8010e18:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010e1c:	23f1      	movs	r3, #241	; 0xf1
 8010e1e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e26:	f04f 0300 	mov.w	r3, #0
 8010e2a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010e2e:	f04f 0200 	mov.w	r2, #0
 8010e32:	f04f 0300 	mov.w	r3, #0
 8010e36:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010e3a:	f04f 0200 	mov.w	r2, #0
 8010e3e:	f04f 0300 	mov.w	r3, #0
 8010e42:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e4a:	17da      	asrs	r2, r3, #31
 8010e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010e54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010e58:	17da      	asrs	r2, r3, #31
 8010e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e5e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	ebb3 0802 	subs.w	r8, r3, r2
 8010e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e74:	460a      	mov	r2, r1
 8010e76:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e7e:	17da      	asrs	r2, r3, #31
 8010e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8010e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010e84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010e88:	460b      	mov	r3, r1
 8010e8a:	ebb8 0a03 	subs.w	sl, r8, r3
 8010e8e:	4613      	mov	r3, r2
 8010e90:	eb69 0b03 	sbc.w	fp, r9, r3
 8010e94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e98:	17da      	asrs	r2, r3, #31
 8010e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8010e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8010e9e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	ebba 0403 	subs.w	r4, sl, r3
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010eae:	f04f 0200 	mov.w	r2, #0
 8010eb2:	f04f 0300 	mov.w	r3, #0
 8010eb6:	032b      	lsls	r3, r5, #12
 8010eb8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8010ebc:	0322      	lsls	r2, r4, #12
 8010ebe:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ec6:	17da      	asrs	r2, r3, #31
 8010ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010eca:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ed0:	17da      	asrs	r2, r3, #31
 8010ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8010ed4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ed6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010eda:	4623      	mov	r3, r4
 8010edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	1a9b      	subs	r3, r3, r2
 8010ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	460a      	mov	r2, r1
 8010eea:	eb63 0302 	sbc.w	r3, r3, r2
 8010eee:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ef4:	17da      	asrs	r2, r3, #31
 8010ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8010ef8:	657a      	str	r2, [r7, #84]	; 0x54
 8010efa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8010efe:	4623      	mov	r3, r4
 8010f00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010f04:	4602      	mov	r2, r0
 8010f06:	1a9b      	subs	r3, r3, r2
 8010f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f0a:	462b      	mov	r3, r5
 8010f0c:	460a      	mov	r2, r1
 8010f0e:	eb63 0302 	sbc.w	r3, r3, r2
 8010f12:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010f14:	f04f 0200 	mov.w	r2, #0
 8010f18:	f04f 0300 	mov.w	r3, #0
 8010f1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010f20:	4629      	mov	r1, r5
 8010f22:	030b      	lsls	r3, r1, #12
 8010f24:	4621      	mov	r1, r4
 8010f26:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	030a      	lsls	r2, r1, #12
 8010f2e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8010f32:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f36:	4313      	orrs	r3, r2
 8010f38:	f000 80a8 	beq.w	801108c <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8010f3c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010f40:	f04f 0000 	mov.w	r0, #0
 8010f44:	f04f 0100 	mov.w	r1, #0
 8010f48:	0319      	lsls	r1, r3, #12
 8010f4a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010f4e:	0310      	lsls	r0, r2, #12
 8010f50:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f54:	1814      	adds	r4, r2, r0
 8010f56:	633c      	str	r4, [r7, #48]	; 0x30
 8010f58:	414b      	adcs	r3, r1
 8010f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f5c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010f60:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8010f64:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f68:	1891      	adds	r1, r2, r2
 8010f6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8010f6c:	415b      	adcs	r3, r3
 8010f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010f74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010f78:	f7ef f952 	bl	8000220 <__aeabi_ldivmod>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8010f84:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010f88:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8010f8c:	6239      	str	r1, [r7, #32]
 8010f8e:	f143 0300 	adc.w	r3, r3, #0
 8010f92:	627b      	str	r3, [r7, #36]	; 0x24
 8010f94:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010f98:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8010f9c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8010fa4:	647a      	str	r2, [r7, #68]	; 0x44
 8010fa6:	f04f 0200 	mov.w	r2, #0
 8010faa:	f04f 0300 	mov.w	r3, #0
 8010fae:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	030b      	lsls	r3, r1, #12
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	030a      	lsls	r2, r1, #12
 8010fc0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010fc4:	1884      	adds	r4, r0, r2
 8010fc6:	61bc      	str	r4, [r7, #24]
 8010fc8:	eb41 0303 	adc.w	r3, r1, r3
 8010fcc:	61fb      	str	r3, [r7, #28]
 8010fce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010fd2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8010fd6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010fda:	1c51      	adds	r1, r2, #1
 8010fdc:	63b9      	str	r1, [r7, #56]	; 0x38
 8010fde:	f143 0300 	adc.w	r3, r3, #0
 8010fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fe4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010fe8:	460b      	mov	r3, r1
 8010fea:	0fdb      	lsrs	r3, r3, #31
 8010fec:	2200      	movs	r2, #0
 8010fee:	613b      	str	r3, [r7, #16]
 8010ff0:	617a      	str	r2, [r7, #20]
 8010ff2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010ff6:	4623      	mov	r3, r4
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	189b      	adds	r3, r3, r2
 8010ffc:	60bb      	str	r3, [r7, #8]
 8010ffe:	460b      	mov	r3, r1
 8011000:	462a      	mov	r2, r5
 8011002:	eb42 0303 	adc.w	r3, r2, r3
 8011006:	60fb      	str	r3, [r7, #12]
 8011008:	f04f 0200 	mov.w	r2, #0
 801100c:	f04f 0300 	mov.w	r3, #0
 8011010:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011014:	4621      	mov	r1, r4
 8011016:	084a      	lsrs	r2, r1, #1
 8011018:	4629      	mov	r1, r5
 801101a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801101e:	4629      	mov	r1, r5
 8011020:	104b      	asrs	r3, r1, #1
 8011022:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8011026:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801102a:	2b00      	cmp	r3, #0
 801102c:	da05      	bge.n	801103a <VL53L1_f_036+0x238>
			mean_phase = 0;
 801102e:	f04f 0200 	mov.w	r2, #0
 8011032:	f04f 0300 	mov.w	r3, #0
 8011036:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 801103a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801103e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011042:	f173 0300 	sbcs.w	r3, r3, #0
 8011046:	db05      	blt.n	8011054 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801104c:	f04f 0300 	mov.w	r3, #0
 8011050:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8011054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 801105c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8011060:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8011062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011066:	fb93 f1f2 	sdiv	r1, r3, r2
 801106a:	fb01 f202 	mul.w	r2, r1, r2
 801106e:	1a9b      	subs	r3, r3, r2
 8011070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8011074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011078:	17da      	asrs	r2, r3, #31
 801107a:	603b      	str	r3, [r7, #0]
 801107c:	607a      	str	r2, [r7, #4]
 801107e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011082:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8011086:	2300      	movs	r3, #0
 8011088:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 801108c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011094:	601a      	str	r2, [r3, #0]

	return status;
 8011096:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 801109a:	4618      	mov	r0, r3
 801109c:	37c8      	adds	r7, #200	; 0xc8
 801109e:	46bd      	mov	sp, r7
 80110a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080110a4 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b087      	sub	sp, #28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60ba      	str	r2, [r7, #8]
 80110ac:	607b      	str	r3, [r7, #4]
 80110ae:	4603      	mov	r3, r0
 80110b0:	73fb      	strb	r3, [r7, #15]
 80110b2:	460b      	mov	r3, r1
 80110b4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80110b6:	2300      	movs	r3, #0
 80110b8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80110c4:	7bfa      	ldrb	r2, [r7, #15]
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	3206      	adds	r2, #6
 80110ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80110ce:	6a3b      	ldr	r3, [r7, #32]
 80110d0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	2200      	movs	r2, #0
 80110d6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80110d8:	2300      	movs	r3, #0
 80110da:	75fb      	strb	r3, [r7, #23]
 80110dc:	e02f      	b.n	801113e <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80110de:	7bfa      	ldrb	r2, [r7, #15]
 80110e0:	7dfb      	ldrb	r3, [r7, #23]
 80110e2:	4413      	add	r3, r2
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	7a92      	ldrb	r2, [r2, #10]
 80110e8:	441a      	add	r2, r3
 80110ea:	7bbb      	ldrb	r3, [r7, #14]
 80110ec:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 80110ee:	68ba      	ldr	r2, [r7, #8]
 80110f0:	7a92      	ldrb	r2, [r2, #10]
 80110f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80110f6:	fb01 f202 	mul.w	r2, r1, r2
 80110fa:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80110fc:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 80110fe:	7dfa      	ldrb	r2, [r7, #23]
 8011100:	7bbb      	ldrb	r3, [r7, #14]
 8011102:	429a      	cmp	r2, r3
 8011104:	d20a      	bcs.n	801111c <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	7db9      	ldrb	r1, [r7, #22]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	3106      	adds	r1, #6
 8011110:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011114:	441a      	add	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	601a      	str	r2, [r3, #0]
 801111a:	e00d      	b.n	8011138 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 801111c:	7dfa      	ldrb	r2, [r7, #23]
 801111e:	7bbb      	ldrb	r3, [r7, #14]
 8011120:	429a      	cmp	r2, r3
 8011122:	d909      	bls.n	8011138 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8011124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	7db9      	ldrb	r1, [r7, #22]
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	3106      	adds	r1, #6
 801112e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011132:	441a      	add	r2, r3
 8011134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011136:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011138:	7dfb      	ldrb	r3, [r7, #23]
 801113a:	3301      	adds	r3, #1
 801113c:	75fb      	strb	r3, [r7, #23]
 801113e:	7bbb      	ldrb	r3, [r7, #14]
 8011140:	005a      	lsls	r2, r3, #1
 8011142:	7dfb      	ldrb	r3, [r7, #23]
 8011144:	429a      	cmp	r2, r3
 8011146:	daca      	bge.n	80110de <VL53L1_f_013+0x3a>
	}
}
 8011148:	bf00      	nop
 801114a:	bf00      	nop
 801114c:	371c      	adds	r7, #28
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr

08011156 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b088      	sub	sp, #32
 801115a:	af00      	add	r7, sp, #0
 801115c:	60ba      	str	r2, [r7, #8]
 801115e:	461a      	mov	r2, r3
 8011160:	4603      	mov	r3, r0
 8011162:	81fb      	strh	r3, [r7, #14]
 8011164:	460b      	mov	r3, r1
 8011166:	81bb      	strh	r3, [r7, #12]
 8011168:	4613      	mov	r3, r2
 801116a:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 801116c:	2300      	movs	r3, #0
 801116e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8011174:	2300      	movs	r3, #0
 8011176:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8011178:	2300      	movs	r3, #0
 801117a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	89fa      	ldrh	r2, [r7, #14]
 8011180:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	89ba      	ldrh	r2, [r7, #12]
 8011186:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8011188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118a:	68ba      	ldr	r2, [r7, #8]
 801118c:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 801118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011190:	88fa      	ldrh	r2, [r7, #6]
 8011192:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8011194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011196:	8a5b      	ldrh	r3, [r3, #18]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d101      	bne.n	80111a0 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801119c:	23f1      	movs	r3, #241	; 0xf1
 801119e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80111a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80111a8:	23f1      	movs	r3, #241	; 0xf1
 80111aa:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80111ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d16f      	bne.n	8011294 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	8a5b      	ldrh	r3, [r3, #18]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fd f903 	bl	800e3c4 <VL53L1_calc_pll_period_us>
 80111be:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	699b      	ldr	r3, [r3, #24]
 80111c4:	3301      	adds	r3, #1
 80111c6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80111c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ca:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80111cc:	4619      	mov	r1, r3
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111d4:	6978      	ldr	r0, [r7, #20]
 80111d6:	f7fd f90c 	bl	800e3f2 <VL53L1_duration_maths>
 80111da:	4602      	mov	r2, r0
 80111dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111de:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 80111e4:	0119      	lsls	r1, r3, #4
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111ec:	6978      	ldr	r0, [r7, #20]
 80111ee:	f7fd f900 	bl	800e3f2 <VL53L1_duration_maths>
 80111f2:	4602      	mov	r2, r0
 80111f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 80111f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 80111fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fe:	69db      	ldr	r3, [r3, #28]
 8011200:	4619      	mov	r1, r3
 8011202:	4610      	mov	r0, r2
 8011204:	f7fd fb6d 	bl	800e8e2 <VL53L1_rate_maths>
 8011208:	4603      	mov	r3, r0
 801120a:	461a      	mov	r2, r3
 801120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8011214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011216:	6a1b      	ldr	r3, [r3, #32]
 8011218:	4619      	mov	r1, r3
 801121a:	4610      	mov	r0, r2
 801121c:	f7fd fb61 	bl	800e8e2 <VL53L1_rate_maths>
 8011220:	4603      	mov	r3, r0
 8011222:	461a      	mov	r2, r3
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 801122c:	461a      	mov	r2, r3
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	4619      	mov	r1, r3
 8011234:	4610      	mov	r0, r2
 8011236:	f7fd fb54 	bl	800e8e2 <VL53L1_rate_maths>
 801123a:	4603      	mov	r3, r0
 801123c:	461a      	mov	r2, r3
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011246:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 801124c:	4413      	add	r3, r2
 801124e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8011250:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011254:	2b01      	cmp	r3, #1
 8011256:	d905      	bls.n	8011264 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8011258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801125c:	69ba      	ldr	r2, [r7, #24]
 801125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011262:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8011264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011266:	8ada      	ldrh	r2, [r3, #22]
 8011268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801126c:	69b9      	ldr	r1, [r7, #24]
 801126e:	2006      	movs	r0, #6
 8011270:	f7fd fb7c 	bl	800e96c <VL53L1_rate_per_spad_maths>
 8011274:	4603      	mov	r3, r0
 8011276:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8011278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 801127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	8ad9      	ldrh	r1, [r3, #22]
 8011284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011286:	69db      	ldr	r3, [r3, #28]
 8011288:	461a      	mov	r2, r3
 801128a:	f7fd f90b 	bl	800e4a4 <VL53L1_events_per_spad_maths>
 801128e:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8011290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011292:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8011294:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3720      	adds	r7, #32
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80112a0:	b590      	push	{r4, r7, lr}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	4603      	mov	r3, r0
 80112a8:	603a      	str	r2, [r7, #0]
 80112aa:	80fb      	strh	r3, [r7, #6]
 80112ac:	460b      	mov	r3, r1
 80112ae:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	8a58      	ldrh	r0, [r3, #18]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	8a9c      	ldrh	r4, [r3, #20]
 80112bc:	88fb      	ldrh	r3, [r7, #6]
 80112be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80112c2:	9201      	str	r2, [sp, #4]
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	2300      	movs	r3, #0
 80112c8:	4622      	mov	r2, r4
 80112ca:	f7fd fb83 	bl	800e9d4 <VL53L1_range_maths>
 80112ce:	4603      	mov	r3, r0
 80112d0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	8a58      	ldrh	r0, [r3, #18]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	8a9c      	ldrh	r4, [r3, #20]
 80112e6:	88fb      	ldrh	r3, [r7, #6]
 80112e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80112ec:	9201      	str	r2, [sp, #4]
 80112ee:	9300      	str	r3, [sp, #0]
 80112f0:	2300      	movs	r3, #0
 80112f2:	4622      	mov	r2, r4
 80112f4:	f7fd fb6e 	bl	800e9d4 <VL53L1_range_maths>
 80112f8:	4603      	mov	r3, r0
 80112fa:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	8a58      	ldrh	r0, [r3, #18]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	8a9c      	ldrh	r4, [r3, #20]
 8011310:	88fb      	ldrh	r3, [r7, #6]
 8011312:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011316:	9201      	str	r2, [sp, #4]
 8011318:	9300      	str	r3, [sp, #0]
 801131a:	2300      	movs	r3, #0
 801131c:	4622      	mov	r2, r4
 801131e:	f7fd fb59 	bl	800e9d4 <VL53L1_range_maths>
 8011322:	4603      	mov	r3, r0
 8011324:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 801132c:	bf00      	nop
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	bd90      	pop	{r4, r7, pc}

08011334 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b086      	sub	sp, #24
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8011340:	2300      	movs	r3, #0
 8011342:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8011344:	2300      	movs	r3, #0
 8011346:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011348:	2300      	movs	r3, #0
 801134a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 801134c:	2300      	movs	r3, #0
 801134e:	757b      	strb	r3, [r7, #21]





	memcpy(
 8011350:	22ac      	movs	r2, #172	; 0xac
 8011352:	68b9      	ldr	r1, [r7, #8]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f008 f8b3 	bl	80194c0 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801135a:	2300      	movs	r3, #0
 801135c:	75fb      	strb	r3, [r7, #23]
 801135e:	e008      	b.n	8011372 <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8011360:	7dfa      	ldrb	r2, [r7, #23]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	3206      	adds	r2, #6
 8011366:	2100      	movs	r1, #0
 8011368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 801136c:	7dfb      	ldrb	r3, [r7, #23]
 801136e:	3301      	adds	r3, #1
 8011370:	75fb      	strb	r3, [r7, #23]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	7a5b      	ldrb	r3, [r3, #9]
 8011376:	7dfa      	ldrb	r2, [r7, #23]
 8011378:	429a      	cmp	r2, r3
 801137a:	d3f1      	bcc.n	8011360 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 801137c:	68f9      	ldr	r1, [r7, #12]
 801137e:	68b8      	ldr	r0, [r7, #8]
 8011380:	f000 f878 	bl	8011474 <VL53L1_f_038>
 8011384:	4603      	mov	r3, r0
 8011386:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	7a9a      	ldrb	r2, [r3, #10]
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	7a9b      	ldrb	r3, [r3, #10]
 8011390:	429a      	cmp	r2, r3
 8011392:	d203      	bcs.n	801139c <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	7a9b      	ldrb	r3, [r3, #10]
 8011398:	75bb      	strb	r3, [r7, #22]
 801139a:	e002      	b.n	80113a2 <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	7a9b      	ldrb	r3, [r3, #10]
 80113a0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80113a2:	2300      	movs	r3, #0
 80113a4:	75fb      	strb	r3, [r7, #23]
 80113a6:	e05c      	b.n	8011462 <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80113a8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	db0f      	blt.n	80113d0 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80113b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113b4:	461a      	mov	r2, r3
 80113b6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113ba:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	7a92      	ldrb	r2, [r2, #10]
 80113c0:	b252      	sxtb	r2, r2
 80113c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80113c6:	fb01 f202 	mul.w	r2, r1, r2
 80113ca:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80113cc:	757b      	strb	r3, [r7, #21]
 80113ce:	e013      	b.n	80113f8 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	7a9b      	ldrb	r3, [r3, #10]
 80113d4:	b25b      	sxtb	r3, r3
 80113d6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80113d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113dc:	4619      	mov	r1, r3
 80113de:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113e2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80113e4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	7a92      	ldrb	r2, [r2, #10]
 80113ea:	b252      	sxtb	r2, r2
 80113ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80113f0:	fb01 f202 	mul.w	r2, r1, r2
 80113f4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80113f6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 80113f8:	7d7b      	ldrb	r3, [r7, #21]
 80113fa:	461a      	mov	r2, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	3206      	adds	r2, #6
 8011400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8011404:	7df9      	ldrb	r1, [r7, #23]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	3106      	adds	r1, #6
 801140a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801140e:	429a      	cmp	r2, r3
 8011410:	dd12      	ble.n	8011438 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8011412:	7d7b      	ldrb	r3, [r7, #21]
 8011414:	461a      	mov	r2, r3
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	3206      	adds	r2, #6
 801141a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801141e:	7df9      	ldrb	r1, [r7, #23]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	3106      	adds	r1, #6
 8011424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011428:	7d79      	ldrb	r1, [r7, #21]
 801142a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 801142c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	1d82      	adds	r2, r0, #6
 8011432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011436:	e006      	b.n	8011446 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011438:	7d7b      	ldrb	r3, [r7, #21]
 801143a:	461a      	mov	r2, r3
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	3206      	adds	r2, #6
 8011440:	2100      	movs	r1, #0
 8011442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8011446:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011448:	7d7b      	ldrb	r3, [r7, #21]
 801144a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	3206      	adds	r2, #6
 8011450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	1d82      	adds	r2, r0, #6
 8011458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 801145c:	7dfb      	ldrb	r3, [r7, #23]
 801145e:	3301      	adds	r3, #1
 8011460:	75fb      	strb	r3, [r7, #23]
 8011462:	7dfa      	ldrb	r2, [r7, #23]
 8011464:	7dbb      	ldrb	r3, [r7, #22]
 8011466:	429a      	cmp	r2, r3
 8011468:	d39e      	bcc.n	80113a8 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 801146a:	bf00      	nop
 801146c:	bf00      	nop
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801147e:	2300      	movs	r3, #0
 8011480:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8011486:	2300      	movs	r3, #0
 8011488:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 801148a:	2300      	movs	r3, #0
 801148c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011494:	4618      	mov	r0, r3
 8011496:	f7fd fb85 	bl	800eba4 <VL53L1_decode_vcsel_period>
 801149a:	4603      	mov	r3, r0
	period = 2048 *
 801149c:	02db      	lsls	r3, r3, #11
 801149e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00a      	beq.n	80114bc <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80114ac:	68ba      	ldr	r2, [r7, #8]
 80114ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80114b2:	68b9      	ldr	r1, [r7, #8]
 80114b4:	fb01 f202 	mul.w	r2, r1, r2
 80114b8:	1a9b      	subs	r3, r3, r2
 80114ba:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80114c2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80114c4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dd09      	ble.n	80114e4 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	da01      	bge.n	80114de <VL53L1_f_038+0x6a>
 80114da:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80114de:	12db      	asrs	r3, r3, #11
 80114e0:	75fb      	strb	r3, [r7, #23]
 80114e2:	e008      	b.n	80114f6 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	da01      	bge.n	80114f2 <VL53L1_f_038+0x7e>
 80114ee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80114f2:	12db      	asrs	r3, r3, #11
 80114f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80114f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3718      	adds	r7, #24
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b08e      	sub	sp, #56	; 0x38
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801150c:	2300      	movs	r3, #0
 801150e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8011512:	2300      	movs	r3, #0
 8011514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011518:	2300      	movs	r3, #0
 801151a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 8011522:	2300      	movs	r3, #0
 8011524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011528:	2300      	movs	r3, #0
 801152a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8011534:	22ac      	movs	r2, #172	; 0xac
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	6838      	ldr	r0, [r7, #0]
 801153a:	f007 ffc1 	bl	80194c0 <memcpy>


	podata->VL53L1_p_024 = 0;
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	2200      	movs	r2, #0
 8011542:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011544:	2300      	movs	r3, #0
 8011546:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801154a:	e00a      	b.n	8011562 <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 801154c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	4413      	add	r3, r2
 8011554:	2210      	movs	r2, #16
 8011556:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011558:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801155c:	3301      	adds	r3, #1
 801155e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011562:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011566:	2b05      	cmp	r3, #5
 8011568:	d9f0      	bls.n	801154c <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801156a:	2300      	movs	r3, #0
 801156c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011570:	e00b      	b.n	801158a <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 8011572:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	3206      	adds	r2, #6
 801157a:	2100      	movs	r1, #0
 801157c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011580:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011584:	3301      	adds	r3, #1
 8011586:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	7a5b      	ldrb	r3, [r3, #9]
 801158e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011592:	429a      	cmp	r2, r3
 8011594:	d3ed      	bcc.n	8011572 <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011596:	2300      	movs	r3, #0
 8011598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801159c:	e012      	b.n	80115c4 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 801159e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115a2:	3338      	adds	r3, #56	; 0x38
 80115a4:	443b      	add	r3, r7
 80115a6:	2200      	movs	r2, #0
 80115a8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80115ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115b0:	3338      	adds	r3, #56	; 0x38
 80115b2:	443b      	add	r3, r7
 80115b4:	2200      	movs	r2, #0
 80115b6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80115ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115be:	3301      	adds	r3, #1
 80115c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80115c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115c8:	2b0f      	cmp	r3, #15
 80115ca:	d9e8      	bls.n	801159e <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80115d2:	2300      	movs	r3, #0
 80115d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80115d8:	e068      	b.n	80116ac <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80115da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	4413      	add	r3, r2
 80115e2:	7b1b      	ldrb	r3, [r3, #12]
 80115e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 80115e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80115ec:	3338      	adds	r3, #56	; 0x38
 80115ee:	443b      	add	r3, r7
 80115f0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d115      	bne.n	8011624 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 80115f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80115fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011600:	0092      	lsls	r2, r2, #2
 8011602:	b2d2      	uxtb	r2, r2
 8011604:	3338      	adds	r3, #56	; 0x38
 8011606:	443b      	add	r3, r7
 8011608:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 801160c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011610:	683a      	ldr	r2, [r7, #0]
 8011612:	4413      	add	r3, r2
 8011614:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011618:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 801161a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801161e:	3301      	adds	r3, #1
 8011620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011628:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801162c:	443a      	add	r2, r7
 801162e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8011632:	3201      	adds	r2, #1
 8011634:	b2d2      	uxtb	r2, r2
 8011636:	3338      	adds	r3, #56	; 0x38
 8011638:	443b      	add	r3, r7
 801163a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801163e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011642:	3338      	adds	r3, #56	; 0x38
 8011644:	443b      	add	r3, r7
 8011646:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801164a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801164e:	2300      	movs	r3, #0
 8011650:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011654:	e021      	b.n	801169a <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8011656:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801165a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801165e:	441a      	add	r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	3206      	adds	r2, #6
 8011664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011668:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801166c:	009a      	lsls	r2, r3, #2
 801166e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011672:	441a      	add	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3206      	adds	r2, #6
 8011678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 801167c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8011680:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011684:	4402      	add	r2, r0
 8011686:	4419      	add	r1, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	3206      	adds	r2, #6
 801168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8011690:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011694:	3301      	adds	r3, #1
 8011696:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801169a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d9d9      	bls.n	8011656 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116a6:	3301      	adds	r3, #1
 80116a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116b0:	2b05      	cmp	r3, #5
 80116b2:	d992      	bls.n	80115da <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116b4:	2300      	movs	r3, #0
 80116b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116ba:	e022      	b.n	8011702 <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80116bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	4413      	add	r3, r2
 80116c4:	7b1b      	ldrb	r3, [r3, #12]
 80116c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80116ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80116ce:	2b0f      	cmp	r3, #15
 80116d0:	d80c      	bhi.n	80116ec <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80116d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80116d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80116da:	3238      	adds	r2, #56	; 0x38
 80116dc:	443a      	add	r2, r7
 80116de:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80116e2:	683a      	ldr	r2, [r7, #0]
 80116e4:	4413      	add	r3, r2
 80116e6:	460a      	mov	r2, r1
 80116e8:	749a      	strb	r2, [r3, #18]
 80116ea:	e005      	b.n	80116f8 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80116ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116f0:	683a      	ldr	r2, [r7, #0]
 80116f2:	4413      	add	r3, r2
 80116f4:	2200      	movs	r2, #0
 80116f6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116fc:	3301      	adds	r3, #1
 80116fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011702:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011706:	2b05      	cmp	r3, #5
 8011708:	d9d8      	bls.n	80116bc <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 801170a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	b2da      	uxtb	r2, r3
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011716:	2300      	movs	r3, #0
 8011718:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801171c:	e050      	b.n	80117c0 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801171e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011722:	3338      	adds	r3, #56	; 0x38
 8011724:	443b      	add	r3, r7
 8011726:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801172a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	2b00      	cmp	r3, #0
 8011730:	dd41      	ble.n	80117b6 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8011732:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011736:	3338      	adds	r3, #56	; 0x38
 8011738:	443b      	add	r3, r7
 801173a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801173e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8011742:	2300      	movs	r3, #0
 8011744:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011748:	e031      	b.n	80117ae <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 801174a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801174e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011752:	441a      	add	r2, r3
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	3206      	adds	r2, #6
 8011758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 801175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175e:	0fda      	lsrs	r2, r3, #31
 8011760:	4413      	add	r3, r2
 8011762:	105b      	asrs	r3, r3, #1
 8011764:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8011766:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801176a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801176e:	441a      	add	r2, r3
 8011770:	4401      	add	r1, r0
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	3206      	adds	r2, #6
 8011776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 801177a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801177e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011782:	441a      	add	r2, r3
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	3206      	adds	r2, #6
 8011788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801178c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011790:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011794:	441a      	add	r2, r3
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	fb91 f1f3 	sdiv	r1, r1, r3
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	3206      	adds	r2, #6
 80117a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80117a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117a8:	3301      	adds	r3, #1
 80117aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80117ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117b2:	2b03      	cmp	r3, #3
 80117b4:	d9c9      	bls.n	801174a <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80117b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117ba:	3301      	adds	r3, #1
 80117bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117c4:	2b0f      	cmp	r3, #15
 80117c6:	d9aa      	bls.n	801171e <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2200      	movs	r2, #0
 80117cc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80117ce:	7bfb      	ldrb	r3, [r7, #15]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d102      	bne.n	80117da <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 80117d4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d002      	beq.n	80117e0 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	2204      	movs	r2, #4
 80117de:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 80117e0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3738      	adds	r7, #56	; 0x38
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 80117ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ee:	b0cb      	sub	sp, #300	; 0x12c
 80117f0:	af06      	add	r7, sp, #24
 80117f2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80117f6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80117fa:	6020      	str	r0, [r4, #0]
 80117fc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011800:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011804:	6001      	str	r1, [r0, #0]
 8011806:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801180a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801180e:	600a      	str	r2, [r1, #0]
 8011810:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011814:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011818:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801181a:	2300      	movs	r3, #0
 801181c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8011820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011828:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801182c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8011830:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011834:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011838:	f107 0318 	add.w	r3, r7, #24
 801183c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8011840:	2300      	movs	r3, #0
 8011842:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011844:	2300      	movs	r3, #0
 8011846:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8011850:	2300      	movs	r3, #0
 8011852:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011856:	2300      	movs	r3, #0
 8011858:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 801185c:	2300      	movs	r3, #0
 801185e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801186c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011870:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011874:	6818      	ldr	r0, [r3, #0]
 8011876:	f7ff fe44 	bl	8011502 <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 801187a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801187e:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8011880:	b299      	uxth	r1, r3
 8011882:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011886:	3348      	adds	r3, #72	; 0x48
 8011888:	461a      	mov	r2, r3
 801188a:	2000      	movs	r0, #0
 801188c:	f7fd f9db 	bl	800ec46 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8011890:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011898:	3348      	adds	r3, #72	; 0x48
 801189a:	4619      	mov	r1, r3
 801189c:	4610      	mov	r0, r2
 801189e:	f7fd f994 	bl	800ebca <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80118a2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d142      	bne.n	8011930 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80118aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d039      	beq.n	8011930 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80118bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80118c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 80118d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 80118e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80118f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80118f6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80118fa:	6812      	ldr	r2, [r2, #0]
 80118fc:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011900:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011904:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011908:	6809      	ldr	r1, [r1, #0]
 801190a:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801190e:	f107 0014 	add.w	r0, r7, #20
 8011912:	9004      	str	r0, [sp, #16]
 8011914:	9103      	str	r1, [sp, #12]
 8011916:	9202      	str	r2, [sp, #8]
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	2300      	movs	r3, #0
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	2300      	movs	r3, #0
 8011920:	4632      	mov	r2, r6
 8011922:	4629      	mov	r1, r5
 8011924:	4620      	mov	r0, r4
 8011926:	f002 f98c 	bl	8013c42 <VL53L1_f_040>
 801192a:	4603      	mov	r3, r0
 801192c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011930:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011934:	2b00      	cmp	r3, #0
 8011936:	d115      	bne.n	8011964 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801193c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00c      	beq.n	8011964 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 801194a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801194e:	697a      	ldr	r2, [r7, #20]
 8011950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011954:	3348      	adds	r3, #72	; 0x48
 8011956:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801195a:	f002 fbe4 	bl	8014126 <VL53L1_f_041>
 801195e:	4603      	mov	r3, r0
 8011960:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011968:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 801196c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011970:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011978:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 801197c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011980:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011984:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011988:	2200      	movs	r2, #0
 801198a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 801198e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011998:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801199c:	2200      	movs	r2, #0
 801199e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80119a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119a6:	2200      	movs	r2, #0
 80119a8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 80119ac:	2300      	movs	r3, #0
 80119ae:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80119b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 80119c4:	2301      	movs	r3, #1
 80119c6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80119ca:	2300      	movs	r3, #0
 80119cc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80119d0:	e108      	b.n	8011be4 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80119d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80119e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 80119e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119e8:	3348      	adds	r3, #72	; 0x48
 80119ea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80119ee:	7814      	ldrb	r4, [r2, #0]
 80119f0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80119f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80119f8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80119fc:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011a00:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011a04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011a08:	9405      	str	r4, [sp, #20]
 8011a0a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011a0e:	9404      	str	r4, [sp, #16]
 8011a10:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011a14:	9403      	str	r4, [sp, #12]
 8011a16:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011a1a:	9402      	str	r4, [sp, #8]
 8011a1c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011a20:	9401      	str	r4, [sp, #4]
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011a28:	6812      	ldr	r2, [r2, #0]
 8011a2a:	6809      	ldr	r1, [r1, #0]
 8011a2c:	6800      	ldr	r0, [r0, #0]
 8011a2e:	f7fe fe65 	bl	80106fc <VL53L1_f_033>
 8011a32:	4603      	mov	r3, r0
 8011a34:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011a38:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f040 80cb 	bne.w	8011bd8 <VL53L1_hist_process_data+0x3ec>
 8011a42:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f040 80c6 	bne.w	8011bd8 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a50:	7c9b      	ldrb	r3, [r3, #18]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d110      	bne.n	8011a78 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a5a:	3314      	adds	r3, #20
 8011a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a64:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011a66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011a6a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a70:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011a72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011a76:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011a88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a94:	fb02 f303 	mul.w	r3, r2, r3
 8011a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011aa0:	011b      	lsls	r3, r3, #4
 8011aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011aac:	e08b      	b.n	8011bc6 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011aae:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011ab2:	224c      	movs	r2, #76	; 0x4c
 8011ab4:	fb02 f303 	mul.w	r3, r2, r3
 8011ab8:	3310      	adds	r3, #16
 8011aba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011abe:	4413      	add	r3, r2
 8011ac0:	3304      	adds	r3, #4
 8011ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011ac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011aca:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011ace:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ad2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	dd0e      	ble.n	8011af8 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011ada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ade:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011ae2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011ae4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ae8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011aec:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	b29b      	uxth	r3, r3
				delta_mm =
 8011af2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011af6:	e00d      	b.n	8011b14 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011afc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011b00:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011b02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b06:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011b0a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	b29b      	uxth	r3, r3
				delta_mm =
 8011b10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011b20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011b24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b30:	fb02 f303 	mul.w	r3, r2, r3
 8011b34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b3c:	015b      	lsls	r3, r3, #5
 8011b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011b42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b46:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	dd2f      	ble.n	8011bbc <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011b5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b60:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011b72:	429a      	cmp	r2, r3
 8011b74:	da22      	bge.n	8011bbc <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011b7c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d91b      	bls.n	8011bbc <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011b84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b88:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011b8a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011b8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d913      	bls.n	8011bbc <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011b94:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011b98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b9c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011ba0:	6812      	ldr	r2, [r2, #0]
 8011ba2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	da09      	bge.n	8011bbc <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011bb0:	224c      	movs	r2, #76	; 0x4c
 8011bb2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f007 fc82 	bl	80194c0 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011bbc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bca:	7c9b      	ldrb	r3, [r3, #18]
 8011bcc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	f4ff af6c 	bcc.w	8011aae <VL53L1_hist_process_data+0x2c2>
 8011bd6:	e000      	b.n	8011bda <VL53L1_hist_process_data+0x3ee>
			continue;
 8011bd8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011bda:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011bde:	3301      	adds	r3, #1
 8011be0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011be4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011be8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011bec:	429a      	cmp	r2, r3
 8011bee:	f67f aef0 	bls.w	80119d2 <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011c04:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c12 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b086      	sub	sp, #24
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	607a      	str	r2, [r7, #4]
 8011c1e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011c20:	2300      	movs	r3, #0
 8011c22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d104      	bne.n	8011c36 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f7f9 fb5a 	bl	800b2e6 <VL53L1_disable_firmware>
 8011c32:	4603      	mov	r3, r0
 8011c34:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d104      	bne.n	8011c48 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f7f9 fb82 	bl	800b348 <VL53L1_enable_powerforce>
 8011c44:	4603      	mov	r3, r0
 8011c46:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d105      	bne.n	8011c5c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011c50:	21fa      	movs	r1, #250	; 0xfa
 8011c52:	68f8      	ldr	r0, [r7, #12]
 8011c54:	f002 fdd0 	bl	80147f8 <VL53L1_WaitUs>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d107      	bne.n	8011c74 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011c64:	2201      	movs	r2, #1
 8011c66:	f240 7181 	movw	r1, #1921	; 0x781
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f002 fcd0 	bl	8014610 <VL53L1_WrByte>
 8011c70:	4603      	mov	r3, r0
 8011c72:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d107      	bne.n	8011c8c <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011c7c:	2205      	movs	r2, #5
 8011c7e:	f240 6183 	movw	r1, #1667	; 0x683
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f002 fcc4 	bl	8014610 <VL53L1_WrByte>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d105      	bne.n	8011ca0 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011c94:	6879      	ldr	r1, [r7, #4]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f002 fdae 	bl	80147f8 <VL53L1_WaitUs>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d107      	bne.n	8011cb8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011ca8:	2201      	movs	r2, #1
 8011caa:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f002 fcae 	bl	8014610 <VL53L1_WrByte>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d108      	bne.n	8011cd2 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011cc0:	897b      	ldrh	r3, [r7, #10]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	f240 7184 	movw	r1, #1924	; 0x784
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f002 fccb 	bl	8014664 <VL53L1_WrWord>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3718      	adds	r7, #24
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b086      	sub	sp, #24
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	607b      	str	r3, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	72fb      	strb	r3, [r7, #11]
 8011cec:	4613      	mov	r3, r2
 8011cee:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011cf8:	7afb      	ldrb	r3, [r7, #11]
 8011cfa:	75bb      	strb	r3, [r7, #22]
 8011cfc:	e041      	b.n	8011d82 <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d108      	bne.n	8011d18 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011d06:	7dbb      	ldrb	r3, [r7, #22]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	f240 7194 	movw	r1, #1940	; 0x794
 8011d0e:	68f8      	ldr	r0, [r7, #12]
 8011d10:	f002 fc7e 	bl	8014610 <VL53L1_WrByte>
 8011d14:	4603      	mov	r3, r0
 8011d16:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d107      	bne.n	8011d30 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8011d20:	2200      	movs	r2, #0
 8011d22:	f240 7183 	movw	r1, #1923	; 0x783
 8011d26:	68f8      	ldr	r0, [r7, #12]
 8011d28:	f002 fc72 	bl	8014610 <VL53L1_WrByte>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8011d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d105      	bne.n	8011d44 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011d38:	2105      	movs	r1, #5
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f002 fd5c 	bl	80147f8 <VL53L1_WaitUs>
 8011d40:	4603      	mov	r3, r0
 8011d42:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d107      	bne.n	8011d5c <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	f240 7183 	movw	r1, #1923	; 0x783
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f002 fc5c 	bl	8014610 <VL53L1_WrByte>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d108      	bne.n	8011d76 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011d64:	2304      	movs	r3, #4
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f002 fc19 	bl	80145a4 <VL53L1_ReadMulti>
 8011d72:	4603      	mov	r3, r0
 8011d74:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	3304      	adds	r3, #4
 8011d7a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011d7c:	7dbb      	ldrb	r3, [r7, #22]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	75bb      	strb	r3, [r7, #22]
 8011d82:	7dba      	ldrb	r2, [r7, #22]
 8011d84:	7af9      	ldrb	r1, [r7, #11]
 8011d86:	7abb      	ldrb	r3, [r7, #10]
 8011d88:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	dbb7      	blt.n	8011cfe <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8011d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3718      	adds	r7, #24
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b084      	sub	sp, #16
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d107      	bne.n	8011dbe <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011dae:	2201      	movs	r2, #1
 8011db0:	f240 7183 	movw	r1, #1923	; 0x783
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f002 fc2b 	bl	8014610 <VL53L1_WrByte>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d107      	bne.n	8011dd6 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f240 7181 	movw	r1, #1921	; 0x781
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f002 fc1f 	bl	8014610 <VL53L1_WrByte>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8011dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d104      	bne.n	8011de8 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7f9 fac4 	bl	800b36c <VL53L1_disable_powerforce>
 8011de4:	4603      	mov	r3, r0
 8011de6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d104      	bne.n	8011dfa <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7f9 fa66 	bl	800b2c2 <VL53L1_enable_firmware>
 8011df6:	4603      	mov	r3, r0
 8011df8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011e06:	b480      	push	{r7}
 8011e08:	b087      	sub	sp, #28
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	60b9      	str	r1, [r7, #8]
 8011e10:	607a      	str	r2, [r7, #4]
 8011e12:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e14:	2300      	movs	r3, #0
 8011e16:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011e1c:	89fb      	ldrh	r3, [r7, #14]
 8011e1e:	2b03      	cmp	r3, #3
 8011e20:	d802      	bhi.n	8011e28 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011e22:	f06f 0308 	mvn.w	r3, #8
 8011e26:	e018      	b.n	8011e5a <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e2c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	3302      	adds	r3, #2
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	8afa      	ldrh	r2, [r7, #22]
 8011e38:	1ad3      	subs	r3, r2, r3
 8011e3a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011e3c:	8afb      	ldrh	r3, [r7, #22]
 8011e3e:	2bff      	cmp	r3, #255	; 0xff
 8011e40:	d901      	bls.n	8011e46 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011e42:	2300      	movs	r3, #0
 8011e44:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011e46:	8afb      	ldrh	r3, [r7, #22]
 8011e48:	b2da      	uxtb	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	78da      	ldrb	r2, [r3, #3]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	705a      	strb	r2, [r3, #1]

	return status;
 8011e56:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	371c      	adds	r7, #28
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr

08011e66 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011e66:	b590      	push	{r4, r7, lr}
 8011e68:	b087      	sub	sp, #28
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	607a      	str	r2, [r7, #4]
 8011e72:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e74:	2300      	movs	r3, #0
 8011e76:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8011e80:	89fb      	ldrh	r3, [r7, #14]
 8011e82:	2b37      	cmp	r3, #55	; 0x37
 8011e84:	d802      	bhi.n	8011e8c <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011e86:	f06f 0308 	mvn.w	r3, #8
 8011e8a:	e03e      	b.n	8011f0a <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011e8c:	68b9      	ldr	r1, [r7, #8]
 8011e8e:	2002      	movs	r0, #2
 8011e90:	f7f9 f8fd 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011e94:	4603      	mov	r3, r0
 8011e96:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	2002      	movs	r0, #2
 8011ea4:	f7f9 f8f3 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8011eb4:	099b      	lsrs	r3, r3, #6
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2219      	movs	r2, #25
 8011ec0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2205      	movs	r2, #5
 8011ec6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2205      	movs	r2, #5
 8011ecc:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	74fb      	strb	r3, [r7, #19]
 8011ed8:	e012      	b.n	8011f00 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8011eda:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8011edc:	6979      	ldr	r1, [r7, #20]
 8011ede:	2002      	movs	r0, #2
 8011ee0:	f7f9 f8d5 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	1d23      	adds	r3, r4, #4
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	4413      	add	r3, r2
 8011ef0:	460a      	mov	r2, r1
 8011ef2:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	3302      	adds	r3, #2
 8011ef8:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011efa:	7cfb      	ldrb	r3, [r7, #19]
 8011efc:	3301      	adds	r3, #1
 8011efe:	74fb      	strb	r3, [r7, #19]
 8011f00:	7cfb      	ldrb	r3, [r7, #19]
 8011f02:	2b18      	cmp	r3, #24
 8011f04:	d9e9      	bls.n	8011eda <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8011f06:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	371c      	adds	r7, #28
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd90      	pop	{r4, r7, pc}

08011f12 <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b086      	sub	sp, #24
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	4603      	mov	r3, r0
 8011f1a:	60b9      	str	r1, [r7, #8]
 8011f1c:	607a      	str	r2, [r7, #4]
 8011f1e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f20:	2300      	movs	r3, #0
 8011f22:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8011f24:	89fb      	ldrh	r3, [r7, #14]
 8011f26:	2b07      	cmp	r3, #7
 8011f28:	d802      	bhi.n	8011f30 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011f2a:	f06f 0308 	mvn.w	r3, #8
 8011f2e:	e027      	b.n	8011f80 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011f30:	68b9      	ldr	r1, [r7, #8]
 8011f32:	2002      	movs	r0, #2
 8011f34:	f7f9 f8ab 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	3302      	adds	r3, #2
 8011f44:	4619      	mov	r1, r3
 8011f46:	2002      	movs	r0, #2
 8011f48:	f7f9 f8a1 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	3304      	adds	r3, #4
 8011f58:	4619      	mov	r1, r3
 8011f5a:	2002      	movs	r0, #2
 8011f5c:	f7f9 f897 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011f60:	4603      	mov	r3, r0
 8011f62:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	3306      	adds	r3, #6
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	2002      	movs	r0, #2
 8011f70:	f7f9 f88d 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	80da      	strh	r2, [r3, #6]

	return status;
 8011f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3718      	adds	r7, #24
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
 8011f94:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f96:	2300      	movs	r3, #0
 8011f98:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8011f9a:	89fb      	ldrh	r3, [r7, #14]
 8011f9c:	2b0f      	cmp	r3, #15
 8011f9e:	d802      	bhi.n	8011fa6 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011fa0:	f06f 0308 	mvn.w	r3, #8
 8011fa4:	e04d      	b.n	8012042 <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011fa6:	68b9      	ldr	r1, [r7, #8]
 8011fa8:	2002      	movs	r0, #2
 8011faa:	f7f9 f870 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	789a      	ldrb	r2, [r3, #2]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	78da      	ldrb	r2, [r3, #3]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	3304      	adds	r3, #4
 8011fca:	4619      	mov	r1, r3
 8011fcc:	2002      	movs	r0, #2
 8011fce:	f7f9 f85e 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	3306      	adds	r3, #6
 8011fde:	4619      	mov	r1, r3
 8011fe0:	2002      	movs	r0, #2
 8011fe2:	f7f9 f854 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	3308      	adds	r3, #8
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	2002      	movs	r0, #2
 8011ff6:	f7f9 f84a 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	330a      	adds	r3, #10
 8012006:	4619      	mov	r1, r3
 8012008:	2002      	movs	r0, #2
 801200a:	f7f9 f840 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 801200e:	4603      	mov	r3, r0
 8012010:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	330c      	adds	r3, #12
 801201a:	4619      	mov	r1, r3
 801201c:	2002      	movs	r0, #2
 801201e:	f7f9 f836 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012022:	4603      	mov	r3, r0
 8012024:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	330e      	adds	r3, #14
 801202e:	4619      	mov	r1, r3
 8012030:	2002      	movs	r0, #2
 8012032:	f7f9 f82c 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012036:	4603      	mov	r3, r0
 8012038:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	81da      	strh	r2, [r3, #14]

	return status;
 801203e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b086      	sub	sp, #24
 801204e:	af00      	add	r7, sp, #0
 8012050:	60f8      	str	r0, [r7, #12]
 8012052:	607b      	str	r3, [r7, #4]
 8012054:	460b      	mov	r3, r1
 8012056:	72fb      	strb	r3, [r7, #11]
 8012058:	4613      	mov	r3, r2
 801205a:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801205c:	2300      	movs	r3, #0
 801205e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8012060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d106      	bne.n	8012076 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8012068:	2232      	movs	r2, #50	; 0x32
 801206a:	2104      	movs	r1, #4
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f7ff fdd0 	bl	8011c12 <VL53L1_nvm_enable>
 8012072:	4603      	mov	r3, r0
 8012074:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8012076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d107      	bne.n	801208e <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 801207e:	7aba      	ldrb	r2, [r7, #10]
 8012080:	7af9      	ldrb	r1, [r7, #11]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f7ff fe2a 	bl	8011cde <VL53L1_nvm_read>
 801208a:	4603      	mov	r3, r0
 801208c:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 801208e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d104      	bne.n	80120a0 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8012096:	68f8      	ldr	r0, [r7, #12]
 8012098:	f7ff fe7f 	bl	8011d9a <VL53L1_nvm_disable>
 801209c:	4603      	mov	r3, r0
 801209e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80120a0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80120b6:	2300      	movs	r3, #0
 80120b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80120ba:	f107 0308 	add.w	r3, r7, #8
 80120be:	2201      	movs	r2, #1
 80120c0:	212e      	movs	r1, #46	; 0x2e
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff ffc1 	bl	801204a <VL53L1_read_nvm_raw_data>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80120cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d108      	bne.n	80120e6 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80120d4:	f107 0308 	add.w	r3, r7, #8
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	4619      	mov	r1, r3
 80120dc:	2004      	movs	r0, #4
 80120de:	f7ff fe92 	bl	8011e06 <VL53L1_nvm_decode_optical_centre>
 80120e2:	4603      	mov	r3, r0
 80120e4:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80120e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b092      	sub	sp, #72	; 0x48
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80120fc:	2300      	movs	r3, #0
 80120fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012102:	f107 030c 	add.w	r3, r7, #12
 8012106:	220e      	movs	r2, #14
 8012108:	2157      	movs	r1, #87	; 0x57
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff ff9d 	bl	801204a <VL53L1_read_nvm_raw_data>
 8012110:	4603      	mov	r3, r0
 8012112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012116:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801211a:	2b00      	cmp	r3, #0
 801211c:	d109      	bne.n	8012132 <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 801211e:	f107 030c 	add.w	r3, r7, #12
 8012122:	683a      	ldr	r2, [r7, #0]
 8012124:	4619      	mov	r1, r3
 8012126:	2038      	movs	r0, #56	; 0x38
 8012128:	f7ff fe9d 	bl	8011e66 <VL53L1_nvm_decode_cal_peak_rate_map>
 801212c:	4603      	mov	r3, r0
 801212e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012132:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012136:	4618      	mov	r0, r3
 8012138:	3748      	adds	r7, #72	; 0x48
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b086      	sub	sp, #24
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012148:	2300      	movs	r3, #0
 801214a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801214c:	f107 030c 	add.w	r3, r7, #12
 8012150:	2202      	movs	r2, #2
 8012152:	2165      	movs	r1, #101	; 0x65
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff ff78 	bl	801204a <VL53L1_read_nvm_raw_data>
 801215a:	4603      	mov	r3, r0
 801215c:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801215e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d108      	bne.n	8012178 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8012166:	f107 030c 	add.w	r3, r7, #12
 801216a:	683a      	ldr	r2, [r7, #0]
 801216c:	4619      	mov	r1, r3
 801216e:	2008      	movs	r0, #8
 8012170:	f7ff fecf 	bl	8011f12 <VL53L1_nvm_decode_additional_offset_cal_data>
 8012174:	4603      	mov	r3, r0
 8012176:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012178:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801217c:	4618      	mov	r0, r3
 801217e:	3718      	adds	r7, #24
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b08a      	sub	sp, #40	; 0x28
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	460b      	mov	r3, r1
 801218e:	607a      	str	r2, [r7, #4]
 8012190:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012192:	2300      	movs	r3, #0
 8012194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8012198:	897b      	ldrh	r3, [r7, #10]
 801219a:	089b      	lsrs	r3, r3, #2
 801219c:	b29b      	uxth	r3, r3
 801219e:	b2d9      	uxtb	r1, r3
 80121a0:	f107 0314 	add.w	r3, r7, #20
 80121a4:	2204      	movs	r2, #4
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7ff ff4f 	bl	801204a <VL53L1_read_nvm_raw_data>
 80121ac:	4603      	mov	r3, r0
 80121ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80121b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d109      	bne.n	80121ce <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80121ba:	f107 0314 	add.w	r3, r7, #20
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	4619      	mov	r1, r3
 80121c2:	2010      	movs	r0, #16
 80121c4:	f7ff fee0 	bl	8011f88 <VL53L1_nvm_decode_fmt_range_results_data>
 80121c8:	4603      	mov	r3, r0
 80121ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80121ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3728      	adds	r7, #40	; 0x28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b086      	sub	sp, #24
 80121de:	af00      	add	r7, sp, #0
 80121e0:	60f8      	str	r0, [r7, #12]
 80121e2:	460b      	mov	r3, r1
 80121e4:	607a      	str	r2, [r7, #4]
 80121e6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80121e8:	2300      	movs	r3, #0
 80121ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80121ec:	897b      	ldrh	r3, [r7, #10]
 80121ee:	2b0a      	cmp	r3, #10
 80121f0:	d802      	bhi.n	80121f8 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80121f2:	f06f 0309 	mvn.w	r3, #9
 80121f6:	e047      	b.n	8012288 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012200:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801220e:	f002 020f 	and.w	r2, r2, #15
 8012212:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012214:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801221e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012222:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012224:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801222e:	f002 0203 	and.w	r2, r2, #3
 8012232:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012234:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801223e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012242:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012244:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	88d8      	ldrh	r0, [r3, #6]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	3305      	adds	r3, #5
 801224e:	461a      	mov	r2, r3
 8012250:	2102      	movs	r1, #2
 8012252:	f7f8 fef1 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801225e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8012264:	68fa      	ldr	r2, [r7, #12]
 8012266:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012268:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8012272:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012276:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012278:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8012282:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3718      	adds	r7, #24
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	4603      	mov	r3, r0
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
 801229c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801229e:	2300      	movs	r3, #0
 80122a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80122a2:	89fb      	ldrh	r3, [r7, #14]
 80122a4:	2b0a      	cmp	r3, #10
 80122a6:	d802      	bhi.n	80122ae <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80122a8:	f06f 0309 	mvn.w	r3, #9
 80122ac:	e046      	b.n	801233c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122b6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	3301      	adds	r3, #1
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	f003 030f 	and.w	r3, r3, #15
 80122c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	3302      	adds	r3, #2
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	3303      	adds	r3, #3
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f003 0303 	and.w	r3, r3, #3
 80122e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	3304      	adds	r3, #4
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	3305      	adds	r3, #5
 8012300:	4619      	mov	r1, r3
 8012302:	2002      	movs	r0, #2
 8012304:	f7f8 fec3 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012308:	4603      	mov	r3, r0
 801230a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	79da      	ldrb	r2, [r3, #7]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	7a1a      	ldrb	r2, [r3, #8]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	3309      	adds	r3, #9
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801232a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	7a9a      	ldrb	r2, [r3, #10]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3718      	adds	r7, #24
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801234e:	2300      	movs	r3, #0
 8012350:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d108      	bne.n	801236c <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801235a:	f107 020c 	add.w	r2, r7, #12
 801235e:	230b      	movs	r3, #11
 8012360:	2101      	movs	r1, #1
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f002 f91e 	bl	80145a4 <VL53L1_ReadMulti>
 8012368:	4603      	mov	r3, r0
 801236a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 801236c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d108      	bne.n	8012386 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8012374:	f107 030c 	add.w	r3, r7, #12
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	4619      	mov	r1, r3
 801237c:	200b      	movs	r0, #11
 801237e:	f7ff ff87 	bl	8012290 <VL53L1_i2c_decode_static_nvm_managed>
 8012382:	4603      	mov	r3, r0
 8012384:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3718      	adds	r7, #24
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b086      	sub	sp, #24
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	460b      	mov	r3, r1
 801239c:	607a      	str	r2, [r7, #4]
 801239e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123a0:	2300      	movs	r3, #0
 80123a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80123a4:	897b      	ldrh	r3, [r7, #10]
 80123a6:	2b16      	cmp	r3, #22
 80123a8:	d802      	bhi.n	80123b0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80123aa:	f06f 0309 	mvn.w	r3, #9
 80123ae:	e076      	b.n	801249e <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80123bc:	68fa      	ldr	r2, [r7, #12]
 80123be:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80123c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80123ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80123d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80123da:	68fa      	ldr	r2, [r7, #12]
 80123dc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80123de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80123e8:	f002 020f 	and.w	r2, r2, #15
 80123ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80123ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80123f4:	68fa      	ldr	r2, [r7, #12]
 80123f6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80123f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012402:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012406:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012408:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8012412:	f002 0203 	and.w	r2, r2, #3
 8012416:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012418:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	8958      	ldrh	r0, [r3, #10]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3309      	adds	r3, #9
 8012422:	461a      	mov	r2, r3
 8012424:	2102      	movs	r1, #2
 8012426:	f7f8 fe07 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	330b      	adds	r3, #11
 8012434:	461a      	mov	r2, r3
 8012436:	2102      	movs	r1, #2
 8012438:	f7f8 fe49 	bl	800b0ce <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	330d      	adds	r3, #13
 8012446:	461a      	mov	r2, r3
 8012448:	2102      	movs	r1, #2
 801244a:	f7f8 fe40 	bl	800b0ce <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	8a18      	ldrh	r0, [r3, #16]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	330f      	adds	r3, #15
 8012456:	461a      	mov	r2, r3
 8012458:	2102      	movs	r1, #2
 801245a:	f7f8 fded 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8012464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012468:	b218      	sxth	r0, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	3311      	adds	r3, #17
 801246e:	461a      	mov	r2, r3
 8012470:	2102      	movs	r1, #2
 8012472:	f7f8 fe2c 	bl	800b0ce <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	3313      	adds	r3, #19
 8012480:	461a      	mov	r2, r3
 8012482:	2102      	movs	r1, #2
 8012484:	f7f8 fe23 	bl	800b0ce <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	3315      	adds	r3, #21
 8012492:	461a      	mov	r2, r3
 8012494:	2102      	movs	r1, #2
 8012496:	f7f8 fe1a 	bl	800b0ce <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 801249a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b086      	sub	sp, #24
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	4603      	mov	r3, r0
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	607a      	str	r2, [r7, #4]
 80124b2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124b4:	2300      	movs	r3, #0
 80124b6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80124b8:	89fb      	ldrh	r3, [r7, #14]
 80124ba:	2b16      	cmp	r3, #22
 80124bc:	d802      	bhi.n	80124c4 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124be:	f06f 0309 	mvn.w	r3, #9
 80124c2:	e079      	b.n	80125b8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	785a      	ldrb	r2, [r3, #1]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	789a      	ldrb	r2, [r3, #2]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	78da      	ldrb	r2, [r3, #3]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	791a      	ldrb	r2, [r3, #4]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	3305      	adds	r3, #5
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	f003 030f 	and.w	r3, r3, #15
 80124f6:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	799a      	ldrb	r2, [r3, #6]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	3307      	adds	r3, #7
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801250e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	3308      	adds	r3, #8
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	f003 0303 	and.w	r3, r3, #3
 801251e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	3309      	adds	r3, #9
 8012528:	4619      	mov	r1, r3
 801252a:	2002      	movs	r0, #2
 801252c:	f7f8 fdaf 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012530:	4603      	mov	r3, r0
 8012532:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	330b      	adds	r3, #11
 801253c:	4619      	mov	r1, r3
 801253e:	2002      	movs	r0, #2
 8012540:	f7f8 fdf1 	bl	800b126 <VL53L1_i2c_decode_int16_t>
 8012544:	4603      	mov	r3, r0
 8012546:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	330d      	adds	r3, #13
 8012550:	4619      	mov	r1, r3
 8012552:	2002      	movs	r0, #2
 8012554:	f7f8 fde7 	bl	800b126 <VL53L1_i2c_decode_int16_t>
 8012558:	4603      	mov	r3, r0
 801255a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	330f      	adds	r3, #15
 8012564:	4619      	mov	r1, r3
 8012566:	2002      	movs	r0, #2
 8012568:	f7f8 fd91 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 801256c:	4603      	mov	r3, r0
 801256e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	3311      	adds	r3, #17
 8012578:	4619      	mov	r1, r3
 801257a:	2002      	movs	r0, #2
 801257c:	f7f8 fdd3 	bl	800b126 <VL53L1_i2c_decode_int16_t>
 8012580:	4603      	mov	r3, r0
 8012582:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012586:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	3313      	adds	r3, #19
 8012590:	4619      	mov	r1, r3
 8012592:	2002      	movs	r0, #2
 8012594:	f7f8 fdc7 	bl	800b126 <VL53L1_i2c_decode_int16_t>
 8012598:	4603      	mov	r3, r0
 801259a:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	3315      	adds	r3, #21
 80125a4:	4619      	mov	r1, r3
 80125a6:	2002      	movs	r0, #2
 80125a8:	f7f8 fdbd 	bl	800b126 <VL53L1_i2c_decode_int16_t>
 80125ac:	4603      	mov	r3, r0
 80125ae:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80125b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b088      	sub	sp, #32
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125ca:	2300      	movs	r3, #0
 80125cc:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80125ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d108      	bne.n	80125e8 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80125d6:	f107 0208 	add.w	r2, r7, #8
 80125da:	2317      	movs	r3, #23
 80125dc:	210d      	movs	r1, #13
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f001 ffe0 	bl	80145a4 <VL53L1_ReadMulti>
 80125e4:	4603      	mov	r3, r0
 80125e6:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80125e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d108      	bne.n	8012602 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80125f0:	f107 0308 	add.w	r3, r7, #8
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	4619      	mov	r1, r3
 80125f8:	2017      	movs	r0, #23
 80125fa:	f7ff ff54 	bl	80124a6 <VL53L1_i2c_decode_customer_nvm_managed>
 80125fe:	4603      	mov	r3, r0
 8012600:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012602:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3720      	adds	r7, #32
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b086      	sub	sp, #24
 8012612:	af00      	add	r7, sp, #0
 8012614:	60f8      	str	r0, [r7, #12]
 8012616:	460b      	mov	r3, r1
 8012618:	607a      	str	r2, [r7, #4]
 801261a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801261c:	2300      	movs	r3, #0
 801261e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8012620:	897b      	ldrh	r3, [r7, #10]
 8012622:	2b1f      	cmp	r3, #31
 8012624:	d802      	bhi.n	801262c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012626:	f06f 0309 	mvn.w	r3, #9
 801262a:	e0cf      	b.n	80127cc <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	881b      	ldrh	r3, [r3, #0]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	2102      	movs	r1, #2
 8012634:	4618      	mov	r0, r3
 8012636:	f7f8 fcff 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8012642:	f002 0201 	and.w	r2, r2, #1
 8012646:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012648:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8012652:	f002 020f 	and.w	r2, r2, #15
 8012656:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012658:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8012662:	f002 020f 	and.w	r2, r2, #15
 8012666:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012668:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8012672:	f002 021f 	and.w	r2, r2, #31
 8012676:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012678:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012686:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8012692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012696:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012698:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80126a2:	f002 0201 	and.w	r2, r2, #1
 80126a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80126a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80126b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80126bc:	f002 0201 	and.w	r2, r2, #1
 80126c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80126c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80126cc:	f002 0203 	and.w	r2, r2, #3
 80126d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80126d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80126dc:	f002 021f 	and.w	r2, r2, #31
 80126e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80126e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80126ec:	f002 0203 	and.w	r2, r2, #3
 80126f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80126f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80126fc:	f002 0203 	and.w	r2, r2, #3
 8012700:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8012702:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801270c:	f002 0207 	and.w	r2, r2, #7
 8012710:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8012712:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801271c:	f002 021f 	and.w	r2, r2, #31
 8012720:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8012722:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801272c:	f002 0201 	and.w	r2, r2, #1
 8012730:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012732:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801273c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012746:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012750:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801275a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8012760:	68fa      	ldr	r2, [r7, #12]
 8012762:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8012764:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 801276a:	68fa      	ldr	r2, [r7, #12]
 801276c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 801276e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	8b18      	ldrh	r0, [r3, #24]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3318      	adds	r3, #24
 8012778:	461a      	mov	r2, r3
 801277a:	2102      	movs	r1, #2
 801277c:	f7f8 fc5c 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012788:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 801278e:	68fa      	ldr	r2, [r7, #12]
 8012790:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8012792:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 801279c:	f002 020f 	and.w	r2, r2, #15
 80127a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80127a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80127ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80127b6:	f002 020f 	and.w	r2, r2, #15
 80127ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80127bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80127c2:	68fa      	ldr	r2, [r7, #12]
 80127c4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80127c6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80127c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	460b      	mov	r3, r1
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127e2:	2300      	movs	r3, #0
 80127e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 80127e6:	897b      	ldrh	r3, [r7, #10]
 80127e8:	2b15      	cmp	r3, #21
 80127ea:	d802      	bhi.n	80127f2 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127ec:	f06f 0309 	mvn.w	r3, #9
 80127f0:	e070      	b.n	80128d4 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80127fe:	68fa      	ldr	r2, [r7, #12]
 8012800:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012802:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801280c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012816:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801281a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801281c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8012822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012826:	b298      	uxth	r0, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	3304      	adds	r3, #4
 801282c:	461a      	mov	r2, r3
 801282e:	2102      	movs	r1, #2
 8012830:	f7f8 fc02 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801283c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012840:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012842:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801284c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012856:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8012860:	f002 0201 	and.w	r2, r2, #1
 8012864:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012866:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8012870:	f002 0207 	and.w	r2, r2, #7
 8012874:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012876:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	8998      	ldrh	r0, [r3, #12]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	330c      	adds	r3, #12
 8012880:	461a      	mov	r2, r3
 8012882:	2102      	movs	r1, #2
 8012884:	f7f8 fbd8 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	89d8      	ldrh	r0, [r3, #14]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	330e      	adds	r3, #14
 8012890:	461a      	mov	r2, r3
 8012892:	2102      	movs	r1, #2
 8012894:	f7f8 fbd0 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	8a18      	ldrh	r0, [r3, #16]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	3310      	adds	r3, #16
 80128a0:	461a      	mov	r2, r3
 80128a2:	2102      	movs	r1, #2
 80128a4:	f7f8 fbc8 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80128b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80128b6:	68fa      	ldr	r2, [r7, #12]
 80128b8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80128ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80128c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80128ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80128d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	460b      	mov	r3, r1
 80128e6:	607a      	str	r2, [r7, #4]
 80128e8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80128ea:	2300      	movs	r3, #0
 80128ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 80128ee:	897b      	ldrh	r3, [r7, #10]
 80128f0:	2b16      	cmp	r3, #22
 80128f2:	d802      	bhi.n	80128fa <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80128f4:	f06f 0309 	mvn.w	r3, #9
 80128f8:	e06e      	b.n	80129d8 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	f003 030f 	and.w	r3, r3, #15
 8012902:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012910:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801291a:	f002 020f 	and.w	r2, r2, #15
 801291e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012920:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801292a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012934:	f002 020f 	and.w	r2, r2, #15
 8012938:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801293a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012944:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801294e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012952:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801295e:	f002 020f 	and.w	r2, r2, #15
 8012962:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012964:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801296e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012978:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801297c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801297e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	8958      	ldrh	r0, [r3, #10]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	330a      	adds	r3, #10
 8012988:	461a      	mov	r2, r3
 801298a:	2102      	movs	r1, #2
 801298c:	f7f8 fb54 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	8998      	ldrh	r0, [r3, #12]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	330c      	adds	r3, #12
 8012998:	461a      	mov	r2, r3
 801299a:	2102      	movs	r1, #2
 801299c:	f7f8 fb4c 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80129a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80129b2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6918      	ldr	r0, [r3, #16]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	3312      	adds	r3, #18
 80129bc:	461a      	mov	r2, r3
 80129be:	2104      	movs	r1, #4
 80129c0:	f7f8 fbda 	bl	800b178 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80129cc:	f002 0201 	and.w	r2, r2, #1
 80129d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80129d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80129d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3718      	adds	r7, #24
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	460b      	mov	r3, r1
 80129ea:	607a      	str	r2, [r7, #4]
 80129ec:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80129ee:	2300      	movs	r3, #0
 80129f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 80129f2:	897b      	ldrh	r3, [r7, #10]
 80129f4:	2b11      	cmp	r3, #17
 80129f6:	d802      	bhi.n	80129fe <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80129f8:	f06f 0309 	mvn.w	r3, #9
 80129fc:	e071      	b.n	8012ae2 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	f003 0303 	and.w	r3, r3, #3
 8012a06:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	8858      	ldrh	r0, [r3, #2]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3301      	adds	r3, #1
 8012a14:	461a      	mov	r2, r3
 8012a16:	2102      	movs	r1, #2
 8012a18:	f7f8 fb0e 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	8898      	ldrh	r0, [r3, #4]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	3303      	adds	r3, #3
 8012a24:	461a      	mov	r2, r3
 8012a26:	2102      	movs	r1, #2
 8012a28:	f7f8 fb06 	bl	800b038 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012a34:	f002 0201 	and.w	r2, r2, #1
 8012a38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012a3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012a44:	f002 0207 	and.w	r2, r2, #7
 8012a48:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012a4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012a54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012a5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012a6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012a7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012a88:	f002 0203 	and.w	r2, r2, #3
 8012a8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012a8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012a98:	f002 0203 	and.w	r2, r2, #3
 8012a9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012a9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012aa8:	f002 020f 	and.w	r2, r2, #15
 8012aac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012aae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012ab4:	68fa      	ldr	r2, [r7, #12]
 8012ab6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012ab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012abe:	68fa      	ldr	r2, [r7, #12]
 8012ac0:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012ac2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012acc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012ad6:	f002 0203 	and.w	r2, r2, #3
 8012ada:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012adc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3718      	adds	r7, #24
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012aea:	b480      	push	{r7}
 8012aec:	b087      	sub	sp, #28
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	60f8      	str	r0, [r7, #12]
 8012af2:	460b      	mov	r3, r1
 8012af4:	607a      	str	r2, [r7, #4]
 8012af6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012af8:	2300      	movs	r3, #0
 8012afa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012afc:	897b      	ldrh	r3, [r7, #10]
 8012afe:	2b04      	cmp	r3, #4
 8012b00:	d802      	bhi.n	8012b08 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012b02:	f06f 0309 	mvn.w	r3, #9
 8012b06:	e025      	b.n	8012b54 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	f003 0301 	and.w	r3, r3, #1
 8012b10:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012b1e:	f002 0201 	and.w	r2, r2, #1
 8012b22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012b24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012b2e:	f002 0201 	and.w	r2, r2, #1
 8012b32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012b34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012b3e:	f002 0203 	and.w	r2, r2, #3
 8012b42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012b44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012b4e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	371c      	adds	r7, #28
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d108      	bne.n	8012b88 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012b76:	f107 0308 	add.w	r3, r7, #8
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	2105      	movs	r1, #5
 8012b7e:	6838      	ldr	r0, [r7, #0]
 8012b80:	f7ff ffb3 	bl	8012aea <VL53L1_i2c_encode_system_control>
 8012b84:	4603      	mov	r3, r0
 8012b86:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d108      	bne.n	8012ba2 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012b90:	f107 0208 	add.w	r2, r7, #8
 8012b94:	2305      	movs	r3, #5
 8012b96:	2183      	movs	r1, #131	; 0x83
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f001 fccd 	bl	8014538 <VL53L1_WriteMulti>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}

08012bae <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b086      	sub	sp, #24
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	60b9      	str	r1, [r7, #8]
 8012bb8:	607a      	str	r2, [r7, #4]
 8012bba:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012bc0:	89fb      	ldrh	r3, [r7, #14]
 8012bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8012bc4:	d802      	bhi.n	8012bcc <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012bc6:	f06f 0309 	mvn.w	r3, #9
 8012bca:	e0e2      	b.n	8012d92 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bd4:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	785a      	ldrb	r2, [r3, #1]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	3302      	adds	r3, #2
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	f003 030f 	and.w	r3, r3, #15
 8012bec:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	78da      	ldrb	r2, [r3, #3]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	3304      	adds	r3, #4
 8012bfe:	4619      	mov	r1, r3
 8012c00:	2002      	movs	r0, #2
 8012c02:	f7f8 fa44 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c06:	4603      	mov	r3, r0
 8012c08:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	3306      	adds	r3, #6
 8012c12:	4619      	mov	r1, r3
 8012c14:	2002      	movs	r0, #2
 8012c16:	f7f8 fa3a 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	3308      	adds	r3, #8
 8012c26:	4619      	mov	r1, r3
 8012c28:	2002      	movs	r0, #2
 8012c2a:	f7f8 fa30 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	330a      	adds	r3, #10
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	2002      	movs	r0, #2
 8012c3e:	f7f8 fa26 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c42:	4603      	mov	r3, r0
 8012c44:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	330c      	adds	r3, #12
 8012c4e:	4619      	mov	r1, r3
 8012c50:	2002      	movs	r0, #2
 8012c52:	f7f8 fa1c 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c56:	4603      	mov	r3, r0
 8012c58:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	330e      	adds	r3, #14
 8012c62:	4619      	mov	r1, r3
 8012c64:	2002      	movs	r0, #2
 8012c66:	f7f8 fa12 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	3310      	adds	r3, #16
 8012c76:	4619      	mov	r1, r3
 8012c78:	2002      	movs	r0, #2
 8012c7a:	f7f8 fa08 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	3312      	adds	r3, #18
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	2002      	movs	r0, #2
 8012c8e:	f7f8 f9fe 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012c92:	4603      	mov	r3, r0
 8012c94:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	3314      	adds	r3, #20
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	2002      	movs	r0, #2
 8012ca2:	f7f8 f9f4 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	3316      	adds	r3, #22
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	2002      	movs	r0, #2
 8012cb6:	f7f8 f9ea 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	3318      	adds	r3, #24
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	2002      	movs	r0, #2
 8012cca:	f7f8 f9e0 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	331a      	adds	r3, #26
 8012cda:	4619      	mov	r1, r3
 8012cdc:	2002      	movs	r0, #2
 8012cde:	f7f8 f9d6 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	331c      	adds	r3, #28
 8012cee:	4619      	mov	r1, r3
 8012cf0:	2002      	movs	r0, #2
 8012cf2:	f7f8 f9cc 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	331e      	adds	r3, #30
 8012d02:	4619      	mov	r1, r3
 8012d04:	2002      	movs	r0, #2
 8012d06:	f7f8 f9c2 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	3320      	adds	r3, #32
 8012d16:	4619      	mov	r1, r3
 8012d18:	2002      	movs	r0, #2
 8012d1a:	f7f8 f9b8 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	3322      	adds	r3, #34	; 0x22
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	2002      	movs	r0, #2
 8012d2e:	f7f8 f9ae 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	3324      	adds	r3, #36	; 0x24
 8012d3e:	4619      	mov	r1, r3
 8012d40:	2002      	movs	r0, #2
 8012d42:	f7f8 f9a4 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d46:	4603      	mov	r3, r0
 8012d48:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	3326      	adds	r3, #38	; 0x26
 8012d52:	4619      	mov	r1, r3
 8012d54:	2002      	movs	r0, #2
 8012d56:	f7f8 f99a 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	3328      	adds	r3, #40	; 0x28
 8012d66:	4619      	mov	r1, r3
 8012d68:	2002      	movs	r0, #2
 8012d6a:	f7f8 f990 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3718      	adds	r7, #24
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b086      	sub	sp, #24
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	4603      	mov	r3, r0
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	607a      	str	r2, [r7, #4]
 8012da6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012da8:	2300      	movs	r3, #0
 8012daa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012dac:	89fb      	ldrh	r3, [r7, #14]
 8012dae:	2b20      	cmp	r3, #32
 8012db0:	d802      	bhi.n	8012db8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012db2:	f06f 0309 	mvn.w	r3, #9
 8012db6:	e04d      	b.n	8012e54 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012db8:	68b9      	ldr	r1, [r7, #8]
 8012dba:	2004      	movs	r0, #4
 8012dbc:	f7f8 fa06 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012dc0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	3304      	adds	r3, #4
 8012dca:	4619      	mov	r1, r3
 8012dcc:	2004      	movs	r0, #4
 8012dce:	f7f8 f9fd 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012dd2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	3308      	adds	r3, #8
 8012ddc:	4619      	mov	r1, r3
 8012dde:	2004      	movs	r0, #4
 8012de0:	f7f8 fa11 	bl	800b206 <VL53L1_i2c_decode_int32_t>
 8012de4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	330c      	adds	r3, #12
 8012dee:	4619      	mov	r1, r3
 8012df0:	2004      	movs	r0, #4
 8012df2:	f7f8 f9eb 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012df6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	3310      	adds	r3, #16
 8012e00:	4619      	mov	r1, r3
 8012e02:	2004      	movs	r0, #4
 8012e04:	f7f8 f9e2 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012e08:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	3314      	adds	r3, #20
 8012e12:	4619      	mov	r1, r3
 8012e14:	2004      	movs	r0, #4
 8012e16:	f7f8 f9d9 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012e1a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	3318      	adds	r3, #24
 8012e24:	4619      	mov	r1, r3
 8012e26:	2004      	movs	r0, #4
 8012e28:	f7f8 f9ed 	bl	800b206 <VL53L1_i2c_decode_int32_t>
 8012e2c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	331c      	adds	r3, #28
 8012e36:	4619      	mov	r1, r3
 8012e38:	2004      	movs	r0, #4
 8012e3a:	f7f8 f9c7 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 8012e3e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3718      	adds	r7, #24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012e6e:	89fb      	ldrh	r3, [r7, #14]
 8012e70:	2b37      	cmp	r3, #55	; 0x37
 8012e72:	d802      	bhi.n	8012e7a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012e74:	f06f 0309 	mvn.w	r3, #9
 8012e78:	e15e      	b.n	8013138 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012e7a:	68b9      	ldr	r1, [r7, #8]
 8012e7c:	2002      	movs	r0, #2
 8012e7e:	f7f8 f906 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012e82:	4603      	mov	r3, r0
 8012e84:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	3302      	adds	r3, #2
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e94:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	3303      	adds	r3, #3
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ea4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	3304      	adds	r3, #4
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 0303 	and.w	r3, r3, #3
 8012eb4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	3305      	adds	r3, #5
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f003 0301 	and.w	r3, r3, #1
 8012ec4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	3306      	adds	r3, #6
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ed4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	3307      	adds	r3, #7
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ee4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3308      	adds	r3, #8
 8012eee:	4619      	mov	r1, r3
 8012ef0:	2002      	movs	r0, #2
 8012ef2:	f7f8 f8cc 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012efc:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	330a      	adds	r3, #10
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f003 0303 	and.w	r3, r3, #3
 8012f0c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	330b      	adds	r3, #11
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	f003 0303 	and.w	r3, r3, #3
 8012f1c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	330c      	adds	r3, #12
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	f003 030f 	and.w	r3, r3, #15
 8012f2c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	330d      	adds	r3, #13
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	f003 0307 	and.w	r3, r3, #7
 8012f3c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	330e      	adds	r3, #14
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	f003 0301 	and.w	r3, r3, #1
 8012f4c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	330f      	adds	r3, #15
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	f003 0303 	and.w	r3, r3, #3
 8012f5c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	7c1a      	ldrb	r2, [r3, #16]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	7c5a      	ldrb	r2, [r3, #17]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	3312      	adds	r3, #18
 8012f76:	4619      	mov	r1, r3
 8012f78:	2002      	movs	r0, #2
 8012f7a:	f7f8 f888 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f84:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	3316      	adds	r3, #22
 8012f8e:	4619      	mov	r1, r3
 8012f90:	2002      	movs	r0, #2
 8012f92:	f7f8 f87c 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012f96:	4603      	mov	r3, r0
 8012f98:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	3318      	adds	r3, #24
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	2002      	movs	r0, #2
 8012fa6:	f7f8 f872 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8012faa:	4603      	mov	r3, r0
 8012fac:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	331a      	adds	r3, #26
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f003 0301 	and.w	r3, r3, #1
 8012fbc:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	331b      	adds	r3, #27
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	f003 0307 	and.w	r3, r3, #7
 8012fcc:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	7f1a      	ldrb	r2, [r3, #28]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	7f5a      	ldrb	r2, [r3, #29]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	331e      	adds	r3, #30
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fec:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	331f      	adds	r3, #31
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ffc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3320      	adds	r3, #32
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	f003 0303 	and.w	r3, r3, #3
 801300c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	3321      	adds	r3, #33	; 0x21
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 030f 	and.w	r3, r3, #15
 801301c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	3325      	adds	r3, #37	; 0x25
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	f003 0301 	and.w	r3, r3, #1
 8013050:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	3326      	adds	r3, #38	; 0x26
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	f003 0303 	and.w	r3, r3, #3
 8013062:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	3327      	adds	r3, #39	; 0x27
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 031f 	and.w	r3, r3, #31
 8013074:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	3328      	adds	r3, #40	; 0x28
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	f003 031f 	and.w	r3, r3, #31
 8013086:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	3329      	adds	r3, #41	; 0x29
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	f003 031f 	and.w	r3, r3, #31
 8013098:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	332a      	adds	r3, #42	; 0x2a
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	f003 0301 	and.w	r3, r3, #1
 80130aa:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	332b      	adds	r3, #43	; 0x2b
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	f003 0301 	and.w	r3, r3, #1
 80130bc:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	332c      	adds	r3, #44	; 0x2c
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	f003 0303 	and.w	r3, r3, #3
 80130ce:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	332d      	adds	r3, #45	; 0x2d
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130e0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	332e      	adds	r3, #46	; 0x2e
 80130ec:	4619      	mov	r1, r3
 80130ee:	2004      	movs	r0, #4
 80130f0:	f7f8 f86c 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 80130f4:	4603      	mov	r3, r0
 80130f6:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	3332      	adds	r3, #50	; 0x32
 8013102:	4619      	mov	r1, r3
 8013104:	2004      	movs	r0, #4
 8013106:	f7f8 f861 	bl	800b1cc <VL53L1_i2c_decode_uint32_t>
 801310a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	3336      	adds	r3, #54	; 0x36
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	f003 0301 	and.w	r3, r3, #1
 801311a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	3337      	adds	r3, #55	; 0x37
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f003 0301 	and.w	r3, r3, #1
 801312c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8013134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013138:	4618      	mov	r0, r3
 801313a:	3718      	adds	r7, #24
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b086      	sub	sp, #24
 8013144:	af00      	add	r7, sp, #0
 8013146:	4603      	mov	r3, r0
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	607a      	str	r2, [r7, #4]
 801314c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801314e:	2300      	movs	r3, #0
 8013150:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8013152:	89fb      	ldrh	r3, [r7, #14]
 8013154:	2b30      	cmp	r3, #48	; 0x30
 8013156:	d802      	bhi.n	801315e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013158:	f06f 0309 	mvn.w	r3, #9
 801315c:	e112      	b.n	8013384 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	785a      	ldrb	r2, [r3, #1]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	789a      	ldrb	r2, [r3, #2]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	3303      	adds	r3, #3
 801317a:	4619      	mov	r1, r3
 801317c:	2002      	movs	r0, #2
 801317e:	f7f7 ff86 	bl	800b08e <VL53L1_i2c_decode_uint16_t>
 8013182:	4603      	mov	r3, r0
 8013184:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	3305      	adds	r3, #5
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013194:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	3306      	adds	r3, #6
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	f003 0307 	and.w	r3, r3, #7
 80131a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	3307      	adds	r3, #7
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	f003 0307 	and.w	r3, r3, #7
 80131b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	3308      	adds	r3, #8
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	3309      	adds	r3, #9
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	330a      	adds	r3, #10
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	f003 0301 	and.w	r3, r3, #1
 80131e4:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	330b      	adds	r3, #11
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131f4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	330c      	adds	r3, #12
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	330d      	adds	r3, #13
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013214:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	330e      	adds	r3, #14
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013224:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	7bda      	ldrb	r2, [r3, #15]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	7c1a      	ldrb	r2, [r3, #16]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	7c5a      	ldrb	r2, [r3, #17]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	7c9a      	ldrb	r2, [r3, #18]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	7cda      	ldrb	r2, [r3, #19]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	7d1a      	ldrb	r2, [r3, #20]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	7d5a      	ldrb	r2, [r3, #21]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	7d9a      	ldrb	r2, [r3, #22]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	7dda      	ldrb	r2, [r3, #23]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	7e1a      	ldrb	r2, [r3, #24]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	7e5a      	ldrb	r2, [r3, #25]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	7e9a      	ldrb	r2, [r3, #26]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	7eda      	ldrb	r2, [r3, #27]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	7f1a      	ldrb	r2, [r3, #28]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	7f5a      	ldrb	r2, [r3, #29]
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	7f9a      	ldrb	r2, [r3, #30]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	7fda      	ldrb	r2, [r3, #31]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8013380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3718      	adds	r7, #24
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b090      	sub	sp, #64	; 0x40
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013396:	2300      	movs	r3, #0
 8013398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801339c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80133a4:	f107 020c 	add.w	r2, r7, #12
 80133a8:	2331      	movs	r3, #49	; 0x31
 80133aa:	f240 110f 	movw	r1, #271	; 0x10f
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f001 f8f8 	bl	80145a4 <VL53L1_ReadMulti>
 80133b4:	4603      	mov	r3, r0
 80133b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80133ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d109      	bne.n	80133d6 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80133c2:	f107 030c 	add.w	r3, r7, #12
 80133c6:	683a      	ldr	r2, [r7, #0]
 80133c8:	4619      	mov	r1, r3
 80133ca:	2031      	movs	r0, #49	; 0x31
 80133cc:	f7ff feb8 	bl	8013140 <VL53L1_i2c_decode_nvm_copy_data>
 80133d0:	4603      	mov	r3, r0
 80133d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80133d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3740      	adds	r7, #64	; 0x40
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80133e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80133e6:	b0d6      	sub	sp, #344	; 0x158
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80133ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80133f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80133f6:	4603      	mov	r3, r0
 80133f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80133fc:	23f1      	movs	r3, #241	; 0xf1
 80133fe:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 8013402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 801340a:	2300      	movs	r3, #0
 801340c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8013410:	f04f 0200 	mov.w	r2, #0
 8013414:	f04f 0300 	mov.w	r3, #0
 8013418:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 801341c:	f04f 0200 	mov.w	r2, #0
 8013420:	f04f 0300 	mov.w	r3, #0
 8013424:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013428:	f04f 0200 	mov.w	r2, #0
 801342c:	f04f 0300 	mov.w	r3, #0
 8013430:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8013434:	f04f 0200 	mov.w	r2, #0
 8013438:	f04f 0300 	mov.w	r3, #0
 801343c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8013440:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013448:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801344a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801344e:	2b00      	cmp	r3, #0
 8013450:	f000 8322 	beq.w	8013a98 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8013454:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013458:	4618      	mov	r0, r3
 801345a:	f7fb fa23 	bl	800e8a4 <VL53L1_calc_pll_period_mm>
 801345e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 8013462:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8013466:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801346a:	429a      	cmp	r2, r3
 801346c:	d91a      	bls.n	80134a4 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801346e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8013472:	2200      	movs	r2, #0
 8013474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013478:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 801347c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013480:	2200      	movs	r2, #0
 8013482:	4698      	mov	r8, r3
 8013484:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8013486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801348a:	460b      	mov	r3, r1
 801348c:	ebb3 0308 	subs.w	r3, r3, r8
 8013490:	63bb      	str	r3, [r7, #56]	; 0x38
 8013492:	4613      	mov	r3, r2
 8013494:	eb63 0309 	sbc.w	r3, r3, r9
 8013498:	63fb      	str	r3, [r7, #60]	; 0x3c
 801349a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801349e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80134a2:	e013      	b.n	80134cc <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80134a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80134a8:	2200      	movs	r2, #0
 80134aa:	469a      	mov	sl, r3
 80134ac:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80134ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80134b2:	2200      	movs	r2, #0
 80134b4:	461c      	mov	r4, r3
 80134b6:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80134b8:	ebba 0304 	subs.w	r3, sl, r4
 80134bc:	633b      	str	r3, [r7, #48]	; 0x30
 80134be:	eb6b 0305 	sbc.w	r3, fp, r5
 80134c2:	637b      	str	r3, [r7, #52]	; 0x34
 80134c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80134c8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80134cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80134d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d91f      	bls.n	8013518 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80134d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80134dc:	2200      	movs	r2, #0
 80134de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80134e2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 80134e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134ea:	2200      	movs	r2, #0
 80134ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80134f0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80134f4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80134f8:	4623      	mov	r3, r4
 80134fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80134fe:	4602      	mov	r2, r0
 8013500:	1a9b      	subs	r3, r3, r2
 8013502:	62bb      	str	r3, [r7, #40]	; 0x28
 8013504:	462b      	mov	r3, r5
 8013506:	460a      	mov	r2, r1
 8013508:	eb63 0302 	sbc.w	r3, r3, r2
 801350c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801350e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013512:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013516:	e01e      	b.n	8013556 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013518:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801351c:	2200      	movs	r2, #0
 801351e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013522:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013526:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801352a:	2200      	movs	r2, #0
 801352c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013530:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013534:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013538:	4623      	mov	r3, r4
 801353a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801353e:	4602      	mov	r2, r0
 8013540:	1a9b      	subs	r3, r3, r2
 8013542:	623b      	str	r3, [r7, #32]
 8013544:	462b      	mov	r3, r5
 8013546:	460a      	mov	r2, r1
 8013548:	eb63 0302 	sbc.w	r3, r3, r2
 801354c:	627b      	str	r3, [r7, #36]	; 0x24
 801354e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013552:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8013556:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801355a:	4313      	orrs	r3, r2
 801355c:	f000 829c 	beq.w	8013a98 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013564:	2200      	movs	r2, #0
 8013566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801356a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801356e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013572:	2200      	movs	r2, #0
 8013574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013578:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801357c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013580:	4623      	mov	r3, r4
 8013582:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8013586:	4602      	mov	r2, r0
 8013588:	189b      	adds	r3, r3, r2
 801358a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801358e:	460b      	mov	r3, r1
 8013590:	462a      	mov	r2, r5
 8013592:	eb42 0303 	adc.w	r3, r2, r3
 8013596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 801359a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801359e:	2200      	movs	r2, #0
 80135a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80135a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80135a8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80135ac:	4623      	mov	r3, r4
 80135ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80135b2:	4602      	mov	r2, r0
 80135b4:	189b      	adds	r3, r3, r2
 80135b6:	61bb      	str	r3, [r7, #24]
 80135b8:	460b      	mov	r3, r1
 80135ba:	462a      	mov	r2, r5
 80135bc:	eb42 0303 	adc.w	r3, r2, r3
 80135c0:	61fb      	str	r3, [r7, #28]
 80135c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80135c6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80135ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80135ce:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80135d2:	f173 0300 	sbcs.w	r3, r3, #0
 80135d6:	d305      	bcc.n	80135e4 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80135d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80135dc:	f04f 0300 	mov.w	r3, #0
 80135e0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 80135e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80135e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80135ec:	fb03 f102 	mul.w	r1, r3, r2
 80135f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80135f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80135f8:	fb02 f303 	mul.w	r3, r2, r3
 80135fc:	18ca      	adds	r2, r1, r3
 80135fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013602:	fba3 1303 	umull	r1, r3, r3, r3
 8013606:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801360a:	460b      	mov	r3, r1
 801360c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013614:	18d3      	adds	r3, r2, r3
 8013616:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801361a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801361e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013622:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013626:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801362a:	f04f 0000 	mov.w	r0, #0
 801362e:	f04f 0100 	mov.w	r1, #0
 8013632:	0219      	lsls	r1, r3, #8
 8013634:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013638:	0210      	lsls	r0, r2, #8
 801363a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801363e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013646:	d305      	bcc.n	8013654 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013648:	f04f 32ff 	mov.w	r2, #4294967295
 801364c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013650:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013654:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013658:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801365c:	f7ec fe30 	bl	80002c0 <__aeabi_uldivmod>
 8013660:	4602      	mov	r2, r0
 8013662:	460b      	mov	r3, r1
 8013664:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013668:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801366c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013670:	f7ec fe26 	bl	80002c0 <__aeabi_uldivmod>
 8013674:	4602      	mov	r2, r0
 8013676:	460b      	mov	r3, r1
 8013678:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 801367c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013680:	2b80      	cmp	r3, #128	; 0x80
 8013682:	d305      	bcc.n	8013690 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8013684:	f04f 32ff 	mov.w	r2, #4294967295
 8013688:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801368c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8013690:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013694:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013698:	fb03 f102 	mul.w	r1, r3, r2
 801369c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80136a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80136a4:	fb02 f303 	mul.w	r3, r2, r3
 80136a8:	4419      	add	r1, r3
 80136aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80136ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80136b2:	fba2 2303 	umull	r2, r3, r2, r3
 80136b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80136ba:	4613      	mov	r3, r2
 80136bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80136c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136c4:	18cb      	adds	r3, r1, r3
 80136c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80136ca:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80136ce:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80136d2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80136d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80136da:	2200      	movs	r2, #0
 80136dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80136e0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80136e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80136e8:	2200      	movs	r2, #0
 80136ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80136ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80136f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80136f6:	4623      	mov	r3, r4
 80136f8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80136fc:	4602      	mov	r2, r0
 80136fe:	189b      	adds	r3, r3, r2
 8013700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013704:	460b      	mov	r3, r1
 8013706:	462a      	mov	r2, r5
 8013708:	eb42 0303 	adc.w	r3, r2, r3
 801370c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013710:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013714:	2200      	movs	r2, #0
 8013716:	67bb      	str	r3, [r7, #120]	; 0x78
 8013718:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801371a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801371e:	4623      	mov	r3, r4
 8013720:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013724:	4602      	mov	r2, r0
 8013726:	189b      	adds	r3, r3, r2
 8013728:	673b      	str	r3, [r7, #112]	; 0x70
 801372a:	460b      	mov	r3, r1
 801372c:	462a      	mov	r2, r5
 801372e:	eb42 0303 	adc.w	r3, r2, r3
 8013732:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013734:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013738:	2200      	movs	r2, #0
 801373a:	66bb      	str	r3, [r7, #104]	; 0x68
 801373c:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801373e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8013742:	4623      	mov	r3, r4
 8013744:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013748:	4602      	mov	r2, r0
 801374a:	189b      	adds	r3, r3, r2
 801374c:	613b      	str	r3, [r7, #16]
 801374e:	460b      	mov	r3, r1
 8013750:	462a      	mov	r2, r5
 8013752:	eb42 0303 	adc.w	r3, r2, r3
 8013756:	617b      	str	r3, [r7, #20]
 8013758:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801375c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8013760:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013764:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013768:	f173 0300 	sbcs.w	r3, r3, #0
 801376c:	d305      	bcc.n	801377a <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 801376e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013772:	f04f 0300 	mov.w	r3, #0
 8013776:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 801377a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801377e:	f04f 0000 	mov.w	r0, #0
 8013782:	f04f 0100 	mov.w	r1, #0
 8013786:	0219      	lsls	r1, r3, #8
 8013788:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801378c:	0210      	lsls	r0, r2, #8
 801378e:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8013792:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013796:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801379a:	1884      	adds	r4, r0, r2
 801379c:	60bc      	str	r4, [r7, #8]
 801379e:	eb41 0303 	adc.w	r3, r1, r3
 80137a2:	60fb      	str	r3, [r7, #12]
 80137a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80137a8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80137ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	da05      	bge.n	80137c0 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80137b4:	f04f 32ff 	mov.w	r2, #4294967295
 80137b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80137bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80137c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d331      	bcc.n	801382c <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80137c8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80137cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80137d0:	f7ec fd76 	bl	80002c0 <__aeabi_uldivmod>
 80137d4:	4602      	mov	r2, r0
 80137d6:	460b      	mov	r3, r1
 80137d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80137dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137e0:	2200      	movs	r2, #0
 80137e2:	663b      	str	r3, [r7, #96]	; 0x60
 80137e4:	667a      	str	r2, [r7, #100]	; 0x64
 80137e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80137ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80137ee:	4622      	mov	r2, r4
 80137f0:	fb02 f203 	mul.w	r2, r2, r3
 80137f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80137f8:	4629      	mov	r1, r5
 80137fa:	fb01 f303 	mul.w	r3, r1, r3
 80137fe:	441a      	add	r2, r3
 8013800:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013804:	4621      	mov	r1, r4
 8013806:	fba3 1301 	umull	r1, r3, r3, r1
 801380a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801380e:	460b      	mov	r3, r1
 8013810:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013818:	18d3      	adds	r3, r2, r3
 801381a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801381e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8013822:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013826:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801382a:	e030      	b.n	801388e <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801382c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013830:	2200      	movs	r2, #0
 8013832:	65bb      	str	r3, [r7, #88]	; 0x58
 8013834:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801383a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801383e:	4622      	mov	r2, r4
 8013840:	fb02 f203 	mul.w	r2, r2, r3
 8013844:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013848:	4629      	mov	r1, r5
 801384a:	fb01 f303 	mul.w	r3, r1, r3
 801384e:	441a      	add	r2, r3
 8013850:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013854:	4621      	mov	r1, r4
 8013856:	fba3 1301 	umull	r1, r3, r3, r1
 801385a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801385e:	460b      	mov	r3, r1
 8013860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013868:	18d3      	adds	r3, r2, r3
 801386a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801386e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8013872:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013876:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801387a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801387e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013882:	f7ec fd1d 	bl	80002c0 <__aeabi_uldivmod>
 8013886:	4602      	mov	r2, r0
 8013888:	460b      	mov	r3, r1
 801388a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 801388e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013892:	2b00      	cmp	r3, #0
 8013894:	da05      	bge.n	80138a2 <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013896:	f04f 32ff 	mov.w	r2, #4294967295
 801389a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801389e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80138a2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d33d      	bcc.n	8013926 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80138aa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80138ae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138b2:	f7ec fd05 	bl	80002c0 <__aeabi_uldivmod>
 80138b6:	4602      	mov	r2, r0
 80138b8:	460b      	mov	r3, r1
 80138ba:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80138be:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138c2:	f04f 0200 	mov.w	r2, #0
 80138c6:	f04f 0300 	mov.w	r3, #0
 80138ca:	0882      	lsrs	r2, r0, #2
 80138cc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80138d0:	088b      	lsrs	r3, r1, #2
 80138d2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80138d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138da:	2200      	movs	r2, #0
 80138dc:	653b      	str	r3, [r7, #80]	; 0x50
 80138de:	657a      	str	r2, [r7, #84]	; 0x54
 80138e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80138e4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80138e8:	4622      	mov	r2, r4
 80138ea:	fb02 f203 	mul.w	r2, r2, r3
 80138ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80138f2:	4629      	mov	r1, r5
 80138f4:	fb01 f303 	mul.w	r3, r1, r3
 80138f8:	4413      	add	r3, r2
 80138fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80138fe:	4621      	mov	r1, r4
 8013900:	fba2 1201 	umull	r1, r2, r2, r1
 8013904:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013908:	460a      	mov	r2, r1
 801390a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801390e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013912:	4413      	add	r3, r2
 8013914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013918:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 801391c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013920:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013924:	e03c      	b.n	80139a0 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801392a:	2200      	movs	r2, #0
 801392c:	64bb      	str	r3, [r7, #72]	; 0x48
 801392e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013934:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013938:	4622      	mov	r2, r4
 801393a:	fb02 f203 	mul.w	r2, r2, r3
 801393e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013942:	4629      	mov	r1, r5
 8013944:	fb01 f303 	mul.w	r3, r1, r3
 8013948:	4413      	add	r3, r2
 801394a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801394e:	4621      	mov	r1, r4
 8013950:	fba2 1201 	umull	r1, r2, r2, r1
 8013954:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013958:	460a      	mov	r2, r1
 801395a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801395e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013962:	4413      	add	r3, r2
 8013964:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013968:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801396c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013970:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013974:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013978:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801397c:	f7ec fca0 	bl	80002c0 <__aeabi_uldivmod>
 8013980:	4602      	mov	r2, r0
 8013982:	460b      	mov	r3, r1
 8013984:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013988:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801398c:	f04f 0200 	mov.w	r2, #0
 8013990:	f04f 0300 	mov.w	r3, #0
 8013994:	0882      	lsrs	r2, r0, #2
 8013996:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801399a:	088b      	lsrs	r3, r1, #2
 801399c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80139a0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	da05      	bge.n	80139b4 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 80139a8:	f04f 32ff 	mov.w	r2, #4294967295
 80139ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80139b0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80139b4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139b8:	f04f 0200 	mov.w	r2, #0
 80139bc:	f04f 0300 	mov.w	r3, #0
 80139c0:	0882      	lsrs	r2, r0, #2
 80139c2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80139c6:	088b      	lsrs	r3, r1, #2
 80139c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80139cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d305      	bcc.n	80139e0 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 80139d4:	f04f 32ff 	mov.w	r2, #4294967295
 80139d8:	f04f 0300 	mov.w	r3, #0
 80139dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80139e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80139e4:	2200      	movs	r2, #0
 80139e6:	643b      	str	r3, [r7, #64]	; 0x40
 80139e8:	647a      	str	r2, [r7, #68]	; 0x44
 80139ea:	f04f 0200 	mov.w	r2, #0
 80139ee:	f04f 0300 	mov.w	r3, #0
 80139f2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80139f6:	4629      	mov	r1, r5
 80139f8:	01cb      	lsls	r3, r1, #7
 80139fa:	4621      	mov	r1, r4
 80139fc:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013a00:	4621      	mov	r1, r4
 8013a02:	01ca      	lsls	r2, r1, #7
 8013a04:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013a08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013a0c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013a10:	fb03 f202 	mul.w	r2, r3, r2
 8013a14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013a18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013a1c:	fb01 f303 	mul.w	r3, r1, r3
 8013a20:	441a      	add	r2, r3
 8013a22:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a26:	fba3 1303 	umull	r1, r3, r3, r3
 8013a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013a2e:	460b      	mov	r3, r1
 8013a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013a38:	18d3      	adds	r3, r2, r3
 8013a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013a3e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013a42:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013a46:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013a4a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a4e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a52:	1884      	adds	r4, r0, r2
 8013a54:	603c      	str	r4, [r7, #0]
 8013a56:	eb41 0303 	adc.w	r3, r1, r3
 8013a5a:	607b      	str	r3, [r7, #4]
 8013a5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013a60:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013a64:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d305      	bcc.n	8013a78 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a70:	f04f 0300 	mov.w	r3, #0
 8013a74:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013a78:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fa fdaa 	bl	800e5d6 <VL53L1_isqrt>
 8013a82:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013a90:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013a92:	2300      	movs	r3, #0
 8013a94:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013a98:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013aa8 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b086      	sub	sp, #24
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	3318      	adds	r3, #24
 8013ab8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013aba:	2300      	movs	r3, #0
 8013abc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d107      	bne.n	8013ad6 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013ac6:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f000 f88b 	bl	8013be6 <VL53L1_poll_for_range_completion>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	75fb      	strb	r3, [r7, #23]
 8013ad4:	e01b      	b.n	8013b0e <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013ada:	e011      	b.n	8013b00 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013adc:	f107 030f 	add.w	r3, r7, #15
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f000 f819 	bl	8013b1a <VL53L1_is_new_data_ready>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d105      	bne.n	8013b00 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013af4:	2101      	movs	r1, #1
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 fe6e 	bl	80147d8 <VL53L1_WaitMs>
 8013afc:	4603      	mov	r3, r0
 8013afe:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013b00:	7bfb      	ldrb	r3, [r7, #15]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d103      	bne.n	8013b0e <VL53L1_wait_for_test_completion+0x66>
 8013b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d0e6      	beq.n	8013adc <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3718      	adds	r7, #24
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b086      	sub	sp, #24
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
 8013b22:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013b24:	2300      	movs	r3, #0
 8013b26:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	3318      	adds	r3, #24
 8013b2c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013b32:	2300      	movs	r3, #0
 8013b34:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013b36:	2300      	movs	r3, #0
 8013b38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013b40:	f003 0310 	and.w	r3, r3, #16
 8013b44:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d102      	bne.n	8013b52 <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	75fb      	strb	r3, [r7, #23]
 8013b50:	e001      	b.n	8013b56 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013b52:	2300      	movs	r3, #0
 8013b54:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013b56:	f107 030e 	add.w	r3, r7, #14
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	2131      	movs	r1, #49	; 0x31
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 fdb2 	bl	80146c8 <VL53L1_RdByte>
 8013b64:	4603      	mov	r3, r0
 8013b66:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013b68:	7bbb      	ldrb	r3, [r7, #14]
 8013b6a:	f003 0201 	and.w	r2, r3, #1
 8013b6e:	7dfb      	ldrb	r3, [r7, #23]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d103      	bne.n	8013b7c <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2201      	movs	r2, #1
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	e002      	b.n	8013b82 <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013b82:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3718      	adds	r7, #24
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b086      	sub	sp, #24
 8013b92:	af02      	add	r7, sp, #8
 8013b94:	6078      	str	r0, [r7, #4]
 8013b96:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013b9c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f000 fe29 	bl	80147f8 <VL53L1_WaitUs>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d10b      	bne.n	8013bca <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	2301      	movs	r3, #1
 8013bbc:	22e5      	movs	r2, #229	; 0xe5
 8013bbe:	6839      	ldr	r1, [r7, #0]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 fe31 	bl	8014828 <VL53L1_WaitValueMaskEx>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d103      	bne.n	8013bda <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013bd2:	2103      	movs	r1, #3
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7f6 fc38 	bl	800a44a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3710      	adds	r7, #16
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b088      	sub	sp, #32
 8013bea:	af02      	add	r7, sp, #8
 8013bec:	6078      	str	r0, [r7, #4]
 8013bee:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	3318      	adds	r3, #24
 8013bf8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013c08:	f003 0310 	and.w	r3, r3, #16
 8013c0c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013c0e:	7bfb      	ldrb	r3, [r7, #15]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d102      	bne.n	8013c1a <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013c14:	2301      	movs	r3, #1
 8013c16:	75fb      	strb	r3, [r7, #23]
 8013c18:	e001      	b.n	8013c1e <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013c1e:	7dfb      	ldrb	r3, [r7, #23]
 8013c20:	2201      	movs	r2, #1
 8013c22:	9201      	str	r2, [sp, #4]
 8013c24:	2201      	movs	r2, #1
 8013c26:	9200      	str	r2, [sp, #0]
 8013c28:	2231      	movs	r2, #49	; 0x31
 8013c2a:	6839      	ldr	r1, [r7, #0]
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f000 fdfb 	bl	8014828 <VL53L1_WaitValueMaskEx>
 8013c32:	4603      	mov	r3, r0
 8013c34:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013c36:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013c42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c46:	b0c0      	sub	sp, #256	; 0x100
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013c4e:	4618      	mov	r0, r3
 8013c50:	460b      	mov	r3, r1
 8013c52:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013c56:	4613      	mov	r3, r2
 8013c58:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c62:	2300      	movs	r3, #0
 8013c64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013c86:	2300      	movs	r3, #0
 8013c88:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013c8c:	f04f 0200 	mov.w	r2, #0
 8013c90:	f04f 0300 	mov.w	r3, #0
 8013c94:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013c98:	f04f 0200 	mov.w	r2, #0
 8013c9c:	f04f 0300 	mov.w	r3, #0
 8013ca0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013ca4:	f04f 0200 	mov.w	r2, #0
 8013ca8:	f04f 0300 	mov.w	r3, #0
 8013cac:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013cb0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d108      	bne.n	8013cca <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013cb8:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013cbc:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013cc0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fb f867 	bl	800ed98 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013cca:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d165      	bne.n	8013d9e <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013cd2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013cd6:	091b      	lsrs	r3, r3, #4
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	f003 0301 	and.w	r3, r3, #1
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d00e      	beq.n	8013d00 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013ce2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013cec:	095b      	lsrs	r3, r3, #5
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	1ad3      	subs	r3, r2, r3
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013cfe:	e00b      	b.n	8013d18 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013d00:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013d04:	b29a      	uxth	r2, r3
 8013d06:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d0a:	095b      	lsrs	r3, r3, #5
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	b29b      	uxth	r3, r3
 8013d14:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013d18:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d22:	095b      	lsrs	r3, r3, #5
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	4413      	add	r3, r2
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8013d30:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d34:	f003 0301 	and.w	r3, r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d011      	beq.n	8013d60 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013d3c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d40:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8013d42:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d46:	f003 020f 	and.w	r2, r3, #15
 8013d4a:	0fd3      	lsrs	r3, r2, #31
 8013d4c:	4413      	add	r3, r2
 8013d4e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	1acb      	subs	r3, r1, r3
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	3b01      	subs	r3, #1
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8013d5e:	e00f      	b.n	8013d80 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8013d60:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d64:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013d66:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d6a:	f003 020f 	and.w	r2, r3, #15
 8013d6e:	0fd3      	lsrs	r3, r2, #31
 8013d70:	4413      	add	r3, r2
 8013d72:	105b      	asrs	r3, r3, #1
 8013d74:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	440b      	add	r3, r1
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8013d80:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d84:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8013d86:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d8a:	f003 020f 	and.w	r2, r3, #15
 8013d8e:	0fd3      	lsrs	r3, r2, #31
 8013d90:	4413      	add	r3, r2
 8013d92:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	440b      	add	r3, r1
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013d9e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d133      	bne.n	8013e0e <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013da6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013daa:	b29a      	uxth	r2, r3
 8013dac:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013db0:	4413      	add	r3, r2
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	3b0f      	subs	r3, #15
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8013dc0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8013dca:	4413      	add	r3, r2
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	3b0f      	subs	r3, #15
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8013dda:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013de4:	4413      	add	r3, r2
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	005b      	lsls	r3, r3, #1
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	3b0f      	subs	r3, #15
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013df4:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013dfe:	4413      	add	r3, r2
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	3b0f      	subs	r3, #15
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013e0e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	f040 8135 	bne.w	8014082 <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013e18:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013e1c:	17da      	asrs	r2, r3, #31
 8013e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e26:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013e2a:	17da      	asrs	r2, r3, #31
 8013e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013e34:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013e38:	460b      	mov	r3, r1
 8013e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013e3e:	fb02 f203 	mul.w	r2, r2, r3
 8013e42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013e46:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013e4a:	4601      	mov	r1, r0
 8013e4c:	fb01 f303 	mul.w	r3, r1, r3
 8013e50:	4413      	add	r3, r2
 8013e52:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013e56:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013e5a:	fba2 4501 	umull	r4, r5, r2, r1
 8013e5e:	442b      	add	r3, r5
 8013e60:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e62:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013e66:	17da      	asrs	r2, r3, #31
 8013e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013e6c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013e70:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013e74:	17da      	asrs	r2, r3, #31
 8013e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013e7a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013e82:	460b      	mov	r3, r1
 8013e84:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013e88:	fb02 f203 	mul.w	r2, r2, r3
 8013e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013e90:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8013e94:	4601      	mov	r1, r0
 8013e96:	fb01 f303 	mul.w	r3, r1, r3
 8013e9a:	4413      	add	r3, r2
 8013e9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013ea0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013ea4:	fba2 8901 	umull	r8, r9, r2, r1
 8013ea8:	444b      	add	r3, r9
 8013eaa:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013eac:	eb14 0308 	adds.w	r3, r4, r8
 8013eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013eb2:	eb45 0309 	adc.w	r3, r5, r9
 8013eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013eb8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013ebc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8013ec0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013ec4:	1c51      	adds	r1, r2, #1
 8013ec6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013eca:	f143 0300 	adc.w	r3, r3, #0
 8013ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013ed2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	0fdb      	lsrs	r3, r3, #31
 8013eda:	2200      	movs	r2, #0
 8013edc:	643b      	str	r3, [r7, #64]	; 0x40
 8013ede:	647a      	str	r2, [r7, #68]	; 0x44
 8013ee0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013ee4:	4623      	mov	r3, r4
 8013ee6:	4602      	mov	r2, r0
 8013ee8:	189b      	adds	r3, r3, r2
 8013eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8013eec:	460b      	mov	r3, r1
 8013eee:	462a      	mov	r2, r5
 8013ef0:	eb42 0303 	adc.w	r3, r2, r3
 8013ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ef6:	f04f 0200 	mov.w	r2, #0
 8013efa:	f04f 0300 	mov.w	r3, #0
 8013efe:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8013f02:	4621      	mov	r1, r4
 8013f04:	084a      	lsrs	r2, r1, #1
 8013f06:	4629      	mov	r1, r5
 8013f08:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	104b      	asrs	r3, r1, #1
 8013f10:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8013f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f18:	2200      	movs	r2, #0
 8013f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013f22:	f04f 0000 	mov.w	r0, #0
 8013f26:	f04f 0100 	mov.w	r1, #0
 8013f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013f2e:	462b      	mov	r3, r5
 8013f30:	0099      	lsls	r1, r3, #2
 8013f32:	4623      	mov	r3, r4
 8013f34:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8013f38:	4623      	mov	r3, r4
 8013f3a:	0098      	lsls	r0, r3, #2
 8013f3c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013f40:	1814      	adds	r4, r2, r0
 8013f42:	633c      	str	r4, [r7, #48]	; 0x30
 8013f44:	414b      	adcs	r3, r1
 8013f46:	637b      	str	r3, [r7, #52]	; 0x34
 8013f48:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013f4c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013f50:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8013f54:	17da      	asrs	r2, r3, #31
 8013f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013f5a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013f5e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013f62:	17da      	asrs	r2, r3, #31
 8013f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013f68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013f6c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013f70:	462b      	mov	r3, r5
 8013f72:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8013f76:	4642      	mov	r2, r8
 8013f78:	fb02 f203 	mul.w	r2, r2, r3
 8013f7c:	464b      	mov	r3, r9
 8013f7e:	4621      	mov	r1, r4
 8013f80:	fb01 f303 	mul.w	r3, r1, r3
 8013f84:	4413      	add	r3, r2
 8013f86:	4622      	mov	r2, r4
 8013f88:	4641      	mov	r1, r8
 8013f8a:	fba2 ab01 	umull	sl, fp, r2, r1
 8013f8e:	445b      	add	r3, fp
 8013f90:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013f92:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8013f96:	17da      	asrs	r2, r3, #31
 8013f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8013f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8013f9c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013fa0:	17da      	asrs	r2, r3, #31
 8013fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8013fa4:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8013faa:	462b      	mov	r3, r5
 8013fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013fb0:	4642      	mov	r2, r8
 8013fb2:	fb02 f203 	mul.w	r2, r2, r3
 8013fb6:	464b      	mov	r3, r9
 8013fb8:	4621      	mov	r1, r4
 8013fba:	fb01 f303 	mul.w	r3, r1, r3
 8013fbe:	4413      	add	r3, r2
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4641      	mov	r1, r8
 8013fc4:	fba2 1201 	umull	r1, r2, r2, r1
 8013fc8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013fcc:	460a      	mov	r2, r1
 8013fce:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013fd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013fdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8013fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fe8:	4613      	mov	r3, r2
 8013fea:	eb4b 0303 	adc.w	r3, fp, r3
 8013fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ff0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013ff4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8013ff8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8013ffc:	1c51      	adds	r1, r2, #1
 8013ffe:	66b9      	str	r1, [r7, #104]	; 0x68
 8014000:	f143 0300 	adc.w	r3, r3, #0
 8014004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801400a:	460b      	mov	r3, r1
 801400c:	0fdb      	lsrs	r3, r3, #31
 801400e:	2200      	movs	r2, #0
 8014010:	623b      	str	r3, [r7, #32]
 8014012:	627a      	str	r2, [r7, #36]	; 0x24
 8014014:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014018:	4623      	mov	r3, r4
 801401a:	4602      	mov	r2, r0
 801401c:	189b      	adds	r3, r3, r2
 801401e:	61bb      	str	r3, [r7, #24]
 8014020:	460b      	mov	r3, r1
 8014022:	462a      	mov	r2, r5
 8014024:	eb42 0303 	adc.w	r3, r2, r3
 8014028:	61fb      	str	r3, [r7, #28]
 801402a:	f04f 0200 	mov.w	r2, #0
 801402e:	f04f 0300 	mov.w	r3, #0
 8014032:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014036:	4621      	mov	r1, r4
 8014038:	084a      	lsrs	r2, r1, #1
 801403a:	4629      	mov	r1, r5
 801403c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014040:	4629      	mov	r1, r5
 8014042:	104b      	asrs	r3, r1, #1
 8014044:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801404c:	2200      	movs	r2, #0
 801404e:	663b      	str	r3, [r7, #96]	; 0x60
 8014050:	667a      	str	r2, [r7, #100]	; 0x64
 8014052:	f04f 0200 	mov.w	r2, #0
 8014056:	f04f 0300 	mov.w	r3, #0
 801405a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801405e:	4629      	mov	r1, r5
 8014060:	008b      	lsls	r3, r1, #2
 8014062:	4621      	mov	r1, r4
 8014064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014068:	4621      	mov	r1, r4
 801406a:	008a      	lsls	r2, r1, #2
 801406c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8014070:	1884      	adds	r4, r0, r2
 8014072:	613c      	str	r4, [r7, #16]
 8014074:	eb41 0303 	adc.w	r3, r1, r3
 8014078:	617b      	str	r3, [r7, #20]
 801407a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801407e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8014082:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014086:	2b00      	cmp	r3, #0
 8014088:	d132      	bne.n	80140f0 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 801408a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 801408e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014092:	1884      	adds	r4, r0, r2
 8014094:	65bc      	str	r4, [r7, #88]	; 0x58
 8014096:	eb41 0303 	adc.w	r3, r1, r3
 801409a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801409c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80140a0:	460b      	mov	r3, r1
 80140a2:	3301      	adds	r3, #1
 80140a4:	653b      	str	r3, [r7, #80]	; 0x50
 80140a6:	4613      	mov	r3, r2
 80140a8:	f143 0300 	adc.w	r3, r3, #0
 80140ac:	657b      	str	r3, [r7, #84]	; 0x54
 80140ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80140b2:	460b      	mov	r3, r1
 80140b4:	0fdb      	lsrs	r3, r3, #31
 80140b6:	2200      	movs	r2, #0
 80140b8:	60bb      	str	r3, [r7, #8]
 80140ba:	60fa      	str	r2, [r7, #12]
 80140bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80140c0:	4623      	mov	r3, r4
 80140c2:	4602      	mov	r2, r0
 80140c4:	189b      	adds	r3, r3, r2
 80140c6:	603b      	str	r3, [r7, #0]
 80140c8:	460b      	mov	r3, r1
 80140ca:	462a      	mov	r2, r5
 80140cc:	eb42 0303 	adc.w	r3, r2, r3
 80140d0:	607b      	str	r3, [r7, #4]
 80140d2:	f04f 0200 	mov.w	r2, #0
 80140d6:	f04f 0300 	mov.w	r3, #0
 80140da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80140de:	4621      	mov	r1, r4
 80140e0:	084a      	lsrs	r2, r1, #1
 80140e2:	4629      	mov	r1, r5
 80140e4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80140e8:	4629      	mov	r1, r5
 80140ea:	104b      	asrs	r3, r1, #1
 80140ec:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 80140f0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d109      	bne.n	801410c <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 80140f8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	da05      	bge.n	801410c <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8014100:	f04f 0200 	mov.w	r2, #0
 8014104:	f04f 0300 	mov.w	r3, #0
 8014108:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801410c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014110:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014114:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8014116:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 801411a:	4618      	mov	r0, r3
 801411c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014120:	46bd      	mov	sp, r7
 8014122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014126 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8014126:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801412a:	b09a      	sub	sp, #104	; 0x68
 801412c:	af00      	add	r7, sp, #0
 801412e:	6478      	str	r0, [r7, #68]	; 0x44
 8014130:	6439      	str	r1, [r7, #64]	; 0x40
 8014132:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014134:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8014136:	2300      	movs	r3, #0
 8014138:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801413c:	f04f 0200 	mov.w	r2, #0
 8014140:	f04f 0300 	mov.w	r3, #0
 8014144:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014148:	f04f 0200 	mov.w	r2, #0
 801414c:	f04f 0300 	mov.w	r3, #0
 8014150:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8014154:	f04f 0200 	mov.w	r2, #0
 8014158:	f04f 0300 	mov.w	r3, #0
 801415c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8014160:	2300      	movs	r3, #0
 8014162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8014166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014168:	2200      	movs	r2, #0
 801416a:	633b      	str	r3, [r7, #48]	; 0x30
 801416c:	637a      	str	r2, [r7, #52]	; 0x34
 801416e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014174:	2200      	movs	r2, #0
 8014176:	62bb      	str	r3, [r7, #40]	; 0x28
 8014178:	62fa      	str	r2, [r7, #44]	; 0x2c
 801417a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801417e:	460b      	mov	r3, r1
 8014180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014182:	fb02 f203 	mul.w	r2, r2, r3
 8014186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014188:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801418c:	4601      	mov	r1, r0
 801418e:	fb01 f303 	mul.w	r3, r1, r3
 8014192:	4413      	add	r3, r2
 8014194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014198:	fba2 4501 	umull	r4, r5, r2, r1
 801419c:	442b      	add	r3, r5
 801419e:	461d      	mov	r5, r3
 80141a0:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80141a4:	623b      	str	r3, [r7, #32]
 80141a6:	f145 0300 	adc.w	r3, r5, #0
 80141aa:	627b      	str	r3, [r7, #36]	; 0x24
 80141ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141b0:	f04f 0300 	mov.w	r3, #0
 80141b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80141b8:	f7ec f882 	bl	80002c0 <__aeabi_uldivmod>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80141c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141c6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	2200      	movs	r2, #0
 80141ce:	61bb      	str	r3, [r7, #24]
 80141d0:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80141d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141d4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80141d8:	4622      	mov	r2, r4
 80141da:	fb02 f203 	mul.w	r2, r2, r3
 80141de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141e0:	4629      	mov	r1, r5
 80141e2:	fb01 f303 	mul.w	r3, r1, r3
 80141e6:	4413      	add	r3, r2
 80141e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141ea:	4621      	mov	r1, r4
 80141ec:	fba2 ab01 	umull	sl, fp, r2, r1
 80141f0:	445b      	add	r3, fp
 80141f2:	469b      	mov	fp, r3
 80141f4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80141f8:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80141fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014200:	f04f 0200 	mov.w	r2, #0
 8014204:	f04f 0300 	mov.w	r3, #0
 8014208:	0a02      	lsrs	r2, r0, #8
 801420a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801420e:	0a0b      	lsrs	r3, r1, #8
 8014210:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8014214:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014218:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 801421c:	6139      	str	r1, [r7, #16]
 801421e:	f143 0300 	adc.w	r3, r3, #0
 8014222:	617b      	str	r3, [r7, #20]
 8014224:	f04f 0200 	mov.w	r2, #0
 8014228:	f04f 0300 	mov.w	r3, #0
 801422c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014230:	4621      	mov	r1, r4
 8014232:	0aca      	lsrs	r2, r1, #11
 8014234:	4629      	mov	r1, r5
 8014236:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 801423a:	4629      	mov	r1, r5
 801423c:	0acb      	lsrs	r3, r1, #11
 801423e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8014242:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014246:	2b01      	cmp	r3, #1
 8014248:	d305      	bcc.n	8014256 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 801424a:	f04f 32ff 	mov.w	r2, #4294967295
 801424e:	f04f 0300 	mov.w	r3, #0
 8014252:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014256:	2300      	movs	r3, #0
 8014258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801425c:	e041      	b.n	80142e2 <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801425e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014264:	3302      	adds	r3, #2
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	4413      	add	r3, r2
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	60bb      	str	r3, [r7, #8]
 8014270:	60fa      	str	r2, [r7, #12]
 8014272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014274:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014278:	4622      	mov	r2, r4
 801427a:	fb02 f203 	mul.w	r2, r2, r3
 801427e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014280:	4629      	mov	r1, r5
 8014282:	fb01 f303 	mul.w	r3, r1, r3
 8014286:	4413      	add	r3, r2
 8014288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801428a:	4621      	mov	r1, r4
 801428c:	fba2 8901 	umull	r8, r9, r2, r1
 8014290:	444b      	add	r3, r9
 8014292:	4699      	mov	r9, r3
 8014294:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8014298:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 801429c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80142a0:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80142a4:	6039      	str	r1, [r7, #0]
 80142a6:	f143 0300 	adc.w	r3, r3, #0
 80142aa:	607b      	str	r3, [r7, #4]
 80142ac:	f04f 0200 	mov.w	r2, #0
 80142b0:	f04f 0300 	mov.w	r3, #0
 80142b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80142b8:	4621      	mov	r1, r4
 80142ba:	0a8a      	lsrs	r2, r1, #10
 80142bc:	4629      	mov	r1, r5
 80142be:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80142c2:	4629      	mov	r1, r5
 80142c4:	0a8b      	lsrs	r3, r1, #10
 80142c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80142ca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80142ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80142d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d2:	3206      	adds	r2, #6
 80142d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80142d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142dc:	3301      	adds	r3, #1
 80142de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80142e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e4:	7a9b      	ldrb	r3, [r3, #10]
 80142e6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d3b7      	bcc.n	801425e <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80142ee:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3768      	adds	r7, #104	; 0x68
 80142f6:	46bd      	mov	sp, r7
 80142f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080142fc <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 80142fc:	b590      	push	{r4, r7, lr}
 80142fe:	b085      	sub	sp, #20
 8014300:	af00      	add	r7, sp, #0
 8014302:	4604      	mov	r4, r0
 8014304:	4608      	mov	r0, r1
 8014306:	4611      	mov	r1, r2
 8014308:	461a      	mov	r2, r3
 801430a:	4623      	mov	r3, r4
 801430c:	71fb      	strb	r3, [r7, #7]
 801430e:	4603      	mov	r3, r0
 8014310:	71bb      	strb	r3, [r7, #6]
 8014312:	460b      	mov	r3, r1
 8014314:	717b      	strb	r3, [r7, #5]
 8014316:	4613      	mov	r3, r2
 8014318:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801431a:	2300      	movs	r3, #0
 801431c:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8014322:	2300      	movs	r3, #0
 8014324:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8014326:	2300      	movs	r3, #0
 8014328:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 801432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801432c:	2210      	movs	r2, #16
 801432e:	701a      	strb	r2, [r3, #0]

	i = 0;
 8014330:	2300      	movs	r3, #0
 8014332:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8014334:	2300      	movs	r3, #0
 8014336:	73fb      	strb	r3, [r7, #15]
 8014338:	e046      	b.n	80143c8 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 801433a:	2300      	movs	r3, #0
 801433c:	73bb      	strb	r3, [r7, #14]
 801433e:	e03b      	b.n	80143b8 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	2b0f      	cmp	r3, #15
 8014344:	d832      	bhi.n	80143ac <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8014346:	89bb      	ldrh	r3, [r7, #12]
 8014348:	b2da      	uxtb	r2, r3
 801434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434c:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 801434e:	89bb      	ldrh	r3, [r7, #12]
 8014350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014352:	3306      	adds	r3, #6
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801435c:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 801435e:	89bb      	ldrh	r3, [r7, #12]
 8014360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014362:	3306      	adds	r3, #6
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	4413      	add	r3, r2
 8014368:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801436c:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 801436e:	7bfa      	ldrb	r2, [r7, #15]
 8014370:	79bb      	ldrb	r3, [r7, #6]
 8014372:	fb12 f303 	smulbb	r3, r2, r3
 8014376:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8014378:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 801437a:	79fa      	ldrb	r2, [r7, #7]
 801437c:	440a      	add	r2, r1
 801437e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8014380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014382:	3306      	adds	r3, #6
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4413      	add	r3, r2
 8014388:	460a      	mov	r2, r1
 801438a:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 801438c:	7bba      	ldrb	r2, [r7, #14]
 801438e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014392:	fb12 f303 	smulbb	r3, r2, r3
 8014396:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8014398:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 801439a:	793a      	ldrb	r2, [r7, #4]
 801439c:	440a      	add	r2, r1
 801439e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80143a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143a2:	3306      	adds	r3, #6
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	460a      	mov	r2, r1
 80143aa:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80143ac:	89bb      	ldrh	r3, [r7, #12]
 80143ae:	3301      	adds	r3, #1
 80143b0:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80143b2:	7bbb      	ldrb	r3, [r7, #14]
 80143b4:	3301      	adds	r3, #1
 80143b6:	73bb      	strb	r3, [r7, #14]
 80143b8:	7bba      	ldrb	r2, [r7, #14]
 80143ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80143be:	429a      	cmp	r2, r3
 80143c0:	d3be      	bcc.n	8014340 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80143c2:	7bfb      	ldrb	r3, [r7, #15]
 80143c4:	3301      	adds	r3, #1
 80143c6:	73fb      	strb	r3, [r7, #15]
 80143c8:	7bfa      	ldrb	r2, [r7, #15]
 80143ca:	797b      	ldrb	r3, [r7, #5]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d3b4      	bcc.n	801433a <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80143d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143d2:	f000 f86c 	bl	80144ae <VL53L1_init_zone_config_histogram_bins>
 80143d6:	4603      	mov	r3, r0
 80143d8:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80143da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3714      	adds	r7, #20
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd90      	pop	{r4, r7, pc}

080143e6 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b084      	sub	sp, #16
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
 80143ee:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80143f0:	2300      	movs	r3, #0
 80143f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2205      	movs	r2, #5
 80143f8:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	2204      	movs	r2, #4
 80143fe:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	220f      	movs	r2, #15
 8014404:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	2207      	movs	r2, #7
 801440a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	2204      	movs	r2, #4
 8014410:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	2208      	movs	r2, #8
 8014416:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	220f      	movs	r2, #15
 801441c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	2207      	movs	r2, #7
 8014424:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	220c      	movs	r2, #12
 801442c:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	2208      	movs	r2, #8
 8014434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2207      	movs	r2, #7
 801443c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	220f      	movs	r2, #15
 8014444:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	2208      	movs	r2, #8
 801444c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	2204      	movs	r2, #4
 8014454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	2207      	movs	r2, #7
 801445c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	220f      	movs	r2, #15
 8014464:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	2208      	movs	r2, #8
 801446c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	220c      	movs	r2, #12
 8014474:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	220f      	movs	r2, #15
 801447c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	220f      	movs	r2, #15
 8014484:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	2208      	movs	r2, #8
 801448c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	2208      	movs	r2, #8
 8014494:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8014498:	6838      	ldr	r0, [r7, #0]
 801449a:	f000 f808 	bl	80144ae <VL53L1_init_zone_config_histogram_bins>
 801449e:	4603      	mov	r3, r0
 80144a0:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80144a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}

080144ae <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80144ae:	b480      	push	{r7}
 80144b0:	b085      	sub	sp, #20
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80144b6:	2300      	movs	r3, #0
 80144b8:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80144ba:	2300      	movs	r3, #0
 80144bc:	73fb      	strb	r3, [r7, #15]
 80144be:	e008      	b.n	80144d2 <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	4413      	add	r3, r2
 80144c6:	2201      	movs	r2, #1
 80144c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80144cc:	7bfb      	ldrb	r3, [r7, #15]
 80144ce:	3301      	adds	r3, #1
 80144d0:	73fb      	strb	r3, [r7, #15]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	7bfa      	ldrb	r2, [r7, #15]
 80144d8:	429a      	cmp	r2, r3
 80144da:	d3f1      	bcc.n	80144c0 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80144dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3714      	adds	r7, #20
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	8910      	ldrh	r0, [r2, #8]
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	b292      	uxth	r2, r2
 8014504:	68b9      	ldr	r1, [r7, #8]
 8014506:	4798      	blx	r3
 8014508:	4603      	mov	r3, r0
}
 801450a:	4618      	mov	r0, r3
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}

08014512 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014512:	b580      	push	{r7, lr}
 8014514:	b084      	sub	sp, #16
 8014516:	af00      	add	r7, sp, #0
 8014518:	60f8      	str	r0, [r7, #12]
 801451a:	60b9      	str	r1, [r7, #8]
 801451c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	8910      	ldrh	r0, [r2, #8]
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	b292      	uxth	r2, r2
 801452a:	68b9      	ldr	r1, [r7, #8]
 801452c:	4798      	blx	r3
 801452e:	4603      	mov	r3, r0
}
 8014530:	4618      	mov	r0, r3
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	607a      	str	r2, [r7, #4]
 8014542:	603b      	str	r3, [r7, #0]
 8014544:	460b      	mov	r3, r1
 8014546:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014548:	2300      	movs	r3, #0
 801454a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	2bff      	cmp	r3, #255	; 0xff
 8014550:	d902      	bls.n	8014558 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8014552:	f06f 0303 	mvn.w	r3, #3
 8014556:	e01d      	b.n	8014594 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014558:	897b      	ldrh	r3, [r7, #10]
 801455a:	0a1b      	lsrs	r3, r3, #8
 801455c:	b29b      	uxth	r3, r3
 801455e:	b2da      	uxtb	r2, r3
 8014560:	4b0e      	ldr	r3, [pc, #56]	; (801459c <VL53L1_WriteMulti+0x64>)
 8014562:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014564:	897b      	ldrh	r3, [r7, #10]
 8014566:	b2da      	uxtb	r2, r3
 8014568:	4b0c      	ldr	r3, [pc, #48]	; (801459c <VL53L1_WriteMulti+0x64>)
 801456a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 801456c:	683a      	ldr	r2, [r7, #0]
 801456e:	6879      	ldr	r1, [r7, #4]
 8014570:	480b      	ldr	r0, [pc, #44]	; (80145a0 <VL53L1_WriteMulti+0x68>)
 8014572:	f004 ffa5 	bl	80194c0 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	3302      	adds	r3, #2
 801457a:	461a      	mov	r2, r3
 801457c:	4907      	ldr	r1, [pc, #28]	; (801459c <VL53L1_WriteMulti+0x64>)
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f7ff ffb4 	bl	80144ec <_I2CWrite>
 8014584:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d001      	beq.n	8014590 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801458c:	23f3      	movs	r3, #243	; 0xf3
 801458e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014590:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014594:	4618      	mov	r0, r3
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	20008518 	.word	0x20008518
 80145a0:	2000851a 	.word	0x2000851a

080145a4 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	607a      	str	r2, [r7, #4]
 80145ae:	603b      	str	r3, [r7, #0]
 80145b0:	460b      	mov	r3, r1
 80145b2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80145b4:	2300      	movs	r3, #0
 80145b6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80145b8:	897b      	ldrh	r3, [r7, #10]
 80145ba:	0a1b      	lsrs	r3, r3, #8
 80145bc:	b29b      	uxth	r3, r3
 80145be:	b2da      	uxtb	r2, r3
 80145c0:	4b12      	ldr	r3, [pc, #72]	; (801460c <VL53L1_ReadMulti+0x68>)
 80145c2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80145c4:	897b      	ldrh	r3, [r7, #10]
 80145c6:	b2da      	uxtb	r2, r3
 80145c8:	4b10      	ldr	r3, [pc, #64]	; (801460c <VL53L1_ReadMulti+0x68>)
 80145ca:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80145cc:	2202      	movs	r2, #2
 80145ce:	490f      	ldr	r1, [pc, #60]	; (801460c <VL53L1_ReadMulti+0x68>)
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f7ff ff8b 	bl	80144ec <_I2CWrite>
 80145d6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d002      	beq.n	80145e4 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80145de:	23f3      	movs	r3, #243	; 0xf3
 80145e0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80145e2:	e00c      	b.n	80145fe <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80145e4:	683a      	ldr	r2, [r7, #0]
 80145e6:	6879      	ldr	r1, [r7, #4]
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f7ff ff92 	bl	8014512 <_I2CRead>
 80145ee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d002      	beq.n	80145fc <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80145f6:	23f3      	movs	r3, #243	; 0xf3
 80145f8:	75fb      	strb	r3, [r7, #23]
 80145fa:	e000      	b.n	80145fe <VL53L1_ReadMulti+0x5a>
    }
done:
 80145fc:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80145fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014602:	4618      	mov	r0, r3
 8014604:	3718      	adds	r7, #24
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	20008518 	.word	0x20008518

08014610 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	460b      	mov	r3, r1
 801461a:	807b      	strh	r3, [r7, #2]
 801461c:	4613      	mov	r3, r2
 801461e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014620:	2300      	movs	r3, #0
 8014622:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014624:	887b      	ldrh	r3, [r7, #2]
 8014626:	0a1b      	lsrs	r3, r3, #8
 8014628:	b29b      	uxth	r3, r3
 801462a:	b2da      	uxtb	r2, r3
 801462c:	4b0c      	ldr	r3, [pc, #48]	; (8014660 <VL53L1_WrByte+0x50>)
 801462e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014630:	887b      	ldrh	r3, [r7, #2]
 8014632:	b2da      	uxtb	r2, r3
 8014634:	4b0a      	ldr	r3, [pc, #40]	; (8014660 <VL53L1_WrByte+0x50>)
 8014636:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014638:	4a09      	ldr	r2, [pc, #36]	; (8014660 <VL53L1_WrByte+0x50>)
 801463a:	787b      	ldrb	r3, [r7, #1]
 801463c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801463e:	2203      	movs	r2, #3
 8014640:	4907      	ldr	r1, [pc, #28]	; (8014660 <VL53L1_WrByte+0x50>)
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff ff52 	bl	80144ec <_I2CWrite>
 8014648:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d001      	beq.n	8014654 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014650:	23f3      	movs	r3, #243	; 0xf3
 8014652:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014658:	4618      	mov	r0, r3
 801465a:	3710      	adds	r7, #16
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}
 8014660:	20008518 	.word	0x20008518

08014664 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	460b      	mov	r3, r1
 801466e:	807b      	strh	r3, [r7, #2]
 8014670:	4613      	mov	r3, r2
 8014672:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014674:	2300      	movs	r3, #0
 8014676:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014678:	887b      	ldrh	r3, [r7, #2]
 801467a:	0a1b      	lsrs	r3, r3, #8
 801467c:	b29b      	uxth	r3, r3
 801467e:	b2da      	uxtb	r2, r3
 8014680:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <VL53L1_WrWord+0x60>)
 8014682:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014684:	887b      	ldrh	r3, [r7, #2]
 8014686:	b2da      	uxtb	r2, r3
 8014688:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <VL53L1_WrWord+0x60>)
 801468a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 801468c:	883b      	ldrh	r3, [r7, #0]
 801468e:	0a1b      	lsrs	r3, r3, #8
 8014690:	b29b      	uxth	r3, r3
 8014692:	b2da      	uxtb	r2, r3
 8014694:	4b0b      	ldr	r3, [pc, #44]	; (80146c4 <VL53L1_WrWord+0x60>)
 8014696:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8014698:	883b      	ldrh	r3, [r7, #0]
 801469a:	b2da      	uxtb	r2, r3
 801469c:	4b09      	ldr	r3, [pc, #36]	; (80146c4 <VL53L1_WrWord+0x60>)
 801469e:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80146a0:	2204      	movs	r2, #4
 80146a2:	4908      	ldr	r1, [pc, #32]	; (80146c4 <VL53L1_WrWord+0x60>)
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7ff ff21 	bl	80144ec <_I2CWrite>
 80146aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d001      	beq.n	80146b6 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80146b2:	23f3      	movs	r3, #243	; 0xf3
 80146b4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80146b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	20008518 	.word	0x20008518

080146c8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b086      	sub	sp, #24
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	460b      	mov	r3, r1
 80146d2:	607a      	str	r2, [r7, #4]
 80146d4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80146d6:	2300      	movs	r3, #0
 80146d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80146da:	897b      	ldrh	r3, [r7, #10]
 80146dc:	0a1b      	lsrs	r3, r3, #8
 80146de:	b29b      	uxth	r3, r3
 80146e0:	b2da      	uxtb	r2, r3
 80146e2:	4b12      	ldr	r3, [pc, #72]	; (801472c <VL53L1_RdByte+0x64>)
 80146e4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80146e6:	897b      	ldrh	r3, [r7, #10]
 80146e8:	b2da      	uxtb	r2, r3
 80146ea:	4b10      	ldr	r3, [pc, #64]	; (801472c <VL53L1_RdByte+0x64>)
 80146ec:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80146ee:	2202      	movs	r2, #2
 80146f0:	490e      	ldr	r1, [pc, #56]	; (801472c <VL53L1_RdByte+0x64>)
 80146f2:	68f8      	ldr	r0, [r7, #12]
 80146f4:	f7ff fefa 	bl	80144ec <_I2CWrite>
 80146f8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014700:	23f3      	movs	r3, #243	; 0xf3
 8014702:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014704:	e00c      	b.n	8014720 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014706:	2201      	movs	r2, #1
 8014708:	6879      	ldr	r1, [r7, #4]
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7ff ff01 	bl	8014512 <_I2CRead>
 8014710:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014718:	23f3      	movs	r3, #243	; 0xf3
 801471a:	75fb      	strb	r3, [r7, #23]
 801471c:	e000      	b.n	8014720 <VL53L1_RdByte+0x58>
    }
done:
 801471e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014724:	4618      	mov	r0, r3
 8014726:	3718      	adds	r7, #24
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	20008518 	.word	0x20008518

08014730 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	460b      	mov	r3, r1
 801473a:	607a      	str	r2, [r7, #4]
 801473c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801473e:	2300      	movs	r3, #0
 8014740:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014742:	897b      	ldrh	r3, [r7, #10]
 8014744:	0a1b      	lsrs	r3, r3, #8
 8014746:	b29b      	uxth	r3, r3
 8014748:	b2da      	uxtb	r2, r3
 801474a:	4b18      	ldr	r3, [pc, #96]	; (80147ac <VL53L1_RdWord+0x7c>)
 801474c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801474e:	897b      	ldrh	r3, [r7, #10]
 8014750:	b2da      	uxtb	r2, r3
 8014752:	4b16      	ldr	r3, [pc, #88]	; (80147ac <VL53L1_RdWord+0x7c>)
 8014754:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014756:	2202      	movs	r2, #2
 8014758:	4914      	ldr	r1, [pc, #80]	; (80147ac <VL53L1_RdWord+0x7c>)
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f7ff fec6 	bl	80144ec <_I2CWrite>
 8014760:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d002      	beq.n	801476e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014768:	23f3      	movs	r3, #243	; 0xf3
 801476a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801476c:	e017      	b.n	801479e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801476e:	2202      	movs	r2, #2
 8014770:	490e      	ldr	r1, [pc, #56]	; (80147ac <VL53L1_RdWord+0x7c>)
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f7ff fecd 	bl	8014512 <_I2CRead>
 8014778:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014780:	23f3      	movs	r3, #243	; 0xf3
 8014782:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014784:	e00b      	b.n	801479e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8014786:	4b09      	ldr	r3, [pc, #36]	; (80147ac <VL53L1_RdWord+0x7c>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	b29b      	uxth	r3, r3
 801478c:	021b      	lsls	r3, r3, #8
 801478e:	b29a      	uxth	r2, r3
 8014790:	4b06      	ldr	r3, [pc, #24]	; (80147ac <VL53L1_RdWord+0x7c>)
 8014792:	785b      	ldrb	r3, [r3, #1]
 8014794:	b29b      	uxth	r3, r3
 8014796:	4413      	add	r3, r2
 8014798:	b29a      	uxth	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 801479e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3718      	adds	r7, #24
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	20008518 	.word	0x20008518

080147b0 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80147ba:	2300      	movs	r3, #0
 80147bc:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	695b      	ldr	r3, [r3, #20]
 80147c2:	4798      	blx	r3
 80147c4:	4603      	mov	r3, r0
 80147c6:	461a      	mov	r2, r3
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80147cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	4619      	mov	r1, r3
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f000 f8d2 	bl	8014990 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
	...

080147f8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	4a07      	ldr	r2, [pc, #28]	; (8014824 <VL53L1_WaitUs+0x2c>)
 8014806:	fb82 1203 	smull	r1, r2, r2, r3
 801480a:	1192      	asrs	r2, r2, #6
 801480c:	17db      	asrs	r3, r3, #31
 801480e:	1ad3      	subs	r3, r2, r3
 8014810:	4619      	mov	r1, r3
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 f8bc 	bl	8014990 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014818:	2300      	movs	r3, #0
}
 801481a:	4618      	mov	r0, r3
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	10624dd3 	.word	0x10624dd3

08014828 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014828:	b590      	push	{r4, r7, lr}
 801482a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801482e:	af00      	add	r7, sp, #0
 8014830:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014834:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014838:	6020      	str	r0, [r4, #0]
 801483a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801483e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8014842:	6001      	str	r1, [r0, #0]
 8014844:	4619      	mov	r1, r3
 8014846:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801484a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 801484e:	801a      	strh	r2, [r3, #0]
 8014850:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014854:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014858:	460a      	mov	r2, r1
 801485a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 801485c:	2300      	movs	r3, #0
 801485e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014868:	2300      	movs	r3, #0
 801486a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 801486e:	2300      	movs	r3, #0
 8014870:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 801487a:	2300      	movs	r3, #0
 801487c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8014880:	f107 0310 	add.w	r3, r7, #16
 8014884:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014888:	4940      	ldr	r1, [pc, #256]	; (801498c <VL53L1_WaitValueMaskEx+0x164>)
 801488a:	4618      	mov	r0, r3
 801488c:	f004 fed2 	bl	8019634 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8014890:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014894:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014898:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801489c:	4611      	mov	r1, r2
 801489e:	6818      	ldr	r0, [r3, #0]
 80148a0:	f7ff ff86 	bl	80147b0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80148a4:	e04e      	b.n	8014944 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80148a6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d110      	bne.n	80148d0 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80148ae:	f207 2213 	addw	r2, r7, #531	; 0x213
 80148b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80148b6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80148ba:	8819      	ldrh	r1, [r3, #0]
 80148bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80148c0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80148c4:	6818      	ldr	r0, [r3, #0]
 80148c6:	f7ff feff 	bl	80146c8 <VL53L1_RdByte>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80148d0:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80148d4:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80148d8:	4013      	ands	r3, r2
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80148e0:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 80148e4:	7812      	ldrb	r2, [r2, #0]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d102      	bne.n	80148f0 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 80148ea:	2301      	movs	r3, #1
 80148ec:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80148f0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d114      	bne.n	8014922 <VL53L1_WaitValueMaskEx+0xfa>
 80148f8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d110      	bne.n	8014922 <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014900:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00c      	beq.n	8014922 <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014908:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801490c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014910:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014914:	4611      	mov	r1, r2
 8014916:	6818      	ldr	r0, [r3, #0]
 8014918:	f7ff ff5e 	bl	80147d8 <VL53L1_WaitMs>
 801491c:	4603      	mov	r3, r0
 801491e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014922:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014926:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801492a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801492e:	4611      	mov	r1, r2
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	f7ff ff3d 	bl	80147b0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014936:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801493a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014944:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014948:	2b00      	cmp	r3, #0
 801494a:	d10c      	bne.n	8014966 <VL53L1_WaitValueMaskEx+0x13e>
 801494c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014950:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014954:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	429a      	cmp	r2, r3
 801495c:	d203      	bcs.n	8014966 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801495e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014962:	2b00      	cmp	r3, #0
 8014964:	d09f      	beq.n	80148a6 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014966:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801496a:	2b00      	cmp	r3, #0
 801496c:	d106      	bne.n	801497c <VL53L1_WaitValueMaskEx+0x154>
 801496e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014972:	2b00      	cmp	r3, #0
 8014974:	d102      	bne.n	801497c <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014976:	23f9      	movs	r3, #249	; 0xf9
 8014978:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 801497c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014980:	4618      	mov	r0, r3
 8014982:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014986:	46bd      	mov	sp, r7
 8014988:	bd90      	pop	{r4, r7, pc}
 801498a:	bf00      	nop
 801498c:	0801a6c4 	.word	0x0801a6c4

08014990 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	695b      	ldr	r3, [r3, #20]
 801499e:	4798      	blx	r3
 80149a0:	4603      	mov	r3, r0
 80149a2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80149a4:	bf00      	nop
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	4798      	blx	r3
 80149ac:	4603      	mov	r3, r0
 80149ae:	461a      	mov	r2, r3
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	1ad3      	subs	r3, r2, r3
 80149b4:	683a      	ldr	r2, [r7, #0]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d8f5      	bhi.n	80149a6 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 80149ba:	2300      	movs	r3, #0
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08c      	sub	sp, #48	; 0x30
 80149c8:	af06      	add	r7, sp, #24
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80149d2:	2300      	movs	r3, #0
 80149d4:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 80149d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d8:	9304      	str	r3, [sp, #16]
 80149da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149dc:	9303      	str	r3, [sp, #12]
 80149de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e0:	9302      	str	r3, [sp, #8]
 80149e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e4:	9301      	str	r3, [sp, #4]
 80149e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e8:	9300      	str	r3, [sp, #0]
 80149ea:	6a3b      	ldr	r3, [r7, #32]
 80149ec:	683a      	ldr	r2, [r7, #0]
 80149ee:	6879      	ldr	r1, [r7, #4]
 80149f0:	68b8      	ldr	r0, [r7, #8]
 80149f2:	f7fc fefb 	bl	80117ec <VL53L1_hist_process_data>
 80149f6:	4603      	mov	r3, r0
 80149f8:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 80149fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b084      	sub	sp, #16
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	6078      	str	r0, [r7, #4]
 8014a0e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d103      	bne.n	8014a1e <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014a16:	f06f 0301 	mvn.w	r3, #1
 8014a1a:	60fb      	str	r3, [r7, #12]
 8014a1c:	e023      	b.n	8014a66 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	685a      	ldr	r2, [r3, #4]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	891a      	ldrh	r2, [r3, #8]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	68da      	ldr	r2, [r3, #12]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	691a      	ldr	r2, [r3, #16]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	695a      	ldr	r2, [r3, #20]
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d004      	beq.n	8014a60 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4798      	blx	r3
 8014a5c:	60f8      	str	r0, [r7, #12]
 8014a5e:	e002      	b.n	8014a66 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014a60:	f04f 33ff 	mov.w	r3, #4294967295
 8014a64:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014a66:	68fb      	ldr	r3, [r7, #12]
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3710      	adds	r7, #16
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}

08014a70 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a7e:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014a86:	f04f 33ff 	mov.w	r3, #4294967295
 8014a8a:	60fb      	str	r3, [r7, #12]
 8014a8c:	e04d      	b.n	8014b2a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ed f8d1 	bl	8001c36 <VL53L1_WaitDeviceBooted>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d003      	beq.n	8014aa2 <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9e:	60fb      	str	r3, [r7, #12]
 8014aa0:	e043      	b.n	8014b2a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ed f847 	bl	8001b36 <VL53L1_DataInit>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d003      	beq.n	8014ab6 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014aae:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab2:	60fb      	str	r3, [r7, #12]
 8014ab4:	e039      	b.n	8014b2a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7ed f892 	bl	8001be0 <VL53L1_StaticInit>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d003      	beq.n	8014aca <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac6:	60fb      	str	r3, [r7, #12]
 8014ac8:	e02f      	b.n	8014b2a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7ee fe8a 	bl	80037e4 <VL53L1_PerformRefSpadManagement>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d003      	beq.n	8014ade <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8014ada:	60fb      	str	r3, [r7, #12]
 8014adc:	e025      	b.n	8014b2a <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014afc:	2200      	movs	r2, #0
 8014afe:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b20:	2201      	movs	r2, #1
 8014b22:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b48:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d111      	bne.n	8014b74 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	4798      	blx	r3
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d003      	beq.n	8014b64 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b60:	60fb      	str	r3, [r7, #12]
 8014b62:	e007      	b.n	8014b74 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014b64:	2300      	movs	r3, #0
 8014b66:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b6e:	2200      	movs	r2, #0
 8014b70:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014b74:	68fb      	ldr	r3, [r7, #12]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3710      	adds	r7, #16
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}

08014b7e <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b084      	sub	sp, #16
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d002      	beq.n	8014b94 <VL53L1CB_ReadID+0x16>
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d103      	bne.n	8014b9c <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014b94:	f06f 0301 	mvn.w	r3, #1
 8014b98:	60fb      	str	r3, [r7, #12]
 8014b9a:	e00a      	b.n	8014bb2 <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014ba2:	683a      	ldr	r2, [r7, #0]
 8014ba4:	f240 110f 	movw	r1, #271	; 0x10f
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7ff fdc1 	bl	8014730 <VL53L1_RdWord>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b085      	sub	sp, #20
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d002      	beq.n	8014bd2 <VL53L1CB_GetCapabilities+0x16>
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d103      	bne.n	8014bda <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014bd2:	f06f 0301 	mvn.w	r3, #1
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	e00d      	b.n	8014bf6 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	2201      	movs	r2, #1
 8014bde:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	2204      	movs	r2, #4
 8014be4:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	2201      	movs	r2, #1
 8014bea:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3714      	adds	r7, #20
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d009      	beq.n	8014c28 <VL53L1CB_ConfigProfile+0x24>
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d006      	beq.n	8014c28 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014c20:	7afb      	ldrb	r3, [r7, #11]
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	d103      	bne.n	8014c2e <VL53L1CB_ConfigProfile+0x2a>
 8014c26:	e00c      	b.n	8014c42 <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014c28:	f06f 0301 	mvn.w	r3, #1
 8014c2c:	e043      	b.n	8014cb6 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014c2e:	7afb      	ldrb	r3, [r7, #11]
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d006      	beq.n	8014c42 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014c34:	7afb      	ldrb	r3, [r7, #11]
 8014c36:	2b03      	cmp	r3, #3
 8014c38:	d003      	beq.n	8014c42 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014c3a:	f06f 0301 	mvn.w	r3, #1
 8014c3e:	60fb      	str	r3, [r7, #12]
 8014c40:	e038      	b.n	8014cb4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014c42:	7afb      	ldrb	r3, [r7, #11]
 8014c44:	4619      	mov	r1, r3
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f7ed f970 	bl	8001f2c <VL53L1_SetDistanceMode>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d003      	beq.n	8014c5a <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014c52:	f04f 33ff 	mov.w	r3, #4294967295
 8014c56:	60fb      	str	r3, [r7, #12]
 8014c58:	e02c      	b.n	8014cb4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c62:	fb02 f303 	mul.w	r3, r2, r3
 8014c66:	4619      	mov	r1, r3
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f7ed f9ed 	bl	8002048 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d003      	beq.n	8014c7c <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014c74:	f04f 33ff 	mov.w	r3, #4294967295
 8014c78:	60fb      	str	r3, [r7, #12]
 8014c7a:	e01b      	b.n	8014cb4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	bf14      	ite	ne
 8014c84:	2301      	movne	r3, #1
 8014c86:	2300      	moveq	r3, #0
 8014c88:	b2db      	uxtb	r3, r3
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c92:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	691b      	ldr	r3, [r3, #16]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	bf14      	ite	ne
 8014c9e:	2301      	movne	r3, #1
 8014ca0:	2300      	moveq	r3, #0
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014cac:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3710      	adds	r7, #16
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b094      	sub	sp, #80	; 0x50
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
 8014cc6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d002      	beq.n	8014cd4 <VL53L1CB_ConfigROI+0x16>
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d103      	bne.n	8014cdc <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014cd4:	f06f 0301 	mvn.w	r3, #1
 8014cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014cda:	e01c      	b.n	8014d16 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	789b      	ldrb	r3, [r3, #2]
 8014ce4:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	78db      	ldrb	r3, [r3, #3]
 8014cea:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	785b      	ldrb	r3, [r3, #1]
 8014cf6:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014cf8:	f107 0308 	add.w	r3, r7, #8
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7ed fca6 	bl	8002650 <VL53L1_SetROI>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d003      	beq.n	8014d12 <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d10:	e001      	b.n	8014d16 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014d12:	2300      	movs	r3, #0
 8014d14:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3750      	adds	r7, #80	; 0x50
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014d2a:	f06f 0303 	mvn.w	r3, #3
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	370c      	adds	r7, #12
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b084      	sub	sp, #16
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d002      	beq.n	8014d50 <VL53L1CB_GetDistance+0x16>
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d103      	bne.n	8014d58 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d50:	f06f 0301 	mvn.w	r3, #1
 8014d54:	60fb      	str	r3, [r7, #12]
 8014d56:	e03a      	b.n	8014dce <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d5e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d103      	bne.n	8014d6e <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014d66:	f04f 33ff 	mov.w	r3, #4294967295
 8014d6a:	60fb      	str	r3, [r7, #12]
 8014d6c:	e02f      	b.n	8014dce <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d74:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	d106      	bne.n	8014d8a <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f000 f92b 	bl	8014fdc <vl53l1cb_poll_for_measurement>
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	e004      	b.n	8014d94 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f000 f925 	bl	8014fdc <vl53l1cb_poll_for_measurement>
 8014d92:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d119      	bne.n	8014dce <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f000 f94b 	bl	8015038 <vl53l1cb_get_result>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d003      	beq.n	8014db0 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014da8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dac:	60fb      	str	r3, [r7, #12]
 8014dae:	e00e      	b.n	8014dce <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014db6:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	d105      	bne.n	8014dca <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f7ed fdde 	bl	8002980 <VL53L1_ClearInterruptAndStartMeasurement>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	60fb      	str	r3, [r7, #12]
 8014dc8:	e001      	b.n	8014dce <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8014dce:	68fb      	ldr	r3, [r7, #12]
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3710      	adds	r7, #16
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d103      	bne.n	8014df0 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014de8:	f06f 0301 	mvn.w	r3, #1
 8014dec:	60fb      	str	r3, [r7, #12]
 8014dee:	e068      	b.n	8014ec2 <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014df6:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d103      	bne.n	8014e06 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014e02:	60fb      	str	r3, [r7, #12]
 8014e04:	e05d      	b.n	8014ec2 <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f7ed fcf6 	bl	80027f8 <VL53L1_StartMeasurement>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d154      	bne.n	8014ebc <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e18:	2201      	movs	r2, #1
 8014e1a:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	3b01      	subs	r3, #1
 8014e26:	2b03      	cmp	r3, #3
 8014e28:	d83e      	bhi.n	8014ea8 <VL53L1CB_Start+0xd0>
 8014e2a:	a201      	add	r2, pc, #4	; (adr r2, 8014e30 <VL53L1CB_Start+0x58>)
 8014e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e30:	08014e41 	.word	0x08014e41
 8014e34:	08014e5b 	.word	0x08014e5b
 8014e38:	08014e75 	.word	0x08014e75
 8014e3c:	08014e8f 	.word	0x08014e8f
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e46:	2201      	movs	r2, #1
 8014e48:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e52:	2201      	movs	r2, #1
 8014e54:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e58:	e033      	b.n	8014ec2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e60:	2200      	movs	r2, #0
 8014e62:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e72:	e026      	b.n	8014ec2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e86:	2200      	movs	r2, #0
 8014e88:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e8c:	e019      	b.n	8014ec2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e94:	2200      	movs	r2, #0
 8014e96:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014ea6:	e00c      	b.n	8014ec2 <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014eae:	2200      	movs	r2, #0
 8014eb0:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8014eb4:	f06f 0301 	mvn.w	r3, #1
 8014eb8:	60fb      	str	r3, [r7, #12]
      break;
 8014eba:	e002      	b.n	8014ec2 <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b084      	sub	sp, #16
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d103      	bne.n	8014ee2 <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014eda:	f06f 0301 	mvn.w	r3, #1
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	e01c      	b.n	8014f1c <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ee8:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d103      	bne.n	8014ef8 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8014ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef4:	60fb      	str	r3, [r7, #12]
 8014ef6:	e011      	b.n	8014f1c <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f7ed fd1d 	bl	8002938 <VL53L1_StopMeasurement>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d108      	bne.n	8014f16 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	60fb      	str	r3, [r7, #12]
 8014f14:	e002      	b.n	8014f1c <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014f16:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3710      	adds	r7, #16
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d103      	bne.n	8014f3e <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f36:	f06f 0301 	mvn.w	r3, #1
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	e012      	b.n	8014f64 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	4619      	mov	r1, r3
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7ec fdcf 	bl	8001ae8 <VL53L1_SetDeviceAddress>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d003      	beq.n	8014f58 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8014f50:	f04f 33ff 	mov.w	r3, #4294967295
 8014f54:	60fb      	str	r3, [r7, #12]
 8014f56:	e005      	b.n	8014f64 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8014f60:	2300      	movs	r3, #0
 8014f62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f64:	68fb      	ldr	r3, [r7, #12]
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b085      	sub	sp, #20
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
 8014f76:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d002      	beq.n	8014f84 <VL53L1CB_GetAddress+0x16>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d103      	bne.n	8014f8c <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f84:	f06f 0301 	mvn.w	r3, #1
 8014f88:	60fb      	str	r3, [r7, #12]
 8014f8a:	e006      	b.n	8014f9a <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	891b      	ldrh	r3, [r3, #8]
 8014f90:	461a      	mov	r2, r3
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8014f96:	2300      	movs	r3, #0
 8014f98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3714      	adds	r7, #20
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr

08014fa8 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b083      	sub	sp, #12
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014fb2:	f06f 0303 	mvn.w	r3, #3
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	370c      	adds	r7, #12
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc0:	4770      	bx	lr

08014fc2 <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 8014fc2:	b480      	push	{r7}
 8014fc4:	b083      	sub	sp, #12
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
 8014fca:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014fcc:	f06f 0303 	mvn.w	r3, #3
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b084      	sub	sp, #16
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d102      	bne.n	8014ff6 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8014ff0:	f06f 0301 	mvn.w	r3, #1
 8014ff4:	e01b      	b.n	801502e <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	695b      	ldr	r3, [r3, #20]
 8014ffa:	4798      	blx	r3
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8015000:	f107 030b 	add.w	r3, r7, #11
 8015004:	4619      	mov	r1, r3
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ed fcd0 	bl	80029ac <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 801500c:	7afb      	ldrb	r3, [r7, #11]
 801500e:	2b01      	cmp	r3, #1
 8015010:	d101      	bne.n	8015016 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8015012:	2300      	movs	r3, #0
 8015014:	e00b      	b.n	801502e <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	695b      	ldr	r3, [r3, #20]
 801501a:	4798      	blx	r3
 801501c:	4603      	mov	r3, r0
 801501e:	461a      	mov	r2, r3
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	683a      	ldr	r2, [r7, #0]
 8015026:	429a      	cmp	r2, r3
 8015028:	d8ea      	bhi.n	8015000 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 801502a:	f06f 0302 	mvn.w	r3, #2
}
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
	...

08015038 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015038:	b590      	push	{r4, r7, lr}
 801503a:	b0a9      	sub	sp, #164	; 0xa4
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d002      	beq.n	801504e <vl53l1cb_get_result+0x16>
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d104      	bne.n	8015058 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801504e:	f06f 0301 	mvn.w	r3, #1
 8015052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015056:	e120      	b.n	801529a <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8015058:	f107 030c 	add.w	r3, r7, #12
 801505c:	4619      	mov	r1, r3
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f7ee fb82 	bl	8003768 <VL53L1_GetMultiRangingData>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d004      	beq.n	8015074 <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 801506a:	f04f 33ff 	mov.w	r3, #4294967295
 801506e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015072:	e112      	b.n	801529a <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015074:	2300      	movs	r3, #0
 8015076:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801507a:	e106      	b.n	801528a <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 801507c:	7cbb      	ldrb	r3, [r7, #18]
 801507e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015082:	4618      	mov	r0, r3
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	4613      	mov	r3, r2
 8015088:	011b      	lsls	r3, r3, #4
 801508a:	4413      	add	r3, r2
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	440b      	add	r3, r1
 8015090:	3304      	adds	r3, #4
 8015092:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015094:	2300      	movs	r3, #0
 8015096:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801509a:	e0eb      	b.n	8015274 <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 801509c:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80150a0:	4613      	mov	r3, r2
 80150a2:	00db      	lsls	r3, r3, #3
 80150a4:	1a9b      	subs	r3, r3, r2
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	33a0      	adds	r3, #160	; 0xa0
 80150aa:	443b      	add	r3, r7
 80150ac:	3b78      	subs	r3, #120	; 0x78
 80150ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	da0d      	bge.n	80150d2 <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80150b6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80150ba:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	4613      	mov	r3, r2
 80150c2:	011b      	lsls	r3, r3, #4
 80150c4:	4413      	add	r3, r2
 80150c6:	4403      	add	r3, r0
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	440b      	add	r3, r1
 80150cc:	2200      	movs	r2, #0
 80150ce:	609a      	str	r2, [r3, #8]
 80150d0:	e017      	b.n	8015102 <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80150d2:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80150d6:	4613      	mov	r3, r2
 80150d8:	00db      	lsls	r3, r3, #3
 80150da:	1a9b      	subs	r3, r3, r2
 80150dc:	009b      	lsls	r3, r3, #2
 80150de:	33a0      	adds	r3, #160	; 0xa0
 80150e0:	443b      	add	r3, r7
 80150e2:	3b78      	subs	r3, #120	; 0x78
 80150e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150e8:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80150ec:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80150f0:	461c      	mov	r4, r3
 80150f2:	6839      	ldr	r1, [r7, #0]
 80150f4:	4613      	mov	r3, r2
 80150f6:	011b      	lsls	r3, r3, #4
 80150f8:	4413      	add	r3, r2
 80150fa:	4403      	add	r3, r0
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	440b      	add	r3, r1
 8015100:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015108:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 801510c:	2b01      	cmp	r3, #1
 801510e:	d136      	bne.n	801517e <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015110:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015114:	4613      	mov	r3, r2
 8015116:	00db      	lsls	r3, r3, #3
 8015118:	1a9b      	subs	r3, r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	33a0      	adds	r3, #160	; 0xa0
 801511e:	443b      	add	r3, r7
 8015120:	3b80      	subs	r3, #128	; 0x80
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	ee07 3a90 	vmov	s15, r3
 8015128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801512c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80152a8 <vl53l1cb_get_result+0x270>
 8015130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015134:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80152ac <vl53l1cb_get_result+0x274>
 8015138:	ee67 7a87 	vmul.f32	s15, s15, s14
 801513c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015140:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015144:	0a1b      	lsrs	r3, r3, #8
 8015146:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 801514a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801514e:	ee07 3a90 	vmov	s15, r3
 8015152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015156:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801515a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801515e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8015162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015166:	6839      	ldr	r1, [r7, #0]
 8015168:	4613      	mov	r3, r2
 801516a:	011b      	lsls	r3, r3, #4
 801516c:	4413      	add	r3, r2
 801516e:	4403      	add	r3, r0
 8015170:	3308      	adds	r3, #8
 8015172:	009b      	lsls	r3, r3, #2
 8015174:	440b      	add	r3, r1
 8015176:	3308      	adds	r3, #8
 8015178:	edc3 7a00 	vstr	s15, [r3]
 801517c:	e00f      	b.n	801519e <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 801517e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015182:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015186:	6839      	ldr	r1, [r7, #0]
 8015188:	4613      	mov	r3, r2
 801518a:	011b      	lsls	r3, r3, #4
 801518c:	4413      	add	r3, r2
 801518e:	4403      	add	r3, r0
 8015190:	3308      	adds	r3, #8
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	440b      	add	r3, r1
 8015196:	3308      	adds	r3, #8
 8015198:	f04f 0200 	mov.w	r2, #0
 801519c:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151a4:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d136      	bne.n	801521a <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80151ac:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80151b0:	4613      	mov	r3, r2
 80151b2:	00db      	lsls	r3, r3, #3
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	33a0      	adds	r3, #160	; 0xa0
 80151ba:	443b      	add	r3, r7
 80151bc:	3b84      	subs	r3, #132	; 0x84
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	ee07 3a90 	vmov	s15, r3
 80151c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80151c8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80152a8 <vl53l1cb_get_result+0x270>
 80151cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80151d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80152ac <vl53l1cb_get_result+0x274>
 80151d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151d8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80151dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80151e0:	0a1b      	lsrs	r3, r3, #8
 80151e2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80151e6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80151ea:	ee07 3a90 	vmov	s15, r3
 80151ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80151f2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80151f6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80151fa:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80151fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	4613      	mov	r3, r2
 8015206:	011b      	lsls	r3, r3, #4
 8015208:	4413      	add	r3, r2
 801520a:	4403      	add	r3, r0
 801520c:	330c      	adds	r3, #12
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	440b      	add	r3, r1
 8015212:	3308      	adds	r3, #8
 8015214:	edc3 7a00 	vstr	s15, [r3]
 8015218:	e00f      	b.n	801523a <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 801521a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801521e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	4613      	mov	r3, r2
 8015226:	011b      	lsls	r3, r3, #4
 8015228:	4413      	add	r3, r2
 801522a:	4403      	add	r3, r0
 801522c:	330c      	adds	r3, #12
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	440b      	add	r3, r1
 8015232:	3308      	adds	r3, #8
 8015234:	f04f 0200 	mov.w	r2, #0
 8015238:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 801523a:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801523e:	4613      	mov	r3, r2
 8015240:	00db      	lsls	r3, r3, #3
 8015242:	1a9b      	subs	r3, r3, r2
 8015244:	009b      	lsls	r3, r3, #2
 8015246:	33a0      	adds	r3, #160	; 0xa0
 8015248:	443b      	add	r3, r7
 801524a:	3b75      	subs	r3, #117	; 0x75
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015252:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015256:	461c      	mov	r4, r3
 8015258:	6839      	ldr	r1, [r7, #0]
 801525a:	4613      	mov	r3, r2
 801525c:	011b      	lsls	r3, r3, #4
 801525e:	4413      	add	r3, r2
 8015260:	4403      	add	r3, r0
 8015262:	3304      	adds	r3, #4
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	440b      	add	r3, r1
 8015268:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801526a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 801526e:	3301      	adds	r3, #1
 8015270:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8015274:	7cbb      	ldrb	r3, [r7, #18]
 8015276:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801527a:	429a      	cmp	r2, r3
 801527c:	f4ff af0e 	bcc.w	801509c <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015280:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015284:	3301      	adds	r3, #1
 8015286:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801528a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801528e:	2b00      	cmp	r3, #0
 8015290:	f43f aef4 	beq.w	801507c <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 8015294:	2300      	movs	r3, #0
 8015296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 801529a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 801529e:	4618      	mov	r0, r3
 80152a0:	37a4      	adds	r7, #164	; 0xa4
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd90      	pop	{r4, r7, pc}
 80152a6:	bf00      	nop
 80152a8:	47800000 	.word	0x47800000
 80152ac:	447a0000 	.word	0x447a0000

080152b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80152ba:	4b0c      	ldr	r3, [pc, #48]	; (80152ec <HAL_Init+0x3c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4a0b      	ldr	r2, [pc, #44]	; (80152ec <HAL_Init+0x3c>)
 80152c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80152c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80152c6:	2003      	movs	r0, #3
 80152c8:	f000 f90f 	bl	80154ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80152cc:	200f      	movs	r0, #15
 80152ce:	f7eb fd31 	bl	8000d34 <HAL_InitTick>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d002      	beq.n	80152de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80152d8:	2301      	movs	r3, #1
 80152da:	71fb      	strb	r3, [r7, #7]
 80152dc:	e001      	b.n	80152e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80152de:	f7eb fc6b 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80152e2:	79fb      	ldrb	r3, [r7, #7]
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3708      	adds	r7, #8
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	58004000 	.word	0x58004000

080152f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80152f0:	b480      	push	{r7}
 80152f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80152f4:	4b06      	ldr	r3, [pc, #24]	; (8015310 <HAL_IncTick+0x20>)
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	461a      	mov	r2, r3
 80152fa:	4b06      	ldr	r3, [pc, #24]	; (8015314 <HAL_IncTick+0x24>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	4413      	add	r3, r2
 8015300:	4a04      	ldr	r2, [pc, #16]	; (8015314 <HAL_IncTick+0x24>)
 8015302:	6013      	str	r3, [r2, #0]
}
 8015304:	bf00      	nop
 8015306:	46bd      	mov	sp, r7
 8015308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	20000070 	.word	0x20000070
 8015314:	20008618 	.word	0x20008618

08015318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015318:	b480      	push	{r7}
 801531a:	af00      	add	r7, sp, #0
  return uwTick;
 801531c:	4b03      	ldr	r3, [pc, #12]	; (801532c <HAL_GetTick+0x14>)
 801531e:	681b      	ldr	r3, [r3, #0]
}
 8015320:	4618      	mov	r0, r3
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop
 801532c:	20008618 	.word	0x20008618

08015330 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8015330:	b480      	push	{r7}
 8015332:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8015334:	4b03      	ldr	r3, [pc, #12]	; (8015344 <HAL_GetTickPrio+0x14>)
 8015336:	681b      	ldr	r3, [r3, #0]
}
 8015338:	4618      	mov	r0, r3
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr
 8015342:	bf00      	nop
 8015344:	2000006c 	.word	0x2000006c

08015348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015350:	f7ff ffe2 	bl	8015318 <HAL_GetTick>
 8015354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015360:	d005      	beq.n	801536e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015362:	4b0a      	ldr	r3, [pc, #40]	; (801538c <HAL_Delay+0x44>)
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	461a      	mov	r2, r3
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	4413      	add	r3, r2
 801536c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801536e:	bf00      	nop
 8015370:	f7ff ffd2 	bl	8015318 <HAL_GetTick>
 8015374:	4602      	mov	r2, r0
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	429a      	cmp	r2, r3
 801537e:	d8f7      	bhi.n	8015370 <HAL_Delay+0x28>
  {
  }
}
 8015380:	bf00      	nop
 8015382:	bf00      	nop
 8015384:	3710      	adds	r7, #16
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	20000070 	.word	0x20000070

08015390 <__NVIC_SetPriorityGrouping>:
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f003 0307 	and.w	r3, r3, #7
 801539e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80153a0:	4b0c      	ldr	r3, [pc, #48]	; (80153d4 <__NVIC_SetPriorityGrouping+0x44>)
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80153ac:	4013      	ands	r3, r2
 80153ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80153b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80153bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80153c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80153c2:	4a04      	ldr	r2, [pc, #16]	; (80153d4 <__NVIC_SetPriorityGrouping+0x44>)
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	60d3      	str	r3, [r2, #12]
}
 80153c8:	bf00      	nop
 80153ca:	3714      	adds	r7, #20
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	e000ed00 	.word	0xe000ed00

080153d8 <__NVIC_GetPriorityGrouping>:
{
 80153d8:	b480      	push	{r7}
 80153da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80153dc:	4b04      	ldr	r3, [pc, #16]	; (80153f0 <__NVIC_GetPriorityGrouping+0x18>)
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	0a1b      	lsrs	r3, r3, #8
 80153e2:	f003 0307 	and.w	r3, r3, #7
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	46bd      	mov	sp, r7
 80153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ee:	4770      	bx	lr
 80153f0:	e000ed00 	.word	0xe000ed00

080153f4 <__NVIC_EnableIRQ>:
{
 80153f4:	b480      	push	{r7}
 80153f6:	b083      	sub	sp, #12
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	4603      	mov	r3, r0
 80153fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80153fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015402:	2b00      	cmp	r3, #0
 8015404:	db0b      	blt.n	801541e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015406:	79fb      	ldrb	r3, [r7, #7]
 8015408:	f003 021f 	and.w	r2, r3, #31
 801540c:	4907      	ldr	r1, [pc, #28]	; (801542c <__NVIC_EnableIRQ+0x38>)
 801540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015412:	095b      	lsrs	r3, r3, #5
 8015414:	2001      	movs	r0, #1
 8015416:	fa00 f202 	lsl.w	r2, r0, r2
 801541a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801541e:	bf00      	nop
 8015420:	370c      	adds	r7, #12
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	e000e100 	.word	0xe000e100

08015430 <__NVIC_SetPriority>:
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	4603      	mov	r3, r0
 8015438:	6039      	str	r1, [r7, #0]
 801543a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801543c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015440:	2b00      	cmp	r3, #0
 8015442:	db0a      	blt.n	801545a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	b2da      	uxtb	r2, r3
 8015448:	490c      	ldr	r1, [pc, #48]	; (801547c <__NVIC_SetPriority+0x4c>)
 801544a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801544e:	0112      	lsls	r2, r2, #4
 8015450:	b2d2      	uxtb	r2, r2
 8015452:	440b      	add	r3, r1
 8015454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015458:	e00a      	b.n	8015470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	b2da      	uxtb	r2, r3
 801545e:	4908      	ldr	r1, [pc, #32]	; (8015480 <__NVIC_SetPriority+0x50>)
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	f003 030f 	and.w	r3, r3, #15
 8015466:	3b04      	subs	r3, #4
 8015468:	0112      	lsls	r2, r2, #4
 801546a:	b2d2      	uxtb	r2, r2
 801546c:	440b      	add	r3, r1
 801546e:	761a      	strb	r2, [r3, #24]
}
 8015470:	bf00      	nop
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	e000e100 	.word	0xe000e100
 8015480:	e000ed00 	.word	0xe000ed00

08015484 <NVIC_EncodePriority>:
{
 8015484:	b480      	push	{r7}
 8015486:	b089      	sub	sp, #36	; 0x24
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f003 0307 	and.w	r3, r3, #7
 8015496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	f1c3 0307 	rsb	r3, r3, #7
 801549e:	2b04      	cmp	r3, #4
 80154a0:	bf28      	it	cs
 80154a2:	2304      	movcs	r3, #4
 80154a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	3304      	adds	r3, #4
 80154aa:	2b06      	cmp	r3, #6
 80154ac:	d902      	bls.n	80154b4 <NVIC_EncodePriority+0x30>
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	3b03      	subs	r3, #3
 80154b2:	e000      	b.n	80154b6 <NVIC_EncodePriority+0x32>
 80154b4:	2300      	movs	r3, #0
 80154b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80154b8:	f04f 32ff 	mov.w	r2, #4294967295
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	fa02 f303 	lsl.w	r3, r2, r3
 80154c2:	43da      	mvns	r2, r3
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	401a      	ands	r2, r3
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80154cc:	f04f 31ff 	mov.w	r1, #4294967295
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	fa01 f303 	lsl.w	r3, r1, r3
 80154d6:	43d9      	mvns	r1, r3
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80154dc:	4313      	orrs	r3, r2
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3724      	adds	r7, #36	; 0x24
 80154e2:	46bd      	mov	sp, r7
 80154e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e8:	4770      	bx	lr

080154ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b082      	sub	sp, #8
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff ff4c 	bl	8015390 <__NVIC_SetPriorityGrouping>
}
 80154f8:	bf00      	nop
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b086      	sub	sp, #24
 8015504:	af00      	add	r7, sp, #0
 8015506:	4603      	mov	r3, r0
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	607a      	str	r2, [r7, #4]
 801550c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801550e:	f7ff ff63 	bl	80153d8 <__NVIC_GetPriorityGrouping>
 8015512:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	68b9      	ldr	r1, [r7, #8]
 8015518:	6978      	ldr	r0, [r7, #20]
 801551a:	f7ff ffb3 	bl	8015484 <NVIC_EncodePriority>
 801551e:	4602      	mov	r2, r0
 8015520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015524:	4611      	mov	r1, r2
 8015526:	4618      	mov	r0, r3
 8015528:	f7ff ff82 	bl	8015430 <__NVIC_SetPriority>
}
 801552c:	bf00      	nop
 801552e:	3718      	adds	r7, #24
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015542:	4618      	mov	r0, r3
 8015544:	f7ff ff56 	bl	80153f4 <__NVIC_EnableIRQ>
}
 8015548:	bf00      	nop
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015550:	b480      	push	{r7}
 8015552:	b087      	sub	sp, #28
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801555a:	2300      	movs	r3, #0
 801555c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801555e:	e14c      	b.n	80157fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	2101      	movs	r1, #1
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	fa01 f303 	lsl.w	r3, r1, r3
 801556c:	4013      	ands	r3, r2
 801556e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2b00      	cmp	r3, #0
 8015574:	f000 813e 	beq.w	80157f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	f003 0303 	and.w	r3, r3, #3
 8015580:	2b01      	cmp	r3, #1
 8015582:	d005      	beq.n	8015590 <HAL_GPIO_Init+0x40>
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	f003 0303 	and.w	r3, r3, #3
 801558c:	2b02      	cmp	r3, #2
 801558e:	d130      	bne.n	80155f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	689b      	ldr	r3, [r3, #8]
 8015594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	2203      	movs	r2, #3
 801559c:	fa02 f303 	lsl.w	r3, r2, r3
 80155a0:	43db      	mvns	r3, r3
 80155a2:	693a      	ldr	r2, [r7, #16]
 80155a4:	4013      	ands	r3, r2
 80155a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	68da      	ldr	r2, [r3, #12]
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	fa02 f303 	lsl.w	r3, r2, r3
 80155b4:	693a      	ldr	r2, [r7, #16]
 80155b6:	4313      	orrs	r3, r2
 80155b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	693a      	ldr	r2, [r7, #16]
 80155be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80155c6:	2201      	movs	r2, #1
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	fa02 f303 	lsl.w	r3, r2, r3
 80155ce:	43db      	mvns	r3, r3
 80155d0:	693a      	ldr	r2, [r7, #16]
 80155d2:	4013      	ands	r3, r2
 80155d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	091b      	lsrs	r3, r3, #4
 80155dc:	f003 0201 	and.w	r2, r3, #1
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	fa02 f303 	lsl.w	r3, r2, r3
 80155e6:	693a      	ldr	r2, [r7, #16]
 80155e8:	4313      	orrs	r3, r2
 80155ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	693a      	ldr	r2, [r7, #16]
 80155f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	f003 0303 	and.w	r3, r3, #3
 80155fa:	2b03      	cmp	r3, #3
 80155fc:	d017      	beq.n	801562e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	005b      	lsls	r3, r3, #1
 8015608:	2203      	movs	r2, #3
 801560a:	fa02 f303 	lsl.w	r3, r2, r3
 801560e:	43db      	mvns	r3, r3
 8015610:	693a      	ldr	r2, [r7, #16]
 8015612:	4013      	ands	r3, r2
 8015614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	689a      	ldr	r2, [r3, #8]
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	fa02 f303 	lsl.w	r3, r2, r3
 8015622:	693a      	ldr	r2, [r7, #16]
 8015624:	4313      	orrs	r3, r2
 8015626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	693a      	ldr	r2, [r7, #16]
 801562c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	f003 0303 	and.w	r3, r3, #3
 8015636:	2b02      	cmp	r3, #2
 8015638:	d123      	bne.n	8015682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	08da      	lsrs	r2, r3, #3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	3208      	adds	r2, #8
 8015642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	f003 0307 	and.w	r3, r3, #7
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	220f      	movs	r2, #15
 8015652:	fa02 f303 	lsl.w	r3, r2, r3
 8015656:	43db      	mvns	r3, r3
 8015658:	693a      	ldr	r2, [r7, #16]
 801565a:	4013      	ands	r3, r2
 801565c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	691a      	ldr	r2, [r3, #16]
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	f003 0307 	and.w	r3, r3, #7
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	fa02 f303 	lsl.w	r3, r2, r3
 801566e:	693a      	ldr	r2, [r7, #16]
 8015670:	4313      	orrs	r3, r2
 8015672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	08da      	lsrs	r2, r3, #3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	3208      	adds	r2, #8
 801567c:	6939      	ldr	r1, [r7, #16]
 801567e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	005b      	lsls	r3, r3, #1
 801568c:	2203      	movs	r2, #3
 801568e:	fa02 f303 	lsl.w	r3, r2, r3
 8015692:	43db      	mvns	r3, r3
 8015694:	693a      	ldr	r2, [r7, #16]
 8015696:	4013      	ands	r3, r2
 8015698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	685b      	ldr	r3, [r3, #4]
 801569e:	f003 0203 	and.w	r2, r3, #3
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	005b      	lsls	r3, r3, #1
 80156a6:	fa02 f303 	lsl.w	r3, r2, r3
 80156aa:	693a      	ldr	r2, [r7, #16]
 80156ac:	4313      	orrs	r3, r2
 80156ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	693a      	ldr	r2, [r7, #16]
 80156b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f000 8098 	beq.w	80157f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80156c4:	4a54      	ldr	r2, [pc, #336]	; (8015818 <HAL_GPIO_Init+0x2c8>)
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	089b      	lsrs	r3, r3, #2
 80156ca:	3302      	adds	r3, #2
 80156cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	f003 0303 	and.w	r3, r3, #3
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	220f      	movs	r2, #15
 80156dc:	fa02 f303 	lsl.w	r3, r2, r3
 80156e0:	43db      	mvns	r3, r3
 80156e2:	693a      	ldr	r2, [r7, #16]
 80156e4:	4013      	ands	r3, r2
 80156e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80156ee:	d019      	beq.n	8015724 <HAL_GPIO_Init+0x1d4>
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	4a4a      	ldr	r2, [pc, #296]	; (801581c <HAL_GPIO_Init+0x2cc>)
 80156f4:	4293      	cmp	r3, r2
 80156f6:	d013      	beq.n	8015720 <HAL_GPIO_Init+0x1d0>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	4a49      	ldr	r2, [pc, #292]	; (8015820 <HAL_GPIO_Init+0x2d0>)
 80156fc:	4293      	cmp	r3, r2
 80156fe:	d00d      	beq.n	801571c <HAL_GPIO_Init+0x1cc>
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4a48      	ldr	r2, [pc, #288]	; (8015824 <HAL_GPIO_Init+0x2d4>)
 8015704:	4293      	cmp	r3, r2
 8015706:	d007      	beq.n	8015718 <HAL_GPIO_Init+0x1c8>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4a47      	ldr	r2, [pc, #284]	; (8015828 <HAL_GPIO_Init+0x2d8>)
 801570c:	4293      	cmp	r3, r2
 801570e:	d101      	bne.n	8015714 <HAL_GPIO_Init+0x1c4>
 8015710:	2304      	movs	r3, #4
 8015712:	e008      	b.n	8015726 <HAL_GPIO_Init+0x1d6>
 8015714:	2307      	movs	r3, #7
 8015716:	e006      	b.n	8015726 <HAL_GPIO_Init+0x1d6>
 8015718:	2303      	movs	r3, #3
 801571a:	e004      	b.n	8015726 <HAL_GPIO_Init+0x1d6>
 801571c:	2302      	movs	r3, #2
 801571e:	e002      	b.n	8015726 <HAL_GPIO_Init+0x1d6>
 8015720:	2301      	movs	r3, #1
 8015722:	e000      	b.n	8015726 <HAL_GPIO_Init+0x1d6>
 8015724:	2300      	movs	r3, #0
 8015726:	697a      	ldr	r2, [r7, #20]
 8015728:	f002 0203 	and.w	r2, r2, #3
 801572c:	0092      	lsls	r2, r2, #2
 801572e:	4093      	lsls	r3, r2
 8015730:	693a      	ldr	r2, [r7, #16]
 8015732:	4313      	orrs	r3, r2
 8015734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8015736:	4938      	ldr	r1, [pc, #224]	; (8015818 <HAL_GPIO_Init+0x2c8>)
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	089b      	lsrs	r3, r3, #2
 801573c:	3302      	adds	r3, #2
 801573e:	693a      	ldr	r2, [r7, #16]
 8015740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015744:	4b39      	ldr	r3, [pc, #228]	; (801582c <HAL_GPIO_Init+0x2dc>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	43db      	mvns	r3, r3
 801574e:	693a      	ldr	r2, [r7, #16]
 8015750:	4013      	ands	r3, r2
 8015752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801575c:	2b00      	cmp	r3, #0
 801575e:	d003      	beq.n	8015768 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015760:	693a      	ldr	r2, [r7, #16]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	4313      	orrs	r3, r2
 8015766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015768:	4a30      	ldr	r2, [pc, #192]	; (801582c <HAL_GPIO_Init+0x2dc>)
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801576e:	4b2f      	ldr	r3, [pc, #188]	; (801582c <HAL_GPIO_Init+0x2dc>)
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	43db      	mvns	r3, r3
 8015778:	693a      	ldr	r2, [r7, #16]
 801577a:	4013      	ands	r3, r2
 801577c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015786:	2b00      	cmp	r3, #0
 8015788:	d003      	beq.n	8015792 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 801578a:	693a      	ldr	r2, [r7, #16]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	4313      	orrs	r3, r2
 8015790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015792:	4a26      	ldr	r2, [pc, #152]	; (801582c <HAL_GPIO_Init+0x2dc>)
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015798:	4b24      	ldr	r3, [pc, #144]	; (801582c <HAL_GPIO_Init+0x2dc>)
 801579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801579e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	43db      	mvns	r3, r3
 80157a4:	693a      	ldr	r2, [r7, #16]
 80157a6:	4013      	ands	r3, r2
 80157a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d003      	beq.n	80157be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80157b6:	693a      	ldr	r2, [r7, #16]
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	4313      	orrs	r3, r2
 80157bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80157be:	4a1b      	ldr	r2, [pc, #108]	; (801582c <HAL_GPIO_Init+0x2dc>)
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80157c6:	4b19      	ldr	r3, [pc, #100]	; (801582c <HAL_GPIO_Init+0x2dc>)
 80157c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80157cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	43db      	mvns	r3, r3
 80157d2:	693a      	ldr	r2, [r7, #16]
 80157d4:	4013      	ands	r3, r2
 80157d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	685b      	ldr	r3, [r3, #4]
 80157dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d003      	beq.n	80157ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80157e4:	693a      	ldr	r2, [r7, #16]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	4313      	orrs	r3, r2
 80157ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80157ec:	4a0f      	ldr	r2, [pc, #60]	; (801582c <HAL_GPIO_Init+0x2dc>)
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	3301      	adds	r3, #1
 80157f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	fa22 f303 	lsr.w	r3, r2, r3
 8015804:	2b00      	cmp	r3, #0
 8015806:	f47f aeab 	bne.w	8015560 <HAL_GPIO_Init+0x10>
  }
}
 801580a:	bf00      	nop
 801580c:	bf00      	nop
 801580e:	371c      	adds	r7, #28
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr
 8015818:	40010000 	.word	0x40010000
 801581c:	48000400 	.word	0x48000400
 8015820:	48000800 	.word	0x48000800
 8015824:	48000c00 	.word	0x48000c00
 8015828:	48001000 	.word	0x48001000
 801582c:	58000800 	.word	0x58000800

08015830 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015830:	b480      	push	{r7}
 8015832:	b087      	sub	sp, #28
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801583a:	2300      	movs	r3, #0
 801583c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801583e:	e0bb      	b.n	80159b8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8015840:	2201      	movs	r2, #1
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	fa02 f303 	lsl.w	r3, r2, r3
 8015848:	683a      	ldr	r2, [r7, #0]
 801584a:	4013      	ands	r3, r2
 801584c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	2b00      	cmp	r3, #0
 8015852:	f000 80ae 	beq.w	80159b2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8015856:	4a5f      	ldr	r2, [pc, #380]	; (80159d4 <HAL_GPIO_DeInit+0x1a4>)
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	089b      	lsrs	r3, r3, #2
 801585c:	3302      	adds	r3, #2
 801585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015862:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	f003 0303 	and.w	r3, r3, #3
 801586a:	009b      	lsls	r3, r3, #2
 801586c:	220f      	movs	r2, #15
 801586e:	fa02 f303 	lsl.w	r3, r2, r3
 8015872:	68fa      	ldr	r2, [r7, #12]
 8015874:	4013      	ands	r3, r2
 8015876:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801587e:	d019      	beq.n	80158b4 <HAL_GPIO_DeInit+0x84>
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4a55      	ldr	r2, [pc, #340]	; (80159d8 <HAL_GPIO_DeInit+0x1a8>)
 8015884:	4293      	cmp	r3, r2
 8015886:	d013      	beq.n	80158b0 <HAL_GPIO_DeInit+0x80>
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	4a54      	ldr	r2, [pc, #336]	; (80159dc <HAL_GPIO_DeInit+0x1ac>)
 801588c:	4293      	cmp	r3, r2
 801588e:	d00d      	beq.n	80158ac <HAL_GPIO_DeInit+0x7c>
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	4a53      	ldr	r2, [pc, #332]	; (80159e0 <HAL_GPIO_DeInit+0x1b0>)
 8015894:	4293      	cmp	r3, r2
 8015896:	d007      	beq.n	80158a8 <HAL_GPIO_DeInit+0x78>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	4a52      	ldr	r2, [pc, #328]	; (80159e4 <HAL_GPIO_DeInit+0x1b4>)
 801589c:	4293      	cmp	r3, r2
 801589e:	d101      	bne.n	80158a4 <HAL_GPIO_DeInit+0x74>
 80158a0:	2304      	movs	r3, #4
 80158a2:	e008      	b.n	80158b6 <HAL_GPIO_DeInit+0x86>
 80158a4:	2307      	movs	r3, #7
 80158a6:	e006      	b.n	80158b6 <HAL_GPIO_DeInit+0x86>
 80158a8:	2303      	movs	r3, #3
 80158aa:	e004      	b.n	80158b6 <HAL_GPIO_DeInit+0x86>
 80158ac:	2302      	movs	r3, #2
 80158ae:	e002      	b.n	80158b6 <HAL_GPIO_DeInit+0x86>
 80158b0:	2301      	movs	r3, #1
 80158b2:	e000      	b.n	80158b6 <HAL_GPIO_DeInit+0x86>
 80158b4:	2300      	movs	r3, #0
 80158b6:	697a      	ldr	r2, [r7, #20]
 80158b8:	f002 0203 	and.w	r2, r2, #3
 80158bc:	0092      	lsls	r2, r2, #2
 80158be:	4093      	lsls	r3, r2
 80158c0:	68fa      	ldr	r2, [r7, #12]
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d136      	bne.n	8015934 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80158c6:	4b48      	ldr	r3, [pc, #288]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158c8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	43db      	mvns	r3, r3
 80158d0:	4945      	ldr	r1, [pc, #276]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158d2:	4013      	ands	r3, r2
 80158d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80158d8:	4b43      	ldr	r3, [pc, #268]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	43db      	mvns	r3, r3
 80158e2:	4941      	ldr	r1, [pc, #260]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158e4:	4013      	ands	r3, r2
 80158e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80158ea:	4b3f      	ldr	r3, [pc, #252]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	43db      	mvns	r3, r3
 80158f2:	493d      	ldr	r1, [pc, #244]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158f4:	4013      	ands	r3, r2
 80158f6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80158f8:	4b3b      	ldr	r3, [pc, #236]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 80158fa:	685a      	ldr	r2, [r3, #4]
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	43db      	mvns	r3, r3
 8015900:	4939      	ldr	r1, [pc, #228]	; (80159e8 <HAL_GPIO_DeInit+0x1b8>)
 8015902:	4013      	ands	r3, r2
 8015904:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	f003 0303 	and.w	r3, r3, #3
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	220f      	movs	r2, #15
 8015910:	fa02 f303 	lsl.w	r3, r2, r3
 8015914:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015916:	4a2f      	ldr	r2, [pc, #188]	; (80159d4 <HAL_GPIO_DeInit+0x1a4>)
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	089b      	lsrs	r3, r3, #2
 801591c:	3302      	adds	r3, #2
 801591e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	43da      	mvns	r2, r3
 8015926:	482b      	ldr	r0, [pc, #172]	; (80159d4 <HAL_GPIO_DeInit+0x1a4>)
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	089b      	lsrs	r3, r3, #2
 801592c:	400a      	ands	r2, r1
 801592e:	3302      	adds	r3, #2
 8015930:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	2103      	movs	r1, #3
 801593e:	fa01 f303 	lsl.w	r3, r1, r3
 8015942:	431a      	orrs	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	08da      	lsrs	r2, r3, #3
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	3208      	adds	r2, #8
 8015950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	f003 0307 	and.w	r3, r3, #7
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	220f      	movs	r2, #15
 801595e:	fa02 f303 	lsl.w	r3, r2, r3
 8015962:	43db      	mvns	r3, r3
 8015964:	697a      	ldr	r2, [r7, #20]
 8015966:	08d2      	lsrs	r2, r2, #3
 8015968:	4019      	ands	r1, r3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	3208      	adds	r2, #8
 801596e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	68da      	ldr	r2, [r3, #12]
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	005b      	lsls	r3, r3, #1
 801597a:	2103      	movs	r1, #3
 801597c:	fa01 f303 	lsl.w	r3, r1, r3
 8015980:	43db      	mvns	r3, r3
 8015982:	401a      	ands	r2, r3
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	685a      	ldr	r2, [r3, #4]
 801598c:	2101      	movs	r1, #1
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	fa01 f303 	lsl.w	r3, r1, r3
 8015994:	43db      	mvns	r3, r3
 8015996:	401a      	ands	r2, r3
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	689a      	ldr	r2, [r3, #8]
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	005b      	lsls	r3, r3, #1
 80159a4:	2103      	movs	r1, #3
 80159a6:	fa01 f303 	lsl.w	r3, r1, r3
 80159aa:	43db      	mvns	r3, r3
 80159ac:	401a      	ands	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	3301      	adds	r3, #1
 80159b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80159b8:	683a      	ldr	r2, [r7, #0]
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	fa22 f303 	lsr.w	r3, r2, r3
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f47f af3d 	bne.w	8015840 <HAL_GPIO_DeInit+0x10>
  }
}
 80159c6:	bf00      	nop
 80159c8:	bf00      	nop
 80159ca:	371c      	adds	r7, #28
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr
 80159d4:	40010000 	.word	0x40010000
 80159d8:	48000400 	.word	0x48000400
 80159dc:	48000800 	.word	0x48000800
 80159e0:	48000c00 	.word	0x48000c00
 80159e4:	48001000 	.word	0x48001000
 80159e8:	58000800 	.word	0x58000800

080159ec <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b085      	sub	sp, #20
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	460b      	mov	r3, r1
 80159f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	691a      	ldr	r2, [r3, #16]
 80159fc:	887b      	ldrh	r3, [r7, #2]
 80159fe:	4013      	ands	r3, r2
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d002      	beq.n	8015a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015a04:	2301      	movs	r3, #1
 8015a06:	73fb      	strb	r3, [r7, #15]
 8015a08:	e001      	b.n	8015a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3714      	adds	r7, #20
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	460b      	mov	r3, r1
 8015a26:	807b      	strh	r3, [r7, #2]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015a2c:	787b      	ldrb	r3, [r7, #1]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d003      	beq.n	8015a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015a32:	887a      	ldrh	r2, [r7, #2]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015a38:	e002      	b.n	8015a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015a3a:	887a      	ldrh	r2, [r7, #2]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015a40:	bf00      	nop
 8015a42:	370c      	adds	r7, #12
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d101      	bne.n	8015a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	e081      	b.n	8015b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d106      	bne.n	8015a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f000 f8a8 	bl	8015bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2224      	movs	r2, #36	; 0x24
 8015a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	f022 0201 	bic.w	r2, r2, #1
 8015a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	685a      	ldr	r2, [r3, #4]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	689a      	ldr	r2, [r3, #8]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	68db      	ldr	r3, [r3, #12]
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d107      	bne.n	8015ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	689a      	ldr	r2, [r3, #8]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015ac2:	609a      	str	r2, [r3, #8]
 8015ac4:	e006      	b.n	8015ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	689a      	ldr	r2, [r3, #8]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	2b02      	cmp	r3, #2
 8015ada:	d104      	bne.n	8015ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	6812      	ldr	r2, [r2, #0]
 8015af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	68da      	ldr	r2, [r3, #12]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	691a      	ldr	r2, [r3, #16]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	695b      	ldr	r3, [r3, #20]
 8015b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	699b      	ldr	r3, [r3, #24]
 8015b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	430a      	orrs	r2, r1
 8015b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	69d9      	ldr	r1, [r3, #28]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6a1a      	ldr	r2, [r3, #32]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	430a      	orrs	r2, r1
 8015b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	681a      	ldr	r2, [r3, #0]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f042 0201 	orr.w	r2, r2, #1
 8015b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2200      	movs	r2, #0
 8015b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2220      	movs	r2, #32
 8015b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2200      	movs	r2, #0
 8015b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015b60:	2300      	movs	r3, #0
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3708      	adds	r7, #8
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}

08015b6a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015b6a:	b580      	push	{r7, lr}
 8015b6c:	b082      	sub	sp, #8
 8015b6e:	af00      	add	r7, sp, #0
 8015b70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d101      	bne.n	8015b7c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015b78:	2301      	movs	r3, #1
 8015b7a:	e021      	b.n	8015bc0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2224      	movs	r2, #36	; 0x24
 8015b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	f022 0201 	bic.w	r2, r2, #1
 8015b92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f000 f821 	bl	8015bdc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015bbe:	2300      	movs	r3, #0
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3708      	adds	r7, #8
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}

08015bc8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015bd0:	bf00      	nop
 8015bd2:	370c      	adds	r7, #12
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bda:	4770      	bx	lr

08015bdc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015be4:	bf00      	nop
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b088      	sub	sp, #32
 8015bf4:	af02      	add	r7, sp, #8
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	607a      	str	r2, [r7, #4]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	460b      	mov	r3, r1
 8015bfe:	817b      	strh	r3, [r7, #10]
 8015c00:	4613      	mov	r3, r2
 8015c02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	2b20      	cmp	r3, #32
 8015c0e:	f040 80da 	bne.w	8015dc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015c18:	2b01      	cmp	r3, #1
 8015c1a:	d101      	bne.n	8015c20 <HAL_I2C_Master_Transmit+0x30>
 8015c1c:	2302      	movs	r3, #2
 8015c1e:	e0d3      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	2201      	movs	r2, #1
 8015c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015c28:	f7ff fb76 	bl	8015318 <HAL_GetTick>
 8015c2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	9300      	str	r3, [sp, #0]
 8015c32:	2319      	movs	r3, #25
 8015c34:	2201      	movs	r2, #1
 8015c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015c3a:	68f8      	ldr	r0, [r7, #12]
 8015c3c:	f000 fa00 	bl	8016040 <I2C_WaitOnFlagUntilTimeout>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d001      	beq.n	8015c4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015c46:	2301      	movs	r3, #1
 8015c48:	e0be      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	2221      	movs	r2, #33	; 0x21
 8015c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2210      	movs	r2, #16
 8015c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	687a      	ldr	r2, [r7, #4]
 8015c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	893a      	ldrh	r2, [r7, #8]
 8015c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	2bff      	cmp	r3, #255	; 0xff
 8015c7a:	d90e      	bls.n	8015c9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	22ff      	movs	r2, #255	; 0xff
 8015c80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c86:	b2da      	uxtb	r2, r3
 8015c88:	8979      	ldrh	r1, [r7, #10]
 8015c8a:	4b51      	ldr	r3, [pc, #324]	; (8015dd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f000 fbf6 	bl	8016484 <I2C_TransferConfig>
 8015c98:	e06c      	b.n	8015d74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c9e:	b29a      	uxth	r2, r3
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ca8:	b2da      	uxtb	r2, r3
 8015caa:	8979      	ldrh	r1, [r7, #10]
 8015cac:	4b48      	ldr	r3, [pc, #288]	; (8015dd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f000 fbe5 	bl	8016484 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015cba:	e05b      	b.n	8015d74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015cbc:	697a      	ldr	r2, [r7, #20]
 8015cbe:	6a39      	ldr	r1, [r7, #32]
 8015cc0:	68f8      	ldr	r0, [r7, #12]
 8015cc2:	f000 f9fd 	bl	80160c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d001      	beq.n	8015cd0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e07b      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd4:	781a      	ldrb	r2, [r3, #0]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce0:	1c5a      	adds	r2, r3, #1
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cea:	b29b      	uxth	r3, r3
 8015cec:	3b01      	subs	r3, #1
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cf8:	3b01      	subs	r3, #1
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d034      	beq.n	8015d74 <HAL_I2C_Master_Transmit+0x184>
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d130      	bne.n	8015d74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	6a3b      	ldr	r3, [r7, #32]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	2180      	movs	r1, #128	; 0x80
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	f000 f98f 	bl	8016040 <I2C_WaitOnFlagUntilTimeout>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d001      	beq.n	8015d2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015d28:	2301      	movs	r3, #1
 8015d2a:	e04d      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d30:	b29b      	uxth	r3, r3
 8015d32:	2bff      	cmp	r3, #255	; 0xff
 8015d34:	d90e      	bls.n	8015d54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	22ff      	movs	r2, #255	; 0xff
 8015d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d40:	b2da      	uxtb	r2, r3
 8015d42:	8979      	ldrh	r1, [r7, #10]
 8015d44:	2300      	movs	r3, #0
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f000 fb99 	bl	8016484 <I2C_TransferConfig>
 8015d52:	e00f      	b.n	8015d74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d58:	b29a      	uxth	r2, r3
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d62:	b2da      	uxtb	r2, r3
 8015d64:	8979      	ldrh	r1, [r7, #10]
 8015d66:	2300      	movs	r3, #0
 8015d68:	9300      	str	r3, [sp, #0]
 8015d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015d6e:	68f8      	ldr	r0, [r7, #12]
 8015d70:	f000 fb88 	bl	8016484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d19e      	bne.n	8015cbc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d7e:	697a      	ldr	r2, [r7, #20]
 8015d80:	6a39      	ldr	r1, [r7, #32]
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f000 f9dc 	bl	8016140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d001      	beq.n	8015d92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	e01a      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2220      	movs	r2, #32
 8015d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	6859      	ldr	r1, [r3, #4]
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	4b0b      	ldr	r3, [pc, #44]	; (8015dd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8015da6:	400b      	ands	r3, r1
 8015da8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2220      	movs	r2, #32
 8015dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	e000      	b.n	8015dc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015dc6:	2302      	movs	r3, #2
  }
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3718      	adds	r7, #24
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	80002000 	.word	0x80002000
 8015dd4:	fe00e800 	.word	0xfe00e800

08015dd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b088      	sub	sp, #32
 8015ddc:	af02      	add	r7, sp, #8
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	607a      	str	r2, [r7, #4]
 8015de2:	461a      	mov	r2, r3
 8015de4:	460b      	mov	r3, r1
 8015de6:	817b      	strh	r3, [r7, #10]
 8015de8:	4613      	mov	r3, r2
 8015dea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	2b20      	cmp	r3, #32
 8015df6:	f040 80db 	bne.w	8015fb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	d101      	bne.n	8015e08 <HAL_I2C_Master_Receive+0x30>
 8015e04:	2302      	movs	r3, #2
 8015e06:	e0d4      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015e10:	f7ff fa82 	bl	8015318 <HAL_GetTick>
 8015e14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	2319      	movs	r3, #25
 8015e1c:	2201      	movs	r2, #1
 8015e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	f000 f90c 	bl	8016040 <I2C_WaitOnFlagUntilTimeout>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d001      	beq.n	8015e32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e0bf      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	2222      	movs	r2, #34	; 0x22
 8015e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	2210      	movs	r2, #16
 8015e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2200      	movs	r2, #0
 8015e46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	687a      	ldr	r2, [r7, #4]
 8015e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	893a      	ldrh	r2, [r7, #8]
 8015e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2200      	movs	r2, #0
 8015e58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	2bff      	cmp	r3, #255	; 0xff
 8015e62:	d90e      	bls.n	8015e82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	22ff      	movs	r2, #255	; 0xff
 8015e68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e6e:	b2da      	uxtb	r2, r3
 8015e70:	8979      	ldrh	r1, [r7, #10]
 8015e72:	4b52      	ldr	r3, [pc, #328]	; (8015fbc <HAL_I2C_Master_Receive+0x1e4>)
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e7a:	68f8      	ldr	r0, [r7, #12]
 8015e7c:	f000 fb02 	bl	8016484 <I2C_TransferConfig>
 8015e80:	e06d      	b.n	8015f5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e86:	b29a      	uxth	r2, r3
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e90:	b2da      	uxtb	r2, r3
 8015e92:	8979      	ldrh	r1, [r7, #10]
 8015e94:	4b49      	ldr	r3, [pc, #292]	; (8015fbc <HAL_I2C_Master_Receive+0x1e4>)
 8015e96:	9300      	str	r3, [sp, #0]
 8015e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f000 faf1 	bl	8016484 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015ea2:	e05c      	b.n	8015f5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015ea4:	697a      	ldr	r2, [r7, #20]
 8015ea6:	6a39      	ldr	r1, [r7, #32]
 8015ea8:	68f8      	ldr	r0, [r7, #12]
 8015eaa:	f000 f985 	bl	80161b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d001      	beq.n	8015eb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e07c      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec2:	b2d2      	uxtb	r2, r2
 8015ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eca:	1c5a      	adds	r2, r3, #1
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	3b01      	subs	r3, #1
 8015ee4:	b29a      	uxth	r2, r3
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d034      	beq.n	8015f5e <HAL_I2C_Master_Receive+0x186>
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d130      	bne.n	8015f5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	6a3b      	ldr	r3, [r7, #32]
 8015f02:	2200      	movs	r2, #0
 8015f04:	2180      	movs	r1, #128	; 0x80
 8015f06:	68f8      	ldr	r0, [r7, #12]
 8015f08:	f000 f89a 	bl	8016040 <I2C_WaitOnFlagUntilTimeout>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d001      	beq.n	8015f16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015f12:	2301      	movs	r3, #1
 8015f14:	e04d      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	2bff      	cmp	r3, #255	; 0xff
 8015f1e:	d90e      	bls.n	8015f3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	22ff      	movs	r2, #255	; 0xff
 8015f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f2a:	b2da      	uxtb	r2, r3
 8015f2c:	8979      	ldrh	r1, [r7, #10]
 8015f2e:	2300      	movs	r3, #0
 8015f30:	9300      	str	r3, [sp, #0]
 8015f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015f36:	68f8      	ldr	r0, [r7, #12]
 8015f38:	f000 faa4 	bl	8016484 <I2C_TransferConfig>
 8015f3c:	e00f      	b.n	8015f5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f4c:	b2da      	uxtb	r2, r3
 8015f4e:	8979      	ldrh	r1, [r7, #10]
 8015f50:	2300      	movs	r3, #0
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015f58:	68f8      	ldr	r0, [r7, #12]
 8015f5a:	f000 fa93 	bl	8016484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d19d      	bne.n	8015ea4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f68:	697a      	ldr	r2, [r7, #20]
 8015f6a:	6a39      	ldr	r1, [r7, #32]
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f000 f8e7 	bl	8016140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015f72:	4603      	mov	r3, r0
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d001      	beq.n	8015f7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	e01a      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2220      	movs	r2, #32
 8015f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	6859      	ldr	r1, [r3, #4]
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	4b0c      	ldr	r3, [pc, #48]	; (8015fc0 <HAL_I2C_Master_Receive+0x1e8>)
 8015f90:	400b      	ands	r3, r1
 8015f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2220      	movs	r2, #32
 8015f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015fac:	2300      	movs	r3, #0
 8015fae:	e000      	b.n	8015fb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015fb0:	2302      	movs	r3, #2
  }
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3718      	adds	r7, #24
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	80002400 	.word	0x80002400
 8015fc0:	fe00e800 	.word	0xfe00e800

08015fc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015fd2:	b2db      	uxtb	r3, r3
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	370c      	adds	r7, #12
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr

08015fe0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	370c      	adds	r7, #12
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b083      	sub	sp, #12
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	699b      	ldr	r3, [r3, #24]
 8016006:	f003 0302 	and.w	r3, r3, #2
 801600a:	2b02      	cmp	r3, #2
 801600c:	d103      	bne.n	8016016 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	2200      	movs	r2, #0
 8016014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	699b      	ldr	r3, [r3, #24]
 801601c:	f003 0301 	and.w	r3, r3, #1
 8016020:	2b01      	cmp	r3, #1
 8016022:	d007      	beq.n	8016034 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	699a      	ldr	r2, [r3, #24]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	f042 0201 	orr.w	r2, r2, #1
 8016032:	619a      	str	r2, [r3, #24]
  }
}
 8016034:	bf00      	nop
 8016036:	370c      	adds	r7, #12
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr

08016040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	603b      	str	r3, [r7, #0]
 801604c:	4613      	mov	r3, r2
 801604e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016050:	e022      	b.n	8016098 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016058:	d01e      	beq.n	8016098 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801605a:	f7ff f95d 	bl	8015318 <HAL_GetTick>
 801605e:	4602      	mov	r2, r0
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	1ad3      	subs	r3, r2, r3
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	429a      	cmp	r2, r3
 8016068:	d302      	bcc.n	8016070 <I2C_WaitOnFlagUntilTimeout+0x30>
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d113      	bne.n	8016098 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016074:	f043 0220 	orr.w	r2, r3, #32
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	2220      	movs	r2, #32
 8016080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2200      	movs	r2, #0
 8016088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2200      	movs	r2, #0
 8016090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8016094:	2301      	movs	r3, #1
 8016096:	e00f      	b.n	80160b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	699a      	ldr	r2, [r3, #24]
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	4013      	ands	r3, r2
 80160a2:	68ba      	ldr	r2, [r7, #8]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	bf0c      	ite	eq
 80160a8:	2301      	moveq	r3, #1
 80160aa:	2300      	movne	r3, #0
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	461a      	mov	r2, r3
 80160b0:	79fb      	ldrb	r3, [r7, #7]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d0cd      	beq.n	8016052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80160cc:	e02c      	b.n	8016128 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	68b9      	ldr	r1, [r7, #8]
 80160d2:	68f8      	ldr	r0, [r7, #12]
 80160d4:	f000 f8ea 	bl	80162ac <I2C_IsErrorOccurred>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d001      	beq.n	80160e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160de:	2301      	movs	r3, #1
 80160e0:	e02a      	b.n	8016138 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e8:	d01e      	beq.n	8016128 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80160ea:	f7ff f915 	bl	8015318 <HAL_GetTick>
 80160ee:	4602      	mov	r2, r0
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	1ad3      	subs	r3, r2, r3
 80160f4:	68ba      	ldr	r2, [r7, #8]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d302      	bcc.n	8016100 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d113      	bne.n	8016128 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016104:	f043 0220 	orr.w	r2, r3, #32
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2220      	movs	r2, #32
 8016110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2200      	movs	r2, #0
 8016118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2200      	movs	r2, #0
 8016120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016124:	2301      	movs	r3, #1
 8016126:	e007      	b.n	8016138 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	699b      	ldr	r3, [r3, #24]
 801612e:	f003 0302 	and.w	r3, r3, #2
 8016132:	2b02      	cmp	r3, #2
 8016134:	d1cb      	bne.n	80160ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016136:	2300      	movs	r3, #0
}
 8016138:	4618      	mov	r0, r3
 801613a:	3710      	adds	r7, #16
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}

08016140 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	60f8      	str	r0, [r7, #12]
 8016148:	60b9      	str	r1, [r7, #8]
 801614a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801614c:	e028      	b.n	80161a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	68b9      	ldr	r1, [r7, #8]
 8016152:	68f8      	ldr	r0, [r7, #12]
 8016154:	f000 f8aa 	bl	80162ac <I2C_IsErrorOccurred>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801615e:	2301      	movs	r3, #1
 8016160:	e026      	b.n	80161b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016162:	f7ff f8d9 	bl	8015318 <HAL_GetTick>
 8016166:	4602      	mov	r2, r0
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	68ba      	ldr	r2, [r7, #8]
 801616e:	429a      	cmp	r2, r3
 8016170:	d302      	bcc.n	8016178 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d113      	bne.n	80161a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801617c:	f043 0220 	orr.w	r2, r3, #32
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2220      	movs	r2, #32
 8016188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2200      	movs	r2, #0
 8016190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2200      	movs	r2, #0
 8016198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801619c:	2301      	movs	r3, #1
 801619e:	e007      	b.n	80161b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	699b      	ldr	r3, [r3, #24]
 80161a6:	f003 0320 	and.w	r3, r3, #32
 80161aa:	2b20      	cmp	r3, #32
 80161ac:	d1cf      	bne.n	801614e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80161ae:	2300      	movs	r3, #0
}
 80161b0:	4618      	mov	r0, r3
 80161b2:	3710      	adds	r7, #16
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd80      	pop	{r7, pc}

080161b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	60f8      	str	r0, [r7, #12]
 80161c0:	60b9      	str	r1, [r7, #8]
 80161c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80161c4:	e064      	b.n	8016290 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	68b9      	ldr	r1, [r7, #8]
 80161ca:	68f8      	ldr	r0, [r7, #12]
 80161cc:	f000 f86e 	bl	80162ac <I2C_IsErrorOccurred>
 80161d0:	4603      	mov	r3, r0
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d001      	beq.n	80161da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80161d6:	2301      	movs	r3, #1
 80161d8:	e062      	b.n	80162a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	699b      	ldr	r3, [r3, #24]
 80161e0:	f003 0320 	and.w	r3, r3, #32
 80161e4:	2b20      	cmp	r3, #32
 80161e6:	d138      	bne.n	801625a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	699b      	ldr	r3, [r3, #24]
 80161ee:	f003 0304 	and.w	r3, r3, #4
 80161f2:	2b04      	cmp	r3, #4
 80161f4:	d105      	bne.n	8016202 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80161fe:	2300      	movs	r3, #0
 8016200:	e04e      	b.n	80162a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	699b      	ldr	r3, [r3, #24]
 8016208:	f003 0310 	and.w	r3, r3, #16
 801620c:	2b10      	cmp	r3, #16
 801620e:	d107      	bne.n	8016220 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2210      	movs	r2, #16
 8016216:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2204      	movs	r2, #4
 801621c:	645a      	str	r2, [r3, #68]	; 0x44
 801621e:	e002      	b.n	8016226 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2200      	movs	r2, #0
 8016224:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	2220      	movs	r2, #32
 801622c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	6859      	ldr	r1, [r3, #4]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	4b1b      	ldr	r3, [pc, #108]	; (80162a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 801623a:	400b      	ands	r3, r1
 801623c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2220      	movs	r2, #32
 8016242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2200      	movs	r2, #0
 801624a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2200      	movs	r2, #0
 8016252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016256:	2301      	movs	r3, #1
 8016258:	e022      	b.n	80162a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801625a:	f7ff f85d 	bl	8015318 <HAL_GetTick>
 801625e:	4602      	mov	r2, r0
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	68ba      	ldr	r2, [r7, #8]
 8016266:	429a      	cmp	r2, r3
 8016268:	d302      	bcc.n	8016270 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d10f      	bne.n	8016290 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016274:	f043 0220 	orr.w	r2, r3, #32
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2220      	movs	r2, #32
 8016280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2200      	movs	r2, #0
 8016288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	e007      	b.n	80162a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	699b      	ldr	r3, [r3, #24]
 8016296:	f003 0304 	and.w	r3, r3, #4
 801629a:	2b04      	cmp	r3, #4
 801629c:	d193      	bne.n	80161c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801629e:	2300      	movs	r3, #0
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3710      	adds	r7, #16
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	fe00e800 	.word	0xfe00e800

080162ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162b8:	2300      	movs	r3, #0
 80162ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	699b      	ldr	r3, [r3, #24]
 80162c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80162ce:	69bb      	ldr	r3, [r7, #24]
 80162d0:	f003 0310 	and.w	r3, r3, #16
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d075      	beq.n	80163c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2210      	movs	r2, #16
 80162de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80162e0:	e056      	b.n	8016390 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162e8:	d052      	beq.n	8016390 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80162ea:	f7ff f815 	bl	8015318 <HAL_GetTick>
 80162ee:	4602      	mov	r2, r0
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	1ad3      	subs	r3, r2, r3
 80162f4:	68ba      	ldr	r2, [r7, #8]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d302      	bcc.n	8016300 <I2C_IsErrorOccurred+0x54>
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d147      	bne.n	8016390 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801630a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016312:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	699b      	ldr	r3, [r3, #24]
 801631a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801631e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016322:	d12e      	bne.n	8016382 <I2C_IsErrorOccurred+0xd6>
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801632a:	d02a      	beq.n	8016382 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 801632c:	7cfb      	ldrb	r3, [r7, #19]
 801632e:	2b20      	cmp	r3, #32
 8016330:	d027      	beq.n	8016382 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	685a      	ldr	r2, [r3, #4]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016340:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016342:	f7fe ffe9 	bl	8015318 <HAL_GetTick>
 8016346:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016348:	e01b      	b.n	8016382 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801634a:	f7fe ffe5 	bl	8015318 <HAL_GetTick>
 801634e:	4602      	mov	r2, r0
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	1ad3      	subs	r3, r2, r3
 8016354:	2b19      	cmp	r3, #25
 8016356:	d914      	bls.n	8016382 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801635c:	f043 0220 	orr.w	r2, r3, #32
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2220      	movs	r2, #32
 8016368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	2200      	movs	r2, #0
 8016370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2200      	movs	r2, #0
 8016378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 801637c:	2301      	movs	r3, #1
 801637e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	699b      	ldr	r3, [r3, #24]
 8016388:	f003 0320 	and.w	r3, r3, #32
 801638c:	2b20      	cmp	r3, #32
 801638e:	d1dc      	bne.n	801634a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	699b      	ldr	r3, [r3, #24]
 8016396:	f003 0320 	and.w	r3, r3, #32
 801639a:	2b20      	cmp	r3, #32
 801639c:	d003      	beq.n	80163a6 <I2C_IsErrorOccurred+0xfa>
 801639e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d09d      	beq.n	80162e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80163a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d103      	bne.n	80163b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2220      	movs	r2, #32
 80163b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80163b6:	6a3b      	ldr	r3, [r7, #32]
 80163b8:	f043 0304 	orr.w	r3, r3, #4
 80163bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80163be:	2301      	movs	r3, #1
 80163c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	699b      	ldr	r3, [r3, #24]
 80163ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00b      	beq.n	80163ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	f043 0301 	orr.w	r3, r3, #1
 80163dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80163ee:	69bb      	ldr	r3, [r7, #24]
 80163f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00b      	beq.n	8016410 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80163f8:	6a3b      	ldr	r3, [r7, #32]
 80163fa:	f043 0308 	orr.w	r3, r3, #8
 80163fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801640a:	2301      	movs	r3, #1
 801640c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016410:	69bb      	ldr	r3, [r7, #24]
 8016412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016416:	2b00      	cmp	r3, #0
 8016418:	d00b      	beq.n	8016432 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801641a:	6a3b      	ldr	r3, [r7, #32]
 801641c:	f043 0302 	orr.w	r3, r3, #2
 8016420:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f44f 7200 	mov.w	r2, #512	; 0x200
 801642a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801642c:	2301      	movs	r3, #1
 801642e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016436:	2b00      	cmp	r3, #0
 8016438:	d01c      	beq.n	8016474 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801643a:	68f8      	ldr	r0, [r7, #12]
 801643c:	f7ff fddc 	bl	8015ff8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	6859      	ldr	r1, [r3, #4]
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	681a      	ldr	r2, [r3, #0]
 801644a:	4b0d      	ldr	r3, [pc, #52]	; (8016480 <I2C_IsErrorOccurred+0x1d4>)
 801644c:	400b      	ands	r3, r1
 801644e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016454:	6a3b      	ldr	r3, [r7, #32]
 8016456:	431a      	orrs	r2, r3
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2220      	movs	r2, #32
 8016460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2200      	movs	r2, #0
 8016468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2200      	movs	r2, #0
 8016470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016478:	4618      	mov	r0, r3
 801647a:	3728      	adds	r7, #40	; 0x28
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	fe00e800 	.word	0xfe00e800

08016484 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016484:	b480      	push	{r7}
 8016486:	b087      	sub	sp, #28
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	607b      	str	r3, [r7, #4]
 801648e:	460b      	mov	r3, r1
 8016490:	817b      	strh	r3, [r7, #10]
 8016492:	4613      	mov	r3, r2
 8016494:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016496:	897b      	ldrh	r3, [r7, #10]
 8016498:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801649c:	7a7b      	ldrb	r3, [r7, #9]
 801649e:	041b      	lsls	r3, r3, #16
 80164a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164aa:	6a3b      	ldr	r3, [r7, #32]
 80164ac:	4313      	orrs	r3, r2
 80164ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	685a      	ldr	r2, [r3, #4]
 80164ba:	6a3b      	ldr	r3, [r7, #32]
 80164bc:	0d5b      	lsrs	r3, r3, #21
 80164be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80164c2:	4b08      	ldr	r3, [pc, #32]	; (80164e4 <I2C_TransferConfig+0x60>)
 80164c4:	430b      	orrs	r3, r1
 80164c6:	43db      	mvns	r3, r3
 80164c8:	ea02 0103 	and.w	r1, r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	430a      	orrs	r2, r1
 80164d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80164d6:	bf00      	nop
 80164d8:	371c      	adds	r7, #28
 80164da:	46bd      	mov	sp, r7
 80164dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e0:	4770      	bx	lr
 80164e2:	bf00      	nop
 80164e4:	03ff63ff 	.word	0x03ff63ff

080164e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80164e8:	b480      	push	{r7}
 80164ea:	b083      	sub	sp, #12
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
 80164f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	2b20      	cmp	r3, #32
 80164fc:	d138      	bne.n	8016570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016504:	2b01      	cmp	r3, #1
 8016506:	d101      	bne.n	801650c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016508:	2302      	movs	r3, #2
 801650a:	e032      	b.n	8016572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2201      	movs	r2, #1
 8016510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2224      	movs	r2, #36	; 0x24
 8016518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	681a      	ldr	r2, [r3, #0]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f022 0201 	bic.w	r2, r2, #1
 801652a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801653a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	6819      	ldr	r1, [r3, #0]
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	683a      	ldr	r2, [r7, #0]
 8016548:	430a      	orrs	r2, r1
 801654a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f042 0201 	orr.w	r2, r2, #1
 801655a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2220      	movs	r2, #32
 8016560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2200      	movs	r2, #0
 8016568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801656c:	2300      	movs	r3, #0
 801656e:	e000      	b.n	8016572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016570:	2302      	movs	r3, #2
  }
}
 8016572:	4618      	mov	r0, r3
 8016574:	370c      	adds	r7, #12
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr

0801657e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801657e:	b480      	push	{r7}
 8016580:	b085      	sub	sp, #20
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
 8016586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801658e:	b2db      	uxtb	r3, r3
 8016590:	2b20      	cmp	r3, #32
 8016592:	d139      	bne.n	8016608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801659a:	2b01      	cmp	r3, #1
 801659c:	d101      	bne.n	80165a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801659e:	2302      	movs	r3, #2
 80165a0:	e033      	b.n	801660a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2201      	movs	r2, #1
 80165a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2224      	movs	r2, #36	; 0x24
 80165ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	f022 0201 	bic.w	r2, r2, #1
 80165c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80165d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	021b      	lsls	r3, r3, #8
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	4313      	orrs	r3, r2
 80165da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	68fa      	ldr	r2, [r7, #12]
 80165e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f042 0201 	orr.w	r2, r2, #1
 80165f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2220      	movs	r2, #32
 80165f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016604:	2300      	movs	r3, #0
 8016606:	e000      	b.n	801660a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016608:	2302      	movs	r3, #2
  }
}
 801660a:	4618      	mov	r0, r3
 801660c:	3714      	adds	r7, #20
 801660e:	46bd      	mov	sp, r7
 8016610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016614:	4770      	bx	lr

08016616 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016618:	b08b      	sub	sp, #44	; 0x2c
 801661a:	af06      	add	r7, sp, #24
 801661c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d101      	bne.n	8016628 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016624:	2301      	movs	r3, #1
 8016626:	e0cb      	b.n	80167c0 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801662e:	b2db      	uxtb	r3, r3
 8016630:	2b00      	cmp	r3, #0
 8016632:	d106      	bne.n	8016642 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2200      	movs	r2, #0
 8016638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7ea fb09 	bl	8000c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2203      	movs	r2, #3
 8016646:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4618      	mov	r0, r3
 8016650:	f002 fed0 	bl	80193f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016654:	2300      	movs	r3, #0
 8016656:	73fb      	strb	r3, [r7, #15]
 8016658:	e040      	b.n	80166dc <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801665a:	7bfb      	ldrb	r3, [r7, #15]
 801665c:	6879      	ldr	r1, [r7, #4]
 801665e:	1c5a      	adds	r2, r3, #1
 8016660:	4613      	mov	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	4413      	add	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	440b      	add	r3, r1
 801666a:	3301      	adds	r3, #1
 801666c:	2201      	movs	r2, #1
 801666e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016670:	7bfb      	ldrb	r3, [r7, #15]
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	1c5a      	adds	r2, r3, #1
 8016676:	4613      	mov	r3, r2
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	7bfa      	ldrb	r2, [r7, #15]
 8016682:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016684:	7bfb      	ldrb	r3, [r7, #15]
 8016686:	6879      	ldr	r1, [r7, #4]
 8016688:	1c5a      	adds	r2, r3, #1
 801668a:	4613      	mov	r3, r2
 801668c:	009b      	lsls	r3, r3, #2
 801668e:	4413      	add	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	440b      	add	r3, r1
 8016694:	3303      	adds	r3, #3
 8016696:	2200      	movs	r2, #0
 8016698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801669a:	7bfa      	ldrb	r2, [r7, #15]
 801669c:	6879      	ldr	r1, [r7, #4]
 801669e:	4613      	mov	r3, r2
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	4413      	add	r3, r2
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	440b      	add	r3, r1
 80166a8:	3338      	adds	r3, #56	; 0x38
 80166aa:	2200      	movs	r2, #0
 80166ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80166ae:	7bfa      	ldrb	r2, [r7, #15]
 80166b0:	6879      	ldr	r1, [r7, #4]
 80166b2:	4613      	mov	r3, r2
 80166b4:	009b      	lsls	r3, r3, #2
 80166b6:	4413      	add	r3, r2
 80166b8:	00db      	lsls	r3, r3, #3
 80166ba:	440b      	add	r3, r1
 80166bc:	333c      	adds	r3, #60	; 0x3c
 80166be:	2200      	movs	r2, #0
 80166c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80166c2:	7bfa      	ldrb	r2, [r7, #15]
 80166c4:	6879      	ldr	r1, [r7, #4]
 80166c6:	4613      	mov	r3, r2
 80166c8:	009b      	lsls	r3, r3, #2
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	440b      	add	r3, r1
 80166d0:	3340      	adds	r3, #64	; 0x40
 80166d2:	2200      	movs	r2, #0
 80166d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80166d6:	7bfb      	ldrb	r3, [r7, #15]
 80166d8:	3301      	adds	r3, #1
 80166da:	73fb      	strb	r3, [r7, #15]
 80166dc:	7bfa      	ldrb	r2, [r7, #15]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d3b9      	bcc.n	801665a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80166e6:	2300      	movs	r3, #0
 80166e8:	73fb      	strb	r3, [r7, #15]
 80166ea:	e044      	b.n	8016776 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80166ec:	7bfa      	ldrb	r2, [r7, #15]
 80166ee:	6879      	ldr	r1, [r7, #4]
 80166f0:	4613      	mov	r3, r2
 80166f2:	009b      	lsls	r3, r3, #2
 80166f4:	4413      	add	r3, r2
 80166f6:	00db      	lsls	r3, r3, #3
 80166f8:	440b      	add	r3, r1
 80166fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80166fe:	2200      	movs	r2, #0
 8016700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016702:	7bfa      	ldrb	r2, [r7, #15]
 8016704:	6879      	ldr	r1, [r7, #4]
 8016706:	4613      	mov	r3, r2
 8016708:	009b      	lsls	r3, r3, #2
 801670a:	4413      	add	r3, r2
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	440b      	add	r3, r1
 8016710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016714:	7bfa      	ldrb	r2, [r7, #15]
 8016716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016718:	7bfa      	ldrb	r2, [r7, #15]
 801671a:	6879      	ldr	r1, [r7, #4]
 801671c:	4613      	mov	r3, r2
 801671e:	009b      	lsls	r3, r3, #2
 8016720:	4413      	add	r3, r2
 8016722:	00db      	lsls	r3, r3, #3
 8016724:	440b      	add	r3, r1
 8016726:	f203 136b 	addw	r3, r3, #363	; 0x16b
 801672a:	2200      	movs	r2, #0
 801672c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801672e:	7bfa      	ldrb	r2, [r7, #15]
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	4613      	mov	r3, r2
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	4413      	add	r3, r2
 8016738:	00db      	lsls	r3, r3, #3
 801673a:	440b      	add	r3, r1
 801673c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016740:	2200      	movs	r2, #0
 8016742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016744:	7bfa      	ldrb	r2, [r7, #15]
 8016746:	6879      	ldr	r1, [r7, #4]
 8016748:	4613      	mov	r3, r2
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	4413      	add	r3, r2
 801674e:	00db      	lsls	r3, r3, #3
 8016750:	440b      	add	r3, r1
 8016752:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016756:	2200      	movs	r2, #0
 8016758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801675a:	7bfa      	ldrb	r2, [r7, #15]
 801675c:	6879      	ldr	r1, [r7, #4]
 801675e:	4613      	mov	r3, r2
 8016760:	009b      	lsls	r3, r3, #2
 8016762:	4413      	add	r3, r2
 8016764:	00db      	lsls	r3, r3, #3
 8016766:	440b      	add	r3, r1
 8016768:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801676c:	2200      	movs	r2, #0
 801676e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016770:	7bfb      	ldrb	r3, [r7, #15]
 8016772:	3301      	adds	r3, #1
 8016774:	73fb      	strb	r3, [r7, #15]
 8016776:	7bfa      	ldrb	r2, [r7, #15]
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	429a      	cmp	r2, r3
 801677e:	d3b5      	bcc.n	80166ec <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	603b      	str	r3, [r7, #0]
 8016786:	687e      	ldr	r6, [r7, #4]
 8016788:	466d      	mov	r5, sp
 801678a:	f106 0410 	add.w	r4, r6, #16
 801678e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016792:	6823      	ldr	r3, [r4, #0]
 8016794:	602b      	str	r3, [r5, #0]
 8016796:	1d33      	adds	r3, r6, #4
 8016798:	cb0e      	ldmia	r3, {r1, r2, r3}
 801679a:	6838      	ldr	r0, [r7, #0]
 801679c:	f002 fe45 	bl	801942a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2201      	movs	r2, #1
 80167ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	69db      	ldr	r3, [r3, #28]
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d102      	bne.n	80167be <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 f805 	bl	80167c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80167be:	2300      	movs	r3, #0
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3714      	adds	r7, #20
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2201      	movs	r2, #1
 80167da:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2200      	movs	r2, #0
 80167e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	f043 0301 	orr.w	r3, r3, #1
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016800:	b29b      	uxth	r3, r3
 8016802:	f043 0302 	orr.w	r3, r3, #2
 8016806:	b29a      	uxth	r2, r3
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801680e:	2300      	movs	r3, #0
}
 8016810:	4618      	mov	r0, r3
 8016812:	3714      	adds	r7, #20
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801681c:	b480      	push	{r7}
 801681e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016820:	4b05      	ldr	r3, [pc, #20]	; (8016838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4a04      	ldr	r2, [pc, #16]	; (8016838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801682a:	6013      	str	r3, [r2, #0]
}
 801682c:	bf00      	nop
 801682e:	46bd      	mov	sp, r7
 8016830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016834:	4770      	bx	lr
 8016836:	bf00      	nop
 8016838:	58000400 	.word	0x58000400

0801683c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801683c:	b480      	push	{r7}
 801683e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8016840:	4b04      	ldr	r3, [pc, #16]	; (8016854 <HAL_PWREx_GetVoltageRange+0x18>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016848:	4618      	mov	r0, r3
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	58000400 	.word	0x58000400

08016858 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016858:	b480      	push	{r7}
 801685a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801685c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801686a:	d101      	bne.n	8016870 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801686c:	2301      	movs	r3, #1
 801686e:	e000      	b.n	8016872 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8016870:	2300      	movs	r3, #0
}
 8016872:	4618      	mov	r0, r3
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr

0801687c <LL_RCC_HSE_Enable>:
{
 801687c:	b480      	push	{r7}
 801687e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801688a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801688e:	6013      	str	r3, [r2, #0]
}
 8016890:	bf00      	nop
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr

0801689a <LL_RCC_HSE_Disable>:
{
 801689a:	b480      	push	{r7}
 801689c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801689e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80168ac:	6013      	str	r3, [r2, #0]
}
 80168ae:	bf00      	nop
 80168b0:	46bd      	mov	sp, r7
 80168b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b6:	4770      	bx	lr

080168b8 <LL_RCC_HSE_IsReady>:
{
 80168b8:	b480      	push	{r7}
 80168ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80168bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80168c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80168ca:	d101      	bne.n	80168d0 <LL_RCC_HSE_IsReady+0x18>
 80168cc:	2301      	movs	r3, #1
 80168ce:	e000      	b.n	80168d2 <LL_RCC_HSE_IsReady+0x1a>
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <LL_RCC_HSI_Enable>:
{
 80168dc:	b480      	push	{r7}
 80168de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80168e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80168ee:	6013      	str	r3, [r2, #0]
}
 80168f0:	bf00      	nop
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr

080168fa <LL_RCC_HSI_Disable>:
{
 80168fa:	b480      	push	{r7}
 80168fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80168fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801690c:	6013      	str	r3, [r2, #0]
}
 801690e:	bf00      	nop
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <LL_RCC_HSI_IsReady>:
{
 8016918:	b480      	push	{r7}
 801691a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801691c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801692a:	d101      	bne.n	8016930 <LL_RCC_HSI_IsReady+0x18>
 801692c:	2301      	movs	r3, #1
 801692e:	e000      	b.n	8016932 <LL_RCC_HSI_IsReady+0x1a>
 8016930:	2300      	movs	r3, #0
}
 8016932:	4618      	mov	r0, r3
 8016934:	46bd      	mov	sp, r7
 8016936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693a:	4770      	bx	lr

0801693c <LL_RCC_HSI_SetCalibTrimming>:
{
 801693c:	b480      	push	{r7}
 801693e:	b083      	sub	sp, #12
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	061b      	lsls	r3, r3, #24
 8016952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016956:	4313      	orrs	r3, r2
 8016958:	604b      	str	r3, [r1, #4]
}
 801695a:	bf00      	nop
 801695c:	370c      	adds	r7, #12
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr

08016966 <LL_RCC_HSI48_Enable>:
{
 8016966:	b480      	push	{r7}
 8016968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801696a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801696e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016976:	f043 0301 	orr.w	r3, r3, #1
 801697a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801697e:	bf00      	nop
 8016980:	46bd      	mov	sp, r7
 8016982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016986:	4770      	bx	lr

08016988 <LL_RCC_HSI48_Disable>:
{
 8016988:	b480      	push	{r7}
 801698a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801698c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016998:	f023 0301 	bic.w	r3, r3, #1
 801699c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80169a0:	bf00      	nop
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr

080169aa <LL_RCC_HSI48_IsReady>:
{
 80169aa:	b480      	push	{r7}
 80169ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80169ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80169b6:	f003 0302 	and.w	r3, r3, #2
 80169ba:	2b02      	cmp	r3, #2
 80169bc:	d101      	bne.n	80169c2 <LL_RCC_HSI48_IsReady+0x18>
 80169be:	2301      	movs	r3, #1
 80169c0:	e000      	b.n	80169c4 <LL_RCC_HSI48_IsReady+0x1a>
 80169c2:	2300      	movs	r3, #0
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	46bd      	mov	sp, r7
 80169c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169cc:	4770      	bx	lr

080169ce <LL_RCC_LSE_Enable>:
{
 80169ce:	b480      	push	{r7}
 80169d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80169d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169de:	f043 0301 	orr.w	r3, r3, #1
 80169e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80169e6:	bf00      	nop
 80169e8:	46bd      	mov	sp, r7
 80169ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ee:	4770      	bx	lr

080169f0 <LL_RCC_LSE_Disable>:
{
 80169f0:	b480      	push	{r7}
 80169f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80169f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a00:	f023 0301 	bic.w	r3, r3, #1
 8016a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a08:	bf00      	nop
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr

08016a12 <LL_RCC_LSE_EnableBypass>:
{
 8016a12:	b480      	push	{r7}
 8016a14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a22:	f043 0304 	orr.w	r3, r3, #4
 8016a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a2a:	bf00      	nop
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr

08016a34 <LL_RCC_LSE_DisableBypass>:
{
 8016a34:	b480      	push	{r7}
 8016a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a44:	f023 0304 	bic.w	r3, r3, #4
 8016a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a4c:	bf00      	nop
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr

08016a56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016a56:	b480      	push	{r7}
 8016a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a62:	f003 0302 	and.w	r3, r3, #2
 8016a66:	2b02      	cmp	r3, #2
 8016a68:	d101      	bne.n	8016a6e <LL_RCC_LSE_IsReady+0x18>
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e000      	b.n	8016a70 <LL_RCC_LSE_IsReady+0x1a>
 8016a6e:	2300      	movs	r3, #0
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	46bd      	mov	sp, r7
 8016a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a78:	4770      	bx	lr

08016a7a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016a7a:	b480      	push	{r7}
 8016a7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a8a:	f043 0301 	orr.w	r3, r3, #1
 8016a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016a92:	bf00      	nop
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr

08016a9c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016a9c:	b480      	push	{r7}
 8016a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016aac:	f023 0301 	bic.w	r3, r3, #1
 8016ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016ab4:	bf00      	nop
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abc:	4770      	bx	lr

08016abe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016abe:	b480      	push	{r7}
 8016ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016aca:	f003 0302 	and.w	r3, r3, #2
 8016ace:	2b02      	cmp	r3, #2
 8016ad0:	d101      	bne.n	8016ad6 <LL_RCC_LSI1_IsReady+0x18>
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	e000      	b.n	8016ad8 <LL_RCC_LSI1_IsReady+0x1a>
 8016ad6:	2300      	movs	r3, #0
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	46bd      	mov	sp, r7
 8016adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae0:	4770      	bx	lr

08016ae2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016ae2:	b480      	push	{r7}
 8016ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016af2:	f043 0304 	orr.w	r3, r3, #4
 8016af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016afa:	bf00      	nop
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016b04:	b480      	push	{r7}
 8016b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b14:	f023 0304 	bic.w	r3, r3, #4
 8016b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016b1c:	bf00      	nop
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr

08016b26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016b26:	b480      	push	{r7}
 8016b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b32:	f003 0308 	and.w	r3, r3, #8
 8016b36:	2b08      	cmp	r3, #8
 8016b38:	d101      	bne.n	8016b3e <LL_RCC_LSI2_IsReady+0x18>
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	e000      	b.n	8016b40 <LL_RCC_LSI2_IsReady+0x1a>
 8016b3e:	2300      	movs	r3, #0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr

08016b4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016b4a:	b480      	push	{r7}
 8016b4c:	b083      	sub	sp, #12
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	021b      	lsls	r3, r3, #8
 8016b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b66:	4313      	orrs	r3, r2
 8016b68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016b6c:	bf00      	nop
 8016b6e:	370c      	adds	r7, #12
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b86:	f043 0301 	orr.w	r3, r3, #1
 8016b8a:	6013      	str	r3, [r2, #0]
}
 8016b8c:	bf00      	nop
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b94:	4770      	bx	lr

08016b96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016b96:	b480      	push	{r7}
 8016b98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ba4:	f023 0301 	bic.w	r3, r3, #1
 8016ba8:	6013      	str	r3, [r2, #0]
}
 8016baa:	bf00      	nop
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016bb4:	b480      	push	{r7}
 8016bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f003 0302 	and.w	r3, r3, #2
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d101      	bne.n	8016bca <LL_RCC_MSI_IsReady+0x16>
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	e000      	b.n	8016bcc <LL_RCC_MSI_IsReady+0x18>
 8016bca:	2300      	movs	r3, #0
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd4:	4770      	bx	lr

08016bd6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016bd6:	b480      	push	{r7}
 8016bd8:	b083      	sub	sp, #12
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	4313      	orrs	r3, r2
 8016bf0:	600b      	str	r3, [r1, #0]
}
 8016bf2:	bf00      	nop
 8016bf4:	370c      	adds	r7, #12
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr

08016bfe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016bfe:	b480      	push	{r7}
 8016c00:	b083      	sub	sp, #12
 8016c02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2bb0      	cmp	r3, #176	; 0xb0
 8016c14:	d901      	bls.n	8016c1a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016c16:	23b0      	movs	r3, #176	; 0xb0
 8016c18:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016c1a:	687b      	ldr	r3, [r7, #4]
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	370c      	adds	r7, #12
 8016c20:	46bd      	mov	sp, r7
 8016c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c26:	4770      	bx	lr

08016c28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	021b      	lsls	r3, r3, #8
 8016c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c42:	4313      	orrs	r3, r2
 8016c44:	604b      	str	r3, [r1, #4]
}
 8016c46:	bf00      	nop
 8016c48:	370c      	adds	r7, #12
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr

08016c52 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016c52:	b480      	push	{r7}
 8016c54:	b083      	sub	sp, #12
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c5e:	689b      	ldr	r3, [r3, #8]
 8016c60:	f023 0203 	bic.w	r2, r3, #3
 8016c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	4313      	orrs	r3, r2
 8016c6c:	608b      	str	r3, [r1, #8]
}
 8016c6e:	bf00      	nop
 8016c70:	370c      	adds	r7, #12
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c82:	689b      	ldr	r3, [r3, #8]
 8016c84:	f003 030c 	and.w	r3, r3, #12
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c90:	4770      	bx	lr

08016c92 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016c92:	b480      	push	{r7}
 8016c94:	b083      	sub	sp, #12
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c9e:	689b      	ldr	r3, [r3, #8]
 8016ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	4313      	orrs	r3, r2
 8016cac:	608b      	str	r3, [r1, #8]
}
 8016cae:	bf00      	nop
 8016cb0:	370c      	adds	r7, #12
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb8:	4770      	bx	lr

08016cba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016cba:	b480      	push	{r7}
 8016cbc:	b083      	sub	sp, #12
 8016cbe:	af00      	add	r7, sp, #0
 8016cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4313      	orrs	r3, r2
 8016cd6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016cda:	bf00      	nop
 8016cdc:	370c      	adds	r7, #12
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016ce6:	b480      	push	{r7}
 8016ce8:	b083      	sub	sp, #12
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016cf6:	f023 020f 	bic.w	r2, r3, #15
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	091b      	lsrs	r3, r3, #4
 8016cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d02:	4313      	orrs	r3, r2
 8016d04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016d08:	bf00      	nop
 8016d0a:	370c      	adds	r7, #12
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr

08016d14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d20:	689b      	ldr	r3, [r3, #8]
 8016d22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	4313      	orrs	r3, r2
 8016d2e:	608b      	str	r3, [r1, #8]
}
 8016d30:	bf00      	nop
 8016d32:	370c      	adds	r7, #12
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b083      	sub	sp, #12
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d48:	689b      	ldr	r3, [r3, #8]
 8016d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4313      	orrs	r3, r2
 8016d56:	608b      	str	r3, [r1, #8]
}
 8016d58:	bf00      	nop
 8016d5a:	370c      	adds	r7, #12
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr

08016d64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016d64:	b480      	push	{r7}
 8016d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr

08016d7c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8016d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d94:	4770      	bx	lr

08016d96 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016d96:	b480      	push	{r7}
 8016d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016da2:	011b      	lsls	r3, r3, #4
 8016da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	46bd      	mov	sp, r7
 8016dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db0:	4770      	bx	lr

08016db2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016db2:	b480      	push	{r7}
 8016db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dba:	689b      	ldr	r3, [r3, #8]
 8016dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc8:	4770      	bx	lr

08016dca <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016dca:	b480      	push	{r7}
 8016dcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dd2:	689b      	ldr	r3, [r3, #8]
 8016dd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr

08016de2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016de2:	b480      	push	{r7}
 8016de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016df4:	6013      	str	r3, [r2, #0]
}
 8016df6:	bf00      	nop
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr

08016e00 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016e00:	b480      	push	{r7}
 8016e02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016e12:	6013      	str	r3, [r2, #0]
}
 8016e14:	bf00      	nop
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr

08016e1e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016e1e:	b480      	push	{r7}
 8016e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016e30:	d101      	bne.n	8016e36 <LL_RCC_PLL_IsReady+0x18>
 8016e32:	2301      	movs	r3, #1
 8016e34:	e000      	b.n	8016e38 <LL_RCC_PLL_IsReady+0x1a>
 8016e36:	2300      	movs	r3, #0
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr

08016e42 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016e42:	b480      	push	{r7}
 8016e44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	0a1b      	lsrs	r3, r3, #8
 8016e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	46bd      	mov	sp, r7
 8016e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5a:	4770      	bx	lr

08016e5c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e64:	68db      	ldr	r3, [r3, #12]
 8016e66:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr

08016e74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016e74:	b480      	push	{r7}
 8016e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8016e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e7c:	68db      	ldr	r3, [r3, #12]
 8016e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	46bd      	mov	sp, r7
 8016e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8a:	4770      	bx	lr

08016e8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8016e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e94:	68db      	ldr	r3, [r3, #12]
 8016e96:	f003 0303 	and.w	r3, r3, #3
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr

08016ea4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eac:	689b      	ldr	r3, [r3, #8]
 8016eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016eb6:	d101      	bne.n	8016ebc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8016eb8:	2301      	movs	r3, #1
 8016eba:	e000      	b.n	8016ebe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8016ebc:	2300      	movs	r3, #0
}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8016ec8:	b480      	push	{r7}
 8016eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8016ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016edc:	d101      	bne.n	8016ee2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eec:	4770      	bx	lr

08016eee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8016eee:	b480      	push	{r7}
 8016ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8016ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f02:	d101      	bne.n	8016f08 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8016f04:	2301      	movs	r3, #1
 8016f06:	e000      	b.n	8016f0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8016f08:	2300      	movs	r3, #0
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr

08016f14 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8016f14:	b480      	push	{r7}
 8016f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8016f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f1c:	689b      	ldr	r3, [r3, #8]
 8016f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016f26:	d101      	bne.n	8016f2c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	e000      	b.n	8016f2e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8016f2c:	2300      	movs	r3, #0
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr

08016f38 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8016f38:	b480      	push	{r7}
 8016f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8016f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f40:	689b      	ldr	r3, [r3, #8]
 8016f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016f4a:	d101      	bne.n	8016f50 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	e000      	b.n	8016f52 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8016f50:	2300      	movs	r3, #0
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	46bd      	mov	sp, r7
 8016f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5a:	4770      	bx	lr

08016f5c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016f5c:	b590      	push	{r4, r7, lr}
 8016f5e:	b08d      	sub	sp, #52	; 0x34
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d101      	bne.n	8016f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	e363      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f003 0320 	and.w	r3, r3, #32
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	f000 808d 	beq.w	8017096 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016f7c:	f7ff fe7d 	bl	8016c7a <LL_RCC_GetSysClkSource>
 8016f80:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016f82:	f7ff ff83 	bl	8016e8c <LL_RCC_PLL_GetMainSource>
 8016f86:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d005      	beq.n	8016f9a <HAL_RCC_OscConfig+0x3e>
 8016f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f90:	2b0c      	cmp	r3, #12
 8016f92:	d147      	bne.n	8017024 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8016f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d144      	bne.n	8017024 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	69db      	ldr	r3, [r3, #28]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d101      	bne.n	8016fa6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	e347      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016faa:	f7ff fe28 	bl	8016bfe <LL_RCC_MSI_GetRange>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	429c      	cmp	r4, r3
 8016fb2:	d914      	bls.n	8016fde <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f000 fd61 	bl	8017a80 <RCC_SetFlashLatencyFromMSIRange>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d001      	beq.n	8016fc8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	e336      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7ff fe02 	bl	8016bd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6a1b      	ldr	r3, [r3, #32]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7ff fe26 	bl	8016c28 <LL_RCC_MSI_SetCalibTrimming>
 8016fdc:	e013      	b.n	8017006 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ff fdf7 	bl	8016bd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6a1b      	ldr	r3, [r3, #32]
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7ff fe1b 	bl	8016c28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f000 fd42 	bl	8017a80 <RCC_SetFlashLatencyFromMSIRange>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d001      	beq.n	8017006 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8017002:	2301      	movs	r3, #1
 8017004:	e317      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017006:	f000 fcc9 	bl	801799c <HAL_RCC_GetHCLKFreq>
 801700a:	4603      	mov	r3, r0
 801700c:	4aa4      	ldr	r2, [pc, #656]	; (80172a0 <HAL_RCC_OscConfig+0x344>)
 801700e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8017010:	4ba4      	ldr	r3, [pc, #656]	; (80172a4 <HAL_RCC_OscConfig+0x348>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	4618      	mov	r0, r3
 8017016:	f7e9 fe8d 	bl	8000d34 <HAL_InitTick>
 801701a:	4603      	mov	r3, r0
 801701c:	2b00      	cmp	r3, #0
 801701e:	d039      	beq.n	8017094 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8017020:	2301      	movs	r3, #1
 8017022:	e308      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	69db      	ldr	r3, [r3, #28]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d01e      	beq.n	801706a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801702c:	f7ff fda4 	bl	8016b78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017030:	f7fe f972 	bl	8015318 <HAL_GetTick>
 8017034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8017036:	e008      	b.n	801704a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017038:	f7fe f96e 	bl	8015318 <HAL_GetTick>
 801703c:	4602      	mov	r2, r0
 801703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017040:	1ad3      	subs	r3, r2, r3
 8017042:	2b02      	cmp	r3, #2
 8017044:	d901      	bls.n	801704a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8017046:	2303      	movs	r3, #3
 8017048:	e2f5      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 801704a:	f7ff fdb3 	bl	8016bb4 <LL_RCC_MSI_IsReady>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d0f1      	beq.n	8017038 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017058:	4618      	mov	r0, r3
 801705a:	f7ff fdbc 	bl	8016bd6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6a1b      	ldr	r3, [r3, #32]
 8017062:	4618      	mov	r0, r3
 8017064:	f7ff fde0 	bl	8016c28 <LL_RCC_MSI_SetCalibTrimming>
 8017068:	e015      	b.n	8017096 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801706a:	f7ff fd94 	bl	8016b96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801706e:	f7fe f953 	bl	8015318 <HAL_GetTick>
 8017072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8017074:	e008      	b.n	8017088 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017076:	f7fe f94f 	bl	8015318 <HAL_GetTick>
 801707a:	4602      	mov	r2, r0
 801707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707e:	1ad3      	subs	r3, r2, r3
 8017080:	2b02      	cmp	r3, #2
 8017082:	d901      	bls.n	8017088 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8017084:	2303      	movs	r3, #3
 8017086:	e2d6      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017088:	f7ff fd94 	bl	8016bb4 <LL_RCC_MSI_IsReady>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d1f1      	bne.n	8017076 <HAL_RCC_OscConfig+0x11a>
 8017092:	e000      	b.n	8017096 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8017094:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d047      	beq.n	8017132 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80170a2:	f7ff fdea 	bl	8016c7a <LL_RCC_GetSysClkSource>
 80170a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80170a8:	f7ff fef0 	bl	8016e8c <LL_RCC_PLL_GetMainSource>
 80170ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80170ae:	6a3b      	ldr	r3, [r7, #32]
 80170b0:	2b08      	cmp	r3, #8
 80170b2:	d005      	beq.n	80170c0 <HAL_RCC_OscConfig+0x164>
 80170b4:	6a3b      	ldr	r3, [r7, #32]
 80170b6:	2b0c      	cmp	r3, #12
 80170b8:	d108      	bne.n	80170cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80170ba:	69fb      	ldr	r3, [r7, #28]
 80170bc:	2b03      	cmp	r3, #3
 80170be:	d105      	bne.n	80170cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d134      	bne.n	8017132 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80170c8:	2301      	movs	r3, #1
 80170ca:	e2b4      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170d4:	d102      	bne.n	80170dc <HAL_RCC_OscConfig+0x180>
 80170d6:	f7ff fbd1 	bl	801687c <LL_RCC_HSE_Enable>
 80170da:	e001      	b.n	80170e0 <HAL_RCC_OscConfig+0x184>
 80170dc:	f7ff fbdd 	bl	801689a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d012      	beq.n	801710e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170e8:	f7fe f916 	bl	8015318 <HAL_GetTick>
 80170ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80170ee:	e008      	b.n	8017102 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80170f0:	f7fe f912 	bl	8015318 <HAL_GetTick>
 80170f4:	4602      	mov	r2, r0
 80170f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f8:	1ad3      	subs	r3, r2, r3
 80170fa:	2b64      	cmp	r3, #100	; 0x64
 80170fc:	d901      	bls.n	8017102 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80170fe:	2303      	movs	r3, #3
 8017100:	e299      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8017102:	f7ff fbd9 	bl	80168b8 <LL_RCC_HSE_IsReady>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d0f1      	beq.n	80170f0 <HAL_RCC_OscConfig+0x194>
 801710c:	e011      	b.n	8017132 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801710e:	f7fe f903 	bl	8015318 <HAL_GetTick>
 8017112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8017114:	e008      	b.n	8017128 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017116:	f7fe f8ff 	bl	8015318 <HAL_GetTick>
 801711a:	4602      	mov	r2, r0
 801711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801711e:	1ad3      	subs	r3, r2, r3
 8017120:	2b64      	cmp	r3, #100	; 0x64
 8017122:	d901      	bls.n	8017128 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8017124:	2303      	movs	r3, #3
 8017126:	e286      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017128:	f7ff fbc6 	bl	80168b8 <LL_RCC_HSE_IsReady>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1f1      	bne.n	8017116 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	f003 0302 	and.w	r3, r3, #2
 801713a:	2b00      	cmp	r3, #0
 801713c:	d04c      	beq.n	80171d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801713e:	f7ff fd9c 	bl	8016c7a <LL_RCC_GetSysClkSource>
 8017142:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017144:	f7ff fea2 	bl	8016e8c <LL_RCC_PLL_GetMainSource>
 8017148:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	2b04      	cmp	r3, #4
 801714e:	d005      	beq.n	801715c <HAL_RCC_OscConfig+0x200>
 8017150:	69bb      	ldr	r3, [r7, #24]
 8017152:	2b0c      	cmp	r3, #12
 8017154:	d10e      	bne.n	8017174 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	2b02      	cmp	r3, #2
 801715a:	d10b      	bne.n	8017174 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	68db      	ldr	r3, [r3, #12]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d101      	bne.n	8017168 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8017164:	2301      	movs	r3, #1
 8017166:	e266      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	691b      	ldr	r3, [r3, #16]
 801716c:	4618      	mov	r0, r3
 801716e:	f7ff fbe5 	bl	801693c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017172:	e031      	b.n	80171d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d019      	beq.n	80171b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801717c:	f7ff fbae 	bl	80168dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017180:	f7fe f8ca 	bl	8015318 <HAL_GetTick>
 8017184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8017186:	e008      	b.n	801719a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017188:	f7fe f8c6 	bl	8015318 <HAL_GetTick>
 801718c:	4602      	mov	r2, r0
 801718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017190:	1ad3      	subs	r3, r2, r3
 8017192:	2b02      	cmp	r3, #2
 8017194:	d901      	bls.n	801719a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8017196:	2303      	movs	r3, #3
 8017198:	e24d      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801719a:	f7ff fbbd 	bl	8016918 <LL_RCC_HSI_IsReady>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d0f1      	beq.n	8017188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	691b      	ldr	r3, [r3, #16]
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7ff fbc7 	bl	801693c <LL_RCC_HSI_SetCalibTrimming>
 80171ae:	e013      	b.n	80171d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80171b0:	f7ff fba3 	bl	80168fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80171b4:	f7fe f8b0 	bl	8015318 <HAL_GetTick>
 80171b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80171ba:	e008      	b.n	80171ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80171bc:	f7fe f8ac 	bl	8015318 <HAL_GetTick>
 80171c0:	4602      	mov	r2, r0
 80171c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c4:	1ad3      	subs	r3, r2, r3
 80171c6:	2b02      	cmp	r3, #2
 80171c8:	d901      	bls.n	80171ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80171ca:	2303      	movs	r3, #3
 80171cc:	e233      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80171ce:	f7ff fba3 	bl	8016918 <LL_RCC_HSI_IsReady>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d1f1      	bne.n	80171bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f003 0308 	and.w	r3, r3, #8
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d106      	bne.n	80171f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f000 80a3 	beq.w	8017338 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	695b      	ldr	r3, [r3, #20]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d076      	beq.n	80172e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	f003 0310 	and.w	r3, r3, #16
 8017202:	2b00      	cmp	r3, #0
 8017204:	d046      	beq.n	8017294 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8017206:	f7ff fc5a 	bl	8016abe <LL_RCC_LSI1_IsReady>
 801720a:	4603      	mov	r3, r0
 801720c:	2b00      	cmp	r3, #0
 801720e:	d113      	bne.n	8017238 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8017210:	f7ff fc33 	bl	8016a7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017214:	f7fe f880 	bl	8015318 <HAL_GetTick>
 8017218:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801721a:	e008      	b.n	801722e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801721c:	f7fe f87c 	bl	8015318 <HAL_GetTick>
 8017220:	4602      	mov	r2, r0
 8017222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	2b02      	cmp	r3, #2
 8017228:	d901      	bls.n	801722e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801722a:	2303      	movs	r3, #3
 801722c:	e203      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801722e:	f7ff fc46 	bl	8016abe <LL_RCC_LSI1_IsReady>
 8017232:	4603      	mov	r3, r0
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0f1      	beq.n	801721c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017238:	f7ff fc53 	bl	8016ae2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801723c:	f7fe f86c 	bl	8015318 <HAL_GetTick>
 8017240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017242:	e008      	b.n	8017256 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017244:	f7fe f868 	bl	8015318 <HAL_GetTick>
 8017248:	4602      	mov	r2, r0
 801724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724c:	1ad3      	subs	r3, r2, r3
 801724e:	2b03      	cmp	r3, #3
 8017250:	d901      	bls.n	8017256 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8017252:	2303      	movs	r3, #3
 8017254:	e1ef      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017256:	f7ff fc66 	bl	8016b26 <LL_RCC_LSI2_IsReady>
 801725a:	4603      	mov	r3, r0
 801725c:	2b00      	cmp	r3, #0
 801725e:	d0f1      	beq.n	8017244 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	699b      	ldr	r3, [r3, #24]
 8017264:	4618      	mov	r0, r3
 8017266:	f7ff fc70 	bl	8016b4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801726a:	f7ff fc17 	bl	8016a9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801726e:	f7fe f853 	bl	8015318 <HAL_GetTick>
 8017272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017274:	e008      	b.n	8017288 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017276:	f7fe f84f 	bl	8015318 <HAL_GetTick>
 801727a:	4602      	mov	r2, r0
 801727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801727e:	1ad3      	subs	r3, r2, r3
 8017280:	2b02      	cmp	r3, #2
 8017282:	d901      	bls.n	8017288 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8017284:	2303      	movs	r3, #3
 8017286:	e1d6      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017288:	f7ff fc19 	bl	8016abe <LL_RCC_LSI1_IsReady>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d1f1      	bne.n	8017276 <HAL_RCC_OscConfig+0x31a>
 8017292:	e051      	b.n	8017338 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8017294:	f7ff fbf1 	bl	8016a7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017298:	f7fe f83e 	bl	8015318 <HAL_GetTick>
 801729c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801729e:	e00c      	b.n	80172ba <HAL_RCC_OscConfig+0x35e>
 80172a0:	20000004 	.word	0x20000004
 80172a4:	2000006c 	.word	0x2000006c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80172a8:	f7fe f836 	bl	8015318 <HAL_GetTick>
 80172ac:	4602      	mov	r2, r0
 80172ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b0:	1ad3      	subs	r3, r2, r3
 80172b2:	2b02      	cmp	r3, #2
 80172b4:	d901      	bls.n	80172ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80172b6:	2303      	movs	r3, #3
 80172b8:	e1bd      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80172ba:	f7ff fc00 	bl	8016abe <LL_RCC_LSI1_IsReady>
 80172be:	4603      	mov	r3, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d0f1      	beq.n	80172a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80172c4:	f7ff fc1e 	bl	8016b04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80172c8:	e008      	b.n	80172dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80172ca:	f7fe f825 	bl	8015318 <HAL_GetTick>
 80172ce:	4602      	mov	r2, r0
 80172d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d2:	1ad3      	subs	r3, r2, r3
 80172d4:	2b03      	cmp	r3, #3
 80172d6:	d901      	bls.n	80172dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80172d8:	2303      	movs	r3, #3
 80172da:	e1ac      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80172dc:	f7ff fc23 	bl	8016b26 <LL_RCC_LSI2_IsReady>
 80172e0:	4603      	mov	r3, r0
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d1f1      	bne.n	80172ca <HAL_RCC_OscConfig+0x36e>
 80172e6:	e027      	b.n	8017338 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80172e8:	f7ff fc0c 	bl	8016b04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172ec:	f7fe f814 	bl	8015318 <HAL_GetTick>
 80172f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80172f2:	e008      	b.n	8017306 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80172f4:	f7fe f810 	bl	8015318 <HAL_GetTick>
 80172f8:	4602      	mov	r2, r0
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	2b03      	cmp	r3, #3
 8017300:	d901      	bls.n	8017306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8017302:	2303      	movs	r3, #3
 8017304:	e197      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8017306:	f7ff fc0e 	bl	8016b26 <LL_RCC_LSI2_IsReady>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d1f1      	bne.n	80172f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8017310:	f7ff fbc4 	bl	8016a9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017314:	f7fe f800 	bl	8015318 <HAL_GetTick>
 8017318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801731a:	e008      	b.n	801732e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801731c:	f7fd fffc 	bl	8015318 <HAL_GetTick>
 8017320:	4602      	mov	r2, r0
 8017322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017324:	1ad3      	subs	r3, r2, r3
 8017326:	2b02      	cmp	r3, #2
 8017328:	d901      	bls.n	801732e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801732a:	2303      	movs	r3, #3
 801732c:	e183      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801732e:	f7ff fbc6 	bl	8016abe <LL_RCC_LSI1_IsReady>
 8017332:	4603      	mov	r3, r0
 8017334:	2b00      	cmp	r3, #0
 8017336:	d1f1      	bne.n	801731c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f003 0304 	and.w	r3, r3, #4
 8017340:	2b00      	cmp	r3, #0
 8017342:	d05b      	beq.n	80173fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017344:	4ba7      	ldr	r3, [pc, #668]	; (80175e4 <HAL_RCC_OscConfig+0x688>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801734c:	2b00      	cmp	r3, #0
 801734e:	d114      	bne.n	801737a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017350:	f7ff fa64 	bl	801681c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017354:	f7fd ffe0 	bl	8015318 <HAL_GetTick>
 8017358:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801735a:	e008      	b.n	801736e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801735c:	f7fd ffdc 	bl	8015318 <HAL_GetTick>
 8017360:	4602      	mov	r2, r0
 8017362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017364:	1ad3      	subs	r3, r2, r3
 8017366:	2b02      	cmp	r3, #2
 8017368:	d901      	bls.n	801736e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801736a:	2303      	movs	r3, #3
 801736c:	e163      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801736e:	4b9d      	ldr	r3, [pc, #628]	; (80175e4 <HAL_RCC_OscConfig+0x688>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017376:	2b00      	cmp	r3, #0
 8017378:	d0f0      	beq.n	801735c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	2b01      	cmp	r3, #1
 8017380:	d102      	bne.n	8017388 <HAL_RCC_OscConfig+0x42c>
 8017382:	f7ff fb24 	bl	80169ce <LL_RCC_LSE_Enable>
 8017386:	e00c      	b.n	80173a2 <HAL_RCC_OscConfig+0x446>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	689b      	ldr	r3, [r3, #8]
 801738c:	2b05      	cmp	r3, #5
 801738e:	d104      	bne.n	801739a <HAL_RCC_OscConfig+0x43e>
 8017390:	f7ff fb3f 	bl	8016a12 <LL_RCC_LSE_EnableBypass>
 8017394:	f7ff fb1b 	bl	80169ce <LL_RCC_LSE_Enable>
 8017398:	e003      	b.n	80173a2 <HAL_RCC_OscConfig+0x446>
 801739a:	f7ff fb29 	bl	80169f0 <LL_RCC_LSE_Disable>
 801739e:	f7ff fb49 	bl	8016a34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	689b      	ldr	r3, [r3, #8]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d014      	beq.n	80173d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80173aa:	f7fd ffb5 	bl	8015318 <HAL_GetTick>
 80173ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80173b0:	e00a      	b.n	80173c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173b2:	f7fd ffb1 	bl	8015318 <HAL_GetTick>
 80173b6:	4602      	mov	r2, r0
 80173b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ba:	1ad3      	subs	r3, r2, r3
 80173bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80173c0:	4293      	cmp	r3, r2
 80173c2:	d901      	bls.n	80173c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80173c4:	2303      	movs	r3, #3
 80173c6:	e136      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80173c8:	f7ff fb45 	bl	8016a56 <LL_RCC_LSE_IsReady>
 80173cc:	4603      	mov	r3, r0
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d0ef      	beq.n	80173b2 <HAL_RCC_OscConfig+0x456>
 80173d2:	e013      	b.n	80173fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80173d4:	f7fd ffa0 	bl	8015318 <HAL_GetTick>
 80173d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80173da:	e00a      	b.n	80173f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173dc:	f7fd ff9c 	bl	8015318 <HAL_GetTick>
 80173e0:	4602      	mov	r2, r0
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80173ea:	4293      	cmp	r3, r2
 80173ec:	d901      	bls.n	80173f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80173ee:	2303      	movs	r3, #3
 80173f0:	e121      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80173f2:	f7ff fb30 	bl	8016a56 <LL_RCC_LSE_IsReady>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d1ef      	bne.n	80173dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017404:	2b00      	cmp	r3, #0
 8017406:	d02c      	beq.n	8017462 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801740c:	2b00      	cmp	r3, #0
 801740e:	d014      	beq.n	801743a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017410:	f7ff faa9 	bl	8016966 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017414:	f7fd ff80 	bl	8015318 <HAL_GetTick>
 8017418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801741a:	e008      	b.n	801742e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801741c:	f7fd ff7c 	bl	8015318 <HAL_GetTick>
 8017420:	4602      	mov	r2, r0
 8017422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	2b02      	cmp	r3, #2
 8017428:	d901      	bls.n	801742e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801742a:	2303      	movs	r3, #3
 801742c:	e103      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801742e:	f7ff fabc 	bl	80169aa <LL_RCC_HSI48_IsReady>
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d0f1      	beq.n	801741c <HAL_RCC_OscConfig+0x4c0>
 8017438:	e013      	b.n	8017462 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801743a:	f7ff faa5 	bl	8016988 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801743e:	f7fd ff6b 	bl	8015318 <HAL_GetTick>
 8017442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017444:	e008      	b.n	8017458 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017446:	f7fd ff67 	bl	8015318 <HAL_GetTick>
 801744a:	4602      	mov	r2, r0
 801744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744e:	1ad3      	subs	r3, r2, r3
 8017450:	2b02      	cmp	r3, #2
 8017452:	d901      	bls.n	8017458 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8017454:	2303      	movs	r3, #3
 8017456:	e0ee      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017458:	f7ff faa7 	bl	80169aa <LL_RCC_HSI48_IsReady>
 801745c:	4603      	mov	r3, r0
 801745e:	2b00      	cmp	r3, #0
 8017460:	d1f1      	bne.n	8017446 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017466:	2b00      	cmp	r3, #0
 8017468:	f000 80e4 	beq.w	8017634 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801746c:	f7ff fc05 	bl	8016c7a <LL_RCC_GetSysClkSource>
 8017470:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8017472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017476:	68db      	ldr	r3, [r3, #12]
 8017478:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801747e:	2b02      	cmp	r3, #2
 8017480:	f040 80b4 	bne.w	80175ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	f003 0203 	and.w	r2, r3, #3
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801748e:	429a      	cmp	r2, r3
 8017490:	d123      	bne.n	80174da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801749c:	429a      	cmp	r2, r3
 801749e:	d11c      	bne.n	80174da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	0a1b      	lsrs	r3, r3, #8
 80174a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d114      	bne.n	80174da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d10d      	bne.n	80174da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d106      	bne.n	80174da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d05d      	beq.n	8017596 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	2b0c      	cmp	r3, #12
 80174de:	d058      	beq.n	8017592 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80174e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d001      	beq.n	80174f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80174ee:	2301      	movs	r3, #1
 80174f0:	e0a1      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80174f2:	f7ff fc85 	bl	8016e00 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80174f6:	f7fd ff0f 	bl	8015318 <HAL_GetTick>
 80174fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174fc:	e008      	b.n	8017510 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174fe:	f7fd ff0b 	bl	8015318 <HAL_GetTick>
 8017502:	4602      	mov	r2, r0
 8017504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017506:	1ad3      	subs	r3, r2, r3
 8017508:	2b02      	cmp	r3, #2
 801750a:	d901      	bls.n	8017510 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801750c:	2303      	movs	r3, #3
 801750e:	e092      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801751a:	2b00      	cmp	r3, #0
 801751c:	d1ef      	bne.n	80174fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801751e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017522:	68da      	ldr	r2, [r3, #12]
 8017524:	4b30      	ldr	r3, [pc, #192]	; (80175e8 <HAL_RCC_OscConfig+0x68c>)
 8017526:	4013      	ands	r3, r2
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017530:	4311      	orrs	r1, r2
 8017532:	687a      	ldr	r2, [r7, #4]
 8017534:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017536:	0212      	lsls	r2, r2, #8
 8017538:	4311      	orrs	r1, r2
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801753e:	4311      	orrs	r1, r2
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017544:	4311      	orrs	r1, r2
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801754a:	430a      	orrs	r2, r1
 801754c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017550:	4313      	orrs	r3, r2
 8017552:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017554:	f7ff fc45 	bl	8016de2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801755c:	68db      	ldr	r3, [r3, #12]
 801755e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017568:	f7fd fed6 	bl	8015318 <HAL_GetTick>
 801756c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801756e:	e008      	b.n	8017582 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017570:	f7fd fed2 	bl	8015318 <HAL_GetTick>
 8017574:	4602      	mov	r2, r0
 8017576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017578:	1ad3      	subs	r3, r2, r3
 801757a:	2b02      	cmp	r3, #2
 801757c:	d901      	bls.n	8017582 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801757e:	2303      	movs	r3, #3
 8017580:	e059      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801758c:	2b00      	cmp	r3, #0
 801758e:	d0ef      	beq.n	8017570 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017590:	e050      	b.n	8017634 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8017592:	2301      	movs	r3, #1
 8017594:	e04f      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d147      	bne.n	8017634 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80175a4:	f7ff fc1d 	bl	8016de2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80175a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80175b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80175b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80175b8:	f7fd feae 	bl	8015318 <HAL_GetTick>
 80175bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80175be:	e008      	b.n	80175d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80175c0:	f7fd feaa 	bl	8015318 <HAL_GetTick>
 80175c4:	4602      	mov	r2, r0
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	1ad3      	subs	r3, r2, r3
 80175ca:	2b02      	cmp	r3, #2
 80175cc:	d901      	bls.n	80175d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80175ce:	2303      	movs	r3, #3
 80175d0:	e031      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80175d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d0ef      	beq.n	80175c0 <HAL_RCC_OscConfig+0x664>
 80175e0:	e028      	b.n	8017634 <HAL_RCC_OscConfig+0x6d8>
 80175e2:	bf00      	nop
 80175e4:	58000400 	.word	0x58000400
 80175e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	2b0c      	cmp	r3, #12
 80175f0:	d01e      	beq.n	8017630 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80175f2:	f7ff fc05 	bl	8016e00 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175f6:	f7fd fe8f 	bl	8015318 <HAL_GetTick>
 80175fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80175fc:	e008      	b.n	8017610 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80175fe:	f7fd fe8b 	bl	8015318 <HAL_GetTick>
 8017602:	4602      	mov	r2, r0
 8017604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	2b02      	cmp	r3, #2
 801760a:	d901      	bls.n	8017610 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 801760c:	2303      	movs	r3, #3
 801760e:	e012      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1ef      	bne.n	80175fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801761e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017622:	68da      	ldr	r2, [r3, #12]
 8017624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017628:	4b05      	ldr	r3, [pc, #20]	; (8017640 <HAL_RCC_OscConfig+0x6e4>)
 801762a:	4013      	ands	r3, r2
 801762c:	60cb      	str	r3, [r1, #12]
 801762e:	e001      	b.n	8017634 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8017630:	2301      	movs	r3, #1
 8017632:	e000      	b.n	8017636 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8017634:	2300      	movs	r3, #0
}
 8017636:	4618      	mov	r0, r3
 8017638:	3734      	adds	r7, #52	; 0x34
 801763a:	46bd      	mov	sp, r7
 801763c:	bd90      	pop	{r4, r7, pc}
 801763e:	bf00      	nop
 8017640:	eefefffc 	.word	0xeefefffc

08017644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b084      	sub	sp, #16
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d101      	bne.n	8017658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017654:	2301      	movs	r3, #1
 8017656:	e12d      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017658:	4b98      	ldr	r3, [pc, #608]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f003 0307 	and.w	r3, r3, #7
 8017660:	683a      	ldr	r2, [r7, #0]
 8017662:	429a      	cmp	r2, r3
 8017664:	d91b      	bls.n	801769e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017666:	4b95      	ldr	r3, [pc, #596]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	f023 0207 	bic.w	r2, r3, #7
 801766e:	4993      	ldr	r1, [pc, #588]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	4313      	orrs	r3, r2
 8017674:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017676:	f7fd fe4f 	bl	8015318 <HAL_GetTick>
 801767a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801767c:	e008      	b.n	8017690 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801767e:	f7fd fe4b 	bl	8015318 <HAL_GetTick>
 8017682:	4602      	mov	r2, r0
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	2b02      	cmp	r3, #2
 801768a:	d901      	bls.n	8017690 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801768c:	2303      	movs	r3, #3
 801768e:	e111      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017690:	4b8a      	ldr	r3, [pc, #552]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f003 0307 	and.w	r3, r3, #7
 8017698:	683a      	ldr	r2, [r7, #0]
 801769a:	429a      	cmp	r2, r3
 801769c:	d1ef      	bne.n	801767e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	f003 0302 	and.w	r3, r3, #2
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d016      	beq.n	80176d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	689b      	ldr	r3, [r3, #8]
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7ff faef 	bl	8016c92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80176b4:	f7fd fe30 	bl	8015318 <HAL_GetTick>
 80176b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80176ba:	e008      	b.n	80176ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80176bc:	f7fd fe2c 	bl	8015318 <HAL_GetTick>
 80176c0:	4602      	mov	r2, r0
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	1ad3      	subs	r3, r2, r3
 80176c6:	2b02      	cmp	r3, #2
 80176c8:	d901      	bls.n	80176ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80176ca:	2303      	movs	r3, #3
 80176cc:	e0f2      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80176ce:	f7ff fbe9 	bl	8016ea4 <LL_RCC_IsActiveFlag_HPRE>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d0f1      	beq.n	80176bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	f003 0320 	and.w	r3, r3, #32
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d016      	beq.n	8017712 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	695b      	ldr	r3, [r3, #20]
 80176e8:	4618      	mov	r0, r3
 80176ea:	f7ff fae6 	bl	8016cba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80176ee:	f7fd fe13 	bl	8015318 <HAL_GetTick>
 80176f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80176f4:	e008      	b.n	8017708 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80176f6:	f7fd fe0f 	bl	8015318 <HAL_GetTick>
 80176fa:	4602      	mov	r2, r0
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	1ad3      	subs	r3, r2, r3
 8017700:	2b02      	cmp	r3, #2
 8017702:	d901      	bls.n	8017708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8017704:	2303      	movs	r3, #3
 8017706:	e0d5      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017708:	f7ff fbde 	bl	8016ec8 <LL_RCC_IsActiveFlag_C2HPRE>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d0f1      	beq.n	80176f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801771a:	2b00      	cmp	r3, #0
 801771c:	d016      	beq.n	801774c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	699b      	ldr	r3, [r3, #24]
 8017722:	4618      	mov	r0, r3
 8017724:	f7ff fadf 	bl	8016ce6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017728:	f7fd fdf6 	bl	8015318 <HAL_GetTick>
 801772c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801772e:	e008      	b.n	8017742 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017730:	f7fd fdf2 	bl	8015318 <HAL_GetTick>
 8017734:	4602      	mov	r2, r0
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	1ad3      	subs	r3, r2, r3
 801773a:	2b02      	cmp	r3, #2
 801773c:	d901      	bls.n	8017742 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801773e:	2303      	movs	r3, #3
 8017740:	e0b8      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017742:	f7ff fbd4 	bl	8016eee <LL_RCC_IsActiveFlag_SHDHPRE>
 8017746:	4603      	mov	r3, r0
 8017748:	2b00      	cmp	r3, #0
 801774a:	d0f1      	beq.n	8017730 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	f003 0304 	and.w	r3, r3, #4
 8017754:	2b00      	cmp	r3, #0
 8017756:	d016      	beq.n	8017786 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	68db      	ldr	r3, [r3, #12]
 801775c:	4618      	mov	r0, r3
 801775e:	f7ff fad9 	bl	8016d14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017762:	f7fd fdd9 	bl	8015318 <HAL_GetTick>
 8017766:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017768:	e008      	b.n	801777c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801776a:	f7fd fdd5 	bl	8015318 <HAL_GetTick>
 801776e:	4602      	mov	r2, r0
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	2b02      	cmp	r3, #2
 8017776:	d901      	bls.n	801777c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017778:	2303      	movs	r3, #3
 801777a:	e09b      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801777c:	f7ff fbca 	bl	8016f14 <LL_RCC_IsActiveFlag_PPRE1>
 8017780:	4603      	mov	r3, r0
 8017782:	2b00      	cmp	r3, #0
 8017784:	d0f1      	beq.n	801776a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f003 0308 	and.w	r3, r3, #8
 801778e:	2b00      	cmp	r3, #0
 8017790:	d017      	beq.n	80177c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	691b      	ldr	r3, [r3, #16]
 8017796:	00db      	lsls	r3, r3, #3
 8017798:	4618      	mov	r0, r3
 801779a:	f7ff facf 	bl	8016d3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801779e:	f7fd fdbb 	bl	8015318 <HAL_GetTick>
 80177a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80177a4:	e008      	b.n	80177b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80177a6:	f7fd fdb7 	bl	8015318 <HAL_GetTick>
 80177aa:	4602      	mov	r2, r0
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	2b02      	cmp	r3, #2
 80177b2:	d901      	bls.n	80177b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80177b4:	2303      	movs	r3, #3
 80177b6:	e07d      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80177b8:	f7ff fbbe 	bl	8016f38 <LL_RCC_IsActiveFlag_PPRE2>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d0f1      	beq.n	80177a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f003 0301 	and.w	r3, r3, #1
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d043      	beq.n	8017856 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	d106      	bne.n	80177e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80177d6:	f7ff f86f 	bl	80168b8 <LL_RCC_HSE_IsReady>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d11e      	bne.n	801781e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80177e0:	2301      	movs	r3, #1
 80177e2:	e067      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	685b      	ldr	r3, [r3, #4]
 80177e8:	2b03      	cmp	r3, #3
 80177ea:	d106      	bne.n	80177fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80177ec:	f7ff fb17 	bl	8016e1e <LL_RCC_PLL_IsReady>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d113      	bne.n	801781e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80177f6:	2301      	movs	r3, #1
 80177f8:	e05c      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d106      	bne.n	8017810 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8017802:	f7ff f9d7 	bl	8016bb4 <LL_RCC_MSI_IsReady>
 8017806:	4603      	mov	r3, r0
 8017808:	2b00      	cmp	r3, #0
 801780a:	d108      	bne.n	801781e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801780c:	2301      	movs	r3, #1
 801780e:	e051      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8017810:	f7ff f882 	bl	8016918 <LL_RCC_HSI_IsReady>
 8017814:	4603      	mov	r3, r0
 8017816:	2b00      	cmp	r3, #0
 8017818:	d101      	bne.n	801781e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801781a:	2301      	movs	r3, #1
 801781c:	e04a      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	4618      	mov	r0, r3
 8017824:	f7ff fa15 	bl	8016c52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017828:	f7fd fd76 	bl	8015318 <HAL_GetTick>
 801782c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801782e:	e00a      	b.n	8017846 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017830:	f7fd fd72 	bl	8015318 <HAL_GetTick>
 8017834:	4602      	mov	r2, r0
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	f241 3288 	movw	r2, #5000	; 0x1388
 801783e:	4293      	cmp	r3, r2
 8017840:	d901      	bls.n	8017846 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8017842:	2303      	movs	r3, #3
 8017844:	e036      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017846:	f7ff fa18 	bl	8016c7a <LL_RCC_GetSysClkSource>
 801784a:	4602      	mov	r2, r0
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	685b      	ldr	r3, [r3, #4]
 8017850:	009b      	lsls	r3, r3, #2
 8017852:	429a      	cmp	r2, r3
 8017854:	d1ec      	bne.n	8017830 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017856:	4b19      	ldr	r3, [pc, #100]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f003 0307 	and.w	r3, r3, #7
 801785e:	683a      	ldr	r2, [r7, #0]
 8017860:	429a      	cmp	r2, r3
 8017862:	d21b      	bcs.n	801789c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017864:	4b15      	ldr	r3, [pc, #84]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	f023 0207 	bic.w	r2, r3, #7
 801786c:	4913      	ldr	r1, [pc, #76]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	4313      	orrs	r3, r2
 8017872:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017874:	f7fd fd50 	bl	8015318 <HAL_GetTick>
 8017878:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801787a:	e008      	b.n	801788e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801787c:	f7fd fd4c 	bl	8015318 <HAL_GetTick>
 8017880:	4602      	mov	r2, r0
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	2b02      	cmp	r3, #2
 8017888:	d901      	bls.n	801788e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801788a:	2303      	movs	r3, #3
 801788c:	e012      	b.n	80178b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801788e:	4b0b      	ldr	r3, [pc, #44]	; (80178bc <HAL_RCC_ClockConfig+0x278>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f003 0307 	and.w	r3, r3, #7
 8017896:	683a      	ldr	r2, [r7, #0]
 8017898:	429a      	cmp	r2, r3
 801789a:	d1ef      	bne.n	801787c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801789c:	f000 f87e 	bl	801799c <HAL_RCC_GetHCLKFreq>
 80178a0:	4603      	mov	r3, r0
 80178a2:	4a07      	ldr	r2, [pc, #28]	; (80178c0 <HAL_RCC_ClockConfig+0x27c>)
 80178a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80178a6:	f7fd fd43 	bl	8015330 <HAL_GetTickPrio>
 80178aa:	4603      	mov	r3, r0
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7e9 fa41 	bl	8000d34 <HAL_InitTick>
 80178b2:	4603      	mov	r3, r0
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3710      	adds	r7, #16
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	58004000 	.word	0x58004000
 80178c0:	20000004 	.word	0x20000004

080178c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80178c4:	b590      	push	{r4, r7, lr}
 80178c6:	b085      	sub	sp, #20
 80178c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80178ca:	f7ff f9d6 	bl	8016c7a <LL_RCC_GetSysClkSource>
 80178ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d10a      	bne.n	80178ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80178d6:	f7ff f992 	bl	8016bfe <LL_RCC_MSI_GetRange>
 80178da:	4603      	mov	r3, r0
 80178dc:	091b      	lsrs	r3, r3, #4
 80178de:	f003 030f 	and.w	r3, r3, #15
 80178e2:	4a2b      	ldr	r2, [pc, #172]	; (8017990 <HAL_RCC_GetSysClockFreq+0xcc>)
 80178e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178e8:	60fb      	str	r3, [r7, #12]
 80178ea:	e04b      	b.n	8017984 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2b04      	cmp	r3, #4
 80178f0:	d102      	bne.n	80178f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80178f2:	4b28      	ldr	r3, [pc, #160]	; (8017994 <HAL_RCC_GetSysClockFreq+0xd0>)
 80178f4:	60fb      	str	r3, [r7, #12]
 80178f6:	e045      	b.n	8017984 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2b08      	cmp	r3, #8
 80178fc:	d10a      	bne.n	8017914 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80178fe:	f7fe ffab 	bl	8016858 <LL_RCC_HSE_IsEnabledDiv2>
 8017902:	4603      	mov	r3, r0
 8017904:	2b01      	cmp	r3, #1
 8017906:	d102      	bne.n	801790e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017908:	4b22      	ldr	r3, [pc, #136]	; (8017994 <HAL_RCC_GetSysClockFreq+0xd0>)
 801790a:	60fb      	str	r3, [r7, #12]
 801790c:	e03a      	b.n	8017984 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801790e:	4b22      	ldr	r3, [pc, #136]	; (8017998 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017910:	60fb      	str	r3, [r7, #12]
 8017912:	e037      	b.n	8017984 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017914:	f7ff faba 	bl	8016e8c <LL_RCC_PLL_GetMainSource>
 8017918:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	2b02      	cmp	r3, #2
 801791e:	d003      	beq.n	8017928 <HAL_RCC_GetSysClockFreq+0x64>
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	2b03      	cmp	r3, #3
 8017924:	d003      	beq.n	801792e <HAL_RCC_GetSysClockFreq+0x6a>
 8017926:	e00d      	b.n	8017944 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017928:	4b1a      	ldr	r3, [pc, #104]	; (8017994 <HAL_RCC_GetSysClockFreq+0xd0>)
 801792a:	60bb      	str	r3, [r7, #8]
        break;
 801792c:	e015      	b.n	801795a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801792e:	f7fe ff93 	bl	8016858 <LL_RCC_HSE_IsEnabledDiv2>
 8017932:	4603      	mov	r3, r0
 8017934:	2b01      	cmp	r3, #1
 8017936:	d102      	bne.n	801793e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017938:	4b16      	ldr	r3, [pc, #88]	; (8017994 <HAL_RCC_GetSysClockFreq+0xd0>)
 801793a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801793c:	e00d      	b.n	801795a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801793e:	4b16      	ldr	r3, [pc, #88]	; (8017998 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017940:	60bb      	str	r3, [r7, #8]
        break;
 8017942:	e00a      	b.n	801795a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017944:	f7ff f95b 	bl	8016bfe <LL_RCC_MSI_GetRange>
 8017948:	4603      	mov	r3, r0
 801794a:	091b      	lsrs	r3, r3, #4
 801794c:	f003 030f 	and.w	r3, r3, #15
 8017950:	4a0f      	ldr	r2, [pc, #60]	; (8017990 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017956:	60bb      	str	r3, [r7, #8]
        break;
 8017958:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801795a:	f7ff fa72 	bl	8016e42 <LL_RCC_PLL_GetN>
 801795e:	4602      	mov	r2, r0
 8017960:	68bb      	ldr	r3, [r7, #8]
 8017962:	fb03 f402 	mul.w	r4, r3, r2
 8017966:	f7ff fa85 	bl	8016e74 <LL_RCC_PLL_GetDivider>
 801796a:	4603      	mov	r3, r0
 801796c:	091b      	lsrs	r3, r3, #4
 801796e:	3301      	adds	r3, #1
 8017970:	fbb4 f4f3 	udiv	r4, r4, r3
 8017974:	f7ff fa72 	bl	8016e5c <LL_RCC_PLL_GetR>
 8017978:	4603      	mov	r3, r0
 801797a:	0f5b      	lsrs	r3, r3, #29
 801797c:	3301      	adds	r3, #1
 801797e:	fbb4 f3f3 	udiv	r3, r4, r3
 8017982:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017984:	68fb      	ldr	r3, [r7, #12]
}
 8017986:	4618      	mov	r0, r3
 8017988:	3714      	adds	r7, #20
 801798a:	46bd      	mov	sp, r7
 801798c:	bd90      	pop	{r4, r7, pc}
 801798e:	bf00      	nop
 8017990:	0801a754 	.word	0x0801a754
 8017994:	00f42400 	.word	0x00f42400
 8017998:	01e84800 	.word	0x01e84800

0801799c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801799c:	b598      	push	{r3, r4, r7, lr}
 801799e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80179a0:	f7ff ff90 	bl	80178c4 <HAL_RCC_GetSysClockFreq>
 80179a4:	4604      	mov	r4, r0
 80179a6:	f7ff f9dd 	bl	8016d64 <LL_RCC_GetAHBPrescaler>
 80179aa:	4603      	mov	r3, r0
 80179ac:	091b      	lsrs	r3, r3, #4
 80179ae:	f003 030f 	and.w	r3, r3, #15
 80179b2:	4a03      	ldr	r2, [pc, #12]	; (80179c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80179b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80179bc:	4618      	mov	r0, r3
 80179be:	bd98      	pop	{r3, r4, r7, pc}
 80179c0:	0801a6f4 	.word	0x0801a6f4

080179c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80179c4:	b598      	push	{r3, r4, r7, lr}
 80179c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80179c8:	f7ff ffe8 	bl	801799c <HAL_RCC_GetHCLKFreq>
 80179cc:	4604      	mov	r4, r0
 80179ce:	f7ff f9f0 	bl	8016db2 <LL_RCC_GetAPB1Prescaler>
 80179d2:	4603      	mov	r3, r0
 80179d4:	0a1b      	lsrs	r3, r3, #8
 80179d6:	f003 0307 	and.w	r3, r3, #7
 80179da:	4a04      	ldr	r2, [pc, #16]	; (80179ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80179dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179e0:	f003 031f 	and.w	r3, r3, #31
 80179e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	bd98      	pop	{r3, r4, r7, pc}
 80179ec:	0801a734 	.word	0x0801a734

080179f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80179f0:	b598      	push	{r3, r4, r7, lr}
 80179f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80179f4:	f7ff ffd2 	bl	801799c <HAL_RCC_GetHCLKFreq>
 80179f8:	4604      	mov	r4, r0
 80179fa:	f7ff f9e6 	bl	8016dca <LL_RCC_GetAPB2Prescaler>
 80179fe:	4603      	mov	r3, r0
 8017a00:	0adb      	lsrs	r3, r3, #11
 8017a02:	f003 0307 	and.w	r3, r3, #7
 8017a06:	4a04      	ldr	r2, [pc, #16]	; (8017a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a0c:	f003 031f 	and.w	r3, r3, #31
 8017a10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	bd98      	pop	{r3, r4, r7, pc}
 8017a18:	0801a734 	.word	0x0801a734

08017a1c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	226f      	movs	r2, #111	; 0x6f
 8017a2a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017a2c:	f7ff f925 	bl	8016c7a <LL_RCC_GetSysClkSource>
 8017a30:	4602      	mov	r2, r0
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017a36:	f7ff f995 	bl	8016d64 <LL_RCC_GetAHBPrescaler>
 8017a3a:	4602      	mov	r2, r0
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017a40:	f7ff f9b7 	bl	8016db2 <LL_RCC_GetAPB1Prescaler>
 8017a44:	4602      	mov	r2, r0
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017a4a:	f7ff f9be 	bl	8016dca <LL_RCC_GetAPB2Prescaler>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017a54:	f7ff f992 	bl	8016d7c <LL_C2_RCC_GetAHBPrescaler>
 8017a58:	4602      	mov	r2, r0
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017a5e:	f7ff f99a 	bl	8016d96 <LL_RCC_GetAHB4Prescaler>
 8017a62:	4602      	mov	r2, r0
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017a68:	4b04      	ldr	r3, [pc, #16]	; (8017a7c <HAL_RCC_GetClockConfig+0x60>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f003 0207 	and.w	r2, r3, #7
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	601a      	str	r2, [r3, #0]
}
 8017a74:	bf00      	nop
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	58004000 	.word	0x58004000

08017a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017a80:	b590      	push	{r4, r7, lr}
 8017a82:	b085      	sub	sp, #20
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2bb0      	cmp	r3, #176	; 0xb0
 8017a8c:	d903      	bls.n	8017a96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017a8e:	4b15      	ldr	r3, [pc, #84]	; (8017ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a92:	60fb      	str	r3, [r7, #12]
 8017a94:	e007      	b.n	8017aa6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	091b      	lsrs	r3, r3, #4
 8017a9a:	f003 030f 	and.w	r3, r3, #15
 8017a9e:	4a11      	ldr	r2, [pc, #68]	; (8017ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017aa4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017aa6:	f7ff f976 	bl	8016d96 <LL_RCC_GetAHB4Prescaler>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	091b      	lsrs	r3, r3, #4
 8017aae:	f003 030f 	and.w	r3, r3, #15
 8017ab2:	4a0d      	ldr	r2, [pc, #52]	; (8017ae8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ab8:	68fa      	ldr	r2, [r7, #12]
 8017aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8017abe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	4a0a      	ldr	r2, [pc, #40]	; (8017aec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8017ac8:	0c9c      	lsrs	r4, r3, #18
 8017aca:	f7fe feb7 	bl	801683c <HAL_PWREx_GetVoltageRange>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f000 f80c 	bl	8017af0 <RCC_SetFlashLatency>
 8017ad8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3714      	adds	r7, #20
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd90      	pop	{r4, r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	0801a754 	.word	0x0801a754
 8017ae8:	0801a6f4 	.word	0x0801a6f4
 8017aec:	431bde83 	.word	0x431bde83

08017af0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017af0:	b590      	push	{r4, r7, lr}
 8017af2:	b093      	sub	sp, #76	; 0x4c
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017afa:	4b37      	ldr	r3, [pc, #220]	; (8017bd8 <RCC_SetFlashLatency+0xe8>)
 8017afc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017b06:	4a35      	ldr	r2, [pc, #212]	; (8017bdc <RCC_SetFlashLatency+0xec>)
 8017b08:	f107 031c 	add.w	r3, r7, #28
 8017b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017b12:	4b33      	ldr	r3, [pc, #204]	; (8017be0 <RCC_SetFlashLatency+0xf0>)
 8017b14:	f107 040c 	add.w	r4, r7, #12
 8017b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017b1e:	2300      	movs	r3, #0
 8017b20:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b28:	d11a      	bne.n	8017b60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8017b2e:	e013      	b.n	8017b58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b32:	009b      	lsls	r3, r3, #2
 8017b34:	3348      	adds	r3, #72	; 0x48
 8017b36:	443b      	add	r3, r7
 8017b38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d807      	bhi.n	8017b52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	3348      	adds	r3, #72	; 0x48
 8017b48:	443b      	add	r3, r7
 8017b4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017b4e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017b50:	e020      	b.n	8017b94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b54:	3301      	adds	r3, #1
 8017b56:	643b      	str	r3, [r7, #64]	; 0x40
 8017b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b5a:	2b03      	cmp	r3, #3
 8017b5c:	d9e8      	bls.n	8017b30 <RCC_SetFlashLatency+0x40>
 8017b5e:	e019      	b.n	8017b94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017b60:	2300      	movs	r3, #0
 8017b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b64:	e013      	b.n	8017b8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	3348      	adds	r3, #72	; 0x48
 8017b6c:	443b      	add	r3, r7
 8017b6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d807      	bhi.n	8017b88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	3348      	adds	r3, #72	; 0x48
 8017b7e:	443b      	add	r3, r7
 8017b80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017b84:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017b86:	e005      	b.n	8017b94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b8a:	3301      	adds	r3, #1
 8017b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b90:	2b02      	cmp	r3, #2
 8017b92:	d9e8      	bls.n	8017b66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017b94:	4b13      	ldr	r3, [pc, #76]	; (8017be4 <RCC_SetFlashLatency+0xf4>)
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	f023 0207 	bic.w	r2, r3, #7
 8017b9c:	4911      	ldr	r1, [pc, #68]	; (8017be4 <RCC_SetFlashLatency+0xf4>)
 8017b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ba0:	4313      	orrs	r3, r2
 8017ba2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017ba4:	f7fd fbb8 	bl	8015318 <HAL_GetTick>
 8017ba8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017baa:	e008      	b.n	8017bbe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017bac:	f7fd fbb4 	bl	8015318 <HAL_GetTick>
 8017bb0:	4602      	mov	r2, r0
 8017bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	2b02      	cmp	r3, #2
 8017bb8:	d901      	bls.n	8017bbe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017bba:	2303      	movs	r3, #3
 8017bbc:	e007      	b.n	8017bce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017bbe:	4b09      	ldr	r3, [pc, #36]	; (8017be4 <RCC_SetFlashLatency+0xf4>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f003 0307 	and.w	r3, r3, #7
 8017bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d1ef      	bne.n	8017bac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017bcc:	2300      	movs	r3, #0
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	374c      	adds	r7, #76	; 0x4c
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd90      	pop	{r4, r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	0801a6c8 	.word	0x0801a6c8
 8017bdc:	0801a6d8 	.word	0x0801a6d8
 8017be0:	0801a6e4 	.word	0x0801a6e4
 8017be4:	58004000 	.word	0x58004000

08017be8 <LL_RCC_LSE_IsEnabled>:
{
 8017be8:	b480      	push	{r7}
 8017bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bf4:	f003 0301 	and.w	r3, r3, #1
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d101      	bne.n	8017c00 <LL_RCC_LSE_IsEnabled+0x18>
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	e000      	b.n	8017c02 <LL_RCC_LSE_IsEnabled+0x1a>
 8017c00:	2300      	movs	r3, #0
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	46bd      	mov	sp, r7
 8017c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0a:	4770      	bx	lr

08017c0c <LL_RCC_LSE_IsReady>:
{
 8017c0c:	b480      	push	{r7}
 8017c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c18:	f003 0302 	and.w	r3, r3, #2
 8017c1c:	2b02      	cmp	r3, #2
 8017c1e:	d101      	bne.n	8017c24 <LL_RCC_LSE_IsReady+0x18>
 8017c20:	2301      	movs	r3, #1
 8017c22:	e000      	b.n	8017c26 <LL_RCC_LSE_IsReady+0x1a>
 8017c24:	2300      	movs	r3, #0
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr

08017c30 <LL_RCC_MSI_EnablePLLMode>:
{
 8017c30:	b480      	push	{r7}
 8017c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017c3e:	f043 0304 	orr.w	r3, r3, #4
 8017c42:	6013      	str	r3, [r2, #0]
}
 8017c44:	bf00      	nop
 8017c46:	46bd      	mov	sp, r7
 8017c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4c:	4770      	bx	lr

08017c4e <LL_RCC_SetRFWKPClockSource>:
{
 8017c4e:	b480      	push	{r7}
 8017c50:	b083      	sub	sp, #12
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017c5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	4313      	orrs	r3, r2
 8017c6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017c6e:	bf00      	nop
 8017c70:	370c      	adds	r7, #12
 8017c72:	46bd      	mov	sp, r7
 8017c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c78:	4770      	bx	lr

08017c7a <LL_RCC_SetSMPSClockSource>:
{
 8017c7a:	b480      	push	{r7}
 8017c7c:	b083      	sub	sp, #12
 8017c7e:	af00      	add	r7, sp, #0
 8017c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c88:	f023 0203 	bic.w	r2, r3, #3
 8017c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	4313      	orrs	r3, r2
 8017c94:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017c96:	bf00      	nop
 8017c98:	370c      	adds	r7, #12
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr

08017ca2 <LL_RCC_SetSMPSPrescaler>:
{
 8017ca2:	b480      	push	{r7}
 8017ca4:	b083      	sub	sp, #12
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	4313      	orrs	r3, r2
 8017cbc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017cbe:	bf00      	nop
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <LL_RCC_SetUSARTClockSource>:
{
 8017cca:	b480      	push	{r7}
 8017ccc:	b083      	sub	sp, #12
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cda:	f023 0203 	bic.w	r2, r3, #3
 8017cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	4313      	orrs	r3, r2
 8017ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017cea:	bf00      	nop
 8017cec:	370c      	adds	r7, #12
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf4:	4770      	bx	lr

08017cf6 <LL_RCC_SetLPUARTClockSource>:
{
 8017cf6:	b480      	push	{r7}
 8017cf8:	b083      	sub	sp, #12
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	4313      	orrs	r3, r2
 8017d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d16:	bf00      	nop
 8017d18:	370c      	adds	r7, #12
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d20:	4770      	bx	lr

08017d22 <LL_RCC_SetI2CClockSource>:
{
 8017d22:	b480      	push	{r7}
 8017d24:	b083      	sub	sp, #12
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	091b      	lsrs	r3, r3, #4
 8017d36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017d3a:	43db      	mvns	r3, r3
 8017d3c:	401a      	ands	r2, r3
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	011b      	lsls	r3, r3, #4
 8017d42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d4a:	4313      	orrs	r3, r2
 8017d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d50:	bf00      	nop
 8017d52:	370c      	adds	r7, #12
 8017d54:	46bd      	mov	sp, r7
 8017d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5a:	4770      	bx	lr

08017d5c <LL_RCC_SetLPTIMClockSource>:
{
 8017d5c:	b480      	push	{r7}
 8017d5e:	b083      	sub	sp, #12
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	0c1b      	lsrs	r3, r3, #16
 8017d70:	041b      	lsls	r3, r3, #16
 8017d72:	43db      	mvns	r3, r3
 8017d74:	401a      	ands	r2, r3
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	041b      	lsls	r3, r3, #16
 8017d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d84:	bf00      	nop
 8017d86:	370c      	adds	r7, #12
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8e:	4770      	bx	lr

08017d90 <LL_RCC_SetSAIClockSource>:
{
 8017d90:	b480      	push	{r7}
 8017d92:	b083      	sub	sp, #12
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	4313      	orrs	r3, r2
 8017dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017db0:	bf00      	nop
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <LL_RCC_SetRNGClockSource>:
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b083      	sub	sp, #12
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dcc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	4313      	orrs	r3, r2
 8017dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017ddc:	bf00      	nop
 8017dde:	370c      	adds	r7, #12
 8017de0:	46bd      	mov	sp, r7
 8017de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de6:	4770      	bx	lr

08017de8 <LL_RCC_SetCLK48ClockSource>:
{
 8017de8:	b480      	push	{r7}
 8017dea:	b083      	sub	sp, #12
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	4313      	orrs	r3, r2
 8017e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e08:	bf00      	nop
 8017e0a:	370c      	adds	r7, #12
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <LL_RCC_SetUSBClockSource>:
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7ff ffe3 	bl	8017de8 <LL_RCC_SetCLK48ClockSource>
}
 8017e22:	bf00      	nop
 8017e24:	3708      	adds	r7, #8
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}

08017e2a <LL_RCC_SetADCClockSource>:
{
 8017e2a:	b480      	push	{r7}
 8017e2c:	b083      	sub	sp, #12
 8017e2e:	af00      	add	r7, sp, #0
 8017e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	4313      	orrs	r3, r2
 8017e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e4a:	bf00      	nop
 8017e4c:	370c      	adds	r7, #12
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e54:	4770      	bx	lr

08017e56 <LL_RCC_SetRTCClockSource>:
{
 8017e56:	b480      	push	{r7}
 8017e58:	b083      	sub	sp, #12
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	4313      	orrs	r3, r2
 8017e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017e76:	bf00      	nop
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e80:	4770      	bx	lr

08017e82 <LL_RCC_GetRTCClockSource>:
{
 8017e82:	b480      	push	{r7}
 8017e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8017e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <LL_RCC_ForceBackupDomainReset>:
{
 8017e9c:	b480      	push	{r7}
 8017e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017eb4:	bf00      	nop
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebc:	4770      	bx	lr

08017ebe <LL_RCC_ReleaseBackupDomainReset>:
{
 8017ebe:	b480      	push	{r7}
 8017ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017ed6:	bf00      	nop
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr

08017ee0 <LL_RCC_PLLSAI1_Enable>:
{
 8017ee0:	b480      	push	{r7}
 8017ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017ef2:	6013      	str	r3, [r2, #0]
}
 8017ef4:	bf00      	nop
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efc:	4770      	bx	lr

08017efe <LL_RCC_PLLSAI1_Disable>:
{
 8017efe:	b480      	push	{r7}
 8017f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017f10:	6013      	str	r3, [r2, #0]
}
 8017f12:	bf00      	nop
 8017f14:	46bd      	mov	sp, r7
 8017f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1a:	4770      	bx	lr

08017f1c <LL_RCC_PLLSAI1_IsReady>:
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8017f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f2e:	d101      	bne.n	8017f34 <LL_RCC_PLLSAI1_IsReady+0x18>
 8017f30:	2301      	movs	r3, #1
 8017f32:	e000      	b.n	8017f36 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3e:	4770      	bx	lr

08017f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b088      	sub	sp, #32
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8017f48:	2300      	movs	r3, #0
 8017f4a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d034      	beq.n	8017fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017f64:	d021      	beq.n	8017faa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8017f66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017f6a:	d81b      	bhi.n	8017fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f70:	d01d      	beq.n	8017fae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8017f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f76:	d815      	bhi.n	8017fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d00b      	beq.n	8017f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8017f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017f80:	d110      	bne.n	8017fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8017f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017f90:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8017f92:	e00d      	b.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	3304      	adds	r3, #4
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f000 f94d 	bl	8018238 <RCCEx_PLLSAI1_ConfigNP>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017fa2:	e005      	b.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	77fb      	strb	r3, [r7, #31]
        break;
 8017fa8:	e002      	b.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017faa:	bf00      	nop
 8017fac:	e000      	b.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017fb0:	7ffb      	ldrb	r3, [r7, #31]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d105      	bne.n	8017fc2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7ff fee8 	bl	8017d90 <LL_RCC_SetSAIClockSource>
 8017fc0:	e001      	b.n	8017fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017fc2:	7ffb      	ldrb	r3, [r7, #31]
 8017fc4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d046      	beq.n	8018060 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8017fd2:	f7ff ff56 	bl	8017e82 <LL_RCC_GetRTCClockSource>
 8017fd6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fdc:	69ba      	ldr	r2, [r7, #24]
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d03c      	beq.n	801805c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017fe2:	f7fe fc1b 	bl	801681c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8017fe6:	69bb      	ldr	r3, [r7, #24]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d105      	bne.n	8017ff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7ff ff30 	bl	8017e56 <LL_RCC_SetRTCClockSource>
 8017ff6:	e02e      	b.n	8018056 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8017ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018000:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8018002:	f7ff ff4b 	bl	8017e9c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8018006:	f7ff ff5a 	bl	8017ebe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018014:	4313      	orrs	r3, r2
 8018016:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8018018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8018022:	f7ff fde1 	bl	8017be8 <LL_RCC_LSE_IsEnabled>
 8018026:	4603      	mov	r3, r0
 8018028:	2b01      	cmp	r3, #1
 801802a:	d114      	bne.n	8018056 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801802c:	f7fd f974 	bl	8015318 <HAL_GetTick>
 8018030:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8018032:	e00b      	b.n	801804c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018034:	f7fd f970 	bl	8015318 <HAL_GetTick>
 8018038:	4602      	mov	r2, r0
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	1ad3      	subs	r3, r2, r3
 801803e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018042:	4293      	cmp	r3, r2
 8018044:	d902      	bls.n	801804c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8018046:	2303      	movs	r3, #3
 8018048:	77fb      	strb	r3, [r7, #31]
              break;
 801804a:	e004      	b.n	8018056 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801804c:	f7ff fdde 	bl	8017c0c <LL_RCC_LSE_IsReady>
 8018050:	4603      	mov	r3, r0
 8018052:	2b01      	cmp	r3, #1
 8018054:	d1ee      	bne.n	8018034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8018056:	7ffb      	ldrb	r3, [r7, #31]
 8018058:	77bb      	strb	r3, [r7, #30]
 801805a:	e001      	b.n	8018060 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801805c:	7ffb      	ldrb	r3, [r7, #31]
 801805e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f003 0301 	and.w	r3, r3, #1
 8018068:	2b00      	cmp	r3, #0
 801806a:	d004      	beq.n	8018076 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	699b      	ldr	r3, [r3, #24]
 8018070:	4618      	mov	r0, r3
 8018072:	f7ff fe2a 	bl	8017cca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	f003 0302 	and.w	r3, r3, #2
 801807e:	2b00      	cmp	r3, #0
 8018080:	d004      	beq.n	801808c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	69db      	ldr	r3, [r3, #28]
 8018086:	4618      	mov	r0, r3
 8018088:	f7ff fe35 	bl	8017cf6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	f003 0310 	and.w	r3, r3, #16
 8018094:	2b00      	cmp	r3, #0
 8018096:	d004      	beq.n	80180a2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801809c:	4618      	mov	r0, r3
 801809e:	f7ff fe5d 	bl	8017d5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f003 0320 	and.w	r3, r3, #32
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d004      	beq.n	80180b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7ff fe52 	bl	8017d5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	f003 0304 	and.w	r3, r3, #4
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d004      	beq.n	80180ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6a1b      	ldr	r3, [r3, #32]
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7ff fe2a 	bl	8017d22 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	f003 0308 	and.w	r3, r3, #8
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d004      	beq.n	80180e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180de:	4618      	mov	r0, r3
 80180e0:	f7ff fe1f 	bl	8017d22 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d022      	beq.n	8018136 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7ff fe8d 	bl	8017e14 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018102:	d107      	bne.n	8018114 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8018104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018108:	68db      	ldr	r3, [r3, #12]
 801810a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801810e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018112:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801811c:	d10b      	bne.n	8018136 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	3304      	adds	r3, #4
 8018122:	4618      	mov	r0, r3
 8018124:	f000 f8e3 	bl	80182ee <RCCEx_PLLSAI1_ConfigNQ>
 8018128:	4603      	mov	r3, r0
 801812a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801812c:	7ffb      	ldrb	r3, [r7, #31]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8018132:	7ffb      	ldrb	r3, [r7, #31]
 8018134:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801813e:	2b00      	cmp	r3, #0
 8018140:	d02b      	beq.n	801819a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801814a:	d008      	beq.n	801815e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018154:	d003      	beq.n	801815e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801815a:	2b00      	cmp	r3, #0
 801815c:	d105      	bne.n	801816a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018162:	4618      	mov	r0, r3
 8018164:	f7ff fe2a 	bl	8017dbc <LL_RCC_SetRNGClockSource>
 8018168:	e00a      	b.n	8018180 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801816e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	2000      	movs	r0, #0
 8018176:	f7ff fe21 	bl	8017dbc <LL_RCC_SetRNGClockSource>
 801817a:	68f8      	ldr	r0, [r7, #12]
 801817c:	f7ff fe34 	bl	8017de8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018184:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018188:	d107      	bne.n	801819a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801818a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801818e:	68db      	ldr	r3, [r3, #12]
 8018190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018198:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d022      	beq.n	80181ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7ff fe3d 	bl	8017e2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80181b8:	d107      	bne.n	80181ca <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80181ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181be:	68db      	ldr	r3, [r3, #12]
 80181c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80181c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80181d2:	d10b      	bne.n	80181ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	3304      	adds	r3, #4
 80181d8:	4618      	mov	r0, r3
 80181da:	f000 f8e3 	bl	80183a4 <RCCEx_PLLSAI1_ConfigNR>
 80181de:	4603      	mov	r3, r0
 80181e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80181e2:	7ffb      	ldrb	r3, [r7, #31]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d001      	beq.n	80181ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80181e8:	7ffb      	ldrb	r3, [r7, #31]
 80181ea:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d004      	beq.n	8018202 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7ff fd26 	bl	8017c4e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801820a:	2b00      	cmp	r3, #0
 801820c:	d009      	beq.n	8018222 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018212:	4618      	mov	r0, r3
 8018214:	f7ff fd45 	bl	8017ca2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801821c:	4618      	mov	r0, r3
 801821e:	f7ff fd2c 	bl	8017c7a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8018222:	7fbb      	ldrb	r3, [r7, #30]
}
 8018224:	4618      	mov	r0, r3
 8018226:	3720      	adds	r7, #32
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}

0801822c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018230:	f7ff fcfe 	bl	8017c30 <LL_RCC_MSI_EnablePLLMode>
}
 8018234:	bf00      	nop
 8018236:	bd80      	pop	{r7, pc}

08018238 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b084      	sub	sp, #16
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018240:	2300      	movs	r3, #0
 8018242:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018244:	f7ff fe5b 	bl	8017efe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018248:	f7fd f866 	bl	8015318 <HAL_GetTick>
 801824c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801824e:	e009      	b.n	8018264 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018250:	f7fd f862 	bl	8015318 <HAL_GetTick>
 8018254:	4602      	mov	r2, r0
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	1ad3      	subs	r3, r2, r3
 801825a:	2b02      	cmp	r3, #2
 801825c:	d902      	bls.n	8018264 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801825e:	2303      	movs	r3, #3
 8018260:	73fb      	strb	r3, [r7, #15]
      break;
 8018262:	e004      	b.n	801826e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018264:	f7ff fe5a 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 8018268:	4603      	mov	r3, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	d1f0      	bne.n	8018250 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801826e:	7bfb      	ldrb	r3, [r7, #15]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d137      	bne.n	80182e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018278:	691b      	ldr	r3, [r3, #16]
 801827a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	021b      	lsls	r3, r3, #8
 8018284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018288:	4313      	orrs	r3, r2
 801828a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801828c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018290:	691b      	ldr	r3, [r3, #16]
 8018292:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801829e:	4313      	orrs	r3, r2
 80182a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80182a2:	f7ff fe1d 	bl	8017ee0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80182a6:	f7fd f837 	bl	8015318 <HAL_GetTick>
 80182aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80182ac:	e009      	b.n	80182c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80182ae:	f7fd f833 	bl	8015318 <HAL_GetTick>
 80182b2:	4602      	mov	r2, r0
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	1ad3      	subs	r3, r2, r3
 80182b8:	2b02      	cmp	r3, #2
 80182ba:	d902      	bls.n	80182c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80182bc:	2303      	movs	r3, #3
 80182be:	73fb      	strb	r3, [r7, #15]
        break;
 80182c0:	e004      	b.n	80182cc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80182c2:	f7ff fe2b 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 80182c6:	4603      	mov	r3, r0
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d1f0      	bne.n	80182ae <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80182cc:	7bfb      	ldrb	r3, [r7, #15]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d108      	bne.n	80182e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80182d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182d6:	691a      	ldr	r2, [r3, #16]
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	691b      	ldr	r3, [r3, #16]
 80182dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182e0:	4313      	orrs	r3, r2
 80182e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80182e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3710      	adds	r7, #16
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b084      	sub	sp, #16
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80182f6:	2300      	movs	r3, #0
 80182f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80182fa:	f7ff fe00 	bl	8017efe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80182fe:	f7fd f80b 	bl	8015318 <HAL_GetTick>
 8018302:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018304:	e009      	b.n	801831a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018306:	f7fd f807 	bl	8015318 <HAL_GetTick>
 801830a:	4602      	mov	r2, r0
 801830c:	68bb      	ldr	r3, [r7, #8]
 801830e:	1ad3      	subs	r3, r2, r3
 8018310:	2b02      	cmp	r3, #2
 8018312:	d902      	bls.n	801831a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8018314:	2303      	movs	r3, #3
 8018316:	73fb      	strb	r3, [r7, #15]
      break;
 8018318:	e004      	b.n	8018324 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801831a:	f7ff fdff 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 801831e:	4603      	mov	r3, r0
 8018320:	2b00      	cmp	r3, #0
 8018322:	d1f0      	bne.n	8018306 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8018324:	7bfb      	ldrb	r3, [r7, #15]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d137      	bne.n	801839a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801832a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801832e:	691b      	ldr	r3, [r3, #16]
 8018330:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	021b      	lsls	r3, r3, #8
 801833a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801833e:	4313      	orrs	r3, r2
 8018340:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8018342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018346:	691b      	ldr	r3, [r3, #16]
 8018348:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	689b      	ldr	r3, [r3, #8]
 8018350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018354:	4313      	orrs	r3, r2
 8018356:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018358:	f7ff fdc2 	bl	8017ee0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801835c:	f7fc ffdc 	bl	8015318 <HAL_GetTick>
 8018360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018362:	e009      	b.n	8018378 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018364:	f7fc ffd8 	bl	8015318 <HAL_GetTick>
 8018368:	4602      	mov	r2, r0
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	1ad3      	subs	r3, r2, r3
 801836e:	2b02      	cmp	r3, #2
 8018370:	d902      	bls.n	8018378 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8018372:	2303      	movs	r3, #3
 8018374:	73fb      	strb	r3, [r7, #15]
        break;
 8018376:	e004      	b.n	8018382 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018378:	f7ff fdd0 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 801837c:	4603      	mov	r3, r0
 801837e:	2b01      	cmp	r3, #1
 8018380:	d1f0      	bne.n	8018364 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8018382:	7bfb      	ldrb	r3, [r7, #15]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d108      	bne.n	801839a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801838c:	691a      	ldr	r2, [r3, #16]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	691b      	ldr	r3, [r3, #16]
 8018392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018396:	4313      	orrs	r3, r2
 8018398:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801839a:	7bfb      	ldrb	r3, [r7, #15]
}
 801839c:	4618      	mov	r0, r3
 801839e:	3710      	adds	r7, #16
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}

080183a4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b084      	sub	sp, #16
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80183ac:	2300      	movs	r3, #0
 80183ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80183b0:	f7ff fda5 	bl	8017efe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80183b4:	f7fc ffb0 	bl	8015318 <HAL_GetTick>
 80183b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183ba:	e009      	b.n	80183d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80183bc:	f7fc ffac 	bl	8015318 <HAL_GetTick>
 80183c0:	4602      	mov	r2, r0
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	1ad3      	subs	r3, r2, r3
 80183c6:	2b02      	cmp	r3, #2
 80183c8:	d902      	bls.n	80183d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80183ca:	2303      	movs	r3, #3
 80183cc:	73fb      	strb	r3, [r7, #15]
      break;
 80183ce:	e004      	b.n	80183da <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183d0:	f7ff fda4 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 80183d4:	4603      	mov	r3, r0
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d1f0      	bne.n	80183bc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80183da:	7bfb      	ldrb	r3, [r7, #15]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d137      	bne.n	8018450 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80183e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183e4:	691b      	ldr	r3, [r3, #16]
 80183e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	021b      	lsls	r3, r3, #8
 80183f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183f4:	4313      	orrs	r3, r2
 80183f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80183f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183fc:	691b      	ldr	r3, [r3, #16]
 80183fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	68db      	ldr	r3, [r3, #12]
 8018406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801840a:	4313      	orrs	r3, r2
 801840c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801840e:	f7ff fd67 	bl	8017ee0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018412:	f7fc ff81 	bl	8015318 <HAL_GetTick>
 8018416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018418:	e009      	b.n	801842e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801841a:	f7fc ff7d 	bl	8015318 <HAL_GetTick>
 801841e:	4602      	mov	r2, r0
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	1ad3      	subs	r3, r2, r3
 8018424:	2b02      	cmp	r3, #2
 8018426:	d902      	bls.n	801842e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018428:	2303      	movs	r3, #3
 801842a:	73fb      	strb	r3, [r7, #15]
        break;
 801842c:	e004      	b.n	8018438 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801842e:	f7ff fd75 	bl	8017f1c <LL_RCC_PLLSAI1_IsReady>
 8018432:	4603      	mov	r3, r0
 8018434:	2b01      	cmp	r3, #1
 8018436:	d1f0      	bne.n	801841a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018438:	7bfb      	ldrb	r3, [r7, #15]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d108      	bne.n	8018450 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801843e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018442:	691a      	ldr	r2, [r3, #16]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	691b      	ldr	r3, [r3, #16]
 8018448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801844c:	4313      	orrs	r3, r2
 801844e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018450:	7bfb      	ldrb	r3, [r7, #15]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801845a:	b580      	push	{r7, lr}
 801845c:	b082      	sub	sp, #8
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d101      	bne.n	801846c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018468:	2301      	movs	r3, #1
 801846a:	e049      	b.n	8018500 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018472:	b2db      	uxtb	r3, r3
 8018474:	2b00      	cmp	r3, #0
 8018476:	d106      	bne.n	8018486 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	2200      	movs	r2, #0
 801847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f000 f841 	bl	8018508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2202      	movs	r2, #2
 801848a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681a      	ldr	r2, [r3, #0]
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	3304      	adds	r3, #4
 8018496:	4619      	mov	r1, r3
 8018498:	4610      	mov	r0, r2
 801849a:	f000 f9d5 	bl	8018848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	2201      	movs	r2, #1
 80184a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	2201      	movs	r2, #1
 80184aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	2201      	movs	r2, #1
 80184b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2201      	movs	r2, #1
 80184ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2201      	movs	r2, #1
 80184c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2201      	movs	r2, #1
 80184ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2201      	movs	r2, #1
 80184d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2201      	movs	r2, #1
 80184da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2201      	movs	r2, #1
 80184e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	2201      	movs	r2, #1
 80184ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2201      	movs	r2, #1
 80184f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	2201      	movs	r2, #1
 80184fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80184fe:	2300      	movs	r3, #0
}
 8018500:	4618      	mov	r0, r3
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018508:	b480      	push	{r7}
 801850a:	b083      	sub	sp, #12
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018510:	bf00      	nop
 8018512:	370c      	adds	r7, #12
 8018514:	46bd      	mov	sp, r7
 8018516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851a:	4770      	bx	lr

0801851c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801851c:	b480      	push	{r7}
 801851e:	b085      	sub	sp, #20
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801852a:	b2db      	uxtb	r3, r3
 801852c:	2b01      	cmp	r3, #1
 801852e:	d001      	beq.n	8018534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018530:	2301      	movs	r3, #1
 8018532:	e036      	b.n	80185a2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2202      	movs	r2, #2
 8018538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	68da      	ldr	r2, [r3, #12]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	f042 0201 	orr.w	r2, r2, #1
 801854a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	4a17      	ldr	r2, [pc, #92]	; (80185b0 <HAL_TIM_Base_Start_IT+0x94>)
 8018552:	4293      	cmp	r3, r2
 8018554:	d004      	beq.n	8018560 <HAL_TIM_Base_Start_IT+0x44>
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801855e:	d115      	bne.n	801858c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	689a      	ldr	r2, [r3, #8]
 8018566:	4b13      	ldr	r3, [pc, #76]	; (80185b4 <HAL_TIM_Base_Start_IT+0x98>)
 8018568:	4013      	ands	r3, r2
 801856a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2b06      	cmp	r3, #6
 8018570:	d015      	beq.n	801859e <HAL_TIM_Base_Start_IT+0x82>
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018578:	d011      	beq.n	801859e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f042 0201 	orr.w	r2, r2, #1
 8018588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801858a:	e008      	b.n	801859e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	f042 0201 	orr.w	r2, r2, #1
 801859a:	601a      	str	r2, [r3, #0]
 801859c:	e000      	b.n	80185a0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801859e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80185a0:	2300      	movs	r3, #0
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	3714      	adds	r7, #20
 80185a6:	46bd      	mov	sp, r7
 80185a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	40012c00 	.word	0x40012c00
 80185b4:	00010007 	.word	0x00010007

080185b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b082      	sub	sp, #8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	691b      	ldr	r3, [r3, #16]
 80185c6:	f003 0302 	and.w	r3, r3, #2
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	d122      	bne.n	8018614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	68db      	ldr	r3, [r3, #12]
 80185d4:	f003 0302 	and.w	r3, r3, #2
 80185d8:	2b02      	cmp	r3, #2
 80185da:	d11b      	bne.n	8018614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	f06f 0202 	mvn.w	r2, #2
 80185e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	2201      	movs	r2, #1
 80185ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	699b      	ldr	r3, [r3, #24]
 80185f2:	f003 0303 	and.w	r3, r3, #3
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d003      	beq.n	8018602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f000 f905 	bl	801880a <HAL_TIM_IC_CaptureCallback>
 8018600:	e005      	b.n	801860e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018602:	6878      	ldr	r0, [r7, #4]
 8018604:	f000 f8f7 	bl	80187f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f000 f908 	bl	801881e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2200      	movs	r2, #0
 8018612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	691b      	ldr	r3, [r3, #16]
 801861a:	f003 0304 	and.w	r3, r3, #4
 801861e:	2b04      	cmp	r3, #4
 8018620:	d122      	bne.n	8018668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	68db      	ldr	r3, [r3, #12]
 8018628:	f003 0304 	and.w	r3, r3, #4
 801862c:	2b04      	cmp	r3, #4
 801862e:	d11b      	bne.n	8018668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	f06f 0204 	mvn.w	r2, #4
 8018638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	2202      	movs	r2, #2
 801863e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	699b      	ldr	r3, [r3, #24]
 8018646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801864a:	2b00      	cmp	r3, #0
 801864c:	d003      	beq.n	8018656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f000 f8db 	bl	801880a <HAL_TIM_IC_CaptureCallback>
 8018654:	e005      	b.n	8018662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	f000 f8cd 	bl	80187f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f000 f8de 	bl	801881e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2200      	movs	r2, #0
 8018666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	691b      	ldr	r3, [r3, #16]
 801866e:	f003 0308 	and.w	r3, r3, #8
 8018672:	2b08      	cmp	r3, #8
 8018674:	d122      	bne.n	80186bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	68db      	ldr	r3, [r3, #12]
 801867c:	f003 0308 	and.w	r3, r3, #8
 8018680:	2b08      	cmp	r3, #8
 8018682:	d11b      	bne.n	80186bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	f06f 0208 	mvn.w	r2, #8
 801868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	2204      	movs	r2, #4
 8018692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	69db      	ldr	r3, [r3, #28]
 801869a:	f003 0303 	and.w	r3, r3, #3
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d003      	beq.n	80186aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80186a2:	6878      	ldr	r0, [r7, #4]
 80186a4:	f000 f8b1 	bl	801880a <HAL_TIM_IC_CaptureCallback>
 80186a8:	e005      	b.n	80186b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f000 f8a3 	bl	80187f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f000 f8b4 	bl	801881e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	2200      	movs	r2, #0
 80186ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	691b      	ldr	r3, [r3, #16]
 80186c2:	f003 0310 	and.w	r3, r3, #16
 80186c6:	2b10      	cmp	r3, #16
 80186c8:	d122      	bne.n	8018710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	68db      	ldr	r3, [r3, #12]
 80186d0:	f003 0310 	and.w	r3, r3, #16
 80186d4:	2b10      	cmp	r3, #16
 80186d6:	d11b      	bne.n	8018710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	f06f 0210 	mvn.w	r2, #16
 80186e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2208      	movs	r2, #8
 80186e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	69db      	ldr	r3, [r3, #28]
 80186ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d003      	beq.n	80186fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	f000 f887 	bl	801880a <HAL_TIM_IC_CaptureCallback>
 80186fc:	e005      	b.n	801870a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f000 f879 	bl	80187f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 f88a 	bl	801881e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2200      	movs	r2, #0
 801870e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	691b      	ldr	r3, [r3, #16]
 8018716:	f003 0301 	and.w	r3, r3, #1
 801871a:	2b01      	cmp	r3, #1
 801871c:	d10e      	bne.n	801873c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	f003 0301 	and.w	r3, r3, #1
 8018728:	2b01      	cmp	r3, #1
 801872a:	d107      	bne.n	801873c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	f06f 0201 	mvn.w	r2, #1
 8018734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f7e8 f9dc 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	691b      	ldr	r3, [r3, #16]
 8018742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018746:	2b80      	cmp	r3, #128	; 0x80
 8018748:	d10e      	bne.n	8018768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018754:	2b80      	cmp	r3, #128	; 0x80
 8018756:	d107      	bne.n	8018768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018762:	6878      	ldr	r0, [r7, #4]
 8018764:	f000 f8de 	bl	8018924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	691b      	ldr	r3, [r3, #16]
 801876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018776:	d10e      	bne.n	8018796 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	68db      	ldr	r3, [r3, #12]
 801877e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018782:	2b80      	cmp	r3, #128	; 0x80
 8018784:	d107      	bne.n	8018796 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801878e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f000 f8d1 	bl	8018938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	691b      	ldr	r3, [r3, #16]
 801879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187a0:	2b40      	cmp	r3, #64	; 0x40
 80187a2:	d10e      	bne.n	80187c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187ae:	2b40      	cmp	r3, #64	; 0x40
 80187b0:	d107      	bne.n	80187c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80187ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	f000 f838 	bl	8018832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	691b      	ldr	r3, [r3, #16]
 80187c8:	f003 0320 	and.w	r3, r3, #32
 80187cc:	2b20      	cmp	r3, #32
 80187ce:	d10e      	bne.n	80187ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	68db      	ldr	r3, [r3, #12]
 80187d6:	f003 0320 	and.w	r3, r3, #32
 80187da:	2b20      	cmp	r3, #32
 80187dc:	d107      	bne.n	80187ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	f06f 0220 	mvn.w	r2, #32
 80187e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80187e8:	6878      	ldr	r0, [r7, #4]
 80187ea:	f000 f891 	bl	8018910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80187ee:	bf00      	nop
 80187f0:	3708      	adds	r7, #8
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80187f6:	b480      	push	{r7}
 80187f8:	b083      	sub	sp, #12
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80187fe:	bf00      	nop
 8018800:	370c      	adds	r7, #12
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr

0801880a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801880a:	b480      	push	{r7}
 801880c:	b083      	sub	sp, #12
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018812:	bf00      	nop
 8018814:	370c      	adds	r7, #12
 8018816:	46bd      	mov	sp, r7
 8018818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881c:	4770      	bx	lr

0801881e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801881e:	b480      	push	{r7}
 8018820:	b083      	sub	sp, #12
 8018822:	af00      	add	r7, sp, #0
 8018824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018826:	bf00      	nop
 8018828:	370c      	adds	r7, #12
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr

08018832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018832:	b480      	push	{r7}
 8018834:	b083      	sub	sp, #12
 8018836:	af00      	add	r7, sp, #0
 8018838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801883a:	bf00      	nop
 801883c:	370c      	adds	r7, #12
 801883e:	46bd      	mov	sp, r7
 8018840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018844:	4770      	bx	lr
	...

08018848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018848:	b480      	push	{r7}
 801884a:	b085      	sub	sp, #20
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	4a2a      	ldr	r2, [pc, #168]	; (8018904 <TIM_Base_SetConfig+0xbc>)
 801885c:	4293      	cmp	r3, r2
 801885e:	d003      	beq.n	8018868 <TIM_Base_SetConfig+0x20>
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018866:	d108      	bne.n	801887a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801886e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	68fa      	ldr	r2, [r7, #12]
 8018876:	4313      	orrs	r3, r2
 8018878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4a21      	ldr	r2, [pc, #132]	; (8018904 <TIM_Base_SetConfig+0xbc>)
 801887e:	4293      	cmp	r3, r2
 8018880:	d00b      	beq.n	801889a <TIM_Base_SetConfig+0x52>
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018888:	d007      	beq.n	801889a <TIM_Base_SetConfig+0x52>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	4a1e      	ldr	r2, [pc, #120]	; (8018908 <TIM_Base_SetConfig+0xc0>)
 801888e:	4293      	cmp	r3, r2
 8018890:	d003      	beq.n	801889a <TIM_Base_SetConfig+0x52>
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4a1d      	ldr	r2, [pc, #116]	; (801890c <TIM_Base_SetConfig+0xc4>)
 8018896:	4293      	cmp	r3, r2
 8018898:	d108      	bne.n	80188ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80188a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	68fa      	ldr	r2, [r7, #12]
 80188a8:	4313      	orrs	r3, r2
 80188aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	695b      	ldr	r3, [r3, #20]
 80188b6:	4313      	orrs	r3, r2
 80188b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	68fa      	ldr	r2, [r7, #12]
 80188be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	689a      	ldr	r2, [r3, #8]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	681a      	ldr	r2, [r3, #0]
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	4a0c      	ldr	r2, [pc, #48]	; (8018904 <TIM_Base_SetConfig+0xbc>)
 80188d4:	4293      	cmp	r3, r2
 80188d6:	d007      	beq.n	80188e8 <TIM_Base_SetConfig+0xa0>
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	4a0b      	ldr	r2, [pc, #44]	; (8018908 <TIM_Base_SetConfig+0xc0>)
 80188dc:	4293      	cmp	r3, r2
 80188de:	d003      	beq.n	80188e8 <TIM_Base_SetConfig+0xa0>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	4a0a      	ldr	r2, [pc, #40]	; (801890c <TIM_Base_SetConfig+0xc4>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d103      	bne.n	80188f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	691a      	ldr	r2, [r3, #16]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2201      	movs	r2, #1
 80188f4:	615a      	str	r2, [r3, #20]
}
 80188f6:	bf00      	nop
 80188f8:	3714      	adds	r7, #20
 80188fa:	46bd      	mov	sp, r7
 80188fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018900:	4770      	bx	lr
 8018902:	bf00      	nop
 8018904:	40012c00 	.word	0x40012c00
 8018908:	40014400 	.word	0x40014400
 801890c:	40014800 	.word	0x40014800

08018910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018910:	b480      	push	{r7}
 8018912:	b083      	sub	sp, #12
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018918:	bf00      	nop
 801891a:	370c      	adds	r7, #12
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr

08018924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801892c:	bf00      	nop
 801892e:	370c      	adds	r7, #12
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr

08018938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018938:	b480      	push	{r7}
 801893a:	b083      	sub	sp, #12
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018940:	bf00      	nop
 8018942:	370c      	adds	r7, #12
 8018944:	46bd      	mov	sp, r7
 8018946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894a:	4770      	bx	lr

0801894c <LL_RCC_GetUSARTClockSource>:
{
 801894c:	b480      	push	{r7}
 801894e:	b083      	sub	sp, #12
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018958:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	4013      	ands	r3, r2
}
 8018960:	4618      	mov	r0, r3
 8018962:	370c      	adds	r7, #12
 8018964:	46bd      	mov	sp, r7
 8018966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896a:	4770      	bx	lr

0801896c <LL_RCC_GetLPUARTClockSource>:
{
 801896c:	b480      	push	{r7}
 801896e:	b083      	sub	sp, #12
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	4013      	ands	r3, r2
}
 8018980:	4618      	mov	r0, r3
 8018982:	370c      	adds	r7, #12
 8018984:	46bd      	mov	sp, r7
 8018986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898a:	4770      	bx	lr

0801898c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d101      	bne.n	801899e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801899a:	2301      	movs	r3, #1
 801899c:	e042      	b.n	8018a24 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d106      	bne.n	80189b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	2200      	movs	r2, #0
 80189ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7e8 f909 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	2224      	movs	r2, #36	; 0x24
 80189ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	681a      	ldr	r2, [r3, #0]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f022 0201 	bic.w	r2, r2, #1
 80189cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80189ce:	6878      	ldr	r0, [r7, #4]
 80189d0:	f000 f82c 	bl	8018a2c <UART_SetConfig>
 80189d4:	4603      	mov	r3, r0
 80189d6:	2b01      	cmp	r3, #1
 80189d8:	d101      	bne.n	80189de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80189da:	2301      	movs	r3, #1
 80189dc:	e022      	b.n	8018a24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d002      	beq.n	80189ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 fa48 	bl	8018e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	685a      	ldr	r2, [r3, #4]
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80189fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	689a      	ldr	r2, [r3, #8]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	681a      	ldr	r2, [r3, #0]
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f042 0201 	orr.w	r2, r2, #1
 8018a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f000 facf 	bl	8018fc0 <UART_CheckIdleState>
 8018a22:	4603      	mov	r3, r0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3708      	adds	r7, #8
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a30:	b08c      	sub	sp, #48	; 0x30
 8018a32:	af00      	add	r7, sp, #0
 8018a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a36:	2300      	movs	r3, #0
 8018a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	689a      	ldr	r2, [r3, #8]
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	691b      	ldr	r3, [r3, #16]
 8018a44:	431a      	orrs	r2, r3
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	695b      	ldr	r3, [r3, #20]
 8018a4a:	431a      	orrs	r2, r3
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	69db      	ldr	r3, [r3, #28]
 8018a50:	4313      	orrs	r3, r2
 8018a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	4baf      	ldr	r3, [pc, #700]	; (8018d18 <UART_SetConfig+0x2ec>)
 8018a5c:	4013      	ands	r3, r2
 8018a5e:	697a      	ldr	r2, [r7, #20]
 8018a60:	6812      	ldr	r2, [r2, #0]
 8018a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a64:	430b      	orrs	r3, r1
 8018a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	68da      	ldr	r2, [r3, #12]
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	430a      	orrs	r2, r1
 8018a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	699b      	ldr	r3, [r3, #24]
 8018a82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4aa4      	ldr	r2, [pc, #656]	; (8018d1c <UART_SetConfig+0x2f0>)
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	d004      	beq.n	8018a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	6a1b      	ldr	r3, [r3, #32]
 8018a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a94:	4313      	orrs	r3, r2
 8018a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	689b      	ldr	r3, [r3, #8]
 8018a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018aa6:	697a      	ldr	r2, [r7, #20]
 8018aa8:	6812      	ldr	r2, [r2, #0]
 8018aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018aac:	430b      	orrs	r3, r1
 8018aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab6:	f023 010f 	bic.w	r1, r3, #15
 8018aba:	697b      	ldr	r3, [r7, #20]
 8018abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	430a      	orrs	r2, r1
 8018ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	4a95      	ldr	r2, [pc, #596]	; (8018d20 <UART_SetConfig+0x2f4>)
 8018acc:	4293      	cmp	r3, r2
 8018ace:	d125      	bne.n	8018b1c <UART_SetConfig+0xf0>
 8018ad0:	2003      	movs	r0, #3
 8018ad2:	f7ff ff3b 	bl	801894c <LL_RCC_GetUSARTClockSource>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	2b03      	cmp	r3, #3
 8018ada:	d81b      	bhi.n	8018b14 <UART_SetConfig+0xe8>
 8018adc:	a201      	add	r2, pc, #4	; (adr r2, 8018ae4 <UART_SetConfig+0xb8>)
 8018ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ae2:	bf00      	nop
 8018ae4:	08018af5 	.word	0x08018af5
 8018ae8:	08018b05 	.word	0x08018b05
 8018aec:	08018afd 	.word	0x08018afd
 8018af0:	08018b0d 	.word	0x08018b0d
 8018af4:	2301      	movs	r3, #1
 8018af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018afa:	e042      	b.n	8018b82 <UART_SetConfig+0x156>
 8018afc:	2302      	movs	r3, #2
 8018afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b02:	e03e      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b04:	2304      	movs	r3, #4
 8018b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b0a:	e03a      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b0c:	2308      	movs	r3, #8
 8018b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b12:	e036      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b14:	2310      	movs	r3, #16
 8018b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b1a:	e032      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a7e      	ldr	r2, [pc, #504]	; (8018d1c <UART_SetConfig+0x2f0>)
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d12a      	bne.n	8018b7c <UART_SetConfig+0x150>
 8018b26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018b2a:	f7ff ff1f 	bl	801896c <LL_RCC_GetLPUARTClockSource>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018b34:	d01a      	beq.n	8018b6c <UART_SetConfig+0x140>
 8018b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018b3a:	d81b      	bhi.n	8018b74 <UART_SetConfig+0x148>
 8018b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b40:	d00c      	beq.n	8018b5c <UART_SetConfig+0x130>
 8018b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b46:	d815      	bhi.n	8018b74 <UART_SetConfig+0x148>
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d003      	beq.n	8018b54 <UART_SetConfig+0x128>
 8018b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b50:	d008      	beq.n	8018b64 <UART_SetConfig+0x138>
 8018b52:	e00f      	b.n	8018b74 <UART_SetConfig+0x148>
 8018b54:	2300      	movs	r3, #0
 8018b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b5a:	e012      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b5c:	2302      	movs	r3, #2
 8018b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b62:	e00e      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b64:	2304      	movs	r3, #4
 8018b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b6a:	e00a      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b6c:	2308      	movs	r3, #8
 8018b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b72:	e006      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b74:	2310      	movs	r3, #16
 8018b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b7a:	e002      	b.n	8018b82 <UART_SetConfig+0x156>
 8018b7c:	2310      	movs	r3, #16
 8018b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	4a65      	ldr	r2, [pc, #404]	; (8018d1c <UART_SetConfig+0x2f0>)
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	f040 8097 	bne.w	8018cbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018b92:	2b08      	cmp	r3, #8
 8018b94:	d823      	bhi.n	8018bde <UART_SetConfig+0x1b2>
 8018b96:	a201      	add	r2, pc, #4	; (adr r2, 8018b9c <UART_SetConfig+0x170>)
 8018b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b9c:	08018bc1 	.word	0x08018bc1
 8018ba0:	08018bdf 	.word	0x08018bdf
 8018ba4:	08018bc9 	.word	0x08018bc9
 8018ba8:	08018bdf 	.word	0x08018bdf
 8018bac:	08018bcf 	.word	0x08018bcf
 8018bb0:	08018bdf 	.word	0x08018bdf
 8018bb4:	08018bdf 	.word	0x08018bdf
 8018bb8:	08018bdf 	.word	0x08018bdf
 8018bbc:	08018bd7 	.word	0x08018bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018bc0:	f7fe ff00 	bl	80179c4 <HAL_RCC_GetPCLK1Freq>
 8018bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018bc6:	e010      	b.n	8018bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018bc8:	4b56      	ldr	r3, [pc, #344]	; (8018d24 <UART_SetConfig+0x2f8>)
 8018bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018bcc:	e00d      	b.n	8018bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018bce:	f7fe fe79 	bl	80178c4 <HAL_RCC_GetSysClockFreq>
 8018bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018bd4:	e009      	b.n	8018bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018bdc:	e005      	b.n	8018bea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018bde:	2300      	movs	r3, #0
 8018be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018be2:	2301      	movs	r3, #1
 8018be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	f000 812b 	beq.w	8018e48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018bf2:	697b      	ldr	r3, [r7, #20]
 8018bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bf6:	4a4c      	ldr	r2, [pc, #304]	; (8018d28 <UART_SetConfig+0x2fc>)
 8018bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018bfc:	461a      	mov	r2, r3
 8018bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	685a      	ldr	r2, [r3, #4]
 8018c0a:	4613      	mov	r3, r2
 8018c0c:	005b      	lsls	r3, r3, #1
 8018c0e:	4413      	add	r3, r2
 8018c10:	69ba      	ldr	r2, [r7, #24]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d305      	bcc.n	8018c22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018c1c:	69ba      	ldr	r2, [r7, #24]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d903      	bls.n	8018c2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018c22:	2301      	movs	r3, #1
 8018c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018c28:	e10e      	b.n	8018e48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	60bb      	str	r3, [r7, #8]
 8018c30:	60fa      	str	r2, [r7, #12]
 8018c32:	697b      	ldr	r3, [r7, #20]
 8018c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c36:	4a3c      	ldr	r2, [pc, #240]	; (8018d28 <UART_SetConfig+0x2fc>)
 8018c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	2200      	movs	r2, #0
 8018c40:	603b      	str	r3, [r7, #0]
 8018c42:	607a      	str	r2, [r7, #4]
 8018c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018c4c:	f7e7 fb38 	bl	80002c0 <__aeabi_uldivmod>
 8018c50:	4602      	mov	r2, r0
 8018c52:	460b      	mov	r3, r1
 8018c54:	4610      	mov	r0, r2
 8018c56:	4619      	mov	r1, r3
 8018c58:	f04f 0200 	mov.w	r2, #0
 8018c5c:	f04f 0300 	mov.w	r3, #0
 8018c60:	020b      	lsls	r3, r1, #8
 8018c62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018c66:	0202      	lsls	r2, r0, #8
 8018c68:	6979      	ldr	r1, [r7, #20]
 8018c6a:	6849      	ldr	r1, [r1, #4]
 8018c6c:	0849      	lsrs	r1, r1, #1
 8018c6e:	2000      	movs	r0, #0
 8018c70:	460c      	mov	r4, r1
 8018c72:	4605      	mov	r5, r0
 8018c74:	eb12 0804 	adds.w	r8, r2, r4
 8018c78:	eb43 0905 	adc.w	r9, r3, r5
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	2200      	movs	r2, #0
 8018c82:	469a      	mov	sl, r3
 8018c84:	4693      	mov	fp, r2
 8018c86:	4652      	mov	r2, sl
 8018c88:	465b      	mov	r3, fp
 8018c8a:	4640      	mov	r0, r8
 8018c8c:	4649      	mov	r1, r9
 8018c8e:	f7e7 fb17 	bl	80002c0 <__aeabi_uldivmod>
 8018c92:	4602      	mov	r2, r0
 8018c94:	460b      	mov	r3, r1
 8018c96:	4613      	mov	r3, r2
 8018c98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018c9a:	6a3b      	ldr	r3, [r7, #32]
 8018c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018ca0:	d308      	bcc.n	8018cb4 <UART_SetConfig+0x288>
 8018ca2:	6a3b      	ldr	r3, [r7, #32]
 8018ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018ca8:	d204      	bcs.n	8018cb4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	6a3a      	ldr	r2, [r7, #32]
 8018cb0:	60da      	str	r2, [r3, #12]
 8018cb2:	e0c9      	b.n	8018e48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018cb4:	2301      	movs	r3, #1
 8018cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018cba:	e0c5      	b.n	8018e48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	69db      	ldr	r3, [r3, #28]
 8018cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018cc4:	d16d      	bne.n	8018da2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018cca:	3b01      	subs	r3, #1
 8018ccc:	2b07      	cmp	r3, #7
 8018cce:	d82d      	bhi.n	8018d2c <UART_SetConfig+0x300>
 8018cd0:	a201      	add	r2, pc, #4	; (adr r2, 8018cd8 <UART_SetConfig+0x2ac>)
 8018cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cd6:	bf00      	nop
 8018cd8:	08018cf9 	.word	0x08018cf9
 8018cdc:	08018d01 	.word	0x08018d01
 8018ce0:	08018d2d 	.word	0x08018d2d
 8018ce4:	08018d07 	.word	0x08018d07
 8018ce8:	08018d2d 	.word	0x08018d2d
 8018cec:	08018d2d 	.word	0x08018d2d
 8018cf0:	08018d2d 	.word	0x08018d2d
 8018cf4:	08018d0f 	.word	0x08018d0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018cf8:	f7fe fe7a 	bl	80179f0 <HAL_RCC_GetPCLK2Freq>
 8018cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018cfe:	e01b      	b.n	8018d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018d00:	4b08      	ldr	r3, [pc, #32]	; (8018d24 <UART_SetConfig+0x2f8>)
 8018d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d04:	e018      	b.n	8018d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018d06:	f7fe fddd 	bl	80178c4 <HAL_RCC_GetSysClockFreq>
 8018d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d0c:	e014      	b.n	8018d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d14:	e010      	b.n	8018d38 <UART_SetConfig+0x30c>
 8018d16:	bf00      	nop
 8018d18:	cfff69f3 	.word	0xcfff69f3
 8018d1c:	40008000 	.word	0x40008000
 8018d20:	40013800 	.word	0x40013800
 8018d24:	00f42400 	.word	0x00f42400
 8018d28:	0801a794 	.word	0x0801a794
      default:
        pclk = 0U;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018d30:	2301      	movs	r3, #1
 8018d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	f000 8084 	beq.w	8018e48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d44:	4a4b      	ldr	r2, [pc, #300]	; (8018e74 <UART_SetConfig+0x448>)
 8018d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d4a:	461a      	mov	r2, r3
 8018d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d52:	005a      	lsls	r2, r3, #1
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	685b      	ldr	r3, [r3, #4]
 8018d58:	085b      	lsrs	r3, r3, #1
 8018d5a:	441a      	add	r2, r3
 8018d5c:	697b      	ldr	r3, [r7, #20]
 8018d5e:	685b      	ldr	r3, [r3, #4]
 8018d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d66:	6a3b      	ldr	r3, [r7, #32]
 8018d68:	2b0f      	cmp	r3, #15
 8018d6a:	d916      	bls.n	8018d9a <UART_SetConfig+0x36e>
 8018d6c:	6a3b      	ldr	r3, [r7, #32]
 8018d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d72:	d212      	bcs.n	8018d9a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018d74:	6a3b      	ldr	r3, [r7, #32]
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	f023 030f 	bic.w	r3, r3, #15
 8018d7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018d7e:	6a3b      	ldr	r3, [r7, #32]
 8018d80:	085b      	lsrs	r3, r3, #1
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	f003 0307 	and.w	r3, r3, #7
 8018d88:	b29a      	uxth	r2, r3
 8018d8a:	8bfb      	ldrh	r3, [r7, #30]
 8018d8c:	4313      	orrs	r3, r2
 8018d8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	8bfa      	ldrh	r2, [r7, #30]
 8018d96:	60da      	str	r2, [r3, #12]
 8018d98:	e056      	b.n	8018e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018da0:	e052      	b.n	8018e48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018da6:	3b01      	subs	r3, #1
 8018da8:	2b07      	cmp	r3, #7
 8018daa:	d822      	bhi.n	8018df2 <UART_SetConfig+0x3c6>
 8018dac:	a201      	add	r2, pc, #4	; (adr r2, 8018db4 <UART_SetConfig+0x388>)
 8018dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018db2:	bf00      	nop
 8018db4:	08018dd5 	.word	0x08018dd5
 8018db8:	08018ddd 	.word	0x08018ddd
 8018dbc:	08018df3 	.word	0x08018df3
 8018dc0:	08018de3 	.word	0x08018de3
 8018dc4:	08018df3 	.word	0x08018df3
 8018dc8:	08018df3 	.word	0x08018df3
 8018dcc:	08018df3 	.word	0x08018df3
 8018dd0:	08018deb 	.word	0x08018deb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018dd4:	f7fe fe0c 	bl	80179f0 <HAL_RCC_GetPCLK2Freq>
 8018dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018dda:	e010      	b.n	8018dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018ddc:	4b26      	ldr	r3, [pc, #152]	; (8018e78 <UART_SetConfig+0x44c>)
 8018dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018de0:	e00d      	b.n	8018dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018de2:	f7fe fd6f 	bl	80178c4 <HAL_RCC_GetSysClockFreq>
 8018de6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018de8:	e009      	b.n	8018dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018df0:	e005      	b.n	8018dfe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8018df2:	2300      	movs	r3, #0
 8018df4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018df6:	2301      	movs	r3, #1
 8018df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8018dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d021      	beq.n	8018e48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e08:	4a1a      	ldr	r2, [pc, #104]	; (8018e74 <UART_SetConfig+0x448>)
 8018e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e0e:	461a      	mov	r2, r3
 8018e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8018e16:	697b      	ldr	r3, [r7, #20]
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	085b      	lsrs	r3, r3, #1
 8018e1c:	441a      	add	r2, r3
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	685b      	ldr	r3, [r3, #4]
 8018e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018e28:	6a3b      	ldr	r3, [r7, #32]
 8018e2a:	2b0f      	cmp	r3, #15
 8018e2c:	d909      	bls.n	8018e42 <UART_SetConfig+0x416>
 8018e2e:	6a3b      	ldr	r3, [r7, #32]
 8018e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e34:	d205      	bcs.n	8018e42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018e36:	6a3b      	ldr	r3, [r7, #32]
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	60da      	str	r2, [r3, #12]
 8018e40:	e002      	b.n	8018e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018e42:	2301      	movs	r3, #1
 8018e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	2201      	movs	r2, #1
 8018e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	2200      	movs	r2, #0
 8018e62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8018e64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3730      	adds	r7, #48	; 0x30
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018e72:	bf00      	nop
 8018e74:	0801a794 	.word	0x0801a794
 8018e78:	00f42400 	.word	0x00f42400

08018e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018e7c:	b480      	push	{r7}
 8018e7e:	b083      	sub	sp, #12
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e88:	f003 0301 	and.w	r3, r3, #1
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d00a      	beq.n	8018ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	430a      	orrs	r2, r1
 8018ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eaa:	f003 0302 	and.w	r3, r3, #2
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d00a      	beq.n	8018ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	685b      	ldr	r3, [r3, #4]
 8018eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	430a      	orrs	r2, r1
 8018ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ecc:	f003 0304 	and.w	r3, r3, #4
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d00a      	beq.n	8018eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	685b      	ldr	r3, [r3, #4]
 8018eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	430a      	orrs	r2, r1
 8018ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eee:	f003 0308 	and.w	r3, r3, #8
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d00a      	beq.n	8018f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	685b      	ldr	r3, [r3, #4]
 8018efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	430a      	orrs	r2, r1
 8018f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f10:	f003 0310 	and.w	r3, r3, #16
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00a      	beq.n	8018f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	689b      	ldr	r3, [r3, #8]
 8018f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	430a      	orrs	r2, r1
 8018f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f32:	f003 0320 	and.w	r3, r3, #32
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d00a      	beq.n	8018f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	689b      	ldr	r3, [r3, #8]
 8018f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	430a      	orrs	r2, r1
 8018f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d01a      	beq.n	8018f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	685b      	ldr	r3, [r3, #4]
 8018f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	430a      	orrs	r2, r1
 8018f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018f7a:	d10a      	bne.n	8018f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	430a      	orrs	r2, r1
 8018f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d00a      	beq.n	8018fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	685b      	ldr	r3, [r3, #4]
 8018fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	430a      	orrs	r2, r1
 8018fb2:	605a      	str	r2, [r3, #4]
  }
}
 8018fb4:	bf00      	nop
 8018fb6:	370c      	adds	r7, #12
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbe:	4770      	bx	lr

08018fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b086      	sub	sp, #24
 8018fc4:	af02      	add	r7, sp, #8
 8018fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018fd0:	f7fc f9a2 	bl	8015318 <HAL_GetTick>
 8018fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f003 0308 	and.w	r3, r3, #8
 8018fe0:	2b08      	cmp	r3, #8
 8018fe2:	d10e      	bne.n	8019002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018fe8:	9300      	str	r3, [sp, #0]
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2200      	movs	r2, #0
 8018fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f000 f832 	bl	801905c <UART_WaitOnFlagUntilTimeout>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d001      	beq.n	8019002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018ffe:	2303      	movs	r3, #3
 8019000:	e028      	b.n	8019054 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	f003 0304 	and.w	r3, r3, #4
 801900c:	2b04      	cmp	r3, #4
 801900e:	d10e      	bne.n	801902e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019014:	9300      	str	r3, [sp, #0]
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2200      	movs	r2, #0
 801901a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f000 f81c 	bl	801905c <UART_WaitOnFlagUntilTimeout>
 8019024:	4603      	mov	r3, r0
 8019026:	2b00      	cmp	r3, #0
 8019028:	d001      	beq.n	801902e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801902a:	2303      	movs	r3, #3
 801902c:	e012      	b.n	8019054 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	2220      	movs	r2, #32
 8019032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2220      	movs	r2, #32
 801903a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2200      	movs	r2, #0
 8019042:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2200      	movs	r2, #0
 8019048:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2200      	movs	r2, #0
 801904e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019052:	2300      	movs	r3, #0
}
 8019054:	4618      	mov	r0, r3
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b09c      	sub	sp, #112	; 0x70
 8019060:	af00      	add	r7, sp, #0
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	603b      	str	r3, [r7, #0]
 8019068:	4613      	mov	r3, r2
 801906a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801906c:	e0a9      	b.n	80191c2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801906e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019074:	f000 80a5 	beq.w	80191c2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019078:	f7fc f94e 	bl	8015318 <HAL_GetTick>
 801907c:	4602      	mov	r2, r0
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	1ad3      	subs	r3, r2, r3
 8019082:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019084:	429a      	cmp	r2, r3
 8019086:	d302      	bcc.n	801908e <UART_WaitOnFlagUntilTimeout+0x32>
 8019088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801908a:	2b00      	cmp	r3, #0
 801908c:	d140      	bne.n	8019110 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019096:	e853 3f00 	ldrex	r3, [r3]
 801909a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801909c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801909e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80190a2:	667b      	str	r3, [r7, #100]	; 0x64
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	461a      	mov	r2, r3
 80190aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80190ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80190ae:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80190b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80190b4:	e841 2300 	strex	r3, r2, [r1]
 80190b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80190ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d1e6      	bne.n	801908e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	3308      	adds	r3, #8
 80190c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190ca:	e853 3f00 	ldrex	r3, [r3]
 80190ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80190d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d2:	f023 0301 	bic.w	r3, r3, #1
 80190d6:	663b      	str	r3, [r7, #96]	; 0x60
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	3308      	adds	r3, #8
 80190de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80190e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80190e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80190e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190e8:	e841 2300 	strex	r3, r2, [r1]
 80190ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80190ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d1e5      	bne.n	80190c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	2220      	movs	r2, #32
 80190f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	2220      	movs	r2, #32
 8019100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	2200      	movs	r2, #0
 8019108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 801910c:	2303      	movs	r3, #3
 801910e:	e069      	b.n	80191e4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	f003 0304 	and.w	r3, r3, #4
 801911a:	2b00      	cmp	r3, #0
 801911c:	d051      	beq.n	80191c2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	69db      	ldr	r3, [r3, #28]
 8019124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801912c:	d149      	bne.n	80191c2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019136:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019140:	e853 3f00 	ldrex	r3, [r3]
 8019144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801914c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	461a      	mov	r2, r3
 8019154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019156:	637b      	str	r3, [r7, #52]	; 0x34
 8019158:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801915a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801915c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801915e:	e841 2300 	strex	r3, r2, [r1]
 8019162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8019164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1e6      	bne.n	8019138 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	3308      	adds	r3, #8
 8019170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	e853 3f00 	ldrex	r3, [r3]
 8019178:	613b      	str	r3, [r7, #16]
   return(result);
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	f023 0301 	bic.w	r3, r3, #1
 8019180:	66bb      	str	r3, [r7, #104]	; 0x68
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	3308      	adds	r3, #8
 8019188:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801918a:	623a      	str	r2, [r7, #32]
 801918c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801918e:	69f9      	ldr	r1, [r7, #28]
 8019190:	6a3a      	ldr	r2, [r7, #32]
 8019192:	e841 2300 	strex	r3, r2, [r1]
 8019196:	61bb      	str	r3, [r7, #24]
   return(result);
 8019198:	69bb      	ldr	r3, [r7, #24]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d1e5      	bne.n	801916a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	2220      	movs	r2, #32
 80191a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	2220      	movs	r2, #32
 80191aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	2220      	movs	r2, #32
 80191b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	2200      	movs	r2, #0
 80191ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80191be:	2303      	movs	r3, #3
 80191c0:	e010      	b.n	80191e4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	69da      	ldr	r2, [r3, #28]
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	4013      	ands	r3, r2
 80191cc:	68ba      	ldr	r2, [r7, #8]
 80191ce:	429a      	cmp	r2, r3
 80191d0:	bf0c      	ite	eq
 80191d2:	2301      	moveq	r3, #1
 80191d4:	2300      	movne	r3, #0
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	461a      	mov	r2, r3
 80191da:	79fb      	ldrb	r3, [r7, #7]
 80191dc:	429a      	cmp	r2, r3
 80191de:	f43f af46 	beq.w	801906e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80191e2:	2300      	movs	r3, #0
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3770      	adds	r7, #112	; 0x70
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80191ec:	b480      	push	{r7}
 80191ee:	b085      	sub	sp, #20
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80191fa:	2b01      	cmp	r3, #1
 80191fc:	d101      	bne.n	8019202 <HAL_UARTEx_DisableFifoMode+0x16>
 80191fe:	2302      	movs	r3, #2
 8019200:	e027      	b.n	8019252 <HAL_UARTEx_DisableFifoMode+0x66>
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	2201      	movs	r2, #1
 8019206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	2224      	movs	r2, #36	; 0x24
 801920e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f022 0201 	bic.w	r2, r2, #1
 8019228:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8019230:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2200      	movs	r2, #0
 8019236:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	68fa      	ldr	r2, [r7, #12]
 801923e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	2220      	movs	r2, #32
 8019244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2200      	movs	r2, #0
 801924c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019250:	2300      	movs	r3, #0
}
 8019252:	4618      	mov	r0, r3
 8019254:	3714      	adds	r7, #20
 8019256:	46bd      	mov	sp, r7
 8019258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925c:	4770      	bx	lr

0801925e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801925e:	b580      	push	{r7, lr}
 8019260:	b084      	sub	sp, #16
 8019262:	af00      	add	r7, sp, #0
 8019264:	6078      	str	r0, [r7, #4]
 8019266:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801926e:	2b01      	cmp	r3, #1
 8019270:	d101      	bne.n	8019276 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8019272:	2302      	movs	r3, #2
 8019274:	e02d      	b.n	80192d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	2201      	movs	r2, #1
 801927a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	2224      	movs	r2, #36	; 0x24
 8019282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	681a      	ldr	r2, [r3, #0]
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	f022 0201 	bic.w	r2, r2, #1
 801929c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	689b      	ldr	r3, [r3, #8]
 80192a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	683a      	ldr	r2, [r7, #0]
 80192ae:	430a      	orrs	r2, r1
 80192b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f000 f850 	bl	8019358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	68fa      	ldr	r2, [r7, #12]
 80192be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2220      	movs	r2, #32
 80192c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	2200      	movs	r2, #0
 80192cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80192d0:	2300      	movs	r3, #0
}
 80192d2:	4618      	mov	r0, r3
 80192d4:	3710      	adds	r7, #16
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}

080192da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80192da:	b580      	push	{r7, lr}
 80192dc:	b084      	sub	sp, #16
 80192de:	af00      	add	r7, sp, #0
 80192e0:	6078      	str	r0, [r7, #4]
 80192e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80192ea:	2b01      	cmp	r3, #1
 80192ec:	d101      	bne.n	80192f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80192ee:	2302      	movs	r3, #2
 80192f0:	e02d      	b.n	801934e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2201      	movs	r2, #1
 80192f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2224      	movs	r2, #36	; 0x24
 80192fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	f022 0201 	bic.w	r2, r2, #1
 8019318:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	689b      	ldr	r3, [r3, #8]
 8019320:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	683a      	ldr	r2, [r7, #0]
 801932a:	430a      	orrs	r2, r1
 801932c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f000 f812 	bl	8019358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	68fa      	ldr	r2, [r7, #12]
 801933a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2220      	movs	r2, #32
 8019340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2200      	movs	r2, #0
 8019348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801934c:	2300      	movs	r3, #0
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}
	...

08019358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019358:	b480      	push	{r7}
 801935a:	b085      	sub	sp, #20
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019364:	2b00      	cmp	r3, #0
 8019366:	d108      	bne.n	801937a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2201      	movs	r2, #1
 801936c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2201      	movs	r2, #1
 8019374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019378:	e031      	b.n	80193de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801937a:	2308      	movs	r3, #8
 801937c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801937e:	2308      	movs	r3, #8
 8019380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	689b      	ldr	r3, [r3, #8]
 8019388:	0e5b      	lsrs	r3, r3, #25
 801938a:	b2db      	uxtb	r3, r3
 801938c:	f003 0307 	and.w	r3, r3, #7
 8019390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	689b      	ldr	r3, [r3, #8]
 8019398:	0f5b      	lsrs	r3, r3, #29
 801939a:	b2db      	uxtb	r3, r3
 801939c:	f003 0307 	and.w	r3, r3, #7
 80193a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80193a2:	7bbb      	ldrb	r3, [r7, #14]
 80193a4:	7b3a      	ldrb	r2, [r7, #12]
 80193a6:	4911      	ldr	r1, [pc, #68]	; (80193ec <UARTEx_SetNbDataToProcess+0x94>)
 80193a8:	5c8a      	ldrb	r2, [r1, r2]
 80193aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80193ae:	7b3a      	ldrb	r2, [r7, #12]
 80193b0:	490f      	ldr	r1, [pc, #60]	; (80193f0 <UARTEx_SetNbDataToProcess+0x98>)
 80193b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80193b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80193b8:	b29a      	uxth	r2, r3
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80193c0:	7bfb      	ldrb	r3, [r7, #15]
 80193c2:	7b7a      	ldrb	r2, [r7, #13]
 80193c4:	4909      	ldr	r1, [pc, #36]	; (80193ec <UARTEx_SetNbDataToProcess+0x94>)
 80193c6:	5c8a      	ldrb	r2, [r1, r2]
 80193c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80193cc:	7b7a      	ldrb	r2, [r7, #13]
 80193ce:	4908      	ldr	r1, [pc, #32]	; (80193f0 <UARTEx_SetNbDataToProcess+0x98>)
 80193d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80193d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80193de:	bf00      	nop
 80193e0:	3714      	adds	r7, #20
 80193e2:	46bd      	mov	sp, r7
 80193e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e8:	4770      	bx	lr
 80193ea:	bf00      	nop
 80193ec:	0801a7ac 	.word	0x0801a7ac
 80193f0:	0801a7b4 	.word	0x0801a7b4

080193f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80193f4:	b480      	push	{r7}
 80193f6:	b085      	sub	sp, #20
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80193fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8019400:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8019408:	b29a      	uxth	r2, r3
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	b29b      	uxth	r3, r3
 801940e:	43db      	mvns	r3, r3
 8019410:	b29b      	uxth	r3, r3
 8019412:	4013      	ands	r3, r2
 8019414:	b29a      	uxth	r2, r3
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801941c:	2300      	movs	r3, #0
}
 801941e:	4618      	mov	r0, r3
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801942a:	b084      	sub	sp, #16
 801942c:	b480      	push	{r7}
 801942e:	b083      	sub	sp, #12
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
 8019434:	f107 0014 	add.w	r0, r7, #20
 8019438:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2201      	movs	r2, #1
 8019440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2200      	movs	r2, #0
 8019448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2200      	movs	r2, #0
 8019450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2200      	movs	r2, #0
 8019458:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801945c:	2300      	movs	r3, #0
}
 801945e:	4618      	mov	r0, r3
 8019460:	370c      	adds	r7, #12
 8019462:	46bd      	mov	sp, r7
 8019464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019468:	b004      	add	sp, #16
 801946a:	4770      	bx	lr

0801946c <__errno>:
 801946c:	4b01      	ldr	r3, [pc, #4]	; (8019474 <__errno+0x8>)
 801946e:	6818      	ldr	r0, [r3, #0]
 8019470:	4770      	bx	lr
 8019472:	bf00      	nop
 8019474:	20000074 	.word	0x20000074

08019478 <__libc_init_array>:
 8019478:	b570      	push	{r4, r5, r6, lr}
 801947a:	4d0d      	ldr	r5, [pc, #52]	; (80194b0 <__libc_init_array+0x38>)
 801947c:	4c0d      	ldr	r4, [pc, #52]	; (80194b4 <__libc_init_array+0x3c>)
 801947e:	1b64      	subs	r4, r4, r5
 8019480:	10a4      	asrs	r4, r4, #2
 8019482:	2600      	movs	r6, #0
 8019484:	42a6      	cmp	r6, r4
 8019486:	d109      	bne.n	801949c <__libc_init_array+0x24>
 8019488:	4d0b      	ldr	r5, [pc, #44]	; (80194b8 <__libc_init_array+0x40>)
 801948a:	4c0c      	ldr	r4, [pc, #48]	; (80194bc <__libc_init_array+0x44>)
 801948c:	f001 f8a4 	bl	801a5d8 <_init>
 8019490:	1b64      	subs	r4, r4, r5
 8019492:	10a4      	asrs	r4, r4, #2
 8019494:	2600      	movs	r6, #0
 8019496:	42a6      	cmp	r6, r4
 8019498:	d105      	bne.n	80194a6 <__libc_init_array+0x2e>
 801949a:	bd70      	pop	{r4, r5, r6, pc}
 801949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80194a0:	4798      	blx	r3
 80194a2:	3601      	adds	r6, #1
 80194a4:	e7ee      	b.n	8019484 <__libc_init_array+0xc>
 80194a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80194aa:	4798      	blx	r3
 80194ac:	3601      	adds	r6, #1
 80194ae:	e7f2      	b.n	8019496 <__libc_init_array+0x1e>
 80194b0:	0801a85c 	.word	0x0801a85c
 80194b4:	0801a85c 	.word	0x0801a85c
 80194b8:	0801a85c 	.word	0x0801a85c
 80194bc:	0801a860 	.word	0x0801a860

080194c0 <memcpy>:
 80194c0:	440a      	add	r2, r1
 80194c2:	4291      	cmp	r1, r2
 80194c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80194c8:	d100      	bne.n	80194cc <memcpy+0xc>
 80194ca:	4770      	bx	lr
 80194cc:	b510      	push	{r4, lr}
 80194ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194d6:	4291      	cmp	r1, r2
 80194d8:	d1f9      	bne.n	80194ce <memcpy+0xe>
 80194da:	bd10      	pop	{r4, pc}

080194dc <memset>:
 80194dc:	4402      	add	r2, r0
 80194de:	4603      	mov	r3, r0
 80194e0:	4293      	cmp	r3, r2
 80194e2:	d100      	bne.n	80194e6 <memset+0xa>
 80194e4:	4770      	bx	lr
 80194e6:	f803 1b01 	strb.w	r1, [r3], #1
 80194ea:	e7f9      	b.n	80194e0 <memset+0x4>

080194ec <iprintf>:
 80194ec:	b40f      	push	{r0, r1, r2, r3}
 80194ee:	4b0a      	ldr	r3, [pc, #40]	; (8019518 <iprintf+0x2c>)
 80194f0:	b513      	push	{r0, r1, r4, lr}
 80194f2:	681c      	ldr	r4, [r3, #0]
 80194f4:	b124      	cbz	r4, 8019500 <iprintf+0x14>
 80194f6:	69a3      	ldr	r3, [r4, #24]
 80194f8:	b913      	cbnz	r3, 8019500 <iprintf+0x14>
 80194fa:	4620      	mov	r0, r4
 80194fc:	f000 fa88 	bl	8019a10 <__sinit>
 8019500:	ab05      	add	r3, sp, #20
 8019502:	9a04      	ldr	r2, [sp, #16]
 8019504:	68a1      	ldr	r1, [r4, #8]
 8019506:	9301      	str	r3, [sp, #4]
 8019508:	4620      	mov	r0, r4
 801950a:	f000 fc91 	bl	8019e30 <_vfiprintf_r>
 801950e:	b002      	add	sp, #8
 8019510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019514:	b004      	add	sp, #16
 8019516:	4770      	bx	lr
 8019518:	20000074 	.word	0x20000074

0801951c <putchar>:
 801951c:	4b09      	ldr	r3, [pc, #36]	; (8019544 <putchar+0x28>)
 801951e:	b513      	push	{r0, r1, r4, lr}
 8019520:	681c      	ldr	r4, [r3, #0]
 8019522:	4601      	mov	r1, r0
 8019524:	b134      	cbz	r4, 8019534 <putchar+0x18>
 8019526:	69a3      	ldr	r3, [r4, #24]
 8019528:	b923      	cbnz	r3, 8019534 <putchar+0x18>
 801952a:	9001      	str	r0, [sp, #4]
 801952c:	4620      	mov	r0, r4
 801952e:	f000 fa6f 	bl	8019a10 <__sinit>
 8019532:	9901      	ldr	r1, [sp, #4]
 8019534:	68a2      	ldr	r2, [r4, #8]
 8019536:	4620      	mov	r0, r4
 8019538:	b002      	add	sp, #8
 801953a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801953e:	f000 bf3b 	b.w	801a3b8 <_putc_r>
 8019542:	bf00      	nop
 8019544:	20000074 	.word	0x20000074

08019548 <_puts_r>:
 8019548:	b570      	push	{r4, r5, r6, lr}
 801954a:	460e      	mov	r6, r1
 801954c:	4605      	mov	r5, r0
 801954e:	b118      	cbz	r0, 8019558 <_puts_r+0x10>
 8019550:	6983      	ldr	r3, [r0, #24]
 8019552:	b90b      	cbnz	r3, 8019558 <_puts_r+0x10>
 8019554:	f000 fa5c 	bl	8019a10 <__sinit>
 8019558:	69ab      	ldr	r3, [r5, #24]
 801955a:	68ac      	ldr	r4, [r5, #8]
 801955c:	b913      	cbnz	r3, 8019564 <_puts_r+0x1c>
 801955e:	4628      	mov	r0, r5
 8019560:	f000 fa56 	bl	8019a10 <__sinit>
 8019564:	4b2c      	ldr	r3, [pc, #176]	; (8019618 <_puts_r+0xd0>)
 8019566:	429c      	cmp	r4, r3
 8019568:	d120      	bne.n	80195ac <_puts_r+0x64>
 801956a:	686c      	ldr	r4, [r5, #4]
 801956c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801956e:	07db      	lsls	r3, r3, #31
 8019570:	d405      	bmi.n	801957e <_puts_r+0x36>
 8019572:	89a3      	ldrh	r3, [r4, #12]
 8019574:	0598      	lsls	r0, r3, #22
 8019576:	d402      	bmi.n	801957e <_puts_r+0x36>
 8019578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801957a:	f000 fae7 	bl	8019b4c <__retarget_lock_acquire_recursive>
 801957e:	89a3      	ldrh	r3, [r4, #12]
 8019580:	0719      	lsls	r1, r3, #28
 8019582:	d51d      	bpl.n	80195c0 <_puts_r+0x78>
 8019584:	6923      	ldr	r3, [r4, #16]
 8019586:	b1db      	cbz	r3, 80195c0 <_puts_r+0x78>
 8019588:	3e01      	subs	r6, #1
 801958a:	68a3      	ldr	r3, [r4, #8]
 801958c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019590:	3b01      	subs	r3, #1
 8019592:	60a3      	str	r3, [r4, #8]
 8019594:	bb39      	cbnz	r1, 80195e6 <_puts_r+0x9e>
 8019596:	2b00      	cmp	r3, #0
 8019598:	da38      	bge.n	801960c <_puts_r+0xc4>
 801959a:	4622      	mov	r2, r4
 801959c:	210a      	movs	r1, #10
 801959e:	4628      	mov	r0, r5
 80195a0:	f000 f85c 	bl	801965c <__swbuf_r>
 80195a4:	3001      	adds	r0, #1
 80195a6:	d011      	beq.n	80195cc <_puts_r+0x84>
 80195a8:	250a      	movs	r5, #10
 80195aa:	e011      	b.n	80195d0 <_puts_r+0x88>
 80195ac:	4b1b      	ldr	r3, [pc, #108]	; (801961c <_puts_r+0xd4>)
 80195ae:	429c      	cmp	r4, r3
 80195b0:	d101      	bne.n	80195b6 <_puts_r+0x6e>
 80195b2:	68ac      	ldr	r4, [r5, #8]
 80195b4:	e7da      	b.n	801956c <_puts_r+0x24>
 80195b6:	4b1a      	ldr	r3, [pc, #104]	; (8019620 <_puts_r+0xd8>)
 80195b8:	429c      	cmp	r4, r3
 80195ba:	bf08      	it	eq
 80195bc:	68ec      	ldreq	r4, [r5, #12]
 80195be:	e7d5      	b.n	801956c <_puts_r+0x24>
 80195c0:	4621      	mov	r1, r4
 80195c2:	4628      	mov	r0, r5
 80195c4:	f000 f89c 	bl	8019700 <__swsetup_r>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d0dd      	beq.n	8019588 <_puts_r+0x40>
 80195cc:	f04f 35ff 	mov.w	r5, #4294967295
 80195d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195d2:	07da      	lsls	r2, r3, #31
 80195d4:	d405      	bmi.n	80195e2 <_puts_r+0x9a>
 80195d6:	89a3      	ldrh	r3, [r4, #12]
 80195d8:	059b      	lsls	r3, r3, #22
 80195da:	d402      	bmi.n	80195e2 <_puts_r+0x9a>
 80195dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195de:	f000 fab6 	bl	8019b4e <__retarget_lock_release_recursive>
 80195e2:	4628      	mov	r0, r5
 80195e4:	bd70      	pop	{r4, r5, r6, pc}
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	da04      	bge.n	80195f4 <_puts_r+0xac>
 80195ea:	69a2      	ldr	r2, [r4, #24]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	dc06      	bgt.n	80195fe <_puts_r+0xb6>
 80195f0:	290a      	cmp	r1, #10
 80195f2:	d004      	beq.n	80195fe <_puts_r+0xb6>
 80195f4:	6823      	ldr	r3, [r4, #0]
 80195f6:	1c5a      	adds	r2, r3, #1
 80195f8:	6022      	str	r2, [r4, #0]
 80195fa:	7019      	strb	r1, [r3, #0]
 80195fc:	e7c5      	b.n	801958a <_puts_r+0x42>
 80195fe:	4622      	mov	r2, r4
 8019600:	4628      	mov	r0, r5
 8019602:	f000 f82b 	bl	801965c <__swbuf_r>
 8019606:	3001      	adds	r0, #1
 8019608:	d1bf      	bne.n	801958a <_puts_r+0x42>
 801960a:	e7df      	b.n	80195cc <_puts_r+0x84>
 801960c:	6823      	ldr	r3, [r4, #0]
 801960e:	250a      	movs	r5, #10
 8019610:	1c5a      	adds	r2, r3, #1
 8019612:	6022      	str	r2, [r4, #0]
 8019614:	701d      	strb	r5, [r3, #0]
 8019616:	e7db      	b.n	80195d0 <_puts_r+0x88>
 8019618:	0801a7e0 	.word	0x0801a7e0
 801961c:	0801a800 	.word	0x0801a800
 8019620:	0801a7c0 	.word	0x0801a7c0

08019624 <puts>:
 8019624:	4b02      	ldr	r3, [pc, #8]	; (8019630 <puts+0xc>)
 8019626:	4601      	mov	r1, r0
 8019628:	6818      	ldr	r0, [r3, #0]
 801962a:	f7ff bf8d 	b.w	8019548 <_puts_r>
 801962e:	bf00      	nop
 8019630:	20000074 	.word	0x20000074

08019634 <strncpy>:
 8019634:	b510      	push	{r4, lr}
 8019636:	3901      	subs	r1, #1
 8019638:	4603      	mov	r3, r0
 801963a:	b132      	cbz	r2, 801964a <strncpy+0x16>
 801963c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019640:	f803 4b01 	strb.w	r4, [r3], #1
 8019644:	3a01      	subs	r2, #1
 8019646:	2c00      	cmp	r4, #0
 8019648:	d1f7      	bne.n	801963a <strncpy+0x6>
 801964a:	441a      	add	r2, r3
 801964c:	2100      	movs	r1, #0
 801964e:	4293      	cmp	r3, r2
 8019650:	d100      	bne.n	8019654 <strncpy+0x20>
 8019652:	bd10      	pop	{r4, pc}
 8019654:	f803 1b01 	strb.w	r1, [r3], #1
 8019658:	e7f9      	b.n	801964e <strncpy+0x1a>
	...

0801965c <__swbuf_r>:
 801965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965e:	460e      	mov	r6, r1
 8019660:	4614      	mov	r4, r2
 8019662:	4605      	mov	r5, r0
 8019664:	b118      	cbz	r0, 801966e <__swbuf_r+0x12>
 8019666:	6983      	ldr	r3, [r0, #24]
 8019668:	b90b      	cbnz	r3, 801966e <__swbuf_r+0x12>
 801966a:	f000 f9d1 	bl	8019a10 <__sinit>
 801966e:	4b21      	ldr	r3, [pc, #132]	; (80196f4 <__swbuf_r+0x98>)
 8019670:	429c      	cmp	r4, r3
 8019672:	d12b      	bne.n	80196cc <__swbuf_r+0x70>
 8019674:	686c      	ldr	r4, [r5, #4]
 8019676:	69a3      	ldr	r3, [r4, #24]
 8019678:	60a3      	str	r3, [r4, #8]
 801967a:	89a3      	ldrh	r3, [r4, #12]
 801967c:	071a      	lsls	r2, r3, #28
 801967e:	d52f      	bpl.n	80196e0 <__swbuf_r+0x84>
 8019680:	6923      	ldr	r3, [r4, #16]
 8019682:	b36b      	cbz	r3, 80196e0 <__swbuf_r+0x84>
 8019684:	6923      	ldr	r3, [r4, #16]
 8019686:	6820      	ldr	r0, [r4, #0]
 8019688:	1ac0      	subs	r0, r0, r3
 801968a:	6963      	ldr	r3, [r4, #20]
 801968c:	b2f6      	uxtb	r6, r6
 801968e:	4283      	cmp	r3, r0
 8019690:	4637      	mov	r7, r6
 8019692:	dc04      	bgt.n	801969e <__swbuf_r+0x42>
 8019694:	4621      	mov	r1, r4
 8019696:	4628      	mov	r0, r5
 8019698:	f000 f926 	bl	80198e8 <_fflush_r>
 801969c:	bb30      	cbnz	r0, 80196ec <__swbuf_r+0x90>
 801969e:	68a3      	ldr	r3, [r4, #8]
 80196a0:	3b01      	subs	r3, #1
 80196a2:	60a3      	str	r3, [r4, #8]
 80196a4:	6823      	ldr	r3, [r4, #0]
 80196a6:	1c5a      	adds	r2, r3, #1
 80196a8:	6022      	str	r2, [r4, #0]
 80196aa:	701e      	strb	r6, [r3, #0]
 80196ac:	6963      	ldr	r3, [r4, #20]
 80196ae:	3001      	adds	r0, #1
 80196b0:	4283      	cmp	r3, r0
 80196b2:	d004      	beq.n	80196be <__swbuf_r+0x62>
 80196b4:	89a3      	ldrh	r3, [r4, #12]
 80196b6:	07db      	lsls	r3, r3, #31
 80196b8:	d506      	bpl.n	80196c8 <__swbuf_r+0x6c>
 80196ba:	2e0a      	cmp	r6, #10
 80196bc:	d104      	bne.n	80196c8 <__swbuf_r+0x6c>
 80196be:	4621      	mov	r1, r4
 80196c0:	4628      	mov	r0, r5
 80196c2:	f000 f911 	bl	80198e8 <_fflush_r>
 80196c6:	b988      	cbnz	r0, 80196ec <__swbuf_r+0x90>
 80196c8:	4638      	mov	r0, r7
 80196ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196cc:	4b0a      	ldr	r3, [pc, #40]	; (80196f8 <__swbuf_r+0x9c>)
 80196ce:	429c      	cmp	r4, r3
 80196d0:	d101      	bne.n	80196d6 <__swbuf_r+0x7a>
 80196d2:	68ac      	ldr	r4, [r5, #8]
 80196d4:	e7cf      	b.n	8019676 <__swbuf_r+0x1a>
 80196d6:	4b09      	ldr	r3, [pc, #36]	; (80196fc <__swbuf_r+0xa0>)
 80196d8:	429c      	cmp	r4, r3
 80196da:	bf08      	it	eq
 80196dc:	68ec      	ldreq	r4, [r5, #12]
 80196de:	e7ca      	b.n	8019676 <__swbuf_r+0x1a>
 80196e0:	4621      	mov	r1, r4
 80196e2:	4628      	mov	r0, r5
 80196e4:	f000 f80c 	bl	8019700 <__swsetup_r>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d0cb      	beq.n	8019684 <__swbuf_r+0x28>
 80196ec:	f04f 37ff 	mov.w	r7, #4294967295
 80196f0:	e7ea      	b.n	80196c8 <__swbuf_r+0x6c>
 80196f2:	bf00      	nop
 80196f4:	0801a7e0 	.word	0x0801a7e0
 80196f8:	0801a800 	.word	0x0801a800
 80196fc:	0801a7c0 	.word	0x0801a7c0

08019700 <__swsetup_r>:
 8019700:	4b32      	ldr	r3, [pc, #200]	; (80197cc <__swsetup_r+0xcc>)
 8019702:	b570      	push	{r4, r5, r6, lr}
 8019704:	681d      	ldr	r5, [r3, #0]
 8019706:	4606      	mov	r6, r0
 8019708:	460c      	mov	r4, r1
 801970a:	b125      	cbz	r5, 8019716 <__swsetup_r+0x16>
 801970c:	69ab      	ldr	r3, [r5, #24]
 801970e:	b913      	cbnz	r3, 8019716 <__swsetup_r+0x16>
 8019710:	4628      	mov	r0, r5
 8019712:	f000 f97d 	bl	8019a10 <__sinit>
 8019716:	4b2e      	ldr	r3, [pc, #184]	; (80197d0 <__swsetup_r+0xd0>)
 8019718:	429c      	cmp	r4, r3
 801971a:	d10f      	bne.n	801973c <__swsetup_r+0x3c>
 801971c:	686c      	ldr	r4, [r5, #4]
 801971e:	89a3      	ldrh	r3, [r4, #12]
 8019720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019724:	0719      	lsls	r1, r3, #28
 8019726:	d42c      	bmi.n	8019782 <__swsetup_r+0x82>
 8019728:	06dd      	lsls	r5, r3, #27
 801972a:	d411      	bmi.n	8019750 <__swsetup_r+0x50>
 801972c:	2309      	movs	r3, #9
 801972e:	6033      	str	r3, [r6, #0]
 8019730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019734:	81a3      	strh	r3, [r4, #12]
 8019736:	f04f 30ff 	mov.w	r0, #4294967295
 801973a:	e03e      	b.n	80197ba <__swsetup_r+0xba>
 801973c:	4b25      	ldr	r3, [pc, #148]	; (80197d4 <__swsetup_r+0xd4>)
 801973e:	429c      	cmp	r4, r3
 8019740:	d101      	bne.n	8019746 <__swsetup_r+0x46>
 8019742:	68ac      	ldr	r4, [r5, #8]
 8019744:	e7eb      	b.n	801971e <__swsetup_r+0x1e>
 8019746:	4b24      	ldr	r3, [pc, #144]	; (80197d8 <__swsetup_r+0xd8>)
 8019748:	429c      	cmp	r4, r3
 801974a:	bf08      	it	eq
 801974c:	68ec      	ldreq	r4, [r5, #12]
 801974e:	e7e6      	b.n	801971e <__swsetup_r+0x1e>
 8019750:	0758      	lsls	r0, r3, #29
 8019752:	d512      	bpl.n	801977a <__swsetup_r+0x7a>
 8019754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019756:	b141      	cbz	r1, 801976a <__swsetup_r+0x6a>
 8019758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801975c:	4299      	cmp	r1, r3
 801975e:	d002      	beq.n	8019766 <__swsetup_r+0x66>
 8019760:	4630      	mov	r0, r6
 8019762:	f000 fa5b 	bl	8019c1c <_free_r>
 8019766:	2300      	movs	r3, #0
 8019768:	6363      	str	r3, [r4, #52]	; 0x34
 801976a:	89a3      	ldrh	r3, [r4, #12]
 801976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019770:	81a3      	strh	r3, [r4, #12]
 8019772:	2300      	movs	r3, #0
 8019774:	6063      	str	r3, [r4, #4]
 8019776:	6923      	ldr	r3, [r4, #16]
 8019778:	6023      	str	r3, [r4, #0]
 801977a:	89a3      	ldrh	r3, [r4, #12]
 801977c:	f043 0308 	orr.w	r3, r3, #8
 8019780:	81a3      	strh	r3, [r4, #12]
 8019782:	6923      	ldr	r3, [r4, #16]
 8019784:	b94b      	cbnz	r3, 801979a <__swsetup_r+0x9a>
 8019786:	89a3      	ldrh	r3, [r4, #12]
 8019788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019790:	d003      	beq.n	801979a <__swsetup_r+0x9a>
 8019792:	4621      	mov	r1, r4
 8019794:	4630      	mov	r0, r6
 8019796:	f000 fa01 	bl	8019b9c <__smakebuf_r>
 801979a:	89a0      	ldrh	r0, [r4, #12]
 801979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197a0:	f010 0301 	ands.w	r3, r0, #1
 80197a4:	d00a      	beq.n	80197bc <__swsetup_r+0xbc>
 80197a6:	2300      	movs	r3, #0
 80197a8:	60a3      	str	r3, [r4, #8]
 80197aa:	6963      	ldr	r3, [r4, #20]
 80197ac:	425b      	negs	r3, r3
 80197ae:	61a3      	str	r3, [r4, #24]
 80197b0:	6923      	ldr	r3, [r4, #16]
 80197b2:	b943      	cbnz	r3, 80197c6 <__swsetup_r+0xc6>
 80197b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197b8:	d1ba      	bne.n	8019730 <__swsetup_r+0x30>
 80197ba:	bd70      	pop	{r4, r5, r6, pc}
 80197bc:	0781      	lsls	r1, r0, #30
 80197be:	bf58      	it	pl
 80197c0:	6963      	ldrpl	r3, [r4, #20]
 80197c2:	60a3      	str	r3, [r4, #8]
 80197c4:	e7f4      	b.n	80197b0 <__swsetup_r+0xb0>
 80197c6:	2000      	movs	r0, #0
 80197c8:	e7f7      	b.n	80197ba <__swsetup_r+0xba>
 80197ca:	bf00      	nop
 80197cc:	20000074 	.word	0x20000074
 80197d0:	0801a7e0 	.word	0x0801a7e0
 80197d4:	0801a800 	.word	0x0801a800
 80197d8:	0801a7c0 	.word	0x0801a7c0

080197dc <__sflush_r>:
 80197dc:	898a      	ldrh	r2, [r1, #12]
 80197de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197e2:	4605      	mov	r5, r0
 80197e4:	0710      	lsls	r0, r2, #28
 80197e6:	460c      	mov	r4, r1
 80197e8:	d458      	bmi.n	801989c <__sflush_r+0xc0>
 80197ea:	684b      	ldr	r3, [r1, #4]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	dc05      	bgt.n	80197fc <__sflush_r+0x20>
 80197f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	dc02      	bgt.n	80197fc <__sflush_r+0x20>
 80197f6:	2000      	movs	r0, #0
 80197f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80197fe:	2e00      	cmp	r6, #0
 8019800:	d0f9      	beq.n	80197f6 <__sflush_r+0x1a>
 8019802:	2300      	movs	r3, #0
 8019804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019808:	682f      	ldr	r7, [r5, #0]
 801980a:	602b      	str	r3, [r5, #0]
 801980c:	d032      	beq.n	8019874 <__sflush_r+0x98>
 801980e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019810:	89a3      	ldrh	r3, [r4, #12]
 8019812:	075a      	lsls	r2, r3, #29
 8019814:	d505      	bpl.n	8019822 <__sflush_r+0x46>
 8019816:	6863      	ldr	r3, [r4, #4]
 8019818:	1ac0      	subs	r0, r0, r3
 801981a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801981c:	b10b      	cbz	r3, 8019822 <__sflush_r+0x46>
 801981e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019820:	1ac0      	subs	r0, r0, r3
 8019822:	2300      	movs	r3, #0
 8019824:	4602      	mov	r2, r0
 8019826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019828:	6a21      	ldr	r1, [r4, #32]
 801982a:	4628      	mov	r0, r5
 801982c:	47b0      	blx	r6
 801982e:	1c43      	adds	r3, r0, #1
 8019830:	89a3      	ldrh	r3, [r4, #12]
 8019832:	d106      	bne.n	8019842 <__sflush_r+0x66>
 8019834:	6829      	ldr	r1, [r5, #0]
 8019836:	291d      	cmp	r1, #29
 8019838:	d82c      	bhi.n	8019894 <__sflush_r+0xb8>
 801983a:	4a2a      	ldr	r2, [pc, #168]	; (80198e4 <__sflush_r+0x108>)
 801983c:	40ca      	lsrs	r2, r1
 801983e:	07d6      	lsls	r6, r2, #31
 8019840:	d528      	bpl.n	8019894 <__sflush_r+0xb8>
 8019842:	2200      	movs	r2, #0
 8019844:	6062      	str	r2, [r4, #4]
 8019846:	04d9      	lsls	r1, r3, #19
 8019848:	6922      	ldr	r2, [r4, #16]
 801984a:	6022      	str	r2, [r4, #0]
 801984c:	d504      	bpl.n	8019858 <__sflush_r+0x7c>
 801984e:	1c42      	adds	r2, r0, #1
 8019850:	d101      	bne.n	8019856 <__sflush_r+0x7a>
 8019852:	682b      	ldr	r3, [r5, #0]
 8019854:	b903      	cbnz	r3, 8019858 <__sflush_r+0x7c>
 8019856:	6560      	str	r0, [r4, #84]	; 0x54
 8019858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801985a:	602f      	str	r7, [r5, #0]
 801985c:	2900      	cmp	r1, #0
 801985e:	d0ca      	beq.n	80197f6 <__sflush_r+0x1a>
 8019860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019864:	4299      	cmp	r1, r3
 8019866:	d002      	beq.n	801986e <__sflush_r+0x92>
 8019868:	4628      	mov	r0, r5
 801986a:	f000 f9d7 	bl	8019c1c <_free_r>
 801986e:	2000      	movs	r0, #0
 8019870:	6360      	str	r0, [r4, #52]	; 0x34
 8019872:	e7c1      	b.n	80197f8 <__sflush_r+0x1c>
 8019874:	6a21      	ldr	r1, [r4, #32]
 8019876:	2301      	movs	r3, #1
 8019878:	4628      	mov	r0, r5
 801987a:	47b0      	blx	r6
 801987c:	1c41      	adds	r1, r0, #1
 801987e:	d1c7      	bne.n	8019810 <__sflush_r+0x34>
 8019880:	682b      	ldr	r3, [r5, #0]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d0c4      	beq.n	8019810 <__sflush_r+0x34>
 8019886:	2b1d      	cmp	r3, #29
 8019888:	d001      	beq.n	801988e <__sflush_r+0xb2>
 801988a:	2b16      	cmp	r3, #22
 801988c:	d101      	bne.n	8019892 <__sflush_r+0xb6>
 801988e:	602f      	str	r7, [r5, #0]
 8019890:	e7b1      	b.n	80197f6 <__sflush_r+0x1a>
 8019892:	89a3      	ldrh	r3, [r4, #12]
 8019894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019898:	81a3      	strh	r3, [r4, #12]
 801989a:	e7ad      	b.n	80197f8 <__sflush_r+0x1c>
 801989c:	690f      	ldr	r7, [r1, #16]
 801989e:	2f00      	cmp	r7, #0
 80198a0:	d0a9      	beq.n	80197f6 <__sflush_r+0x1a>
 80198a2:	0793      	lsls	r3, r2, #30
 80198a4:	680e      	ldr	r6, [r1, #0]
 80198a6:	bf08      	it	eq
 80198a8:	694b      	ldreq	r3, [r1, #20]
 80198aa:	600f      	str	r7, [r1, #0]
 80198ac:	bf18      	it	ne
 80198ae:	2300      	movne	r3, #0
 80198b0:	eba6 0807 	sub.w	r8, r6, r7
 80198b4:	608b      	str	r3, [r1, #8]
 80198b6:	f1b8 0f00 	cmp.w	r8, #0
 80198ba:	dd9c      	ble.n	80197f6 <__sflush_r+0x1a>
 80198bc:	6a21      	ldr	r1, [r4, #32]
 80198be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198c0:	4643      	mov	r3, r8
 80198c2:	463a      	mov	r2, r7
 80198c4:	4628      	mov	r0, r5
 80198c6:	47b0      	blx	r6
 80198c8:	2800      	cmp	r0, #0
 80198ca:	dc06      	bgt.n	80198da <__sflush_r+0xfe>
 80198cc:	89a3      	ldrh	r3, [r4, #12]
 80198ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198d2:	81a3      	strh	r3, [r4, #12]
 80198d4:	f04f 30ff 	mov.w	r0, #4294967295
 80198d8:	e78e      	b.n	80197f8 <__sflush_r+0x1c>
 80198da:	4407      	add	r7, r0
 80198dc:	eba8 0800 	sub.w	r8, r8, r0
 80198e0:	e7e9      	b.n	80198b6 <__sflush_r+0xda>
 80198e2:	bf00      	nop
 80198e4:	20400001 	.word	0x20400001

080198e8 <_fflush_r>:
 80198e8:	b538      	push	{r3, r4, r5, lr}
 80198ea:	690b      	ldr	r3, [r1, #16]
 80198ec:	4605      	mov	r5, r0
 80198ee:	460c      	mov	r4, r1
 80198f0:	b913      	cbnz	r3, 80198f8 <_fflush_r+0x10>
 80198f2:	2500      	movs	r5, #0
 80198f4:	4628      	mov	r0, r5
 80198f6:	bd38      	pop	{r3, r4, r5, pc}
 80198f8:	b118      	cbz	r0, 8019902 <_fflush_r+0x1a>
 80198fa:	6983      	ldr	r3, [r0, #24]
 80198fc:	b90b      	cbnz	r3, 8019902 <_fflush_r+0x1a>
 80198fe:	f000 f887 	bl	8019a10 <__sinit>
 8019902:	4b14      	ldr	r3, [pc, #80]	; (8019954 <_fflush_r+0x6c>)
 8019904:	429c      	cmp	r4, r3
 8019906:	d11b      	bne.n	8019940 <_fflush_r+0x58>
 8019908:	686c      	ldr	r4, [r5, #4]
 801990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d0ef      	beq.n	80198f2 <_fflush_r+0xa>
 8019912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019914:	07d0      	lsls	r0, r2, #31
 8019916:	d404      	bmi.n	8019922 <_fflush_r+0x3a>
 8019918:	0599      	lsls	r1, r3, #22
 801991a:	d402      	bmi.n	8019922 <_fflush_r+0x3a>
 801991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801991e:	f000 f915 	bl	8019b4c <__retarget_lock_acquire_recursive>
 8019922:	4628      	mov	r0, r5
 8019924:	4621      	mov	r1, r4
 8019926:	f7ff ff59 	bl	80197dc <__sflush_r>
 801992a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801992c:	07da      	lsls	r2, r3, #31
 801992e:	4605      	mov	r5, r0
 8019930:	d4e0      	bmi.n	80198f4 <_fflush_r+0xc>
 8019932:	89a3      	ldrh	r3, [r4, #12]
 8019934:	059b      	lsls	r3, r3, #22
 8019936:	d4dd      	bmi.n	80198f4 <_fflush_r+0xc>
 8019938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801993a:	f000 f908 	bl	8019b4e <__retarget_lock_release_recursive>
 801993e:	e7d9      	b.n	80198f4 <_fflush_r+0xc>
 8019940:	4b05      	ldr	r3, [pc, #20]	; (8019958 <_fflush_r+0x70>)
 8019942:	429c      	cmp	r4, r3
 8019944:	d101      	bne.n	801994a <_fflush_r+0x62>
 8019946:	68ac      	ldr	r4, [r5, #8]
 8019948:	e7df      	b.n	801990a <_fflush_r+0x22>
 801994a:	4b04      	ldr	r3, [pc, #16]	; (801995c <_fflush_r+0x74>)
 801994c:	429c      	cmp	r4, r3
 801994e:	bf08      	it	eq
 8019950:	68ec      	ldreq	r4, [r5, #12]
 8019952:	e7da      	b.n	801990a <_fflush_r+0x22>
 8019954:	0801a7e0 	.word	0x0801a7e0
 8019958:	0801a800 	.word	0x0801a800
 801995c:	0801a7c0 	.word	0x0801a7c0

08019960 <std>:
 8019960:	2300      	movs	r3, #0
 8019962:	b510      	push	{r4, lr}
 8019964:	4604      	mov	r4, r0
 8019966:	e9c0 3300 	strd	r3, r3, [r0]
 801996a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801996e:	6083      	str	r3, [r0, #8]
 8019970:	8181      	strh	r1, [r0, #12]
 8019972:	6643      	str	r3, [r0, #100]	; 0x64
 8019974:	81c2      	strh	r2, [r0, #14]
 8019976:	6183      	str	r3, [r0, #24]
 8019978:	4619      	mov	r1, r3
 801997a:	2208      	movs	r2, #8
 801997c:	305c      	adds	r0, #92	; 0x5c
 801997e:	f7ff fdad 	bl	80194dc <memset>
 8019982:	4b05      	ldr	r3, [pc, #20]	; (8019998 <std+0x38>)
 8019984:	6263      	str	r3, [r4, #36]	; 0x24
 8019986:	4b05      	ldr	r3, [pc, #20]	; (801999c <std+0x3c>)
 8019988:	62a3      	str	r3, [r4, #40]	; 0x28
 801998a:	4b05      	ldr	r3, [pc, #20]	; (80199a0 <std+0x40>)
 801998c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801998e:	4b05      	ldr	r3, [pc, #20]	; (80199a4 <std+0x44>)
 8019990:	6224      	str	r4, [r4, #32]
 8019992:	6323      	str	r3, [r4, #48]	; 0x30
 8019994:	bd10      	pop	{r4, pc}
 8019996:	bf00      	nop
 8019998:	0801a469 	.word	0x0801a469
 801999c:	0801a48b 	.word	0x0801a48b
 80199a0:	0801a4c3 	.word	0x0801a4c3
 80199a4:	0801a4e7 	.word	0x0801a4e7

080199a8 <_cleanup_r>:
 80199a8:	4901      	ldr	r1, [pc, #4]	; (80199b0 <_cleanup_r+0x8>)
 80199aa:	f000 b8af 	b.w	8019b0c <_fwalk_reent>
 80199ae:	bf00      	nop
 80199b0:	080198e9 	.word	0x080198e9

080199b4 <__sfmoreglue>:
 80199b4:	b570      	push	{r4, r5, r6, lr}
 80199b6:	2268      	movs	r2, #104	; 0x68
 80199b8:	1e4d      	subs	r5, r1, #1
 80199ba:	4355      	muls	r5, r2
 80199bc:	460e      	mov	r6, r1
 80199be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80199c2:	f000 f997 	bl	8019cf4 <_malloc_r>
 80199c6:	4604      	mov	r4, r0
 80199c8:	b140      	cbz	r0, 80199dc <__sfmoreglue+0x28>
 80199ca:	2100      	movs	r1, #0
 80199cc:	e9c0 1600 	strd	r1, r6, [r0]
 80199d0:	300c      	adds	r0, #12
 80199d2:	60a0      	str	r0, [r4, #8]
 80199d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80199d8:	f7ff fd80 	bl	80194dc <memset>
 80199dc:	4620      	mov	r0, r4
 80199de:	bd70      	pop	{r4, r5, r6, pc}

080199e0 <__sfp_lock_acquire>:
 80199e0:	4801      	ldr	r0, [pc, #4]	; (80199e8 <__sfp_lock_acquire+0x8>)
 80199e2:	f000 b8b3 	b.w	8019b4c <__retarget_lock_acquire_recursive>
 80199e6:	bf00      	nop
 80199e8:	2000861d 	.word	0x2000861d

080199ec <__sfp_lock_release>:
 80199ec:	4801      	ldr	r0, [pc, #4]	; (80199f4 <__sfp_lock_release+0x8>)
 80199ee:	f000 b8ae 	b.w	8019b4e <__retarget_lock_release_recursive>
 80199f2:	bf00      	nop
 80199f4:	2000861d 	.word	0x2000861d

080199f8 <__sinit_lock_acquire>:
 80199f8:	4801      	ldr	r0, [pc, #4]	; (8019a00 <__sinit_lock_acquire+0x8>)
 80199fa:	f000 b8a7 	b.w	8019b4c <__retarget_lock_acquire_recursive>
 80199fe:	bf00      	nop
 8019a00:	2000861e 	.word	0x2000861e

08019a04 <__sinit_lock_release>:
 8019a04:	4801      	ldr	r0, [pc, #4]	; (8019a0c <__sinit_lock_release+0x8>)
 8019a06:	f000 b8a2 	b.w	8019b4e <__retarget_lock_release_recursive>
 8019a0a:	bf00      	nop
 8019a0c:	2000861e 	.word	0x2000861e

08019a10 <__sinit>:
 8019a10:	b510      	push	{r4, lr}
 8019a12:	4604      	mov	r4, r0
 8019a14:	f7ff fff0 	bl	80199f8 <__sinit_lock_acquire>
 8019a18:	69a3      	ldr	r3, [r4, #24]
 8019a1a:	b11b      	cbz	r3, 8019a24 <__sinit+0x14>
 8019a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a20:	f7ff bff0 	b.w	8019a04 <__sinit_lock_release>
 8019a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a28:	6523      	str	r3, [r4, #80]	; 0x50
 8019a2a:	4b13      	ldr	r3, [pc, #76]	; (8019a78 <__sinit+0x68>)
 8019a2c:	4a13      	ldr	r2, [pc, #76]	; (8019a7c <__sinit+0x6c>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a32:	42a3      	cmp	r3, r4
 8019a34:	bf04      	itt	eq
 8019a36:	2301      	moveq	r3, #1
 8019a38:	61a3      	streq	r3, [r4, #24]
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	f000 f820 	bl	8019a80 <__sfp>
 8019a40:	6060      	str	r0, [r4, #4]
 8019a42:	4620      	mov	r0, r4
 8019a44:	f000 f81c 	bl	8019a80 <__sfp>
 8019a48:	60a0      	str	r0, [r4, #8]
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	f000 f818 	bl	8019a80 <__sfp>
 8019a50:	2200      	movs	r2, #0
 8019a52:	60e0      	str	r0, [r4, #12]
 8019a54:	2104      	movs	r1, #4
 8019a56:	6860      	ldr	r0, [r4, #4]
 8019a58:	f7ff ff82 	bl	8019960 <std>
 8019a5c:	68a0      	ldr	r0, [r4, #8]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	2109      	movs	r1, #9
 8019a62:	f7ff ff7d 	bl	8019960 <std>
 8019a66:	68e0      	ldr	r0, [r4, #12]
 8019a68:	2202      	movs	r2, #2
 8019a6a:	2112      	movs	r1, #18
 8019a6c:	f7ff ff78 	bl	8019960 <std>
 8019a70:	2301      	movs	r3, #1
 8019a72:	61a3      	str	r3, [r4, #24]
 8019a74:	e7d2      	b.n	8019a1c <__sinit+0xc>
 8019a76:	bf00      	nop
 8019a78:	0801a7bc 	.word	0x0801a7bc
 8019a7c:	080199a9 	.word	0x080199a9

08019a80 <__sfp>:
 8019a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a82:	4607      	mov	r7, r0
 8019a84:	f7ff ffac 	bl	80199e0 <__sfp_lock_acquire>
 8019a88:	4b1e      	ldr	r3, [pc, #120]	; (8019b04 <__sfp+0x84>)
 8019a8a:	681e      	ldr	r6, [r3, #0]
 8019a8c:	69b3      	ldr	r3, [r6, #24]
 8019a8e:	b913      	cbnz	r3, 8019a96 <__sfp+0x16>
 8019a90:	4630      	mov	r0, r6
 8019a92:	f7ff ffbd 	bl	8019a10 <__sinit>
 8019a96:	3648      	adds	r6, #72	; 0x48
 8019a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019a9c:	3b01      	subs	r3, #1
 8019a9e:	d503      	bpl.n	8019aa8 <__sfp+0x28>
 8019aa0:	6833      	ldr	r3, [r6, #0]
 8019aa2:	b30b      	cbz	r3, 8019ae8 <__sfp+0x68>
 8019aa4:	6836      	ldr	r6, [r6, #0]
 8019aa6:	e7f7      	b.n	8019a98 <__sfp+0x18>
 8019aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019aac:	b9d5      	cbnz	r5, 8019ae4 <__sfp+0x64>
 8019aae:	4b16      	ldr	r3, [pc, #88]	; (8019b08 <__sfp+0x88>)
 8019ab0:	60e3      	str	r3, [r4, #12]
 8019ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8019ab8:	f000 f847 	bl	8019b4a <__retarget_lock_init_recursive>
 8019abc:	f7ff ff96 	bl	80199ec <__sfp_lock_release>
 8019ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019ac8:	6025      	str	r5, [r4, #0]
 8019aca:	61a5      	str	r5, [r4, #24]
 8019acc:	2208      	movs	r2, #8
 8019ace:	4629      	mov	r1, r5
 8019ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ad4:	f7ff fd02 	bl	80194dc <memset>
 8019ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae4:	3468      	adds	r4, #104	; 0x68
 8019ae6:	e7d9      	b.n	8019a9c <__sfp+0x1c>
 8019ae8:	2104      	movs	r1, #4
 8019aea:	4638      	mov	r0, r7
 8019aec:	f7ff ff62 	bl	80199b4 <__sfmoreglue>
 8019af0:	4604      	mov	r4, r0
 8019af2:	6030      	str	r0, [r6, #0]
 8019af4:	2800      	cmp	r0, #0
 8019af6:	d1d5      	bne.n	8019aa4 <__sfp+0x24>
 8019af8:	f7ff ff78 	bl	80199ec <__sfp_lock_release>
 8019afc:	230c      	movs	r3, #12
 8019afe:	603b      	str	r3, [r7, #0]
 8019b00:	e7ee      	b.n	8019ae0 <__sfp+0x60>
 8019b02:	bf00      	nop
 8019b04:	0801a7bc 	.word	0x0801a7bc
 8019b08:	ffff0001 	.word	0xffff0001

08019b0c <_fwalk_reent>:
 8019b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b10:	4606      	mov	r6, r0
 8019b12:	4688      	mov	r8, r1
 8019b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b18:	2700      	movs	r7, #0
 8019b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8019b22:	d505      	bpl.n	8019b30 <_fwalk_reent+0x24>
 8019b24:	6824      	ldr	r4, [r4, #0]
 8019b26:	2c00      	cmp	r4, #0
 8019b28:	d1f7      	bne.n	8019b1a <_fwalk_reent+0xe>
 8019b2a:	4638      	mov	r0, r7
 8019b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b30:	89ab      	ldrh	r3, [r5, #12]
 8019b32:	2b01      	cmp	r3, #1
 8019b34:	d907      	bls.n	8019b46 <_fwalk_reent+0x3a>
 8019b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	d003      	beq.n	8019b46 <_fwalk_reent+0x3a>
 8019b3e:	4629      	mov	r1, r5
 8019b40:	4630      	mov	r0, r6
 8019b42:	47c0      	blx	r8
 8019b44:	4307      	orrs	r7, r0
 8019b46:	3568      	adds	r5, #104	; 0x68
 8019b48:	e7e9      	b.n	8019b1e <_fwalk_reent+0x12>

08019b4a <__retarget_lock_init_recursive>:
 8019b4a:	4770      	bx	lr

08019b4c <__retarget_lock_acquire_recursive>:
 8019b4c:	4770      	bx	lr

08019b4e <__retarget_lock_release_recursive>:
 8019b4e:	4770      	bx	lr

08019b50 <__swhatbuf_r>:
 8019b50:	b570      	push	{r4, r5, r6, lr}
 8019b52:	460e      	mov	r6, r1
 8019b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b58:	2900      	cmp	r1, #0
 8019b5a:	b096      	sub	sp, #88	; 0x58
 8019b5c:	4614      	mov	r4, r2
 8019b5e:	461d      	mov	r5, r3
 8019b60:	da08      	bge.n	8019b74 <__swhatbuf_r+0x24>
 8019b62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019b66:	2200      	movs	r2, #0
 8019b68:	602a      	str	r2, [r5, #0]
 8019b6a:	061a      	lsls	r2, r3, #24
 8019b6c:	d410      	bmi.n	8019b90 <__swhatbuf_r+0x40>
 8019b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b72:	e00e      	b.n	8019b92 <__swhatbuf_r+0x42>
 8019b74:	466a      	mov	r2, sp
 8019b76:	f000 fcdd 	bl	801a534 <_fstat_r>
 8019b7a:	2800      	cmp	r0, #0
 8019b7c:	dbf1      	blt.n	8019b62 <__swhatbuf_r+0x12>
 8019b7e:	9a01      	ldr	r2, [sp, #4]
 8019b80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019b84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019b88:	425a      	negs	r2, r3
 8019b8a:	415a      	adcs	r2, r3
 8019b8c:	602a      	str	r2, [r5, #0]
 8019b8e:	e7ee      	b.n	8019b6e <__swhatbuf_r+0x1e>
 8019b90:	2340      	movs	r3, #64	; 0x40
 8019b92:	2000      	movs	r0, #0
 8019b94:	6023      	str	r3, [r4, #0]
 8019b96:	b016      	add	sp, #88	; 0x58
 8019b98:	bd70      	pop	{r4, r5, r6, pc}
	...

08019b9c <__smakebuf_r>:
 8019b9c:	898b      	ldrh	r3, [r1, #12]
 8019b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ba0:	079d      	lsls	r5, r3, #30
 8019ba2:	4606      	mov	r6, r0
 8019ba4:	460c      	mov	r4, r1
 8019ba6:	d507      	bpl.n	8019bb8 <__smakebuf_r+0x1c>
 8019ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019bac:	6023      	str	r3, [r4, #0]
 8019bae:	6123      	str	r3, [r4, #16]
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	6163      	str	r3, [r4, #20]
 8019bb4:	b002      	add	sp, #8
 8019bb6:	bd70      	pop	{r4, r5, r6, pc}
 8019bb8:	ab01      	add	r3, sp, #4
 8019bba:	466a      	mov	r2, sp
 8019bbc:	f7ff ffc8 	bl	8019b50 <__swhatbuf_r>
 8019bc0:	9900      	ldr	r1, [sp, #0]
 8019bc2:	4605      	mov	r5, r0
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	f000 f895 	bl	8019cf4 <_malloc_r>
 8019bca:	b948      	cbnz	r0, 8019be0 <__smakebuf_r+0x44>
 8019bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bd0:	059a      	lsls	r2, r3, #22
 8019bd2:	d4ef      	bmi.n	8019bb4 <__smakebuf_r+0x18>
 8019bd4:	f023 0303 	bic.w	r3, r3, #3
 8019bd8:	f043 0302 	orr.w	r3, r3, #2
 8019bdc:	81a3      	strh	r3, [r4, #12]
 8019bde:	e7e3      	b.n	8019ba8 <__smakebuf_r+0xc>
 8019be0:	4b0d      	ldr	r3, [pc, #52]	; (8019c18 <__smakebuf_r+0x7c>)
 8019be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019be4:	89a3      	ldrh	r3, [r4, #12]
 8019be6:	6020      	str	r0, [r4, #0]
 8019be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bec:	81a3      	strh	r3, [r4, #12]
 8019bee:	9b00      	ldr	r3, [sp, #0]
 8019bf0:	6163      	str	r3, [r4, #20]
 8019bf2:	9b01      	ldr	r3, [sp, #4]
 8019bf4:	6120      	str	r0, [r4, #16]
 8019bf6:	b15b      	cbz	r3, 8019c10 <__smakebuf_r+0x74>
 8019bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	f000 fcab 	bl	801a558 <_isatty_r>
 8019c02:	b128      	cbz	r0, 8019c10 <__smakebuf_r+0x74>
 8019c04:	89a3      	ldrh	r3, [r4, #12]
 8019c06:	f023 0303 	bic.w	r3, r3, #3
 8019c0a:	f043 0301 	orr.w	r3, r3, #1
 8019c0e:	81a3      	strh	r3, [r4, #12]
 8019c10:	89a0      	ldrh	r0, [r4, #12]
 8019c12:	4305      	orrs	r5, r0
 8019c14:	81a5      	strh	r5, [r4, #12]
 8019c16:	e7cd      	b.n	8019bb4 <__smakebuf_r+0x18>
 8019c18:	080199a9 	.word	0x080199a9

08019c1c <_free_r>:
 8019c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c1e:	2900      	cmp	r1, #0
 8019c20:	d044      	beq.n	8019cac <_free_r+0x90>
 8019c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c26:	9001      	str	r0, [sp, #4]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8019c2e:	bfb8      	it	lt
 8019c30:	18e4      	addlt	r4, r4, r3
 8019c32:	f000 fcb3 	bl	801a59c <__malloc_lock>
 8019c36:	4a1e      	ldr	r2, [pc, #120]	; (8019cb0 <_free_r+0x94>)
 8019c38:	9801      	ldr	r0, [sp, #4]
 8019c3a:	6813      	ldr	r3, [r2, #0]
 8019c3c:	b933      	cbnz	r3, 8019c4c <_free_r+0x30>
 8019c3e:	6063      	str	r3, [r4, #4]
 8019c40:	6014      	str	r4, [r2, #0]
 8019c42:	b003      	add	sp, #12
 8019c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c48:	f000 bcae 	b.w	801a5a8 <__malloc_unlock>
 8019c4c:	42a3      	cmp	r3, r4
 8019c4e:	d908      	bls.n	8019c62 <_free_r+0x46>
 8019c50:	6825      	ldr	r5, [r4, #0]
 8019c52:	1961      	adds	r1, r4, r5
 8019c54:	428b      	cmp	r3, r1
 8019c56:	bf01      	itttt	eq
 8019c58:	6819      	ldreq	r1, [r3, #0]
 8019c5a:	685b      	ldreq	r3, [r3, #4]
 8019c5c:	1949      	addeq	r1, r1, r5
 8019c5e:	6021      	streq	r1, [r4, #0]
 8019c60:	e7ed      	b.n	8019c3e <_free_r+0x22>
 8019c62:	461a      	mov	r2, r3
 8019c64:	685b      	ldr	r3, [r3, #4]
 8019c66:	b10b      	cbz	r3, 8019c6c <_free_r+0x50>
 8019c68:	42a3      	cmp	r3, r4
 8019c6a:	d9fa      	bls.n	8019c62 <_free_r+0x46>
 8019c6c:	6811      	ldr	r1, [r2, #0]
 8019c6e:	1855      	adds	r5, r2, r1
 8019c70:	42a5      	cmp	r5, r4
 8019c72:	d10b      	bne.n	8019c8c <_free_r+0x70>
 8019c74:	6824      	ldr	r4, [r4, #0]
 8019c76:	4421      	add	r1, r4
 8019c78:	1854      	adds	r4, r2, r1
 8019c7a:	42a3      	cmp	r3, r4
 8019c7c:	6011      	str	r1, [r2, #0]
 8019c7e:	d1e0      	bne.n	8019c42 <_free_r+0x26>
 8019c80:	681c      	ldr	r4, [r3, #0]
 8019c82:	685b      	ldr	r3, [r3, #4]
 8019c84:	6053      	str	r3, [r2, #4]
 8019c86:	4421      	add	r1, r4
 8019c88:	6011      	str	r1, [r2, #0]
 8019c8a:	e7da      	b.n	8019c42 <_free_r+0x26>
 8019c8c:	d902      	bls.n	8019c94 <_free_r+0x78>
 8019c8e:	230c      	movs	r3, #12
 8019c90:	6003      	str	r3, [r0, #0]
 8019c92:	e7d6      	b.n	8019c42 <_free_r+0x26>
 8019c94:	6825      	ldr	r5, [r4, #0]
 8019c96:	1961      	adds	r1, r4, r5
 8019c98:	428b      	cmp	r3, r1
 8019c9a:	bf04      	itt	eq
 8019c9c:	6819      	ldreq	r1, [r3, #0]
 8019c9e:	685b      	ldreq	r3, [r3, #4]
 8019ca0:	6063      	str	r3, [r4, #4]
 8019ca2:	bf04      	itt	eq
 8019ca4:	1949      	addeq	r1, r1, r5
 8019ca6:	6021      	streq	r1, [r4, #0]
 8019ca8:	6054      	str	r4, [r2, #4]
 8019caa:	e7ca      	b.n	8019c42 <_free_r+0x26>
 8019cac:	b003      	add	sp, #12
 8019cae:	bd30      	pop	{r4, r5, pc}
 8019cb0:	20008620 	.word	0x20008620

08019cb4 <sbrk_aligned>:
 8019cb4:	b570      	push	{r4, r5, r6, lr}
 8019cb6:	4e0e      	ldr	r6, [pc, #56]	; (8019cf0 <sbrk_aligned+0x3c>)
 8019cb8:	460c      	mov	r4, r1
 8019cba:	6831      	ldr	r1, [r6, #0]
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	b911      	cbnz	r1, 8019cc6 <sbrk_aligned+0x12>
 8019cc0:	f000 fbc2 	bl	801a448 <_sbrk_r>
 8019cc4:	6030      	str	r0, [r6, #0]
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f000 fbbd 	bl	801a448 <_sbrk_r>
 8019cce:	1c43      	adds	r3, r0, #1
 8019cd0:	d00a      	beq.n	8019ce8 <sbrk_aligned+0x34>
 8019cd2:	1cc4      	adds	r4, r0, #3
 8019cd4:	f024 0403 	bic.w	r4, r4, #3
 8019cd8:	42a0      	cmp	r0, r4
 8019cda:	d007      	beq.n	8019cec <sbrk_aligned+0x38>
 8019cdc:	1a21      	subs	r1, r4, r0
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f000 fbb2 	bl	801a448 <_sbrk_r>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d101      	bne.n	8019cec <sbrk_aligned+0x38>
 8019ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8019cec:	4620      	mov	r0, r4
 8019cee:	bd70      	pop	{r4, r5, r6, pc}
 8019cf0:	20008624 	.word	0x20008624

08019cf4 <_malloc_r>:
 8019cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf8:	1ccd      	adds	r5, r1, #3
 8019cfa:	f025 0503 	bic.w	r5, r5, #3
 8019cfe:	3508      	adds	r5, #8
 8019d00:	2d0c      	cmp	r5, #12
 8019d02:	bf38      	it	cc
 8019d04:	250c      	movcc	r5, #12
 8019d06:	2d00      	cmp	r5, #0
 8019d08:	4607      	mov	r7, r0
 8019d0a:	db01      	blt.n	8019d10 <_malloc_r+0x1c>
 8019d0c:	42a9      	cmp	r1, r5
 8019d0e:	d905      	bls.n	8019d1c <_malloc_r+0x28>
 8019d10:	230c      	movs	r3, #12
 8019d12:	603b      	str	r3, [r7, #0]
 8019d14:	2600      	movs	r6, #0
 8019d16:	4630      	mov	r0, r6
 8019d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d1c:	4e2e      	ldr	r6, [pc, #184]	; (8019dd8 <_malloc_r+0xe4>)
 8019d1e:	f000 fc3d 	bl	801a59c <__malloc_lock>
 8019d22:	6833      	ldr	r3, [r6, #0]
 8019d24:	461c      	mov	r4, r3
 8019d26:	bb34      	cbnz	r4, 8019d76 <_malloc_r+0x82>
 8019d28:	4629      	mov	r1, r5
 8019d2a:	4638      	mov	r0, r7
 8019d2c:	f7ff ffc2 	bl	8019cb4 <sbrk_aligned>
 8019d30:	1c43      	adds	r3, r0, #1
 8019d32:	4604      	mov	r4, r0
 8019d34:	d14d      	bne.n	8019dd2 <_malloc_r+0xde>
 8019d36:	6834      	ldr	r4, [r6, #0]
 8019d38:	4626      	mov	r6, r4
 8019d3a:	2e00      	cmp	r6, #0
 8019d3c:	d140      	bne.n	8019dc0 <_malloc_r+0xcc>
 8019d3e:	6823      	ldr	r3, [r4, #0]
 8019d40:	4631      	mov	r1, r6
 8019d42:	4638      	mov	r0, r7
 8019d44:	eb04 0803 	add.w	r8, r4, r3
 8019d48:	f000 fb7e 	bl	801a448 <_sbrk_r>
 8019d4c:	4580      	cmp	r8, r0
 8019d4e:	d13a      	bne.n	8019dc6 <_malloc_r+0xd2>
 8019d50:	6821      	ldr	r1, [r4, #0]
 8019d52:	3503      	adds	r5, #3
 8019d54:	1a6d      	subs	r5, r5, r1
 8019d56:	f025 0503 	bic.w	r5, r5, #3
 8019d5a:	3508      	adds	r5, #8
 8019d5c:	2d0c      	cmp	r5, #12
 8019d5e:	bf38      	it	cc
 8019d60:	250c      	movcc	r5, #12
 8019d62:	4629      	mov	r1, r5
 8019d64:	4638      	mov	r0, r7
 8019d66:	f7ff ffa5 	bl	8019cb4 <sbrk_aligned>
 8019d6a:	3001      	adds	r0, #1
 8019d6c:	d02b      	beq.n	8019dc6 <_malloc_r+0xd2>
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	442b      	add	r3, r5
 8019d72:	6023      	str	r3, [r4, #0]
 8019d74:	e00e      	b.n	8019d94 <_malloc_r+0xa0>
 8019d76:	6822      	ldr	r2, [r4, #0]
 8019d78:	1b52      	subs	r2, r2, r5
 8019d7a:	d41e      	bmi.n	8019dba <_malloc_r+0xc6>
 8019d7c:	2a0b      	cmp	r2, #11
 8019d7e:	d916      	bls.n	8019dae <_malloc_r+0xba>
 8019d80:	1961      	adds	r1, r4, r5
 8019d82:	42a3      	cmp	r3, r4
 8019d84:	6025      	str	r5, [r4, #0]
 8019d86:	bf18      	it	ne
 8019d88:	6059      	strne	r1, [r3, #4]
 8019d8a:	6863      	ldr	r3, [r4, #4]
 8019d8c:	bf08      	it	eq
 8019d8e:	6031      	streq	r1, [r6, #0]
 8019d90:	5162      	str	r2, [r4, r5]
 8019d92:	604b      	str	r3, [r1, #4]
 8019d94:	4638      	mov	r0, r7
 8019d96:	f104 060b 	add.w	r6, r4, #11
 8019d9a:	f000 fc05 	bl	801a5a8 <__malloc_unlock>
 8019d9e:	f026 0607 	bic.w	r6, r6, #7
 8019da2:	1d23      	adds	r3, r4, #4
 8019da4:	1af2      	subs	r2, r6, r3
 8019da6:	d0b6      	beq.n	8019d16 <_malloc_r+0x22>
 8019da8:	1b9b      	subs	r3, r3, r6
 8019daa:	50a3      	str	r3, [r4, r2]
 8019dac:	e7b3      	b.n	8019d16 <_malloc_r+0x22>
 8019dae:	6862      	ldr	r2, [r4, #4]
 8019db0:	42a3      	cmp	r3, r4
 8019db2:	bf0c      	ite	eq
 8019db4:	6032      	streq	r2, [r6, #0]
 8019db6:	605a      	strne	r2, [r3, #4]
 8019db8:	e7ec      	b.n	8019d94 <_malloc_r+0xa0>
 8019dba:	4623      	mov	r3, r4
 8019dbc:	6864      	ldr	r4, [r4, #4]
 8019dbe:	e7b2      	b.n	8019d26 <_malloc_r+0x32>
 8019dc0:	4634      	mov	r4, r6
 8019dc2:	6876      	ldr	r6, [r6, #4]
 8019dc4:	e7b9      	b.n	8019d3a <_malloc_r+0x46>
 8019dc6:	230c      	movs	r3, #12
 8019dc8:	603b      	str	r3, [r7, #0]
 8019dca:	4638      	mov	r0, r7
 8019dcc:	f000 fbec 	bl	801a5a8 <__malloc_unlock>
 8019dd0:	e7a1      	b.n	8019d16 <_malloc_r+0x22>
 8019dd2:	6025      	str	r5, [r4, #0]
 8019dd4:	e7de      	b.n	8019d94 <_malloc_r+0xa0>
 8019dd6:	bf00      	nop
 8019dd8:	20008620 	.word	0x20008620

08019ddc <__sfputc_r>:
 8019ddc:	6893      	ldr	r3, [r2, #8]
 8019dde:	3b01      	subs	r3, #1
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	b410      	push	{r4}
 8019de4:	6093      	str	r3, [r2, #8]
 8019de6:	da08      	bge.n	8019dfa <__sfputc_r+0x1e>
 8019de8:	6994      	ldr	r4, [r2, #24]
 8019dea:	42a3      	cmp	r3, r4
 8019dec:	db01      	blt.n	8019df2 <__sfputc_r+0x16>
 8019dee:	290a      	cmp	r1, #10
 8019df0:	d103      	bne.n	8019dfa <__sfputc_r+0x1e>
 8019df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019df6:	f7ff bc31 	b.w	801965c <__swbuf_r>
 8019dfa:	6813      	ldr	r3, [r2, #0]
 8019dfc:	1c58      	adds	r0, r3, #1
 8019dfe:	6010      	str	r0, [r2, #0]
 8019e00:	7019      	strb	r1, [r3, #0]
 8019e02:	4608      	mov	r0, r1
 8019e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e08:	4770      	bx	lr

08019e0a <__sfputs_r>:
 8019e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e0c:	4606      	mov	r6, r0
 8019e0e:	460f      	mov	r7, r1
 8019e10:	4614      	mov	r4, r2
 8019e12:	18d5      	adds	r5, r2, r3
 8019e14:	42ac      	cmp	r4, r5
 8019e16:	d101      	bne.n	8019e1c <__sfputs_r+0x12>
 8019e18:	2000      	movs	r0, #0
 8019e1a:	e007      	b.n	8019e2c <__sfputs_r+0x22>
 8019e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e20:	463a      	mov	r2, r7
 8019e22:	4630      	mov	r0, r6
 8019e24:	f7ff ffda 	bl	8019ddc <__sfputc_r>
 8019e28:	1c43      	adds	r3, r0, #1
 8019e2a:	d1f3      	bne.n	8019e14 <__sfputs_r+0xa>
 8019e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e30 <_vfiprintf_r>:
 8019e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e34:	460d      	mov	r5, r1
 8019e36:	b09d      	sub	sp, #116	; 0x74
 8019e38:	4614      	mov	r4, r2
 8019e3a:	4698      	mov	r8, r3
 8019e3c:	4606      	mov	r6, r0
 8019e3e:	b118      	cbz	r0, 8019e48 <_vfiprintf_r+0x18>
 8019e40:	6983      	ldr	r3, [r0, #24]
 8019e42:	b90b      	cbnz	r3, 8019e48 <_vfiprintf_r+0x18>
 8019e44:	f7ff fde4 	bl	8019a10 <__sinit>
 8019e48:	4b89      	ldr	r3, [pc, #548]	; (801a070 <_vfiprintf_r+0x240>)
 8019e4a:	429d      	cmp	r5, r3
 8019e4c:	d11b      	bne.n	8019e86 <_vfiprintf_r+0x56>
 8019e4e:	6875      	ldr	r5, [r6, #4]
 8019e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e52:	07d9      	lsls	r1, r3, #31
 8019e54:	d405      	bmi.n	8019e62 <_vfiprintf_r+0x32>
 8019e56:	89ab      	ldrh	r3, [r5, #12]
 8019e58:	059a      	lsls	r2, r3, #22
 8019e5a:	d402      	bmi.n	8019e62 <_vfiprintf_r+0x32>
 8019e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e5e:	f7ff fe75 	bl	8019b4c <__retarget_lock_acquire_recursive>
 8019e62:	89ab      	ldrh	r3, [r5, #12]
 8019e64:	071b      	lsls	r3, r3, #28
 8019e66:	d501      	bpl.n	8019e6c <_vfiprintf_r+0x3c>
 8019e68:	692b      	ldr	r3, [r5, #16]
 8019e6a:	b9eb      	cbnz	r3, 8019ea8 <_vfiprintf_r+0x78>
 8019e6c:	4629      	mov	r1, r5
 8019e6e:	4630      	mov	r0, r6
 8019e70:	f7ff fc46 	bl	8019700 <__swsetup_r>
 8019e74:	b1c0      	cbz	r0, 8019ea8 <_vfiprintf_r+0x78>
 8019e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e78:	07dc      	lsls	r4, r3, #31
 8019e7a:	d50e      	bpl.n	8019e9a <_vfiprintf_r+0x6a>
 8019e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e80:	b01d      	add	sp, #116	; 0x74
 8019e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e86:	4b7b      	ldr	r3, [pc, #492]	; (801a074 <_vfiprintf_r+0x244>)
 8019e88:	429d      	cmp	r5, r3
 8019e8a:	d101      	bne.n	8019e90 <_vfiprintf_r+0x60>
 8019e8c:	68b5      	ldr	r5, [r6, #8]
 8019e8e:	e7df      	b.n	8019e50 <_vfiprintf_r+0x20>
 8019e90:	4b79      	ldr	r3, [pc, #484]	; (801a078 <_vfiprintf_r+0x248>)
 8019e92:	429d      	cmp	r5, r3
 8019e94:	bf08      	it	eq
 8019e96:	68f5      	ldreq	r5, [r6, #12]
 8019e98:	e7da      	b.n	8019e50 <_vfiprintf_r+0x20>
 8019e9a:	89ab      	ldrh	r3, [r5, #12]
 8019e9c:	0598      	lsls	r0, r3, #22
 8019e9e:	d4ed      	bmi.n	8019e7c <_vfiprintf_r+0x4c>
 8019ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ea2:	f7ff fe54 	bl	8019b4e <__retarget_lock_release_recursive>
 8019ea6:	e7e9      	b.n	8019e7c <_vfiprintf_r+0x4c>
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8019eac:	2320      	movs	r3, #32
 8019eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019eb6:	2330      	movs	r3, #48	; 0x30
 8019eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a07c <_vfiprintf_r+0x24c>
 8019ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ec0:	f04f 0901 	mov.w	r9, #1
 8019ec4:	4623      	mov	r3, r4
 8019ec6:	469a      	mov	sl, r3
 8019ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ecc:	b10a      	cbz	r2, 8019ed2 <_vfiprintf_r+0xa2>
 8019ece:	2a25      	cmp	r2, #37	; 0x25
 8019ed0:	d1f9      	bne.n	8019ec6 <_vfiprintf_r+0x96>
 8019ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8019ed6:	d00b      	beq.n	8019ef0 <_vfiprintf_r+0xc0>
 8019ed8:	465b      	mov	r3, fp
 8019eda:	4622      	mov	r2, r4
 8019edc:	4629      	mov	r1, r5
 8019ede:	4630      	mov	r0, r6
 8019ee0:	f7ff ff93 	bl	8019e0a <__sfputs_r>
 8019ee4:	3001      	adds	r0, #1
 8019ee6:	f000 80aa 	beq.w	801a03e <_vfiprintf_r+0x20e>
 8019eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019eec:	445a      	add	r2, fp
 8019eee:	9209      	str	r2, [sp, #36]	; 0x24
 8019ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	f000 80a2 	beq.w	801a03e <_vfiprintf_r+0x20e>
 8019efa:	2300      	movs	r3, #0
 8019efc:	f04f 32ff 	mov.w	r2, #4294967295
 8019f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f04:	f10a 0a01 	add.w	sl, sl, #1
 8019f08:	9304      	str	r3, [sp, #16]
 8019f0a:	9307      	str	r3, [sp, #28]
 8019f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f10:	931a      	str	r3, [sp, #104]	; 0x68
 8019f12:	4654      	mov	r4, sl
 8019f14:	2205      	movs	r2, #5
 8019f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f1a:	4858      	ldr	r0, [pc, #352]	; (801a07c <_vfiprintf_r+0x24c>)
 8019f1c:	f7e6 f930 	bl	8000180 <memchr>
 8019f20:	9a04      	ldr	r2, [sp, #16]
 8019f22:	b9d8      	cbnz	r0, 8019f5c <_vfiprintf_r+0x12c>
 8019f24:	06d1      	lsls	r1, r2, #27
 8019f26:	bf44      	itt	mi
 8019f28:	2320      	movmi	r3, #32
 8019f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f2e:	0713      	lsls	r3, r2, #28
 8019f30:	bf44      	itt	mi
 8019f32:	232b      	movmi	r3, #43	; 0x2b
 8019f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f38:	f89a 3000 	ldrb.w	r3, [sl]
 8019f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8019f3e:	d015      	beq.n	8019f6c <_vfiprintf_r+0x13c>
 8019f40:	9a07      	ldr	r2, [sp, #28]
 8019f42:	4654      	mov	r4, sl
 8019f44:	2000      	movs	r0, #0
 8019f46:	f04f 0c0a 	mov.w	ip, #10
 8019f4a:	4621      	mov	r1, r4
 8019f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f50:	3b30      	subs	r3, #48	; 0x30
 8019f52:	2b09      	cmp	r3, #9
 8019f54:	d94e      	bls.n	8019ff4 <_vfiprintf_r+0x1c4>
 8019f56:	b1b0      	cbz	r0, 8019f86 <_vfiprintf_r+0x156>
 8019f58:	9207      	str	r2, [sp, #28]
 8019f5a:	e014      	b.n	8019f86 <_vfiprintf_r+0x156>
 8019f5c:	eba0 0308 	sub.w	r3, r0, r8
 8019f60:	fa09 f303 	lsl.w	r3, r9, r3
 8019f64:	4313      	orrs	r3, r2
 8019f66:	9304      	str	r3, [sp, #16]
 8019f68:	46a2      	mov	sl, r4
 8019f6a:	e7d2      	b.n	8019f12 <_vfiprintf_r+0xe2>
 8019f6c:	9b03      	ldr	r3, [sp, #12]
 8019f6e:	1d19      	adds	r1, r3, #4
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	9103      	str	r1, [sp, #12]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	bfbb      	ittet	lt
 8019f78:	425b      	neglt	r3, r3
 8019f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8019f7e:	9307      	strge	r3, [sp, #28]
 8019f80:	9307      	strlt	r3, [sp, #28]
 8019f82:	bfb8      	it	lt
 8019f84:	9204      	strlt	r2, [sp, #16]
 8019f86:	7823      	ldrb	r3, [r4, #0]
 8019f88:	2b2e      	cmp	r3, #46	; 0x2e
 8019f8a:	d10c      	bne.n	8019fa6 <_vfiprintf_r+0x176>
 8019f8c:	7863      	ldrb	r3, [r4, #1]
 8019f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019f90:	d135      	bne.n	8019ffe <_vfiprintf_r+0x1ce>
 8019f92:	9b03      	ldr	r3, [sp, #12]
 8019f94:	1d1a      	adds	r2, r3, #4
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	9203      	str	r2, [sp, #12]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	bfb8      	it	lt
 8019f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fa2:	3402      	adds	r4, #2
 8019fa4:	9305      	str	r3, [sp, #20]
 8019fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a08c <_vfiprintf_r+0x25c>
 8019faa:	7821      	ldrb	r1, [r4, #0]
 8019fac:	2203      	movs	r2, #3
 8019fae:	4650      	mov	r0, sl
 8019fb0:	f7e6 f8e6 	bl	8000180 <memchr>
 8019fb4:	b140      	cbz	r0, 8019fc8 <_vfiprintf_r+0x198>
 8019fb6:	2340      	movs	r3, #64	; 0x40
 8019fb8:	eba0 000a 	sub.w	r0, r0, sl
 8019fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8019fc0:	9b04      	ldr	r3, [sp, #16]
 8019fc2:	4303      	orrs	r3, r0
 8019fc4:	3401      	adds	r4, #1
 8019fc6:	9304      	str	r3, [sp, #16]
 8019fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fcc:	482c      	ldr	r0, [pc, #176]	; (801a080 <_vfiprintf_r+0x250>)
 8019fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019fd2:	2206      	movs	r2, #6
 8019fd4:	f7e6 f8d4 	bl	8000180 <memchr>
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	d03f      	beq.n	801a05c <_vfiprintf_r+0x22c>
 8019fdc:	4b29      	ldr	r3, [pc, #164]	; (801a084 <_vfiprintf_r+0x254>)
 8019fde:	bb1b      	cbnz	r3, 801a028 <_vfiprintf_r+0x1f8>
 8019fe0:	9b03      	ldr	r3, [sp, #12]
 8019fe2:	3307      	adds	r3, #7
 8019fe4:	f023 0307 	bic.w	r3, r3, #7
 8019fe8:	3308      	adds	r3, #8
 8019fea:	9303      	str	r3, [sp, #12]
 8019fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fee:	443b      	add	r3, r7
 8019ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ff2:	e767      	b.n	8019ec4 <_vfiprintf_r+0x94>
 8019ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ff8:	460c      	mov	r4, r1
 8019ffa:	2001      	movs	r0, #1
 8019ffc:	e7a5      	b.n	8019f4a <_vfiprintf_r+0x11a>
 8019ffe:	2300      	movs	r3, #0
 801a000:	3401      	adds	r4, #1
 801a002:	9305      	str	r3, [sp, #20]
 801a004:	4619      	mov	r1, r3
 801a006:	f04f 0c0a 	mov.w	ip, #10
 801a00a:	4620      	mov	r0, r4
 801a00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a010:	3a30      	subs	r2, #48	; 0x30
 801a012:	2a09      	cmp	r2, #9
 801a014:	d903      	bls.n	801a01e <_vfiprintf_r+0x1ee>
 801a016:	2b00      	cmp	r3, #0
 801a018:	d0c5      	beq.n	8019fa6 <_vfiprintf_r+0x176>
 801a01a:	9105      	str	r1, [sp, #20]
 801a01c:	e7c3      	b.n	8019fa6 <_vfiprintf_r+0x176>
 801a01e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a022:	4604      	mov	r4, r0
 801a024:	2301      	movs	r3, #1
 801a026:	e7f0      	b.n	801a00a <_vfiprintf_r+0x1da>
 801a028:	ab03      	add	r3, sp, #12
 801a02a:	9300      	str	r3, [sp, #0]
 801a02c:	462a      	mov	r2, r5
 801a02e:	4b16      	ldr	r3, [pc, #88]	; (801a088 <_vfiprintf_r+0x258>)
 801a030:	a904      	add	r1, sp, #16
 801a032:	4630      	mov	r0, r6
 801a034:	f3af 8000 	nop.w
 801a038:	4607      	mov	r7, r0
 801a03a:	1c78      	adds	r0, r7, #1
 801a03c:	d1d6      	bne.n	8019fec <_vfiprintf_r+0x1bc>
 801a03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a040:	07d9      	lsls	r1, r3, #31
 801a042:	d405      	bmi.n	801a050 <_vfiprintf_r+0x220>
 801a044:	89ab      	ldrh	r3, [r5, #12]
 801a046:	059a      	lsls	r2, r3, #22
 801a048:	d402      	bmi.n	801a050 <_vfiprintf_r+0x220>
 801a04a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a04c:	f7ff fd7f 	bl	8019b4e <__retarget_lock_release_recursive>
 801a050:	89ab      	ldrh	r3, [r5, #12]
 801a052:	065b      	lsls	r3, r3, #25
 801a054:	f53f af12 	bmi.w	8019e7c <_vfiprintf_r+0x4c>
 801a058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a05a:	e711      	b.n	8019e80 <_vfiprintf_r+0x50>
 801a05c:	ab03      	add	r3, sp, #12
 801a05e:	9300      	str	r3, [sp, #0]
 801a060:	462a      	mov	r2, r5
 801a062:	4b09      	ldr	r3, [pc, #36]	; (801a088 <_vfiprintf_r+0x258>)
 801a064:	a904      	add	r1, sp, #16
 801a066:	4630      	mov	r0, r6
 801a068:	f000 f880 	bl	801a16c <_printf_i>
 801a06c:	e7e4      	b.n	801a038 <_vfiprintf_r+0x208>
 801a06e:	bf00      	nop
 801a070:	0801a7e0 	.word	0x0801a7e0
 801a074:	0801a800 	.word	0x0801a800
 801a078:	0801a7c0 	.word	0x0801a7c0
 801a07c:	0801a820 	.word	0x0801a820
 801a080:	0801a82a 	.word	0x0801a82a
 801a084:	00000000 	.word	0x00000000
 801a088:	08019e0b 	.word	0x08019e0b
 801a08c:	0801a826 	.word	0x0801a826

0801a090 <_printf_common>:
 801a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a094:	4616      	mov	r6, r2
 801a096:	4699      	mov	r9, r3
 801a098:	688a      	ldr	r2, [r1, #8]
 801a09a:	690b      	ldr	r3, [r1, #16]
 801a09c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a0a0:	4293      	cmp	r3, r2
 801a0a2:	bfb8      	it	lt
 801a0a4:	4613      	movlt	r3, r2
 801a0a6:	6033      	str	r3, [r6, #0]
 801a0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a0ac:	4607      	mov	r7, r0
 801a0ae:	460c      	mov	r4, r1
 801a0b0:	b10a      	cbz	r2, 801a0b6 <_printf_common+0x26>
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	6033      	str	r3, [r6, #0]
 801a0b6:	6823      	ldr	r3, [r4, #0]
 801a0b8:	0699      	lsls	r1, r3, #26
 801a0ba:	bf42      	ittt	mi
 801a0bc:	6833      	ldrmi	r3, [r6, #0]
 801a0be:	3302      	addmi	r3, #2
 801a0c0:	6033      	strmi	r3, [r6, #0]
 801a0c2:	6825      	ldr	r5, [r4, #0]
 801a0c4:	f015 0506 	ands.w	r5, r5, #6
 801a0c8:	d106      	bne.n	801a0d8 <_printf_common+0x48>
 801a0ca:	f104 0a19 	add.w	sl, r4, #25
 801a0ce:	68e3      	ldr	r3, [r4, #12]
 801a0d0:	6832      	ldr	r2, [r6, #0]
 801a0d2:	1a9b      	subs	r3, r3, r2
 801a0d4:	42ab      	cmp	r3, r5
 801a0d6:	dc26      	bgt.n	801a126 <_printf_common+0x96>
 801a0d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a0dc:	1e13      	subs	r3, r2, #0
 801a0de:	6822      	ldr	r2, [r4, #0]
 801a0e0:	bf18      	it	ne
 801a0e2:	2301      	movne	r3, #1
 801a0e4:	0692      	lsls	r2, r2, #26
 801a0e6:	d42b      	bmi.n	801a140 <_printf_common+0xb0>
 801a0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a0ec:	4649      	mov	r1, r9
 801a0ee:	4638      	mov	r0, r7
 801a0f0:	47c0      	blx	r8
 801a0f2:	3001      	adds	r0, #1
 801a0f4:	d01e      	beq.n	801a134 <_printf_common+0xa4>
 801a0f6:	6823      	ldr	r3, [r4, #0]
 801a0f8:	68e5      	ldr	r5, [r4, #12]
 801a0fa:	6832      	ldr	r2, [r6, #0]
 801a0fc:	f003 0306 	and.w	r3, r3, #6
 801a100:	2b04      	cmp	r3, #4
 801a102:	bf08      	it	eq
 801a104:	1aad      	subeq	r5, r5, r2
 801a106:	68a3      	ldr	r3, [r4, #8]
 801a108:	6922      	ldr	r2, [r4, #16]
 801a10a:	bf0c      	ite	eq
 801a10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a110:	2500      	movne	r5, #0
 801a112:	4293      	cmp	r3, r2
 801a114:	bfc4      	itt	gt
 801a116:	1a9b      	subgt	r3, r3, r2
 801a118:	18ed      	addgt	r5, r5, r3
 801a11a:	2600      	movs	r6, #0
 801a11c:	341a      	adds	r4, #26
 801a11e:	42b5      	cmp	r5, r6
 801a120:	d11a      	bne.n	801a158 <_printf_common+0xc8>
 801a122:	2000      	movs	r0, #0
 801a124:	e008      	b.n	801a138 <_printf_common+0xa8>
 801a126:	2301      	movs	r3, #1
 801a128:	4652      	mov	r2, sl
 801a12a:	4649      	mov	r1, r9
 801a12c:	4638      	mov	r0, r7
 801a12e:	47c0      	blx	r8
 801a130:	3001      	adds	r0, #1
 801a132:	d103      	bne.n	801a13c <_printf_common+0xac>
 801a134:	f04f 30ff 	mov.w	r0, #4294967295
 801a138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a13c:	3501      	adds	r5, #1
 801a13e:	e7c6      	b.n	801a0ce <_printf_common+0x3e>
 801a140:	18e1      	adds	r1, r4, r3
 801a142:	1c5a      	adds	r2, r3, #1
 801a144:	2030      	movs	r0, #48	; 0x30
 801a146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a14a:	4422      	add	r2, r4
 801a14c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a154:	3302      	adds	r3, #2
 801a156:	e7c7      	b.n	801a0e8 <_printf_common+0x58>
 801a158:	2301      	movs	r3, #1
 801a15a:	4622      	mov	r2, r4
 801a15c:	4649      	mov	r1, r9
 801a15e:	4638      	mov	r0, r7
 801a160:	47c0      	blx	r8
 801a162:	3001      	adds	r0, #1
 801a164:	d0e6      	beq.n	801a134 <_printf_common+0xa4>
 801a166:	3601      	adds	r6, #1
 801a168:	e7d9      	b.n	801a11e <_printf_common+0x8e>
	...

0801a16c <_printf_i>:
 801a16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a170:	7e0f      	ldrb	r7, [r1, #24]
 801a172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a174:	2f78      	cmp	r7, #120	; 0x78
 801a176:	4691      	mov	r9, r2
 801a178:	4680      	mov	r8, r0
 801a17a:	460c      	mov	r4, r1
 801a17c:	469a      	mov	sl, r3
 801a17e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a182:	d807      	bhi.n	801a194 <_printf_i+0x28>
 801a184:	2f62      	cmp	r7, #98	; 0x62
 801a186:	d80a      	bhi.n	801a19e <_printf_i+0x32>
 801a188:	2f00      	cmp	r7, #0
 801a18a:	f000 80d8 	beq.w	801a33e <_printf_i+0x1d2>
 801a18e:	2f58      	cmp	r7, #88	; 0x58
 801a190:	f000 80a3 	beq.w	801a2da <_printf_i+0x16e>
 801a194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a19c:	e03a      	b.n	801a214 <_printf_i+0xa8>
 801a19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a1a2:	2b15      	cmp	r3, #21
 801a1a4:	d8f6      	bhi.n	801a194 <_printf_i+0x28>
 801a1a6:	a101      	add	r1, pc, #4	; (adr r1, 801a1ac <_printf_i+0x40>)
 801a1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a1ac:	0801a205 	.word	0x0801a205
 801a1b0:	0801a219 	.word	0x0801a219
 801a1b4:	0801a195 	.word	0x0801a195
 801a1b8:	0801a195 	.word	0x0801a195
 801a1bc:	0801a195 	.word	0x0801a195
 801a1c0:	0801a195 	.word	0x0801a195
 801a1c4:	0801a219 	.word	0x0801a219
 801a1c8:	0801a195 	.word	0x0801a195
 801a1cc:	0801a195 	.word	0x0801a195
 801a1d0:	0801a195 	.word	0x0801a195
 801a1d4:	0801a195 	.word	0x0801a195
 801a1d8:	0801a325 	.word	0x0801a325
 801a1dc:	0801a249 	.word	0x0801a249
 801a1e0:	0801a307 	.word	0x0801a307
 801a1e4:	0801a195 	.word	0x0801a195
 801a1e8:	0801a195 	.word	0x0801a195
 801a1ec:	0801a347 	.word	0x0801a347
 801a1f0:	0801a195 	.word	0x0801a195
 801a1f4:	0801a249 	.word	0x0801a249
 801a1f8:	0801a195 	.word	0x0801a195
 801a1fc:	0801a195 	.word	0x0801a195
 801a200:	0801a30f 	.word	0x0801a30f
 801a204:	682b      	ldr	r3, [r5, #0]
 801a206:	1d1a      	adds	r2, r3, #4
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	602a      	str	r2, [r5, #0]
 801a20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a214:	2301      	movs	r3, #1
 801a216:	e0a3      	b.n	801a360 <_printf_i+0x1f4>
 801a218:	6820      	ldr	r0, [r4, #0]
 801a21a:	6829      	ldr	r1, [r5, #0]
 801a21c:	0606      	lsls	r6, r0, #24
 801a21e:	f101 0304 	add.w	r3, r1, #4
 801a222:	d50a      	bpl.n	801a23a <_printf_i+0xce>
 801a224:	680e      	ldr	r6, [r1, #0]
 801a226:	602b      	str	r3, [r5, #0]
 801a228:	2e00      	cmp	r6, #0
 801a22a:	da03      	bge.n	801a234 <_printf_i+0xc8>
 801a22c:	232d      	movs	r3, #45	; 0x2d
 801a22e:	4276      	negs	r6, r6
 801a230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a234:	485e      	ldr	r0, [pc, #376]	; (801a3b0 <_printf_i+0x244>)
 801a236:	230a      	movs	r3, #10
 801a238:	e019      	b.n	801a26e <_printf_i+0x102>
 801a23a:	680e      	ldr	r6, [r1, #0]
 801a23c:	602b      	str	r3, [r5, #0]
 801a23e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a242:	bf18      	it	ne
 801a244:	b236      	sxthne	r6, r6
 801a246:	e7ef      	b.n	801a228 <_printf_i+0xbc>
 801a248:	682b      	ldr	r3, [r5, #0]
 801a24a:	6820      	ldr	r0, [r4, #0]
 801a24c:	1d19      	adds	r1, r3, #4
 801a24e:	6029      	str	r1, [r5, #0]
 801a250:	0601      	lsls	r1, r0, #24
 801a252:	d501      	bpl.n	801a258 <_printf_i+0xec>
 801a254:	681e      	ldr	r6, [r3, #0]
 801a256:	e002      	b.n	801a25e <_printf_i+0xf2>
 801a258:	0646      	lsls	r6, r0, #25
 801a25a:	d5fb      	bpl.n	801a254 <_printf_i+0xe8>
 801a25c:	881e      	ldrh	r6, [r3, #0]
 801a25e:	4854      	ldr	r0, [pc, #336]	; (801a3b0 <_printf_i+0x244>)
 801a260:	2f6f      	cmp	r7, #111	; 0x6f
 801a262:	bf0c      	ite	eq
 801a264:	2308      	moveq	r3, #8
 801a266:	230a      	movne	r3, #10
 801a268:	2100      	movs	r1, #0
 801a26a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a26e:	6865      	ldr	r5, [r4, #4]
 801a270:	60a5      	str	r5, [r4, #8]
 801a272:	2d00      	cmp	r5, #0
 801a274:	bfa2      	ittt	ge
 801a276:	6821      	ldrge	r1, [r4, #0]
 801a278:	f021 0104 	bicge.w	r1, r1, #4
 801a27c:	6021      	strge	r1, [r4, #0]
 801a27e:	b90e      	cbnz	r6, 801a284 <_printf_i+0x118>
 801a280:	2d00      	cmp	r5, #0
 801a282:	d04d      	beq.n	801a320 <_printf_i+0x1b4>
 801a284:	4615      	mov	r5, r2
 801a286:	fbb6 f1f3 	udiv	r1, r6, r3
 801a28a:	fb03 6711 	mls	r7, r3, r1, r6
 801a28e:	5dc7      	ldrb	r7, [r0, r7]
 801a290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a294:	4637      	mov	r7, r6
 801a296:	42bb      	cmp	r3, r7
 801a298:	460e      	mov	r6, r1
 801a29a:	d9f4      	bls.n	801a286 <_printf_i+0x11a>
 801a29c:	2b08      	cmp	r3, #8
 801a29e:	d10b      	bne.n	801a2b8 <_printf_i+0x14c>
 801a2a0:	6823      	ldr	r3, [r4, #0]
 801a2a2:	07de      	lsls	r6, r3, #31
 801a2a4:	d508      	bpl.n	801a2b8 <_printf_i+0x14c>
 801a2a6:	6923      	ldr	r3, [r4, #16]
 801a2a8:	6861      	ldr	r1, [r4, #4]
 801a2aa:	4299      	cmp	r1, r3
 801a2ac:	bfde      	ittt	le
 801a2ae:	2330      	movle	r3, #48	; 0x30
 801a2b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a2b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a2b8:	1b52      	subs	r2, r2, r5
 801a2ba:	6122      	str	r2, [r4, #16]
 801a2bc:	f8cd a000 	str.w	sl, [sp]
 801a2c0:	464b      	mov	r3, r9
 801a2c2:	aa03      	add	r2, sp, #12
 801a2c4:	4621      	mov	r1, r4
 801a2c6:	4640      	mov	r0, r8
 801a2c8:	f7ff fee2 	bl	801a090 <_printf_common>
 801a2cc:	3001      	adds	r0, #1
 801a2ce:	d14c      	bne.n	801a36a <_printf_i+0x1fe>
 801a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 801a2d4:	b004      	add	sp, #16
 801a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2da:	4835      	ldr	r0, [pc, #212]	; (801a3b0 <_printf_i+0x244>)
 801a2dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a2e0:	6829      	ldr	r1, [r5, #0]
 801a2e2:	6823      	ldr	r3, [r4, #0]
 801a2e4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a2e8:	6029      	str	r1, [r5, #0]
 801a2ea:	061d      	lsls	r5, r3, #24
 801a2ec:	d514      	bpl.n	801a318 <_printf_i+0x1ac>
 801a2ee:	07df      	lsls	r7, r3, #31
 801a2f0:	bf44      	itt	mi
 801a2f2:	f043 0320 	orrmi.w	r3, r3, #32
 801a2f6:	6023      	strmi	r3, [r4, #0]
 801a2f8:	b91e      	cbnz	r6, 801a302 <_printf_i+0x196>
 801a2fa:	6823      	ldr	r3, [r4, #0]
 801a2fc:	f023 0320 	bic.w	r3, r3, #32
 801a300:	6023      	str	r3, [r4, #0]
 801a302:	2310      	movs	r3, #16
 801a304:	e7b0      	b.n	801a268 <_printf_i+0xfc>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	f043 0320 	orr.w	r3, r3, #32
 801a30c:	6023      	str	r3, [r4, #0]
 801a30e:	2378      	movs	r3, #120	; 0x78
 801a310:	4828      	ldr	r0, [pc, #160]	; (801a3b4 <_printf_i+0x248>)
 801a312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a316:	e7e3      	b.n	801a2e0 <_printf_i+0x174>
 801a318:	0659      	lsls	r1, r3, #25
 801a31a:	bf48      	it	mi
 801a31c:	b2b6      	uxthmi	r6, r6
 801a31e:	e7e6      	b.n	801a2ee <_printf_i+0x182>
 801a320:	4615      	mov	r5, r2
 801a322:	e7bb      	b.n	801a29c <_printf_i+0x130>
 801a324:	682b      	ldr	r3, [r5, #0]
 801a326:	6826      	ldr	r6, [r4, #0]
 801a328:	6961      	ldr	r1, [r4, #20]
 801a32a:	1d18      	adds	r0, r3, #4
 801a32c:	6028      	str	r0, [r5, #0]
 801a32e:	0635      	lsls	r5, r6, #24
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	d501      	bpl.n	801a338 <_printf_i+0x1cc>
 801a334:	6019      	str	r1, [r3, #0]
 801a336:	e002      	b.n	801a33e <_printf_i+0x1d2>
 801a338:	0670      	lsls	r0, r6, #25
 801a33a:	d5fb      	bpl.n	801a334 <_printf_i+0x1c8>
 801a33c:	8019      	strh	r1, [r3, #0]
 801a33e:	2300      	movs	r3, #0
 801a340:	6123      	str	r3, [r4, #16]
 801a342:	4615      	mov	r5, r2
 801a344:	e7ba      	b.n	801a2bc <_printf_i+0x150>
 801a346:	682b      	ldr	r3, [r5, #0]
 801a348:	1d1a      	adds	r2, r3, #4
 801a34a:	602a      	str	r2, [r5, #0]
 801a34c:	681d      	ldr	r5, [r3, #0]
 801a34e:	6862      	ldr	r2, [r4, #4]
 801a350:	2100      	movs	r1, #0
 801a352:	4628      	mov	r0, r5
 801a354:	f7e5 ff14 	bl	8000180 <memchr>
 801a358:	b108      	cbz	r0, 801a35e <_printf_i+0x1f2>
 801a35a:	1b40      	subs	r0, r0, r5
 801a35c:	6060      	str	r0, [r4, #4]
 801a35e:	6863      	ldr	r3, [r4, #4]
 801a360:	6123      	str	r3, [r4, #16]
 801a362:	2300      	movs	r3, #0
 801a364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a368:	e7a8      	b.n	801a2bc <_printf_i+0x150>
 801a36a:	6923      	ldr	r3, [r4, #16]
 801a36c:	462a      	mov	r2, r5
 801a36e:	4649      	mov	r1, r9
 801a370:	4640      	mov	r0, r8
 801a372:	47d0      	blx	sl
 801a374:	3001      	adds	r0, #1
 801a376:	d0ab      	beq.n	801a2d0 <_printf_i+0x164>
 801a378:	6823      	ldr	r3, [r4, #0]
 801a37a:	079b      	lsls	r3, r3, #30
 801a37c:	d413      	bmi.n	801a3a6 <_printf_i+0x23a>
 801a37e:	68e0      	ldr	r0, [r4, #12]
 801a380:	9b03      	ldr	r3, [sp, #12]
 801a382:	4298      	cmp	r0, r3
 801a384:	bfb8      	it	lt
 801a386:	4618      	movlt	r0, r3
 801a388:	e7a4      	b.n	801a2d4 <_printf_i+0x168>
 801a38a:	2301      	movs	r3, #1
 801a38c:	4632      	mov	r2, r6
 801a38e:	4649      	mov	r1, r9
 801a390:	4640      	mov	r0, r8
 801a392:	47d0      	blx	sl
 801a394:	3001      	adds	r0, #1
 801a396:	d09b      	beq.n	801a2d0 <_printf_i+0x164>
 801a398:	3501      	adds	r5, #1
 801a39a:	68e3      	ldr	r3, [r4, #12]
 801a39c:	9903      	ldr	r1, [sp, #12]
 801a39e:	1a5b      	subs	r3, r3, r1
 801a3a0:	42ab      	cmp	r3, r5
 801a3a2:	dcf2      	bgt.n	801a38a <_printf_i+0x21e>
 801a3a4:	e7eb      	b.n	801a37e <_printf_i+0x212>
 801a3a6:	2500      	movs	r5, #0
 801a3a8:	f104 0619 	add.w	r6, r4, #25
 801a3ac:	e7f5      	b.n	801a39a <_printf_i+0x22e>
 801a3ae:	bf00      	nop
 801a3b0:	0801a831 	.word	0x0801a831
 801a3b4:	0801a842 	.word	0x0801a842

0801a3b8 <_putc_r>:
 801a3b8:	b570      	push	{r4, r5, r6, lr}
 801a3ba:	460d      	mov	r5, r1
 801a3bc:	4614      	mov	r4, r2
 801a3be:	4606      	mov	r6, r0
 801a3c0:	b118      	cbz	r0, 801a3ca <_putc_r+0x12>
 801a3c2:	6983      	ldr	r3, [r0, #24]
 801a3c4:	b90b      	cbnz	r3, 801a3ca <_putc_r+0x12>
 801a3c6:	f7ff fb23 	bl	8019a10 <__sinit>
 801a3ca:	4b1c      	ldr	r3, [pc, #112]	; (801a43c <_putc_r+0x84>)
 801a3cc:	429c      	cmp	r4, r3
 801a3ce:	d124      	bne.n	801a41a <_putc_r+0x62>
 801a3d0:	6874      	ldr	r4, [r6, #4]
 801a3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3d4:	07d8      	lsls	r0, r3, #31
 801a3d6:	d405      	bmi.n	801a3e4 <_putc_r+0x2c>
 801a3d8:	89a3      	ldrh	r3, [r4, #12]
 801a3da:	0599      	lsls	r1, r3, #22
 801a3dc:	d402      	bmi.n	801a3e4 <_putc_r+0x2c>
 801a3de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3e0:	f7ff fbb4 	bl	8019b4c <__retarget_lock_acquire_recursive>
 801a3e4:	68a3      	ldr	r3, [r4, #8]
 801a3e6:	3b01      	subs	r3, #1
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	60a3      	str	r3, [r4, #8]
 801a3ec:	da05      	bge.n	801a3fa <_putc_r+0x42>
 801a3ee:	69a2      	ldr	r2, [r4, #24]
 801a3f0:	4293      	cmp	r3, r2
 801a3f2:	db1c      	blt.n	801a42e <_putc_r+0x76>
 801a3f4:	b2eb      	uxtb	r3, r5
 801a3f6:	2b0a      	cmp	r3, #10
 801a3f8:	d019      	beq.n	801a42e <_putc_r+0x76>
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	1c5a      	adds	r2, r3, #1
 801a3fe:	6022      	str	r2, [r4, #0]
 801a400:	701d      	strb	r5, [r3, #0]
 801a402:	b2ed      	uxtb	r5, r5
 801a404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a406:	07da      	lsls	r2, r3, #31
 801a408:	d405      	bmi.n	801a416 <_putc_r+0x5e>
 801a40a:	89a3      	ldrh	r3, [r4, #12]
 801a40c:	059b      	lsls	r3, r3, #22
 801a40e:	d402      	bmi.n	801a416 <_putc_r+0x5e>
 801a410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a412:	f7ff fb9c 	bl	8019b4e <__retarget_lock_release_recursive>
 801a416:	4628      	mov	r0, r5
 801a418:	bd70      	pop	{r4, r5, r6, pc}
 801a41a:	4b09      	ldr	r3, [pc, #36]	; (801a440 <_putc_r+0x88>)
 801a41c:	429c      	cmp	r4, r3
 801a41e:	d101      	bne.n	801a424 <_putc_r+0x6c>
 801a420:	68b4      	ldr	r4, [r6, #8]
 801a422:	e7d6      	b.n	801a3d2 <_putc_r+0x1a>
 801a424:	4b07      	ldr	r3, [pc, #28]	; (801a444 <_putc_r+0x8c>)
 801a426:	429c      	cmp	r4, r3
 801a428:	bf08      	it	eq
 801a42a:	68f4      	ldreq	r4, [r6, #12]
 801a42c:	e7d1      	b.n	801a3d2 <_putc_r+0x1a>
 801a42e:	4629      	mov	r1, r5
 801a430:	4622      	mov	r2, r4
 801a432:	4630      	mov	r0, r6
 801a434:	f7ff f912 	bl	801965c <__swbuf_r>
 801a438:	4605      	mov	r5, r0
 801a43a:	e7e3      	b.n	801a404 <_putc_r+0x4c>
 801a43c:	0801a7e0 	.word	0x0801a7e0
 801a440:	0801a800 	.word	0x0801a800
 801a444:	0801a7c0 	.word	0x0801a7c0

0801a448 <_sbrk_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	4d06      	ldr	r5, [pc, #24]	; (801a464 <_sbrk_r+0x1c>)
 801a44c:	2300      	movs	r3, #0
 801a44e:	4604      	mov	r4, r0
 801a450:	4608      	mov	r0, r1
 801a452:	602b      	str	r3, [r5, #0]
 801a454:	f7e6 feea 	bl	800122c <_sbrk>
 801a458:	1c43      	adds	r3, r0, #1
 801a45a:	d102      	bne.n	801a462 <_sbrk_r+0x1a>
 801a45c:	682b      	ldr	r3, [r5, #0]
 801a45e:	b103      	cbz	r3, 801a462 <_sbrk_r+0x1a>
 801a460:	6023      	str	r3, [r4, #0]
 801a462:	bd38      	pop	{r3, r4, r5, pc}
 801a464:	20008628 	.word	0x20008628

0801a468 <__sread>:
 801a468:	b510      	push	{r4, lr}
 801a46a:	460c      	mov	r4, r1
 801a46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a470:	f000 f8a0 	bl	801a5b4 <_read_r>
 801a474:	2800      	cmp	r0, #0
 801a476:	bfab      	itete	ge
 801a478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a47a:	89a3      	ldrhlt	r3, [r4, #12]
 801a47c:	181b      	addge	r3, r3, r0
 801a47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a482:	bfac      	ite	ge
 801a484:	6563      	strge	r3, [r4, #84]	; 0x54
 801a486:	81a3      	strhlt	r3, [r4, #12]
 801a488:	bd10      	pop	{r4, pc}

0801a48a <__swrite>:
 801a48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a48e:	461f      	mov	r7, r3
 801a490:	898b      	ldrh	r3, [r1, #12]
 801a492:	05db      	lsls	r3, r3, #23
 801a494:	4605      	mov	r5, r0
 801a496:	460c      	mov	r4, r1
 801a498:	4616      	mov	r6, r2
 801a49a:	d505      	bpl.n	801a4a8 <__swrite+0x1e>
 801a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4a0:	2302      	movs	r3, #2
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	f000 f868 	bl	801a578 <_lseek_r>
 801a4a8:	89a3      	ldrh	r3, [r4, #12]
 801a4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4b2:	81a3      	strh	r3, [r4, #12]
 801a4b4:	4632      	mov	r2, r6
 801a4b6:	463b      	mov	r3, r7
 801a4b8:	4628      	mov	r0, r5
 801a4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4be:	f000 b817 	b.w	801a4f0 <_write_r>

0801a4c2 <__sseek>:
 801a4c2:	b510      	push	{r4, lr}
 801a4c4:	460c      	mov	r4, r1
 801a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ca:	f000 f855 	bl	801a578 <_lseek_r>
 801a4ce:	1c43      	adds	r3, r0, #1
 801a4d0:	89a3      	ldrh	r3, [r4, #12]
 801a4d2:	bf15      	itete	ne
 801a4d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a4de:	81a3      	strheq	r3, [r4, #12]
 801a4e0:	bf18      	it	ne
 801a4e2:	81a3      	strhne	r3, [r4, #12]
 801a4e4:	bd10      	pop	{r4, pc}

0801a4e6 <__sclose>:
 801a4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ea:	f000 b813 	b.w	801a514 <_close_r>
	...

0801a4f0 <_write_r>:
 801a4f0:	b538      	push	{r3, r4, r5, lr}
 801a4f2:	4d07      	ldr	r5, [pc, #28]	; (801a510 <_write_r+0x20>)
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	4608      	mov	r0, r1
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	602a      	str	r2, [r5, #0]
 801a4fe:	461a      	mov	r2, r3
 801a500:	f7e6 f976 	bl	80007f0 <_write>
 801a504:	1c43      	adds	r3, r0, #1
 801a506:	d102      	bne.n	801a50e <_write_r+0x1e>
 801a508:	682b      	ldr	r3, [r5, #0]
 801a50a:	b103      	cbz	r3, 801a50e <_write_r+0x1e>
 801a50c:	6023      	str	r3, [r4, #0]
 801a50e:	bd38      	pop	{r3, r4, r5, pc}
 801a510:	20008628 	.word	0x20008628

0801a514 <_close_r>:
 801a514:	b538      	push	{r3, r4, r5, lr}
 801a516:	4d06      	ldr	r5, [pc, #24]	; (801a530 <_close_r+0x1c>)
 801a518:	2300      	movs	r3, #0
 801a51a:	4604      	mov	r4, r0
 801a51c:	4608      	mov	r0, r1
 801a51e:	602b      	str	r3, [r5, #0]
 801a520:	f7e6 fe4f 	bl	80011c2 <_close>
 801a524:	1c43      	adds	r3, r0, #1
 801a526:	d102      	bne.n	801a52e <_close_r+0x1a>
 801a528:	682b      	ldr	r3, [r5, #0]
 801a52a:	b103      	cbz	r3, 801a52e <_close_r+0x1a>
 801a52c:	6023      	str	r3, [r4, #0]
 801a52e:	bd38      	pop	{r3, r4, r5, pc}
 801a530:	20008628 	.word	0x20008628

0801a534 <_fstat_r>:
 801a534:	b538      	push	{r3, r4, r5, lr}
 801a536:	4d07      	ldr	r5, [pc, #28]	; (801a554 <_fstat_r+0x20>)
 801a538:	2300      	movs	r3, #0
 801a53a:	4604      	mov	r4, r0
 801a53c:	4608      	mov	r0, r1
 801a53e:	4611      	mov	r1, r2
 801a540:	602b      	str	r3, [r5, #0]
 801a542:	f7e6 fe4a 	bl	80011da <_fstat>
 801a546:	1c43      	adds	r3, r0, #1
 801a548:	d102      	bne.n	801a550 <_fstat_r+0x1c>
 801a54a:	682b      	ldr	r3, [r5, #0]
 801a54c:	b103      	cbz	r3, 801a550 <_fstat_r+0x1c>
 801a54e:	6023      	str	r3, [r4, #0]
 801a550:	bd38      	pop	{r3, r4, r5, pc}
 801a552:	bf00      	nop
 801a554:	20008628 	.word	0x20008628

0801a558 <_isatty_r>:
 801a558:	b538      	push	{r3, r4, r5, lr}
 801a55a:	4d06      	ldr	r5, [pc, #24]	; (801a574 <_isatty_r+0x1c>)
 801a55c:	2300      	movs	r3, #0
 801a55e:	4604      	mov	r4, r0
 801a560:	4608      	mov	r0, r1
 801a562:	602b      	str	r3, [r5, #0]
 801a564:	f7e6 fe49 	bl	80011fa <_isatty>
 801a568:	1c43      	adds	r3, r0, #1
 801a56a:	d102      	bne.n	801a572 <_isatty_r+0x1a>
 801a56c:	682b      	ldr	r3, [r5, #0]
 801a56e:	b103      	cbz	r3, 801a572 <_isatty_r+0x1a>
 801a570:	6023      	str	r3, [r4, #0]
 801a572:	bd38      	pop	{r3, r4, r5, pc}
 801a574:	20008628 	.word	0x20008628

0801a578 <_lseek_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4d07      	ldr	r5, [pc, #28]	; (801a598 <_lseek_r+0x20>)
 801a57c:	4604      	mov	r4, r0
 801a57e:	4608      	mov	r0, r1
 801a580:	4611      	mov	r1, r2
 801a582:	2200      	movs	r2, #0
 801a584:	602a      	str	r2, [r5, #0]
 801a586:	461a      	mov	r2, r3
 801a588:	f7e6 fe42 	bl	8001210 <_lseek>
 801a58c:	1c43      	adds	r3, r0, #1
 801a58e:	d102      	bne.n	801a596 <_lseek_r+0x1e>
 801a590:	682b      	ldr	r3, [r5, #0]
 801a592:	b103      	cbz	r3, 801a596 <_lseek_r+0x1e>
 801a594:	6023      	str	r3, [r4, #0]
 801a596:	bd38      	pop	{r3, r4, r5, pc}
 801a598:	20008628 	.word	0x20008628

0801a59c <__malloc_lock>:
 801a59c:	4801      	ldr	r0, [pc, #4]	; (801a5a4 <__malloc_lock+0x8>)
 801a59e:	f7ff bad5 	b.w	8019b4c <__retarget_lock_acquire_recursive>
 801a5a2:	bf00      	nop
 801a5a4:	2000861c 	.word	0x2000861c

0801a5a8 <__malloc_unlock>:
 801a5a8:	4801      	ldr	r0, [pc, #4]	; (801a5b0 <__malloc_unlock+0x8>)
 801a5aa:	f7ff bad0 	b.w	8019b4e <__retarget_lock_release_recursive>
 801a5ae:	bf00      	nop
 801a5b0:	2000861c 	.word	0x2000861c

0801a5b4 <_read_r>:
 801a5b4:	b538      	push	{r3, r4, r5, lr}
 801a5b6:	4d07      	ldr	r5, [pc, #28]	; (801a5d4 <_read_r+0x20>)
 801a5b8:	4604      	mov	r4, r0
 801a5ba:	4608      	mov	r0, r1
 801a5bc:	4611      	mov	r1, r2
 801a5be:	2200      	movs	r2, #0
 801a5c0:	602a      	str	r2, [r5, #0]
 801a5c2:	461a      	mov	r2, r3
 801a5c4:	f7e6 fde0 	bl	8001188 <_read>
 801a5c8:	1c43      	adds	r3, r0, #1
 801a5ca:	d102      	bne.n	801a5d2 <_read_r+0x1e>
 801a5cc:	682b      	ldr	r3, [r5, #0]
 801a5ce:	b103      	cbz	r3, 801a5d2 <_read_r+0x1e>
 801a5d0:	6023      	str	r3, [r4, #0]
 801a5d2:	bd38      	pop	{r3, r4, r5, pc}
 801a5d4:	20008628 	.word	0x20008628

0801a5d8 <_init>:
 801a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5da:	bf00      	nop
 801a5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5de:	bc08      	pop	{r3}
 801a5e0:	469e      	mov	lr, r3
 801a5e2:	4770      	bx	lr

0801a5e4 <_fini>:
 801a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e6:	bf00      	nop
 801a5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ea:	bc08      	pop	{r3}
 801a5ec:	469e      	mov	lr, r3
 801a5ee:	4770      	bx	lr
