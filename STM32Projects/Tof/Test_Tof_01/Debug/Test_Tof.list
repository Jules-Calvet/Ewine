
Test_Tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4bc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0801a5fc  0801a5fc  0002a5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a86c  0801a86c  0002a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a874  0801a874  0002a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a878  0801a878  0002a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000004  0801a87c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008554  200000d8  0801a950  000300d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000862c  0801a950  0003862c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000647f7  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000069aa  00000000  00000000  000948ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003290  00000000  00000000  0009b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002fc8  00000000  00000000  0009e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000469e9  00000000  00000000  000a1508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039cef  00000000  00000000  000e7ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011b08e  00000000  00000000  00121be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023cc6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e398  00000000  00000000  0023ccc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a5e4 	.word	0x0801a5e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801a5e4 	.word	0x0801a5e4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Init(void);
static void VL_53L1A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init();
 80005c8:	f000 f808 	bl	80005dc <VL_53L1A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  VL_53L1A2_SimpleRanging_Process();
 80005d4:	f000 f818 	bl	8000608 <VL_53L1A2_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <VL_53L1A2_SimpleRanging_Init>:

static void VL_53L1A2_SimpleRanging_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 f8cf 	bl	8001784 <VL53L1A2_RANGING_SENSOR_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <VL_53L1A2_SimpleRanging_Init+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <VL_53L1A2_SimpleRanging_Init+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <VL_53L1A2_SimpleRanging_Init+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <VL_53L1A2_SimpleRanging_Init+0x28>)
 80005f6:	f019 f81b 	bl	8019630 <puts>
    while(1);
 80005fa:	e7fe      	b.n	80005fa <VL_53L1A2_SimpleRanging_Init+0x1e>
  }

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000108 	.word	0x20000108
 8000604:	0801a5fc 	.word	0x0801a5fc

08000608 <VL_53L1A2_SimpleRanging_Process>:

static void VL_53L1A2_SimpleRanging_Process(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 800060e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000612:	4619      	mov	r1, r3
 8000614:	2001      	movs	r0, #1
 8000616:	f001 f8db 	bl	80017d0 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 8000622:	221e      	movs	r2, #30
 8000624:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8000638:	4915      	ldr	r1, [pc, #84]	; (8000690 <VL_53L1A2_SimpleRanging_Process+0x88>)
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f8f0 	bl	8001820 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000640:	2101      	movs	r1, #1
 8000642:	2001      	movs	r0, #1
 8000644:	f001 f93c 	bl	80018c0 <VL53L1A2_RANGING_SENSOR_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <VL_53L1A2_SimpleRanging_Process+0x8c>)
 800064c:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <VL_53L1A2_SimpleRanging_Process+0x8c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <VL_53L1A2_SimpleRanging_Process+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 8000656:	4810      	ldr	r0, [pc, #64]	; (8000698 <VL_53L1A2_SimpleRanging_Process+0x90>)
 8000658:	f018 ffea 	bl	8019630 <puts>
    while(1);
 800065c:	e7fe      	b.n	800065c <VL_53L1A2_SimpleRanging_Process+0x54>
  }

  while (1)
  {
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	2001      	movs	r0, #1
 8000664:	f001 f904 	bl	8001870 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8000668:	4603      	mov	r3, r0
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <VL_53L1A2_SimpleRanging_Process+0x8c>)
 800066c:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <VL_53L1A2_SimpleRanging_Process+0x8c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d106      	bne.n	8000684 <VL_53L1A2_SimpleRanging_Process+0x7c>
    {
      printf("\n CENTER ");
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <VL_53L1A2_SimpleRanging_Process+0x94>)
 8000678:	f018 ff3e 	bl	80194f8 <iprintf>
      print_result(&Result_Center);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f80e 	bl	80006a0 <print_result>
    }
    HAL_Delay(REPETITION);
 8000684:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000688:	f014 fe64 	bl	8015354 <HAL_Delay>
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 800068c:	e7e7      	b.n	800065e <VL_53L1A2_SimpleRanging_Process+0x56>
 800068e:	bf00      	nop
 8000690:	200000f4 	.word	0x200000f4
 8000694:	20000108 	.word	0x20000108
 8000698:	0801a620 	.word	0x0801a620
 800069c:	0801a64c 	.word	0x0801a64c

080006a0 <print_result>:

  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e03f      	b.n	800072e <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4613      	mov	r3, r2
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	3304      	adds	r3, #4
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <print_result+0xa4>)
 80006c4:	f018 ff18 	bl	80194f8 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	73bb      	strb	r3, [r7, #14]
 80006cc:	e020      	b.n	8000710 <print_result+0x70>
    {
      printf("\n |---> ");
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <print_result+0xa8>)
 80006d0:	f018 ff12 	bl	80194f8 <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 80006d4:	7bfa      	ldrb	r2, [r7, #15]
 80006d6:	7bb8      	ldrb	r0, [r7, #14]
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	4403      	add	r3, r0
 80006e2:	3304      	adds	r3, #4
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	440b      	add	r3, r1
 80006e8:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80006ea:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	7bb8      	ldrb	r0, [r7, #14]
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	4413      	add	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8000700:	461a      	mov	r2, r3
 8000702:	4621      	mov	r1, r4
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <print_result+0xac>)
 8000706:	f018 fef7 	bl	80194f8 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	3301      	adds	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
 8000710:	7bb9      	ldrb	r1, [r7, #14]
 8000712:	7bfa      	ldrb	r2, [r7, #15]
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4403      	add	r3, r0
 8000720:	3304      	adds	r3, #4
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4299      	cmp	r1, r3
 8000726:	d3d2      	bcc.n	80006ce <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0bc      	beq.n	80006ae <print_result+0xe>
    }
  }
  printf ("\n");
 8000734:	200a      	movs	r0, #10
 8000736:	f018 fef7 	bl	8019528 <putchar>
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	0801a658 	.word	0x0801a658
 8000748:	0801a668 	.word	0x0801a668
 800074c:	0801a674 	.word	0x0801a674

08000750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000778:	e000      	b.n	800077c <ITM_SendChar+0x2c>
    {
      __NOP();
 800077a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800077c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ae:	f023 0218 	bic.w	r2, r3, #24
 80007b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e009      	b.n	8000822 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff9a 	bl	8000750 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbf1      	blt.n	800080e <_write+0x12>
}
return len;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f014 fd40 	bl	80152bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f80e 	bl	800085c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000840:	f000 f882 	bl	8000948 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f914 	bl	8000a70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000848:	f000 f89c 	bl	8000984 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800084c:	f000 f8e8 	bl	8000a20 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  //start the initialization of tof application
  VL_TOF_Init();
 8000850:	f7ff feb8 	bl	80005c4 <VL_TOF_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//start the process of tof application
	VL_TOF_Process();
 8000854:	f7ff febc 	bl	80005d0 <VL_TOF_Process>
 8000858:	e7fc      	b.n	8000854 <main+0x20>
	...

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09a      	sub	sp, #104	; 0x68
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2248      	movs	r2, #72	; 0x48
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f018 fe3c 	bl	80194e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800088c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000890:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	f023 0303 	bic.w	r3, r3, #3
 800089c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a6:	f015 ffbf 	bl	8016828 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff77 	bl	800079e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemClock_Config+0xe8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <SystemClock_Config+0xe8>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <SystemClock_Config+0xe8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008cc:	2327      	movs	r3, #39	; 0x27
 80008ce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f016 fb35 	bl	8016f68 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000904:	f000 f90e 	bl	8000b24 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000908:	236f      	movs	r3, #111	; 0x6f
 800090a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f016 fe91 	bl	8017650 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000934:	f000 f8f6 	bl	8000b24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000938:	f017 fc7e 	bl	8018238 <HAL_RCCEx_EnableMSIPLLMode>
}
 800093c:	bf00      	nop
 800093e:	3768      	adds	r7, #104	; 0x68
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58000400 	.word	0x58000400

08000948 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2250      	movs	r2, #80	; 0x50
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f018 fdc7 	bl	80194e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800095a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000964:	2300      	movs	r3, #0
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4618      	mov	r0, r3
 800096c:	f017 faee 	bl	8017f4c <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000976:	f000 f8d5 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <MX_USART1_UART_Init+0x98>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009d0:	f017 ffe2 	bl	8018998 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80009da:	f000 f8a3 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009e2:	f018 fc42 	bl	801926a <HAL_UARTEx_SetTxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80009ec:	f000 f89a 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009f4:	f018 fc77 	bl	80192e6 <HAL_UARTEx_SetRxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80009fe:	f000 f891 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000a04:	f018 fbf8 	bl	80191f8 <HAL_UARTEx_DisableFifoMode>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a0e:	f000 f889 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000010c 	.word	0x2000010c
 8000a1c:	40013800 	.word	0x40013800

08000a20 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <MX_USB_PCD_Init+0x4c>)
 8000a28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USB_PCD_Init+0x48>)
 8000a56:	f015 fde4 	bl	8016622 <HAL_PCD_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a60:	f000 f860 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001a0 	.word	0x200001a0
 8000a6c:	40006800 	.word	0x40006800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2004      	movs	r0, #4
 8000a86:	f7ff fea0 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff fe9d 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fe9a 	bl	80007ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe97 	bl	80007ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2123      	movs	r1, #35	; 0x23
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x84>)
 8000aa2:	f014 ffc1 	bl	8015a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x88>)
 8000ab8:	f014 fd50 	bl	801555c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000abc:	2323      	movs	r3, #35	; 0x23
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x84>)
 8000ad2:	f014 fd43 	bl	801555c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ae8:	f014 fd38 	bl	801555c <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000c00 	.word	0x48000c00

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f014 fbf3 	bl	80152fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40014800 	.word	0x40014800

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>

08000b2e <LL_AHB2_GRP1_EnableClock>:
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09c      	sub	sp, #112	; 0x70
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2250      	movs	r2, #80	; 0x50
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f018 fc77 	bl	80194e8 <memset>
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d124      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4618      	mov	r0, r3
 8000c12:	f017 f99b 	bl	8017f4c <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c1c:	f7ff ff82 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c24:	f7ff ffb5 	bl	8000b92 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ff80 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c4a:	f014 fc87 	bl	801555c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3770      	adds	r7, #112	; 0x70
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09c      	sub	sp, #112	; 0x70
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2250      	movs	r2, #80	; 0x50
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f018 fc31 	bl	80194e8 <memset>
  if(hpcd->Instance==USB)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_PCD_MspInit+0xa8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d136      	bne.n	8000cfe <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c96:	2318      	movs	r3, #24
 8000c98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ca6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000caa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f017 f945 	bl	8017f4c <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000cc8:	f7ff ff2c 	bl	8000b24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff ff2e 	bl	8000b2e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f014 fc33 	bl	801555c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cf6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cfa:	f7ff ff31 	bl	8000b60 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3770      	adds	r7, #112	; 0x70
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40006800 	.word	0x40006800

08000d0c <LL_APB2_GRP1_EnableClock>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	201a      	movs	r0, #26
 8000d56:	f014 fbd9 	bl	801550c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d5a:	201a      	movs	r0, #26
 8000d5c:	f014 fbf0 	bl	8015540 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000d60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d64:	f7ff ffd2 	bl	8000d0c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d68:	f107 0208 	add.w	r2, r7, #8
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f016 fe58 	bl	8017a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d78:	f016 fe40 	bl	80179fc <HAL_RCC_GetPCLK2Freq>
 8000d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_InitTick+0x8c>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	0c9b      	lsrs	r3, r3, #18
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_InitTick+0x90>)
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_InitTick+0x94>)
 8000d90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_InitTick+0x90>)
 8000d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d98:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_InitTick+0x90>)
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_InitTick+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_InitTick+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_InitTick+0x90>)
 8000dae:	f017 fb5a 	bl	8018466 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d104      	bne.n	8000dc2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_InitTick+0x90>)
 8000dba:	f017 fbb5 	bl	8018528 <HAL_TIM_Base_Start_IT>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	20000494 	.word	0x20000494
 8000dd4:	40014800 	.word	0x40014800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e36:	f017 fbc5 	bl	80185c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000494 	.word	0x20000494

08000e44 <LL_AHB2_GRP1_EnableClock>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_APB1_GRP1_EnableClock>:
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_APB1_GRP1_DisableClock>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <BSP_I2C1_Init+0x70>)
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <BSP_I2C1_Init+0x74>)
 8000ede:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <BSP_I2C1_Init+0x78>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	4918      	ldr	r1, [pc, #96]	; (8000f48 <BSP_I2C1_Init+0x78>)
 8000ee8:	600a      	str	r2, [r1, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d122      	bne.n	8000f34 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <BSP_I2C1_Init+0x70>)
 8000ef0:	f015 f86e 	bl	8015fd0 <HAL_I2C_GetState>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d11c      	bne.n	8000f34 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <BSP_I2C1_Init+0x70>)
 8000efc:	f000 f8ee 	bl	80010dc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d116      	bne.n	8000f34 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <BSP_I2C1_Init+0x70>)
 8000f08:	f000 f8a4 	bl	8001054 <MX_I2C1_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f12:	f06f 0307 	mvn.w	r3, #7
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	e00c      	b.n	8000f34 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <BSP_I2C1_Init+0x70>)
 8000f1e:	f015 fae9 	bl	80164f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f28:	f06f 0307 	mvn.w	r3, #7
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e001      	b.n	8000f34 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200004e0 	.word	0x200004e0
 8000f44:	40005400 	.word	0x40005400
 8000f48:	20000534 	.word	0x20000534

08000f4c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <BSP_I2C1_DeInit+0x48>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d014      	beq.n	8000f88 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <BSP_I2C1_DeInit+0x48>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <BSP_I2C1_DeInit+0x48>)
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <BSP_I2C1_DeInit+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10b      	bne.n	8000f88 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <BSP_I2C1_DeInit+0x4c>)
 8000f72:	f000 f8f7 	bl	8001164 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <BSP_I2C1_DeInit+0x4c>)
 8000f78:	f014 fdfd 	bl	8015b76 <HAL_I2C_DeInit>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f82:	f06f 0307 	mvn.w	r3, #7
 8000f86:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000534 	.word	0x20000534
 8000f98:	200004e0 	.word	0x200004e0

08000f9c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	88f9      	ldrh	r1, [r7, #6]
 8000fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <BSP_I2C1_Send+0x50>)
 8000fbe:	f014 fe1d 	bl	8015bfc <HAL_I2C_Master_Transmit>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00c      	beq.n	8000fe2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fc8:	4808      	ldr	r0, [pc, #32]	; (8000fec <BSP_I2C1_Send+0x50>)
 8000fca:	f015 f80f 	bl	8015fec <HAL_I2C_GetError>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d003      	beq.n	8000fdc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fd4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e002      	b.n	8000fe2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000fdc:	f06f 0303 	mvn.w	r3, #3
 8000fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200004e0 	.word	0x200004e0

08000ff0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	88f9      	ldrh	r1, [r7, #6]
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	9200      	str	r2, [sp, #0]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <BSP_I2C1_Recv+0x50>)
 8001012:	f014 fee7 	bl	8015de4 <HAL_I2C_Master_Receive>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <BSP_I2C1_Recv+0x50>)
 800101e:	f014 ffe5 	bl	8015fec <HAL_I2C_GetError>
 8001022:	4603      	mov	r3, r0
 8001024:	2b04      	cmp	r3, #4
 8001026:	d003      	beq.n	8001030 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001028:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e002      	b.n	8001036 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001030:	f06f 0303 	mvn.w	r3, #3
 8001034:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200004e0 	.word	0x200004e0

08001044 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001048:	f014 f96c 	bl	8015324 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <MX_I2C1_Init+0x80>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <MX_I2C1_Init+0x84>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f014 fcde 	bl	8015a58 <HAL_I2C_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f015 fa23 	bl	80164f4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f015 fa65 	bl	801658a <HAL_I2CEx_ConfigDigitalFilter>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	00707cbb 	.word	0x00707cbb

080010dc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09c      	sub	sp, #112	; 0x70
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2250      	movs	r2, #80	; 0x50
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f018 f9fb 	bl	80194e8 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4618      	mov	r0, r3
 8001102:	f016 ff23 	bl	8017f4c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff fe9c 	bl	8000e44 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001112:	2312      	movs	r3, #18
 8001114:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800111e:	2304      	movs	r3, #4
 8001120:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001126:	4619      	mov	r1, r3
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <I2C1_MspInit+0x84>)
 800112a:	f014 fa17 	bl	801555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001140:	2304      	movs	r3, #4
 8001142:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001144:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <I2C1_MspInit+0x84>)
 800114c:	f014 fa06 	bl	801555c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001150:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001154:	f7ff fe8f 	bl	8000e76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	; 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48000400 	.word	0x48000400

08001164 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800116c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001170:	f7ff fe9a 	bl	8000ea8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <I2C1_MspDeInit+0x2c>)
 800117a:	f014 fb5f 	bl	801583c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <I2C1_MspDeInit+0x2c>)
 8001184:	f014 fb5a 	bl	801583c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000400 	.word	0x48000400

08001194 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
	}

return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f018 f906 	bl	8019478 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20030000 	.word	0x20030000
 8001298:	00000400 	.word	0x00000400
 800129c:	20000538 	.word	0x20000538
 80012a0:	20008630 	.word	0x20008630

080012a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <SystemInit+0x98>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <SystemInit+0x98>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <SystemInit+0x9c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ee:	f023 0305 	bic.w	r3, r3, #5
 80012f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <SystemInit+0xa0>)
 8001310:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <SystemInit+0xa0>)
 8001318:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	faf6fefb 	.word	0xfaf6fefb
 8001344:	22041000 	.word	0x22041000

08001348 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001348:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134c:	3304      	adds	r3, #4

0800134e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001350:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001352:	d3f9      	bcc.n	8001348 <CopyDataInit>
  bx lr
 8001354:	4770      	bx	lr

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001356:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001358:	3004      	adds	r0, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800135a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
  bx lr
 800135e:	4770      	bx	lr

08001360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f7ff ff9e 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopForever+0x8>)
 800136a:	490c      	ldr	r1, [pc, #48]	; (800139c <LoopForever+0xc>)
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LoopForever+0x10>)
 800136e:	2300      	movs	r3, #0
 8001370:	f7ff ffed 	bl	800134e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopForever+0x14>)
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <LoopForever+0x18>)
 8001378:	2300      	movs	r3, #0
 800137a:	f7ff ffee 	bl	800135a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopForever+0x1c>)
 8001380:	490b      	ldr	r1, [pc, #44]	; (80013b0 <LoopForever+0x20>)
 8001382:	2300      	movs	r3, #0
 8001384:	f7ff ffe9 	bl	800135a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001388:	f018 f87c 	bl	8019484 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800138c:	f7ff fa52 	bl	8000834 <main>

08001390 <LoopForever>:

LoopForever:
  b LoopForever
 8001390:	e7fe      	b.n	8001390 <LoopForever>
 8001392:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001394:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001398:	20000004 	.word	0x20000004
 800139c:	200000d8 	.word	0x200000d8
 80013a0:	0801a87c 	.word	0x0801a87c
  INIT_BSS _sbss, _ebss
 80013a4:	200000d8 	.word	0x200000d8
 80013a8:	2000862c 	.word	0x2000862c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80013ac:	20030000 	.word	0x20030000
 80013b0:	20030000 	.word	0x20030000

080013b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_IRQHandler>

080013b6 <LL_AHB2_GRP1_EnableClock>:
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <VL53L1A2_Init+0xe4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	4934      	ldr	r1, [pc, #208]	; (80014cc <VL53L1A2_Init+0xe4>)
 80013fa:	600a      	str	r2, [r1, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d154      	bne.n	80014aa <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001400:	f000 f8d4 	bl	80015ac <_I2cFailRecover>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800140c:	f7ff fd60 	bl	8000ed0 <BSP_I2C1_Init>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d147      	bne.n	80014ae <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800141e:	463a      	mov	r2, r7
 8001420:	2302      	movs	r3, #2
 8001422:	2100      	movs	r1, #0
 8001424:	2086      	movs	r0, #134	; 0x86
 8001426:	f000 f953 	bl	80016d0 <_ExpanderRd>
 800142a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d13f      	bne.n	80014b2 <VL53L1A2_Init+0xca>
 8001432:	783b      	ldrb	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d13c      	bne.n	80014b2 <VL53L1A2_Init+0xca>
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b16      	cmp	r3, #22
 800143c:	d139      	bne.n	80014b2 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800143e:	463a      	mov	r2, r7
 8001440:	2302      	movs	r3, #2
 8001442:	2100      	movs	r1, #0
 8001444:	2084      	movs	r0, #132	; 0x84
 8001446:	f000 f943 	bl	80016d0 <_ExpanderRd>
 800144a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d131      	bne.n	80014b6 <VL53L1A2_Init+0xce>
 8001452:	783b      	ldrb	r3, [r7, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d12e      	bne.n	80014b6 <VL53L1A2_Init+0xce>
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b16      	cmp	r3, #22
 800145c:	d12b      	bne.n	80014b6 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <VL53L1A2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001464:	23ff      	movs	r3, #255	; 0xff
 8001466:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001468:	23ff      	movs	r3, #255	; 0xff
 800146a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800146c:	463a      	mov	r2, r7
 800146e:	2302      	movs	r3, #2
 8001470:	2114      	movs	r1, #20
 8001472:	2086      	movs	r0, #134	; 0x86
 8001474:	f000 f95e 	bl	8001734 <_ExpanderWR>
 8001478:	6078      	str	r0, [r7, #4]

	  if (status)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11c      	bne.n	80014ba <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001484:	23bf      	movs	r3, #191	; 0xbf
 8001486:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001488:	463a      	mov	r2, r7
 800148a:	2302      	movs	r3, #2
 800148c:	2114      	movs	r1, #20
 800148e:	2084      	movs	r0, #132	; 0x84
 8001490:	f000 f950 	bl	8001734 <_ExpanderWR>
 8001494:	6078      	str	r0, [r7, #4]

	  if (status)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d110      	bne.n	80014be <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <VL53L1A2_Init+0xe8>)
 800149e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80014a2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80014a4:	f000 f8f4 	bl	8001690 <_ExpandersSetAllIO>
 80014a8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80014aa:	bf00      	nop
 80014ac:	e008      	b.n	80014c0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80014ae:	bf00      	nop
 80014b0:	e006      	b.n	80014c0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80014b2:	bf00      	nop
 80014b4:	e004      	b.n	80014c0 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80014b6:	bf00      	nop
 80014b8:	e002      	b.n	80014c0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80014be:	bf00      	nop
  return status;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000053c 	.word	0x2000053c
 80014d0:	20000540 	.word	0x20000540

080014d4 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d037      	beq.n	800155a <VL53L1A2_ResetId+0x86>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	dc4e      	bgt.n	800158c <VL53L1A2_ResetId+0xb8>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01a      	beq.n	8001528 <VL53L1A2_ResetId+0x54>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d14a      	bne.n	800158c <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001502:	70da      	strb	r2, [r3, #3]

      if (state)
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001516:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001518:	2301      	movs	r3, #1
 800151a:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <VL53L1A2_ResetId+0xd0>)
 800151c:	2113      	movs	r1, #19
 800151e:	2084      	movs	r0, #132	; 0x84
 8001520:	f000 f908 	bl	8001734 <_ExpanderWR>
 8001524:	60f8      	str	r0, [r7, #12]
      break;
 8001526:	e035      	b.n	8001594 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001534:	705a      	strb	r2, [r3, #1]

      if (state)
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001548:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800154a:	2301      	movs	r3, #1
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <VL53L1A2_ResetId+0xd4>)
 800154e:	2113      	movs	r1, #19
 8001550:	2086      	movs	r0, #134	; 0x86
 8001552:	f000 f8ef 	bl	8001734 <_ExpanderWR>
 8001556:	60f8      	str	r0, [r7, #12]
      break;
 8001558:	e01c      	b.n	8001594 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001566:	705a      	strb	r2, [r3, #1]

      if (state)
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <VL53L1A2_ResetId+0xcc>)
 800157a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800157c:	2301      	movs	r3, #1
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <VL53L1A2_ResetId+0xd4>)
 8001580:	2113      	movs	r1, #19
 8001582:	2086      	movs	r0, #134	; 0x86
 8001584:	f000 f8d6 	bl	8001734 <_ExpanderWR>
 8001588:	60f8      	str	r0, [r7, #12]
      break;
 800158a:	e003      	b.n	8001594 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	60fb      	str	r3, [r7, #12]
      goto done;
 8001592:	e000      	b.n	8001596 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001594:	bf00      	nop
  return status;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000540 	.word	0x20000540
 80015a4:	20000543 	.word	0x20000543
 80015a8:	20000541 	.word	0x20000541

080015ac <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <_I2cFailRecover+0xdc>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	e05e      	b.n	8001680 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff fef7 	bl	80013b6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015ce:	2311      	movs	r3, #17
 80015d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	482c      	ldr	r0, [pc, #176]	; (800168c <_I2cFailRecover+0xe0>)
 80015dc:	f013 ffbe 	bl	801555c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015e6:	2311      	movs	r3, #17
 80015e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4826      	ldr	r0, [pc, #152]	; (800168c <_I2cFailRecover+0xe0>)
 80015f4:	f013 ffb2 	bl	801555c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	4823      	ldr	r0, [pc, #140]	; (800168c <_I2cFailRecover+0xe0>)
 8001600:	f014 fa12 	bl	8015a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160a:	4820      	ldr	r0, [pc, #128]	; (800168c <_I2cFailRecover+0xe0>)
 800160c:	f014 fa0c 	bl	8015a28 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]
 8001614:	e014      	b.n	8001640 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161c:	481b      	ldr	r0, [pc, #108]	; (800168c <_I2cFailRecover+0xe0>)
 800161e:	f014 fa03 	bl	8015a28 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f013 fe96 	bl	8015354 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162e:	4817      	ldr	r0, [pc, #92]	; (800168c <_I2cFailRecover+0xe0>)
 8001630:	f014 f9fa 	bl	8015a28 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f013 fe8d 	bl	8015354 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	3301      	adds	r3, #1
 800163e:	75fb      	strb	r3, [r7, #23]
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b09      	cmp	r3, #9
 8001644:	d9e7      	bls.n	8001616 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8001646:	7dbb      	ldrb	r3, [r7, #22]
 8001648:	3301      	adds	r3, #1
 800164a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <_I2cFailRecover+0xe0>)
 8001652:	f014 f9d1 	bl	80159f8 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_I2cFailRecover+0xb6>
 800165c:	7dbb      	ldrb	r3, [r7, #22]
 800165e:	2b06      	cmp	r3, #6
 8001660:	d9d6      	bls.n	8001610 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <_I2cFailRecover+0xe0>)
 8001668:	f014 f9c6 	bl	80159f8 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001672:	f06f 0304 	mvn.w	r3, #4
 8001676:	e003      	b.n	8001680 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <_I2cFailRecover+0xdc>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000544 	.word	0x20000544
 800168c:	48000400 	.word	0x48000400

08001690 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001696:	2302      	movs	r3, #2
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <_ExpandersSetAllIO+0x38>)
 800169a:	2112      	movs	r1, #18
 800169c:	2086      	movs	r0, #134	; 0x86
 800169e:	f000 f849 	bl	8001734 <_ExpanderWR>
 80016a2:	6078      	str	r0, [r7, #4]

  if (status)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80016aa:	2302      	movs	r3, #2
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <_ExpandersSetAllIO+0x3c>)
 80016ae:	2112      	movs	r1, #18
 80016b0:	2084      	movs	r0, #132	; 0x84
 80016b2:	f000 f83f 	bl	8001734 <_ExpanderWR>
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	e000      	b.n	80016bc <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80016ba:	bf00      	nop

done_err:
  return status;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000540 	.word	0x20000540
 80016cc:	20000542 	.word	0x20000542

080016d0 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	b299      	uxth	r1, r3
 80016e8:	f107 0213 	add.w	r2, r7, #19
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <_ExpanderRd+0x60>)
 80016f4:	f014 fa82 	bl	8015bfc <HAL_I2C_Master_Transmit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	617b      	str	r3, [r7, #20]

    if (status)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d110      	bne.n	8001724 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	b299      	uxth	r1, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	fb00 f303 	mul.w	r3, r0, r3
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <_ExpanderRd+0x60>)
 800171a:	f014 fb63 	bl	8015de4 <HAL_I2C_Master_Receive>
 800171e:	4603      	mov	r3, r0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e000      	b.n	8001726 <_ExpanderRd+0x56>
      break;
 8001724:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8001726:	697b      	ldr	r3, [r7, #20]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200004e0 	.word	0x200004e0

08001734 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	3301      	adds	r3, #1
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f017 feba 	bl	80194cc <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b299      	uxth	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	f107 0214 	add.w	r2, r7, #20
 8001768:	2064      	movs	r0, #100	; 0x64
 800176a:	9000      	str	r0, [sp, #0]
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <_ExpanderWR+0x4c>)
 800176e:	f014 fa45 	bl	8015bfc <HAL_I2C_Master_Transmit>
 8001772:	4603      	mov	r3, r0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001778:	4618      	mov	r0, r3
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200004e0 	.word	0x200004e0

08001784 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d903      	bls.n	800179a <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001792:	f06f 0301 	mvn.w	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e014      	b.n	80017c4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800179a:	f7ff fe25 	bl	80013e8 <VL53L1A2_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80017a4:	f06f 0303 	mvn.w	r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e00b      	b.n	80017c4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80017ac:	2101      	movs	r1, #1
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f8ae 	bl	8001910 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8aa 	bl	8001910 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8e7 	bl	8001990 <VL53L1CB_Probe>
 80017c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d903      	bls.n	80017e8 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e012      	b.n	800180e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da03      	bge.n	800180a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001802:	f06f 0304 	mvn.w	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e001      	b.n	800180e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000554 	.word	0x20000554
 800181c:	20000548 	.word	0x20000548

08001820 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d903      	bls.n	8001838 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001830:	f06f 0301 	mvn.w	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e012      	b.n	800185e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	490b      	ldr	r1, [pc, #44]	; (800186c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4610      	mov	r0, r2
 800184a:	4798      	blx	r3
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	da03      	bge.n	800185a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001852:	f06f 0304 	mvn.w	r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000554 	.word	0x20000554
 800186c:	20000548 	.word	0x20000548

08001870 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d903      	bls.n	8001888 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001880:	f06f 0301 	mvn.w	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e012      	b.n	80018ae <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	490b      	ldr	r1, [pc, #44]	; (80018bc <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	4610      	mov	r0, r2
 800189a:	4798      	blx	r3
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da03      	bge.n	80018aa <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018a2:	f06f 0304 	mvn.w	r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e001      	b.n	80018ae <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000554 	.word	0x20000554
 80018bc:	20000548 	.word	0x20000548

080018c0 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d903      	bls.n	80018d8 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018d0:	f06f 0301 	mvn.w	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e012      	b.n	80018fe <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	490b      	ldr	r1, [pc, #44]	; (800190c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	4610      	mov	r0, r2
 80018ea:	4798      	blx	r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da03      	bge.n	80018fa <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018f2:	f06f 0304 	mvn.w	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e001      	b.n	80018fe <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000554 	.word	0x20000554
 800190c:	20000548 	.word	0x20000548

08001910 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d903      	bls.n	8001928 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001920:	f06f 0301 	mvn.w	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e02e      	b.n	8001986 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d112      	bne.n	8001954 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fdcd 	bl	80014d4 <VL53L1A2_ResetId>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	da03      	bge.n	8001948 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001940:	f06f 0303 	mvn.w	r3, #3
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e01e      	b.n	8001986 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001948:	2002      	movs	r0, #2
 800194a:	f013 fd03 	bl	8015354 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e018      	b.n	8001986 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d112      	bne.n	8001980 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fdb7 	bl	80014d4 <VL53L1A2_ResetId>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	da03      	bge.n	8001974 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800196c:	f06f 0303 	mvn.w	r3, #3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e008      	b.n	8001986 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001974:	2002      	movs	r0, #2
 8001976:	f013 fced 	bl	8015354 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e002      	b.n	8001986 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001980:	f06f 0301 	mvn.w	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001998:	2352      	movs	r3, #82	; 0x52
 800199a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <VL53L1CB_Probe+0xf0>)
 800199e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <VL53L1CB_Probe+0xf4>)
 80019a2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <VL53L1CB_Probe+0xf8>)
 80019a6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <VL53L1CB_Probe+0xfc>)
 80019aa:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <VL53L1CB_Probe+0x100>)
 80019ae:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f642 2290 	movw	r2, #10896	; 0x2a90
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <VL53L1CB_Probe+0x104>)
 80019bc:	4413      	add	r3, r2
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f013 f824 	bl	8014a12 <VL53L1CB_RegisterBusIO>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019d0:	f06f 0304 	mvn.w	r3, #4
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e04d      	b.n	8001a74 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f642 2290 	movw	r2, #10896	; 0x2a90
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a2c      	ldr	r2, [pc, #176]	; (8001a94 <VL53L1CB_Probe+0x104>)
 80019e4:	4413      	add	r3, r2
 80019e6:	f107 0208 	add.w	r2, r7, #8
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f013 f8cc 	bl	8014b8a <VL53L1CB_ReadID>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019f8:	f06f 0304 	mvn.w	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e039      	b.n	8001a74 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d003      	beq.n	8001a12 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001a0a:	f06f 0306 	mvn.w	r3, #6
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e030      	b.n	8001a74 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <VL53L1CB_Probe+0x108>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <VL53L1CB_Probe+0x10c>)
 8001a16:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <VL53L1CB_Probe+0x104>)
 8001a24:	441a      	add	r2, r3
 8001a26:	491e      	ldr	r1, [pc, #120]	; (8001aa0 <VL53L1CB_Probe+0x110>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <VL53L1CB_Probe+0x108>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	491a      	ldr	r1, [pc, #104]	; (8001aa0 <VL53L1CB_Probe+0x110>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4798      	blx	r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a46:	f06f 0304 	mvn.w	r3, #4
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e012      	b.n	8001a74 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <VL53L1CB_Probe+0x108>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4912      	ldr	r1, [pc, #72]	; (8001aa0 <VL53L1CB_Probe+0x110>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a5c:	4911      	ldr	r1, [pc, #68]	; (8001aa4 <VL53L1CB_Probe+0x114>)
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4798      	blx	r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a68:	f06f 0304 	mvn.w	r3, #4
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e001      	b.n	8001a74 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08000ed1 	.word	0x08000ed1
 8001a84:	08000f4d 	.word	0x08000f4d
 8001a88:	08000f9d 	.word	0x08000f9d
 8001a8c:	08000ff1 	.word	0x08000ff1
 8001a90:	08001045 	.word	0x08001045
 8001a94:	20000568 	.word	0x20000568
 8001a98:	20000554 	.word	0x20000554
 8001a9c:	20000034 	.word	0x20000034
 8001aa0:	20000548 	.word	0x20000548
 8001aa4:	20000558 	.word	0x20000558

08001aa8 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001ab4:	793b      	ldrb	r3, [r7, #4]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d808      	bhi.n	8001acc <CheckValidRectRoi+0x24>
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d805      	bhi.n	8001acc <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d802      	bhi.n	8001acc <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d901      	bls.n	8001ad0 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001acc:	23fc      	movs	r3, #252	; 0xfc
 8001ace:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001ad0:	793a      	ldrb	r2, [r7, #4]
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d803      	bhi.n	8001ae0 <CheckValidRectRoi+0x38>
 8001ad8:	797a      	ldrb	r2, [r7, #5]
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d201      	bcs.n	8001ae4 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ae0:	23fc      	movs	r3, #252	; 0xfc
 8001ae2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3318      	adds	r3, #24
 8001b08:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001b10:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f012 fd7d 	bl	801461c <VL53L1_WrByte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001b56:	2101      	movs	r1, #1
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f002 fc56 	bl	800440a <VL53L1_data_init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001b76:	3308      	adds	r3, #8
 8001b78:	220c      	movs	r2, #12
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f017 fcb3 	bl	80194e8 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	73bb      	strb	r3, [r7, #14]
 8001b9a:	e012      	b.n	8001bc2 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d112      	bne.n	8001bca <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fc90 	bl	80024d2 <VL53L1_SetLimitCheckEnable>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	73bb      	strb	r3, [r7, #14]
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d9e9      	bls.n	8001b9c <VL53L1_DataInit+0x5a>
 8001bc8:	e000      	b.n	8001bcc <VL53L1_DataInit+0x8a>
		else
			break;
 8001bca:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 faef 	bl	80071ba <VL53L1_set_dmax_mode>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001c04:	2320      	movs	r3, #32
 8001c06:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7bba      	ldrb	r2, [r7, #14]
 8001c0c:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001c0e:	2101      	movs	r1, #1
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f947 	bl	8001ea4 <VL53L1_SetPresetMode>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f98b 	bl	8001f38 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001c2e:	2100      	movs	r1, #0
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f001 fe69 	bl	8003908 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001c4e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f011 ffa1 	bl	8013b9a <VL53L1_poll_for_boot_completion>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	603a      	str	r2, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	460b      	mov	r3, r1
 8001c76:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <ComputeDevicePresetMode+0x138>)
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	8019      	strh	r1, [r3, #0]
 8001c88:	3302      	adds	r3, #2
 8001c8a:	0c12      	lsrs	r2, r2, #16
 8001c8c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001c8e:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <ComputeDevicePresetMode+0x13c>)
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
 8001c98:	8019      	strh	r1, [r3, #0]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	0c12      	lsrs	r2, r2, #16
 8001c9e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <ComputeDevicePresetMode+0x140>)
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	8019      	strh	r1, [r3, #0]
 8001cac:	3302      	adds	r3, #2
 8001cae:	0c12      	lsrs	r2, r2, #16
 8001cb0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <ComputeDevicePresetMode+0x144>)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	8019      	strh	r1, [r3, #0]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	0c12      	lsrs	r2, r2, #16
 8001cc2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001cc4:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <ComputeDevicePresetMode+0x148>)
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	8019      	strh	r1, [r3, #0]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	0c12      	lsrs	r2, r2, #16
 8001cd4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d002      	beq.n	8001ce8 <ComputeDevicePresetMode+0x80>
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <ComputeDevicePresetMode+0x86>
 8001ce6:	e005      	b.n	8001cf4 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77bb      	strb	r3, [r7, #30]
		break;
 8001cec:	e004      	b.n	8001cf8 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	77bb      	strb	r3, [r7, #30]
		break;
 8001cf2:	e001      	b.n	8001cf8 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d845      	bhi.n	8001d8c <ComputeDevicePresetMode+0x124>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <ComputeDevicePresetMode+0xa0>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d3d 	.word	0x08001d3d
 8001d0c:	08001d4d 	.word	0x08001d4d
 8001d10:	08001d5d 	.word	0x08001d5d
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d8d 	.word	0x08001d8d
 8001d1c:	08001d8d 	.word	0x08001d8d
 8001d20:	08001d7d 	.word	0x08001d7d
 8001d24:	08001d6d 	.word	0x08001d6d
 8001d28:	08001d85 	.word	0x08001d85
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001d2c:	7fbb      	ldrb	r3, [r7, #30]
 8001d2e:	3320      	adds	r3, #32
 8001d30:	443b      	add	r3, r7
 8001d32:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
		break;
 8001d3a:	e029      	b.n	8001d90 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8001d3c:	7fbb      	ldrb	r3, [r7, #30]
 8001d3e:	3320      	adds	r3, #32
 8001d40:	443b      	add	r3, r7
 8001d42:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	701a      	strb	r2, [r3, #0]
		break;
 8001d4a:	e021      	b.n	8001d90 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	3320      	adds	r3, #32
 8001d50:	443b      	add	r3, r7
 8001d52:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	701a      	strb	r2, [r3, #0]
		break;
 8001d5a:	e019      	b.n	8001d90 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001d5c:	7fbb      	ldrb	r3, [r7, #30]
 8001d5e:	3320      	adds	r3, #32
 8001d60:	443b      	add	r3, r7
 8001d62:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
		break;
 8001d6a:	e011      	b.n	8001d90 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001d6c:	7fbb      	ldrb	r3, [r7, #30]
 8001d6e:	3320      	adds	r3, #32
 8001d70:	443b      	add	r3, r7
 8001d72:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	701a      	strb	r2, [r3, #0]
		break;
 8001d7a:	e009      	b.n	8001d90 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2211      	movs	r2, #17
 8001d80:	701a      	strb	r2, [r3, #0]
		break;
 8001d82:	e005      	b.n	8001d90 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2227      	movs	r2, #39	; 0x27
 8001d88:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8001d8a:	e001      	b.n	8001d90 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001d8c:	23f8      	movs	r3, #248	; 0xf8
 8001d8e:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8001d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3724      	adds	r7, #36	; 0x24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	0801a6c4 	.word	0x0801a6c4
 8001da4:	0801a6c8 	.word	0x0801a6c8
 8001da8:	0801a6cc 	.word	0x0801a6cc
 8001dac:	0801a6d0 	.word	0x0801a6d0
 8001db0:	0801a6d4 	.word	0x0801a6d4

08001db4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af04      	add	r7, sp, #16
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d002      	beq.n	8001de8 <SetPresetMode+0x34>
 8001de2:	7afb      	ldrb	r3, [r7, #11]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d103      	bne.n	8001df0 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dee:	e002      	b.n	8001df6 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001df0:	2320      	movs	r3, #32
 8001df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001df6:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001dfa:	7ab9      	ldrb	r1, [r7, #10]
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff32 	bl	8001c68 <ComputeDevicePresetMode>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001e0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d112      	bne.n	8001e38 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001e12:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001e16:	f107 001c 	add.w	r0, r7, #28
 8001e1a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f002 ffaf 	bl	8004d90 <VL53L1_get_preset_mode_timing_cfg>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d112      	bne.n	8001e66 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001e40:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001e44:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001e46:	69fd      	ldr	r5, [r7, #28]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	9102      	str	r1, [sp, #8]
 8001e50:	9201      	str	r2, [sp, #4]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	462b      	mov	r3, r5
 8001e56:	4622      	mov	r2, r4
 8001e58:	4601      	mov	r1, r0
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f003 f8ee 	bl	800503c <VL53L1_set_preset_mode>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001e66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e74:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001e76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e84:	461a      	mov	r2, r3
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8001e98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}

08001ea4 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f00c f94a 	bl	800e152 <VL53L1_low_power_auto_data_init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d101      	bne.n	8001ecc <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	78f9      	ldrb	r1, [r7, #3]
 8001ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff6d 	bl	8001db4 <SetPresetMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d117      	bne.n	8001f16 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d005      	beq.n	8001ef8 <VL53L1_SetPresetMode+0x54>
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d002      	beq.n	8001ef8 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d107      	bne.n	8001f08 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001ef8:	f24a 0128 	movw	r1, #41000	; 0xa028
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8a9 	bl	8002054 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e006      	b.n	8001f16 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001f08:	f248 2135 	movw	r1, #33333	; 0x8235
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8a1 	bl	8002054 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8001f1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa68 	bl	80023f8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0a2      	sub	sp, #136	; 0x88
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f5c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001f60:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001f64:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d105      	bne.n	8001f78 <VL53L1_SetDistanceMode+0x40>
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d002      	beq.n	8001f78 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001f72:	f06f 0303 	mvn.w	r3, #3
 8001f76:	e069      	b.n	800204c <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d008      	beq.n	8001f90 <VL53L1_SetDistanceMode+0x58>
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d005      	beq.n	8001f90 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d002      	beq.n	8001f90 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001f8a:	f06f 0303 	mvn.w	r3, #3
 8001f8e:	e05d      	b.n	800204c <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8001f90:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f002 fede 	bl	8004d60 <VL53L1_get_zone_config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001fb2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001fba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001fc2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f002 fd8a 	bl	8004ae0 <VL53L1_get_timeouts_us>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8001fd2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fee5 	bl	8001db4 <SetPresetMode>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8001ff0:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d106      	bne.n	8002006 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ffe:	461a      	mov	r2, r3
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002006:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800200e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f002 fd2a 	bl	8004a6e <VL53L1_set_timeouts_us>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002020:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002028:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800202e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f002 fe4c 	bl	8004cda <VL53L1_set_zone_config>
 8002042:	4603      	mov	r3, r0
 8002044:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8002048:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 800204c:	4618      	mov	r0, r3
 800204e:	3788      	adds	r7, #136	; 0x88
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800207a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	; (8002254 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d902      	bls.n	800208a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002084:	23fc      	movs	r3, #252	; 0xfc
 8002086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800208a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002092:	f107 031a 	add.w	r3, r7, #26
 8002096:	461a      	mov	r2, r3
 8002098:	2105      	movs	r1, #5
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fb9a 	bl	80027d4 <VL53L1_GetSequenceStepEnable>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80020a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80020ae:	f107 0319 	add.w	r3, r7, #25
 80020b2:	461a      	mov	r2, r3
 80020b4:	2106      	movs	r1, #6
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fb8c 	bl	80027d4 <VL53L1_GetSequenceStepEnable>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80020c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10b      	bne.n	80020e2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	f107 0210 	add.w	r2, r7, #16
 80020d2:	f107 010c 	add.w	r1, r7, #12
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f002 fd02 	bl	8004ae0 <VL53L1_get_timeouts_us>
 80020dc:	4603      	mov	r3, r0
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80020e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80a0 	bne.w	800222c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020f2:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80020f6:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8002100:	7efb      	ldrb	r3, [r7, #27]
 8002102:	3b01      	subs	r3, #1
 8002104:	2b08      	cmp	r3, #8
 8002106:	d861      	bhi.n	80021cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	080021b5 	.word	0x080021b5
 8002114:	080021b5 	.word	0x080021b5
 8002118:	08002151 	.word	0x08002151
 800211c:	08002135 	.word	0x08002135
 8002120:	080021cd 	.word	0x080021cd
 8002124:	080021cd 	.word	0x080021cd
 8002128:	080021c1 	.word	0x080021c1
 800212c:	08002177 	.word	0x08002177
 8002130:	080021b5 	.word	0x080021b5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002134:	7ebb      	ldrb	r3, [r7, #26]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d002      	beq.n	8002140 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 800213a:	7e7b      	ldrb	r3, [r7, #25]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d103      	bne.n	8002148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8002140:	f241 3388 	movw	r3, #5000	; 0x1388
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8002146:	e044      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800214e:	e040      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002156:	7ebb      	ldrb	r3, [r7, #26]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d002      	beq.n	8002162 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 800215c:	7e7b      	ldrb	r3, [r7, #25]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d103      	bne.n	800216a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8002162:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
 8002168:	e002      	b.n	8002170 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 800216a:	f245 4360 	movw	r3, #21600	; 0x5460
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8002170:	2302      	movs	r3, #2
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002174:	e02d      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800217c:	23f5      	movs	r3, #245	; 0xf5
 800217e:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	461a      	mov	r2, r3
 8002186:	f248 0188 	movw	r1, #32904	; 0x8088
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f005 f88c 	bl	80072a8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dd07      	ble.n	80021a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	22f5      	movs	r2, #245	; 0xf5
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	4413      	add	r3, r2
 80021a4:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80021b2:	e00e      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80021b4:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80021ba:	2306      	movs	r3, #6
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80021be:	e008      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80021c6:	3308      	adds	r3, #8
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80021ca:	e002      	b.n	80021d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80021cc:	23f8      	movs	r3, #248	; 0xf8
 80021ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d803      	bhi.n	80021e2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80021da:	23fc      	movs	r3, #252	; 0xfc
 80021dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021e0:	e003      	b.n	80021ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80021e8:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80021ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d11c      	bne.n	800222c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d203      	bcs.n	8002202 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80021fa:	23fc      	movs	r3, #252	; 0xfc
 80021fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002200:	e00d      	b.n	800221e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f002 fc2b 	bl	8004a6e <VL53L1_set_timeouts_us>
 8002218:	4603      	mov	r3, r0
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800221e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800222c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800223a:	461a      	mov	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002242:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002246:	4618      	mov	r0, r3
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	00086470 	.word	0x00086470
 8002254:	00989680 	.word	0x00989680

08002258 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8002286:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800228e:	f107 031b 	add.w	r3, r7, #27
 8002292:	461a      	mov	r2, r3
 8002294:	2105      	movs	r1, #5
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fa9c 	bl	80027d4 <VL53L1_GetSequenceStepEnable>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80022a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80022aa:	f107 031a 	add.w	r3, r7, #26
 80022ae:	461a      	mov	r2, r3
 80022b0:	2106      	movs	r1, #6
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa8e 	bl	80027d4 <VL53L1_GetSequenceStepEnable>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80022be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	f107 0214 	add.w	r2, r7, #20
 80022ce:	f107 010c 	add.w	r1, r7, #12
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f002 fc04 	bl	8004ae0 <VL53L1_get_timeouts_us>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80022de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d179      	bne.n	80023da <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022ec:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80022f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80022f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022f8:	3b01      	subs	r3, #1
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d869      	bhi.n	80023d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	080023b1 	.word	0x080023b1
 8002308:	080023b1 	.word	0x080023b1
 800230c:	0800234b 	.word	0x0800234b
 8002310:	08002329 	.word	0x08002329
 8002314:	080023d3 	.word	0x080023d3
 8002318:	080023d3 	.word	0x080023d3
 800231c:	080023c3 	.word	0x080023c3
 8002320:	08002373 	.word	0x08002373
 8002324:	080023b1 	.word	0x080023b1
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002328:	7efb      	ldrb	r3, [r7, #27]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d002      	beq.n	8002334 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 800232e:	7ebb      	ldrb	r3, [r7, #26]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800233a:	3308      	adds	r3, #8
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800233e:	e04d      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002348:	e048      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800234a:	7efb      	ldrb	r3, [r7, #27]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d002      	beq.n	8002356 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8002350:	7ebb      	ldrb	r3, [r7, #26]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800235c:	3334      	adds	r3, #52	; 0x34
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8002362:	e03b      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800236a:	3330      	adds	r3, #48	; 0x30
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002370:	e034      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002372:	23f5      	movs	r3, #245	; 0xf5
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	461a      	mov	r2, r3
 800237c:	f248 0188 	movw	r1, #32904	; 0x8088
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 ff91 	bl	80072a8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	dd07      	ble.n	800239c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	22f5      	movs	r2, #245	; 0xf5
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	461a      	mov	r2, r3
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	4413      	add	r3, r2
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80023a2:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023ae:	e015      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023c0:	e00c      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80023cc:	3308      	adds	r3, #8
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80023d0:	e004      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80023d2:	23f8      	movs	r3, #248	; 0xf8
 80023d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023d8:	e000      	b.n	80023dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80023da:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80023dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80023ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3730      	adds	r7, #48	; 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f002 facc 	bl	80049bc <VL53L1_set_inter_measurement_period_ms>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f002 fae3 	bl	8004a18 <VL53L1_get_inter_measurement_period_ms>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	019b      	lsls	r3, r3, #6
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800245e:	fba1 1303 	umull	r1, r3, r1, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	460b      	mov	r3, r1
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002492:	897b      	ldrh	r3, [r7, #10]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <SetLimitValue+0x1e>
 8002498:	2b01      	cmp	r3, #1
 800249a:	d009      	beq.n	80024b0 <SetLimitValue+0x30>
 800249c:	e011      	b.n	80024c2 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0b9b      	lsrs	r3, r3, #14
 80024a2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80024a4:	8abb      	ldrh	r3, [r7, #20]
 80024a6:	4619      	mov	r1, r3
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f003 f988 	bl	80057be <VL53L1_set_lite_sigma_threshold>
		break;
 80024ae:	e00a      	b.n	80024c6 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0a5b      	lsrs	r3, r3, #9
 80024b4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80024b6:	8abb      	ldrh	r3, [r7, #20]
 80024b8:	4619      	mov	r1, r3
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f003 f9ad 	bl	800581a <VL53L1_set_lite_min_count_rate>
		break;
 80024c0:	e001      	b.n	80024c6 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80024c2:	23fc      	movs	r3, #252	; 0xfc
 80024c4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d902      	bls.n	80024f6 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80024f0:	23fc      	movs	r3, #252	; 0xfc
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e015      	b.n	8002522 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 80024f6:	787b      	ldrb	r3, [r7, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	e007      	b.n	8002512 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffb1 	bl	8002480 <SetLimitValue>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800252a:	787b      	ldrb	r3, [r7, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2da      	uxtb	r2, r3
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	4611      	mov	r1, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002542:	3334      	adds	r3, #52	; 0x34
 8002544:	460a      	mov	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	460b      	mov	r3, r1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d905      	bls.n	8002578 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800256c:	23fc      	movs	r3, #252	; 0xfc
 800256e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e00a      	b.n	800258e <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002582:	3334      	adds	r3, #52	; 0x34
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7dba      	ldrb	r2, [r7, #22]
 800258c:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800258e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002592:	4618      	mov	r0, r3
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b088      	sub	sp, #32
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	460b      	mov	r3, r1
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <VL53L1_GetLimitCheckValue+0x22>
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d00c      	beq.n	80025d8 <VL53L1_GetLimitCheckValue+0x3a>
 80025be:	e017      	b.n	80025f0 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f003 f8e2 	bl	8005790 <VL53L1_get_lite_sigma_threshold>
 80025cc:	4603      	mov	r3, r0
 80025ce:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80025d0:	8abb      	ldrh	r3, [r7, #20]
 80025d2:	039b      	lsls	r3, r3, #14
 80025d4:	61bb      	str	r3, [r7, #24]
		break;
 80025d6:	e00d      	b.n	80025f4 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80025d8:	f107 0316 	add.w	r3, r7, #22
 80025dc:	4619      	mov	r1, r3
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f003 f904 	bl	80057ec <VL53L1_get_lite_min_count_rate>
 80025e4:	4603      	mov	r3, r0
 80025e6:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80025e8:	8afb      	ldrh	r3, [r7, #22]
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	61bb      	str	r3, [r7, #24]
		break;
 80025ee:	e001      	b.n	80025f4 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80025f0:	23fc      	movs	r3, #252	; 0xfc
 80025f2:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80025f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d129      	bne.n	8002650 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002618:	897b      	ldrh	r3, [r7, #10]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002622:	3334      	adds	r3, #52	; 0x34
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e012      	b.n	8002650 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002630:	897b      	ldrh	r3, [r7, #10]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002640:	897b      	ldrh	r3, [r7, #10]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4413      	add	r3, r2
 8002646:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800264a:	3334      	adds	r3, #52	; 0x34
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002650:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0a0      	sub	sp, #128	; 0x80
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002678:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800267c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8002680:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002684:	2b02      	cmp	r3, #2
 8002686:	d102      	bne.n	800268e <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8002688:	2310      	movs	r3, #16
 800268a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002696:	429a      	cmp	r2, r3
 8002698:	d303      	bcc.n	80026a2 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80026a2:	23fc      	movs	r3, #252	; 0xfc
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80026a8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d17e      	bne.n	80027ae <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80026b0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80026b4:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80026c6:	e06a      	b.n	800279e <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80026c8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	f107 0208 	add.w	r2, r7, #8
 80026d6:	3301      	adds	r3, #1
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f7ff f9e3 	bl	8001aa8 <CheckValidRectRoi>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80026e8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d15d      	bne.n	80027ac <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80026f0:	7abb      	ldrb	r3, [r7, #10]
 80026f2:	461a      	mov	r2, r3
 80026f4:	7a3b      	ldrb	r3, [r7, #8]
 80026f6:	4413      	add	r3, r2
 80026f8:	3301      	adds	r3, #1
					/ 2;
 80026fa:	0fda      	lsrs	r2, r3, #31
 80026fc:	4413      	add	r3, r2
 80026fe:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002700:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002704:	7a7b      	ldrb	r3, [r7, #9]
 8002706:	461a      	mov	r2, r3
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	4413      	add	r3, r2
 800270c:	3301      	adds	r3, #1
					/ 2;
 800270e:	0fda      	lsrs	r2, r3, #31
 8002710:	4413      	add	r3, r2
 8002712:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002714:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002718:	7aba      	ldrb	r2, [r7, #10]
 800271a:	7a3b      	ldrb	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002722:	7a7a      	ldrb	r2, [r7, #9]
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 800272c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002730:	2b02      	cmp	r3, #2
 8002732:	d903      	bls.n	800273c <VL53L1_SetROI+0xe0>
 8002734:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002738:	2b02      	cmp	r3, #2
 800273a:	d803      	bhi.n	8002744 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800273c:	23fc      	movs	r3, #252	; 0xfc
 800273e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002742:	e034      	b.n	80027ae <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002744:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002748:	3306      	adds	r3, #6
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3380      	adds	r3, #128	; 0x80
 800274e:	443b      	add	r3, r7
 8002750:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002754:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002758:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800275c:	3306      	adds	r3, #6
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	3380      	adds	r3, #128	; 0x80
 8002762:	443b      	add	r3, r7
 8002764:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002768:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 800276c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002770:	3306      	adds	r3, #6
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	3380      	adds	r3, #128	; 0x80
 8002776:	443b      	add	r3, r7
 8002778:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800277c:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8002780:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002784:	3306      	adds	r3, #6
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	3380      	adds	r3, #128	; 0x80
 800278a:	443b      	add	r3, r7
 800278c:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8002790:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002794:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002798:	3301      	adds	r3, #1
 800279a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d38e      	bcc.n	80026c8 <VL53L1_SetROI+0x6c>
 80027aa:	e000      	b.n	80027ae <VL53L1_SetROI+0x152>
				break;
 80027ac:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80027ae:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f002 fa8c 	bl	8004cda <VL53L1_set_zone_config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80027c8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3780      	adds	r7, #128	; 0x80
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	460b      	mov	r3, r1
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4619      	mov	r1, r3
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f002 f9e3 	bl	8004bb8 <VL53L1_get_sequence_config_bit>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80027f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3318      	adds	r3, #24
 8002814:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7edb      	ldrb	r3, [r3, #27]
 800281a:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d002      	beq.n	8002828 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f001 fc8e 	bl	8004144 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002828:	2300      	movs	r3, #0
 800282a:	77bb      	strb	r3, [r7, #30]
 800282c:	e01a      	b.n	8002864 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800282e:	7fbb      	ldrb	r3, [r7, #30]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002836:	330c      	adds	r3, #12
 8002838:	2100      	movs	r1, #0
 800283a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800283e:	7fbb      	ldrb	r3, [r7, #30]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002848:	3320      	adds	r3, #32
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800284e:	7fbb      	ldrb	r3, [r7, #30]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002858:	3324      	adds	r3, #36	; 0x24
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800285e:	7fbb      	ldrb	r3, [r7, #30]
 8002860:	3301      	adds	r3, #1
 8002862:	77bb      	strb	r3, [r7, #30]
 8002864:	7fbb      	ldrb	r3, [r7, #30]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d9e1      	bls.n	800282e <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800287c:	2200      	movs	r2, #0
 800287e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002888:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 800288c:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800288e:	7dbb      	ldrb	r3, [r7, #22]
 8002890:	2b63      	cmp	r3, #99	; 0x63
 8002892:	dc12      	bgt.n	80028ba <VL53L1_StartMeasurement+0xb6>
 8002894:	2b62      	cmp	r3, #98	; 0x62
 8002896:	da0d      	bge.n	80028b4 <VL53L1_StartMeasurement+0xb0>
 8002898:	2b05      	cmp	r3, #5
 800289a:	dc0e      	bgt.n	80028ba <VL53L1_StartMeasurement+0xb6>
 800289c:	2b04      	cmp	r3, #4
 800289e:	da09      	bge.n	80028b4 <VL53L1_StartMeasurement+0xb0>
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	dc02      	bgt.n	80028aa <VL53L1_StartMeasurement+0xa6>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da05      	bge.n	80028b4 <VL53L1_StartMeasurement+0xb0>
 80028a8:	e007      	b.n	80028ba <VL53L1_StartMeasurement+0xb6>
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d105      	bne.n	80028ba <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	77fb      	strb	r3, [r7, #31]
		break;
 80028b2:	e004      	b.n	80028be <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80028b4:	23f2      	movs	r3, #242	; 0xf2
 80028b6:	77fb      	strb	r3, [r7, #31]
		break;
 80028b8:	e001      	b.n	80028be <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80028ba:	23fd      	movs	r3, #253	; 0xfd
 80028bc:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80028be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <VL53L1_StartMeasurement+0x102>
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d11c      	bne.n	8002906 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fcc0 	bl	8002258 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80028d8:	4603      	mov	r3, r0
 80028da:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <VL53L1_StartMeasurement+0x13c>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fda2 	bl	8002438 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80028f4:	4603      	mov	r3, r0
 80028f6:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1d1a      	adds	r2, r3, #4
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d901      	bls.n	8002906 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002902:	23fc      	movs	r3, #252	; 0xfc
 8002904:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002906:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2206      	movs	r2, #6
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f002 ff97 	bl	8005848 <VL53L1_init_and_start_range>
 800291a:	4603      	mov	r3, r0
 800291c:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 800291e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800292c:	2204      	movs	r2, #4
 800292e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002932:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	10624dd3 	.word	0x10624dd3

08002944 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f003 fa47 	bl	8005de4 <VL53L1_stop_range>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7edb      	ldrb	r3, [r3, #27]
 800295e:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d002      	beq.n	800296c <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f001 fd1a 	bl	80043a0 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 800296c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800297a:	2203      	movs	r2, #3
 800297c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7edb      	ldrb	r3, [r3, #27]
 800299c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800299e:	7bbb      	ldrb	r3, [r7, #14]
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f003 ff4b 	bl	800683e <VL53L1_clear_interrupt_and_enable_next_range>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80029ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f011 f8ac 	bl	8013b26 <VL53L1_is_new_data_ready>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	603a      	str	r2, [r7, #0]
 80029e8:	80fb      	strh	r3, [r7, #6]
 80029ea:	460b      	mov	r3, r1
 80029ec:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 80029ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 80029f2:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 80029f4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80029f8:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 80029fa:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80029fe:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002a00:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a04:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002a06:	797b      	ldrb	r3, [r7, #5]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d002      	beq.n	8002a12 <GenNewPresetMode+0x34>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d012      	beq.n	8002a36 <GenNewPresetMode+0x58>
 8002a10:	e023      	b.n	8002a5a <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dd03      	ble.n	8002a24 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002a22:	e02c      	b.n	8002a7e <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002a24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a28:	89bb      	ldrh	r3, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dd27      	ble.n	8002a7e <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
		break;
 8002a34:	e023      	b.n	8002a7e <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002a36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a3a:	893b      	ldrh	r3, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dd03      	ble.n	8002a48 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002a46:	e01c      	b.n	8002a82 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002a48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	da17      	bge.n	8002a82 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
		break;
 8002a58:	e013      	b.n	8002a82 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	da03      	bge.n	8002a6c <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002a6a:	e00c      	b.n	8002a86 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002a6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	da07      	bge.n	8002a86 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	701a      	strb	r2, [r3, #0]
		break;
 8002a7c:	e003      	b.n	8002a86 <GenNewPresetMode+0xa8>
		break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <GenNewPresetMode+0xaa>
		break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <GenNewPresetMode+0xaa>
		break;
 8002a86:	bf00      	nop
	}
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	7ddb      	ldrb	r3, [r3, #23]
 8002aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <CheckAndChangeDistanceMode+0xbc>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3318      	adds	r3, #24
 8002ab6:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002abc:	2bff      	cmp	r3, #255	; 0xff
 8002abe:	d042      	beq.n	8002b46 <CheckAndChangeDistanceMode+0xb2>
 8002ac0:	2bff      	cmp	r3, #255	; 0xff
 8002ac2:	dc07      	bgt.n	8002ad4 <CheckAndChangeDistanceMode+0x40>
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	dc02      	bgt.n	8002ace <CheckAndChangeDistanceMode+0x3a>
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	da3c      	bge.n	8002b46 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002acc:	e002      	b.n	8002ad4 <CheckAndChangeDistanceMode+0x40>
 8002ace:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d938      	bls.n	8002b46 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002ad4:	bf00      	nop
	}

	DmaxValid = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002ae2:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	db03      	blt.n	8002af4 <CheckAndChangeDistanceMode+0x60>
 8002aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b00:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002b04:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	7dfa      	ldrb	r2, [r7, #23]
 8002b0a:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b1a:	7df9      	ldrb	r1, [r7, #23]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff5d 	bl	80029de <GenNewPresetMode>
 8002b24:	e010      	b.n	8002b48 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002b2e:	7df9      	ldrb	r1, [r7, #23]
 8002b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff51 	bl	80029de <GenNewPresetMode>
 8002b3c:	e004      	b.n	8002b48 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2203      	movs	r2, #3
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e000      	b.n	8002b48 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002b46:	bf00      	nop
	}
}
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000008 	.word	0x20000008

08002b54 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b08d      	sub	sp, #52	; 0x34
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	603a      	str	r2, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	460b      	mov	r3, r1
 8002b62:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002b64:	2396      	movs	r3, #150	; 0x96
 8002b66:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002b68:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b6c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002b6e:	231e      	movs	r3, #30
 8002b70:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <ComputeRQL+0x104>)
 8002b74:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <ComputeRQL+0x108>)
 8002b78:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002b7a:	f641 139a 	movw	r3, #6554	; 0x199a
 8002b7e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <ComputeRQL+0x3a>
		returnvalue = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b8c:	e05b      	b.n	8002c46 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002b94:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002b9c:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002b9e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	da02      	bge.n	8002bac <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d103      	bne.n	8002bb4 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002bac:	2332      	movs	r3, #50	; 0x32
 8002bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bb2:	e048      	b.n	8002c46 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002bba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	dd03      	ble.n	8002bca <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002bc2:	8c3b      	ldrh	r3, [r7, #32]
 8002bc4:	041b      	lsls	r3, r3, #16
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc8:	e007      	b.n	8002bda <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002be4:	461a      	mov	r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d804      	bhi.n	8002c1a <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c18:	e006      	b.n	8002c28 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002c1a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c20:	e002      	b.n	8002c28 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002c22:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b32      	cmp	r3, #50	; 0x32
 8002c32:	d905      	bls.n	8002c40 <ComputeRQL+0xec>
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	bf28      	it	cs
 8002c3a:	2364      	movcs	r3, #100	; 0x64
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e000      	b.n	8002c42 <ComputeRQL+0xee>
 8002c40:	2332      	movs	r3, #50	; 0x32
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3734      	adds	r7, #52	; 0x34
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	0075b333 	.word	0x0075b333
 8002c5c:	0030cccd 	.word	0x0030cccd

08002c60 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	3b04      	subs	r3, #4
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	d83d      	bhi.n	8002cee <ConvertStatusLite+0x8e>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <ConvertStatusLite+0x18>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002ccb 	.word	0x08002ccb
 8002c7c:	08002cc5 	.word	0x08002cc5
 8002c80:	08002cd1 	.word	0x08002cd1
 8002c84:	08002cd7 	.word	0x08002cd7
 8002c88:	08002ce3 	.word	0x08002ce3
 8002c8c:	08002ce9 	.word	0x08002ce9
 8002c90:	08002cef 	.word	0x08002cef
 8002c94:	08002cef 	.word	0x08002cef
 8002c98:	08002cdd 	.word	0x08002cdd
 8002c9c:	08002cef 	.word	0x08002cef
 8002ca0:	08002cef 	.word	0x08002cef
 8002ca4:	08002cef 	.word	0x08002cef
 8002ca8:	08002cef 	.word	0x08002cef
 8002cac:	08002cef 	.word	0x08002cef
 8002cb0:	08002cb9 	.word	0x08002cb9
 8002cb4:	08002cbf 	.word	0x08002cbf
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002cb8:	230a      	movs	r3, #10
 8002cba:	73fb      	strb	r3, [r7, #15]
		break;
 8002cbc:	e019      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	73fb      	strb	r3, [r7, #15]
		break;
 8002cc2:	e016      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	73fb      	strb	r3, [r7, #15]
		break;
 8002cc8:	e013      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	73fb      	strb	r3, [r7, #15]
		break;
 8002cce:	e010      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
		break;
 8002cd4:	e00d      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	73fb      	strb	r3, [r7, #15]
		break;
 8002cda:	e00a      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002cdc:	2309      	movs	r3, #9
 8002cde:	73fb      	strb	r3, [r7, #15]
		break;
 8002ce0:	e007      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
		break;
 8002ce6:	e004      	b.n	8002cf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
		break;
 8002cec:	e001      	b.n	8002cf2 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002cee:	23ff      	movs	r3, #255	; 0xff
 8002cf0:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	3b05      	subs	r3, #5
 8002d0e:	2b12      	cmp	r3, #18
 8002d10:	d840      	bhi.n	8002d94 <ConvertStatusHisto+0x94>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <ConvertStatusHisto+0x18>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d65 	.word	0x08002d65
 8002d1c:	08002d6b 	.word	0x08002d6b
 8002d20:	08002d77 	.word	0x08002d77
 8002d24:	08002d95 	.word	0x08002d95
 8002d28:	08002d8f 	.word	0x08002d8f
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002d95 	.word	0x08002d95
 8002d34:	08002d95 	.word	0x08002d95
 8002d38:	08002d95 	.word	0x08002d95
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002d95 	.word	0x08002d95
 8002d44:	08002d95 	.word	0x08002d95
 8002d48:	08002d95 	.word	0x08002d95
 8002d4c:	08002d95 	.word	0x08002d95
 8002d50:	08002d71 	.word	0x08002d71
 8002d54:	08002d83 	.word	0x08002d83
 8002d58:	08002d95 	.word	0x08002d95
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002d7d 	.word	0x08002d7d
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002d64:	2304      	movs	r3, #4
 8002d66:	73fb      	strb	r3, [r7, #15]
		break;
 8002d68:	e016      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
		break;
 8002d6e:	e013      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002d70:	2306      	movs	r3, #6
 8002d72:	73fb      	strb	r3, [r7, #15]
		break;
 8002d74:	e010      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002d76:	2307      	movs	r3, #7
 8002d78:	73fb      	strb	r3, [r7, #15]
		break;
 8002d7a:	e00d      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	73fb      	strb	r3, [r7, #15]
		break;
 8002d80:	e00a      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002d82:	2307      	movs	r3, #7
 8002d84:	73fb      	strb	r3, [r7, #15]
		break;
 8002d86:	e007      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002d88:	230b      	movs	r3, #11
 8002d8a:	73fb      	strb	r3, [r7, #15]
		break;
 8002d8c:	e004      	b.n	8002d98 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
		break;
 8002d92:	e001      	b.n	8002d98 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002d94:	23ff      	movs	r3, #255	; 0xff
 8002d96:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b092      	sub	sp, #72	; 0x48
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	70fb      	strb	r3, [r7, #3]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70bb      	strb	r3, [r7, #2]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002de8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff feaf 	bl	8002b54 <ComputeRQL>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfc:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e02:	025b      	lsls	r3, r3, #9
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002e10:	025b      	lsls	r3, r3, #9
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e18:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e26:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e30:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e34:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3a:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e48:	2200      	movs	r2, #0
 8002e4a:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002e4c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d009      	beq.n	8002e68 <SetTargetData+0xc0>
 8002e54:	2b11      	cmp	r3, #17
 8002e56:	dc0f      	bgt.n	8002e78 <SetTargetData+0xd0>
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	dc02      	bgt.n	8002e62 <SetTargetData+0xba>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dc03      	bgt.n	8002e68 <SetTargetData+0xc0>
 8002e60:	e00a      	b.n	8002e78 <SetTargetData+0xd0>
 8002e62:	2b0d      	cmp	r3, #13
 8002e64:	d004      	beq.n	8002e70 <SetTargetData+0xc8>
 8002e66:	e007      	b.n	8002e78 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	75da      	strb	r2, [r3, #23]
		break;
 8002e6e:	e006      	b.n	8002e7e <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e72:	220d      	movs	r2, #13
 8002e74:	75da      	strb	r2, [r3, #23]
		break;
 8002e76:	e002      	b.n	8002e7e <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e80:	7ddb      	ldrb	r3, [r3, #23]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d117      	bne.n	8002eb6 <SetTargetData+0x10e>
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8002e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ea4:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002eac:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002eb4:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb8:	7ddb      	ldrb	r3, [r3, #23]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d125      	bne.n	8002f0a <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ec4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8002ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d007      	beq.n	8002ee4 <SetTargetData+0x13c>
 8002ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d003      	beq.n	8002ee4 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	d109      	bne.n	8002ef8 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8002ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff09 	bl	8002d00 <ConvertStatusHisto>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef4:	75da      	strb	r2, [r3, #23]
 8002ef6:	e008      	b.n	8002f0a <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff feaf 	bl	8002c60 <ConvertStatusLite>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f08:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f0e:	025b      	lsls	r3, r3, #9
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8002f36:	f107 0310 	add.w	r3, r7, #16
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fb2d 	bl	800259e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8002f56:	f107 0315 	add.w	r3, r7, #21
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff faf8 	bl	8002554 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002f64:	7d7b      	ldrb	r3, [r7, #21]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <SetTargetData+0x1ce>
 8002f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <SetTargetData+0x1ce>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <SetTargetData+0x1d0>
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f82:	461a      	mov	r2, r3
 8002f84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f88:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fb02 	bl	800259e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002f9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002fa8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8002fac:	f107 0315 	add.w	r3, r7, #21
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff facd 	bl	8002554 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002fba:	7d7b      	ldrb	r3, [r7, #21]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <SetTargetData+0x224>
 8002fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <SetTargetData+0x224>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <SetTargetData+0x226>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fde:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe4:	8a9b      	ldrh	r3, [r3, #20]
 8002fe6:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fea:	7ddb      	ldrb	r3, [r3, #23]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d110      	bne.n	8003012 <SetTargetData+0x26a>
 8002ff0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0c      	bge.n	8003012 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002ff8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002ffc:	4ba3      	ldr	r3, [pc, #652]	; (800328c <SetTargetData+0x4e4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	da03      	bge.n	800300c <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8003004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003006:	220e      	movs	r2, #14
 8003008:	75da      	strb	r2, [r3, #23]
 800300a:	e002      	b.n	8003012 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800300c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300e:	2200      	movs	r2, #0
 8003010:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	461a      	mov	r2, r3
 8003018:	f248 01be 	movw	r1, #32958	; 0x80be
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f004 f943 	bl	80072a8 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800302c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302e:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003036:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	429a      	cmp	r2, r3
 800303c:	d902      	bls.n	8003044 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 800303e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003040:	220c      	movs	r2, #12
 8003042:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	461a      	mov	r2, r3
 800304a:	f248 0191 	movw	r1, #32913	; 0x8091
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f004 f92a 	bl	80072a8 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003054:	78bb      	ldrb	r3, [r7, #2]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8003062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003064:	8a9b      	ldrh	r3, [r3, #20]
 8003066:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	2200      	movs	r2, #0
 8003072:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d106      	bne.n	8003088 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003080:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8250 	beq.w	8003534 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8003094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003096:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8003098:	2b07      	cmp	r3, #7
 800309a:	d004      	beq.n	80030a6 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 800309c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309e:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	f040 8247 	bne.w	8003534 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80030a6:	787b      	ldrb	r3, [r7, #1]
 80030a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030b0:	3320      	adds	r3, #32
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d01c      	beq.n	80030f2 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030bc:	4413      	add	r3, r2
 80030be:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030c2:	3320      	adds	r3, #32
 80030c4:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d013      	beq.n	80030f2 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80030ca:	787b      	ldrb	r3, [r7, #1]
 80030cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030d4:	3320      	adds	r3, #32
 80030d6:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 822b 	bne.w	8003534 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80030de:	787b      	ldrb	r3, [r7, #1]
 80030e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 8221 	bne.w	8003534 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030f8:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80030fc:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003104:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003106:	429a      	cmp	r2, r3
 8003108:	d00c      	beq.n	8003124 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003110:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003114:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800311c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800311e:	429a      	cmp	r2, r3
 8003120:	f040 81dc 	bne.w	80034dc <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003126:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800312a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 800312c:	787b      	ldrb	r3, [r7, #1]
 800312e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003130:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003134:	330c      	adds	r3, #12
 8003136:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800313a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	785b      	ldrb	r3, [r3, #1]
 800314c:	2b21      	cmp	r3, #33	; 0x21
 800314e:	d008      	beq.n	8003162 <SetTargetData+0x3ba>
 8003150:	2b21      	cmp	r3, #33	; 0x21
 8003152:	f300 81bf 	bgt.w	80034d4 <SetTargetData+0x72c>
 8003156:	2b1b      	cmp	r3, #27
 8003158:	f000 8113 	beq.w	8003382 <SetTargetData+0x5da>
 800315c:	2b1e      	cmp	r3, #30
 800315e:	d004      	beq.n	800316a <SetTargetData+0x3c2>
 8003160:	e1b8      	b.n	80034d4 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003168:	e1b9      	b.n	80034de <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8003170:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003174:	429a      	cmp	r2, r3
 8003176:	dd0f      	ble.n	8003198 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800317e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003182:	429a      	cmp	r2, r3
 8003184:	da08      	bge.n	8003198 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003186:	7efb      	ldrb	r3, [r7, #27]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003192:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003196:	e0f3      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80031a2:	425b      	negs	r3, r3
 80031a4:	429a      	cmp	r2, r3
 80031a6:	da10      	bge.n	80031ca <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80031a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80031b2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dd08      	ble.n	80031ca <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80031b8:	7efb      	ldrb	r3, [r7, #27]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80031c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031c8:	e0da      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80031d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	dd0f      	ble.n	80031f8 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80031de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	da08      	bge.n	80031f8 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80031e6:	7efb      	ldrb	r3, [r7, #27]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80031f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031f6:	e0c3      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80031f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003202:	425b      	negs	r3, r3
 8003204:	429a      	cmp	r2, r3
 8003206:	da10      	bge.n	800322a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003212:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003214:	429a      	cmp	r2, r3
 8003216:	dd08      	ble.n	800322a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003218:	7efb      	ldrb	r3, [r7, #27]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003224:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003228:	e0aa      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003230:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003234:	429a      	cmp	r2, r3
 8003236:	dd0f      	ble.n	8003258 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800323e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003242:	429a      	cmp	r2, r3
 8003244:	da08      	bge.n	8003258 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003246:	7efb      	ldrb	r3, [r7, #27]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003252:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003256:	e093      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003258:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003262:	425b      	negs	r3, r3
 8003264:	429a      	cmp	r2, r3
 8003266:	da13      	bge.n	8003290 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8003272:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003274:	429a      	cmp	r2, r3
 8003276:	dd0b      	ble.n	8003290 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003278:	7efb      	ldrb	r3, [r7, #27]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003284:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003288:	e07a      	b.n	8003380 <SetTargetData+0x5d8>
 800328a:	bf00      	nop
 800328c:	20000008 	.word	0x20000008
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800329a:	429a      	cmp	r2, r3
 800329c:	dd0f      	ble.n	80032be <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80032a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	da08      	bge.n	80032be <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80032ac:	7efb      	ldrb	r3, [r7, #27]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80032b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032bc:	e060      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80032be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80032c8:	425b      	negs	r3, r3
 80032ca:	429a      	cmp	r2, r3
 80032cc:	da10      	bge.n	80032f0 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80032ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80032d8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80032da:	429a      	cmp	r2, r3
 80032dc:	dd08      	ble.n	80032f0 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80032de:	7efb      	ldrb	r3, [r7, #27]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80032ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032ee:	e047      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80032f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	da0c      	bge.n	8003318 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003308:	429a      	cmp	r2, r3
 800330a:	dd05      	ble.n	8003318 <SetTargetData+0x570>
					AddOffset =
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8003312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003316:	e033      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800331e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003322:	429a      	cmp	r2, r3
 8003324:	dd0f      	ble.n	8003346 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800332c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003330:	429a      	cmp	r2, r3
 8003332:	da08      	bge.n	8003346 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003334:	7efb      	ldrb	r3, [r7, #27]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003340:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003344:	e01c      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003350:	425b      	negs	r3, r3
 8003352:	429a      	cmp	r2, r3
 8003354:	da10      	bge.n	8003378 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003356:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8003360:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003362:	429a      	cmp	r2, r3
 8003364:	dd08      	ble.n	8003378 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003366:	7efb      	ldrb	r3, [r7, #27]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8003372:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003376:	e003      	b.n	8003380 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800337e:	e0ae      	b.n	80034de <SetTargetData+0x736>
 8003380:	e0ad      	b.n	80034de <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8003388:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800338c:	429a      	cmp	r2, r3
 800338e:	dd0f      	ble.n	80033b0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003396:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800339a:	429a      	cmp	r2, r3
 800339c:	da08      	bge.n	80033b0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800339e:	7efb      	ldrb	r3, [r7, #27]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80033aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033ae:	e090      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80033b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80033ba:	425b      	negs	r3, r3
 80033bc:	429a      	cmp	r2, r3
 80033be:	da10      	bge.n	80033e2 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80033c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80033ca:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dd08      	ble.n	80033e2 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80033d0:	7efb      	ldrb	r3, [r7, #27]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80033dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033e0:	e077      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80033e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	dd0f      	ble.n	8003410 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80033f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	da08      	bge.n	8003410 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80033fe:	7efb      	ldrb	r3, [r7, #27]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800340a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800340e:	e060      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800341a:	425b      	negs	r3, r3
 800341c:	429a      	cmp	r2, r3
 800341e:	da10      	bge.n	8003442 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800342a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800342c:	429a      	cmp	r2, r3
 800342e:	dd08      	ble.n	8003442 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003430:	7efb      	ldrb	r3, [r7, #27]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800343c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003440:	e047      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8003448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800344c:	429a      	cmp	r2, r3
 800344e:	da0c      	bge.n	800346a <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800345a:	429a      	cmp	r2, r3
 800345c:	dd05      	ble.n	800346a <SetTargetData+0x6c2>
					AddOffset =
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003464:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003468:	e033      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003474:	429a      	cmp	r2, r3
 8003476:	dd0f      	ble.n	8003498 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800347e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003482:	429a      	cmp	r2, r3
 8003484:	da08      	bge.n	8003498 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003486:	7efb      	ldrb	r3, [r7, #27]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8003492:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003496:	e01c      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80034a2:	425b      	negs	r3, r3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	da10      	bge.n	80034ca <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80034a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80034b2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dd08      	ble.n	80034ca <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80034b8:	7efb      	ldrb	r3, [r7, #27]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80034c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034c8:	e003      	b.n	80034d2 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80034d0:	e005      	b.n	80034de <SetTargetData+0x736>
 80034d2:	e004      	b.n	80034de <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80034da:	e000      	b.n	80034de <SetTargetData+0x736>
			}
		}
 80034dc:	bf00      	nop

		if (uwr_status) {
 80034de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d026      	beq.n	8003534 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80034e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034f2:	4413      	add	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b21a      	sxth	r2, r3
 80034f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fa:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80034fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003502:	b29a      	uxth	r2, r3
 8003504:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003508:	4413      	add	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	b21a      	sxth	r2, r3
 800350e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003510:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003518:	b29a      	uxth	r2, r3
 800351a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800351e:	4413      	add	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	b21a      	sxth	r2, r3
 8003524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003526:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	2201      	movs	r2, #1
 800352c:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800352e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003530:	2200      	movs	r2, #0
 8003532:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003538:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800353c:	330c      	adds	r3, #12
 800353e:	8b39      	ldrh	r1, [r7, #24]
 8003540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003548:	7dd1      	ldrb	r1, [r2, #23]
 800354a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800354c:	4413      	add	r3, r2
 800354e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003552:	3320      	adds	r3, #32
 8003554:	460a      	mov	r2, r1
 8003556:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355c:	7e11      	ldrb	r1, [r2, #24]
 800355e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003560:	4413      	add	r3, r2
 8003562:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	460a      	mov	r2, r1
 800356a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 800356c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003572:	461a      	mov	r2, r3
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 800357a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800357e:	4618      	mov	r0, r3
 8003580:	3748      	adds	r7, #72	; 0x48
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop

08003588 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b091      	sub	sp, #68	; 0x44
 800358c:	af04      	add	r7, sp, #16
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3318      	adds	r3, #24
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	7c9a      	ldrb	r2, [r3, #18]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	789a      	ldrb	r2, [r3, #2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfa8      	it	ge
 80035d6:	4613      	movge	r3, r2
 80035d8:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035de:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	78da      	ldrb	r2, [r3, #3]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035f6:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	7c9b      	ldrb	r3, [r3, #18]
 8003604:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003608:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <SetMeasurementData+0x90>

		iteration = 1;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003616:	e003      	b.n	8003620 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003618:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800361c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003620:	2300      	movs	r3, #0
 8003622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003626:	e048      	b.n	80036ba <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003628:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3308      	adds	r3, #8
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 800363c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003640:	224c      	movs	r2, #76	; 0x4c
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	3310      	adds	r3, #16
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8003650:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003654:	2b00      	cmp	r3, #0
 8003656:	d114      	bne.n	8003682 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7918      	ldrb	r0, [r3, #4]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	7c1b      	ldrb	r3, [r3, #16]
 8003660:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003664:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	9202      	str	r2, [sp, #8]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	9201      	str	r2, [sp, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4623      	mov	r3, r4
 8003674:	4602      	mov	r2, r0
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fb96 	bl	8002da8 <SetTargetData>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	7ddb      	ldrb	r3, [r3, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800369a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800369e:	429a      	cmp	r2, r3
 80036a0:	da06      	bge.n	80036b0 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	8a9b      	ldrh	r3, [r3, #20]
 80036a6:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80036a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80036b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036b4:	3301      	adds	r3, #1
 80036b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3b0      	bcc.n	8003628 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036d2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80036d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036de:	e01f      	b.n	8003720 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80036e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80036ea:	330c      	adds	r3, #12
 80036ec:	2100      	movs	r1, #0
 80036ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80036f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036fe:	3320      	adds	r3, #32
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370a:	4413      	add	r3, r2
 800370c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003710:	3324      	adds	r3, #36	; 0x24
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800371a:	3301      	adds	r3, #1
 800371c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003724:	2b03      	cmp	r3, #3
 8003726:	d9db      	bls.n	80036e0 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003728:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11b      	bne.n	8003768 <SetMeasurementData+0x1e0>
 8003730:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003738:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3308      	adds	r3, #8
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 800374c:	2304      	movs	r3, #4
 800374e:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003750:	7efb      	ldrb	r3, [r7, #27]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	337e      	adds	r3, #126	; 0x7e
 8003760:	69f9      	ldr	r1, [r7, #28]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff f996 	bl	8002a94 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8003768:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 800376c:	4618      	mov	r0, r3
 800376e:	3734      	adds	r7, #52	; 0x34
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}

08003774 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3318      	adds	r3, #24
 8003786:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800378e:	3308      	adds	r3, #8
 8003790:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	21ff      	movs	r1, #255	; 0xff
 8003796:	6838      	ldr	r0, [r7, #0]
 8003798:	f015 fea6 	bl	80194e8 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	2102      	movs	r1, #2
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f002 fc2e 	bl	8006002 <VL53L1_get_device_results>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 80037aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	2b07      	cmp	r3, #7
 80037b8:	d002      	beq.n	80037c0 <VL53L1_GetMultiRangingData+0x4c>
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d004      	beq.n	80037c8 <VL53L1_GetMultiRangingData+0x54>
 80037be:	e007      	b.n	80037d0 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80037c6:	e006      	b.n	80037d6 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2202      	movs	r2, #2
 80037cc:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 80037ce:	e002      	b.n	80037d6 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fed4 	bl	8003588 <SetMeasurementData>
 80037e0:	4603      	mov	r3, r0
 80037e2:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b090      	sub	sp, #64	; 0x40
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80037fe:	f240 3305 	movw	r3, #773	; 0x305
 8003802:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3318      	adds	r3, #24
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	3348      	adds	r3, #72	; 0x48
 800380e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003810:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11c      	bne.n	8003852 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800381e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003826:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8e3 	bl	80039f8 <VL53L1_run_ref_spad_char>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003838:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fb2c 	bl	8001ea4 <VL53L1_SetPresetMode>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003852:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003856:	f113 0f1d 	cmn.w	r3, #29
 800385a:	d14e      	bne.n	80038fa <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	2206      	movs	r2, #6
 8003862:	2128      	movs	r1, #40	; 0x28
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f00e fbf6 	bl	8012056 <VL53L1_read_nvm_raw_data>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003870:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003878:	f107 020c 	add.w	r2, r7, #12
 800387c:	2302      	movs	r3, #2
 800387e:	2114      	movs	r1, #20
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f010 fe5f 	bl	8014544 <VL53L1_WriteMulti>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 800388c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003894:	7b3a      	ldrb	r2, [r7, #12]
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 800389a:	7b7a      	ldrb	r2, [r7, #13]
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	3310      	adds	r3, #16
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 80038a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80038b0:	2306      	movs	r3, #6
 80038b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b4:	210d      	movs	r1, #13
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f010 fe44 	bl	8014544 <VL53L1_WriteMulti>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80038c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d117      	bne.n	80038fa <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	785a      	ldrb	r2, [r3, #1]
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	789a      	ldrb	r2, [r3, #2]
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	78da      	ldrb	r2, [r3, #3]
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	791a      	ldrb	r2, [r3, #4]
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	795a      	ldrb	r2, [r3, #5]
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 80038fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3740      	adds	r7, #64	; 0x40
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003918:	2300      	movs	r3, #0
 800391a:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 800391c:	2300      	movs	r3, #0
 800391e:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003920:	2300      	movs	r3, #0
 8003922:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d84a      	bhi.n	80039c0 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <VL53L1_SmudgeCorrectionEnable+0x28>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003941 	.word	0x08003941
 8003934:	08003961 	.word	0x08003961
 8003938:	08003981 	.word	0x08003981
 800393c:	080039a1 	.word	0x080039a1
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f004 fbee 	bl	8008122 <VL53L1_dynamic_xtalk_correction_disable>
 8003946:	4603      	mov	r3, r0
 8003948:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f004 fc17 	bl	800817e <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003950:	4603      	mov	r3, r0
 8003952:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f004 fc40 	bl	80081da <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800395a:	4603      	mov	r3, r0
 800395c:	733b      	strb	r3, [r7, #12]
		break;
 800395e:	e032      	b.n	80039c6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f004 fbc7 	bl	80080f4 <VL53L1_dynamic_xtalk_correction_enable>
 8003966:	4603      	mov	r3, r0
 8003968:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f004 fbf0 	bl	8008150 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003970:	4603      	mov	r3, r0
 8003972:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f004 fc30 	bl	80081da <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800397a:	4603      	mov	r3, r0
 800397c:	733b      	strb	r3, [r7, #12]
		break;
 800397e:	e022      	b.n	80039c6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f004 fbb7 	bl	80080f4 <VL53L1_dynamic_xtalk_correction_enable>
 8003986:	4603      	mov	r3, r0
 8003988:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f004 fbe0 	bl	8008150 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003990:	4603      	mov	r3, r0
 8003992:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f004 fc09 	bl	80081ac <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 800399a:	4603      	mov	r3, r0
 800399c:	733b      	strb	r3, [r7, #12]
		break;
 800399e:	e012      	b.n	80039c6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f004 fba7 	bl	80080f4 <VL53L1_dynamic_xtalk_correction_enable>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f004 fbe7 	bl	800817e <VL53L1_dynamic_xtalk_correction_apply_disable>
 80039b0:	4603      	mov	r3, r0
 80039b2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f004 fc10 	bl	80081da <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80039ba:	4603      	mov	r3, r0
 80039bc:	733b      	strb	r3, [r7, #12]
		break;
 80039be:	e002      	b.n	80039c6 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80039c0:	23fc      	movs	r3, #252	; 0xfc
 80039c2:	73fb      	strb	r3, [r7, #15]
		break;
 80039c4:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80039ce:	7bbb      	ldrb	r3, [r7, #14]
 80039d0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80039da:	7b7b      	ldrb	r3, [r7, #13]
 80039dc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80039e6:	7b3b      	ldrb	r3, [r7, #12]
 80039e8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop

080039f8 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af04      	add	r7, sp, #16
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003a12:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f007 fc99 	bl	800b354 <VL53L1_enable_powerforce>
 8003a22:	4603      	mov	r3, r0
 8003a24:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d117      	bne.n	8003a5e <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	7858      	ldrb	r0, [r3, #1]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	685c      	ldr	r4, [r3, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	891d      	ldrh	r5, [r3, #8]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	899b      	ldrh	r3, [r3, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	8952      	ldrh	r2, [r2, #10]
 8003a42:	69b9      	ldr	r1, [r7, #24]
 8003a44:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003a48:	9102      	str	r1, [sp, #8]
 8003a4a:	9201      	str	r2, [sp, #4]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	462b      	mov	r3, r5
 8003a50:	4622      	mov	r2, r4
 8003a52:	4601      	mov	r1, r0
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f009 fbda 	bl	800d20e <VL53L1_set_ref_spad_char_config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f891 	bl	8003b94 <VL53L1_run_device_test>
 8003a72:	4603      	mov	r3, r0
 8003a74:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003a7e:	f107 020c 	add.w	r2, r7, #12
 8003a82:	2302      	movs	r3, #2
 8003a84:	21d9      	movs	r1, #217	; 0xd9
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f010 fd92 	bl	80145b0 <VL53L1_ReadMulti>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003a90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003a98:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003aa4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003ab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003ab8:	f107 020c 	add.w	r2, r7, #12
 8003abc:	2302      	movs	r3, #2
 8003abe:	2114      	movs	r1, #20
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f010 fd3f 	bl	8014544 <VL53L1_WriteMulti>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003aca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003ad2:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003ada:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003ae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003aea:	f107 020c 	add.w	r2, r7, #12
 8003aee:	2306      	movs	r3, #6
 8003af0:	21ac      	movs	r1, #172	; 0xac
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f010 fd5c 	bl	80145b0 <VL53L1_ReadMulti>
 8003af8:	4603      	mov	r3, r0
 8003afa:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003afc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003b04:	f107 020c 	add.w	r2, r7, #12
 8003b08:	2306      	movs	r3, #6
 8003b0a:	210d      	movs	r1, #13
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f010 fd19 	bl	8014544 <VL53L1_WriteMulti>
 8003b12:	4603      	mov	r3, r0
 8003b14:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003b16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d117      	bne.n	8003b4e <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003b1e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003b26:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003b2e:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003b3e:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003b46:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003b4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d114      	bne.n	8003b80 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d00c      	beq.n	8003b7a <VL53L1_run_ref_spad_char+0x182>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	dc0e      	bgt.n	8003b82 <VL53L1_run_ref_spad_char+0x18a>
 8003b64:	2b0e      	cmp	r3, #14
 8003b66:	d002      	beq.n	8003b6e <VL53L1_run_ref_spad_char+0x176>
 8003b68:	2b0f      	cmp	r3, #15
 8003b6a:	d003      	beq.n	8003b74 <VL53L1_run_ref_spad_char+0x17c>
 8003b6c:	e009      	b.n	8003b82 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003b6e:	23e4      	movs	r3, #228	; 0xe4
 8003b70:	77fb      	strb	r3, [r7, #31]
			break;
 8003b72:	e006      	b.n	8003b82 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003b74:	23e3      	movs	r3, #227	; 0xe3
 8003b76:	77fb      	strb	r3, [r7, #31]
			break;
 8003b78:	e003      	b.n	8003b82 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003b7a:	23e2      	movs	r3, #226	; 0xe2
 8003b7c:	77fb      	strb	r3, [r7, #31]
			break;
 8003b7e:	e000      	b.n	8003b82 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003b80:	bf00      	nop



	*pcal_status = status;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	7ffa      	ldrb	r2, [r7, #31]
 8003b86:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdb0      	pop	{r4, r5, r7, pc}

08003b94 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d108      	bne.n	8003bc8 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003bb6:	f107 030b 	add.w	r3, r7, #11
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2130      	movs	r1, #48	; 0x30
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f010 fd88 	bl	80146d4 <VL53L1_RdByte>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003bd0:	7afa      	ldrb	r2, [r7, #11]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f007 fb39 	bl	800b25c <VL53L1_start_test>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f00f ff5c 	bl	8013ab4 <VL53L1_wait_for_test_completion>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003c08:	f107 020c 	add.w	r2, r7, #12
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	2189      	movs	r1, #137	; 0x89
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f010 fccd 	bl	80145b0 <VL53L1_ReadMulti>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003c22:	7b3a      	ldrb	r2, [r7, #12]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003c2a:	7b7a      	ldrb	r2, [r7, #13]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f007 fba1 	bl	800b39c <VL53L1_clear_interrupt>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d105      	bne.n	8003c72 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f007 faf7 	bl	800b25c <VL53L1_start_test>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d006      	beq.n	8003ca2 <select_offset_per_vcsel+0x24>
 8003c94:	2b21      	cmp	r3, #33	; 0x21
 8003c96:	dc2b      	bgt.n	8003cf0 <select_offset_per_vcsel+0x72>
 8003c98:	2b1b      	cmp	r3, #27
 8003c9a:	d01c      	beq.n	8003cd6 <select_offset_per_vcsel+0x58>
 8003c9c:	2b1e      	cmp	r3, #30
 8003c9e:	d00d      	beq.n	8003cbc <select_offset_per_vcsel+0x3e>
 8003ca0:	e026      	b.n	8003cf0 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca8:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003cac:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb4:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003cb8:	817b      	strh	r3, [r7, #10]
		break;
 8003cba:	e02b      	b.n	8003d14 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003cc6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003cd2:	817b      	strh	r3, [r7, #10]
		break;
 8003cd4:	e01e      	b.n	8003d14 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003ce0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce8:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003cec:	817b      	strh	r3, [r7, #10]
		break;
 8003cee:	e011      	b.n	8003d14 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf6:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003cfa:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d02:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003d06:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003d08:	23fc      	movs	r3, #252	; 0xfc
 8003d0a:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	801a      	strh	r2, [r3, #0]
		break;
 8003d12:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d1a:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8003d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003d24:	7a7b      	ldrb	r3, [r7, #9]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <select_offset_per_vcsel+0xb6>
 8003d2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d32:	e001      	b.n	8003d38 <select_offset_per_vcsel+0xba>
 8003d34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	8013      	strh	r3, [r2, #0]

	return status;
 8003d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003d4c:	b490      	push	{r4, r7}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	71fb      	strb	r3, [r7, #7]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d7e:	e021      	b.n	8003dc4 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003d80:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	0052      	lsls	r2, r2, #1
 8003d8e:	441a      	add	r2, r3
 8003d90:	00d3      	lsls	r3, r2, #3
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	440b      	add	r3, r1
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4423      	add	r3, r4
 8003da0:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003da4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	4413      	add	r3, r2
 8003dac:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003dae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3206      	adds	r2, #6
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003dbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dc4:	79bb      	ldrb	r3, [r7, #6]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3d8      	bcc.n	8003d80 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d047      	beq.n	8003e64 <vl53l1_diff_histo_stddev+0x118>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d044      	beq.n	8003e64 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003de2:	e03a      	b.n	8003e5a <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003de4:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	0052      	lsls	r2, r2, #1
 8003df2:	441a      	add	r2, r3
 8003df4:	00d3      	lsls	r3, r2, #3
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4413      	add	r3, r2
 8003e02:	4423      	add	r3, r4
 8003e04:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003e08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e0c:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e14:	fb03 f202 	mul.w	r2, r3, r2
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e1e:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003e20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3206      	adds	r2, #6
 8003e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e2e:	fb03 f202 	mul.w	r2, r3, r2
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003e44:	69b8      	ldr	r0, [r7, #24]
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	441a      	add	r2, r3
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003e54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e56:	3301      	adds	r3, #1
 8003e58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e5a:	79bb      	ldrb	r3, [r7, #6]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3bf      	bcc.n	8003de4 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003e64:	bf00      	nop
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc90      	pop	{r4, r7}
 8003e6c:	4770      	bx	lr

08003e6e <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003e6e:	b5b0      	push	{r4, r5, r7, lr}
 8003e70:	b08c      	sub	sp, #48	; 0x30
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8003e9e:	2318      	movs	r3, #24
 8003ea0:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f248 018f 	movw	r1, #32911	; 0x808f
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f003 f9fb 	bl	80072a8 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f248 018e 	movw	r1, #32910	; 0x808e
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f003 f9f3 	bl	80072a8 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 811b 	bne.w	8004108 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003eec:	7efb      	ldrb	r3, [r7, #27]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	7eba      	ldrb	r2, [r7, #26]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efe:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e004      	b.n	8003f22 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003f22:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003f26:	7efb      	ldrb	r3, [r7, #27]
 8003f28:	69f8      	ldr	r0, [r7, #28]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	0052      	lsls	r2, r2, #1
 8003f2e:	441a      	add	r2, r3
 8003f30:	0153      	lsls	r3, r2, #5
 8003f32:	461a      	mov	r2, r3
 8003f34:	460b      	mov	r3, r1
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	440b      	add	r3, r1
 8003f3a:	019b      	lsls	r3, r3, #6
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4403      	add	r3, r0
 8003f40:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8003f44:	3308      	adds	r3, #8
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dd0c      	ble.n	8003f66 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8003f4c:	7e79      	ldrb	r1, [r7, #25]
 8003f4e:	7efa      	ldrb	r2, [r7, #27]
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	69f8      	ldr	r0, [r7, #28]
 8003f62:	f7ff fef3 	bl	8003d4c <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	db23      	blt.n	8003fb6 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003f74:	3318      	adds	r3, #24
 8003f76:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f015 fab3 	bl	80194e8 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003f94:	7efb      	ldrb	r3, [r7, #27]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003fa6:	e034      	b.n	8004012 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	2207      	movs	r2, #7
 8003fb0:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003fb4:	e02d      	b.n	8004012 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003fc0:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003fc8:	e01e      	b.n	8004008 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003fca:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003fce:	7e39      	ldrb	r1, [r7, #24]
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	3006      	adds	r0, #6
 8003fda:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003fde:	69f8      	ldr	r0, [r7, #28]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	0052      	lsls	r2, r2, #1
 8003fe4:	441a      	add	r2, r3
 8003fe6:	00d3      	lsls	r3, r2, #3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	460b      	mov	r3, r1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	442b      	add	r3, r5
 8003ff6:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003ffa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003ffe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004002:	3301      	adds	r3, #1
 8004004:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004008:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800400c:	7ebb      	ldrb	r3, [r7, #26]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3db      	bcc.n	8003fca <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004018:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800401c:	461a      	mov	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3b01      	subs	r3, #1
 8004022:	429a      	cmp	r2, r3
 8004024:	d109      	bne.n	800403a <vl53l1_histo_merge+0x1cc>
 8004026:	7efb      	ldrb	r3, [r7, #27]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8004038:	e00e      	b.n	8004058 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 800403a:	7efb      	ldrb	r3, [r7, #27]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10b      	bne.n	8004058 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004046:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800404a:	3301      	adds	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004054:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d102      	bne.n	8004066 <vl53l1_histo_merge+0x1f8>
 8004060:	7efb      	ldrb	r3, [r7, #27]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d069      	beq.n	800413a <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d162      	bne.n	800413a <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8004074:	2300      	movs	r3, #0
 8004076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004078:	e008      	b.n	800408c <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 800407a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	3206      	adds	r2, #6
 8004080:	2100      	movs	r1, #0
 8004082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004086:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004088:	3301      	adds	r3, #1
 800408a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800408c:	7ebb      	ldrb	r3, [r7, #26]
 800408e:	b29b      	uxth	r3, r3
 8004090:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004092:	429a      	cmp	r2, r3
 8004094:	d3f1      	bcc.n	800407a <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8004096:	2300      	movs	r3, #0
 8004098:	84fb      	strh	r3, [r7, #38]	; 0x26
 800409a:	e02f      	b.n	80040fc <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040a2:	e023      	b.n	80040ec <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 80040a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	3206      	adds	r2, #6
 80040aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80040ae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80040b2:	7efb      	ldrb	r3, [r7, #27]
 80040b4:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80040b6:	69fc      	ldr	r4, [r7, #28]
 80040b8:	461a      	mov	r2, r3
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	441a      	add	r2, r3
 80040be:	00d3      	lsls	r3, r2, #3
 80040c0:	461a      	mov	r2, r3
 80040c2:	460b      	mov	r3, r1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	440b      	add	r3, r1
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	442b      	add	r3, r5
 80040ce:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80040d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80040d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040d8:	18c1      	adds	r1, r0, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3206      	adds	r2, #6
 80040de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80040e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040e6:	3301      	adds	r3, #1
 80040e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040ec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	dbd6      	blt.n	80040a4 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 80040f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040f8:	3301      	adds	r3, #1
 80040fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040fc:	7ebb      	ldrb	r3, [r7, #26]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004102:	429a      	cmp	r2, r3
 8004104:	d3ca      	bcc.n	800409c <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004106:	e018      	b.n	800413a <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410e:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004112:	3b01      	subs	r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d105      	bne.n	800413a <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 800413a:	bf00      	nop
 800413c:	3728      	adds	r7, #40	; 0x28
 800413e:	46bd      	mov	sp, r7
 8004140:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004144 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b0c6      	sub	sp, #280	; 0x118
 8004148:	af00      	add	r7, sp, #0
 800414a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800414e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004152:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004160:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8004168:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800416c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004170:	2200      	movs	r2, #0
 8004172:	2185      	movs	r1, #133	; 0x85
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	f010 fa51 	bl	801461c <VL53L1_WrByte>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004180:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8004188:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800418c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f007 f8df 	bl	800b354 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004196:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800419a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800419e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80041a2:	f248 018c 	movw	r1, #32908	; 0x808c
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	f003 f87e 	bl	80072a8 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d81b      	bhi.n	80041ec <VL53L1_load_patch+0xa8>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <VL53L1_load_patch+0x78>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041dd 	.word	0x080041dd
 80041c8:	080041e5 	.word	0x080041e5
	case 0:
		patch_power = 0x00;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041d2:	e00e      	b.n	80041f2 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80041d4:	2310      	movs	r3, #16
 80041d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041da:	e00a      	b.n	80041f2 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80041dc:	2320      	movs	r3, #32
 80041de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041e2:	e006      	b.n	80041f2 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80041ea:	e002      	b.n	80041f2 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 80041f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d134      	bne.n	8004264 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80041fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004202:	2229      	movs	r2, #41	; 0x29
 8004204:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004206:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800420a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800420e:	22c9      	movs	r2, #201	; 0xc9
 8004210:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004212:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004216:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800421a:	220e      	movs	r2, #14
 800421c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800421e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800422a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800422e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004232:	2228      	movs	r2, #40	; 0x28
 8004234:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800423a:	b2da      	uxtb	r2, r3
 800423c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004244:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8004246:	f107 020c 	add.w	r2, r7, #12
 800424a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800424e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004252:	2306      	movs	r3, #6
 8004254:	f240 4176 	movw	r1, #1142	; 0x476
 8004258:	6800      	ldr	r0, [r0, #0]
 800425a:	f010 f973 	bl	8014544 <VL53L1_WriteMulti>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004264:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004268:	2b00      	cmp	r3, #0
 800426a:	d132      	bne.n	80042d2 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 800426c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004274:	2203      	movs	r2, #3
 8004276:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800427c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004280:	226d      	movs	r2, #109	; 0x6d
 8004282:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004284:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800428c:	2203      	movs	r2, #3
 800428e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004290:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004298:	226f      	movs	r2, #111	; 0x6f
 800429a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800429c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042a4:	2207      	movs	r2, #7
 80042a6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80042a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042b0:	2229      	movs	r2, #41	; 0x29
 80042b2:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80042b4:	f107 020c 	add.w	r2, r7, #12
 80042b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042bc:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80042c0:	2306      	movs	r3, #6
 80042c2:	f240 4196 	movw	r1, #1174	; 0x496
 80042c6:	6800      	ldr	r0, [r0, #0]
 80042c8:	f010 f93c 	bl	8014544 <VL53L1_WriteMulti>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80042d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11a      	bne.n	8004310 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80042da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80042e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ee:	2207      	movs	r2, #7
 80042f0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80042f2:	f107 020c 	add.w	r2, r7, #12
 80042f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042fa:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80042fe:	2302      	movs	r3, #2
 8004300:	f240 4172 	movw	r1, #1138	; 0x472
 8004304:	6800      	ldr	r0, [r0, #0]
 8004306:	f010 f91d 	bl	8014544 <VL53L1_WriteMulti>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004310:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11a      	bne.n	800434e <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004318:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800431c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004324:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004328:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800432c:	2207      	movs	r2, #7
 800432e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8004330:	f107 020c 	add.w	r2, r7, #12
 8004334:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004338:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800433c:	2302      	movs	r3, #2
 800433e:	f240 4174 	movw	r1, #1140	; 0x474
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	f010 f8fe 	bl	8014544 <VL53L1_WriteMulti>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 800434e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10c      	bne.n	8004370 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8004356:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800435a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800435e:	2201      	movs	r2, #1
 8004360:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f010 f959 	bl	801461c <VL53L1_WrByte>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8004370:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8004378:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800437c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004380:	2201      	movs	r2, #1
 8004382:	2185      	movs	r1, #133	; 0x85
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f010 f949 	bl	801461c <VL53L1_WrByte>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004390:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004394:	4618      	mov	r0, r3
 8004396:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop

080043a0 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80043b4:	2200      	movs	r2, #0
 80043b6:	2185      	movs	r1, #133	; 0x85
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f010 f92f 	bl	801461c <VL53L1_WrByte>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f006 ffd4 	bl	800b378 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80043d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f010 f91c 	bl	801461c <VL53L1_WrByte>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80043e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 80043f0:	2201      	movs	r2, #1
 80043f2:	2185      	movs	r1, #133	; 0x85
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f010 f911 	bl	801461c <VL53L1_WrByte>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800440a:	b5b0      	push	{r4, r5, r7, lr}
 800440c:	b08a      	sub	sp, #40	; 0x28
 800440e:	af04      	add	r7, sp, #16
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3318      	adds	r3, #24
 800441e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004426:	3308      	adds	r3, #8
 8004428:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800442e:	2162      	movs	r1, #98	; 0x62
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f006 f810 	bl	800a456 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2204      	movs	r2, #4
 800443a:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2210      	movs	r2, #16
 8004446:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004452:	2300      	movs	r3, #0
 8004454:	75bb      	strb	r3, [r7, #22]
 8004456:	e01b      	b.n	8004490 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8004458:	7dba      	ldrb	r2, [r7, #22]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	3308      	adds	r3, #8
 800446c:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800448a:	7dbb      	ldrb	r3, [r7, #22]
 800448c:	3301      	adds	r3, #1
 800448e:	75bb      	strb	r3, [r7, #22]
 8004490:	7dbb      	ldrb	r3, [r7, #22]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d9e0      	bls.n	8004458 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2210      	movs	r2, #16
 800449a:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2210      	movs	r2, #16
 80044aa:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	75bb      	strb	r3, [r7, #22]
 80044ba:	e039      	b.n	8004530 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80044bc:	7dba      	ldrb	r2, [r7, #22]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80044d2:	7dba      	ldrb	r2, [r7, #22]
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80044e8:	7dba      	ldrb	r2, [r7, #22]
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 80044fe:	7dba      	ldrb	r2, [r7, #22]
 8004500:	68f9      	ldr	r1, [r7, #12]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004514:	7dba      	ldrb	r2, [r7, #22]
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800452a:	7dbb      	ldrb	r3, [r7, #22]
 800452c:	3301      	adds	r3, #1
 800452e:	75bb      	strb	r3, [r7, #22]
 8004530:	7dbb      	ldrb	r3, [r7, #22]
 8004532:	2b0f      	cmp	r3, #15
 8004534:	d9c2      	bls.n	80044bc <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2201      	movs	r2, #1
 8004540:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2200      	movs	r2, #0
 8004546:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2200      	movs	r2, #0
 800454c:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2201      	movs	r2, #1
 8004552:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2201      	movs	r2, #1
 8004558:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2201      	movs	r2, #1
 800455e:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004566:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800456e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004576:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2264      	movs	r2, #100	; 0x64
 800457c:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004584:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f240 72db 	movw	r2, #2011	; 0x7db
 80045ac:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80045b6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f005 ff2e 	bl	800a41c <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80045c6:	3318      	adds	r3, #24
 80045c8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f014 ff8a 	bl	80194e8 <memset>
	pdev->bin_rec_pos = 0;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <VL53L1_data_init+0x1fa>
 80045f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8b8 	bl	8004770 <VL53L1_read_p2p_data>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d107      	bne.n	800461c <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004612:	4618      	mov	r0, r3
 8004614:	f003 fdf8 	bl	8008208 <VL53L1_init_refspadchar_config_struct>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 800461c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fe10 	bl	8008250 <VL53L1_init_ssc_config_struct>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f003 fe21 	bl	8008292 <VL53L1_init_xtalk_config_struct>
 8004650:	4603      	mov	r3, r0
 8004652:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004662:	4618      	mov	r0, r3
 8004664:	f003 fe89 	bl	800837a <VL53L1_init_xtalk_extract_config_struct>
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 800466c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800467a:	4618      	mov	r0, r3
 800467c:	f003 feac 	bl	80083d8 <VL53L1_init_offset_cal_config_struct>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004692:	4618      	mov	r0, r3
 8004694:	f003 fec7 	bl	8008426 <VL53L1_init_zone_cal_config_struct>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 800469c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f003 fedb 	bl	800846e <VL53L1_init_hist_post_process_config_struct>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80046bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 f8f6 	bl	80088bc <VL53L1_init_hist_gen3_dmax_config_struct>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80046d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 ff32 	bl	800854c <VL53L1_init_tuning_parm_storage_struct>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80046ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d116      	bne.n	8004722 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	7858      	ldrb	r0, [r3, #1]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	8b1c      	ldrh	r4, [r3, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	689d      	ldr	r5, [r3, #8]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	6912      	ldr	r2, [r2, #16]
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	6949      	ldr	r1, [r1, #20]
 800470c:	9102      	str	r1, [sp, #8]
 800470e:	9201      	str	r2, [sp, #4]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	462b      	mov	r3, r5
 8004714:	4622      	mov	r2, r4
 8004716:	4601      	mov	r1, r0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fc8f 	bl	800503c <VL53L1_set_preset_mode>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004728:	461a      	mov	r2, r3
 800472a:	2118      	movs	r1, #24
 800472c:	2000      	movs	r0, #0
 800472e:	f00a fa90 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004738:	461a      	mov	r2, r3
 800473a:	2118      	movs	r1, #24
 800473c:	2000      	movs	r0, #0
 800473e:	f00a fa88 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004748:	461a      	mov	r2, r3
 800474a:	210c      	movs	r1, #12
 800474c:	2000      	movs	r0, #0
 800474e:	f006 fc26 	bl	800af9e <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f009 fcd2 	bl	800e0fc <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f009 fbd1 	bl	800df00 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f009 fcf7 	bl	800e152 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004764:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bdb0      	pop	{r4, r5, r7, pc}

08004770 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b091      	sub	sp, #68	; 0x44
 8004774:	af04      	add	r7, sp, #16
 8004776:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004778:	2300      	movs	r3, #0
 800477a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3318      	adds	r3, #24
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	3348      	adds	r3, #72	; 0x48
 8004790:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	339c      	adds	r3, #156	; 0x9c
 8004796:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004798:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f00d fdd1 	bl	8012350 <VL53L1_get_static_nvm_managed>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80047b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	3348      	adds	r3, #72	; 0x48
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f00d ff02 	bl	80125cc <VL53L1_get_customer_nvm_managed>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80047ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d117      	bne.n	8004806 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f00e fdda 	bl	8013398 <VL53L1_get_nvm_copy_data>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 80047ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f006 f921 	bl	800aa48 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004806:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10e      	bne.n	800482c <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	895b      	ldrh	r3, [r3, #10]
 8004812:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 800482c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	33c0      	adds	r3, #192	; 0xc0
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f00d fc3c 	bl	80120b8 <VL53L1_read_nvm_optical_centre>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004846:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	3360      	adds	r3, #96	; 0x60
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f00d fc52 	bl	80120fe <VL53L1_read_nvm_cal_peak_rate_map>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004864:	2b00      	cmp	r3, #0
 8004866:	d12d      	bne.n	80048c4 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	339c      	adds	r3, #156	; 0x9c
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f00d fc6b 	bl	801214a <VL53L1_read_nvm_additional_offset_cal_data>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	889b      	ldrh	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d120      	bne.n	80048c4 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11c      	bne.n	80048c4 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004896:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	69f9      	ldr	r1, [r7, #28]
 80048ae:	3102      	adds	r1, #2
 80048b0:	9103      	str	r1, [sp, #12]
 80048b2:	9202      	str	r2, [sp, #8]
 80048b4:	2238      	movs	r2, #56	; 0x38
 80048b6:	9201      	str	r2, [sp, #4]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	23ff      	movs	r3, #255	; 0xff
 80048bc:	22c7      	movs	r2, #199	; 0xc7
 80048be:	4621      	mov	r1, r4
 80048c0:	f008 f934 	bl	800cb2c <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80048c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d12f      	bne.n	800492c <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 80048cc:	f107 030c 	add.w	r3, r7, #12
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f00d fc5a 	bl	8012190 <VL53L1_read_nvm_fmt_range_results_data>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 80048e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d120      	bne.n	800492c <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80048ea:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80048f2:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80048fa:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004908:	2b00      	cmp	r3, #0
 800490a:	d006      	beq.n	800491a <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004918:	e003      	b.n	8004922 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	2214      	movs	r2, #20
 800491e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004928:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 800492c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800493a:	3308      	adds	r3, #8
 800493c:	461a      	mov	r2, r3
 800493e:	21de      	movs	r1, #222	; 0xde
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f00f fefb 	bl	801473c <VL53L1_RdWord>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d204      	bcs.n	8004962 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800495e:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	33bc      	adds	r3, #188	; 0xbc
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f97d 	bl	8004c70 <VL53L1_get_mode_mitigation_roi>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d114      	bne.n	80049b0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80049b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3734      	adds	r7, #52	; 0x34
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3318      	adds	r3, #24
 80049ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d6:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80049de:	23f1      	movs	r3, #241	; 0xf1
 80049e0:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10e      	bne.n	8004a08 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f6:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80049fa:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a32:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004a3a:	23f1      	movs	r3, #241	; 0xf1
 8004a3c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a52:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004a56:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b088      	sub	sp, #32
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3318      	adds	r3, #24
 8004a84:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004a90:	23f1      	movs	r3, #241	; 0xf1
 8004a92:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11b      	bne.n	8004ad4 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004ac0:	9201      	str	r2, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	68b8      	ldr	r0, [r7, #8]
 8004acc:	f006 fe0b 	bl	800b6e6 <VL53L1_calc_timeout_register_values>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3318      	adds	r3, #24
 8004af6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b0a:	23f1      	movs	r3, #241	; 0xf1
 8004b0c:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d14a      	bne.n	8004bac <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f006 fc56 	bl	800b3d6 <VL53L1_calc_macro_period_us>
 8004b2a:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f006 fd14 	bl	800b562 <VL53L1_calc_timeout_us>
 8004b3a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004b46:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004b54:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004b56:	4413      	add	r3, r2
 8004b58:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004b5a:	8a7b      	ldrh	r3, [r7, #18]
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f006 fd66 	bl	800b630 <VL53L1_calc_decoded_timeout_us>
 8004b64:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004b70:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004b72:	8a7b      	ldrh	r3, [r7, #18]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004b7e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004b80:	4413      	add	r3, r2
 8004b82:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004b84:	8a7b      	ldrh	r3, [r7, #18]
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f006 fd51 	bl	800b630 <VL53L1_calc_decoded_timeout_us>
 8004b8e:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3318      	adds	r3, #24
 8004bce:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	d81c      	bhi.n	8004c14 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	2201      	movs	r2, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004bf0:	7dbb      	ldrb	r3, [r7, #22]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	7afb      	ldrb	r3, [r7, #11]
 8004c08:	fa42 f303 	asr.w	r3, r2, r3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e001      	b.n	8004c18 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004c14:	23fc      	movs	r3, #252	; 0xfc
 8004c16:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7858      	ldrb	r0, [r3, #1]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	7819      	ldrb	r1, [r3, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f007 fdeb 	bl	800c826 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	7898      	ldrb	r0, [r3, #2]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	78d9      	ldrb	r1, [r3, #3]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f007 fe20 	bl	800c8a4 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3318      	adds	r3, #24
 8004c82:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c96:	f107 020e 	add.w	r2, r7, #14
 8004c9a:	f107 010d 	add.w	r1, r7, #13
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f00a f880 	bl	800eda4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004ca4:	7bba      	ldrb	r2, [r7, #14]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004caa:	7b7a      	ldrb	r2, [r7, #13]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004cb6:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3318      	adds	r3, #24
 8004cec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	331c      	adds	r3, #28
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f014 fbe6 	bl	80194cc <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	785a      	ldrb	r2, [r3, #1]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	33c2      	adds	r3, #194	; 0xc2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f00f fbce 	bl	80144ba <VL53L1_init_zone_config_histogram_bins>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004d32:	e00f      	b.n	8004d54 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d807      	bhi.n	8004d4c <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004d4a:	e003      	b.n	8004d54 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2211      	movs	r2, #17
 8004d50:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004d54:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3318      	adds	r3, #24
 8004d72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	33c2      	adds	r3, #194	; 0xc2
 8004d78:	226c      	movs	r2, #108	; 0x6c
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f014 fba5 	bl	80194cc <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3318      	adds	r3, #24
 8004da8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004daa:	7afb      	ldrb	r3, [r7, #11]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	2b26      	cmp	r3, #38	; 0x26
 8004db0:	f200 8139 	bhi.w	8005026 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e59 	.word	0x08004e59
 8004dc4:	08004e59 	.word	0x08004e59
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e59 	.word	0x08004e59
 8004dd0:	08004e83 	.word	0x08004e83
 8004dd4:	08004e83 	.word	0x08004e83
 8004dd8:	08004e83 	.word	0x08004e83
 8004ddc:	08005027 	.word	0x08005027
 8004de0:	08005027 	.word	0x08005027
 8004de4:	08004ed7 	.word	0x08004ed7
 8004de8:	08004f7f 	.word	0x08004f7f
 8004dec:	08004ed7 	.word	0x08004ed7
 8004df0:	08005027 	.word	0x08005027
 8004df4:	08005027 	.word	0x08005027
 8004df8:	08005027 	.word	0x08005027
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004e83 	.word	0x08004e83
 8004e04:	08004ed7 	.word	0x08004ed7
 8004e08:	08004ed7 	.word	0x08004ed7
 8004e0c:	08004ed7 	.word	0x08004ed7
 8004e10:	08004ed7 	.word	0x08004ed7
 8004e14:	08004ed7 	.word	0x08004ed7
 8004e18:	08004f01 	.word	0x08004f01
 8004e1c:	08004f2b 	.word	0x08004f2b
 8004e20:	08004f55 	.word	0x08004f55
 8004e24:	08004ed7 	.word	0x08004ed7
 8004e28:	08004ed7 	.word	0x08004ed7
 8004e2c:	08004ed7 	.word	0x08004ed7
 8004e30:	08004fa9 	.word	0x08004fa9
 8004e34:	08004fa9 	.word	0x08004fa9
 8004e38:	08004fa9 	.word	0x08004fa9
 8004e3c:	08004fd3 	.word	0x08004fd3
 8004e40:	08004fd3 	.word	0x08004fd3
 8004e44:	08004fd3 	.word	0x08004fd3
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004ead 	.word	0x08004ead
 8004e54:	08004ffd 	.word	0x08004ffd
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	601a      	str	r2, [r3, #0]
	break;
 8004e80:	e0d4      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	601a      	str	r2, [r3, #0]
	break;
 8004eaa:	e0bf      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	601a      	str	r2, [r3, #0]
	break;
 8004ed4:	e0aa      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	601a      	str	r2, [r3, #0]

	break;
 8004efe:	e095      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	601a      	str	r2, [r3, #0]
	break;
 8004f28:	e080      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	601a      	str	r2, [r3, #0]
	break;
 8004f52:	e06b      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	601a      	str	r2, [r3, #0]
	break;
 8004f7c:	e056      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	601a      	str	r2, [r3, #0]
	break;
 8004fa6:	e041      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	601a      	str	r2, [r3, #0]
	break;
 8004fd0:	e02c      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	601a      	str	r2, [r3, #0]
	break;
 8004ffa:	e017      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	601a      	str	r2, [r3, #0]
	break;
 8005024:	e002      	b.n	800502c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005026:	23fc      	movs	r3, #252	; 0xfc
 8005028:	75fb      	strb	r3, [r7, #23]
		break;
 800502a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800502c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b098      	sub	sp, #96	; 0x60
 8005040:	af06      	add	r7, sp, #24
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	72fb      	strb	r3, [r7, #11]
 800504a:	4613      	mov	r3, r2
 800504c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3318      	adds	r3, #24
 8005058:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005060:	3308      	adds	r3, #8
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005066:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800506c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506e:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800507a:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507e:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800508c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800509a:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	33c2      	adds	r3, #194	; 0xc2
 80050a0:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80050a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80050a8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80050aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ac:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80050b0:	3318      	adds	r3, #24
 80050b2:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	7afa      	ldrb	r2, [r7, #11]
 80050b8:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050be:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050c4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80050c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ca:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80050cc:	2103      	movs	r1, #3
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f005 f9c1 	bl	800a456 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80050d4:	7afb      	ldrb	r3, [r7, #11]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2b26      	cmp	r3, #38	; 0x26
 80050da:	f200 8321 	bhi.w	8005720 <VL53L1_set_preset_mode+0x6e4>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <VL53L1_set_preset_mode+0xa8>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005181 	.word	0x08005181
 80050e8:	080051a5 	.word	0x080051a5
 80050ec:	080051c9 	.word	0x080051c9
 80050f0:	080051ed 	.word	0x080051ed
 80050f4:	08005211 	.word	0x08005211
 80050f8:	08005235 	.word	0x08005235
 80050fc:	08005259 	.word	0x08005259
 8005100:	0800527d 	.word	0x0800527d
 8005104:	08005721 	.word	0x08005721
 8005108:	08005721 	.word	0x08005721
 800510c:	080052a1 	.word	0x080052a1
 8005110:	08005409 	.word	0x08005409
 8005114:	08005599 	.word	0x08005599
 8005118:	080055c1 	.word	0x080055c1
 800511c:	080055e9 	.word	0x080055e9
 8005120:	08005611 	.word	0x08005611
 8005124:	08005639 	.word	0x08005639
 8005128:	0800565d 	.word	0x0800565d
 800512c:	080053e1 	.word	0x080053e1
 8005130:	080052c9 	.word	0x080052c9
 8005134:	080052f1 	.word	0x080052f1
 8005138:	08005319 	.word	0x08005319
 800513c:	08005341 	.word	0x08005341
 8005140:	08005369 	.word	0x08005369
 8005144:	08005391 	.word	0x08005391
 8005148:	080053b9 	.word	0x080053b9
 800514c:	08005431 	.word	0x08005431
 8005150:	08005459 	.word	0x08005459
 8005154:	08005481 	.word	0x08005481
 8005158:	080054a9 	.word	0x080054a9
 800515c:	080054d1 	.word	0x080054d1
 8005160:	080054f9 	.word	0x080054f9
 8005164:	08005521 	.word	0x08005521
 8005168:	08005549 	.word	0x08005549
 800516c:	08005571 	.word	0x08005571
 8005170:	08005681 	.word	0x08005681
 8005174:	080056a9 	.word	0x080056a9
 8005178:	080056d1 	.word	0x080056d1
 800517c:	080056f9 	.word	0x080056f9

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005198:	f003 fbc6 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051a2:	e2c1      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	9303      	str	r3, [sp, #12]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	9302      	str	r3, [sp, #8]
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051bc:	f003 fd2d 	bl	8008c1a <VL53L1_preset_mode_standard_ranging_short_range>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051c6:	e2af      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	9303      	str	r3, [sp, #12]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	9302      	str	r3, [sp, #8]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051e0:	f003 fd60 	bl	8008ca4 <VL53L1_preset_mode_standard_ranging_long_range>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051ea:	e29d      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005202:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005204:	f003 fd93 	bl	8008d2e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800520e:	e28b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005228:	f003 fdaa 	bl	8008d80 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005232:	e279      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	9302      	str	r3, [sp, #8]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800524a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800524c:	f003 fdc1 	bl	8008dd2 <VL53L1_preset_mode_timed_ranging>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005256:	e267      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	9302      	str	r3, [sp, #8]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800526e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005270:	f003 fded 	bl	8008e4e <VL53L1_preset_mode_timed_ranging_short_range>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800527a:	e255      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	9302      	str	r3, [sp, #8]
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005294:	f003 fe19 	bl	8008eca <VL53L1_preset_mode_timed_ranging_long_range>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800529e:	e243      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052bc:	f003 fefb 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052c6:	e22f      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	9303      	str	r3, [sp, #12]
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	9302      	str	r3, [sp, #8]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052e4:	f003 ff7c 	bl	80091e0 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052ee:	e21b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800530a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800530c:	f003 ffcc 	bl	80092a8 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005316:	e207      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	9302      	str	r3, [sp, #8]
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005332:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005334:	f003 ffe0 	bl	80092f8 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800533e:	e1f3      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005358:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800535a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800535c:	f004 f830 	bl	80093c0 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005366:	e1df      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005384:	f004 fe25 	bl	8009fd2 <VL53L1_preset_mode_histogram_multizone>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800538e:	e1cb      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	9303      	str	r3, [sp, #12]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	9302      	str	r3, [sp, #8]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053ac:	f004 fe63 	bl	800a076 <VL53L1_preset_mode_histogram_multizone_short_range>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053b6:	e1b7      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	9304      	str	r3, [sp, #16]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	9302      	str	r3, [sp, #8]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053d4:	f004 fea1 	bl	800a11a <VL53L1_preset_mode_histogram_multizone_long_range>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053de:	e1a3      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053fc:	f004 ffde 	bl	800a3bc <VL53L1_preset_mode_histogram_ranging_ref>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005406:	e18f      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	9303      	str	r3, [sp, #12]
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	9302      	str	r3, [sp, #8]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005422:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005424:	f003 fff4 	bl	8009410 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800542e:	e17b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800544a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800544c:	f004 f86c 	bl	8009528 <VL53L1_preset_mode_histogram_long_range>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005456:	e167      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005470:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005474:	f004 f8f6 	bl	8009664 <VL53L1_preset_mode_histogram_long_range_mm1>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800547e:	e153      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005498:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800549a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800549c:	f004 f943 	bl	8009726 <VL53L1_preset_mode_histogram_long_range_mm2>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054a6:	e13f      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	9304      	str	r3, [sp, #16]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054c4:	f004 f957 	bl	8009776 <VL53L1_preset_mode_histogram_medium_range>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054ce:	e12b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ec:	f004 f9e1 	bl	80098b2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054f6:	e117      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005510:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005514:	f004 fa2e 	bl	8009974 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800551e:	e103      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	9303      	str	r3, [sp, #12]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	9302      	str	r3, [sp, #8]
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800553a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800553c:	f004 fa42 	bl	80099c4 <VL53L1_preset_mode_histogram_short_range>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005546:	e0ef      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	9303      	str	r3, [sp, #12]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005564:	f004 fb4c 	bl	8009c00 <VL53L1_preset_mode_histogram_short_range_mm1>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800556e:	e0db      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800558a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800558c:	f004 fb99 	bl	8009cc2 <VL53L1_preset_mode_histogram_short_range_mm2>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005596:	e0c7      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055b4:	f004 fbad 	bl	8009d12 <VL53L1_preset_mode_histogram_characterisation>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055be:	e0b3      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	9302      	str	r3, [sp, #8]
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055dc:	f004 fbca 	bl	8009d74 <VL53L1_preset_mode_histogram_xtalk_planar>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055e6:	e09f      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	9303      	str	r3, [sp, #12]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	9302      	str	r3, [sp, #8]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005600:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005604:	f004 fc2d 	bl	8009e62 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800560e:	e08b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	9304      	str	r3, [sp, #16]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	9303      	str	r3, [sp, #12]
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	9302      	str	r3, [sp, #8]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005628:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800562a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800562c:	f004 fcad 	bl	8009f8a <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005636:	e077      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	9302      	str	r3, [sp, #8]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800564c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800564e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005650:	f004 fdb5 	bl	800a1be <VL53L1_preset_mode_olt>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800565a:	e065      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	9302      	str	r3, [sp, #8]
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005674:	f003 fce5 	bl	8009042 <VL53L1_preset_mode_singleshot_ranging>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800567e:	e053      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800569a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800569c:	f003 fc7d 	bl	8008f9a <VL53L1_preset_mode_low_power_auto_short_ranging>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80056a6:	e03f      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	9304      	str	r3, [sp, #16]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056c4:	f003 fc3f 	bl	8008f46 <VL53L1_preset_mode_low_power_auto_ranging>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80056ce:	e02b      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056ec:	f003 fc7f 	bl	8008fee <VL53L1_preset_mode_low_power_auto_long_ranging>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80056f6:	e017      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9304      	str	r3, [sp, #16]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005714:	f004 f9f4 	bl	8009b00 <VL53L1_preset_mode_special_histogram_short_range>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800571e:	e003      	b.n	8005728 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005720:	23fc      	movs	r3, #252	; 0xfc
 8005722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005726:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005728:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	893a      	ldrh	r2, [r7, #8]
 8005734:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 800573c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7ff f98f 	bl	8004a6e <VL53L1_set_timeouts_us>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005756:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800575e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff f92b 	bl	80049bc <VL53L1_set_inter_measurement_period_ms>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800576c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005772:	3301      	adds	r3, #1
 8005774:	b2da      	uxtb	r2, r3
 8005776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005778:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f005 fa82 	bl	800ac88 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005784:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005788:	4618      	mov	r0, r3
 800578a:	3748      	adds	r7, #72	; 0x48
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3318      	adds	r3, #24
 80057a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80057ae:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3318      	adds	r3, #24
 80057d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	887a      	ldrh	r2, [r7, #2]
 80057d8:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 80057dc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3318      	adds	r3, #24
 80057fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3318      	adds	r3, #24
 800582e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	887a      	ldrh	r2, [r7, #2]
 8005834:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b0d2      	sub	sp, #328	; 0x148
 800584c:	af00      	add	r7, sp, #0
 800584e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005852:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005856:	6018      	str	r0, [r3, #0]
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005860:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005864:	4602      	mov	r2, r0
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800586c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005870:	460a      	mov	r2, r1
 8005872:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800587a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800587e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3318      	adds	r3, #24
 8005886:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 800588a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800588e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005898:	3308      	adds	r3, #8
 800589a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800589e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058a2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80058a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80058aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058ae:	3348      	adds	r3, #72	; 0x48
 80058b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80058b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058b8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80058bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80058c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058c4:	f203 3362 	addw	r3, r3, #866	; 0x362
 80058c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80058cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058d0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80058d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80058d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058dc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80058e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80058e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058e8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80058ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80058f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058f4:	332c      	adds	r3, #44	; 0x2c
 80058f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80058fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058fe:	3348      	adds	r3, #72	; 0x48
 8005900:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005904:	f107 030c 	add.w	r3, r7, #12
 8005908:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005924:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005928:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800592c:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005934:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	b25b      	sxtb	r3, r3
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005942:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005946:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 800594a:	f993 3000 	ldrsb.w	r3, [r3]
 800594e:	4313      	orrs	r3, r2
 8005950:	b25b      	sxtb	r3, r3
 8005952:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005954:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005958:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800595a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800595e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005962:	3336      	adds	r3, #54	; 0x36
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800596a:	4413      	add	r3, r2
 800596c:	1d9a      	adds	r2, r3, #6
 800596e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005972:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005976:	4611      	mov	r1, r2
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	f7ff f955 	bl	8004c28 <VL53L1_set_user_zone>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005984:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005988:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d019      	beq.n	80059c4 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005990:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005994:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005998:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80059a6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80059aa:	4413      	add	r3, r2
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059b6:	4611      	mov	r1, r2
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f001 fbd7 	bl	800716c <VL53L1_set_zone_dss_config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80059c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059c8:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80059d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059d8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80059e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059e4:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80059e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059ec:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80059f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f8:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 80059fc:	2bff      	cmp	r3, #255	; 0xff
 80059fe:	d106      	bne.n	8005a0e <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005a00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d139      	bne.n	8005a92 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005a1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a26:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d131      	bne.n	8005a92 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005a2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a32:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005a36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005a42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005a4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a50:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005a54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005a5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a60:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005a64:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005a66:	b21a      	sxth	r2, r3
 8005a68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a6c:	825a      	strh	r2, [r3, #18]
 8005a6e:	e003      	b.n	8005a78 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005a70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a74:	2200      	movs	r2, #0
 8005a76:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005a78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a7c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d805      	bhi.n	8005a92 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005a86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a8a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005a8e:	2205      	movs	r2, #5
 8005a90:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005a92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d117      	bne.n	8005ad2 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005aa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aaa:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10f      	bne.n	8005ad2 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005ab2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aba:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005abe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ac2:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005ac6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aca:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ace:	2206      	movs	r2, #6
 8005ad0:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005ad2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005ada:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ade:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	f007 f98c 	bl	800ce00 <VL53L1_save_cfg_data>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005aee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005af2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d826      	bhi.n	8005b4c <VL53L1_init_and_start_range+0x304>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <VL53L1_init_and_start_range+0x2bc>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b3d 	.word	0x08005b3d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b1d 	.word	0x08005b1d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b22:	e017      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005b24:	230d      	movs	r3, #13
 8005b26:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b2a:	e013      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005b2c:	2324      	movs	r3, #36	; 0x24
 8005b2e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b32:	e00f      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005b34:	2344      	movs	r3, #68	; 0x44
 8005b36:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b3a:	e00b      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005b3c:	235a      	movs	r3, #90	; 0x5a
 8005b3e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b42:	e007      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005b44:	2371      	movs	r3, #113	; 0x71
 8005b46:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b4a:	e003      	b.n	8005b54 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005b4c:	2383      	movs	r3, #131	; 0x83
 8005b4e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005b52:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005b54:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005b58:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005b5c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005b6e:	e00b      	b.n	8005b88 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005b70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005b7e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005b82:	3301      	adds	r3, #1
 8005b84:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005b88:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005b8c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3ed      	bcc.n	8005b70 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005b94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b98:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d917      	bls.n	8005bd2 <VL53L1_init_and_start_range+0x38a>
 8005ba2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d113      	bne.n	8005bd2 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005baa:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005bae:	f1c3 0301 	rsb	r3, r3, #1
 8005bb2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005bb6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005bba:	f107 020c 	add.w	r2, r7, #12
 8005bbe:	4413      	add	r3, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	210b      	movs	r1, #11
 8005bc4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005bc8:	f00c fb0d 	bl	80121e6 <VL53L1_i2c_encode_static_nvm_managed>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005bd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bd6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d917      	bls.n	8005c10 <VL53L1_init_and_start_range+0x3c8>
 8005be0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d113      	bne.n	8005c10 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005be8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005bec:	f1c3 030d 	rsb	r3, r3, #13
 8005bf0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005bf4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005bf8:	f107 020c 	add.w	r2, r7, #12
 8005bfc:	4413      	add	r3, r2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2117      	movs	r1, #23
 8005c02:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005c06:	f00c fbca 	bl	801239e <VL53L1_i2c_encode_customer_nvm_managed>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005c10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c14:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d917      	bls.n	8005c4e <VL53L1_init_and_start_range+0x406>
 8005c1e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d113      	bne.n	8005c4e <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c26:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c2a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005c2e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005c32:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005c36:	f107 020c 	add.w	r2, r7, #12
 8005c3a:	4413      	add	r3, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2120      	movs	r1, #32
 8005c40:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005c44:	f00c fce9 	bl	801261a <VL53L1_i2c_encode_static_config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005c4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c52:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d917      	bls.n	8005c8c <VL53L1_init_and_start_range+0x444>
 8005c5c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d113      	bne.n	8005c8c <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c64:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c68:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005c6c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005c70:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005c74:	f107 020c 	add.w	r2, r7, #12
 8005c78:	4413      	add	r3, r2
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2116      	movs	r1, #22
 8005c7e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005c82:	f00c fdad 	bl	80127e0 <VL53L1_i2c_encode_general_config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005c8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c90:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d917      	bls.n	8005cca <VL53L1_init_and_start_range+0x482>
 8005c9a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d113      	bne.n	8005cca <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ca2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ca6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005caa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005cae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	4413      	add	r3, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2117      	movs	r1, #23
 8005cbc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005cc0:	f00c fe12 	bl	80128e8 <VL53L1_i2c_encode_timing_config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cce:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d036      	beq.n	8005d46 <VL53L1_init_and_start_range+0x4fe>
 8005cd8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d132      	bne.n	8005d46 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ce0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ce4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005ce8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005cec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cf0:	791b      	ldrb	r3, [r3, #4]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d017      	beq.n	8005d2a <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d0a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d10:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d1c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d28:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d2a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005d2e:	f107 020c 	add.w	r2, r7, #12
 8005d32:	4413      	add	r3, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	2112      	movs	r1, #18
 8005d38:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005d3c:	f00c fe56 	bl	80129ec <VL53L1_i2c_encode_dynamic_config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005d46:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d113      	bne.n	8005d76 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005d4e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d52:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005d56:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d5a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005d5e:	f107 020c 	add.w	r2, r7, #12
 8005d62:	4413      	add	r3, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	2105      	movs	r1, #5
 8005d68:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005d6c:	f00c fec3 	bl	8012af6 <VL53L1_i2c_encode_system_control>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005d76:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8005d7e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005d82:	f107 020c 	add.w	r2, r7, #12
 8005d86:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005d8a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005d8e:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8005d92:	6800      	ldr	r0, [r0, #0]
 8005d94:	f00e fbd6 	bl	8014544 <VL53L1_WriteMulti>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8005d9e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005da6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005daa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	f004 fb82 	bl	800a4b8 <VL53L1_update_ll_driver_rd_state>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005dba:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005dc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	f004 fd15 	bl	800a7fa <VL53L1_update_ll_driver_cfg_state>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005dd6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3318      	adds	r3, #24
 8005df4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f00c fea1 	bl	8012b6c <VL53L1_set_system_control>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005e40:	2103      	movs	r1, #3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f004 fb07 	bl	800a456 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f004 ff14 	bl	800ac88 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f004 ff46 	bl	800acf2 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6c:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d102      	bne.n	8005e7a <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f008 f9b4 	bl	800e1e2 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b0c8      	sub	sp, #288	; 0x120
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005e90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e94:	6018      	str	r0, [r3, #0]
 8005e96:	460a      	mov	r2, r1
 8005e98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005e9c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005ea0:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ea8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005eb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ebc:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005ec0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005ec4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ec8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005ecc:	331c      	adds	r3, #28
 8005ece:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005ed2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ed6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8005ede:	2388      	movs	r3, #136	; 0x88
 8005ee0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8005ef0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005ef4:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d008      	beq.n	8005f10 <VL53L1_get_measurement_results+0x8a>
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d10d      	bne.n	8005f1e <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005f02:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f06:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005f0a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005f0e:	e00a      	b.n	8005f26 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8005f10:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f14:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005f18:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005f1c:	e003      	b.n	8005f26 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8005f1e:	232c      	movs	r3, #44	; 0x2c
 8005f20:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005f24:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8005f26:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8005f2e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005f32:	f107 0208 	add.w	r2, r7, #8
 8005f36:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005f3a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005f3e:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	f00e fb34 	bl	80145b0 <VL53L1_ReadMulti>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005f4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005f52:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d917      	bls.n	8005f8c <VL53L1_get_measurement_results+0x106>
 8005f5c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f64:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005f68:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005f6c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005f70:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8005f74:	f107 0208 	add.w	r2, r7, #8
 8005f78:	4413      	add	r3, r2
 8005f7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005f7e:	4619      	mov	r1, r3
 8005f80:	2038      	movs	r0, #56	; 0x38
 8005f82:	f00c ff71 	bl	8012e68 <VL53L1_i2c_decode_debug_results>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005f8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005f90:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d017      	beq.n	8005fca <VL53L1_get_measurement_results+0x144>
 8005f9a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005fa2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005fa6:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005faa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005fae:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005fb2:	f107 0208 	add.w	r2, r7, #8
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	2021      	movs	r0, #33	; 0x21
 8005fc0:	f00c fef1 	bl	8012da6 <VL53L1_i2c_decode_core_results>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005fca:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005fd8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005fdc:	f107 0208 	add.w	r2, r7, #8
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	202c      	movs	r0, #44	; 0x2c
 8005fea:	f00c fde6 	bl	8012bba <VL53L1_i2c_decode_system_results>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005ff4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8006002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	b0a0      	sub	sp, #128	; 0x80
 8006008:	af06      	add	r7, sp, #24
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	460b      	mov	r3, r1
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3318      	adds	r3, #24
 800601c:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006024:	3308      	adds	r3, #8
 8006026:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8006028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602a:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 800602c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006032:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006036:	332c      	adds	r3, #44	; 0x2c
 8006038:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 800603a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800603c:	33c2      	adds	r3, #194	; 0xc2
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8006040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006042:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800604e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006050:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006054:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8006056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006058:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800605e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006060:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006064:	3318      	adds	r3, #24
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8006068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8006070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006072:	3348      	adds	r3, #72	; 0x48
 8006074:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8006076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006078:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800607e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006080:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800608c:	2b01      	cmp	r3, #1
 800608e:	d108      	bne.n	80060a2 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006096:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <VL53L1_get_device_results+0xa0>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <VL53L1_get_device_results+0xa2>
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 80060a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060aa:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 82a9 	beq.w	800660a <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 80060b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fbd7 	bl	8006874 <VL53L1_get_histogram_bin_data>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 80060cc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d118      	bne.n	8006106 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d114      	bne.n	8006106 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 80060dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 80060e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ee:	4413      	add	r3, r2
 80060f0:	1d1a      	adds	r2, r3, #4
 80060f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f005 fb6c 	bl	800b7d8 <VL53L1_hist_copy_and_scale_ambient_info>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8006106:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 8220 	bne.w	8006550 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8006110:	f107 0313 	add.w	r3, r7, #19
 8006114:	4619      	mov	r1, r3
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f008 f91a 	bl	800e350 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	3b01      	subs	r3, #1
 800612a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 800612e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8006136:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	3202      	adds	r2, #2
 800613e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006144:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8006146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006148:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 800614c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614e:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f005 fa41 	bl	800b5e4 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8006162:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800616e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006170:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617a:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617e:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8006180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006182:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800618a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006196:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619c:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80061a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a2:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80061a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a8:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80061ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ae:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80061b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ba:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80061ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061cc:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80061ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d0:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80061d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d4:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 80061d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d8:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80061dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061de:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f004 fc2f 	bl	800aa48 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80061ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ec:	795b      	ldrb	r3, [r3, #5]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d048      	beq.n	8006284 <VL53L1_get_device_results+0x282>
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	dc56      	bgt.n	80062a4 <VL53L1_get_device_results+0x2a2>
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d002      	beq.n	8006200 <VL53L1_get_device_results+0x1fe>
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d02e      	beq.n	800625c <VL53L1_get_device_results+0x25a>
 80061fe:	e051      	b.n	80062a4 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8006200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006202:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8006206:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8006216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006218:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 800621c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800621e:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622a:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 800622e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006230:	319c      	adds	r1, #156	; 0x9c
 8006232:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006234:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8006238:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800623c:	b2a4      	uxth	r4, r4
 800623e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8006240:	351c      	adds	r5, #28
 8006242:	9505      	str	r5, [sp, #20]
 8006244:	9404      	str	r4, [sp, #16]
 8006246:	9003      	str	r0, [sp, #12]
 8006248:	9102      	str	r1, [sp, #8]
 800624a:	9201      	str	r2, [sp, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4643      	mov	r3, r8
 8006250:	4672      	mov	r2, lr
 8006252:	4661      	mov	r1, ip
 8006254:	4630      	mov	r0, r6
 8006256:	f006 fa36 	bl	800c6c6 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800625a:	e027      	b.n	80062ac <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 800625c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800625e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8006266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800626a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800627a:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 800627c:	b21a      	sxth	r2, r3
 800627e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006280:	839a      	strh	r2, [r3, #28]
		break;
 8006282:	e013      	b.n	80062ac <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	331c      	adds	r3, #28
 8006288:	4619      	mov	r1, r3
 800628a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800628c:	f7fd fcf7 	bl	8003c7e <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006296:	b29b      	uxth	r3, r3
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	b29b      	uxth	r3, r3
 800629c:	b21a      	sxth	r2, r3
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	839a      	strh	r2, [r3, #28]
		break;
 80062a2:	e003      	b.n	80062ac <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 80062a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a6:	2200      	movs	r2, #0
 80062a8:	839a      	strh	r2, [r3, #28]
		break;
 80062aa:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 80062ac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 814f 	bne.w	8006554 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 80062c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c4:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80062c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ca:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 80062ce:	b29c      	uxth	r4, r3
 80062d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d2:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	4623      	mov	r3, r4
 80062da:	f006 fb99 	bl	800ca10 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 80062de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e0:	7999      	ldrb	r1, [r3, #6]
 80062e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80062e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 ff7b 	bl	80071e6 <VL53L1_get_dmax_calibration_data>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 80062f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 812c 	bne.w	8006558 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8006300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006302:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800630c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006314:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8006318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800631e:	3308      	adds	r3, #8
				pdev->wArea2,
 8006320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006322:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8006326:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8006328:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800632a:	9405      	str	r4, [sp, #20]
 800632c:	f107 0413 	add.w	r4, r7, #19
 8006330:	9404      	str	r4, [sp, #16]
 8006332:	9203      	str	r2, [sp, #12]
 8006334:	9302      	str	r3, [sp, #8]
 8006336:	9001      	str	r0, [sp, #4]
 8006338:	9100      	str	r1, [sp, #0]
 800633a:	4633      	mov	r3, r6
 800633c:	462a      	mov	r2, r5
 800633e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f00e fb45 	bl	80149d0 <VL53L1_ipp_hist_process_data>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 800634c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006350:	2b00      	cmp	r3, #0
 8006352:	d050      	beq.n	80063f6 <VL53L1_get_device_results+0x3f4>
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d94d      	bls.n	80063f6 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800635a:	2300      	movs	r3, #0
 800635c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006360:	e045      	b.n	80063ee <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8006362:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006366:	224c      	movs	r2, #76	; 0x4c
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	3310      	adds	r3, #16
 800636e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	7cfa      	ldrb	r2, [r7, #19]
 800637c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	7cfa      	ldrb	r2, [r7, #19]
 800638a:	fbb3 f2f2 	udiv	r2, r3, r2
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	7cfa      	ldrb	r2, [r7, #19]
 8006398:	fb93 f2f2 	sdiv	r2, r3, r2
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80063a4:	461a      	mov	r2, r3
 80063a6:	7cfb      	ldrb	r3, [r7, #19]
 80063a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063b6:	461a      	mov	r2, r3
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80063c8:	461a      	mov	r2, r3
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	7cfa      	ldrb	r2, [r7, #19]
 80063dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80063e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80063e8:	3301      	adds	r3, #1
 80063ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80063ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d9b5      	bls.n	8006362 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 80063f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 80ae 	bne.w	800655c <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8006400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006402:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006408:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800640c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800640e:	330e      	adds	r3, #14
 8006410:	461a      	mov	r2, r3
 8006412:	f006 f922 	bl	800c65a <VL53L1_hist_wrap_dmax>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 800641c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 809d 	bne.w	8006560 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800642c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006438:	4413      	add	r3, r2
 800643a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800643c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800644c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800644e:	4413      	add	r3, r2
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f005 fc1d 	bl	800bc96 <VL53L1_hist_phase_consistency_check>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8006462:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006466:	2b00      	cmp	r3, #0
 8006468:	d17c      	bne.n	8006564 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800646a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800646c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	4413      	add	r3, r2
 800647e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006480:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006492:	4413      	add	r3, r2
 8006494:	f103 0208 	add.w	r2, r3, #8
 8006498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800649a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f006 f883 	bl	800c5aa <VL53L1_hist_xmonitor_consistency_check>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 80064aa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d15a      	bne.n	8006568 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80064b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	2210      	movs	r2, #16
 80064c0:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80064c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80064c8:	3301      	adds	r3, #1
 80064ca:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064d6:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80064d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064da:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80064de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d222      	bcs.n	800652c <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80064e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80064f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fa:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8006500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006502:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800650a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006516:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800651e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006520:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 800652c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11b      	bne.n	800656c <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006536:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800653a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800653c:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8006540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006542:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006546:	331c      	adds	r3, #28
 8006548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800654a:	f006 fbbe 	bl	800ccca <VL53L1_hist_copy_results_to_sys_and_core>
 800654e:	e00e      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006550:	bf00      	nop
 8006552:	e00c      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006554:	bf00      	nop
 8006556:	e00a      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006558:	bf00      	nop
 800655a:	e008      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800655c:	bf00      	nop
 800655e:	e006      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006560:	bf00      	nop
 8006562:	e004      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006564:	bf00      	nop
 8006566:	e002      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006568:	bf00      	nop
 800656a:	e000      	b.n	800656e <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800656c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d036      	beq.n	80065e4 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	79db      	ldrb	r3, [r3, #7]
 800657a:	2b06      	cmp	r3, #6
 800657c:	d00a      	beq.n	8006594 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800657e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8006586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f006 fc73 	bl	800ce74 <VL53L1_dynamic_zone_update>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800659a:	e015      	b.n	80065c8 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 800659c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80065a2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <VL53L1_get_device_results+0x5ac>
 80065aa:	2103      	movs	r1, #3
 80065ac:	e000      	b.n	80065b0 <VL53L1_get_device_results+0x5ae>
 80065ae:	2101      	movs	r1, #1
 80065b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065b6:	4413      	add	r3, r2
 80065b8:	460a      	mov	r2, r1
 80065ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80065be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065c2:	3301      	adds	r3, #1
 80065c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80065c8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065cc:	2b0f      	cmp	r3, #15
 80065ce:	d9e5      	bls.n	800659c <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80065d0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f006 fcc6 	bl	800cf6a <VL53L1_multizone_hist_bins_update>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 80065e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f007 f9d3 	bl	800d998 <VL53L1_dynamic_xtalk_correction_corrector>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d043      	beq.n	8006688 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e03e      	b.n	8006688 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800660a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	4619      	mov	r1, r3
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7ff fc35 	bl	8005e86 <VL53L1_get_measurement_results>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006622:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10d      	bne.n	8006646 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800662a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800662c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006630:	4618      	mov	r0, r3
 8006632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006634:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800663a:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800663e:	321c      	adds	r2, #28
 8006640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006642:	f000 fc1f 	bl	8006e84 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d11c      	bne.n	8006688 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800664e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f007 fe24 	bl	800e2ac <VL53L1_low_power_auto_setup_manual_calibration>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2201      	movs	r2, #1
 800666e:	709a      	strb	r2, [r3, #2]
 8006670:	e00a      	b.n	8006688 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8006672:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	2202      	movs	r2, #2
 8006686:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800668a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800668e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006690:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8006692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006694:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800669c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80066a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a4:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80066a6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 80b0 	bne.w	8006810 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80066b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b2:	2210      	movs	r2, #16
 80066b4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80066b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80066be:	3301      	adds	r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c4:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80066c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80066d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80066d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066dc:	429a      	cmp	r2, r3
 80066de:	f080 8097 	bcs.w	8006810 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80066e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80066e6:	4613      	mov	r3, r2
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80066f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066f4:	4413      	add	r3, r2
 80066f6:	3308      	adds	r3, #8
 80066f8:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80066fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066fc:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80066fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006700:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8006702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006704:	785a      	ldrb	r2, [r3, #1]
 8006706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006708:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800670a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800670c:	789a      	ldrb	r2, [r3, #2]
 800670e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006710:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006714:	78da      	ldrb	r2, [r3, #3]
 8006716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006718:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800671a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800671c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006726:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800672a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800672c:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800672e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006730:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800673a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800673c:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006748:	7c5a      	ldrb	r2, [r3, #17]
 800674a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674c:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800674e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006750:	7c9a      	ldrb	r2, [r3, #18]
 8006752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006754:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006756:	2300      	movs	r3, #0
 8006758:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800675c:	e052      	b.n	8006804 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800675e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006762:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006768:	204c      	movs	r0, #76	; 0x4c
 800676a:	fb00 f303 	mul.w	r3, r0, r3
 800676e:	440b      	add	r3, r1
 8006770:	3338      	adds	r3, #56	; 0x38
 8006772:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006774:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006776:	4613      	mov	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4403      	add	r3, r0
 8006780:	3308      	adds	r3, #8
 8006782:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006784:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006788:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 800678c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800678e:	204c      	movs	r0, #76	; 0x4c
 8006790:	fb00 f303 	mul.w	r3, r0, r3
 8006794:	440b      	add	r3, r1
 8006796:	333c      	adds	r3, #60	; 0x3c
 8006798:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800679a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800679c:	4613      	mov	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4403      	add	r3, r0
 80067a6:	330c      	adds	r3, #12
 80067a8:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80067aa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80067ae:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80067b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067b4:	204c      	movs	r0, #76	; 0x4c
 80067b6:	fb00 f303 	mul.w	r3, r0, r3
 80067ba:	440b      	add	r3, r1
 80067bc:	3354      	adds	r3, #84	; 0x54
 80067be:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80067c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c2:	4613      	mov	r3, r2
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3310      	adds	r3, #16
 80067ce:	4602      	mov	r2, r0
 80067d0:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 80067d2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 80067d6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 80067da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067dc:	204c      	movs	r0, #76	; 0x4c
 80067de:	fb00 f303 	mul.w	r3, r0, r3
 80067e2:	440b      	add	r3, r1
 80067e4:	335e      	adds	r3, #94	; 0x5e
 80067e6:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 80067e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	3312      	adds	r3, #18
 80067f6:	4602      	mov	r2, r0
 80067f8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 80067fa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80067fe:	3301      	adds	r3, #1
 8006800:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006806:	7c9b      	ldrb	r3, [r3, #18]
 8006808:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800680c:	429a      	cmp	r2, r3
 800680e:	d3a6      	bcc.n	800675e <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006810:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f012 fe58 	bl	80194cc <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 800681c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f003 ff35 	bl	800a694 <VL53L1_check_ll_driver_rd_state>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006830:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006834:	4618      	mov	r0, r3
 8006836:	3768      	adds	r7, #104	; 0x68
 8006838:	46bd      	mov	sp, r7
 800683a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800683e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 800684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	2203      	movs	r2, #3
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fe fff3 	bl	8005848 <VL53L1_init_and_start_range>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0d2      	sub	sp, #328	; 0x148
 8006878:	af00      	add	r7, sp, #0
 800687a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800687e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006882:	6018      	str	r0, [r3, #0]
 8006884:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006888:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800688c:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800688e:	2300      	movs	r3, #0
 8006890:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006894:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006898:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3318      	adds	r3, #24
 80068a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80068a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80068b2:	3308      	adds	r3, #8
 80068b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80068b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068bc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80068c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80068c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068c8:	f203 3342 	addw	r3, r3, #834	; 0x342
 80068cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80068d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068d4:	f203 3362 	addw	r3, r3, #866	; 0x362
 80068d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80068dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068e0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80068e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 80068e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006922:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006926:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800692e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006936:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800693a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800693e:	2353      	movs	r3, #83	; 0x53
 8006940:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006944:	2188      	movs	r1, #136	; 0x88
 8006946:	6800      	ldr	r0, [r0, #0]
 8006948:	f00d fe32 	bl	80145b0 <VL53L1_ReadMulti>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006952:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800695c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006966:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800696a:	785a      	ldrb	r2, [r3, #1]
 800696c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006970:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800697a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800697e:	789a      	ldrb	r2, [r3, #2]
 8006980:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006984:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 800698e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006992:	78da      	ldrb	r2, [r3, #3]
 8006994:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006998:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 80069a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	2002      	movs	r0, #2
 80069ac:	f004 fb75 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80069b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80069c2:	234e      	movs	r3, #78	; 0x4e
 80069c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80069c8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80069cc:	f107 020c 	add.w	r2, r7, #12
 80069d0:	4413      	add	r3, r2
 80069d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80069d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80069da:	2002      	movs	r0, #2
 80069dc:	f004 fb5d 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80069e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80069f2:	2350      	movs	r3, #80	; 0x50
 80069f4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80069f8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80069fc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a00:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a04:	5cd2      	ldrb	r2, [r2, r3]
 8006a06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006a14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2a:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006a2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a32:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006a3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006a48:	2351      	movs	r3, #81	; 0x51
 8006a4a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006a4e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a52:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a56:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a5a:	5cd3      	ldrb	r3, [r2, r3]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006a62:	2352      	movs	r3, #82	; 0x52
 8006a64:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006a68:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a6c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a70:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a74:	5cd2      	ldrb	r2, [r2, r3]
 8006a76:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006a80:	234d      	movs	r3, #77	; 0x4d
 8006a82:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006a86:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006a8a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a8e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006a92:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006a96:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006a98:	2306      	movs	r3, #6
 8006a9a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006a9e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006aa2:	f107 020c 	add.w	r2, r7, #12
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006ab2:	e01a      	b.n	8006aea <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006ab4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f004 fb8d 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8006abe:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006ac0:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006ac4:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006ac6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006aca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3206      	adds	r2, #6
 8006ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006ad6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ada:	3303      	adds	r3, #3
 8006adc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006ae0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006aea:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006aee:	2b17      	cmp	r3, #23
 8006af0:	d9e0      	bls.n	8006ab4 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006af2:	f107 0208 	add.w	r2, r7, #8
 8006af6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006afa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006afe:	f248 018d 	movw	r1, #32909	; 0x808d
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	f000 fbd0 	bl	80072a8 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006b08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d118      	bne.n	8006b4c <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b1e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006b22:	3318      	adds	r3, #24
 8006b24:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f012 fcdc 	bl	80194e8 <memset>
		pdev->bin_rec_pos = 0;
 8006b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006b4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10b      	bne.n	8006b72 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006b5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b5e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b6a:	6811      	ldr	r1, [r2, #0]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	f7fd f97e 	bl	8003e6e <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b76:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006b7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006b86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b8a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006b94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2218      	movs	r2, #24
 8006ba0:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006ba2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ba6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2218      	movs	r2, #24
 8006bae:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006bb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bb4:	78da      	ldrb	r2, [r3, #3]
 8006bb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006bc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bc8:	799b      	ldrb	r3, [r3, #6]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006bd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006bde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006be2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bf0:	7c1b      	ldrb	r3, [r3, #16]
 8006bf2:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006c0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006c1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c1e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006c22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c2a:	6811      	ldr	r1, [r2, #0]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	f004 fed4 	bl	800b9da <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d117      	bne.n	8006c6e <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006c3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c42:	791b      	ldrb	r3, [r3, #4]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006c4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c4e:	795b      	ldrb	r3, [r3, #5]
 8006c50:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006c52:	4413      	add	r3, r2
 8006c54:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006c58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c5c:	799a      	ldrb	r2, [r3, #6]
 8006c5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c62:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006c6c:	e016      	b.n	8006c9c <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006c6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c72:	79db      	ldrb	r3, [r3, #7]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c7e:	7a1b      	ldrb	r3, [r3, #8]
 8006c80:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006c82:	4413      	add	r3, r2
 8006c84:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006c88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c8c:	7a5a      	ldrb	r2, [r3, #9]
 8006c8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006c9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ca0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006cb0:	e01f      	b.n	8006cf2 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006cb2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006cb6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006cba:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	d10d      	bne.n	8006ce8 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006ccc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	7adb      	ldrb	r3, [r3, #11]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006cdc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ce0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006ce8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006cec:	3301      	adds	r3, #1
 8006cee:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006cf2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d9db      	bls.n	8006cb2 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006cfa:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f004 fcdb 	bl	800b6ba <VL53L1_decode_timeout>
 8006d04:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006d22:	4618      	mov	r0, r3
 8006d24:	f007 fb54 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 8006d28:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006d2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006d40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d58:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8006d5c:	f007 fb4f 	bl	800e3fe <VL53L1_duration_maths>
 8006d60:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006d62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d66:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006d70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006d80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f007 fc5e 	bl	800e64a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8006d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	f008 f875 	bl	800ee86 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006da0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006da4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006da8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006db4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8006dc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	789b      	ldrb	r3, [r3, #2]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006dde:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006de2:	4413      	add	r3, r2
 8006de4:	3302      	adds	r3, #2
 8006de6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dee:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006df0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006df4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e02:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006e04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e16:	2200      	movs	r2, #0
 8006e18:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e1e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2b11      	cmp	r3, #17
 8006e2e:	bf8c      	ite	hi
 8006e30:	2201      	movhi	r2, #1
 8006e32:	2200      	movls	r2, #0
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d11b      	bne.n	8006e72 <VL53L1_get_histogram_bin_data+0x5fe>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <VL53L1_get_histogram_bin_data+0x60c>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e68:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006e6a:	23fa      	movs	r3, #250	; 0xfa
 8006e6c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006e70:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006e72:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	0002200e 	.word	0x0002200e

08006e84 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b08b      	sub	sp, #44	; 0x2c
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	78da      	ldrb	r2, [r3, #3]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	8a1b      	ldrh	r3, [r3, #16]
 8006ec4:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	8a9b      	ldrh	r3, [r3, #20]
 8006eca:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	8a5b      	ldrh	r3, [r3, #18]
 8006ed0:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ed8:	e00b      	b.n	8006ef2 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8006eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eec:	3301      	adds	r3, #1
 8006eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d9ef      	bls.n	8006eda <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f06:	e0fe      	b.n	8007106 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f0e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2200      	movs	r2, #0
 8006f14:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	78db      	ldrb	r3, [r3, #3]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d104      	bne.n	8006f34 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	2213      	movs	r2, #19
 8006f2e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006f32:	e007      	b.n	8006f44 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2200      	movs	r2, #0
 8006f48:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2200      	movs	r2, #0
 8006f54:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	2200      	movs	r2, #0
 8006f66:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8006f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d05c      	beq.n	800702e <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8006f74:	e0a8      	b.n	80070c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	789b      	ldrb	r3, [r3, #2]
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	d103      	bne.n	8006f86 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	8a7a      	ldrh	r2, [r7, #18]
 8006f82:	82da      	strh	r2, [r3, #22]
 8006f84:	e00b      	b.n	8006f9e <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	789b      	ldrb	r3, [r3, #2]
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d103      	bne.n	8006f96 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	8aba      	ldrh	r2, [r7, #20]
 8006f92:	82da      	strh	r2, [r3, #22]
 8006f94:	e003      	b.n	8006f9e <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	8afa      	ldrh	r2, [r7, #22]
 8006fa2:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	895b      	ldrh	r3, [r3, #10]
 8006fb8:	015b      	lsls	r3, r3, #5
 8006fba:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d302      	bcc.n	8006fca <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fc8:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006fe0:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff2:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da01      	bge.n	8006ffe <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8006ffa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006ffe:	12db      	asrs	r3, r3, #11
 8007000:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	b21a      	sxth	r2, r3
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800702c:	e04c      	b.n	80070c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007044:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	8bdb      	ldrh	r3, [r3, #30]
 8007052:	015b      	lsls	r3, r3, #5
 8007054:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d302      	bcc.n	8007064 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800705e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007062:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	b29a      	uxth	r2, r3
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800707a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800708c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	da01      	bge.n	8007098 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8007094:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007098:	12db      	asrs	r3, r3, #11
 800709a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b21a      	sxth	r2, r3
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80070c6:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	334c      	adds	r3, #76	; 0x4c
 80070fa:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80070fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007100:	3301      	adds	r3, #1
 8007102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710a:	2b01      	cmp	r3, #1
 800710c:	f67f aefc 	bls.w	8006f08 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	2b11      	cmp	r3, #17
 8007120:	bf8c      	ite	hi
 8007122:	2201      	movhi	r2, #1
 8007124:	2200      	movls	r2, #0
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	2a00      	cmp	r2, #0
 800712a:	d116      	bne.n	800715a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 800712c:	2201      	movs	r2, #1
 800712e:	409a      	lsls	r2, r3
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	b2da      	uxtb	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8007158:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800715a:	bf00      	nop
 800715c:	372c      	adds	r7, #44	; 0x2c
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	0002200e 	.word	0x0002200e

0800716c <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3318      	adds	r3, #24
 800717e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	332c      	adds	r3, #44	; 0x2c
 8007184:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d109      	bne.n	80071a2 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 80071a0:	e003      	b.n	80071aa <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80071aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3318      	adds	r3, #24
 80071ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80071d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b088      	sub	sp, #32
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	72fb      	strb	r3, [r7, #11]
 80071f4:	4613      	mov	r3, r2
 80071f6:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3318      	adds	r3, #24
 8007200:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007208:	3308      	adds	r3, #8
 800720a:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d006      	beq.n	8007220 <VL53L1_get_dmax_calibration_data+0x3a>
 8007212:	2b03      	cmp	r3, #3
 8007214:	dc3e      	bgt.n	8007294 <VL53L1_get_dmax_calibration_data+0xae>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d034      	beq.n	8007284 <VL53L1_get_dmax_calibration_data+0x9e>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d02a      	beq.n	8007274 <VL53L1_get_dmax_calibration_data+0x8e>
 800721e:	e039      	b.n	8007294 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8007220:	7aba      	ldrb	r2, [r7, #10]
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	4613      	mov	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 800723a:	7aba      	ldrb	r2, [r7, #10]
 800723c:	6979      	ldr	r1, [r7, #20]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 800725a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007270:	811a      	strh	r2, [r3, #8]
	break;
 8007272:	e012      	b.n	800729a <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8007278:	220a      	movs	r2, #10
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f012 f925 	bl	80194cc <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007282:	e00a      	b.n	800729a <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8007288:	220a      	movs	r2, #10
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f012 f91d 	bl	80194cc <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8007292:	e002      	b.n	800729a <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007294:	23fc      	movs	r3, #252	; 0xfc
 8007296:	77fb      	strb	r3, [r7, #31]
	break;
 8007298:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800729a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b089      	sub	sp, #36	; 0x24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	460b      	mov	r3, r1
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3318      	adds	r3, #24
 80072be:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072c6:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80072ce:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80072d0:	897b      	ldrh	r3, [r7, #10]
 80072d2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80072d6:	2bbe      	cmp	r3, #190	; 0xbe
 80072d8:	f200 86fc 	bhi.w	80080d4 <VL53L1_get_tuning_parm+0xe2c>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <VL53L1_get_tuning_parm+0x3c>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	080075e1 	.word	0x080075e1
 80072e8:	080075f1 	.word	0x080075f1
 80072ec:	08007601 	.word	0x08007601
 80072f0:	08007611 	.word	0x08007611
 80072f4:	0800761f 	.word	0x0800761f
 80072f8:	0800762d 	.word	0x0800762d
 80072fc:	0800763b 	.word	0x0800763b
 8007300:	08007649 	.word	0x08007649
 8007304:	08007657 	.word	0x08007657
 8007308:	08007665 	.word	0x08007665
 800730c:	08007673 	.word	0x08007673
 8007310:	0800767f 	.word	0x0800767f
 8007314:	0800768d 	.word	0x0800768d
 8007318:	0800769b 	.word	0x0800769b
 800731c:	080076a7 	.word	0x080076a7
 8007320:	080076b5 	.word	0x080076b5
 8007324:	080076c3 	.word	0x080076c3
 8007328:	080076d3 	.word	0x080076d3
 800732c:	080076e3 	.word	0x080076e3
 8007330:	080076f1 	.word	0x080076f1
 8007334:	08007701 	.word	0x08007701
 8007338:	0800770f 	.word	0x0800770f
 800733c:	0800771f 	.word	0x0800771f
 8007340:	0800772f 	.word	0x0800772f
 8007344:	0800773f 	.word	0x0800773f
 8007348:	0800774f 	.word	0x0800774f
 800734c:	0800775f 	.word	0x0800775f
 8007350:	0800776f 	.word	0x0800776f
 8007354:	0800777f 	.word	0x0800777f
 8007358:	0800778f 	.word	0x0800778f
 800735c:	0800779f 	.word	0x0800779f
 8007360:	080077ad 	.word	0x080077ad
 8007364:	080077bd 	.word	0x080077bd
 8007368:	080077cd 	.word	0x080077cd
 800736c:	080077dd 	.word	0x080077dd
 8007370:	080077ed 	.word	0x080077ed
 8007374:	080077fd 	.word	0x080077fd
 8007378:	0800780d 	.word	0x0800780d
 800737c:	0800781d 	.word	0x0800781d
 8007380:	0800782d 	.word	0x0800782d
 8007384:	0800783d 	.word	0x0800783d
 8007388:	0800784d 	.word	0x0800784d
 800738c:	0800785d 	.word	0x0800785d
 8007390:	0800786d 	.word	0x0800786d
 8007394:	0800787d 	.word	0x0800787d
 8007398:	0800788d 	.word	0x0800788d
 800739c:	0800789d 	.word	0x0800789d
 80073a0:	080078ad 	.word	0x080078ad
 80073a4:	080078bd 	.word	0x080078bd
 80073a8:	080078cd 	.word	0x080078cd
 80073ac:	080078dd 	.word	0x080078dd
 80073b0:	080078eb 	.word	0x080078eb
 80073b4:	080078f9 	.word	0x080078f9
 80073b8:	08007907 	.word	0x08007907
 80073bc:	08007915 	.word	0x08007915
 80073c0:	08007923 	.word	0x08007923
 80073c4:	08007931 	.word	0x08007931
 80073c8:	0800793f 	.word	0x0800793f
 80073cc:	0800794d 	.word	0x0800794d
 80073d0:	0800795b 	.word	0x0800795b
 80073d4:	08007969 	.word	0x08007969
 80073d8:	08007977 	.word	0x08007977
 80073dc:	08007985 	.word	0x08007985
 80073e0:	08007993 	.word	0x08007993
 80073e4:	080079a1 	.word	0x080079a1
 80073e8:	080079af 	.word	0x080079af
 80073ec:	080079bd 	.word	0x080079bd
 80073f0:	080079cb 	.word	0x080079cb
 80073f4:	080079d9 	.word	0x080079d9
 80073f8:	080079e7 	.word	0x080079e7
 80073fc:	080079f5 	.word	0x080079f5
 8007400:	08007a03 	.word	0x08007a03
 8007404:	08007a11 	.word	0x08007a11
 8007408:	08007a1f 	.word	0x08007a1f
 800740c:	08007a2b 	.word	0x08007a2b
 8007410:	08007a39 	.word	0x08007a39
 8007414:	08007a47 	.word	0x08007a47
 8007418:	08007a53 	.word	0x08007a53
 800741c:	08007a5f 	.word	0x08007a5f
 8007420:	08007a6b 	.word	0x08007a6b
 8007424:	08007a77 	.word	0x08007a77
 8007428:	08007a83 	.word	0x08007a83
 800742c:	08007a8f 	.word	0x08007a8f
 8007430:	08007a9d 	.word	0x08007a9d
 8007434:	08007aab 	.word	0x08007aab
 8007438:	08007ab9 	.word	0x08007ab9
 800743c:	08007ac7 	.word	0x08007ac7
 8007440:	08007ad5 	.word	0x08007ad5
 8007444:	08007ae3 	.word	0x08007ae3
 8007448:	08007af1 	.word	0x08007af1
 800744c:	08007aff 	.word	0x08007aff
 8007450:	08007b0d 	.word	0x08007b0d
 8007454:	08007b1b 	.word	0x08007b1b
 8007458:	08007b29 	.word	0x08007b29
 800745c:	08007b37 	.word	0x08007b37
 8007460:	08007b45 	.word	0x08007b45
 8007464:	08007b53 	.word	0x08007b53
 8007468:	08007b61 	.word	0x08007b61
 800746c:	08007b6f 	.word	0x08007b6f
 8007470:	08007b7d 	.word	0x08007b7d
 8007474:	08007b8b 	.word	0x08007b8b
 8007478:	08007b99 	.word	0x08007b99
 800747c:	08007ba7 	.word	0x08007ba7
 8007480:	08007bb5 	.word	0x08007bb5
 8007484:	08007bc3 	.word	0x08007bc3
 8007488:	08007bd1 	.word	0x08007bd1
 800748c:	08007bdf 	.word	0x08007bdf
 8007490:	08007bed 	.word	0x08007bed
 8007494:	08007bfb 	.word	0x08007bfb
 8007498:	08007c09 	.word	0x08007c09
 800749c:	08007c17 	.word	0x08007c17
 80074a0:	08007c25 	.word	0x08007c25
 80074a4:	08007c33 	.word	0x08007c33
 80074a8:	08007c41 	.word	0x08007c41
 80074ac:	08007c4f 	.word	0x08007c4f
 80074b0:	08007c5d 	.word	0x08007c5d
 80074b4:	08007c6b 	.word	0x08007c6b
 80074b8:	08007c79 	.word	0x08007c79
 80074bc:	08007c87 	.word	0x08007c87
 80074c0:	08007c99 	.word	0x08007c99
 80074c4:	08007cab 	.word	0x08007cab
 80074c8:	08007cbd 	.word	0x08007cbd
 80074cc:	08007ccf 	.word	0x08007ccf
 80074d0:	08007ce1 	.word	0x08007ce1
 80074d4:	08007cf3 	.word	0x08007cf3
 80074d8:	08007d05 	.word	0x08007d05
 80074dc:	08007d17 	.word	0x08007d17
 80074e0:	08007d29 	.word	0x08007d29
 80074e4:	08007d3b 	.word	0x08007d3b
 80074e8:	08007d4d 	.word	0x08007d4d
 80074ec:	08007d5f 	.word	0x08007d5f
 80074f0:	08007d71 	.word	0x08007d71
 80074f4:	08007d83 	.word	0x08007d83
 80074f8:	08007d95 	.word	0x08007d95
 80074fc:	08007da7 	.word	0x08007da7
 8007500:	08007db9 	.word	0x08007db9
 8007504:	08007dcb 	.word	0x08007dcb
 8007508:	08007ddd 	.word	0x08007ddd
 800750c:	08007deb 	.word	0x08007deb
 8007510:	08007df9 	.word	0x08007df9
 8007514:	08007e07 	.word	0x08007e07
 8007518:	08007e15 	.word	0x08007e15
 800751c:	08007e23 	.word	0x08007e23
 8007520:	08007e31 	.word	0x08007e31
 8007524:	08007e3f 	.word	0x08007e3f
 8007528:	08007e51 	.word	0x08007e51
 800752c:	08007e5f 	.word	0x08007e5f
 8007530:	08007e6d 	.word	0x08007e6d
 8007534:	08007e7b 	.word	0x08007e7b
 8007538:	08007e89 	.word	0x08007e89
 800753c:	08007e97 	.word	0x08007e97
 8007540:	08007ea5 	.word	0x08007ea5
 8007544:	08007eb3 	.word	0x08007eb3
 8007548:	08007ec1 	.word	0x08007ec1
 800754c:	08007ecf 	.word	0x08007ecf
 8007550:	08007edd 	.word	0x08007edd
 8007554:	08007eeb 	.word	0x08007eeb
 8007558:	08007ef9 	.word	0x08007ef9
 800755c:	08007f07 	.word	0x08007f07
 8007560:	08007f15 	.word	0x08007f15
 8007564:	08007f23 	.word	0x08007f23
 8007568:	08007f31 	.word	0x08007f31
 800756c:	08007f3f 	.word	0x08007f3f
 8007570:	08007f4d 	.word	0x08007f4d
 8007574:	08007f5b 	.word	0x08007f5b
 8007578:	08007f69 	.word	0x08007f69
 800757c:	08007f77 	.word	0x08007f77
 8007580:	08007f85 	.word	0x08007f85
 8007584:	08007f93 	.word	0x08007f93
 8007588:	08007fa1 	.word	0x08007fa1
 800758c:	08007faf 	.word	0x08007faf
 8007590:	08007fbd 	.word	0x08007fbd
 8007594:	08007fcb 	.word	0x08007fcb
 8007598:	08007fd9 	.word	0x08007fd9
 800759c:	08007fe7 	.word	0x08007fe7
 80075a0:	08007ff5 	.word	0x08007ff5
 80075a4:	08008003 	.word	0x08008003
 80075a8:	08008011 	.word	0x08008011
 80075ac:	0800801f 	.word	0x0800801f
 80075b0:	0800802d 	.word	0x0800802d
 80075b4:	0800803b 	.word	0x0800803b
 80075b8:	08008049 	.word	0x08008049
 80075bc:	08008057 	.word	0x08008057
 80075c0:	08008065 	.word	0x08008065
 80075c4:	08008073 	.word	0x08008073
 80075c8:	08008081 	.word	0x08008081
 80075cc:	0800808f 	.word	0x0800808f
 80075d0:	0800809d 	.word	0x0800809d
 80075d4:	080080ab 	.word	0x080080ab
 80075d8:	080080b9 	.word	0x080080b9
 80075dc:	080080c7 	.word	0x080080c7

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80075e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]
	break;
 80075ec:	f000 bd79 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80075f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]
	break;
 80075fc:	f000 bd71 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007606:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]
	break;
 800760c:	f000 bd69 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
	break;
 800761a:	f000 bd62 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
	break;
 8007628:	f000 bd5b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	789b      	ldrb	r3, [r3, #2]
 8007630:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
	break;
 8007636:	f000 bd54 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	78db      	ldrb	r3, [r3, #3]
 800763e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
	break;
 8007644:	f000 bd4d 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	791b      	ldrb	r3, [r3, #4]
 800764c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	break;
 8007652:	f000 bd46 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	break;
 8007660:	f000 bd3f 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	799b      	ldrb	r3, [r3, #6]
 8007668:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	break;
 800766e:	f000 bd38 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
	break;
 800767a:	f000 bd32 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	891b      	ldrh	r3, [r3, #8]
 8007682:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
	break;
 8007688:	f000 bd2b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	8a1b      	ldrh	r3, [r3, #16]
 8007690:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	break;
 8007696:	f000 bd24 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
	break;
 80076a2:	f000 bd1e 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	7e1b      	ldrb	r3, [r3, #24]
 80076aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
	break;
 80076b0:	f000 bd17 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	8b5b      	ldrh	r3, [r3, #26]
 80076b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
	break;
 80076be:	f000 bd10 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80076c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
	break;
 80076ce:	f000 bd08 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80076d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
	break;
 80076de:	f000 bd00 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]
	break;
 80076ec:	f000 bcf9 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	601a      	str	r2, [r3, #0]
	break;
 80076fc:	f000 bcf1 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007704:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
	break;
 800770a:	f000 bcea 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007714:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
	break;
 800771a:	f000 bce2 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007724:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
	break;
 800772a:	f000 bcda 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007734:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
	break;
 800773a:	f000 bcd2 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007744:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
	break;
 800774a:	f000 bcca 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007754:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
	break;
 800775a:	f000 bcc2 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007764:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
	break;
 800776a:	f000 bcba 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
	break;
 800777a:	f000 bcb2 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
	break;
 800778a:	f000 bcaa 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8007794:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	601a      	str	r2, [r3, #0]
	break;
 800779a:	f000 bca2 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
	break;
 80077a8:	f000 bc9b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	601a      	str	r2, [r3, #0]
	break;
 80077b8:	f000 bc93 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
	break;
 80077c8:	f000 bc8b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 80077d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]
	break;
 80077d8:	f000 bc83 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80077e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
	break;
 80077e8:	f000 bc7b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80077f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]
	break;
 80077f8:	f000 bc73 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
	break;
 8007808:	f000 bc6b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007812:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
	break;
 8007818:	f000 bc63 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007822:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]
	break;
 8007828:	f000 bc5b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007832:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]
	break;
 8007838:	f000 bc53 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007842:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
	break;
 8007848:	f000 bc4b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007852:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
	break;
 8007858:	f000 bc43 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]
	break;
 8007868:	f000 bc3b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]
	break;
 8007878:	f000 bc33 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
	break;
 8007888:	f000 bc2b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007892:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	601a      	str	r2, [r3, #0]
	break;
 8007898:	f000 bc23 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80078a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
	break;
 80078a8:	f000 bc1b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80078b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
	break;
 80078b8:	f000 bc13 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80078c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
	break;
 80078c8:	f000 bc0b 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 80078d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]
	break;
 80078d8:	f000 bc03 	b.w	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80078e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
	break;
 80078e8:	e3fb      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80078f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	break;
 80078f6:	e3f4      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 80078fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]
	break;
 8007904:	e3ed      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800790c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
	break;
 8007912:	e3e6      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800791a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
	break;
 8007920:	e3df      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007928:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	601a      	str	r2, [r3, #0]
	break;
 800792e:	e3d8      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]
	break;
 800793c:	e3d1      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
	break;
 800794a:	e3ca      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007952:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
	break;
 8007958:	e3c3      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007960:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
	break;
 8007966:	e3bc      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800796e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
	break;
 8007974:	e3b5      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 800797c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
	break;
 8007982:	e3ae      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800798a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
	break;
 8007990:	e3a7      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007998:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
	break;
 800799e:	e3a0      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 80079a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
	break;
 80079ac:	e399      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 80079b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
	break;
 80079ba:	e392      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80079c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	break;
 80079c8:	e38b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80079d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
	break;
 80079d6:	e384      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 80079de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	break;
 80079e4:	e37d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80079ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
	break;
 80079f2:	e376      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 80079fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
	break;
 8007a00:	e36f      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007a08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
	break;
 8007a0e:	e368      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007a16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
	break;
 8007a1c:	e361      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
	break;
 8007a28:	e35b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007a30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
	break;
 8007a36:	e354      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
	break;
 8007a44:	e34d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
	break;
 8007a50:	e347      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]
	break;
 8007a5c:	e341      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	8adb      	ldrh	r3, [r3, #22]
 8007a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	break;
 8007a68:	e33b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	8b1b      	ldrh	r3, [r3, #24]
 8007a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
	break;
 8007a74:	e335      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	break;
 8007a80:	e32f      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	break;
 8007a8c:	e329      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007a94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
	break;
 8007a9a:	e322      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]
	break;
 8007aa8:	e31b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ab0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
	break;
 8007ab6:	e314      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007abe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]
	break;
 8007ac4:	e30d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007acc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
	break;
 8007ad2:	e306      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007ada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	601a      	str	r2, [r3, #0]
	break;
 8007ae0:	e2ff      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007ae8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]
	break;
 8007aee:	e2f8      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007af6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
	break;
 8007afc:	e2f1      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007b04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
	break;
 8007b0a:	e2ea      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
	break;
 8007b18:	e2e3      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007b20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	601a      	str	r2, [r3, #0]
	break;
 8007b26:	e2dc      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
	break;
 8007b34:	e2d5      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
	break;
 8007b42:	e2ce      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007b4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	601a      	str	r2, [r3, #0]
	break;
 8007b50:	e2c7      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007b58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
	break;
 8007b5e:	e2c0      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007b66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	601a      	str	r2, [r3, #0]
	break;
 8007b6c:	e2b9      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007b74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
	break;
 8007b7a:	e2b2      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007b82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
	break;
 8007b88:	e2ab      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007b90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	break;
 8007b96:	e2a4      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	break;
 8007ba4:	e29d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
	break;
 8007bb2:	e296      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
	break;
 8007bc0:	e28f      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007bc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
	break;
 8007bce:	e288      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007bd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	601a      	str	r2, [r3, #0]
	break;
 8007bdc:	e281      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007be4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
	break;
 8007bea:	e27a      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007bf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
	break;
 8007bf8:	e273      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007c00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
	break;
 8007c06:	e26c      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007c0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
	break;
 8007c14:	e265      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007c1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
	break;
 8007c22:	e25e      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007c2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
	break;
 8007c30:	e257      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007c38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
	break;
 8007c3e:	e250      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007c46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
	break;
 8007c4c:	e249      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007c54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
	break;
 8007c5a:	e242      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007c62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
	break;
 8007c68:	e23b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	601a      	str	r2, [r3, #0]
	break;
 8007c76:	e234      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
	break;
 8007c84:	e22d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8c:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
	break;
 8007c96:	e224      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ca2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
	break;
 8007ca8:	e21b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb0:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007cb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
	break;
 8007cba:	e212      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	break;
 8007ccc:	e209      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007cd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
	break;
 8007cde:	e200      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce6:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
	break;
 8007cf0:	e1f7      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf8:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007cfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	601a      	str	r2, [r3, #0]
	break;
 8007d02:	e1ee      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]
	break;
 8007d14:	e1e5      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007d20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
	break;
 8007d26:	e1dc      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2e:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007d32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]
	break;
 8007d38:	e1d3      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d40:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007d44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
	break;
 8007d4a:	e1ca      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d52:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007d56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	break;
 8007d5c:	e1c1      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d64:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007d68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
	break;
 8007d6e:	e1b8      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d76:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
	break;
 8007d80:	e1af      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d88:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
	break;
 8007d92:	e1a6      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
	break;
 8007da4:	e19d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007db0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
	break;
 8007db6:	e194      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dbe:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8007dc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]
	break;
 8007dc8:	e18b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8007dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
	break;
 8007dda:	e182      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
	break;
 8007de8:	e17b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007df0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	break;
 8007df6:	e174      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007dfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]
	break;
 8007e04:	e16d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007e0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
	break;
 8007e12:	e166      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007e1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]
	break;
 8007e20:	e15f      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007e28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
	break;
 8007e2e:	e158      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007e36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	601a      	str	r2, [r3, #0]
	break;
 8007e3c:	e151      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e44:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007e48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
	break;
 8007e4e:	e148      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007e56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
	break;
 8007e5c:	e141      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007e64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
	break;
 8007e6a:	e13a      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]
	break;
 8007e78:	e133      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007e80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
	break;
 8007e86:	e12c      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8007e8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
	break;
 8007e94:	e125      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8007e9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
	break;
 8007ea2:	e11e      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8007eaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
	break;
 8007eb0:	e117      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8007eb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
	break;
 8007ebe:	e110      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8007ec6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]
	break;
 8007ecc:	e109      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8007ed4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
	break;
 8007eda:	e102      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]
	break;
 8007ee8:	e0fb      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8007ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	break;
 8007ef6:	e0f4      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8007efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
	break;
 8007f04:	e0ed      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8007f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
	break;
 8007f12:	e0e6      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
	break;
 8007f20:	e0df      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007f28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
	break;
 8007f2e:	e0d8      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
	break;
 8007f3c:	e0d1      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
	break;
 8007f4a:	e0ca      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007f52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]
	break;
 8007f58:	e0c3      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8007f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	break;
 8007f66:	e0bc      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 8007f6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
	break;
 8007f74:	e0b5      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8007f7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
	break;
 8007f82:	e0ae      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8007f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	601a      	str	r2, [r3, #0]
	break;
 8007f90:	e0a7      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8007f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
	break;
 8007f9e:	e0a0      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8007fa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	601a      	str	r2, [r3, #0]
	break;
 8007fac:	e099      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8007fb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
	break;
 8007fba:	e092      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8007fc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]
	break;
 8007fc8:	e08b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8007fd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
	break;
 8007fd6:	e084      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 8007fde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
	break;
 8007fe4:	e07d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8007fec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	601a      	str	r2, [r3, #0]
	break;
 8007ff2:	e076      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8007ffa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	601a      	str	r2, [r3, #0]
	break;
 8008000:	e06f      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8008008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
	break;
 800800e:	e068      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8008016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
	break;
 800801c:	e061      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008024:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	601a      	str	r2, [r3, #0]
	break;
 800802a:	e05a      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8008032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	601a      	str	r2, [r3, #0]
	break;
 8008038:	e053      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8008040:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
	break;
 8008046:	e04c      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800804e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
	break;
 8008054:	e045      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800805c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
	break;
 8008062:	e03e      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800806a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
	break;
 8008070:	e037      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8008078:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	601a      	str	r2, [r3, #0]
	break;
 800807e:	e030      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8008086:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	601a      	str	r2, [r3, #0]
	break;
 800808c:	e029      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8008094:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
	break;
 800809a:	e022      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 80080a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
	break;
 80080a8:	e01b      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 80080b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
	break;
 80080b6:	e014      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80080be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
	break;
 80080c4:	e00d      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
	break;
 80080d2:	e006      	b.n	80080e2 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80080da:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80080dc:	23fc      	movs	r3, #252	; 0xfc
 80080de:	77fb      	strb	r3, [r7, #31]
	break;
 80080e0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80080e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3724      	adds	r7, #36	; 0x24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop

080080f4 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3318      	adds	r3, #24
 8008104:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	2201      	movs	r2, #1
 800810e:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3318      	adds	r3, #24
 8008132:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813a:	2200      	movs	r2, #0
 800813c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3318      	adds	r3, #24
 8008160:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008168:	2201      	movs	r2, #1
 800816a:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3318      	adds	r3, #24
 800818e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	2200      	movs	r2, #0
 8008198:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800819c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3318      	adds	r3, #24
 80081bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80081ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3318      	adds	r3, #24
 80081ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80081f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2208      	movs	r2, #8
 8008218:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	220b      	movs	r2, #11
 800821e:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008226:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800822e:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008236:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800823e:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2212      	movs	r2, #18
 8008266:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	220f      	movs	r2, #15
 800826c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800827a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	220c      	movs	r2, #12
 8008280:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	895b      	ldrh	r3, [r3, #10]
 80082a4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	895b      	ldrh	r3, [r3, #10]
 80082c2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2200      	movs	r2, #0
 80082e8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2240      	movs	r2, #64	; 0x40
 80082ee:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10d      	bne.n	8008314 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d108      	bne.n	8008314 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2200      	movs	r2, #0
 8008310:	741a      	strb	r2, [r3, #16]
 8008312:	e002      	b.n	800831a <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2201      	movs	r2, #1
 8008318:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800831a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d114      	bne.n	800834c <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8008326:	2b01      	cmp	r3, #1
 8008328:	d110      	bne.n	800834c <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	7d9b      	ldrb	r3, [r3, #22]
 800833e:	f003 f879 	bl	800b434 <VL53L1_calc_range_ignore_threshold>
 8008342:	4603      	mov	r3, r0
 8008344:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	831a      	strh	r2, [r3, #24]
 800834a:	e002      	b.n	8008352 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008358:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2232      	movs	r2, #50	; 0x32
 800835e:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008366:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	228c      	movs	r2, #140	; 0x8c
 800836c:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800836e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800838c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008394:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2207      	movs	r2, #7
 800839a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f643 2298 	movw	r2, #15000	; 0x3a98
 80083a2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80083aa:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80083b2:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2246      	movs	r2, #70	; 0x46
 80083b8:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80083c0:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	228c      	movs	r2, #140	; 0x8c
 80083c6:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80083c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80083ea:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f643 2298 	movw	r2, #15000	; 0x3a98
 80083f2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80083fa:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008402:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2208      	movs	r2, #8
 8008408:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2228      	movs	r2, #40	; 0x28
 800840e:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2209      	movs	r2, #9
 8008414:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008438:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008440:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008448:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008450:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2210      	movs	r2, #16
 8008456:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2208      	movs	r2, #8
 800845c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800845e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	4603      	mov	r3, r0
 8008476:	6039      	str	r1, [r7, #0]
 8008478:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2204      	movs	r2, #4
 8008482:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2201      	movs	r2, #1
 8008488:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2202      	movs	r2, #2
 8008494:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2201      	movs	r2, #1
 800849a:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2250      	movs	r2, #80	; 0x50
 80084a0:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2270      	movs	r2, #112	; 0x70
 80084a6:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f241 023d 	movw	r2, #4157	; 0x103d
 80084ae:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2210      	movs	r2, #16
 80084b4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2232      	movs	r2, #50	; 0x32
 80084ba:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2264      	movs	r2, #100	; 0x64
 80084c0:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2201      	movs	r2, #1
 80084c6:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	22a0      	movs	r2, #160	; 0xa0
 80084cc:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2200      	movs	r2, #0
 80084d2:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80084da:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2208      	movs	r2, #8
 80084e0:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2288      	movs	r2, #136	; 0x88
 80084e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2208      	movs	r2, #8
 80084f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008502:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	22fa      	movs	r2, #250	; 0xfa
 8008508:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	79fa      	ldrb	r2, [r7, #7]
 800850e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008518:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2232      	movs	r2, #50	; 0x32
 800851e:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008526:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	228c      	movs	r2, #140	; 0x8c
 800852c:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2250      	movs	r2, #80	; 0x50
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2232      	movs	r2, #50	; 0x32
 800853a:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2220      	movs	r2, #32
 800855c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	220e      	movs	r2, #14
 8008562:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f642 7294 	movw	r2, #12180	; 0x2f94
 800856a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	220e      	movs	r2, #14
 8008570:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	220a      	movs	r2, #10
 8008576:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2206      	movs	r2, #6
 800857c:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220e      	movs	r2, #14
 8008582:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	220a      	movs	r2, #10
 8008588:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2206      	movs	r2, #6
 800858e:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2209      	movs	r2, #9
 8008594:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2205      	movs	r2, #5
 800859a:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2203      	movs	r2, #3
 80085a0:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2206      	movs	r2, #6
 80085a6:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2206      	movs	r2, #6
 80085ac:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2206      	movs	r2, #6
 80085b2:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2221      	movs	r2, #33	; 0x21
 80085be:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	223c      	movs	r2, #60	; 0x3c
 80085d0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	223c      	movs	r2, #60	; 0x3c
 80085d6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	223c      	movs	r2, #60	; 0x3c
 80085dc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2280      	movs	r2, #128	; 0x80
 80085e2:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2280      	movs	r2, #128	; 0x80
 80085e8:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2280      	movs	r2, #128	; 0x80
 80085ee:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2208      	movs	r2, #8
 80085f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2210      	movs	r2, #16
 80085fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800862e:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008636:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800863e:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008646:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008656:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f242 3228 	movw	r2, #9000	; 0x2328
 800865e:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f241 7270 	movw	r2, #6000	; 0x1770
 8008666:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800866e:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f242 3228 	movw	r2, #9000	; 0x2328
 8008676:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f241 7270 	movw	r2, #6000	; 0x1770
 800867e:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800868e:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800869e:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80086a6:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f24f 6218 	movw	r2, #63000	; 0xf618
 80086ae:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80086b6:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80086be:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086c6:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80086d4:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80086dc:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2206      	movs	r2, #6
 80086fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800870e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f640 22be 	movw	r2, #2750	; 0xabe
 8008718:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	22fa      	movs	r2, #250	; 0xfa
 8008720:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800872a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008734:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800873e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008748:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008752:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f64f 7238 	movw	r2, #65336	; 0xff38
 800875c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	22c8      	movs	r2, #200	; 0xc8
 8008764:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	22fa      	movs	r2, #250	; 0xfa
 800876c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008776:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f640 1206 	movw	r2, #2310	; 0x906
 8008780:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f640 1206 	movw	r2, #2310	; 0x906
 8008792:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f640 421c 	movw	r2, #3100	; 0xc1c
 800879c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80087a6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f640 421c 	movw	r2, #3100	; 0xc1c
 80087b0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80087ba:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f641 022e 	movw	r2, #6190	; 0x182e
 80087c4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f641 3230 	movw	r2, #6960	; 0x1b30
 80087de:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f641 022e 	movw	r2, #6190	; 0x182e
 80087e8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	22fa      	movs	r2, #250	; 0xfa
 80087f0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80087fa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008804:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f241 1294 	movw	r2, #4500	; 0x1194
 800880e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008818:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	22c8      	movs	r2, #200	; 0xc8
 8008820:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f640 3222 	movw	r2, #2850	; 0xb22
 800882a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008834:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f640 721e 	movw	r2, #3870	; 0xf1e
 800884e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f241 222a 	movw	r2, #4650	; 0x122a
 8008858:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008862:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008884:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800888e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f641 1288 	movw	r2, #6536	; 0x1988
 80088a8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 80088ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80088ce:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2238      	movs	r2, #56	; 0x38
 80088d4:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2220      	movs	r2, #32
 80088da:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2270      	movs	r2, #112	; 0x70
 80088e0:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2210      	movs	r2, #16
 80088e6:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2264      	movs	r2, #100	; 0x64
 80088ec:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088f4:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	220f      	movs	r2, #15
 80088fa:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2234      	movs	r2, #52	; 0x34
 8008900:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22c8      	movs	r2, #200	; 0xc8
 8008906:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800890e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008916:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008936:	2300      	movs	r3, #0
 8008938:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008940:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2211      	movs	r2, #17
 8008982:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2202      	movs	r2, #2
 8008988:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2202      	movs	r2, #2
 8008994:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2208      	movs	r2, #8
 800899a:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	22ff      	movs	r2, #255	; 0xff
 80089dc:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	220b      	movs	r2, #11
 8008a16:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	220d      	movs	r2, #13
 8008a2a:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008a52:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2238      	movs	r2, #56	; 0x38
 8008a5e:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	22ff      	movs	r2, #255	; 0xff
 8008a64:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	221a      	movs	r2, #26
 8008a76:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2220      	movs	r2, #32
 8008a82:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2201      	movs	r2, #1
 8008a88:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	22cc      	movs	r2, #204	; 0xcc
 8008a8e:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	220b      	movs	r2, #11
 8008a94:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	22f5      	movs	r2, #245	; 0xf5
 8008aa0:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2209      	movs	r2, #9
 8008aa6:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2208      	movs	r2, #8
 8008abc:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2278      	movs	r2, #120	; 0x78
 8008ac2:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2200      	movs	r2, #0
 8008ace:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2207      	movs	r2, #7
 8008ad4:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2221      	movs	r2, #33	; 0x21
 8008ada:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2243      	movs	r2, #67	; 0x43
 8008ae0:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2210      	movs	r2, #16
 8008ae6:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2232      	movs	r2, #50	; 0x32
 8008aec:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2254      	movs	r2, #84	; 0x54
 8008af2:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2207      	movs	r2, #7
 8008af8:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2221      	movs	r2, #33	; 0x21
 8008afe:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2243      	movs	r2, #67	; 0x43
 8008b04:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2210      	movs	r2, #16
 8008b0a:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2243      	movs	r2, #67	; 0x43
 8008b16:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2200      	movs	r2, #0
 8008b22:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2207      	movs	r2, #7
 8008b28:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2221      	movs	r2, #33	; 0x21
 8008b2e:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2243      	movs	r2, #67	; 0x43
 8008b34:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2210      	movs	r2, #16
 8008b3a:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2232      	movs	r2, #50	; 0x32
 8008b40:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2254      	movs	r2, #84	; 0x54
 8008b46:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b4e:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b56:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	2210      	movs	r2, #16
 8008b62:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2200      	movs	r2, #0
 8008b68:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	220f      	movs	r2, #15
 8008b6e:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	220f      	movs	r2, #15
 8008b74:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	2208      	movs	r2, #8
 8008b7a:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	2208      	movs	r2, #8
 8008b80:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2201      	movs	r2, #1
 8008b86:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	2200      	movs	r2, #0
 8008b92:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	2200      	movs	r2, #0
 8008b98:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	220b      	movs	r2, #11
 8008ba8:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	2209      	movs	r2, #9
 8008bae:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	22c7      	movs	r2, #199	; 0xc7
 8008bde:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	22ff      	movs	r2, #255	; 0xff
 8008be4:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	22db      	movs	r2, #219	; 0xdb
 8008bea:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	2201      	movs	r2, #1
 8008c02:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	2221      	movs	r2, #33	; 0x21
 8008c08:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b08a      	sub	sp, #40	; 0x28
 8008c1e:	af04      	add	r7, sp, #16
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fe70 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d121      	bne.n	8008c98 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2207      	movs	r2, #7
 8008c58:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2205      	movs	r2, #5
 8008c5e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2208      	movs	r2, #8
 8008c74:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2238      	movs	r2, #56	; 0x38
 8008c7a:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	2207      	movs	r2, #7
 8008c80:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	2205      	movs	r2, #5
 8008c86:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	; 0x28
 8008ca8:	af04      	add	r7, sp, #16
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	9302      	str	r3, [sp, #8]
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff fe2b 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d121      	bne.n	8008d22 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	220f      	movs	r2, #15
 8008ce2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	220d      	movs	r2, #13
 8008ce8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	22b8      	movs	r2, #184	; 0xb8
 8008d04:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	220f      	movs	r2, #15
 8008d0a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	220d      	movs	r2, #13
 8008d10:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b08a      	sub	sp, #40	; 0x28
 8008d32:	af04      	add	r7, sp, #16
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
 8008d3a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f7ff fde6 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	223b      	movs	r2, #59	; 0x3b
 8008d72:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	9302      	str	r3, [sp, #8]
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fdbd 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	225b      	movs	r2, #91	; 0x5b
 8008dc4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b08a      	sub	sp, #40	; 0x28
 8008dd6:	af04      	add	r7, sp, #16
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff fd94 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8008e00:	4603      	mov	r3, r0
 8008e02:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d11a      	bne.n	8008e42 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2200      	movs	r2, #0
 8008e16:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	22b1      	movs	r2, #177	; 0xb1
 8008e1c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2200      	movs	r2, #0
 8008e22:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	22d4      	movs	r2, #212	; 0xd4
 8008e28:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008e30:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	2240      	movs	r2, #64	; 0x40
 8008e40:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b08a      	sub	sp, #40	; 0x28
 8008e52:	af04      	add	r7, sp, #16
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
 8008e5a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	9303      	str	r3, [sp, #12]
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fecf 	bl	8008c1a <VL53L1_preset_mode_standard_ranging_short_range>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11a      	bne.n	8008ebe <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2201      	movs	r2, #1
 8008e92:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2284      	movs	r2, #132	; 0x84
 8008e98:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	22b1      	movs	r2, #177	; 0xb1
 8008ea4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008eac:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2240      	movs	r2, #64	; 0x40
 8008ebc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b08a      	sub	sp, #40	; 0x28
 8008ece:	af04      	add	r7, sp, #16
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	9303      	str	r3, [sp, #12]
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	9302      	str	r3, [sp, #8]
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fed6 	bl	8008ca4 <VL53L1_preset_mode_standard_ranging_long_range>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d11a      	bne.n	8008f3a <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	2200      	movs	r2, #0
 8008f08:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2297      	movs	r2, #151	; 0x97
 8008f14:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	22b1      	movs	r2, #177	; 0xb1
 8008f20:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f28:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	2240      	movs	r2, #64	; 0x40
 8008f38:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b08a      	sub	sp, #40	; 0x28
 8008f4a:	af04      	add	r7, sp, #16
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	9303      	str	r3, [sp, #12]
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	9302      	str	r3, [sp, #8]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff ff2f 	bl	8008dd2 <VL53L1_preset_mode_timed_ranging>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f82:	6a39      	ldr	r1, [r7, #32]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f005 f978 	bl	800e27a <VL53L1_config_low_power_auto_mode>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08a      	sub	sp, #40	; 0x28
 8008f9e:	af04      	add	r7, sp, #16
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff ff43 	bl	8008e4e <VL53L1_preset_mode_timed_ranging_short_range>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd6:	6a39      	ldr	r1, [r7, #32]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f005 f94e 	bl	800e27a <VL53L1_config_low_power_auto_mode>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b08a      	sub	sp, #40	; 0x28
 8008ff2:	af04      	add	r7, sp, #16
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff ff57 	bl	8008eca <VL53L1_preset_mode_timed_ranging_long_range>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902a:	6a39      	ldr	r1, [r7, #32]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f005 f924 	bl	800e27a <VL53L1_config_low_power_auto_mode>
 8009032:	4603      	mov	r3, r0
 8009034:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b08a      	sub	sp, #40	; 0x28
 8009046:	af04      	add	r7, sp, #16
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009050:	2300      	movs	r3, #0
 8009052:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	9302      	str	r3, [sp, #8]
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fc5c 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 8009070:	4603      	mov	r3, r0
 8009072:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d116      	bne.n	80090aa <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2200      	movs	r2, #0
 8009080:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2200      	movs	r2, #0
 8009086:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	22b1      	movs	r2, #177	; 0xb1
 800908c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2200      	movs	r2, #0
 8009092:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	22d4      	movs	r2, #212	; 0xd4
 8009098:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	2210      	movs	r2, #16
 80090a8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80090aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b090      	sub	sp, #64	; 0x40
 80090ba:	af0a      	add	r7, sp, #40	; 0x28
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	68b8      	ldr	r0, [r7, #8]
 80090e0:	f7ff fc22 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d171      	bne.n	80091d4 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80090f6:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	9308      	str	r3, [sp, #32]
 80090fc:	2305      	movs	r3, #5
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	2304      	movs	r3, #4
 8009102:	9306      	str	r3, [sp, #24]
 8009104:	2303      	movs	r3, #3
 8009106:	9305      	str	r3, [sp, #20]
 8009108:	2302      	movs	r3, #2
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	2301      	movs	r3, #1
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	2300      	movs	r3, #0
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	2304      	movs	r3, #4
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2303      	movs	r3, #3
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	2302      	movs	r3, #2
 800911e:	2201      	movs	r2, #1
 8009120:	2100      	movs	r1, #0
 8009122:	2007      	movs	r0, #7
 8009124:	f001 fe1b 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912a:	3302      	adds	r3, #2
 800912c:	9308      	str	r3, [sp, #32]
 800912e:	2305      	movs	r3, #5
 8009130:	9307      	str	r3, [sp, #28]
 8009132:	2304      	movs	r3, #4
 8009134:	9306      	str	r3, [sp, #24]
 8009136:	2303      	movs	r3, #3
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	2302      	movs	r3, #2
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	2301      	movs	r3, #1
 8009140:	9303      	str	r3, [sp, #12]
 8009142:	2300      	movs	r3, #0
 8009144:	9302      	str	r3, [sp, #8]
 8009146:	2304      	movs	r3, #4
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	2303      	movs	r3, #3
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2302      	movs	r3, #2
 8009150:	2201      	movs	r2, #1
 8009152:	2100      	movs	r1, #0
 8009154:	2007      	movs	r0, #7
 8009156:	f001 fe92 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	2209      	movs	r2, #9
 800915e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	220b      	movs	r2, #11
 8009164:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	2209      	movs	r2, #9
 800916a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	220b      	movs	r2, #11
 8009170:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	2200      	movs	r2, #0
 8009176:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	2220      	movs	r2, #32
 800917c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	2200      	movs	r2, #0
 8009182:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	221a      	movs	r2, #26
 8009188:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	2200      	movs	r2, #0
 800918e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	2228      	movs	r2, #40	; 0x28
 8009194:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	2200      	movs	r2, #0
 800919a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	2221      	movs	r2, #33	; 0x21
 80091a0:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	22f5      	movs	r2, #245	; 0xf5
 80091a6:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2208      	movs	r2, #8
 80091ac:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2288      	movs	r2, #136	; 0x88
 80091b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f821 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	229b      	movs	r2, #155	; 0x9b
 80091cc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2226      	movs	r2, #38	; 0x26
 80091d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80091d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b090      	sub	sp, #64	; 0x40
 80091e4:	af0a      	add	r7, sp, #40	; 0x28
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f7ff ff52 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 8009212:	4603      	mov	r3, r0
 8009214:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d13e      	bne.n	800929c <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	2305      	movs	r3, #5
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	2304      	movs	r3, #4
 8009228:	9306      	str	r3, [sp, #24]
 800922a:	2303      	movs	r3, #3
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	230a      	movs	r3, #10
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	2309      	movs	r3, #9
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	2308      	movs	r3, #8
 8009238:	9302      	str	r3, [sp, #8]
 800923a:	2304      	movs	r3, #4
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	2303      	movs	r3, #3
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	2302      	movs	r3, #2
 8009244:	2201      	movs	r2, #1
 8009246:	2100      	movs	r1, #0
 8009248:	2007      	movs	r0, #7
 800924a:	f001 fd88 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	3302      	adds	r3, #2
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	2305      	movs	r3, #5
 8009256:	9307      	str	r3, [sp, #28]
 8009258:	2304      	movs	r3, #4
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	2303      	movs	r3, #3
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	230a      	movs	r3, #10
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	2309      	movs	r3, #9
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	2308      	movs	r3, #8
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	2304      	movs	r3, #4
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	2303      	movs	r3, #3
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	2302      	movs	r3, #2
 8009276:	2201      	movs	r2, #1
 8009278:	2100      	movs	r1, #0
 800927a:	2007      	movs	r0, #7
 800927c:	f001 fdff 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 ffbd 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	22bb      	movs	r2, #187	; 0xbb
 8009294:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	2226      	movs	r2, #38	; 0x26
 800929a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800929c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08c      	sub	sp, #48	; 0x30
 80092ac:	af06      	add	r7, sp, #24
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff ff83 	bl	80091e0 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	22db      	movs	r2, #219	; 0xdb
 80092ea:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80092ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b090      	sub	sp, #64	; 0x40
 80092fc:	af0a      	add	r7, sp, #40	; 0x28
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	9303      	str	r3, [sp, #12]
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff fec6 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 800932a:	4603      	mov	r3, r0
 800932c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800932e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d13e      	bne.n	80093b4 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	9308      	str	r3, [sp, #32]
 800933a:	230d      	movs	r3, #13
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	230c      	movs	r3, #12
 8009340:	9306      	str	r3, [sp, #24]
 8009342:	230b      	movs	r3, #11
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	230a      	movs	r3, #10
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	2309      	movs	r3, #9
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	2308      	movs	r3, #8
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	230c      	movs	r3, #12
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	230b      	movs	r3, #11
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	230a      	movs	r3, #10
 800935c:	2209      	movs	r2, #9
 800935e:	2108      	movs	r1, #8
 8009360:	2007      	movs	r0, #7
 8009362:	f001 fcfc 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	3302      	adds	r3, #2
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	230d      	movs	r3, #13
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	230c      	movs	r3, #12
 8009372:	9306      	str	r3, [sp, #24]
 8009374:	230b      	movs	r3, #11
 8009376:	9305      	str	r3, [sp, #20]
 8009378:	230a      	movs	r3, #10
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	2309      	movs	r3, #9
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	2308      	movs	r3, #8
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	230c      	movs	r3, #12
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	230b      	movs	r3, #11
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	230a      	movs	r3, #10
 800938e:	2209      	movs	r2, #9
 8009390:	2108      	movs	r1, #8
 8009392:	2007      	movs	r0, #7
 8009394:	f001 fd73 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 ff31 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2202      	movs	r2, #2
 80093ac:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	22bb      	movs	r2, #187	; 0xbb
 80093b2:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80093b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af06      	add	r7, sp, #24
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	9303      	str	r3, [sp, #12]
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	9302      	str	r3, [sp, #8]
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff ff83 	bl	80092f8 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 80093f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	22db      	movs	r2, #219	; 0xdb
 8009402:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b090      	sub	sp, #64	; 0x40
 8009414:	af0a      	add	r7, sp, #40	; 0x28
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff fe3a 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d166      	bne.n	800951c <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009454:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	9308      	str	r3, [sp, #32]
 800945a:	2304      	movs	r3, #4
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	2303      	movs	r3, #3
 8009460:	9306      	str	r3, [sp, #24]
 8009462:	2302      	movs	r3, #2
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	2301      	movs	r3, #1
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	2300      	movs	r3, #0
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	2307      	movs	r3, #7
 8009470:	9302      	str	r3, [sp, #8]
 8009472:	2304      	movs	r3, #4
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	2303      	movs	r3, #3
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	2302      	movs	r3, #2
 800947c:	2201      	movs	r2, #1
 800947e:	2100      	movs	r1, #0
 8009480:	2007      	movs	r0, #7
 8009482:	f001 fc6c 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	3302      	adds	r3, #2
 800948a:	9308      	str	r3, [sp, #32]
 800948c:	2304      	movs	r3, #4
 800948e:	9307      	str	r3, [sp, #28]
 8009490:	2303      	movs	r3, #3
 8009492:	9306      	str	r3, [sp, #24]
 8009494:	2302      	movs	r3, #2
 8009496:	9305      	str	r3, [sp, #20]
 8009498:	2301      	movs	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	2300      	movs	r3, #0
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	2307      	movs	r3, #7
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	2304      	movs	r3, #4
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	2303      	movs	r3, #3
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2302      	movs	r3, #2
 80094ae:	2201      	movs	r2, #1
 80094b0:	2100      	movs	r1, #0
 80094b2:	2007      	movs	r0, #7
 80094b4:	f001 fce3 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fea1 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2204      	movs	r2, #4
 80094cc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	2203      	movs	r2, #3
 80094d2:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	2242      	movs	r2, #66	; 0x42
 80094de:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2200      	movs	r2, #0
 80094e4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	2242      	movs	r2, #66	; 0x42
 80094ea:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2200      	movs	r2, #0
 80094f0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	2252      	movs	r2, #82	; 0x52
 80094f6:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	2200      	movs	r2, #0
 80094fc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	2266      	movs	r2, #102	; 0x66
 8009502:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2204      	movs	r2, #4
 8009508:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	22a4      	movs	r2, #164	; 0xa4
 800950e:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	229b      	movs	r2, #155	; 0x9b
 8009514:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	2226      	movs	r2, #38	; 0x26
 800951a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800951c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b090      	sub	sp, #64	; 0x40
 800952c:	af0a      	add	r7, sp, #40	; 0x28
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff fdae 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800955e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d178      	bne.n	8009658 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	2305      	movs	r3, #5
 800956c:	9307      	str	r3, [sp, #28]
 800956e:	2304      	movs	r3, #4
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	2303      	movs	r3, #3
 8009574:	9305      	str	r3, [sp, #20]
 8009576:	2302      	movs	r3, #2
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	2301      	movs	r3, #1
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	2304      	movs	r3, #4
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	2303      	movs	r3, #3
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	2302      	movs	r3, #2
 800958c:	2201      	movs	r2, #1
 800958e:	2100      	movs	r1, #0
 8009590:	2007      	movs	r0, #7
 8009592:	f001 fbe4 	bl	800ad5e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	3302      	adds	r3, #2
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	2305      	movs	r3, #5
 800959e:	9307      	str	r3, [sp, #28]
 80095a0:	2304      	movs	r3, #4
 80095a2:	9306      	str	r3, [sp, #24]
 80095a4:	2303      	movs	r3, #3
 80095a6:	9305      	str	r3, [sp, #20]
 80095a8:	2302      	movs	r3, #2
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	2301      	movs	r3, #1
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	2300      	movs	r3, #0
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	2304      	movs	r3, #4
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	2303      	movs	r3, #3
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2302      	movs	r3, #2
 80095be:	2201      	movs	r2, #1
 80095c0:	2100      	movs	r1, #0
 80095c2:	2007      	movs	r0, #7
 80095c4:	f001 fc5b 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fe19 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2209      	movs	r2, #9
 80095dc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	220b      	movs	r2, #11
 80095e2:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2221      	movs	r2, #33	; 0x21
 80095ee:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	2200      	movs	r2, #0
 80095f4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	221b      	movs	r2, #27
 80095fa:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2200      	movs	r2, #0
 8009600:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	2229      	movs	r2, #41	; 0x29
 8009606:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2200      	movs	r2, #0
 800960c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	2222      	movs	r2, #34	; 0x22
 8009612:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2209      	movs	r2, #9
 8009618:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	22f5      	movs	r2, #245	; 0xf5
 800961e:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2209      	movs	r2, #9
 8009624:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	220b      	movs	r2, #11
 800962a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2208      	movs	r2, #8
 8009640:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2288      	movs	r2, #136	; 0x88
 8009648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	229b      	movs	r2, #155	; 0x9b
 8009650:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	2226      	movs	r2, #38	; 0x26
 8009656:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	; 0x40
 8009668:	af0a      	add	r7, sp, #40	; 0x28
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7ff ff49 	bl	8009528 <VL53L1_preset_mode_histogram_long_range>
 8009696:	4603      	mov	r3, r0
 8009698:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800969a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d13b      	bne.n	800971a <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	9308      	str	r3, [sp, #32]
 80096a6:	2305      	movs	r3, #5
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	2304      	movs	r3, #4
 80096ac:	9306      	str	r3, [sp, #24]
 80096ae:	2303      	movs	r3, #3
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	230a      	movs	r3, #10
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	2309      	movs	r3, #9
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	2308      	movs	r3, #8
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	2304      	movs	r3, #4
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	2303      	movs	r3, #3
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	2302      	movs	r3, #2
 80096c8:	2201      	movs	r2, #1
 80096ca:	2100      	movs	r1, #0
 80096cc:	2007      	movs	r0, #7
 80096ce:	f001 fb46 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	3302      	adds	r3, #2
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	2305      	movs	r3, #5
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	2304      	movs	r3, #4
 80096de:	9306      	str	r3, [sp, #24]
 80096e0:	2303      	movs	r3, #3
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	230a      	movs	r3, #10
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	2309      	movs	r3, #9
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	2308      	movs	r3, #8
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	2304      	movs	r3, #4
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	2303      	movs	r3, #3
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	2302      	movs	r3, #2
 80096fa:	2201      	movs	r2, #1
 80096fc:	2100      	movs	r1, #0
 80096fe:	2007      	movs	r0, #7
 8009700:	f001 fbbd 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fd7b 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	22bb      	movs	r2, #187	; 0xbb
 8009718:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800971a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b08c      	sub	sp, #48	; 0x30
 800972a:	af06      	add	r7, sp, #24
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	9302      	str	r3, [sp, #8]
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff ff86 	bl	8009664 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800975c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	22db      	movs	r2, #219	; 0xdb
 8009768:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800976a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b090      	sub	sp, #64	; 0x40
 800977a:	af0a      	add	r7, sp, #40	; 0x28
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009784:	2300      	movs	r3, #0
 8009786:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fc87 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80097ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d178      	bne.n	80098a6 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	2303      	movs	r3, #3
 80097ba:	9307      	str	r3, [sp, #28]
 80097bc:	2302      	movs	r3, #2
 80097be:	9306      	str	r3, [sp, #24]
 80097c0:	2301      	movs	r3, #1
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	2302      	movs	r3, #2
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	2301      	movs	r3, #1
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	2300      	movs	r3, #0
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	2302      	movs	r3, #2
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	2302      	movs	r3, #2
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	2301      	movs	r3, #1
 80097da:	2201      	movs	r2, #1
 80097dc:	2100      	movs	r1, #0
 80097de:	2007      	movs	r0, #7
 80097e0:	f001 fabd 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	3302      	adds	r3, #2
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	2303      	movs	r3, #3
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	2302      	movs	r3, #2
 80097f0:	9306      	str	r3, [sp, #24]
 80097f2:	2301      	movs	r3, #1
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	2302      	movs	r3, #2
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	2301      	movs	r3, #1
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	2300      	movs	r3, #0
 8009800:	9302      	str	r3, [sp, #8]
 8009802:	2302      	movs	r3, #2
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	2302      	movs	r3, #2
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	2301      	movs	r3, #1
 800980c:	2201      	movs	r2, #1
 800980e:	2100      	movs	r1, #0
 8009810:	2007      	movs	r0, #7
 8009812:	f001 fb34 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fcf2 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	2205      	movs	r2, #5
 800982a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	2207      	movs	r2, #7
 8009830:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	2236      	movs	r2, #54	; 0x36
 800983c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	2200      	movs	r2, #0
 8009842:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	2228      	movs	r2, #40	; 0x28
 8009848:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	2200      	movs	r2, #0
 800984e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2244      	movs	r2, #68	; 0x44
 8009854:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	2200      	movs	r2, #0
 800985a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	2233      	movs	r2, #51	; 0x33
 8009860:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2205      	movs	r2, #5
 8009866:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	22f5      	movs	r2, #245	; 0xf5
 800986c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	2205      	movs	r2, #5
 8009872:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	2207      	movs	r2, #7
 8009878:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2208      	movs	r2, #8
 800988e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2248      	movs	r2, #72	; 0x48
 8009896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	229b      	movs	r2, #155	; 0x9b
 800989e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	2226      	movs	r2, #38	; 0x26
 80098a4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80098a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b090      	sub	sp, #64	; 0x40
 80098b6:	af0a      	add	r7, sp, #40	; 0x28
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	9303      	str	r3, [sp, #12]
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	9301      	str	r3, [sp, #4]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7ff ff49 	bl	8009776 <VL53L1_preset_mode_histogram_medium_range>
 80098e4:	4603      	mov	r3, r0
 80098e6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80098e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d13b      	bne.n	8009968 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	9308      	str	r3, [sp, #32]
 80098f4:	2303      	movs	r3, #3
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	2302      	movs	r3, #2
 80098fa:	9306      	str	r3, [sp, #24]
 80098fc:	2301      	movs	r3, #1
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	230a      	movs	r3, #10
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	2309      	movs	r3, #9
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	2308      	movs	r3, #8
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	2302      	movs	r3, #2
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	2302      	movs	r3, #2
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	2301      	movs	r3, #1
 8009916:	2201      	movs	r2, #1
 8009918:	2100      	movs	r1, #0
 800991a:	2007      	movs	r0, #7
 800991c:	f001 fa1f 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	3302      	adds	r3, #2
 8009924:	9308      	str	r3, [sp, #32]
 8009926:	2303      	movs	r3, #3
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	2302      	movs	r3, #2
 800992c:	9306      	str	r3, [sp, #24]
 800992e:	2301      	movs	r3, #1
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	230a      	movs	r3, #10
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	2309      	movs	r3, #9
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	2308      	movs	r3, #8
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	2302      	movs	r3, #2
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	2302      	movs	r3, #2
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	2301      	movs	r3, #1
 8009948:	2201      	movs	r2, #1
 800994a:	2100      	movs	r1, #0
 800994c:	2007      	movs	r0, #7
 800994e:	f001 fa96 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fc54 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	22bb      	movs	r2, #187	; 0xbb
 8009966:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	; 0x30
 8009978:	af06      	add	r7, sp, #24
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	9303      	str	r3, [sp, #12]
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	68b9      	ldr	r1, [r7, #8]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff ff86 	bl	80098b2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 80099a6:	4603      	mov	r3, r0
 80099a8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d102      	bne.n	80099b8 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	22db      	movs	r2, #219	; 0xdb
 80099b6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b090      	sub	sp, #64	; 0x40
 80099c8:	af0a      	add	r7, sp, #40	; 0x28
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	9303      	str	r3, [sp, #12]
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff fb60 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d178      	bne.n	8009af4 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	9308      	str	r3, [sp, #32]
 8009a06:	2302      	movs	r3, #2
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	9306      	str	r3, [sp, #24]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	9305      	str	r3, [sp, #20]
 8009a12:	2301      	movs	r3, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	2301      	movs	r3, #1
 8009a18:	9303      	str	r3, [sp, #12]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9302      	str	r3, [sp, #8]
 8009a1e:	2301      	movs	r3, #1
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	2301      	movs	r3, #1
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	2301      	movs	r3, #1
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2107      	movs	r1, #7
 8009a2c:	2007      	movs	r0, #7
 8009a2e:	f001 f996 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	3302      	adds	r3, #2
 8009a36:	9308      	str	r3, [sp, #32]
 8009a38:	2302      	movs	r3, #2
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	9306      	str	r3, [sp, #24]
 8009a40:	2301      	movs	r3, #1
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	2301      	movs	r3, #1
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9303      	str	r3, [sp, #12]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	2301      	movs	r3, #1
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	2301      	movs	r3, #1
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	2301      	movs	r3, #1
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2107      	movs	r1, #7
 8009a5e:	2007      	movs	r0, #7
 8009a60:	f001 fa0d 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fbcb 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	2203      	movs	r2, #3
 8009a78:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	2252      	movs	r2, #82	; 0x52
 8009a8a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2237      	movs	r2, #55	; 0x37
 8009a96:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	2266      	movs	r2, #102	; 0x66
 8009aa2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	2244      	movs	r2, #68	; 0x44
 8009aae:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	22f5      	movs	r2, #245	; 0xf5
 8009aba:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	2203      	movs	r2, #3
 8009ac0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	2205      	movs	r2, #5
 8009ac6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2208      	movs	r2, #8
 8009adc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2228      	movs	r2, #40	; 0x28
 8009ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	22bb      	movs	r2, #187	; 0xbb
 8009aec:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	2226      	movs	r2, #38	; 0x26
 8009af2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b090      	sub	sp, #64	; 0x40
 8009b04:	af0a      	add	r7, sp, #40	; 0x28
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	68b9      	ldr	r1, [r7, #8]
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff ff49 	bl	80099c4 <VL53L1_preset_mode_histogram_short_range>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d15a      	bne.n	8009bf4 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	2301      	movs	r3, #1
 8009b44:	9307      	str	r3, [sp, #28]
 8009b46:	2301      	movs	r3, #1
 8009b48:	9306      	str	r3, [sp, #24]
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9305      	str	r3, [sp, #20]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	9302      	str	r3, [sp, #8]
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	2300      	movs	r3, #0
 8009b64:	2200      	movs	r2, #0
 8009b66:	2107      	movs	r1, #7
 8009b68:	2007      	movs	r0, #7
 8009b6a:	f001 f8f8 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	3302      	adds	r3, #2
 8009b72:	9308      	str	r3, [sp, #32]
 8009b74:	2301      	movs	r3, #1
 8009b76:	9307      	str	r3, [sp, #28]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	9306      	str	r3, [sp, #24]
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9304      	str	r3, [sp, #16]
 8009b84:	2300      	movs	r3, #0
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9302      	str	r3, [sp, #8]
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	2301      	movs	r3, #1
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	2200      	movs	r2, #0
 8009b98:	2107      	movs	r1, #7
 8009b9a:	2007      	movs	r0, #7
 8009b9c:	f001 f96f 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fb2d 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2231      	movs	r2, #49	; 0x31
 8009bc6:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	2202      	movs	r2, #2
 8009bcc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2210      	movs	r2, #16
 8009be8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2218      	movs	r2, #24
 8009bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b090      	sub	sp, #64	; 0x40
 8009c04:	af0a      	add	r7, sp, #40	; 0x28
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	9303      	str	r3, [sp, #12]
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff fec9 	bl	80099c4 <VL53L1_preset_mode_histogram_short_range>
 8009c32:	4603      	mov	r3, r0
 8009c34:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d13b      	bne.n	8009cb6 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	9308      	str	r3, [sp, #32]
 8009c42:	2302      	movs	r3, #2
 8009c44:	9307      	str	r3, [sp, #28]
 8009c46:	2302      	movs	r3, #2
 8009c48:	9306      	str	r3, [sp, #24]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	2309      	movs	r3, #9
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	2308      	movs	r3, #8
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	2301      	movs	r3, #1
 8009c64:	2200      	movs	r2, #0
 8009c66:	2107      	movs	r1, #7
 8009c68:	2007      	movs	r0, #7
 8009c6a:	f001 f878 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	3302      	adds	r3, #2
 8009c72:	9308      	str	r3, [sp, #32]
 8009c74:	2302      	movs	r3, #2
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	2302      	movs	r3, #2
 8009c7a:	9306      	str	r3, [sp, #24]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	2301      	movs	r3, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	2309      	movs	r3, #9
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	2308      	movs	r3, #8
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2301      	movs	r3, #1
 8009c96:	2200      	movs	r2, #0
 8009c98:	2107      	movs	r1, #7
 8009c9a:	2007      	movs	r0, #7
 8009c9c:	f001 f8ef 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 faad 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	22bb      	movs	r2, #187	; 0xbb
 8009cb4:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b08c      	sub	sp, #48	; 0x30
 8009cc6:	af06      	add	r7, sp, #24
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7ff ff86 	bl	8009c00 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	22db      	movs	r2, #219	; 0xdb
 8009d04:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b08c      	sub	sp, #48	; 0x30
 8009d16:	af06      	add	r7, sp, #24
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff f9b9 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2201      	movs	r2, #1
 8009d54:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	2201      	movs	r2, #1
 8009d5a:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	2283      	movs	r2, #131	; 0x83
 8009d60:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	222e      	movs	r2, #46	; 0x2e
 8009d66:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b090      	sub	sp, #64	; 0x40
 8009d78:	af0a      	add	r7, sp, #40	; 0x28
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	9302      	str	r3, [sp, #8]
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f9ba 	bl	800a11a <VL53L1_preset_mode_histogram_multizone_long_range>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d151      	bne.n	8009e56 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009db4:	6838      	ldr	r0, [r7, #0]
 8009db6:	f00a fb1c 	bl	80143f2 <VL53L1_zone_preset_xtalk_planar>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	2209      	movs	r2, #9
 8009dc2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	2209      	movs	r2, #9
 8009dc8:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	9308      	str	r3, [sp, #32]
 8009dce:	2304      	movs	r3, #4
 8009dd0:	9307      	str	r3, [sp, #28]
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	9306      	str	r3, [sp, #24]
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9303      	str	r3, [sp, #12]
 8009de2:	2307      	movs	r3, #7
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	2304      	movs	r3, #4
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	2303      	movs	r3, #3
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	2302      	movs	r3, #2
 8009df0:	2201      	movs	r2, #1
 8009df2:	2100      	movs	r1, #0
 8009df4:	2007      	movs	r0, #7
 8009df6:	f000 ffb2 	bl	800ad5e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	9308      	str	r3, [sp, #32]
 8009e00:	2304      	movs	r3, #4
 8009e02:	9307      	str	r3, [sp, #28]
 8009e04:	2303      	movs	r3, #3
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	2302      	movs	r3, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	2300      	movs	r3, #0
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	2307      	movs	r3, #7
 8009e16:	9302      	str	r3, [sp, #8]
 8009e18:	2304      	movs	r3, #4
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2302      	movs	r3, #2
 8009e22:	2201      	movs	r2, #1
 8009e24:	2100      	movs	r1, #0
 8009e26:	2007      	movs	r0, #7
 8009e28:	f001 f829 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d108      	bne.n	8009e46 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	3302      	adds	r3, #2
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3e:	f003 f97d 	bl	800d13c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f9da 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b090      	sub	sp, #64	; 0x40
 8009e66:	af0a      	add	r7, sp, #40	; 0x28
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	9303      	str	r3, [sp, #12]
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	9302      	str	r3, [sp, #8]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff f911 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 8009e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d16e      	bne.n	8009f7e <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	9308      	str	r3, [sp, #32]
 8009ea4:	230c      	movs	r3, #12
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	230b      	movs	r3, #11
 8009eaa:	9306      	str	r3, [sp, #24]
 8009eac:	230a      	movs	r3, #10
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	2309      	movs	r3, #9
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	230f      	movs	r3, #15
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	230b      	movs	r3, #11
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	230a      	movs	r3, #10
 8009ec6:	2209      	movs	r2, #9
 8009ec8:	2108      	movs	r1, #8
 8009eca:	200f      	movs	r0, #15
 8009ecc:	f000 ff47 	bl	800ad5e <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	9308      	str	r3, [sp, #32]
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	9307      	str	r3, [sp, #28]
 8009eda:	230b      	movs	r3, #11
 8009edc:	9306      	str	r3, [sp, #24]
 8009ede:	230a      	movs	r3, #10
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	2309      	movs	r3, #9
 8009ee4:	9304      	str	r3, [sp, #16]
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	9303      	str	r3, [sp, #12]
 8009eea:	230f      	movs	r3, #15
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	230c      	movs	r3, #12
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	230b      	movs	r3, #11
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	230a      	movs	r3, #10
 8009ef8:	2209      	movs	r2, #9
 8009efa:	2108      	movs	r1, #8
 8009efc:	200f      	movs	r0, #15
 8009efe:	f000 ffbe 	bl	800ae7e <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f97c 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	2209      	movs	r2, #9
 8009f16:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2209      	movs	r2, #9
 8009f1c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2200      	movs	r2, #0
 8009f22:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	2221      	movs	r2, #33	; 0x21
 8009f28:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	2221      	movs	r2, #33	; 0x21
 8009f34:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	2229      	movs	r2, #41	; 0x29
 8009f40:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2200      	movs	r2, #0
 8009f46:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2229      	movs	r2, #41	; 0x29
 8009f4c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2209      	movs	r2, #9
 8009f52:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	22f5      	movs	r2, #245	; 0xf5
 8009f58:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	2209      	movs	r2, #9
 8009f5e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	2209      	movs	r2, #9
 8009f64:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	2209      	movs	r2, #9
 8009f6a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	2206      	movs	r2, #6
 8009f70:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	22bb      	movs	r2, #187	; 0xbb
 8009f76:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2226      	movs	r2, #38	; 0x26
 8009f7c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b08c      	sub	sp, #48	; 0x30
 8009f8e:	af06      	add	r7, sp, #24
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff ff53 	bl	8009e62 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	22db      	movs	r2, #219	; 0xdb
 8009fc4:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 8009fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b08c      	sub	sp, #48	; 0x30
 8009fd6:	af06      	add	r7, sp, #24
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	68b9      	ldr	r1, [r7, #8]
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fbb9 	bl	8009776 <VL53L1_preset_mode_histogram_medium_range>
 800a004:	4603      	mov	r3, r0
 800a006:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d12c      	bne.n	800a06a <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	2307      	movs	r3, #7
 800a016:	9303      	str	r3, [sp, #12]
 800a018:	2307      	movs	r3, #7
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	2302      	movs	r3, #2
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	2308      	movs	r3, #8
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	2304      	movs	r3, #4
 800a026:	2202      	movs	r2, #2
 800a028:	2108      	movs	r1, #8
 800a02a:	2004      	movs	r0, #4
 800a02c:	f00a f96c 	bl	8014308 <VL53L1_init_zone_config_structure>
 800a030:	4603      	mov	r3, r0
 800a032:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	3301      	adds	r3, #1
 800a03a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	3302      	adds	r3, #2
 800a04c:	461a      	mov	r2, r3
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a052:	f003 f873 	bl	800d13c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f8d0 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b08c      	sub	sp, #48	; 0x30
 800a07a:	af06      	add	r7, sp, #24
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a084:	2300      	movs	r3, #0
 800a086:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	9302      	str	r3, [sp, #8]
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7ff fc8e 	bl	80099c4 <VL53L1_preset_mode_histogram_short_range>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d12c      	bne.n	800a10e <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	2307      	movs	r3, #7
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	2307      	movs	r3, #7
 800a0be:	9302      	str	r3, [sp, #8]
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	2108      	movs	r1, #8
 800a0ce:	2004      	movs	r0, #4
 800a0d0:	f00a f91a 	bl	8014308 <VL53L1_init_zone_config_structure>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	785b      	ldrb	r3, [r3, #1]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a0e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d108      	bne.n	800a0fe <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	3302      	adds	r3, #2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0f6:	f003 f821 	bl	800d13c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f87e 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b08c      	sub	sp, #48	; 0x30
 800a11e:	af06      	add	r7, sp, #24
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a128:	2300      	movs	r3, #0
 800a12a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	68b9      	ldr	r1, [r7, #8]
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff f9ee 	bl	8009528 <VL53L1_preset_mode_histogram_long_range>
 800a14c:	4603      	mov	r3, r0
 800a14e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d12c      	bne.n	800a1b2 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	2307      	movs	r3, #7
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	2307      	movs	r3, #7
 800a162:	9302      	str	r3, [sp, #8]
 800a164:	2302      	movs	r3, #2
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	2308      	movs	r3, #8
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2304      	movs	r3, #4
 800a16e:	2202      	movs	r2, #2
 800a170:	2108      	movs	r1, #8
 800a172:	2004      	movs	r0, #4
 800a174:	f00a f8c8 	bl	8014308 <VL53L1_init_zone_config_structure>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	3301      	adds	r3, #1
 800a182:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d108      	bne.n	800a1a2 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	3302      	adds	r3, #2
 800a194:	461a      	mov	r2, r3
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19a:	f002 ffcf 	bl	800d13c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f82c 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b08a      	sub	sp, #40	; 0x28
 800a1c2:	af04      	add	r7, sp, #16
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	9302      	str	r3, [sp, #8]
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7fe fb9e 	bl	8008928 <VL53L1_preset_mode_standard_ranging>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	79db      	ldrb	r3, [r3, #7]
 800a24c:	b29b      	uxth	r3, r3
				<< 8)
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	7a1b      	ldrb	r3, [r3, #8]
 800a256:	b29b      	uxth	r3, r3
 800a258:	4413      	add	r3, r2
 800a25a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	b29b      	uxth	r3, r3
				<< 8)
 800a296:	021b      	lsls	r3, r3, #8
 800a298:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	789b      	ldrb	r3, [r3, #2]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	78db      	ldrb	r3, [r3, #3]
 800a2ac:	b29b      	uxth	r3, r3
				<< 8)
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	791b      	ldrb	r3, [r3, #4]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	79db      	ldrb	r3, [r3, #7]
 800a334:	b29b      	uxth	r3, r3
				<< 8)
 800a336:	021b      	lsls	r3, r3, #8
 800a338:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	7a1b      	ldrb	r3, [r3, #8]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4413      	add	r3, r2
 800a342:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	785b      	ldrb	r3, [r3, #1]
 800a374:	b29b      	uxth	r3, r3
				<< 8)
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	789b      	ldrb	r3, [r3, #2]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	4413      	add	r3, r2
 800a382:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	78db      	ldrb	r3, [r3, #3]
 800a38c:	b29b      	uxth	r3, r3
				<< 8)
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	791b      	ldrb	r3, [r3, #4]
 800a396:	b29b      	uxth	r3, r3
 800a398:	4413      	add	r3, r2
 800a39a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af06      	add	r7, sp, #24
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	9302      	str	r3, [sp, #8]
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7fe fe64 	bl	80090b6 <VL53L1_preset_mode_histogram_ranging>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	68b9      	ldr	r1, [r7, #8]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fefd 	bl	800a20a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3318      	adds	r3, #24
 800a428:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2230      	movs	r2, #48	; 0x30
 800a43e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a448:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a456:	b480      	push	{r7}
 800a458:	b085      	sub	sp, #20
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3318      	adds	r3, #24
 800a466:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	332c      	adds	r3, #44	; 0x2c
 800a46c:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	78fa      	ldrb	r2, [r7, #3]
 800a472:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2200      	movs	r2, #0
 800a478:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2202      	movs	r2, #2
 800a47e:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2200      	movs	r2, #0
 800a484:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2200      	movs	r2, #0
 800a48a:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2202      	movs	r2, #2
 800a49c:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	735a      	strb	r2, [r3, #13]

}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3318      	adds	r3, #24
 800a4c8:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	332c      	adds	r3, #44	; 0x2c
 800a4ce:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d115      	bne.n	800a50a <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	735a      	strb	r2, [r3, #13]
 800a508:	e0be      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	7a1b      	ldrb	r3, [r3, #8]
 800a50e:	2bff      	cmp	r3, #255	; 0xff
 800a510:	d103      	bne.n	800a51a <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2280      	movs	r2, #128	; 0x80
 800a516:	721a      	strb	r2, [r3, #8]
 800a518:	e005      	b.n	800a526 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7a1b      	ldrb	r3, [r3, #8]
 800a51e:	3301      	adds	r3, #1
 800a520:	b2da      	uxtb	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	7a19      	ldrb	r1, [r3, #8]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f103 0209 	add.w	r2, r3, #9
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	330a      	adds	r3, #10
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f002 fdc2 	bl	800d0be <VL53L1_update_internal_stream_counters>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	7adb      	ldrb	r3, [r3, #11]
 800a542:	f083 0302 	eor.w	r3, r3, #2
 800a546:	b2da      	uxtb	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	79db      	ldrb	r3, [r3, #7]
 800a550:	3b03      	subs	r3, #3
 800a552:	2b05      	cmp	r3, #5
 800a554:	f200 8082 	bhi.w	800a65c <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a65d 	.word	0x0800a65d
 800a568:	0800a65d 	.word	0x0800a65d
 800a56c:	0800a5cb 	.word	0x0800a5cb
 800a570:	0800a601 	.word	0x0800a601
 800a574:	0800a62b 	.word	0x0800a62b

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	dd03      	ble.n	800a58e <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2206      	movs	r2, #6
 800a58a:	71da      	strb	r2, [r3, #7]
 800a58c:	e00d      	b.n	800a5aa <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a598:	429a      	cmp	r2, r3
 800a59a:	d303      	bcc.n	800a5a4 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2208      	movs	r2, #8
 800a5a0:	71da      	strb	r2, [r3, #7]
 800a5a2:	e002      	b.n	800a5aa <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2207      	movs	r2, #7
 800a5a8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	735a      	strb	r2, [r3, #13]

			break;
 800a5c8:	e05e      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d303      	bcc.n	800a5f8 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a5f6:	e047      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2207      	movs	r2, #7
 800a5fc:	71da      	strb	r2, [r3, #7]
			break;
 800a5fe:	e043      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	7b5b      	ldrb	r3, [r3, #13]
 800a604:	3301      	adds	r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a616:	429a      	cmp	r2, r3
 800a618:	d303      	bcc.n	800a622 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2208      	movs	r2, #8
 800a61e:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a620:	e032      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2207      	movs	r2, #7
 800a626:	71da      	strb	r2, [r3, #7]
			break;
 800a628:	e02e      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	7b1b      	ldrb	r3, [r3, #12]
 800a634:	f083 0301 	eor.w	r3, r3, #1
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a648:	429a      	cmp	r2, r3
 800a64a:	d303      	bcc.n	800a654 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2208      	movs	r2, #8
 800a650:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a652:	e019      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2207      	movs	r2, #7
 800a658:	71da      	strb	r2, [r3, #7]
			break;
 800a65a:	e015      	b.n	800a688 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2203      	movs	r2, #3
 800a660:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2202      	movs	r2, #2
 800a678:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	735a      	strb	r2, [r3, #13]
			break;
 800a686:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a694:	b480      	push	{r7}
 800a696:	b08d      	sub	sp, #52	; 0x34
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	332c      	adds	r3, #44	; 0x2c
 800a6b6:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a6be:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a6c6:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a6ce:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a6ee:	f003 031f 	and.w	r3, r3, #31
 800a6f2:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	78db      	ldrb	r3, [r3, #3]
 800a6f8:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a700:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a704:	2b00      	cmp	r3, #0
 800a706:	bf14      	ite	ne
 800a708:	2301      	movne	r3, #1
 800a70a:	2300      	moveq	r3, #0
 800a70c:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a70e:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a714:	111b      	asrs	r3, r3, #4
 800a716:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a720:	7c7b      	ldrb	r3, [r7, #17]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d008      	beq.n	800a738 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a72c:	111b      	asrs	r3, r3, #4
 800a72e:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a73e:	f003 0320 	and.w	r3, r3, #32
 800a742:	2b00      	cmp	r3, #0
 800a744:	d04e      	beq.n	800a7e4 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	79db      	ldrb	r3, [r3, #7]
 800a74a:	2b06      	cmp	r3, #6
 800a74c:	d109      	bne.n	800a762 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a74e:	7c7b      	ldrb	r3, [r7, #17]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d14a      	bne.n	800a7ea <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a754:	7cfb      	ldrb	r3, [r7, #19]
 800a756:	2b12      	cmp	r3, #18
 800a758:	d047      	beq.n	800a7ea <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a75a:	23ef      	movs	r3, #239	; 0xef
 800a75c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a760:	e043      	b.n	800a7ea <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	7a1b      	ldrb	r3, [r3, #8]
 800a766:	7cba      	ldrb	r2, [r7, #18]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d002      	beq.n	800a772 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a76c:	23ee      	movs	r3, #238	; 0xee
 800a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	7adb      	ldrb	r3, [r3, #11]
 800a776:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d002      	beq.n	800a784 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a77e:	23ed      	movs	r3, #237	; 0xed
 800a780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	7b5b      	ldrb	r3, [r3, #13]
 800a788:	4619      	mov	r1, r3
		expected_stream_count =
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	460b      	mov	r3, r1
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	4413      	add	r3, r2
 800a796:	3302      	adds	r3, #2
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	7b5b      	ldrb	r3, [r3, #13]
 800a7a0:	4619      	mov	r1, r3
		expected_gph_id =
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3303      	adds	r3, #3
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a7b4:	7c3a      	ldrb	r2, [r7, #16]
 800a7b6:	7cbb      	ldrb	r3, [r7, #18]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d00a      	beq.n	800a7d2 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <VL53L1_check_ll_driver_rd_state+0x138>
 800a7c6:	7cbb      	ldrb	r3, [r7, #18]
 800a7c8:	2bff      	cmp	r3, #255	; 0xff
 800a7ca:	d002      	beq.n	800a7d2 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a7cc:	23ec      	movs	r3, #236	; 0xec
 800a7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a7d2:	7bfa      	ldrb	r2, [r7, #15]
 800a7d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d005      	beq.n	800a7e8 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a7dc:	23eb      	movs	r3, #235	; 0xeb
 800a7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7e2:	e002      	b.n	800a7ea <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a7e4:	bf00      	nop
 800a7e6:	e000      	b.n	800a7ea <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a7e8:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a7ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3734      	adds	r7, #52	; 0x34
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b088      	sub	sp, #32
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a802:	2300      	movs	r3, #0
 800a804:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	3318      	adds	r3, #24
 800a80a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a812:	3308      	adds	r3, #8
 800a814:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	332c      	adds	r3, #44	; 0x2c
 800a81a:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a822:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d11b      	bne.n	800a86a <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2203      	movs	r2, #3
 800a836:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2200      	movs	r2, #0
 800a83c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2200      	movs	r2, #0
 800a842:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2200      	movs	r2, #0
 800a848:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	2202      	movs	r2, #2
 800a84e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2200      	movs	r2, #0
 800a854:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2200      	movs	r2, #0
 800a85a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	773b      	strb	r3, [r7, #28]
 800a868:	e0b1      	b.n	800a9ce <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	791b      	ldrb	r3, [r3, #4]
 800a86e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	799b      	ldrb	r3, [r3, #6]
 800a874:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	785b      	ldrb	r3, [r3, #1]
 800a87a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2bff      	cmp	r3, #255	; 0xff
 800a882:	d103      	bne.n	800a88c <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2280      	movs	r2, #128	; 0x80
 800a888:	705a      	strb	r2, [r3, #1]
 800a88a:	e005      	b.n	800a898 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	785b      	ldrb	r3, [r3, #1]
 800a890:	3301      	adds	r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	7859      	ldrb	r1, [r3, #1]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1c9a      	adds	r2, r3, #2
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3303      	adds	r3, #3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f002 fc0a 	bl	800d0be <VL53L1_update_internal_stream_counters>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	f083 0302 	eor.w	r3, r3, #2
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	d053      	beq.n	800a96c <VL53L1_update_ll_driver_cfg_state+0x172>
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	dc69      	bgt.n	800a99c <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d002      	beq.n	800a8d2 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d02d      	beq.n	800a92c <VL53L1_update_ll_driver_cfg_state+0x132>
 800a8d0:	e064      	b.n	800a99c <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d909      	bls.n	800a8fa <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	795b      	ldrb	r3, [r3, #5]
 800a8f0:	f083 0301 	eor.w	r3, r3, #1
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2201      	movs	r2, #1
 800a90e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2200      	movs	r2, #0
 800a914:	70da      	strb	r2, [r3, #3]
 800a916:	e005      	b.n	800a924 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2200      	movs	r2, #0
 800a91c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2201      	movs	r2, #1
 800a922:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2204      	movs	r2, #4
 800a928:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800a92a:	e050      	b.n	800a9ce <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	799b      	ldrb	r3, [r3, #6]
 800a930:	3301      	adds	r3, #1
 800a932:	b2da      	uxtb	r2, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a942:	429a      	cmp	r2, r3
 800a944:	d940      	bls.n	800a9c8 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2200      	movs	r2, #0
 800a94a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	795b      	ldrb	r3, [r3, #5]
 800a950:	f083 0301 	eor.w	r3, r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d031      	beq.n	800a9c8 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	2205      	movs	r2, #5
 800a968:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800a96a:	e02d      	b.n	800a9c8 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	799b      	ldrb	r3, [r3, #6]
 800a970:	3301      	adds	r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a982:	429a      	cmp	r2, r3
 800a984:	d922      	bls.n	800a9cc <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2200      	movs	r2, #0
 800a98a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	795b      	ldrb	r3, [r3, #5]
 800a990:	f083 0301 	eor.w	r3, r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	715a      	strb	r2, [r3, #5]
			}
			break;
 800a99a:	e017      	b.n	800a9cc <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2203      	movs	r2, #3
 800a9a0:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	719a      	strb	r2, [r3, #6]
			break;
 800a9c6:	e002      	b.n	800a9ce <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a9cc:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d11d      	bne.n	800aa14 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a9d8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800a9da:	7f3b      	ldrb	r3, [r7, #28]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b2d8      	uxtb	r0, r3
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3302      	adds	r3, #2
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	7b5b      	ldrb	r3, [r3, #13]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	7f7b      	ldrb	r3, [r7, #29]
 800a9fa:	f083 0302 	eor.w	r3, r3, #2
 800a9fe:	b2d8      	uxtb	r0, r3
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	460b      	mov	r3, r1
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3303      	adds	r3, #3
 800aa0e:	4602      	mov	r2, r0
 800aa10:	701a      	strb	r2, [r3, #0]
 800aa12:	e013      	b.n	800aa3c <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800aa14:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800aa16:	68f9      	ldr	r1, [r7, #12]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	440b      	add	r3, r1
 800aa22:	3302      	adds	r3, #2
 800aa24:	7f3a      	ldrb	r2, [r7, #28]
 800aa26:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800aa28:	7fba      	ldrb	r2, [r7, #30]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	440b      	add	r3, r1
 800aa36:	3303      	adds	r3, #3
 800aa38:	7f7a      	ldrb	r2, [r7, #29]
 800aa3a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800aa3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7c1a      	ldrb	r2, [r3, #16]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	7c52      	ldrb	r2, [r2, #17]
 800aa62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	3302      	adds	r3, #2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	7c92      	ldrb	r2, [r2, #18]
 800aa6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	3303      	adds	r3, #3
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	7cd2      	ldrb	r2, [r2, #19]
 800aa76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7d12      	ldrb	r2, [r2, #20]
 800aa80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3305      	adds	r3, #5
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	7d52      	ldrb	r2, [r2, #21]
 800aa8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	3306      	adds	r3, #6
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	7d92      	ldrb	r2, [r2, #22]
 800aa94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	3307      	adds	r3, #7
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	7dd2      	ldrb	r2, [r2, #23]
 800aa9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	7e12      	ldrb	r2, [r2, #24]
 800aaa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	3309      	adds	r3, #9
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	7e52      	ldrb	r2, [r2, #25]
 800aab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	330a      	adds	r3, #10
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7e92      	ldrb	r2, [r2, #26]
 800aabc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	330b      	adds	r3, #11
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	7ed2      	ldrb	r2, [r2, #27]
 800aac6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	330c      	adds	r3, #12
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	7f12      	ldrb	r2, [r2, #28]
 800aad0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	330d      	adds	r3, #13
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	7f52      	ldrb	r2, [r2, #29]
 800aada:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	330e      	adds	r3, #14
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	7f92      	ldrb	r2, [r2, #30]
 800aae4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	330f      	adds	r3, #15
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	7fd2      	ldrb	r2, [r2, #31]
 800aaee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	3310      	adds	r3, #16
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800aafa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	3311      	adds	r3, #17
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ab06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	3312      	adds	r3, #18
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ab12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3313      	adds	r3, #19
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ab1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	3314      	adds	r3, #20
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ab2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	3315      	adds	r3, #21
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ab36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	3316      	adds	r3, #22
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ab42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	3317      	adds	r3, #23
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ab4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3318      	adds	r3, #24
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ab5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	3319      	adds	r3, #25
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ab66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	331a      	adds	r3, #26
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ab72:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	331b      	adds	r3, #27
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ab7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	331c      	adds	r3, #28
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ab8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	331d      	adds	r3, #29
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ab96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	331e      	adds	r3, #30
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800aba2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	331f      	adds	r3, #31
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800abae:	701a      	strb	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	22ff      	movs	r2, #255	; 0xff
 800abc8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	22ff      	movs	r2, #255	; 0xff
 800abda:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abe2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abea:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abf2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abfa:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac02:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac12:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac22:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac2a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac32:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac3a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac42:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac4a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac52:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac62:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac72:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	22ff      	movs	r2, #255	; 0xff
 800ac78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2210      	movs	r2, #16
 800ac9c:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	79fa      	ldrb	r2, [r7, #7]
 800aca2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800aca4:	2300      	movs	r3, #0
 800aca6:	73fb      	strb	r3, [r7, #15]
 800aca8:	e017      	b.n	800acda <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800acaa:	7bfa      	ldrb	r2, [r7, #15]
 800acac:	4613      	mov	r3, r2
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	4413      	add	r3, r2
 800acb8:	3304      	adds	r3, #4
 800acba:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2203      	movs	r2, #3
 800acc0:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2203      	movs	r2, #3
 800acc6:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2204      	movs	r2, #4
 800accc:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	3301      	adds	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	7bfa      	ldrb	r2, [r7, #15]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d3e2      	bcc.n	800acaa <V53L1_init_zone_results_structure+0x22>
	}
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b087      	sub	sp, #28
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ad00:	3308      	adds	r3, #8
 800ad02:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800ad08:	2310      	movs	r3, #16
 800ad0a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ad12:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
 800ad18:	e016      	b.n	800ad48 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800ad1a:	7dfa      	ldrb	r2, [r7, #23]
 800ad1c:	68b9      	ldr	r1, [r7, #8]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	440b      	add	r3, r1
 800ad28:	3304      	adds	r3, #4
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800ad2e:	7dfa      	ldrb	r2, [r7, #23]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	440b      	add	r3, r1
 800ad3c:	3306      	adds	r3, #6
 800ad3e:	2200      	movs	r2, #0
 800ad40:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	3301      	adds	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	7dfa      	ldrb	r2, [r7, #23]
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d3e4      	bcc.n	800ad1a <V53L1_init_zone_dss_configs+0x28>
	}
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800ad5e:	b490      	push	{r4, r7}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	71fb      	strb	r3, [r7, #7]
 800ad70:	4603      	mov	r3, r0
 800ad72:	71bb      	strb	r3, [r7, #6]
 800ad74:	460b      	mov	r3, r1
 800ad76:	717b      	strb	r3, [r7, #5]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800ad7c:	79bb      	ldrb	r3, [r7, #6]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	4413      	add	r3, r2
 800ad86:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800ad8c:	793b      	ldrb	r3, [r7, #4]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	797b      	ldrb	r3, [r7, #5]
 800ad94:	4413      	add	r3, r2
 800ad96:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800ad9c:	7d3b      	ldrb	r3, [r7, #20]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	7c3b      	ldrb	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800adac:	7f3b      	ldrb	r3, [r7, #28]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	7e3b      	ldrb	r3, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800adbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adc8:	4413      	add	r3, r2
 800adca:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800add0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800add4:	011b      	lsls	r3, r3, #4
 800add6:	b2da      	uxtb	r2, r3
 800add8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800addc:	4413      	add	r3, r2
 800adde:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ae0a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800ae0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae10:	011b      	lsls	r3, r3, #4
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae18:	4413      	add	r3, r2
 800ae1a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ae26:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae64:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae6c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]

}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bc90      	pop	{r4, r7}
 800ae7c:	4770      	bx	lr

0800ae7e <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800ae7e:	b490      	push	{r4, r7}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	4604      	mov	r4, r0
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	71fb      	strb	r3, [r7, #7]
 800ae90:	4603      	mov	r3, r0
 800ae92:	71bb      	strb	r3, [r7, #6]
 800ae94:	460b      	mov	r3, r1
 800ae96:	717b      	strb	r3, [r7, #5]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800ae9c:	79bb      	ldrb	r3, [r7, #6]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	4413      	add	r3, r2
 800aea6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800aeac:	793b      	ldrb	r3, [r7, #4]
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	797b      	ldrb	r3, [r7, #5]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800aebc:	7d3b      	ldrb	r3, [r7, #20]
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	7c3b      	ldrb	r3, [r7, #16]
 800aec4:	4413      	add	r3, r2
 800aec6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	789a      	ldrb	r2, [r3, #2]
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	78da      	ldrb	r2, [r3, #3]
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	789a      	ldrb	r2, [r3, #2]
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	78da      	ldrb	r2, [r3, #3]
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	791a      	ldrb	r2, [r3, #4]
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f897 2020 	ldrb.w	r2, [r7, #32]
 800af0a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800af0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	b2da      	uxtb	r2, r3
 800af14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af18:	4413      	add	r3, r2
 800af1a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800af26:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	2200      	movs	r2, #0
 800af2c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800af2e:	7f3b      	ldrb	r3, [r7, #28]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	b2da      	uxtb	r2, r3
 800af34:	7e3b      	ldrb	r3, [r7, #24]
 800af36:	4413      	add	r3, r2
 800af38:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800af3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	b2da      	uxtb	r2, r3
 800af46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af4a:	4413      	add	r3, r2
 800af4c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800af52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af5e:	4413      	add	r3, r2
 800af60:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	7bda      	ldrb	r2, [r3, #15]
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	7c1a      	ldrb	r2, [r3, #16]
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	7c5a      	ldrb	r2, [r3, #17]
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af84:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af8c:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	2200      	movs	r2, #0
 800af92:	701a      	strb	r2, [r3, #0]
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bc90      	pop	{r4, r7}
 800af9c:	4770      	bx	lr

0800af9e <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b087      	sub	sp, #28
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	460b      	mov	r3, r1
 800afa8:	607a      	str	r2, [r7, #4]
 800afaa:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	220c      	movs	r2, #12
 800afc6:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800afc8:	897b      	ldrh	r3, [r7, #10]
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800affe:	2300      	movs	r3, #0
 800b000:	82fb      	strh	r3, [r7, #22]
 800b002:	e015      	b.n	800b030 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b004:	8afa      	ldrh	r2, [r7, #22]
 800b006:	897b      	ldrh	r3, [r7, #10]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d207      	bcs.n	800b01c <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b00c:	8afb      	ldrh	r3, [r7, #22]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	3302      	adds	r3, #2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	605a      	str	r2, [r3, #4]
 800b01a:	e006      	b.n	800b02a <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b01c:	8afb      	ldrh	r3, [r7, #22]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	3302      	adds	r3, #2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	2200      	movs	r2, #0
 800b028:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b02a:	8afb      	ldrh	r3, [r7, #22]
 800b02c:	3301      	adds	r3, #1
 800b02e:	82fb      	strh	r3, [r7, #22]
 800b030:	8afb      	ldrh	r3, [r7, #22]
 800b032:	2b0b      	cmp	r3, #11
 800b034:	d9e6      	bls.n	800b004 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	603a      	str	r2, [r7, #0]
 800b04e:	80fb      	strh	r3, [r7, #6]
 800b050:	460b      	mov	r3, r1
 800b052:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b05c:	88fb      	ldrh	r3, [r7, #6]
 800b05e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b060:	2300      	movs	r3, #0
 800b062:	81fb      	strh	r3, [r7, #14]
 800b064:	e00e      	b.n	800b084 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b066:	88ba      	ldrh	r2, [r7, #4]
 800b068:	89fb      	ldrh	r3, [r7, #14]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	3b01      	subs	r3, #1
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	4413      	add	r3, r2
 800b072:	89ba      	ldrh	r2, [r7, #12]
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b078:	89bb      	ldrh	r3, [r7, #12]
 800b07a:	0a1b      	lsrs	r3, r3, #8
 800b07c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b07e:	89fb      	ldrh	r3, [r7, #14]
 800b080:	3301      	adds	r3, #1
 800b082:	81fb      	strh	r3, [r7, #14]
 800b084:	89fa      	ldrh	r2, [r7, #14]
 800b086:	88bb      	ldrh	r3, [r7, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d3ec      	bcc.n	800b066 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b08c:	bf00      	nop
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	6039      	str	r1, [r7, #0]
 800b0a4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b0aa:	e00a      	b.n	800b0c2 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b0ac:	89fb      	ldrh	r3, [r7, #14]
 800b0ae:	021b      	lsls	r3, r3, #8
 800b0b0:	b21a      	sxth	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	1c59      	adds	r1, r3, #1
 800b0b6:	6039      	str	r1, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	b21b      	sxth	r3, r3
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	b21b      	sxth	r3, r3
 800b0c0:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	1e5a      	subs	r2, r3, #1
 800b0c6:	80fa      	strh	r2, [r7, #6]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1ef      	bne.n	800b0ac <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b0cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b085      	sub	sp, #20
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	603a      	str	r2, [r7, #0]
 800b0e4:	80fb      	strh	r3, [r7, #6]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	81fb      	strh	r3, [r7, #14]
 800b0fa:	e00f      	b.n	800b11c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b0fc:	88ba      	ldrh	r2, [r7, #4]
 800b0fe:	89fb      	ldrh	r3, [r7, #14]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	4413      	add	r3, r2
 800b108:	89ba      	ldrh	r2, [r7, #12]
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b10e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b112:	121b      	asrs	r3, r3, #8
 800b114:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b116:	89fb      	ldrh	r3, [r7, #14]
 800b118:	3301      	adds	r3, #1
 800b11a:	81fb      	strh	r3, [r7, #14]
 800b11c:	89fa      	ldrh	r2, [r7, #14]
 800b11e:	88bb      	ldrh	r3, [r7, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	d3eb      	bcc.n	800b0fc <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b132:	b480      	push	{r7}
 800b134:	b085      	sub	sp, #20
 800b136:	af00      	add	r7, sp, #0
 800b138:	4603      	mov	r3, r0
 800b13a:	6039      	str	r1, [r7, #0]
 800b13c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b13e:	2300      	movs	r3, #0
 800b140:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	b25b      	sxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	da0e      	bge.n	800b16a <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b14c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b150:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b152:	e00a      	b.n	800b16a <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b158:	021b      	lsls	r3, r3, #8
 800b15a:	b21a      	sxth	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	1c59      	adds	r1, r3, #1
 800b160:	6039      	str	r1, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	b21b      	sxth	r3, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	80fa      	strh	r2, [r7, #6]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1ef      	bne.n	800b154 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	460b      	mov	r3, r1
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b19e:	2300      	movs	r3, #0
 800b1a0:	82fb      	strh	r3, [r7, #22]
 800b1a2:	e00e      	b.n	800b1c2 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b1a4:	897a      	ldrh	r2, [r7, #10]
 800b1a6:	8afb      	ldrh	r3, [r7, #22]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	0a1b      	lsrs	r3, r3, #8
 800b1ba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b1bc:	8afb      	ldrh	r3, [r7, #22]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	82fb      	strh	r3, [r7, #22]
 800b1c2:	8afa      	ldrh	r2, [r7, #22]
 800b1c4:	897b      	ldrh	r3, [r7, #10]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d3ec      	bcc.n	800b1a4 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	371c      	adds	r7, #28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6039      	str	r1, [r7, #0]
 800b1e2:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b1e8:	e007      	b.n	800b1fa <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	021a      	lsls	r2, r3, #8
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	1c59      	adds	r1, r3, #1
 800b1f2:	6039      	str	r1, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	80fa      	strh	r2, [r7, #6]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1f2      	bne.n	800b1ea <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b204:	68fb      	ldr	r3, [r7, #12]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	4603      	mov	r3, r0
 800b21a:	6039      	str	r1, [r7, #0]
 800b21c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	da0b      	bge.n	800b244 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b22c:	f04f 33ff 	mov.w	r3, #4294967295
 800b230:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b232:	e007      	b.n	800b244 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	021a      	lsls	r2, r3, #8
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	1c59      	adds	r1, r3, #1
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b244:	88fb      	ldrh	r3, [r7, #6]
 800b246:	1e5a      	subs	r2, r3, #1
 800b248:	80fa      	strh	r2, [r7, #6]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1f2      	bne.n	800b234 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b24e:	68fb      	ldr	r3, [r7, #12]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d107      	bne.n	800b284 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	461a      	mov	r2, r3
 800b278:	2127      	movs	r1, #39	; 0x27
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f009 f9ce 	bl	801461c <VL53L1_WrByte>
 800b280:	4603      	mov	r3, r0
 800b282:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3318      	adds	r3, #24
 800b2a4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	78fa      	ldrb	r2, [r7, #3]
 800b2aa:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	2185      	movs	r1, #133	; 0x85
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f009 f9af 	bl	801461c <VL53L1_WrByte>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b2da:	2101      	movs	r1, #1
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff ffd7 	bl	800b290 <VL53L1_set_firmware_enable_register>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ffc5 	bl	800b290 <VL53L1_set_firmware_enable_register>
 800b306:	4603      	mov	r3, r0
 800b308:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b30a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3318      	adds	r3, #24
 800b32a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	78fa      	ldrb	r2, [r7, #3]
 800b330:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b33a:	461a      	mov	r2, r3
 800b33c:	2183      	movs	r1, #131	; 0x83
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f009 f96c 	bl	801461c <VL53L1_WrByte>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b360:	2101      	movs	r1, #1
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff ffd7 	bl	800b316 <VL53L1_set_powerforce_register>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b384:	2100      	movs	r1, #0
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff ffc5 	bl	800b316 <VL53L1_set_powerforce_register>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b3bc:	461a      	mov	r2, r3
 800b3be:	2186      	movs	r1, #134	; 0x86
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f009 f92b 	bl	801461c <VL53L1_WrByte>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	4603      	mov	r3, r0
 800b3de:	460a      	mov	r2, r1
 800b3e0:	80fb      	strh	r3, [r7, #6]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f002 ffeb 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 800b3fa:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b3fc:	797b      	ldrb	r3, [r7, #5]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f003 fbd6 	bl	800ebb0 <VL53L1_decode_vcsel_period>
 800b404:	4603      	mov	r3, r0
 800b406:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	4613      	mov	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4413      	add	r3, r2
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	099b      	lsrs	r3, r3, #6
 800b418:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b41a:	7cfa      	ldrb	r2, [r7, #19]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b42a:	68fb      	ldr	r3, [r7, #12]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b434:	b480      	push	{r7}
 800b436:	b089      	sub	sp, #36	; 0x24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	461a      	mov	r2, r3
 800b442:	4603      	mov	r3, r0
 800b444:	817b      	strh	r3, [r7, #10]
 800b446:	460b      	mov	r3, r1
 800b448:	813b      	strh	r3, [r7, #8]
 800b44a:	4613      	mov	r3, r2
 800b44c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	4a23      	ldr	r2, [pc, #140]	; (800b4f4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b468:	fb82 1203 	smull	r1, r2, r2, r3
 800b46c:	1192      	asrs	r2, r2, #6
 800b46e:	17db      	asrs	r3, r3, #31
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	da03      	bge.n	800b484 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b47c:	897b      	ldrh	r3, [r7, #10]
 800b47e:	425b      	negs	r3, r3
 800b480:	b29b      	uxth	r3, r3
 800b482:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b484:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	da03      	bge.n	800b494 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b48c:	893b      	ldrh	r3, [r7, #8]
 800b48e:	425b      	negs	r3, r3
 800b490:	b29b      	uxth	r3, r3
 800b492:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b494:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b498:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b49c:	4413      	add	r3, r2
 800b49e:	015b      	lsls	r3, r3, #5
 800b4a0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	4a13      	ldr	r2, [pc, #76]	; (800b4f4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b4a6:	fb82 1203 	smull	r1, r2, r2, r3
 800b4aa:	1192      	asrs	r2, r2, #6
 800b4ac:	17db      	asrs	r3, r3, #31
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b4ba:	79fa      	ldrb	r2, [r7, #7]
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	fb02 f303 	mul.w	r3, r2, r3
 800b4c2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	3310      	adds	r3, #16
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	da00      	bge.n	800b4ce <VL53L1_calc_range_ignore_threshold+0x9a>
 800b4cc:	331f      	adds	r3, #31
 800b4ce:	115b      	asrs	r3, r3, #5
 800b4d0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d8:	db03      	blt.n	800b4e2 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b4da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4de:	83fb      	strh	r3, [r7, #30]
 800b4e0:	e001      	b.n	800b4e6 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b4e6:	8bfb      	ldrh	r3, [r7, #30]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3724      	adds	r7, #36	; 0x24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	10624dd3 	.word	0x10624dd3

0800b4f8 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d102      	bne.n	800b512 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	e008      	b.n	800b524 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	031a      	lsls	r2, r3, #12
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	085b      	lsrs	r3, r3, #1
 800b51a:	441a      	add	r2, r3
		timeout_mclks =
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b522:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff ffd6 	bl	800b4f8 <VL53L1_calc_timeout_mclks>
 800b54c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f887 	bl	800b662 <VL53L1_encode_timeout>
 800b554:	4603      	mov	r3, r0
 800b556:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b558:	897b      	ldrh	r3, [r7, #10]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b562:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b56e:	2100      	movs	r1, #0
 800b570:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f04f 0100 	mov.w	r1, #0
 800b57a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	2000      	movs	r0, #0
 800b582:	4688      	mov	r8, r1
 800b584:	4681      	mov	r9, r0
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	2000      	movs	r0, #0
 800b58a:	460c      	mov	r4, r1
 800b58c:	4605      	mov	r5, r0
 800b58e:	fb04 f009 	mul.w	r0, r4, r9
 800b592:	fb08 f105 	mul.w	r1, r8, r5
 800b596:	4401      	add	r1, r0
 800b598:	fba8 2304 	umull	r2, r3, r8, r4
 800b59c:	4419      	add	r1, r3
 800b59e:	460b      	mov	r3, r1
 800b5a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b5a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b5a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5ac:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b5b0:	f143 0b00 	adc.w	fp, r3, #0
 800b5b4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b5b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5bc:	f04f 0200 	mov.w	r2, #0
 800b5c0:	f04f 0300 	mov.w	r3, #0
 800b5c4:	0b02      	lsrs	r2, r0, #12
 800b5c6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b5ca:	0b0b      	lsrs	r3, r1, #12
 800b5cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b5d4:	697b      	ldr	r3, [r7, #20]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b5e0:	4770      	bx	lr
	...

0800b5e4 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b5f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b5fc:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b5fe:	4413      	add	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	da02      	bge.n	800b60e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	e005      	b.n	800b61a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b614:	db01      	blt.n	800b61a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b616:	4b05      	ldr	r3, [pc, #20]	; (800b62c <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b618:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b61e:	68bb      	ldr	r3, [r7, #8]

}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	0003ffff 	.word	0x0003ffff

0800b630 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f837 	bl	800b6ba <VL53L1_decode_timeout>
 800b64c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff ff86 	bl	800b562 <VL53L1_calc_timeout_us>
 800b656:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b658:	68bb      	ldr	r3, [r7, #8]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b662:	b480      	push	{r7}
 800b664:	b087      	sub	sp, #28
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d017      	beq.n	800b6ac <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3b01      	subs	r3, #1
 800b680:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b682:	e005      	b.n	800b690 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	085b      	lsrs	r3, r3, #1
 800b688:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b68a:	89fb      	ldrh	r3, [r7, #14]
 800b68c:	3301      	adds	r3, #1
 800b68e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f4      	bne.n	800b684 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b69a:	89fb      	ldrh	r3, [r7, #14]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b6a8:	4413      	add	r3, r2
 800b6aa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b6ac:	8afb      	ldrh	r3, [r7, #22]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b6c8:	88fb      	ldrh	r3, [r7, #6]
 800b6ca:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b6cc:	88fa      	ldrh	r2, [r7, #6]
 800b6ce:	0a12      	lsrs	r2, r2, #8
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b088      	sub	sp, #32
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b704:	887b      	ldrh	r3, [r7, #2]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b70a:	23f1      	movs	r3, #241	; 0xf1
 800b70c:	77fb      	strb	r3, [r7, #31]
 800b70e:	e05d      	b.n	800b7cc <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	799a      	ldrb	r2, [r3, #6]
 800b714:	887b      	ldrh	r3, [r7, #2]
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fe5c 	bl	800b3d6 <VL53L1_calc_macro_period_us>
 800b71e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b720:	6979      	ldr	r1, [r7, #20]
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7ff fee8 	bl	800b4f8 <VL53L1_calc_timeout_mclks>
 800b728:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	2bff      	cmp	r3, #255	; 0xff
 800b72e:	d901      	bls.n	800b734 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b730:	23ff      	movs	r3, #255	; 0xff
 800b732:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b73c:	6979      	ldr	r1, [r7, #20]
 800b73e:	68b8      	ldr	r0, [r7, #8]
 800b740:	f7ff fef7 	bl	800b532 <VL53L1_calc_encoded_timeout>
 800b744:	4603      	mov	r3, r0
 800b746:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b748:	8a7b      	ldrh	r3, [r7, #18]
 800b74a:	0a1b      	lsrs	r3, r3, #8
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b754:	8a7b      	ldrh	r3, [r7, #18]
 800b756:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fee7 	bl	800b532 <VL53L1_calc_encoded_timeout>
 800b764:	4603      	mov	r3, r0
 800b766:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b768:	8a7b      	ldrh	r3, [r7, #18]
 800b76a:	0a1b      	lsrs	r3, r3, #8
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b774:	8a7b      	ldrh	r3, [r7, #18]
 800b776:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	7a5a      	ldrb	r2, [r3, #9]
 800b780:	887b      	ldrh	r3, [r7, #2]
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fe26 	bl	800b3d6 <VL53L1_calc_macro_period_us>
 800b78a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b78c:	6979      	ldr	r1, [r7, #20]
 800b78e:	68b8      	ldr	r0, [r7, #8]
 800b790:	f7ff fecf 	bl	800b532 <VL53L1_calc_encoded_timeout>
 800b794:	4603      	mov	r3, r0
 800b796:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b798:	8a7b      	ldrh	r3, [r7, #18]
 800b79a:	0a1b      	lsrs	r3, r3, #8
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b7a4:	8a7b      	ldrh	r3, [r7, #18]
 800b7a6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b7ac:	6979      	ldr	r1, [r7, #20]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff febf 	bl	800b532 <VL53L1_calc_encoded_timeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b7b8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b7c4:	8a7b      	ldrh	r3, [r7, #18]
 800b7c6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b7cc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b7d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7dc:	b09e      	sub	sp, #120	; 0x78
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6578      	str	r0, [r7, #84]	; 0x54
 800b7e2:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b7ea:	f04f 0200 	mov.w	r2, #0
 800b7ee:	f04f 0300 	mov.w	r3, #0
 800b7f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b7f6:	f04f 0200 	mov.w	r2, #0
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b802:	f04f 0200 	mov.w	r2, #0
 800b806:	f04f 0300 	mov.w	r3, #0
 800b80a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b810:	885b      	ldrh	r3, [r3, #2]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b816:	23f1      	movs	r3, #241	; 0xf1
 800b818:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b81c:	e0d6      	b.n	800b9cc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 80d2 	beq.w	800b9cc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f040 80cd 	bne.w	800b9cc <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b838:	2200      	movs	r2, #0
 800b83a:	643b      	str	r3, [r7, #64]	; 0x40
 800b83c:	647a      	str	r2, [r7, #68]	; 0x44
 800b83e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b842:	460b      	mov	r3, r1
 800b844:	3301      	adds	r3, #1
 800b846:	623b      	str	r3, [r7, #32]
 800b848:	4613      	mov	r3, r2
 800b84a:	f143 0300 	adc.w	r3, r3, #0
 800b84e:	627b      	str	r3, [r7, #36]	; 0x24
 800b850:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b854:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b85e:	b29b      	uxth	r3, r3
 800b860:	2200      	movs	r2, #0
 800b862:	64bb      	str	r3, [r7, #72]	; 0x48
 800b864:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b868:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b86c:	4602      	mov	r2, r0
 800b86e:	fb02 f203 	mul.w	r2, r2, r3
 800b872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b874:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b878:	fb01 f303 	mul.w	r3, r1, r3
 800b87c:	441a      	add	r2, r3
 800b87e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b880:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b882:	fba3 4501 	umull	r4, r5, r3, r1
 800b886:	1953      	adds	r3, r2, r5
 800b888:	461d      	mov	r5, r3
 800b88a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800b88e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800b892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2200      	movs	r2, #0
 800b898:	63bb      	str	r3, [r7, #56]	; 0x38
 800b89a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b89c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	f143 0300 	adc.w	r3, r3, #0
 800b8ac:	61fb      	str	r3, [r7, #28]
 800b8ae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b8b2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800b8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2200      	movs	r2, #0
 800b8be:	633b      	str	r3, [r7, #48]	; 0x30
 800b8c0:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800b8c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	fb02 f203 	mul.w	r2, r2, r3
 800b8ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	fb01 f303 	mul.w	r3, r1, r3
 800b8d6:	441a      	add	r2, r3
 800b8d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8da:	4621      	mov	r1, r4
 800b8dc:	fba3 ab01 	umull	sl, fp, r3, r1
 800b8e0:	eb02 030b 	add.w	r3, r2, fp
 800b8e4:	469b      	mov	fp, r3
 800b8e6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800b8ea:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800b8ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	17da      	asrs	r2, r3, #31
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f6:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800b8f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8fa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b8fe:	4622      	mov	r2, r4
 800b900:	fb02 f203 	mul.w	r2, r2, r3
 800b904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b906:	4629      	mov	r1, r5
 800b908:	fb01 f303 	mul.w	r3, r1, r3
 800b90c:	4413      	add	r3, r2
 800b90e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b910:	4621      	mov	r1, r4
 800b912:	fba2 8901 	umull	r8, r9, r2, r1
 800b916:	444b      	add	r3, r9
 800b918:	4699      	mov	r9, r3
 800b91a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800b91e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800b922:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b926:	0fd9      	lsrs	r1, r3, #31
 800b928:	2000      	movs	r0, #0
 800b92a:	6139      	str	r1, [r7, #16]
 800b92c:	6178      	str	r0, [r7, #20]
 800b92e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b932:	4621      	mov	r1, r4
 800b934:	1889      	adds	r1, r1, r2
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	4629      	mov	r1, r5
 800b93a:	eb43 0101 	adc.w	r1, r3, r1
 800b93e:	60f9      	str	r1, [r7, #12]
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b94c:	4621      	mov	r1, r4
 800b94e:	084a      	lsrs	r2, r1, #1
 800b950:	4629      	mov	r1, r5
 800b952:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800b956:	4629      	mov	r1, r5
 800b958:	104b      	asrs	r3, r1, #1
 800b95a:	4610      	mov	r0, r2
 800b95c:	4619      	mov	r1, r3
 800b95e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b962:	1814      	adds	r4, r2, r0
 800b964:	603c      	str	r4, [r7, #0]
 800b966:	414b      	adcs	r3, r1
 800b968:	607b      	str	r3, [r7, #4]
 800b96a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b96e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800b972:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b976:	4313      	orrs	r3, r2
 800b978:	d009      	beq.n	800b98e <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800b97a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b97e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b982:	f7f4 fc4d 	bl	8000220 <__aeabi_ldivmod>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800b98e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b992:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800b996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b998:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800b99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800b9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800b9a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9aa:	7852      	ldrb	r2, [r2, #1]
 800b9ac:	0852      	lsrs	r2, r2, #1
 800b9ae:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800b9b0:	441a      	add	r2, r3
 800b9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800b9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800b9be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9c0:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800b9c2:	fb93 f2f2 	sdiv	r2, r3, r2
 800b9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800b9cc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3778      	adds	r7, #120	; 0x78
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9da <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b087      	sub	sp, #28
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3318      	adds	r3, #24
 800b9e8:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800b9fc:	029b      	lsls	r3, r3, #10
 800b9fe:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800ba06:	029b      	lsls	r3, r3, #10
 800ba08:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 8095 	bne.w	800bb44 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800ba20:	091b      	lsrs	r3, r3, #4
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800ba3e:	091b      	lsrs	r3, r3, #4
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800ba5c:	091b      	lsrs	r3, r3, #4
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	da2c      	bge.n	800bada <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800ba86:	091b      	lsrs	r3, r3, #4
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800ba94:	f003 030f 	and.w	r3, r3, #15
 800ba98:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800baa4:	091b      	lsrs	r3, r3, #4
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bab2:	f003 030f 	and.w	r3, r3, #15
 800bab6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bac2:	091b      	lsrs	r3, r3, #4
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bad0:	f003 030f 	and.w	r3, r3, #15
 800bad4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	f340 80c2 	ble.w	800bc6c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800baee:	091b      	lsrs	r3, r3, #4
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bb0c:	091b      	lsrs	r3, r3, #4
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800bb2a:	091b      	lsrs	r3, r3, #4
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800bb38:	f003 030f 	and.w	r3, r3, #15
 800bb3c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	731a      	strb	r2, [r3, #12]
 800bb42:	e093      	b.n	800bc6c <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800bb5a:	f003 030f 	and.w	r3, r3, #15
 800bb5e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800bb6a:	091b      	lsrs	r3, r3, #4
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bb78:	f003 030f 	and.w	r3, r3, #15
 800bb7c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800bb88:	091b      	lsrs	r3, r3, #4
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	da2c      	bge.n	800bc06 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800bbb2:	091b      	lsrs	r3, r3, #4
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bbc0:	f003 030f 	and.w	r3, r3, #15
 800bbc4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800bbd0:	091b      	lsrs	r3, r3, #4
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800bbde:	f003 030f 	and.w	r3, r3, #15
 800bbe2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800bbee:	091b      	lsrs	r3, r3, #4
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	dd2c      	ble.n	800bc6c <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bc26:	f003 030f 	and.w	r3, r3, #15
 800bc2a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bc36:	091b      	lsrs	r3, r3, #4
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bc44:	f003 030f 	and.w	r3, r3, #15
 800bc48:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bc54:	091b      	lsrs	r3, r3, #4
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bc62:	f003 030f 	and.w	r3, r3, #15
 800bc66:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75fb      	strb	r3, [r7, #23]
 800bc70:	e007      	b.n	800bc82 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	4413      	add	r3, r2
 800bc78:	2201      	movs	r2, #1
 800bc7a:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bc7c:	7dfb      	ldrb	r3, [r7, #23]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	75fb      	strb	r3, [r7, #23]
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b05      	cmp	r3, #5
 800bc86:	d9f4      	bls.n	800bc72 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bc96:	b590      	push	{r4, r7, lr}
 800bc98:	b093      	sub	sp, #76	; 0x4c
 800bc9a:	af04      	add	r7, sp, #16
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	607a      	str	r2, [r7, #4]
 800bca2:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3318      	adds	r3, #24
 800bcae:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bcd6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcdc:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bce0:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800bce8:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800bcf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800bcf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcf8:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800bcfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2b07      	cmp	r3, #7
 800bd06:	d006      	beq.n	800bd16 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800bd0c:	2b08      	cmp	r3, #8
 800bd0e:	d002      	beq.n	800bd16 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800bd10:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd14:	e0ec      	b.n	800bef0 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800bd16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800bd1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd20:	e0e6      	b.n	800bef0 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bd22:	2300      	movs	r3, #0
 800bd24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bd28:	e0d9      	b.n	800bede <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bd2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	214c      	movs	r1, #76	; 0x4c
 800bd32:	fb01 f303 	mul.w	r3, r1, r3
 800bd36:	4413      	add	r3, r2
 800bd38:	335e      	adds	r3, #94	; 0x5e
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d00b      	beq.n	800bd58 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800bd40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	214c      	movs	r1, #76	; 0x4c
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	4413      	add	r3, r2
 800bd4e:	335e      	adds	r3, #94	; 0x5e
 800bd50:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bd52:	2b13      	cmp	r3, #19
 800bd54:	f040 80bd 	bne.w	800bed2 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	795b      	ldrb	r3, [r3, #5]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800bd60:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	214c      	movs	r1, #76	; 0x4c
 800bd68:	fb01 f303 	mul.w	r3, r1, r3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	335e      	adds	r3, #94	; 0x5e
 800bd70:	2217      	movs	r2, #23
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	e009      	b.n	800bd8a <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800bd76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	214c      	movs	r1, #76	; 0x4c
 800bd7e:	fb01 f303 	mul.w	r3, r1, r3
 800bd82:	4413      	add	r3, r2
 800bd84:	335e      	adds	r3, #94	; 0x5e
 800bd86:	2207      	movs	r2, #7
 800bd88:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bd90:	e097      	b.n	800bec2 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bd92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	214c      	movs	r1, #76	; 0x4c
 800bd9a:	fb01 f303 	mul.w	r3, r1, r3
 800bd9e:	4413      	add	r3, r2
 800bda0:	3354      	adds	r3, #84	; 0x54
 800bda2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800bda4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4403      	add	r3, r0
 800bdb4:	3310      	adds	r3, #16
 800bdb6:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	d915      	bls.n	800bde8 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800bdbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	214c      	movs	r1, #76	; 0x4c
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	3354      	adds	r3, #84	; 0x54
 800bdcc:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800bdce:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4403      	add	r3, r0
 800bdde:	3310      	adds	r3, #16
 800bde0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800bde2:	1acb      	subs	r3, r1, r3
 800bde4:	867b      	strh	r3, [r7, #50]	; 0x32
 800bde6:	e014      	b.n	800be12 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800bde8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3310      	adds	r3, #16
 800bdfa:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800bdfc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	204c      	movs	r0, #76	; 0x4c
 800be04:	fb00 f303 	mul.w	r3, r0, r3
 800be08:	440b      	add	r3, r1
 800be0a:	3354      	adds	r3, #84	; 0x54
 800be0c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800be12:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800be14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be16:	429a      	cmp	r2, r3
 800be18:	d24e      	bcs.n	800beb8 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800be1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d125      	bne.n	800be6e <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800be22:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800be26:	4613      	mov	r3, r2
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	3308      	adds	r3, #8
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800be34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800be38:	224c      	movs	r2, #76	; 0x4c
 800be3a:	fb02 f303 	mul.w	r3, r2, r3
 800be3e:	3310      	adds	r3, #16
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	4413      	add	r3, r2
 800be44:	3304      	adds	r3, #4
 800be46:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800be48:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800be4c:	f107 0217 	add.w	r2, r7, #23
 800be50:	9203      	str	r2, [sp, #12]
 800be52:	f107 021c 	add.w	r2, r7, #28
 800be56:	9202      	str	r2, [sp, #8]
 800be58:	f107 0218 	add.w	r2, r7, #24
 800be5c:	9201      	str	r2, [sp, #4]
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	4623      	mov	r3, r4
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	f000 f848 	bl	800bef8 <VL53L1_hist_events_consistency_check>
 800be68:	4603      	mov	r3, r0
 800be6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800be6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be72:	2b00      	cmp	r3, #0
 800be74:	d115      	bne.n	800bea2 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800be76:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800be78:	2b09      	cmp	r3, #9
 800be7a:	d112      	bne.n	800bea2 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800be7c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800be80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800be84:	224c      	movs	r2, #76	; 0x4c
 800be86:	fb02 f303 	mul.w	r3, r2, r3
 800be8a:	3310      	adds	r3, #16
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	4413      	add	r3, r2
 800be90:	3304      	adds	r3, #4
 800be92:	f107 0217 	add.w	r2, r7, #23
 800be96:	4619      	mov	r1, r3
 800be98:	f000 fb44 	bl	800c524 <VL53L1_hist_merged_pulse_check>
 800be9c:	4603      	mov	r3, r0
 800be9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800bea2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bea6:	7df8      	ldrb	r0, [r7, #23]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	214c      	movs	r1, #76	; 0x4c
 800beac:	fb01 f303 	mul.w	r3, r1, r3
 800beb0:	4413      	add	r3, r2
 800beb2:	335e      	adds	r3, #94	; 0x5e
 800beb4:	4602      	mov	r2, r0
 800beb6:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800beb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bebc:	3301      	adds	r3, #1
 800bebe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	795b      	ldrb	r3, [r3, #5]
 800bec6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800beca:	429a      	cmp	r2, r3
 800becc:	f4ff af61 	bcc.w	800bd92 <VL53L1_hist_phase_consistency_check+0xfc>
 800bed0:	e000      	b.n	800bed4 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800bed2:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bed4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bed8:	3301      	adds	r3, #1
 800beda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	7c9b      	ldrb	r3, [r3, #18]
 800bee2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800bee6:	429a      	cmp	r2, r3
 800bee8:	f4ff af1f 	bcc.w	800bd2a <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800beec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	373c      	adds	r7, #60	; 0x3c
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd90      	pop	{r4, r7, pc}

0800bef8 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800bef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800befc:	b0d4      	sub	sp, #336	; 0x150
 800befe:	af00      	add	r7, sp, #0
 800bf00:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800bf04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800bf0e:	460b      	mov	r3, r1
 800bf10:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800bf1a:	f04f 0200 	mov.w	r2, #0
 800bf1e:	f04f 0300 	mov.w	r3, #0
 800bf22:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	f04f 0300 	mov.w	r3, #0
 800bf3a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	f04f 0300 	mov.w	r3, #0
 800bf46:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	f04f 0300 	mov.w	r3, #0
 800bf52:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800bf56:	f04f 0200 	mov.w	r2, #0
 800bf5a:	f04f 0300 	mov.w	r3, #0
 800bf5e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800bf6e:	f04f 0200 	mov.w	r2, #0
 800bf72:	f04f 0300 	mov.w	r3, #0
 800bf76:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800bf86:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800bf8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800bf92:	2209      	movs	r2, #9
 800bf94:	701a      	strb	r2, [r3, #0]
		return status;
 800bf96:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800bf9a:	e2bd      	b.n	800c518 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800bf9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfa8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bfac:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfb8:	4613      	mov	r3, r2
 800bfba:	f143 0300 	adc.w	r3, r3, #0
 800bfbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfc2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800bfc6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800bfca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfce:	885b      	ldrh	r3, [r3, #2]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	469a      	mov	sl, r3
 800bfd6:	4693      	mov	fp, r2
 800bfd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bfdc:	fb0a f203 	mul.w	r2, sl, r3
 800bfe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bfe4:	fb0b f303 	mul.w	r3, fp, r3
 800bfe8:	441a      	add	r2, r3
 800bfea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bfee:	fba3 450a 	umull	r4, r5, r3, sl
 800bff2:	1953      	adds	r3, r2, r5
 800bff4:	461d      	mov	r5, r3
 800bff6:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800bffa:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800bffe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c00a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c00e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c012:	460b      	mov	r3, r1
 800c014:	3301      	adds	r3, #1
 800c016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c01a:	4613      	mov	r3, r2
 800c01c:	f143 0300 	adc.w	r3, r3, #0
 800c020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c024:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c028:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c02c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c030:	8adb      	ldrh	r3, [r3, #22]
 800c032:	b29b      	uxth	r3, r3
 800c034:	2200      	movs	r2, #0
 800c036:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c03a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c03e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c042:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c046:	4622      	mov	r2, r4
 800c048:	fb02 f203 	mul.w	r2, r2, r3
 800c04c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c050:	4629      	mov	r1, r5
 800c052:	fb01 f303 	mul.w	r3, r1, r3
 800c056:	441a      	add	r2, r3
 800c058:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c05c:	4621      	mov	r1, r4
 800c05e:	fba3 8901 	umull	r8, r9, r3, r1
 800c062:	eb02 0309 	add.w	r3, r2, r9
 800c066:	4699      	mov	r9, r3
 800c068:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c06c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c070:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c074:	f04f 0000 	mov.w	r0, #0
 800c078:	f04f 0100 	mov.w	r1, #0
 800c07c:	0319      	lsls	r1, r3, #12
 800c07e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c082:	0310      	lsls	r0, r2, #12
 800c084:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c088:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c08c:	0fd9      	lsrs	r1, r3, #31
 800c08e:	2000      	movs	r0, #0
 800c090:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c094:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c098:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c09c:	4621      	mov	r1, r4
 800c09e:	1889      	adds	r1, r1, r2
 800c0a0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	eb43 0101 	adc.w	r1, r3, r1
 800c0aa:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	084a      	lsrs	r2, r1, #1
 800c0be:	4629      	mov	r1, r5
 800c0c0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	104b      	asrs	r3, r1, #1
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c0d0:	1814      	adds	r4, r2, r0
 800c0d2:	67bc      	str	r4, [r7, #120]	; 0x78
 800c0d4:	414b      	adcs	r3, r1
 800c0d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0d8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c0dc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c0e0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	d009      	beq.n	800c0fc <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c0e8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c0ec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c0f0:	f7f4 f896 	bl	8000220 <__aeabi_ldivmod>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c0fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c100:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c104:	fb03 f102 	mul.w	r1, r3, r2
 800c108:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c10c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c110:	fb02 f303 	mul.w	r3, r2, r3
 800c114:	18ca      	adds	r2, r1, r3
 800c116:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c11a:	fba3 1303 	umull	r1, r3, r3, r3
 800c11e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c122:	460b      	mov	r3, r1
 800c124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c128:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c12c:	18d3      	adds	r3, r2, r3
 800c12e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c132:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c136:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c13a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c13e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c142:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c146:	6739      	str	r1, [r7, #112]	; 0x70
 800c148:	f143 0300 	adc.w	r3, r3, #0
 800c14c:	677b      	str	r3, [r7, #116]	; 0x74
 800c14e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c152:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c156:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da08      	bge.n	800c170 <VL53L1_hist_events_consistency_check+0x278>
 800c15e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c162:	1851      	adds	r1, r2, r1
 800c164:	66b9      	str	r1, [r7, #104]	; 0x68
 800c166:	f143 0300 	adc.w	r3, r3, #0
 800c16a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c16c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c170:	f04f 0000 	mov.w	r0, #0
 800c174:	f04f 0100 	mov.w	r1, #0
 800c178:	0b10      	lsrs	r0, r2, #12
 800c17a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c17e:	1319      	asrs	r1, r3, #12
 800c180:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c184:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	2200      	movs	r2, #0
 800c18c:	663b      	str	r3, [r7, #96]	; 0x60
 800c18e:	667a      	str	r2, [r7, #100]	; 0x64
 800c190:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c194:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c198:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1a4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c1a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c1ac:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	1a51      	subs	r1, r2, r1
 800c1b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	eb63 0301 	sbc.w	r3, r3, r1
 800c1bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1be:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c1c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c1c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c1ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c1ce:	fb03 f102 	mul.w	r1, r3, r2
 800c1d2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c1d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1da:	fb02 f303 	mul.w	r3, r2, r3
 800c1de:	4419      	add	r1, r3
 800c1e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c1e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fa:	18cb      	adds	r3, r1, r3
 800c1fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c200:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c204:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c208:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c20c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c210:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c214:	6539      	str	r1, [r7, #80]	; 0x50
 800c216:	f143 0300 	adc.w	r3, r3, #0
 800c21a:	657b      	str	r3, [r7, #84]	; 0x54
 800c21c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c220:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c224:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c228:	2b00      	cmp	r3, #0
 800c22a:	da08      	bge.n	800c23e <VL53L1_hist_events_consistency_check+0x346>
 800c22c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c230:	1851      	adds	r1, r2, r1
 800c232:	64b9      	str	r1, [r7, #72]	; 0x48
 800c234:	f143 0300 	adc.w	r3, r3, #0
 800c238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c23a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c23e:	f04f 0000 	mov.w	r0, #0
 800c242:	f04f 0100 	mov.w	r1, #0
 800c246:	0b10      	lsrs	r0, r2, #12
 800c248:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c24c:	1319      	asrs	r1, r3, #12
 800c24e:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c252:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c256:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c25a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	2200      	movs	r2, #0
 800c262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c266:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c26a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c26e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c272:	4622      	mov	r2, r4
 800c274:	fb02 f203 	mul.w	r2, r2, r3
 800c278:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c27c:	4629      	mov	r1, r5
 800c27e:	fb01 f303 	mul.w	r3, r1, r3
 800c282:	441a      	add	r2, r3
 800c284:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c288:	4621      	mov	r1, r4
 800c28a:	fba3 1301 	umull	r1, r3, r3, r1
 800c28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c292:	460b      	mov	r3, r1
 800c294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c29c:	18d3      	adds	r3, r2, r3
 800c29e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c2a2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c2a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c2aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c2ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c2b2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c2b6:	6439      	str	r1, [r7, #64]	; 0x40
 800c2b8:	f143 0300 	adc.w	r3, r3, #0
 800c2bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c2be:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c2c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c2c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	da08      	bge.n	800c2e0 <VL53L1_hist_events_consistency_check+0x3e8>
 800c2ce:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c2d2:	1851      	adds	r1, r2, r1
 800c2d4:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2d6:	f143 0300 	adc.w	r3, r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2e0:	f04f 0000 	mov.w	r0, #0
 800c2e4:	f04f 0100 	mov.w	r1, #0
 800c2e8:	0b10      	lsrs	r0, r2, #12
 800c2ea:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c2ee:	1319      	asrs	r1, r3, #12
 800c2f0:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c2f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c2f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c2fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c302:	2200      	movs	r2, #0
 800c304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c308:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c310:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c314:	4622      	mov	r2, r4
 800c316:	fb02 f203 	mul.w	r2, r2, r3
 800c31a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c31e:	4629      	mov	r1, r5
 800c320:	fb01 f303 	mul.w	r3, r1, r3
 800c324:	441a      	add	r2, r3
 800c326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c32a:	4621      	mov	r1, r4
 800c32c:	fba3 1301 	umull	r1, r3, r3, r1
 800c330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c334:	460b      	mov	r3, r1
 800c336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c33a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c33e:	18d3      	adds	r3, r2, r3
 800c340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c344:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c348:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c34c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c350:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c354:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c358:	6339      	str	r1, [r7, #48]	; 0x30
 800c35a:	f143 0300 	adc.w	r3, r3, #0
 800c35e:	637b      	str	r3, [r7, #52]	; 0x34
 800c360:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c364:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c368:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c36c:	4610      	mov	r0, r2
 800c36e:	4619      	mov	r1, r3
 800c370:	2900      	cmp	r1, #0
 800c372:	da08      	bge.n	800c386 <VL53L1_hist_events_consistency_check+0x48e>
 800c374:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c378:	18c3      	adds	r3, r0, r3
 800c37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c37c:	f141 0300 	adc.w	r3, r1, #0
 800c380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	f04f 0300 	mov.w	r3, #0
 800c38e:	0b02      	lsrs	r2, r0, #12
 800c390:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c394:	130b      	asrs	r3, r1, #12
 800c396:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c39a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c39e:	1c91      	adds	r1, r2, #2
 800c3a0:	6239      	str	r1, [r7, #32]
 800c3a2:	f143 0300 	adc.w	r3, r3, #0
 800c3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800c3a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c3ac:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c3b0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da06      	bge.n	800c3c6 <VL53L1_hist_events_consistency_check+0x4ce>
 800c3b8:	1cd1      	adds	r1, r2, #3
 800c3ba:	61b9      	str	r1, [r7, #24]
 800c3bc:	f143 0300 	adc.w	r3, r3, #0
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3c6:	f04f 0000 	mov.w	r0, #0
 800c3ca:	f04f 0100 	mov.w	r1, #0
 800c3ce:	0890      	lsrs	r0, r2, #2
 800c3d0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c3d4:	1099      	asrs	r1, r3, #2
 800c3d6:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3de:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	613b      	str	r3, [r7, #16]
 800c3e4:	617a      	str	r2, [r7, #20]
 800c3e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c3ea:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c3ee:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c3f2:	1c91      	adds	r1, r2, #2
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	f143 0300 	adc.w	r3, r3, #0
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c400:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c404:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da06      	bge.n	800c41a <VL53L1_hist_events_consistency_check+0x522>
 800c40c:	1cd1      	adds	r1, r2, #3
 800c40e:	6039      	str	r1, [r7, #0]
 800c410:	f143 0300 	adc.w	r3, r3, #0
 800c414:	607b      	str	r3, [r7, #4]
 800c416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c41a:	f04f 0000 	mov.w	r0, #0
 800c41e:	f04f 0100 	mov.w	r1, #0
 800c422:	0890      	lsrs	r0, r2, #2
 800c424:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c428:	1099      	asrs	r1, r3, #2
 800c42a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c432:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c434:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c438:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c43a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c43e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c440:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c444:	4413      	add	r3, r2
 800c446:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c44a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	4618      	mov	r0, r3
 800c452:	f002 f8c6 	bl	800e5e2 <VL53L1_isqrt>
 800c456:	4603      	mov	r3, r0
 800c458:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c45a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c45e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c460:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c46a:	fb03 f202 	mul.w	r2, r3, r2
 800c46e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c472:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c474:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f103 0220 	add.w	r2, r3, #32
 800c47e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c482:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c484:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da00      	bge.n	800c490 <VL53L1_hist_events_consistency_check+0x598>
 800c48e:	333f      	adds	r3, #63	; 0x3f
 800c490:	119b      	asrs	r3, r3, #6
 800c492:	461a      	mov	r2, r3
 800c494:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c498:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c49a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b0:	1a9b      	subs	r3, r3, r2
 800c4b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c4b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	da08      	bge.n	800c4d4 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c4c2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ca:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c4cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e007      	b.n	800c4e4 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c4d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c4dc:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c4de:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4e2:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c4e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	dd0b      	ble.n	800c50c <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c4f4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c4f8:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c4fa:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d204      	bcs.n	800c50c <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c502:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c506:	2214      	movs	r2, #20
 800c508:	701a      	strb	r2, [r3, #0]
 800c50a:	e003      	b.n	800c514 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c50c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c510:	2209      	movs	r2, #9
 800c512:	701a      	strb	r2, [r3, #0]





	return status;
 800c514:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c518:	4618      	mov	r0, r3
 800c51a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c51e:	46bd      	mov	sp, r7
 800c520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c524 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c532:	2300      	movs	r3, #0
 800c534:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c546:	429a      	cmp	r2, r3
 800c548:	dd0b      	ble.n	800c562 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c550:	b29a      	uxth	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c558:	b29b      	uxth	r3, r3
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	b29b      	uxth	r3, r3
		delta_mm =
 800c55e:	82fb      	strh	r3, [r7, #22]
 800c560:	e00a      	b.n	800c578 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c568:	b29a      	uxth	r2, r3
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c570:	b29b      	uxth	r3, r3
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	b29b      	uxth	r3, r3
		delta_mm =
 800c576:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	dd09      	ble.n	800c594 <VL53L1_hist_merged_pulse_check+0x70>
 800c580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c588:	429a      	cmp	r2, r3
 800c58a:	dd03      	ble.n	800c594 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2216      	movs	r2, #22
 800c590:	701a      	strb	r2, [r3, #0]
 800c592:	e002      	b.n	800c59a <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2209      	movs	r2, #9
 800c598:	701a      	strb	r2, [r3, #0]

	return status;
 800c59a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	371c      	adds	r7, #28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b08e      	sub	sp, #56	; 0x38
 800c5ae:	af04      	add	r7, sp, #16
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3318      	adds	r3, #24
 800c5c2:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c5d2:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c5da:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	d009      	beq.n	800c5fa <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c5ec:	2b13      	cmp	r3, #19
 800c5ee:	d004      	beq.n	800c5fa <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c5f6:	2b14      	cmp	r3, #20
 800c5f8:	d129      	bne.n	800c64e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c600:	2b09      	cmp	r3, #9
 800c602:	d009      	beq.n	800c618 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c60a:	2b13      	cmp	r3, #19
 800c60c:	d004      	beq.n	800c618 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c614:	2b14      	cmp	r3, #20
 800c616:	d11a      	bne.n	800c64e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2209      	movs	r2, #9
 800c61c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c62a:	8bb9      	ldrh	r1, [r7, #28]
 800c62c:	7ff8      	ldrb	r0, [r7, #31]
 800c62e:	9303      	str	r3, [sp, #12]
 800c630:	f107 0318 	add.w	r3, r7, #24
 800c634:	9302      	str	r3, [sp, #8]
 800c636:	f107 0314 	add.w	r3, r7, #20
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	4613      	mov	r3, r2
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	f7ff fc58 	bl	800bef8 <VL53L1_hist_events_consistency_check>
 800c648:	4603      	mov	r3, r0
 800c64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c64e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c652:	4618      	mov	r0, r3
 800c654:	3728      	adds	r7, #40	; 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b088      	sub	sp, #32
 800c65e:	af00      	add	r7, sp, #0
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c666:	2300      	movs	r3, #0
 800c668:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c682:	2b00      	cmp	r3, #0
 800c684:	d019      	beq.n	800c6ba <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c68c:	4618      	mov	r0, r3
 800c68e:	f002 f90f 	bl	800e8b0 <VL53L1_calc_pll_period_mm>
 800c692:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c69a:	021b      	lsls	r3, r3, #8
 800c69c:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
 800c6a6:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c6ae:	0bdb      	lsrs	r3, r3, #15
 800c6b0:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	b21a      	sxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c6ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c6c6:	b590      	push	{r4, r7, lr}
 800c6c8:	b08d      	sub	sp, #52	; 0x34
 800c6ca:	af04      	add	r7, sp, #16
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	80fb      	strh	r3, [r7, #6]
 800c6d8:	4603      	mov	r3, r0
 800c6da:	80bb      	strh	r3, [r7, #4]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	70fb      	strb	r3, [r7, #3]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c704:	78b9      	ldrb	r1, [r7, #2]
 800c706:	78f8      	ldrb	r0, [r7, #3]
 800c708:	f107 030c 	add.w	r3, r7, #12
 800c70c:	9303      	str	r3, [sp, #12]
 800c70e:	f107 030e 	add.w	r3, r7, #14
 800c712:	9302      	str	r3, [sp, #8]
 800c714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	23ff      	movs	r3, #255	; 0xff
 800c720:	22c7      	movs	r2, #199	; 0xc7
 800c722:	f000 fa03 	bl	800cb2c <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c726:	89fb      	ldrh	r3, [r7, #14]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d050      	beq.n	800c7ce <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c72c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d04d      	beq.n	800c7ce <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c732:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c736:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c73a:	78b9      	ldrb	r1, [r7, #2]
 800c73c:	78f8      	ldrb	r0, [r7, #3]
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	f107 030a 	add.w	r3, r7, #10
 800c748:	9302      	str	r3, [sp, #8]
 800c74a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	4623      	mov	r3, r4
 800c756:	f000 f9e9 	bl	800cb2c <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c75e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c760:	897b      	ldrh	r3, [r7, #10]
 800c762:	461a      	mov	r2, r3
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	fb02 f303 	mul.w	r3, r2, r3
 800c76a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c76c:	89fb      	ldrh	r3, [r7, #14]
 800c76e:	461a      	mov	r2, r3
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	fbb3 f3f2 	udiv	r3, r3, r2
 800c776:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c77c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c77e:	893b      	ldrh	r3, [r7, #8]
 800c780:	461a      	mov	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	fb02 f303 	mul.w	r3, r2, r3
 800c788:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c78a:	89bb      	ldrh	r3, [r7, #12]
 800c78c:	461a      	mov	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	fbb3 f3f2 	udiv	r3, r3, r2
 800c794:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c79a:	69ba      	ldr	r2, [r7, #24]
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c7a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	fb02 f303 	mul.w	r3, r2, r3
 800c7ac:	69fa      	ldr	r2, [r7, #28]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c7b2:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c7b4:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c7b6:	4413      	add	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d008      	beq.n	800c7d2 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	009a      	lsls	r2, r3, #2
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	fb92 f3f3 	sdiv	r3, r2, r3
 800c7ca:	61fb      	str	r3, [r7, #28]
 800c7cc:	e002      	b.n	800c7d4 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c7ce:	bf00      	nop
 800c7d0:	e000      	b.n	800c7d4 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c7d2:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	b21a      	sxth	r2, r3
 800c7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7da:	801a      	strh	r2, [r3, #0]

}
 800c7dc:	bf00      	nop
 800c7de:	3724      	adds	r7, #36	; 0x24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd90      	pop	{r4, r7, pc}

0800c7e4 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60b9      	str	r1, [r7, #8]
 800c7ec:	607a      	str	r2, [r7, #4]
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
 800c7f6:	08db      	lsrs	r3, r3, #3
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	f003 0307 	and.w	r3, r3, #7
 800c804:	b2da      	uxtb	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	2301      	movs	r3, #1
 800c812:	4093      	lsls	r3, r2
 800c814:	b2da      	uxtb	r2, r3
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	701a      	strb	r2, [r3, #0]

}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	4603      	mov	r3, r0
 800c82e:	603a      	str	r2, [r7, #0]
 800c830:	71fb      	strb	r3, [r7, #7]
 800c832:	460b      	mov	r3, r1
 800c834:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	2b07      	cmp	r3, #7
 800c83a:	d90a      	bls.n	800c852 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c83c:	79bb      	ldrb	r3, [r7, #6]
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	b2da      	uxtb	r2, r3
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	b2db      	uxtb	r3, r3
 800c848:	3b71      	subs	r3, #113	; 0x71
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c850:	e00a      	b.n	800c868 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c852:	79bb      	ldrb	r3, [r7, #6]
 800c854:	f1c3 030f 	rsb	r3, r3, #15
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	4413      	add	r3, r2
 800c862:	b2da      	uxtb	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	701a      	strb	r2, [r3, #0]
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	091b      	lsrs	r3, r3, #4
 800c886:	b2da      	uxtb	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	b2da      	uxtb	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	701a      	strb	r2, [r3, #0]

}
 800c898:	bf00      	nop
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	603a      	str	r2, [r7, #0]
 800c8ae:	71fb      	strb	r3, [r7, #7]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800c8b4:	79bb      	ldrb	r3, [r7, #6]
 800c8b6:	011b      	lsls	r3, r3, #4
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	4413      	add	r3, r2
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	701a      	strb	r2, [r3, #0]

}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60ba      	str	r2, [r7, #8]
 800c8d8:	607b      	str	r3, [r7, #4]
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]
 800c8de:	460b      	mov	r3, r1
 800c8e0:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800c8f2:	f107 0217 	add.w	r2, r7, #23
 800c8f6:	f107 0116 	add.w	r1, r7, #22
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f002 fa51 	bl	800eda4 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800c902:	f107 0214 	add.w	r2, r7, #20
 800c906:	f107 0115 	add.w	r1, r7, #21
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff ffb1 	bl	800c874 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	b29a      	uxth	r2, r3
 800c916:	7d7b      	ldrb	r3, [r7, #21]
 800c918:	3301      	adds	r3, #1
 800c91a:	0fd9      	lsrs	r1, r3, #31
 800c91c:	440b      	add	r3, r1
 800c91e:	105b      	asrs	r3, r3, #1
 800c920:	425b      	negs	r3, r3
 800c922:	b29b      	uxth	r3, r3
 800c924:	4413      	add	r3, r2
 800c926:	b29b      	uxth	r3, r3
 800c928:	b21a      	sxth	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c934:	2b00      	cmp	r3, #0
 800c936:	da02      	bge.n	800c93e <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	2200      	movs	r2, #0
 800c93c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c944:	b29a      	uxth	r2, r3
 800c946:	7d7b      	ldrb	r3, [r7, #21]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4413      	add	r3, r2
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	b21a      	sxth	r2, r3
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c95a:	2b0f      	cmp	r3, #15
 800c95c:	dd02      	ble.n	800c964 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	220f      	movs	r2, #15
 800c962:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800c964:	7dbb      	ldrb	r3, [r7, #22]
 800c966:	b29a      	uxth	r2, r3
 800c968:	7d3b      	ldrb	r3, [r7, #20]
 800c96a:	3301      	adds	r3, #1
 800c96c:	0fd9      	lsrs	r1, r3, #31
 800c96e:	440b      	add	r3, r1
 800c970:	105b      	asrs	r3, r3, #1
 800c972:	425b      	negs	r3, r3
 800c974:	b29b      	uxth	r3, r3
 800c976:	4413      	add	r3, r2
 800c978:	b29b      	uxth	r3, r3
 800c97a:	b21a      	sxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c986:	2b00      	cmp	r3, #0
 800c988:	da02      	bge.n	800c990 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c996:	b29a      	uxth	r2, r3
 800c998:	7d3b      	ldrb	r3, [r7, #20]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	4413      	add	r3, r2
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	b21a      	sxth	r2, r3
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9ac:	2b0f      	cmp	r3, #15
 800c9ae:	dd02      	ble.n	800c9b6 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	220f      	movs	r2, #15
 800c9b4:	801a      	strh	r2, [r3, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b085      	sub	sp, #20
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	460a      	mov	r2, r1
 800c9c8:	71fb      	strb	r3, [r7, #7]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	f003 0303 	and.w	r3, r3, #3
 800c9d8:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800c9da:	79bb      	ldrb	r3, [r7, #6]
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <VL53L1_is_aperture_location+0x34>
 800c9e8:	7b7b      	ldrb	r3, [r7, #13]
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d101      	bne.n	800c9f2 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d104      	bne.n	800ca02 <VL53L1_is_aperture_location+0x44>
 800c9f8:	7b7b      	ldrb	r3, [r7, #13]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800ca10:	b590      	push	{r4, r7, lr}
 800ca12:	b08b      	sub	sp, #44	; 0x2c
 800ca14:	af02      	add	r7, sp, #8
 800ca16:	603a      	str	r2, [r7, #0]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	71fb      	strb	r3, [r7, #7]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	71bb      	strb	r3, [r7, #6]
 800ca22:	4613      	mov	r3, r2
 800ca24:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800ca52:	f107 0416 	add.w	r4, r7, #22
 800ca56:	f107 0218 	add.w	r2, r7, #24
 800ca5a:	79b9      	ldrb	r1, [r7, #6]
 800ca5c:	79f8      	ldrb	r0, [r7, #7]
 800ca5e:	f107 0312 	add.w	r3, r7, #18
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	f107 0314 	add.w	r3, r7, #20
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4623      	mov	r3, r4
 800ca6c:	f7ff ff30 	bl	800c8d0 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	2200      	movs	r2, #0
 800ca74:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ca76:	8afb      	ldrh	r3, [r7, #22]
 800ca78:	83bb      	strh	r3, [r7, #28]
 800ca7a:	e04c      	b.n	800cb16 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ca7c:	8b3b      	ldrh	r3, [r7, #24]
 800ca7e:	83fb      	strh	r3, [r7, #30]
 800ca80:	e03d      	b.n	800cafe <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800ca82:	8bbb      	ldrh	r3, [r7, #28]
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	8bfa      	ldrh	r2, [r7, #30]
 800ca88:	b2d1      	uxtb	r1, r2
 800ca8a:	f107 0211 	add.w	r2, r7, #17
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff fec9 	bl	800c826 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ca94:	7c78      	ldrb	r0, [r7, #17]
 800ca96:	f107 030e 	add.w	r3, r7, #14
 800ca9a:	f107 020f 	add.w	r2, r7, #15
 800ca9e:	f107 0110 	add.w	r1, r7, #16
 800caa2:	f7ff fe9f 	bl	800c7e4 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800caa6:	7c3b      	ldrb	r3, [r7, #16]
 800caa8:	461a      	mov	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	4413      	add	r3, r2
 800caae:	781a      	ldrb	r2, [r3, #0]
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	4013      	ands	r3, r2
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01b      	beq.n	800caf2 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800caba:	8bbb      	ldrh	r3, [r7, #28]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	8bfa      	ldrh	r2, [r7, #30]
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	4611      	mov	r1, r2
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff ff7a 	bl	800c9be <VL53L1_is_aperture_location>
 800caca:	4603      	mov	r3, r0
 800cacc:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cace:	7efb      	ldrb	r3, [r7, #27]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d007      	beq.n	800cae4 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad6:	881a      	ldrh	r2, [r3, #0]
 800cad8:	88bb      	ldrh	r3, [r7, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	b29a      	uxth	r2, r3
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	801a      	strh	r2, [r3, #0]
 800cae2:	e006      	b.n	800caf2 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800caec:	b29a      	uxth	r2, r3
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800caf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	3301      	adds	r3, #1
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	83fb      	strh	r3, [r7, #30]
 800cafe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cb02:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	ddbb      	ble.n	800ca82 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cb0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	3301      	adds	r3, #1
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	83bb      	strh	r3, [r7, #28]
 800cb16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb1a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	ddac      	ble.n	800ca7c <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800cb22:	bf00      	nop
 800cb24:	bf00      	nop
 800cb26:	3724      	adds	r7, #36	; 0x24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd90      	pop	{r4, r7, pc}

0800cb2c <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800cb2c:	b590      	push	{r4, r7, lr}
 800cb2e:	b08d      	sub	sp, #52	; 0x34
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	461a      	mov	r2, r3
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	71fb      	strb	r3, [r7, #7]
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71bb      	strb	r3, [r7, #6]
 800cb42:	460b      	mov	r3, r1
 800cb44:	717b      	strb	r3, [r7, #5]
 800cb46:	4613      	mov	r3, r2
 800cb48:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800cb8c:	f107 041c 	add.w	r4, r7, #28
 800cb90:	f107 021e 	add.w	r2, r7, #30
 800cb94:	79b9      	ldrb	r1, [r7, #6]
 800cb96:	79f8      	ldrb	r0, [r7, #7]
 800cb98:	f107 0318 	add.w	r3, r7, #24
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	f107 031a 	add.w	r3, r7, #26
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	4623      	mov	r3, r4
 800cba6:	f7ff fe93 	bl	800c8d0 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800cbaa:	f107 0414 	add.w	r4, r7, #20
 800cbae:	f107 0216 	add.w	r2, r7, #22
 800cbb2:	7939      	ldrb	r1, [r7, #4]
 800cbb4:	7978      	ldrb	r0, [r7, #5]
 800cbb6:	f107 0310 	add.w	r3, r7, #16
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	f107 0312 	add.w	r3, r7, #18
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	4623      	mov	r3, r4
 800cbc4:	f7ff fe84 	bl	800c8d0 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbca:	2200      	movs	r2, #0
 800cbcc:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800cbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cbd4:	8abb      	ldrh	r3, [r7, #20]
 800cbd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cbd8:	e06c      	b.n	800ccb4 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cbda:	8afb      	ldrh	r3, [r7, #22]
 800cbdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cbde:	e05d      	b.n	800cc9c <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800cbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbe6:	b2d1      	uxtb	r1, r2
 800cbe8:	f107 020f 	add.w	r2, r7, #15
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff fe1a 	bl	800c826 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cbf2:	7bf8      	ldrb	r0, [r7, #15]
 800cbf4:	f107 030c 	add.w	r3, r7, #12
 800cbf8:	f107 020d 	add.w	r2, r7, #13
 800cbfc:	f107 010e 	add.w	r1, r7, #14
 800cc00:	f7ff fdf0 	bl	800c7e4 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	461a      	mov	r2, r3
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	4413      	add	r3, r2
 800cc0c:	781a      	ldrb	r2, [r3, #0]
 800cc0e:	7b3b      	ldrb	r3, [r7, #12]
 800cc10:	4013      	ands	r3, r2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d03b      	beq.n	800cc90 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cc18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	4611      	mov	r1, r2
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff fecb 	bl	800c9be <VL53L1_is_aperture_location>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cc2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cc36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc38:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc3a:	e002      	b.n	800cc42 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cc3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc40:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cc42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc46:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	db19      	blt.n	800cc82 <VL53L1_calc_mm_effective_spads+0x156>
 800cc4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cc52:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cc56:	429a      	cmp	r2, r3
 800cc58:	dc13      	bgt.n	800cc82 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cc5a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cc5e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cc62:	429a      	cmp	r2, r3
 800cc64:	db0d      	blt.n	800cc82 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cc66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cc6a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	dc07      	bgt.n	800cc82 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc74:	881a      	ldrh	r2, [r3, #0]
 800cc76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc78:	4413      	add	r3, r2
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7e:	801a      	strh	r2, [r3, #0]
 800cc80:	e006      	b.n	800cc90 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc84:	881a      	ldrh	r2, [r3, #0]
 800cc86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc88:	4413      	add	r3, r2
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc8e:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cc90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3301      	adds	r3, #1
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cca0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cca4:	429a      	cmp	r2, r3
 800cca6:	dd9b      	ble.n	800cbe0 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3301      	adds	r3, #1
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ccb4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ccb8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	dd8c      	ble.n	800cbda <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800ccc0:	bf00      	nop
 800ccc2:	bf00      	nop
 800ccc4:	372c      	adds	r7, #44	; 0x2c
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd90      	pop	{r4, r7, pc}

0800ccca <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b086      	sub	sp, #24
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7fd ff6d 	bl	800abbc <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	7c9a      	ldrb	r2, [r3, #18]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	3314      	adds	r3, #20
 800cd0c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
 800cd12:	e06b      	b.n	800cdec <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d034      	beq.n	800cd88 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800cd1e:	e05f      	b.n	800cde0 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cd58:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	8a9a      	ldrh	r2, [r3, #20]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	601a      	str	r2, [r3, #0]

			break;
 800cd86:	e02b      	b.n	800cde0 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cdb8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	611a      	str	r2, [r3, #16]
			break;
 800cdde:	bf00      	nop
		}

		pdata++;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	334c      	adds	r3, #76	; 0x4c
 800cde4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	3301      	adds	r3, #1
 800cdea:	75fb      	strb	r3, [r7, #23]
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	7c9b      	ldrb	r3, [r3, #18]
 800cdf0:	7dfa      	ldrb	r2, [r7, #23]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d38e      	bcc.n	800cd14 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800cdf6:	bf00      	nop
 800cdf8:	bf00      	nop
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b089      	sub	sp, #36	; 0x24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3318      	adds	r3, #24
 800ce10:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ce18:	3308      	adds	r3, #8
 800ce1a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800ce22:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ce2a:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3302      	adds	r3, #2
 800ce3e:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800ce64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3724      	adds	r7, #36	; 0x24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b08b      	sub	sp, #44	; 0x2c
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3318      	adds	r3, #24
 800ce86:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ce8e:	3308      	adds	r3, #8
 800ce90:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ce98:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cea0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800cea8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800ceaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceae:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800ceb0:	7bfa      	ldrb	r2, [r7, #15]
 800ceb2:	6939      	ldr	r1, [r7, #16]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	440b      	add	r3, r1
 800cebe:	3306      	adds	r3, #6
 800cec0:	2200      	movs	r2, #0
 800cec2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ceca:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ced2:	e01a      	b.n	800cf0a <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800ced4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	214c      	movs	r1, #76	; 0x4c
 800cedc:	fb01 f303 	mul.w	r3, r1, r3
 800cee0:	4413      	add	r3, r2
 800cee2:	334a      	adds	r3, #74	; 0x4a
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d209      	bcs.n	800cf00 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800ceec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	214c      	movs	r1, #76	; 0x4c
 800cef4:	fb01 f303 	mul.w	r3, r1, r3
 800cef8:	4413      	add	r3, r2
 800cefa:	334a      	adds	r3, #74	; 0x4a
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800cf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf04:	3301      	adds	r3, #1
 800cf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	7c9b      	ldrb	r3, [r3, #18]
 800cf0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d3de      	bcc.n	800ced4 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800cf16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d103      	bne.n	800cf24 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800cf1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf20:	623b      	str	r3, [r7, #32]
 800cf22:	e00e      	b.n	800cf42 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800cf24:	89bb      	ldrh	r3, [r7, #12]
 800cf26:	039b      	lsls	r3, r3, #14
 800cf28:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800cf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2c:	6a3a      	ldr	r2, [r7, #32]
 800cf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf32:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf3a:	d302      	bcc.n	800cf42 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800cf3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf40:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cf42:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cf48:	6939      	ldr	r1, [r7, #16]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	440b      	add	r3, r1
 800cf54:	3306      	adds	r3, #6
 800cf56:	4602      	mov	r2, r0
 800cf58:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800cf5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	372c      	adds	r7, #44	; 0x2c
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b08a      	sub	sp, #40	; 0x28
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	3318      	adds	r3, #24
 800cf7c:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	332c      	adds	r3, #44	; 0x2c
 800cf82:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	33c2      	adds	r3, #194	; 0xc2
 800cf88:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800cf90:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	3302      	adds	r3, #2
 800cf96:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	785b      	ldrb	r3, [r3, #1]
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	4413      	add	r3, r2
 800cfae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d11e      	bne.n	800cff4 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d05d      	beq.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	719a      	strb	r2, [r3, #6]
 800cff2:	e050      	b.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cffa:	461a      	mov	r2, r3
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	4413      	add	r3, r2
 800d000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d004:	2b02      	cmp	r3, #2
 800d006:	d11e      	bne.n	800d046 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10b      	bne.n	800d026 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d026:	7bfb      	ldrb	r3, [r7, #15]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d034      	beq.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	719a      	strb	r2, [r3, #6]
 800d044:	e027      	b.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d04c:	461a      	mov	r2, r3
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	4413      	add	r3, r2
 800d052:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d056:	2b03      	cmp	r3, #3
 800d058:	d11d      	bne.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10b      	bne.n	800d078 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00b      	beq.n	800d096 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6978      	ldr	r0, [r7, #20]
 800d0ae:	f7fd f921 	bl	800a2f4 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3728      	adds	r7, #40	; 0x28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b089      	sub	sp, #36	; 0x24
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	60f8      	str	r0, [r7, #12]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3318      	adds	r3, #24
 800d0d6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d0de:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7afa      	ldrb	r2, [r7, #11]
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	e01e      	b.n	800d12c <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d111      	bne.n	800d120 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2bff      	cmp	r3, #255	; 0xff
 800d102:	d103      	bne.n	800d10c <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2280      	movs	r2, #128	; 0x80
 800d108:	701a      	strb	r2, [r3, #0]
 800d10a:	e005      	b.n	800d118 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	3301      	adds	r3, #1
 800d112:	b2da      	uxtb	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	e005      	b.n	800d12c <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	3301      	adds	r3, #1
 800d126:	b2da      	uxtb	r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d12c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3724      	adds	r7, #36	; 0x24
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d148:	2300      	movs	r3, #0
 800d14a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d152:	2b01      	cmp	r3, #1
 800d154:	d118      	bne.n	800d188 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	719a      	strb	r2, [r3, #6]
 800d186:	e03a      	b.n	800d1fe <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d118      	bne.n	800d1c4 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	719a      	strb	r2, [r3, #6]
 800d1c2:	e01c      	b.n	800d1fe <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d117      	bne.n	800d1fe <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d202:	4618      	mov	r0, r3
 800d204:	371c      	adds	r7, #28
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b08a      	sub	sp, #40	; 0x28
 800d212:	af00      	add	r7, sp, #0
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	607a      	str	r2, [r7, #4]
 800d218:	461a      	mov	r2, r3
 800d21a:	460b      	mov	r3, r1
 800d21c:	72fb      	strb	r3, [r7, #11]
 800d21e:	4613      	mov	r3, r2
 800d220:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d222:	2300      	movs	r3, #0
 800d224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3318      	adds	r3, #24
 800d22c:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d236:	7afa      	ldrb	r2, [r7, #11]
 800d238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d23a:	4611      	mov	r1, r2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe f8ca 	bl	800b3d6 <VL53L1_calc_macro_period_us>
 800d242:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d24a:	2301      	movs	r3, #1
 800d24c:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	031b      	lsls	r3, r3, #12
 800d252:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	085b      	lsrs	r3, r3, #1
 800d258:	69ba      	ldr	r2, [r7, #24]
 800d25a:	4413      	add	r3, r2
 800d25c:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	fbb2 f3f3 	udiv	r3, r2, r3
 800d266:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	2bff      	cmp	r3, #255	; 0xff
 800d26c:	d904      	bls.n	800d278 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	22ff      	movs	r2, #255	; 0xff
 800d272:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d276:	e004      	b.n	800d282 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	7afa      	ldrb	r2, [r7, #11]
 800d286:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d28a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d298:	461a      	mov	r2, r3
 800d29a:	214b      	movs	r1, #75	; 0x4b
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f007 f9bd 	bl	801461c <VL53L1_WrByte>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10a      	bne.n	800d2c6 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	2160      	movs	r1, #96	; 0x60
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f007 f9ae 	bl	801461c <VL53L1_WrByte>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2cc:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d2d4:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d2d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d2de:	f107 0214 	add.w	r2, r7, #20
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	2178      	movs	r1, #120	; 0x78
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f007 f92c 	bl	8014544 <VL53L1_WriteMulti>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	893a      	ldrh	r2, [r7, #8]
 800d2f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d2fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d108      	bne.n	800d314 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d302:	893b      	ldrh	r3, [r7, #8]
 800d304:	461a      	mov	r2, r3
 800d306:	211c      	movs	r1, #28
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f007 f9b1 	bl	8014670 <VL53L1_WrWord>
 800d30e:	4603      	mov	r3, r0
 800d310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d108      	bne.n	800d32e <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d31c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d31e:	461a      	mov	r2, r3
 800d320:	2164      	movs	r1, #100	; 0x64
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f007 f9a4 	bl	8014670 <VL53L1_WrWord>
 800d328:	4603      	mov	r3, r0
 800d32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d32e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d332:	2b00      	cmp	r3, #0
 800d334:	d108      	bne.n	800d348 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d336:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d338:	461a      	mov	r2, r3
 800d33a:	2166      	movs	r1, #102	; 0x66
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f007 f997 	bl	8014670 <VL53L1_WrWord>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d348:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3728      	adds	r7, #40	; 0x28
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d358:	b0a2      	sub	sp, #136	; 0x88
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d35e:	2300      	movs	r3, #0
 800d360:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d366:	3318      	adds	r3, #24
 800d368:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d36c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d370:	3308      	adds	r3, #8
 800d372:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d376:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d37a:	3318      	adds	r3, #24
 800d37c:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d380:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d384:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d388:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d38a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d38c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d390:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d103      	bne.n	800d3aa <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d3a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d3aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d3b2:	4413      	add	r3, r2
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	461c      	mov	r4, r3
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d3be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	f04f 0000 	mov.w	r0, #0
 800d3ca:	f04f 0100 	mov.w	r1, #0
 800d3ce:	0159      	lsls	r1, r3, #5
 800d3d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d3d4:	0150      	lsls	r0, r2, #5
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	ebb2 0804 	subs.w	r8, r2, r4
 800d3de:	eb63 0905 	sbc.w	r9, r3, r5
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	f04f 0300 	mov.w	r3, #0
 800d3ea:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d3ee:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d3f2:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d3f6:	4690      	mov	r8, r2
 800d3f8:	4699      	mov	r9, r3
 800d3fa:	eb18 0304 	adds.w	r3, r8, r4
 800d3fe:	633b      	str	r3, [r7, #48]	; 0x30
 800d400:	eb49 0305 	adc.w	r3, r9, r5
 800d404:	637b      	str	r3, [r7, #52]	; 0x34
 800d406:	f04f 0200 	mov.w	r2, #0
 800d40a:	f04f 0300 	mov.w	r3, #0
 800d40e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d412:	4629      	mov	r1, r5
 800d414:	00cb      	lsls	r3, r1, #3
 800d416:	4621      	mov	r1, r4
 800d418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d41c:	4621      	mov	r1, r4
 800d41e:	00ca      	lsls	r2, r1, #3
 800d420:	4610      	mov	r0, r2
 800d422:	4619      	mov	r1, r3
 800d424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d428:	2200      	movs	r2, #0
 800d42a:	643b      	str	r3, [r7, #64]	; 0x40
 800d42c:	647a      	str	r2, [r7, #68]	; 0x44
 800d42e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d432:	f7f2 ff45 	bl	80002c0 <__aeabi_uldivmod>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d43e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d442:	4622      	mov	r2, r4
 800d444:	462b      	mov	r3, r5
 800d446:	f04f 0000 	mov.w	r0, #0
 800d44a:	f04f 0100 	mov.w	r1, #0
 800d44e:	0159      	lsls	r1, r3, #5
 800d450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d454:	0150      	lsls	r0, r2, #5
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	ebb2 0a04 	subs.w	sl, r2, r4
 800d45e:	eb63 0b05 	sbc.w	fp, r3, r5
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d46e:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d472:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d476:	4692      	mov	sl, r2
 800d478:	469b      	mov	fp, r3
 800d47a:	eb1a 0304 	adds.w	r3, sl, r4
 800d47e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d480:	eb4b 0305 	adc.w	r3, fp, r5
 800d484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d486:	f04f 0200 	mov.w	r2, #0
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d492:	4629      	mov	r1, r5
 800d494:	00cb      	lsls	r3, r1, #3
 800d496:	4621      	mov	r1, r4
 800d498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d49c:	4621      	mov	r1, r4
 800d49e:	00ca      	lsls	r2, r1, #3
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d4ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4b2:	f7f2 ff05 	bl	80002c0 <__aeabi_uldivmod>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4c4:	8ad2      	ldrh	r2, [r2, #22]
 800d4c6:	fb02 f303 	mul.w	r3, r2, r3
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	623b      	str	r3, [r7, #32]
 800d4ce:	627a      	str	r2, [r7, #36]	; 0x24
 800d4d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d4d4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d4d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	d105      	bne.n	800d4ec <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d4e0:	f04f 0201 	mov.w	r2, #1
 800d4e4:	f04f 0300 	mov.w	r3, #0
 800d4e8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d4ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	f04f 0400 	mov.w	r4, #0
 800d4f8:	f04f 0500 	mov.w	r5, #0
 800d4fc:	015d      	lsls	r5, r3, #5
 800d4fe:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d502:	0154      	lsls	r4, r2, #5
 800d504:	4622      	mov	r2, r4
 800d506:	462b      	mov	r3, r5
 800d508:	1a14      	subs	r4, r2, r0
 800d50a:	61bc      	str	r4, [r7, #24]
 800d50c:	eb63 0301 	sbc.w	r3, r3, r1
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	f04f 0200 	mov.w	r2, #0
 800d516:	f04f 0300 	mov.w	r3, #0
 800d51a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d51e:	464c      	mov	r4, r9
 800d520:	00a3      	lsls	r3, r4, #2
 800d522:	4644      	mov	r4, r8
 800d524:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d528:	4644      	mov	r4, r8
 800d52a:	00a2      	lsls	r2, r4, #2
 800d52c:	4614      	mov	r4, r2
 800d52e:	461d      	mov	r5, r3
 800d530:	4623      	mov	r3, r4
 800d532:	181b      	adds	r3, r3, r0
 800d534:	613b      	str	r3, [r7, #16]
 800d536:	462b      	mov	r3, r5
 800d538:	eb41 0303 	adc.w	r3, r1, r3
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d54a:	4629      	mov	r1, r5
 800d54c:	02cb      	lsls	r3, r1, #11
 800d54e:	4621      	mov	r1, r4
 800d550:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d554:	4621      	mov	r1, r4
 800d556:	02ca      	lsls	r2, r1, #11
 800d558:	461c      	mov	r4, r3
 800d55a:	4613      	mov	r3, r2
 800d55c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d560:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d564:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d568:	f7f2 feaa 	bl	80002c0 <__aeabi_uldivmod>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d574:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	f04f 0400 	mov.w	r4, #0
 800d580:	f04f 0500 	mov.w	r5, #0
 800d584:	015d      	lsls	r5, r3, #5
 800d586:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d58a:	0154      	lsls	r4, r2, #5
 800d58c:	4622      	mov	r2, r4
 800d58e:	462b      	mov	r3, r5
 800d590:	1a14      	subs	r4, r2, r0
 800d592:	60bc      	str	r4, [r7, #8]
 800d594:	eb63 0301 	sbc.w	r3, r3, r1
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	f04f 0200 	mov.w	r2, #0
 800d59e:	f04f 0300 	mov.w	r3, #0
 800d5a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d5a6:	464c      	mov	r4, r9
 800d5a8:	00a3      	lsls	r3, r4, #2
 800d5aa:	4644      	mov	r4, r8
 800d5ac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d5b0:	4644      	mov	r4, r8
 800d5b2:	00a2      	lsls	r2, r4, #2
 800d5b4:	4614      	mov	r4, r2
 800d5b6:	461d      	mov	r5, r3
 800d5b8:	4623      	mov	r3, r4
 800d5ba:	181b      	adds	r3, r3, r0
 800d5bc:	603b      	str	r3, [r7, #0]
 800d5be:	462b      	mov	r3, r5
 800d5c0:	eb41 0303 	adc.w	r3, r1, r3
 800d5c4:	607b      	str	r3, [r7, #4]
 800d5c6:	f04f 0200 	mov.w	r2, #0
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	02cb      	lsls	r3, r1, #11
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d5dc:	4621      	mov	r1, r4
 800d5de:	02ca      	lsls	r2, r1, #11
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d5e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d5ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5f0:	f7f2 fe66 	bl	80002c0 <__aeabi_uldivmod>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d5fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d600:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d802      	bhi.n	800d610 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d60a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d60c:	2202      	movs	r2, #2
 800d60e:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d610:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d614:	4618      	mov	r0, r3
 800d616:	3788      	adds	r7, #136	; 0x88
 800d618:	46bd      	mov	sp, r7
 800d61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d620 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b096      	sub	sp, #88	; 0x58
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3318      	adds	r3, #24
 800d638:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d640:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d644:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d650:	2b01      	cmp	r3, #1
 800d652:	d108      	bne.n	800d666 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d65a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d666:	2300      	movs	r3, #0
 800d668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d66c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d670:	2b01      	cmp	r3, #1
 800d672:	d107      	bne.n	800d684 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	889b      	ldrh	r3, [r3, #4]
 800d678:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	609a      	str	r2, [r3, #8]
 800d682:	e002      	b.n	800d68a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	899b      	ldrh	r3, [r3, #12]
 800d694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	89db      	ldrh	r3, [r3, #14]
 800d69c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d125      	bne.n	800d700 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d021      	beq.n	800d700 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d6bc:	f107 0313 	add.w	r3, r7, #19
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 fe44 	bl	800e350 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d6c8:	7cfb      	ldrb	r3, [r7, #19]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d101      	bne.n	800d6d2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d6d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	653b      	str	r3, [r7, #80]	; 0x50
 800d6e0:	e006      	b.n	800d6f0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d6e2:	7cfb      	ldrb	r3, [r7, #19]
 800d6e4:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	3202      	adds	r2, #2
 800d6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ee:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	889b      	ldrh	r3, [r3, #4]
 800d6f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	88db      	ldrh	r3, [r3, #6]
 800d6fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d70a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	795b      	ldrb	r3, [r3, #5]
 800d716:	f043 0301 	orr.w	r3, r3, #1
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10a      	bne.n	800d740 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d72a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	795b      	ldrb	r3, [r3, #5]
 800d736:	f043 0302 	orr.w	r3, r3, #2
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d746:	2301      	movs	r3, #1
 800d748:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d750:	2b01      	cmp	r3, #1
 800d752:	d108      	bne.n	800d766 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d758:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d760:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d764:	e019      	b.n	800d79a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d766:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d76a:	019b      	lsls	r3, r3, #6
 800d76c:	461a      	mov	r2, r3
 800d76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d770:	fbb2 f3f3 	udiv	r3, r2, r3
 800d774:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d77e:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d780:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d784:	019b      	lsls	r3, r3, #6
 800d786:	461a      	mov	r2, r3
 800d788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d78e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d798:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d12a      	bne.n	800d7fa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d7ac:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d7b0:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7b4:	119b      	asrs	r3, r3, #6
 800d7b6:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7be:	db02      	blt.n	800d7c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7c4:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7c8:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d7d6:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d7da:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7de:	119b      	asrs	r3, r3, #6
 800d7e0:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e8:	db02      	blt.n	800d7f0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7ee:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f2:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	81da      	strh	r2, [r3, #14]
 800d7f8:	e042      	b.n	800d880 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d800:	2b01      	cmp	r3, #1
 800d802:	d13d      	bne.n	800d880 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d810:	2b00      	cmp	r3, #0
 800d812:	da00      	bge.n	800d816 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d814:	330f      	adds	r3, #15
 800d816:	111b      	asrs	r3, r3, #4
 800d818:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d820:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d826:	4413      	add	r3, r2
 800d828:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d830:	db02      	blt.n	800d838 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d836:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d83a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d844:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d84c:	4a51      	ldr	r2, [pc, #324]	; (800d994 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d84e:	fb82 1203 	smull	r1, r2, r2, r3
 800d852:	1152      	asrs	r2, r2, #5
 800d854:	17db      	asrs	r3, r3, #31
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d860:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d866:	4413      	add	r3, r2
 800d868:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d870:	db02      	blt.n	800d878 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d876:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d87a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	785b      	ldrb	r3, [r3, #1]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d177      	bne.n	800d978 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800d888:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d073      	beq.n	800d978 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2201      	movs	r2, #1
 800d894:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d89c:	f107 0313 	add.w	r3, r7, #19
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 fd54 	bl	800e350 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8aa:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800d8ae:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800d8b6:	7cfb      	ldrb	r3, [r7, #19]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d041      	beq.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d8bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d03d      	beq.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d03a      	beq.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8d6:	fb03 f202 	mul.w	r2, r3, r2
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e0:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800d8ec:	69ba      	ldr	r2, [r7, #24]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d303      	bcc.n	800d8fa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	719a      	strb	r2, [r3, #6]
 800d8f8:	e022      	b.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800d8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d902:	617b      	str	r3, [r7, #20]
				cval = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800d908:	2300      	movs	r3, #0
 800d90a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d90e:	e00e      	b.n	800d92e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800d910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800d918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d91a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d91c:	601a      	str	r2, [r3, #0]
					pcpo++;
 800d91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d920:	3304      	adds	r3, #4
 800d922:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800d924:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d928:	3301      	adds	r3, #1
 800d92a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d92e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	3b01      	subs	r3, #1
 800d936:	429a      	cmp	r2, r3
 800d938:	d3ea      	bcc.n	800d910 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800d93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d93e:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	799b      	ldrb	r3, [r3, #6]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d017      	beq.n	800d978 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	789b      	ldrb	r3, [r3, #2]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d105      	bne.n	800d978 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800d978:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d002      	beq.n	800d986 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2201      	movs	r2, #1
 800d984:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d986:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3758      	adds	r7, #88	; 0x58
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	66666667 	.word	0x66666667

0800d998 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800d998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d99c:	b0a2      	sub	sp, #136	; 0x88
 800d99e:	af02      	add	r7, sp, #8
 800d9a0:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	3318      	adds	r3, #24
 800d9ac:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800d9b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9ba:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d9be:	3318      	adds	r3, #24
 800d9c0:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d9c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9c4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800d9ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d9d0:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800d9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9d4:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d9d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9d8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d9dc:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800d9fa:	f04f 0200 	mov.w	r2, #0
 800d9fe:	f04f 0300 	mov.w	r3, #0
 800da02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800da06:	2300      	movs	r3, #0
 800da08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800da28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da2a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d108      	bne.n	800da44 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800da38:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d101      	bne.n	800da44 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800da44:	2300      	movs	r3, #0
 800da46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800da4a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800da4e:	4619      	mov	r1, r3
 800da50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da52:	f000 fc7d 	bl	800e350 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800da56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800da5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800da66:	2301      	movs	r3, #1
 800da68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800da6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800da6e:	f000 fb15 	bl	800e09c <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800da72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800da7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da82:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800da86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da88:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d901      	bls.n	800da94 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800da90:	2301      	movs	r3, #1
 800da92:	e000      	b.n	800da96 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800da94:	2300      	movs	r3, #0
 800da96:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800da9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800daa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daa4:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800daa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800daac:	429a      	cmp	r2, r3
 800daae:	d101      	bne.n	800dab4 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800dab0:	2301      	movs	r3, #1
 800dab2:	e000      	b.n	800dab6 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800daba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dabc:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d10e      	bne.n	800dae0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dac2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00a      	beq.n	800dae0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800daca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dacc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800dad0:	2b09      	cmp	r3, #9
 800dad2:	d105      	bne.n	800dae0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dad4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dae0:	2300      	movs	r3, #0
	run_smudge_detection =
 800dae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae8:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800daec:	2b09      	cmp	r3, #9
 800daee:	f000 80a6 	beq.w	800dc3e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800daf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daf4:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	f040 80a1 	bne.w	800dc3e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800dafc:	2302      	movs	r3, #2
 800dafe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800db02:	2300      	movs	r3, #0
 800db04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800db08:	e02d      	b.n	800db66 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800db0a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800db0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db10:	234c      	movs	r3, #76	; 0x4c
 800db12:	fb01 f303 	mul.w	r3, r1, r3
 800db16:	4413      	add	r3, r2
 800db18:	335e      	adds	r3, #94	; 0x5e
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b09      	cmp	r3, #9
 800db1e:	d11d      	bne.n	800db5c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800db20:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800db24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db26:	234c      	movs	r3, #76	; 0x4c
 800db28:	fb01 f303 	mul.w	r3, r1, r3
 800db2c:	4413      	add	r3, r2
 800db2e:	335a      	adds	r3, #90	; 0x5a
 800db30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db34:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800db36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800db3a:	429a      	cmp	r2, r3
 800db3c:	dc03      	bgt.n	800db46 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800db44:	e00a      	b.n	800db5c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800db46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d106      	bne.n	800db5c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800db4e:	2301      	movs	r3, #1
 800db50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800db54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db58:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800db5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db60:	3301      	adds	r3, #1
 800db62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800db66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db68:	7c9a      	ldrb	r2, [r3, #18]
 800db6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db6e:	4293      	cmp	r3, r2
 800db70:	d3cb      	bcc.n	800db0a <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800db72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db76:	2b02      	cmp	r3, #2
 800db78:	d102      	bne.n	800db80 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800db80:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800db84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db86:	234c      	movs	r3, #76	; 0x4c
 800db88:	fb01 f303 	mul.w	r3, r1, r3
 800db8c:	4413      	add	r3, r2
 800db8e:	3348      	adds	r3, #72	; 0x48
 800db90:	881b      	ldrh	r3, [r3, #0]
 800db92:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800db94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d150      	bne.n	800dc3e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800db9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800db9e:	2200      	movs	r2, #0
 800dba0:	469a      	mov	sl, r3
 800dba2:	4693      	mov	fp, r2
 800dba4:	4652      	mov	r2, sl
 800dba6:	465b      	mov	r3, fp
 800dba8:	f04f 0000 	mov.w	r0, #0
 800dbac:	f04f 0100 	mov.w	r1, #0
 800dbb0:	0159      	lsls	r1, r3, #5
 800dbb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dbb6:	0150      	lsls	r0, r2, #5
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	ebb2 040a 	subs.w	r4, r2, sl
 800dbc0:	eb63 050b 	sbc.w	r5, r3, fp
 800dbc4:	f04f 0200 	mov.w	r2, #0
 800dbc8:	f04f 0300 	mov.w	r3, #0
 800dbcc:	00ab      	lsls	r3, r5, #2
 800dbce:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dbd2:	00a2      	lsls	r2, r4, #2
 800dbd4:	4614      	mov	r4, r2
 800dbd6:	461d      	mov	r5, r3
 800dbd8:	eb14 080a 	adds.w	r8, r4, sl
 800dbdc:	eb45 090b 	adc.w	r9, r5, fp
 800dbe0:	f04f 0200 	mov.w	r2, #0
 800dbe4:	f04f 0300 	mov.w	r3, #0
 800dbe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbf4:	4690      	mov	r8, r2
 800dbf6:	4699      	mov	r9, r3
 800dbf8:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800dbfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dc00:	f04f 0200 	mov.w	r2, #0
 800dc04:	f04f 0300 	mov.w	r3, #0
 800dc08:	024b      	lsls	r3, r1, #9
 800dc0a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800dc0e:	0242      	lsls	r2, r0, #9
 800dc10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800dc14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc18:	2200      	movs	r2, #0
 800dc1a:	61bb      	str	r3, [r7, #24]
 800dc1c:	61fa      	str	r2, [r7, #28]
 800dc1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc22:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800dc26:	4621      	mov	r1, r4
 800dc28:	428a      	cmp	r2, r1
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	418b      	sbcs	r3, r1
 800dc2e:	d203      	bcs.n	800dc38 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800dc30:	2301      	movs	r3, #1
 800dc32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dc36:	e002      	b.n	800dc3e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800dc3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 810b 	beq.w	800de5e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800dc48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800dc4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc50:	f7ff fb80 	bl	800d354 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800dc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc56:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800dc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800dc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800dc68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc6a:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800dc70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	1ad2      	subs	r2, r2, r3
 800dc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc78:	4413      	add	r3, r2
 800dc7a:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800dc7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	da02      	bge.n	800dc88 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800dc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc84:	425b      	negs	r3, r3
 800dc86:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800dc88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc8a:	699b      	ldr	r3, [r3, #24]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc90:	4293      	cmp	r3, r2
 800dc92:	dd0c      	ble.n	800dcae <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800dc94:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800dc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800dc98:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800dc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	da03      	bge.n	800dca8 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800dca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dca2:	2201      	movs	r2, #1
 800dca4:	709a      	strb	r2, [r3, #2]
 800dca6:	e002      	b.n	800dcae <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800dca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcaa:	2202      	movs	r2, #2
 800dcac:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800dcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb6:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800dcb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcbe:	695b      	ldr	r3, [r3, #20]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d906      	bls.n	800dcd2 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800dcc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800dcca:	2302      	movs	r3, #2
 800dccc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dcd0:	e014      	b.n	800dcfc <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800dcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dcd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dcda:	2000      	movs	r0, #0
 800dcdc:	6139      	str	r1, [r7, #16]
 800dcde:	6178      	str	r0, [r7, #20]
 800dce0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dce4:	4621      	mov	r1, r4
 800dce6:	1851      	adds	r1, r2, r1
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	4629      	mov	r1, r5
 800dcec:	eb43 0101 	adc.w	r1, r3, r1
 800dcf0:	60f9      	str	r1, [r7, #12]
 800dcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dcf8:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800dcfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d202      	bcs.n	800dd0e <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800dd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	603b      	str	r3, [r7, #0]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd22:	f7f2 facd 	bl	80002c0 <__aeabi_uldivmod>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
		xtalk_offset_out =
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800dd2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd32:	1ad2      	subs	r2, r2, r3
 800dd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd36:	4413      	add	r3, r2
 800dd38:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800dd3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	da02      	bge.n	800dd46 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800dd40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd42:	425b      	negs	r3, r3
 800dd44:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800dd46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d112      	bne.n	800dd74 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800dd4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800dd54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd56:	4293      	cmp	r3, r2
 800dd58:	db0c      	blt.n	800dd74 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800dd5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800dd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800dd5e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800dd60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd62:	429a      	cmp	r2, r3
 800dd64:	da03      	bge.n	800dd6e <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800dd66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd68:	2201      	movs	r2, #1
 800dd6a:	70da      	strb	r2, [r3, #3]
 800dd6c:	e002      	b.n	800dd74 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800dd6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd70:	2202      	movs	r2, #2
 800dd72:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800dd74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d108      	bne.n	800dd8e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800dd7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800dd82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd84:	4293      	cmp	r3, r2
 800dd86:	da02      	bge.n	800dd8e <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800dd88:	2302      	movs	r3, #2
 800dd8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800dd8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd90:	2200      	movs	r2, #0
 800dd92:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800dd94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d112      	bne.n	800ddc2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800dd9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00e      	beq.n	800ddc2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800dda4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ddac:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800ddb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d905      	bls.n	800ddc2 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800ddb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddb8:	2201      	movs	r2, #1
 800ddba:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ddbc:	2302      	movs	r3, #2
 800ddbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800ddc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddc4:	7c1b      	ldrb	r3, [r3, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d007      	beq.n	800ddda <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800ddca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddcc:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800ddce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d902      	bls.n	800ddda <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800ddd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800ddda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dddc:	7c1b      	ldrb	r3, [r3, #16]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d107      	bne.n	800ddf2 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800dde2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dde4:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800dde6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d202      	bcs.n	800ddf2 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800ddec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800ddf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddf4:	089b      	lsrs	r3, r3, #2
 800ddf6:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800ddf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ddfe:	d301      	bcc.n	800de04 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800de00:	4b3e      	ldr	r3, [pc, #248]	; (800defc <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800de02:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800de04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10d      	bne.n	800de28 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de0c:	2300      	movs	r3, #0
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	2301      	movs	r3, #1
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de1c:	f7ff fc00 	bl	800d620 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800de20:	2302      	movs	r3, #2
 800de22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800de26:	e009      	b.n	800de3c <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de28:	2301      	movs	r3, #1
 800de2a:	9301      	str	r3, [sp, #4]
 800de2c:	2301      	movs	r3, #1
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de38:	f7ff fbf2 	bl	800d620 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800de3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de40:	2b02      	cmp	r3, #2
 800de42:	d10c      	bne.n	800de5e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800de44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de46:	f04f 0200 	mov.w	r2, #0
 800de4a:	f04f 0300 	mov.w	r3, #0
 800de4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800de52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800de58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de5a:	2200      	movs	r2, #0
 800de5c:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800de5e:	2300      	movs	r3, #0
 800de60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800de64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d140      	bne.n	800deee <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800de6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de74:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800de76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de78:	691a      	ldr	r2, [r3, #16]
 800de7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7e:	429a      	cmp	r2, r3
 800de80:	d202      	bcs.n	800de88 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800de82:	2301      	movs	r3, #1
 800de84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800de88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8c:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800de8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de92:	2b00      	cmp	r3, #0
 800de94:	d110      	bne.n	800deb8 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800de96:	2300      	movs	r3, #0
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	2300      	movs	r3, #0
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dea2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dea6:	f7ff fbbb 	bl	800d620 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800deaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deac:	2202      	movs	r2, #2
 800deae:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800deb0:	2302      	movs	r3, #2
 800deb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800deb6:	e009      	b.n	800decc <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800deb8:	2301      	movs	r3, #1
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dec4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dec8:	f7ff fbaa 	bl	800d620 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800decc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d10c      	bne.n	800deee <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800ded4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ded6:	f04f 0200 	mov.w	r2, #0
 800deda:	f04f 0300 	mov.w	r3, #0
 800dede:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800dee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800dee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deea:	2200      	movs	r2, #0
 800deec:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800deee:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800def2:	4618      	mov	r0, r3
 800def4:	3780      	adds	r7, #128	; 0x80
 800def6:	46bd      	mov	sp, r7
 800def8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800defc:	0003ffff 	.word	0x0003ffff

0800df00 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df08:	2300      	movs	r3, #0
 800df0a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	3318      	adds	r3, #24
 800df10:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800df18:	3308      	adds	r3, #8
 800df1a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df22:	2201      	movs	r2, #1
 800df24:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df4a:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df54:	461a      	mov	r2, r3
 800df56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800df5a:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df64:	461a      	mov	r2, r3
 800df66:	2300      	movs	r3, #0
 800df68:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df72:	2200      	movs	r2, #0
 800df74:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7e:	461a      	mov	r2, r3
 800df80:	23c8      	movs	r3, #200	; 0xc8
 800df82:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8c:	461a      	mov	r2, r3
 800df8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df92:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9c:	461a      	mov	r2, r3
 800df9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa2:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfac:	461a      	mov	r2, r3
 800dfae:	4b3a      	ldr	r3, [pc, #232]	; (800e098 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800dfb0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800dfc0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfda:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfe8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dffe:	461a      	mov	r2, r3
 800e000:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e004:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00e:	461a      	mov	r2, r3
 800e010:	230a      	movs	r3, #10
 800e012:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01c:	461a      	mov	r2, r3
 800e01e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e022:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e02c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e030:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03a:	461a      	mov	r2, r3
 800e03c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e040:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e04a:	461a      	mov	r2, r3
 800e04c:	2300      	movs	r3, #0
 800e04e:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e058:	461a      	mov	r2, r3
 800e05a:	2300      	movs	r3, #0
 800e05c:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e066:	3310      	adds	r3, #16
 800e068:	4619      	mov	r1, r3
 800e06a:	f04f 0200 	mov.w	r2, #0
 800e06e:	f04f 0300 	mov.w	r3, #0
 800e072:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e07c:	461a      	mov	r2, r3
 800e07e:	2300      	movs	r3, #0
 800e080:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f000 f809 	bl	800e09c <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e08a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3718      	adds	r7, #24
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	000ff800 	.word	0x000ff800

0800e09c <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e0ae:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e104:	2300      	movs	r3, #0
 800e106:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3318      	adds	r3, #24
 800e10c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e114:	461a      	mov	r2, r3
 800e116:	2300      	movs	r3, #0
 800e118:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e122:	2200      	movs	r2, #0
 800e124:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e12e:	2200      	movs	r2, #0
 800e130:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e13a:	3308      	adds	r3, #8
 800e13c:	2218      	movs	r2, #24
 800e13e:	2100      	movs	r1, #0
 800e140:	4618      	mov	r0, r3
 800e142:	f00b f9d1 	bl	80194e8 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e152:	b480      	push	{r7}
 800e154:	b085      	sub	sp, #20
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3318      	adds	r3, #24
 800e162:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16a:	2203      	movs	r2, #3
 800e16c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e176:	2200      	movs	r2, #0
 800e178:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e182:	2200      	movs	r2, #0
 800e184:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1be:	461a      	mov	r2, r3
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3714      	adds	r7, #20
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	b085      	sub	sp, #20
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1fa:	22ff      	movs	r2, #255	; 0xff
 800e1fc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e206:	2200      	movs	r2, #0
 800e208:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e212:	461a      	mov	r2, r3
 800e214:	2300      	movs	r3, #0
 800e216:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e220:	2200      	movs	r2, #0
 800e222:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e22c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e230:	2b00      	cmp	r3, #0
 800e232:	d007      	beq.n	800e244 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23a:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d007      	beq.n	800e262 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e258:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b087      	sub	sp, #28
 800e27e:	af00      	add	r7, sp, #0
 800e280:	60f8      	str	r0, [r7, #12]
 800e282:	60b9      	str	r1, [r7, #8]
 800e284:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e286:	2300      	movs	r3, #0
 800e288:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	229b      	movs	r2, #155	; 0x9b
 800e29a:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e29c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ca:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2da:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e2f6:	f003 0303 	and.w	r3, r3, #3
 800e2fa:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e302:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e30a:	4413      	add	r3, r2
 800e30c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e322:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e336:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e340:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e350:	b480      	push	{r7}
 800e352:	b087      	sub	sp, #28
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	3318      	adds	r3, #24
 800e35e:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e360:	2300      	movs	r3, #0
 800e362:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e36e:	2b07      	cmp	r3, #7
 800e370:	bf0c      	ite	eq
 800e372:	2301      	moveq	r3, #1
 800e374:	2300      	movne	r3, #0
 800e376:	b2db      	uxtb	r3, r3
 800e378:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e37a:	2300      	movs	r3, #0
 800e37c:	75fb      	strb	r3, [r7, #23]
 800e37e:	e019      	b.n	800e3b4 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e380:	7df9      	ldrb	r1, [r7, #23]
 800e382:	7bbb      	ldrb	r3, [r7, #14]
 800e384:	6938      	ldr	r0, [r7, #16]
 800e386:	461a      	mov	r2, r3
 800e388:	0052      	lsls	r2, r2, #1
 800e38a:	441a      	add	r2, r3
 800e38c:	0153      	lsls	r3, r2, #5
 800e38e:	461a      	mov	r2, r3
 800e390:	460b      	mov	r3, r1
 800e392:	005b      	lsls	r3, r3, #1
 800e394:	440b      	add	r3, r1
 800e396:	019b      	lsls	r3, r3, #6
 800e398:	4413      	add	r3, r2
 800e39a:	4403      	add	r3, r0
 800e39c:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e3a0:	3314      	adds	r3, #20
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	dd02      	ble.n	800e3ae <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e3a8:	7dbb      	ldrb	r3, [r7, #22]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e3ae:	7dfb      	ldrb	r3, [r7, #23]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	75fb      	strb	r3, [r7, #23]
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
 800e3b6:	2b05      	cmp	r3, #5
 800e3b8:	d9e2      	bls.n	800e380 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	7dba      	ldrb	r2, [r7, #22]
 800e3be:	701a      	strb	r2, [r3, #0]

	return status;
 800e3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e3de:	88fb      	ldrh	r3, [r7, #6]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d005      	beq.n	800e3f0 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e3e4:	88fb      	ldrh	r3, [r7, #6]
 800e3e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e3ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800e3ee:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e3fe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e402:	b089      	sub	sp, #36	; 0x24
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e40e:	f04f 0200 	mov.w	r2, #0
 800e412:	f04f 0300 	mov.w	r3, #0
 800e416:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	fb02 f303 	mul.w	r3, r2, r3
 800e426:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	0b1b      	lsrs	r3, r3, #12
 800e42c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2200      	movs	r2, #0
 800e432:	469a      	mov	sl, r3
 800e434:	4693      	mov	fp, r2
 800e436:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	68ba      	ldr	r2, [r7, #8]
 800e43e:	fb02 f303 	mul.w	r3, r2, r3
 800e442:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	091b      	lsrs	r3, r3, #4
 800e448:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2200      	movs	r2, #0
 800e44e:	4698      	mov	r8, r3
 800e450:	4691      	mov	r9, r2
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	fb08 f203 	mul.w	r2, r8, r3
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	fb09 f303 	mul.w	r3, r9, r3
 800e45e:	4413      	add	r3, r2
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	fba2 4508 	umull	r4, r5, r2, r8
 800e466:	442b      	add	r3, r5
 800e468:	461d      	mov	r5, r3
 800e46a:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e46e:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e476:	f04f 0200 	mov.w	r2, #0
 800e47a:	f04f 0300 	mov.w	r3, #0
 800e47e:	0b02      	lsrs	r2, r0, #12
 800e480:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e484:	0b0b      	lsrs	r3, r1, #12
 800e486:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e48a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d305      	bcc.n	800e49e <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e492:	f04f 32ff 	mov.w	r2, #4294967295
 800e496:	f04f 0300 	mov.w	r3, #0
 800e49a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e4a2:	697b      	ldr	r3, [r7, #20]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3724      	adds	r7, #36	; 0x24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e4ae:	4770      	bx	lr

0800e4b0 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e4b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4b4:	b096      	sub	sp, #88	; 0x58
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	627a      	str	r2, [r7, #36]	; 0x24
 800e4be:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e4c0:	f04f 0200 	mov.w	r2, #0
 800e4c4:	f04f 0300 	mov.w	r3, #0
 800e4c8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e4cc:	f04f 0200 	mov.w	r2, #0
 800e4d0:	f04f 0300 	mov.w	r3, #0
 800e4d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	17da      	asrs	r2, r3, #31
 800e4e0:	469a      	mov	sl, r3
 800e4e2:	4693      	mov	fp, r2
 800e4e4:	4652      	mov	r2, sl
 800e4e6:	465b      	mov	r3, fp
 800e4e8:	f04f 0000 	mov.w	r0, #0
 800e4ec:	f04f 0100 	mov.w	r1, #0
 800e4f0:	0159      	lsls	r1, r3, #5
 800e4f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4f6:	0150      	lsls	r0, r2, #5
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	ebb2 040a 	subs.w	r4, r2, sl
 800e500:	eb63 050b 	sbc.w	r5, r3, fp
 800e504:	f04f 0200 	mov.w	r2, #0
 800e508:	f04f 0300 	mov.w	r3, #0
 800e50c:	00ab      	lsls	r3, r5, #2
 800e50e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e512:	00a2      	lsls	r2, r4, #2
 800e514:	4614      	mov	r4, r2
 800e516:	461d      	mov	r5, r3
 800e518:	eb14 080a 	adds.w	r8, r4, sl
 800e51c:	eb45 090b 	adc.w	r9, r5, fp
 800e520:	f04f 0200 	mov.w	r2, #0
 800e524:	f04f 0300 	mov.w	r3, #0
 800e528:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e52c:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e530:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e534:	4690      	mov	r8, r2
 800e536:	4699      	mov	r9, r3
 800e538:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e53c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00d      	beq.n	800e55e <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e544:	2200      	movs	r2, #0
 800e546:	61bb      	str	r3, [r7, #24]
 800e548:	61fa      	str	r2, [r7, #28]
 800e54a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e54e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e552:	f7f1 feb5 	bl	80002c0 <__aeabi_uldivmod>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	d02a      	beq.n	800e5ba <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e564:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e568:	f04f 0200 	mov.w	r2, #0
 800e56c:	f04f 0300 	mov.w	r3, #0
 800e570:	02cb      	lsls	r3, r1, #11
 800e572:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e576:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e57a:	0849      	lsrs	r1, r1, #1
 800e57c:	2000      	movs	r0, #0
 800e57e:	6139      	str	r1, [r7, #16]
 800e580:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e582:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e586:	4621      	mov	r1, r4
 800e588:	1851      	adds	r1, r2, r1
 800e58a:	6039      	str	r1, [r7, #0]
 800e58c:	4629      	mov	r1, r5
 800e58e:	eb43 0101 	adc.w	r1, r3, r1
 800e592:	6079      	str	r1, [r7, #4]
 800e594:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e598:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	2200      	movs	r2, #0
 800e5a0:	60bb      	str	r3, [r7, #8]
 800e5a2:	60fa      	str	r2, [r7, #12]
 800e5a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e5ac:	f7f1 fe88 	bl	80002c0 <__aeabi_uldivmod>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e5b8:	e00b      	b.n	800e5d2 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e5ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e5be:	f04f 0200 	mov.w	r2, #0
 800e5c2:	f04f 0300 	mov.w	r3, #0
 800e5c6:	02cb      	lsls	r3, r1, #11
 800e5c8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e5cc:	02c2      	lsls	r2, r0, #11
 800e5ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5d4:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3758      	adds	r7, #88	; 0x58
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e5e2 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e5e2:	b480      	push	{r7}
 800e5e4:	b085      	sub	sp, #20
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e5ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5f2:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e5f4:	e002      	b.n	800e5fc <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	089b      	lsrs	r3, r3, #2
 800e5fa:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d8f8      	bhi.n	800e5f6 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e604:	e017      	b.n	800e636 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	4413      	add	r3, r2
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d30b      	bcc.n	800e62a <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	4413      	add	r3, r2
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	085b      	lsrs	r3, r3, #1
 800e622:	68ba      	ldr	r2, [r7, #8]
 800e624:	4413      	add	r3, r2
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	e002      	b.n	800e630 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	085b      	lsrs	r3, r3, #1
 800e62e:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	089b      	lsrs	r3, r3, #2
 800e634:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1e4      	bne.n	800e606 <VL53L1_isqrt+0x24>
	}

	return res;
 800e63c:	68fb      	ldr	r3, [r7, #12]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e652:	2300      	movs	r3, #0
 800e654:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e660:	4618      	mov	r0, r3
 800e662:	f000 faa5 	bl	800ebb0 <VL53L1_decode_vcsel_period>
 800e666:	4603      	mov	r3, r0
	period = 2048 *
 800e668:	02db      	lsls	r3, r3, #11
 800e66a:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e676:	461a      	mov	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e684:	02db      	lsls	r3, r3, #11
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	4413      	add	r3, r2
 800e68a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e692:	02db      	lsls	r3, r3, #11
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d009      	beq.n	800e6b4 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	68ba      	ldr	r2, [r7, #8]
 800e6a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	fb01 f202 	mul.w	r2, r1, r2
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]
 800e6b2:	e001      	b.n	800e6b8 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e6dc:	6838      	ldr	r0, [r7, #0]
 800e6de:	f000 fb90 	bl	800ee02 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ff7a 	bl	800e5e2 <VL53L1_isqrt>
 800e6ee:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e6f0:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	fb02 f303 	mul.w	r3, r2, r3
 800e6fa:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	3307      	adds	r3, #7
 800e700:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	111b      	asrs	r3, r3, #4
 800e706:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	4413      	add	r3, r2
 800e712:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2200      	movs	r2, #0
 800e718:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	2200      	movs	r2, #0
 800e720:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
 800e728:	e01e      	b.n	800e768 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e72a:	7bfa      	ldrb	r2, [r7, #15]
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	3206      	adds	r2, #6
 800e730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	429a      	cmp	r2, r3
 800e738:	dd13      	ble.n	800e762 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e740:	7bf9      	ldrb	r1, [r7, #15]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	3106      	adds	r1, #6
 800e746:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e74a:	441a      	add	r2, r3
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e758:	3301      	adds	r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	3301      	adds	r3, #1
 800e766:	73fb      	strb	r3, [r7, #15]
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	7a9b      	ldrb	r3, [r3, #10]
 800e76c:	7bfa      	ldrb	r2, [r7, #15]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d3db      	bcc.n	800e72a <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01c      	beq.n	800e7b6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e794:	0852      	lsrs	r2, r2, #1
 800e796:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e798:	441a      	add	r2, r3
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e7ac:	fb93 f2f2 	sdiv	r2, r3, r2
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e7be:	b480      	push	{r7}
 800e7c0:	b085      	sub	sp, #20
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	7b1b      	ldrb	r3, [r3, #12]
 800e7d6:	f003 0307 	and.w	r3, r3, #7
 800e7da:	2b07      	cmp	r3, #7
 800e7dc:	d13a      	bne.n	800e854 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73bb      	strb	r3, [r7, #14]
 800e7e6:	e01f      	b.n	800e828 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	7b1b      	ldrb	r3, [r3, #12]
 800e7f0:	f003 0307 	and.w	r3, r3, #7
 800e7f4:	2b07      	cmp	r3, #7
 800e7f6:	d014      	beq.n	800e822 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e7f8:	7bba      	ldrb	r2, [r7, #14]
 800e7fa:	7b7b      	ldrb	r3, [r7, #13]
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	440a      	add	r2, r1
 800e800:	7b11      	ldrb	r1, [r2, #12]
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	4413      	add	r3, r2
 800e806:	460a      	mov	r2, r1
 800e808:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e80a:	7bba      	ldrb	r2, [r7, #14]
 800e80c:	7b7b      	ldrb	r3, [r7, #13]
 800e80e:	6879      	ldr	r1, [r7, #4]
 800e810:	440a      	add	r2, r1
 800e812:	7c91      	ldrb	r1, [r2, #18]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	4413      	add	r3, r2
 800e818:	460a      	mov	r2, r1
 800e81a:	749a      	strb	r2, [r3, #18]
				i++;
 800e81c:	7b7b      	ldrb	r3, [r7, #13]
 800e81e:	3301      	adds	r3, #1
 800e820:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e822:	7bbb      	ldrb	r3, [r7, #14]
 800e824:	3301      	adds	r3, #1
 800e826:	73bb      	strb	r3, [r7, #14]
 800e828:	7bbb      	ldrb	r3, [r7, #14]
 800e82a:	2b05      	cmp	r3, #5
 800e82c:	d9dc      	bls.n	800e7e8 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e82e:	7b7b      	ldrb	r3, [r7, #13]
 800e830:	73bb      	strb	r3, [r7, #14]
 800e832:	e00c      	b.n	800e84e <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	4413      	add	r3, r2
 800e83a:	2210      	movs	r2, #16
 800e83c:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e83e:	7bbb      	ldrb	r3, [r7, #14]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	2200      	movs	r2, #0
 800e846:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e848:	7bbb      	ldrb	r3, [r7, #14]
 800e84a:	3301      	adds	r3, #1
 800e84c:	73bb      	strb	r3, [r7, #14]
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
 800e850:	2b05      	cmp	r3, #5
 800e852:	d9ef      	bls.n	800e834 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7adb      	ldrb	r3, [r3, #11]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d023      	beq.n	800e8a4 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7adb      	ldrb	r3, [r3, #11]
 800e860:	73fb      	strb	r3, [r7, #15]
 800e862:	e00f      	b.n	800e884 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e864:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	7ad2      	ldrb	r2, [r2, #11]
 800e86c:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	3106      	adds	r1, #6
 800e872:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	3206      	adds	r2, #6
 800e87a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	3301      	adds	r3, #1
 800e882:	73fb      	strb	r3, [r7, #15]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800e888:	7bfa      	ldrb	r2, [r7, #15]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d3ea      	bcc.n	800e864 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	72da      	strb	r2, [r3, #11]
	}
}
 800e8a4:	bf00      	nop
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e8c2:	88fb      	ldrh	r3, [r7, #6]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff fd83 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 800e8ca:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800e8d0:	f249 2257 	movw	r2, #37463	; 0x9257
 800e8d4:	fb02 f303 	mul.w	r3, r2, r3
 800e8d8:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e8e0:	0c1b      	lsrs	r3, r3, #16
 800e8e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	b087      	sub	sp, #28
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800e8fc:	2307      	movs	r3, #7
 800e8fe:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e90a:	db03      	blt.n	800e914 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800e90c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	e004      	b.n	800e91e <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	dd01      	ble.n	800e91e <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e924:	dd02      	ble.n	800e92c <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800e926:	2303      	movs	r3, #3
 800e928:	613b      	str	r3, [r7, #16]
 800e92a:	e001      	b.n	800e930 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800e92c:	2307      	movs	r3, #7
 800e92e:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d009      	beq.n	800e94a <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	409a      	lsls	r2, r3
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	085b      	lsrs	r3, r3, #1
 800e940:	441a      	add	r2, r3
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	fbb2 f3f3 	udiv	r3, r2, r3
 800e948:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e950:	dd02      	ble.n	800e958 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	011b      	lsls	r3, r3, #4
 800e956:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e95e:	d302      	bcc.n	800e966 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800e960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e964:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800e96a:	89fb      	ldrh	r3, [r7, #14]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	371c      	adds	r7, #28
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	603b      	str	r3, [r7, #0]
 800e984:	4613      	mov	r3, r2
 800e986:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800e990:	88fb      	ldrh	r3, [r7, #6]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d010      	beq.n	800e9b8 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	021a      	lsls	r2, r3, #8
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a0:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	085b      	lsrs	r3, r3, #1
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800e9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	e004      	b.n	800e9c2 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c0:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d901      	bls.n	800e9ce <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800e9d2:	8a7b      	ldrh	r3, [r7, #18]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	b093      	sub	sp, #76	; 0x4c
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	461e      	mov	r6, r3
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e9f6:	4633      	mov	r3, r6
 800e9f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800ea00:	f04f 0200 	mov.w	r2, #0
 800ea04:	f04f 0300 	mov.w	r3, #0
 800ea08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ea14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fcda 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 800ea1c:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800ea1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea20:	2200      	movs	r2, #0
 800ea22:	623b      	str	r3, [r7, #32]
 800ea24:	627a      	str	r2, [r7, #36]	; 0x24
 800ea26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea28:	2200      	movs	r2, #0
 800ea2a:	61bb      	str	r3, [r7, #24]
 800ea2c:	61fa      	str	r2, [r7, #28]
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ea34:	4602      	mov	r2, r0
 800ea36:	1a9b      	subs	r3, r3, r2
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	460a      	mov	r2, r1
 800ea3e:	eb63 0302 	sbc.w	r3, r3, r2
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ea4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4e:	2200      	movs	r2, #0
 800ea50:	469a      	mov	sl, r3
 800ea52:	4693      	mov	fp, r2
 800ea54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea56:	fb0a f203 	mul.w	r2, sl, r3
 800ea5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5c:	fb0b f303 	mul.w	r3, fp, r3
 800ea60:	4413      	add	r3, r2
 800ea62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea64:	fba2 890a 	umull	r8, r9, r2, sl
 800ea68:	444b      	add	r3, r9
 800ea6a:	4699      	mov	r9, r3
 800ea6c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ea70:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ea74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da08      	bge.n	800ea8e <VL53L1_range_maths+0xae>
 800ea7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ea80:	1851      	adds	r1, r2, r1
 800ea82:	60b9      	str	r1, [r7, #8]
 800ea84:	f143 0300 	adc.w	r3, r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
 800ea8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea8e:	f04f 0000 	mov.w	r0, #0
 800ea92:	f04f 0100 	mov.w	r1, #0
 800ea96:	0a50      	lsrs	r0, r2, #9
 800ea98:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ea9c:	1259      	asrs	r1, r3, #9
 800ea9e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800eaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaa4:	f249 2257 	movw	r2, #37463	; 0x9257
 800eaa8:	fb03 f202 	mul.w	r2, r3, r2
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	2100      	movs	r1, #0
 800eab0:	fb01 f303 	mul.w	r3, r1, r3
 800eab4:	4413      	add	r3, r2
 800eab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eab8:	f249 2157 	movw	r1, #37463	; 0x9257
 800eabc:	fba2 4501 	umull	r4, r5, r2, r1
 800eac0:	442b      	add	r3, r5
 800eac2:	461d      	mov	r5, r3
 800eac4:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800eac8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800eacc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	da07      	bge.n	800eae4 <VL53L1_range_maths+0x104>
 800ead4:	4934      	ldr	r1, [pc, #208]	; (800eba8 <VL53L1_range_maths+0x1c8>)
 800ead6:	1851      	adds	r1, r2, r1
 800ead8:	6039      	str	r1, [r7, #0]
 800eada:	f143 0300 	adc.w	r3, r3, #0
 800eade:	607b      	str	r3, [r7, #4]
 800eae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eae4:	f04f 0000 	mov.w	r0, #0
 800eae8:	f04f 0100 	mov.w	r1, #0
 800eaec:	0d90      	lsrs	r0, r2, #22
 800eaee:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800eaf2:	1599      	asrs	r1, r3, #22
 800eaf4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eafc:	4413      	add	r3, r2
 800eafe:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800eb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eb04:	fb02 f303 	mul.w	r3, r2, r3
 800eb08:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800eb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb10:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800eb12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	da01      	bge.n	800eb1c <VL53L1_range_maths+0x13c>
 800eb18:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800eb1c:	12db      	asrs	r3, r3, #11
 800eb1e:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800eb20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d130      	bne.n	800eb8a <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800eb28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	da00      	bge.n	800eb3c <VL53L1_range_maths+0x15c>
 800eb3a:	3303      	adds	r3, #3
 800eb3c:	109b      	asrs	r3, r3, #2
 800eb3e:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800eb40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb42:	4b1a      	ldr	r3, [pc, #104]	; (800ebac <VL53L1_range_maths+0x1cc>)
 800eb44:	fb83 2301 	smull	r2, r3, r3, r1
 800eb48:	109a      	asrs	r2, r3, #2
 800eb4a:	17cb      	asrs	r3, r1, #31
 800eb4c:	1ad2      	subs	r2, r2, r3
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	1aca      	subs	r2, r1, r3
 800eb58:	2a04      	cmp	r2, #4
 800eb5a:	dc09      	bgt.n	800eb70 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800eb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5e:	4a13      	ldr	r2, [pc, #76]	; (800ebac <VL53L1_range_maths+0x1cc>)
 800eb60:	fb82 1203 	smull	r1, r2, r2, r3
 800eb64:	1092      	asrs	r2, r2, #2
 800eb66:	17db      	asrs	r3, r3, #31
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	b21b      	sxth	r3, r3
 800eb6c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb6e:	e015      	b.n	800eb9c <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	4a0e      	ldr	r2, [pc, #56]	; (800ebac <VL53L1_range_maths+0x1cc>)
 800eb74:	fb82 1203 	smull	r1, r2, r2, r3
 800eb78:	1092      	asrs	r2, r2, #2
 800eb7a:	17db      	asrs	r3, r3, #31
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	3301      	adds	r3, #1
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	b21b      	sxth	r3, r3
 800eb86:	647b      	str	r3, [r7, #68]	; 0x44
 800eb88:	e008      	b.n	800eb9c <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800eb8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d104      	bne.n	800eb9c <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800eb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb94:	0fda      	lsrs	r2, r3, #31
 800eb96:	4413      	add	r3, r2
 800eb98:	105b      	asrs	r3, r3, #1
 800eb9a:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800eb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	374c      	adds	r7, #76	; 0x4c
 800eba2:	46bd      	mov	sp, r7
 800eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba8:	003fffff 	.word	0x003fffff
 800ebac:	66666667 	.word	0x66666667

0800ebb0 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800ebc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b083      	sub	sp, #12
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	781a      	ldrb	r2, [r3, #0]
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	7a5a      	ldrb	r2, [r3, #9]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	605a      	str	r2, [r3, #4]
}
 800ec46:	bf00      	nop
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b087      	sub	sp, #28
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	60f8      	str	r0, [r7, #12]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	607a      	str	r2, [r7, #4]
 800ec5e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2203      	movs	r2, #3
 800ec68:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2203      	movs	r2, #3
 800ec6e:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2218      	movs	r2, #24
 800ec86:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ec88:	897b      	ldrh	r3, [r7, #10]
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed26:	2300      	movs	r3, #0
 800ed28:	82fb      	strh	r3, [r7, #22]
 800ed2a:	e009      	b.n	800ed40 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ed2c:	8afb      	ldrh	r3, [r7, #22]
 800ed2e:	8afa      	ldrh	r2, [r7, #22]
 800ed30:	b2d1      	uxtb	r1, r2
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	4413      	add	r3, r2
 800ed36:	460a      	mov	r2, r1
 800ed38:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed3a:	8afb      	ldrh	r3, [r7, #22]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	82fb      	strh	r3, [r7, #22]
 800ed40:	8afb      	ldrh	r3, [r7, #22]
 800ed42:	2b05      	cmp	r3, #5
 800ed44:	d9f2      	bls.n	800ed2c <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed46:	2300      	movs	r3, #0
 800ed48:	82fb      	strh	r3, [r7, #22]
 800ed4a:	e007      	b.n	800ed5c <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ed4c:	8afb      	ldrh	r3, [r7, #22]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4413      	add	r3, r2
 800ed52:	2201      	movs	r2, #1
 800ed54:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ed56:	8afb      	ldrh	r3, [r7, #22]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	82fb      	strh	r3, [r7, #22]
 800ed5c:	8afb      	ldrh	r3, [r7, #22]
 800ed5e:	2b05      	cmp	r3, #5
 800ed60:	d9f4      	bls.n	800ed4c <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ed62:	2300      	movs	r3, #0
 800ed64:	82fb      	strh	r3, [r7, #22]
 800ed66:	e013      	b.n	800ed90 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800ed68:	8afa      	ldrh	r2, [r7, #22]
 800ed6a:	897b      	ldrh	r3, [r7, #10]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d206      	bcs.n	800ed7e <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800ed70:	8afa      	ldrh	r2, [r7, #22]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	3206      	adds	r2, #6
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ed7c:	e005      	b.n	800ed8a <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800ed7e:	8afa      	ldrh	r2, [r7, #22]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3206      	adds	r2, #6
 800ed84:	2100      	movs	r1, #0
 800ed86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ed8a:	8afb      	ldrh	r3, [r7, #22]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	82fb      	strh	r3, [r7, #22]
 800ed90:	8afb      	ldrh	r3, [r7, #22]
 800ed92:	2b17      	cmp	r3, #23
 800ed94:	d9e8      	bls.n	800ed68 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800ed96:	bf00      	nop
 800ed98:	bf00      	nop
 800ed9a:	371c      	adds	r7, #28
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800edb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	da10      	bge.n	800eddc <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800edba:	7bfb      	ldrb	r3, [r7, #15]
 800edbc:	43db      	mvns	r3, r3
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	f003 0307 	and.w	r3, r3, #7
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	3308      	adds	r3, #8
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800edce:	7bfb      	ldrb	r3, [r7, #15]
 800edd0:	3b80      	subs	r3, #128	; 0x80
 800edd2:	10db      	asrs	r3, r3, #3
 800edd4:	b2da      	uxtb	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800edda:	e00c      	b.n	800edf6 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	b2da      	uxtb	r2, r3
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800edee:	10db      	asrs	r3, r3, #3
 800edf0:	b2da      	uxtb	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	701a      	strb	r2, [r3, #0]
}
 800edf6:	bf00      	nop
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ee02:	b480      	push	{r7}
 800ee04:	b085      	sub	sp, #20
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]
 800ee12:	e02c      	b.n	800ee6e <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d009      	beq.n	800ee2e <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ee20:	7bf9      	ldrb	r1, [r7, #15]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3106      	adds	r1, #6
 800ee26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	db07      	blt.n	800ee3e <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ee2e:	7bfa      	ldrb	r2, [r7, #15]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3206      	adds	r2, #6
 800ee34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d009      	beq.n	800ee58 <VL53L1_hist_find_min_max_bin_values+0x56>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ee4a:	7bf9      	ldrb	r1, [r7, #15]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3106      	adds	r1, #6
 800ee50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	dc07      	bgt.n	800ee68 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ee58:	7bfa      	ldrb	r2, [r7, #15]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	3206      	adds	r2, #6
 800ee5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	73fb      	strb	r3, [r7, #15]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	7a9b      	ldrb	r3, [r3, #10]
 800ee72:	7bfa      	ldrb	r2, [r7, #15]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d3cd      	bcc.n	800ee14 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr

0800ee86 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ee86:	b480      	push	{r7}
 800ee88:	b085      	sub	sp, #20
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7adb      	ldrb	r3, [r3, #11]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d03a      	beq.n	800ef10 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eeac:	2300      	movs	r3, #0
 800eeae:	73fb      	strb	r3, [r7, #15]
 800eeb0:	e00e      	b.n	800eed0 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eeb8:	7bf9      	ldrb	r1, [r7, #15]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	3106      	adds	r1, #6
 800eebe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eec2:	441a      	add	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
 800eecc:	3301      	adds	r3, #1
 800eece:	73fb      	strb	r3, [r7, #15]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	7adb      	ldrb	r3, [r3, #11]
 800eed4:	7bfa      	ldrb	r2, [r7, #15]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d3eb      	bcc.n	800eeb2 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	7ad2      	ldrb	r2, [r2, #11]
 800eef0:	0852      	lsrs	r2, r2, #1
 800eef2:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800eef4:	441a      	add	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800ef06:	fb93 f2f2 	sdiv	r2, r3, r2
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800ef10:	bf00      	nop
 800ef12:	3714      	adds	r7, #20
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800ef1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef20:	b0ca      	sub	sp, #296	; 0x128
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ef28:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ef2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ef30:	4603      	mov	r3, r0
 800ef32:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800ef4e:	f04f 0200 	mov.w	r2, #0
 800ef52:	f04f 0300 	mov.w	r3, #0
 800ef56:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800ef60:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef64:	2300      	movs	r3, #0
 800ef66:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800ef68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800ef70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef74:	2300      	movs	r3, #0
 800ef76:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800ef78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800ef80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef84:	2300      	movs	r3, #0
 800ef86:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800ef88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800ef90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef94:	2300      	movs	r3, #0
 800ef96:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800ef98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800efa0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800efa4:	2300      	movs	r3, #0
 800efa6:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800efa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 80e1 	beq.w	800f178 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800efb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 80da 	beq.w	800f178 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800efc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efc8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff f9ff 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 800efd2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800efd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800efda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efde:	3301      	adds	r3, #1
 800efe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800efe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efec:	2110      	movs	r1, #16
 800efee:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800eff2:	f7ff fa04 	bl	800e3fe <VL53L1_duration_maths>
 800eff6:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800eff8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800effc:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800effe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f002:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f006:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7ff fc6d 	bl	800e8ee <VL53L1_rate_maths>
 800f014:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f016:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f01a:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f01c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f020:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f028:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f02c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	f7ff fa3c 	bl	800e4b0 <VL53L1_events_per_spad_maths>
 800f038:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f03a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f03e:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f044:	8adb      	ldrh	r3, [r3, #22]
 800f046:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f04a:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f050:	8adb      	ldrh	r3, [r3, #22]
 800f052:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f056:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f058:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f05c:	695b      	ldr	r3, [r3, #20]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f000 808a 	beq.w	800f178 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f068:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	2200      	movs	r2, #0
 800f06e:	461c      	mov	r4, r3
 800f070:	4615      	mov	r5, r2
 800f072:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f076:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f07a:	4622      	mov	r2, r4
 800f07c:	462b      	mov	r3, r5
 800f07e:	f04f 0000 	mov.w	r0, #0
 800f082:	f04f 0100 	mov.w	r1, #0
 800f086:	0159      	lsls	r1, r3, #5
 800f088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f08c:	0150      	lsls	r0, r2, #5
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	ebb2 0804 	subs.w	r8, r2, r4
 800f096:	eb63 0905 	sbc.w	r9, r3, r5
 800f09a:	f04f 0200 	mov.w	r2, #0
 800f09e:	f04f 0300 	mov.w	r3, #0
 800f0a2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f0a6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f0aa:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f0ae:	4690      	mov	r8, r2
 800f0b0:	4699      	mov	r9, r3
 800f0b2:	eb18 0a04 	adds.w	sl, r8, r4
 800f0b6:	eb49 0b05 	adc.w	fp, r9, r5
 800f0ba:	f04f 0200 	mov.w	r2, #0
 800f0be:	f04f 0300 	mov.w	r3, #0
 800f0c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f0c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f0ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0ce:	4692      	mov	sl, r2
 800f0d0:	469b      	mov	fp, r3
 800f0d2:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f0d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f0da:	f04f 0000 	mov.w	r0, #0
 800f0de:	f04f 0100 	mov.w	r1, #0
 800f0e2:	0319      	lsls	r1, r3, #12
 800f0e4:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f0e8:	0310      	lsls	r0, r2, #12
 800f0ea:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f0ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f0f2:	695b      	ldr	r3, [r3, #20]
 800f0f4:	085b      	lsrs	r3, r3, #1
 800f0f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f0fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f108:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f10c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f110:	4621      	mov	r1, r4
 800f112:	1851      	adds	r1, r2, r1
 800f114:	65b9      	str	r1, [r7, #88]	; 0x58
 800f116:	4629      	mov	r1, r5
 800f118:	eb43 0101 	adc.w	r1, r3, r1
 800f11c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f11e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f122:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f126:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f12a:	695b      	ldr	r3, [r3, #20]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f132:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f136:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f13a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f13e:	f7f1 f8bf 	bl	80002c0 <__aeabi_uldivmod>
 800f142:	4602      	mov	r2, r0
 800f144:	460b      	mov	r3, r1
 800f146:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f14a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f14e:	8adb      	ldrh	r3, [r3, #22]
 800f150:	b29b      	uxth	r3, r3
 800f152:	2200      	movs	r2, #0
 800f154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f158:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f15c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f160:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f164:	4621      	mov	r1, r4
 800f166:	428a      	cmp	r2, r1
 800f168:	4629      	mov	r1, r5
 800f16a:	418b      	sbcs	r3, r1
 800f16c:	d204      	bcs.n	800f178 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f16e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f172:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f176:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f178:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 82e9 	beq.w	800f756 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f188:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f000 82e2 	beq.w	800f756 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f192:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f196:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 82dc 	beq.w	800f756 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f19e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f000 82d5 	beq.w	800f756 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f1ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1b0:	885b      	ldrh	r3, [r3, #2]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f1b8:	657a      	str	r2, [r7, #84]	; 0x54
 800f1ba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f1be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f1c2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f1c6:	4622      	mov	r2, r4
 800f1c8:	462b      	mov	r3, r5
 800f1ca:	f04f 0000 	mov.w	r0, #0
 800f1ce:	f04f 0100 	mov.w	r1, #0
 800f1d2:	0159      	lsls	r1, r3, #5
 800f1d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f1d8:	0150      	lsls	r0, r2, #5
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	1b11      	subs	r1, r2, r4
 800f1e0:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1e2:	eb63 0305 	sbc.w	r3, r3, r5
 800f1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1e8:	f04f 0200 	mov.w	r2, #0
 800f1ec:	f04f 0300 	mov.w	r3, #0
 800f1f0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	008b      	lsls	r3, r1, #2
 800f1f8:	4641      	mov	r1, r8
 800f1fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1fe:	4641      	mov	r1, r8
 800f200:	008a      	lsls	r2, r1, #2
 800f202:	4611      	mov	r1, r2
 800f204:	461a      	mov	r2, r3
 800f206:	460b      	mov	r3, r1
 800f208:	191b      	adds	r3, r3, r4
 800f20a:	643b      	str	r3, [r7, #64]	; 0x40
 800f20c:	4613      	mov	r3, r2
 800f20e:	eb45 0303 	adc.w	r3, r5, r3
 800f212:	647b      	str	r3, [r7, #68]	; 0x44
 800f214:	f04f 0200 	mov.w	r2, #0
 800f218:	f04f 0300 	mov.w	r3, #0
 800f21c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f220:	4629      	mov	r1, r5
 800f222:	02cb      	lsls	r3, r1, #11
 800f224:	4621      	mov	r1, r4
 800f226:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f22a:	4621      	mov	r1, r4
 800f22c:	02ca      	lsls	r2, r1, #11
 800f22e:	461c      	mov	r4, r3
 800f230:	4613      	mov	r3, r2
 800f232:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f236:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	085b      	lsrs	r3, r3, #1
 800f23e:	b29b      	uxth	r3, r3
 800f240:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f244:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f248:	2200      	movs	r2, #0
 800f24a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f24e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f252:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f256:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f25a:	4621      	mov	r1, r4
 800f25c:	1851      	adds	r1, r2, r1
 800f25e:	63b9      	str	r1, [r7, #56]	; 0x38
 800f260:	4629      	mov	r1, r5
 800f262:	eb43 0101 	adc.w	r1, r3, r1
 800f266:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f268:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f26c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f270:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	b29b      	uxth	r3, r3
 800f278:	2200      	movs	r2, #0
 800f27a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f27e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f282:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f286:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f28a:	f7f1 f819 	bl	80002c0 <__aeabi_uldivmod>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f296:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f29a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f29e:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f2a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	011a      	lsls	r2, r3, #4
 800f2a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2ac:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f2ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	633b      	str	r3, [r7, #48]	; 0x30
 800f2b8:	637a      	str	r2, [r7, #52]	; 0x34
 800f2ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f2be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f2c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f2ce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f2d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f2d6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f2da:	4622      	mov	r2, r4
 800f2dc:	fb02 f203 	mul.w	r2, r2, r3
 800f2e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	fb01 f303 	mul.w	r3, r1, r3
 800f2ea:	441a      	add	r2, r3
 800f2ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	fba3 1301 	umull	r1, r3, r3, r1
 800f2f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f304:	18d3      	adds	r3, r2, r3
 800f306:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f30a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f30e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f312:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f316:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f31a:	8b5b      	ldrh	r3, [r3, #26]
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	2200      	movs	r2, #0
 800f320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f324:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f32c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f330:	4622      	mov	r2, r4
 800f332:	fb02 f203 	mul.w	r2, r2, r3
 800f336:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f33a:	4629      	mov	r1, r5
 800f33c:	fb01 f303 	mul.w	r3, r1, r3
 800f340:	441a      	add	r2, r3
 800f342:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f346:	4621      	mov	r1, r4
 800f348:	fba3 1301 	umull	r1, r3, r3, r1
 800f34c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f350:	460b      	mov	r3, r1
 800f352:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f35a:	18d3      	adds	r3, r2, r3
 800f35c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f360:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f364:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f368:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f36c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f370:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f374:	62b9      	str	r1, [r7, #40]	; 0x28
 800f376:	f143 0300 	adc.w	r3, r3, #0
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f37c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f380:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f384:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f388:	f04f 0000 	mov.w	r0, #0
 800f38c:	f04f 0100 	mov.w	r1, #0
 800f390:	0cd0      	lsrs	r0, r2, #19
 800f392:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f396:	0cd9      	lsrs	r1, r3, #19
 800f398:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f39c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3a0:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f3a4:	6239      	str	r1, [r7, #32]
 800f3a6:	f143 0300 	adc.w	r3, r3, #0
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f3ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f3b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f3b4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f3b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f3bc:	f04f 0300 	mov.w	r3, #0
 800f3c0:	f7f0 ff7e 	bl	80002c0 <__aeabi_uldivmod>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f3cc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3d0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f3d4:	f173 0300 	sbcs.w	r3, r3, #0
 800f3d8:	d305      	bcc.n	800f3e6 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f3da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f3de:	f04f 0300 	mov.w	r3, #0
 800f3e2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f3e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f3ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3ee:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f3f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	61bb      	str	r3, [r7, #24]
 800f3fa:	61fa      	str	r2, [r7, #28]
 800f3fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f400:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f404:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f418:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f41c:	4622      	mov	r2, r4
 800f41e:	fb02 f203 	mul.w	r2, r2, r3
 800f422:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f426:	4629      	mov	r1, r5
 800f428:	fb01 f303 	mul.w	r3, r1, r3
 800f42c:	441a      	add	r2, r3
 800f42e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f432:	4621      	mov	r1, r4
 800f434:	fba3 1301 	umull	r1, r3, r3, r1
 800f438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f43c:	460b      	mov	r3, r1
 800f43e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f446:	18d3      	adds	r3, r2, r3
 800f448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f44c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f450:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f454:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f458:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f45c:	8b5b      	ldrh	r3, [r3, #26]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	2200      	movs	r2, #0
 800f462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f466:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f46a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f46e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f472:	4622      	mov	r2, r4
 800f474:	fb02 f203 	mul.w	r2, r2, r3
 800f478:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f47c:	4629      	mov	r1, r5
 800f47e:	fb01 f303 	mul.w	r3, r1, r3
 800f482:	441a      	add	r2, r3
 800f484:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f488:	4621      	mov	r1, r4
 800f48a:	fba3 1301 	umull	r1, r3, r3, r1
 800f48e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f492:	460b      	mov	r3, r1
 800f494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f49c:	18d3      	adds	r3, r2, r3
 800f49e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f4a2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f4a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f4aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f4ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4b2:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f4b6:	6139      	str	r1, [r7, #16]
 800f4b8:	f143 0300 	adc.w	r3, r3, #0
 800f4bc:	617b      	str	r3, [r7, #20]
 800f4be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f4c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f4c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4ca:	f04f 0000 	mov.w	r0, #0
 800f4ce:	f04f 0100 	mov.w	r1, #0
 800f4d2:	0cd0      	lsrs	r0, r2, #19
 800f4d4:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f4d8:	0cd9      	lsrs	r1, r3, #19
 800f4da:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f4de:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f4e6:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f4e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f4ec:	891b      	ldrh	r3, [r3, #8]
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	673b      	str	r3, [r7, #112]	; 0x70
 800f4f4:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f4f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f4fa:	462b      	mov	r3, r5
 800f4fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f500:	4642      	mov	r2, r8
 800f502:	fb02 f203 	mul.w	r2, r2, r3
 800f506:	464b      	mov	r3, r9
 800f508:	4621      	mov	r1, r4
 800f50a:	fb01 f303 	mul.w	r3, r1, r3
 800f50e:	4413      	add	r3, r2
 800f510:	4622      	mov	r2, r4
 800f512:	4641      	mov	r1, r8
 800f514:	fba2 1201 	umull	r1, r2, r2, r1
 800f518:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f51c:	460a      	mov	r2, r1
 800f51e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f522:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f526:	4413      	add	r3, r2
 800f528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f52c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f530:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f534:	4622      	mov	r2, r4
 800f536:	fb02 f203 	mul.w	r2, r2, r3
 800f53a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f53e:	4629      	mov	r1, r5
 800f540:	fb01 f303 	mul.w	r3, r1, r3
 800f544:	4413      	add	r3, r2
 800f546:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f54a:	4621      	mov	r1, r4
 800f54c:	fba2 1201 	umull	r1, r2, r2, r1
 800f550:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f554:	460a      	mov	r2, r1
 800f556:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f55a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f55e:	4413      	add	r3, r2
 800f560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f564:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f568:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f56c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f570:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f574:	88db      	ldrh	r3, [r3, #6]
 800f576:	b29b      	uxth	r3, r3
 800f578:	2200      	movs	r2, #0
 800f57a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f57c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f57e:	f04f 0200 	mov.w	r2, #0
 800f582:	f04f 0300 	mov.w	r3, #0
 800f586:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f58a:	4629      	mov	r1, r5
 800f58c:	01cb      	lsls	r3, r1, #7
 800f58e:	4621      	mov	r1, r4
 800f590:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f594:	4621      	mov	r1, r4
 800f596:	01ca      	lsls	r2, r1, #7
 800f598:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f59c:	1884      	adds	r4, r0, r2
 800f59e:	60bc      	str	r4, [r7, #8]
 800f5a0:	eb41 0303 	adc.w	r3, r1, r3
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f5aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f5ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f5b2:	88db      	ldrh	r3, [r3, #6]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	663b      	str	r3, [r7, #96]	; 0x60
 800f5ba:	667a      	str	r2, [r7, #100]	; 0x64
 800f5bc:	f04f 0200 	mov.w	r2, #0
 800f5c0:	f04f 0300 	mov.w	r3, #0
 800f5c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	020b      	lsls	r3, r1, #8
 800f5cc:	4621      	mov	r1, r4
 800f5ce:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	020a      	lsls	r2, r1, #8
 800f5d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f5da:	f7f0 fe71 	bl	80002c0 <__aeabi_uldivmod>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f5e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5ea:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f5ee:	6039      	str	r1, [r7, #0]
 800f5f0:	f143 0300 	adc.w	r3, r3, #0
 800f5f4:	607b      	str	r3, [r7, #4]
 800f5f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f5fa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f5fe:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f606:	f04f 0300 	mov.w	r3, #0
 800f60a:	f7f0 fe59 	bl	80002c0 <__aeabi_uldivmod>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f616:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f61a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f61e:	f173 0300 	sbcs.w	r3, r3, #0
 800f622:	d305      	bcc.n	800f630 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f624:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f628:	f04f 0300 	mov.w	r3, #0
 800f62c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f630:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f634:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f638:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f63a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f63e:	69db      	ldr	r3, [r3, #28]
 800f640:	021b      	lsls	r3, r3, #8
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe ffcd 	bl	800e5e2 <VL53L1_isqrt>
 800f648:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f650:	785b      	ldrb	r3, [r3, #1]
 800f652:	461a      	mov	r2, r3
 800f654:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f658:	fb02 f303 	mul.w	r3, r2, r3
 800f65c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f660:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f664:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f666:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f66a:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d218      	bcs.n	800f6a2 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f678:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f67c:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f688:	021b      	lsls	r3, r3, #8
 800f68a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f68e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f692:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f696:	429a      	cmp	r2, r3
 800f698:	d203      	bcs.n	800f6a2 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f69a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f69e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f6a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6a6:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f6a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6ac:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f6ae:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f6b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f6b4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f6b6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f6ba:	f000 f854 	bl	800f766 <VL53L1_f_002>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f6c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6c6:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f6c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6cc:	6a1b      	ldr	r3, [r3, #32]
 800f6ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f6d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f6d6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f6da:	461a      	mov	r2, r3
 800f6dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6e0:	fb02 f303 	mul.w	r3, r2, r3
 800f6e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f6e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6ec:	3308      	adds	r3, #8
 800f6ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f6f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6f6:	091b      	lsrs	r3, r3, #4
 800f6f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f6fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f700:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f702:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f704:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f708:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f70a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f70c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f710:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f712:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f716:	f000 f826 	bl	800f766 <VL53L1_f_002>
 800f71a:	4603      	mov	r3, r0
 800f71c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f71e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f722:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f724:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f728:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f72c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f730:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f734:	429a      	cmp	r2, r3
 800f736:	da07      	bge.n	800f748 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f73c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f744:	801a      	strh	r2, [r3, #0]
 800f746:	e006      	b.n	800f756 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f748:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f74c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f754:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f756:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f75a:	4618      	mov	r0, r3
 800f75c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f760:	46bd      	mov	sp, r7
 800f762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f766 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b086      	sub	sp, #24
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	60f8      	str	r0, [r7, #12]
 800f76e:	60b9      	str	r1, [r7, #8]
 800f770:	607a      	str	r2, [r7, #4]
 800f772:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	fb03 f303 	mul.w	r3, r3, r3
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	4413      	add	r3, r2
 800f78c:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f78e:	6938      	ldr	r0, [r7, #16]
 800f790:	f7fe ff27 	bl	800e5e2 <VL53L1_isqrt>
 800f794:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	4413      	add	r3, r2
 800f79c:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	011b      	lsls	r3, r3, #4
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fe ff1d 	bl	800e5e2 <VL53L1_isqrt>
 800f7a8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	fb02 f303 	mul.w	r3, r2, r3
 800f7b2:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d009      	beq.n	800f7ce <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	4413      	add	r3, r2
 800f7c0:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	697a      	ldr	r2, [r7, #20]
 800f7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7cc:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f7ce:	697b      	ldr	r3, [r7, #20]

}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2218      	movs	r2, #24
 800f7e8:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	73fb      	strb	r3, [r7, #15]
 800f80e:	e01f      	b.n	800f850 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f810:	7bfb      	ldrb	r3, [r7, #15]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	4413      	add	r3, r2
 800f816:	2200      	movs	r2, #0
 800f818:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f81a:	7bfb      	ldrb	r3, [r7, #15]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f826:	7bfb      	ldrb	r3, [r7, #15]
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	4413      	add	r3, r2
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f832:	7bfa      	ldrb	r2, [r7, #15]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	322e      	adds	r2, #46	; 0x2e
 800f838:	2100      	movs	r1, #0
 800f83a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f83e:	7bfa      	ldrb	r2, [r7, #15]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	3246      	adds	r2, #70	; 0x46
 800f844:	2100      	movs	r1, #0
 800f846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f84a:	7bfb      	ldrb	r3, [r7, #15]
 800f84c:	3301      	adds	r3, #1
 800f84e:	73fb      	strb	r3, [r7, #15]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	785b      	ldrb	r3, [r3, #1]
 800f854:	7bfa      	ldrb	r2, [r7, #15]
 800f856:	429a      	cmp	r2, r3
 800f858:	d3da      	bcc.n	800f810 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2208      	movs	r2, #8
 800f866:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f878:	461a      	mov	r2, r3
 800f87a:	2118      	movs	r1, #24
 800f87c:	2000      	movs	r0, #0
 800f87e:	f7ff f9e8 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800f888:	461a      	mov	r2, r3
 800f88a:	2118      	movs	r1, #24
 800f88c:	2000      	movs	r0, #0
 800f88e:	f7ff f9e0 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f898:	461a      	mov	r2, r3
 800f89a:	2118      	movs	r1, #24
 800f89c:	2000      	movs	r0, #0
 800f89e:	f7ff f9d8 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	2118      	movs	r1, #24
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f7ff f9d0 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	2118      	movs	r1, #24
 800f8bc:	2000      	movs	r0, #0
 800f8be:	f7ff f9c8 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800f8c2:	bf00      	nop
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f8ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8ce:	b090      	sub	sp, #64	; 0x40
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	61b9      	str	r1, [r7, #24]
 800f8d4:	617a      	str	r2, [r7, #20]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4603      	mov	r3, r0
 800f8da:	83fb      	strh	r3, [r7, #30]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800f8f2:	f04f 0200 	mov.w	r2, #0
 800f8f6:	f04f 0300 	mov.w	r3, #0
 800f8fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800f906:	2300      	movs	r3, #0
 800f908:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800f90a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f90c:	7a5a      	ldrb	r2, [r3, #9]
 800f90e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f910:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800f912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f914:	7a1a      	ldrb	r2, [r3, #8]
 800f916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f918:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800f91a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f91c:	7a9a      	ldrb	r2, [r3, #10]
 800f91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f920:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800f922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f924:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f92a:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800f92c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f92e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff f93c 	bl	800ebb0 <VL53L1_decode_vcsel_period>
 800f938:	4603      	mov	r3, r0
 800f93a:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800f93c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f93e:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800f940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f946:	17da      	asrs	r2, r3, #31
 800f948:	60bb      	str	r3, [r7, #8]
 800f94a:	60fa      	str	r2, [r7, #12]
 800f94c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f950:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800f954:	8bfb      	ldrh	r3, [r7, #30]
 800f956:	2200      	movs	r2, #0
 800f958:	4698      	mov	r8, r3
 800f95a:	4691      	mov	r9, r2
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	fb08 f203 	mul.w	r2, r8, r3
 800f962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f964:	fb09 f303 	mul.w	r3, r9, r3
 800f968:	4413      	add	r3, r2
 800f96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f96c:	fba2 4508 	umull	r4, r5, r2, r8
 800f970:	442b      	add	r3, r5
 800f972:	461d      	mov	r5, r3
 800f974:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800f978:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800f97c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f980:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800f984:	f143 0b00 	adc.w	fp, r3, #0
 800f988:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800f98c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f990:	2b00      	cmp	r3, #0
 800f992:	da08      	bge.n	800f9a6 <VL53L1_f_018+0xdc>
 800f994:	f640 71ff 	movw	r1, #4095	; 0xfff
 800f998:	1851      	adds	r1, r2, r1
 800f99a:	6039      	str	r1, [r7, #0]
 800f99c:	f143 0300 	adc.w	r3, r3, #0
 800f9a0:	607b      	str	r3, [r7, #4]
 800f9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9a6:	f04f 0000 	mov.w	r0, #0
 800f9aa:	f04f 0100 	mov.w	r1, #0
 800f9ae:	0b10      	lsrs	r0, r2, #12
 800f9b0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800f9b4:	1319      	asrs	r1, r3, #12
 800f9b6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800f9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9bc:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f9c4:	e062      	b.n	800fa8c <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800f9c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9ca:	089b      	lsrs	r3, r3, #2
 800f9cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800f9d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f9d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9d6:	4413      	add	r3, r2
 800f9d8:	7c9b      	ldrb	r3, [r3, #18]
 800f9da:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dd4f      	ble.n	800fa82 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800f9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9e4:	7a9b      	ldrb	r3, [r3, #10]
 800f9e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d20f      	bcs.n	800fa0e <VL53L1_f_018+0x144>
 800f9ee:	7f7b      	ldrb	r3, [r7, #29]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00c      	beq.n	800fa0e <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800f9f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9fa:	3206      	adds	r2, #6
 800f9fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa02:	441a      	add	r2, r3
 800fa04:	6a3b      	ldr	r3, [r7, #32]
 800fa06:	fb02 f303 	mul.w	r3, r2, r3
 800fa0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa0c:	e004      	b.n	800fa18 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fa0e:	6a3b      	ldr	r3, [r7, #32]
 800fa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa12:	fb02 f303 	mul.w	r3, r2, r3
 800fa16:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fde1 	bl	800e5e2 <VL53L1_isqrt>
 800fa20:	4603      	mov	r3, r0
 800fa22:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	0fda      	lsrs	r2, r3, #31
 800fa28:	4413      	add	r3, r2
 800fa2a:	105b      	asrs	r3, r3, #1
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	4413      	add	r3, r2
 800fa32:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fa34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	fb92 f3f3 	sdiv	r3, r2, r3
 800fa3c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	fb02 f303 	mul.w	r3, r2, r3
 800fa46:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	3308      	adds	r3, #8
 800fa4c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	da00      	bge.n	800fa56 <VL53L1_f_018+0x18c>
 800fa54:	330f      	adds	r3, #15
 800fa56:	111b      	asrs	r3, r3, #4
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fa5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	4413      	add	r3, r2
 800fa60:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fa62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	da01      	bge.n	800fa6e <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fa6e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa74:	3216      	adds	r2, #22
 800fa76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fa7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa80:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fa82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa86:	3301      	adds	r3, #1
 800fa88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa8e:	7a9b      	ldrb	r3, [r3, #10]
 800fa90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d396      	bcc.n	800f9c6 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fa98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fa9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faa0:	7a1b      	ldrb	r3, [r3, #8]
 800faa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800faa6:	e033      	b.n	800fb10 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800faa8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800faac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faae:	3206      	adds	r2, #6
 800fab0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fab4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faba:	3116      	adds	r1, #22
 800fabc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	dd13      	ble.n	800faec <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faca:	4413      	add	r3, r2
 800facc:	2201      	movs	r2, #1
 800face:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fad4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fad6:	4413      	add	r3, r2
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fae0:	791b      	ldrb	r3, [r3, #4]
 800fae2:	3301      	adds	r3, #1
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fae8:	711a      	strb	r2, [r3, #4]
 800faea:	e00c      	b.n	800fb06 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800faec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faf2:	4413      	add	r3, r2
 800faf4:	2200      	movs	r2, #0
 800faf6:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800faf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fafc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fafe:	4413      	add	r3, r2
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fb06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb12:	7a9b      	ldrb	r3, [r3, #10]
 800fb14:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d3c5      	bcc.n	800faa8 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fb1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3740      	adds	r7, #64	; 0x40
 800fb24:	46bd      	mov	sp, r7
 800fb26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb2a <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fb2a:	b480      	push	{r7}
 800fb2c:	b085      	sub	sp, #20
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	73fb      	strb	r3, [r7, #15]
 800fb4e:	e02d      	b.n	800fbac <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	3301      	adds	r3, #1
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	78d2      	ldrb	r2, [r2, #3]
 800fb58:	fb93 f1f2 	sdiv	r1, r3, r2
 800fb5c:	fb01 f202 	mul.w	r2, r1, r2
 800fb60:	1a9b      	subs	r3, r3, r2
 800fb62:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	789b      	ldrb	r3, [r3, #2]
 800fb68:	7bfa      	ldrb	r2, [r7, #15]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d21b      	bcs.n	800fba6 <VL53L1_f_019+0x7c>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	789b      	ldrb	r3, [r3, #2]
 800fb72:	7b3a      	ldrb	r2, [r7, #12]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d216      	bcs.n	800fba6 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10f      	bne.n	800fba6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fb86:	7b3b      	ldrb	r3, [r7, #12]
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d108      	bne.n	800fba6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fb94:	7bbb      	ldrb	r3, [r7, #14]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d105      	bne.n	800fba6 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	7bfa      	ldrb	r2, [r7, #15]
 800fb9e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fba2:	2301      	movs	r3, #1
 800fba4:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fba6:	7bfb      	ldrb	r3, [r7, #15]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	73fb      	strb	r3, [r7, #15]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	78db      	ldrb	r3, [r3, #3]
 800fbb0:	7bfa      	ldrb	r2, [r7, #15]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d3cc      	bcc.n	800fb50 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fbb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b085      	sub	sp, #20
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fbe4:	73fb      	strb	r3, [r7, #15]
 800fbe6:	e05a      	b.n	800fc9e <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	78da      	ldrb	r2, [r3, #3]
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
 800fbee:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbf2:	fb01 f202 	mul.w	r2, r1, r2
 800fbf6:	1a9b      	subs	r3, r3, r2
 800fbf8:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	78d2      	ldrb	r2, [r2, #3]
 800fc02:	fb93 f1f2 	sdiv	r1, r3, r2
 800fc06:	fb01 f202 	mul.w	r2, r1, r2
 800fc0a:	1a9b      	subs	r3, r3, r2
 800fc0c:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	789b      	ldrb	r3, [r3, #2]
 800fc12:	7b7a      	ldrb	r2, [r7, #13]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d23f      	bcs.n	800fc98 <VL53L1_f_020+0xd2>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	789b      	ldrb	r3, [r3, #2]
 800fc1c:	7b3a      	ldrb	r2, [r7, #12]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d23a      	bcs.n	800fc98 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800fc22:	7b7b      	ldrb	r3, [r7, #13]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	4413      	add	r3, r2
 800fc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10e      	bne.n	800fc4e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800fc30:	7b3b      	ldrb	r3, [r7, #12]
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	4413      	add	r3, r2
 800fc36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d107      	bne.n	800fc4e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fc44:	3301      	adds	r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d905      	bls.n	800fc6a <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800fc6a:	7b7b      	ldrb	r3, [r7, #13]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	4413      	add	r3, r2
 800fc70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d009      	beq.n	800fc8c <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800fc78:	7b7b      	ldrb	r3, [r7, #13]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	4413      	add	r3, r2
 800fc84:	460a      	mov	r2, r1
 800fc86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc8a:	e005      	b.n	800fc98 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800fc8c:	7b7b      	ldrb	r3, [r7, #13]
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	4413      	add	r3, r2
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800fc9e:	7bfa      	ldrb	r2, [r7, #15]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fca6:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800fcac:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	db9a      	blt.n	800fbe8 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fcb2:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b087      	sub	sp, #28
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800fcde:	2300      	movs	r3, #0
 800fce0:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	78db      	ldrb	r3, [r3, #3]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800fcea:	7cbb      	ldrb	r3, [r7, #18]
 800fcec:	085b      	lsrs	r3, r3, #1
 800fcee:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fcf6:	75fb      	strb	r3, [r7, #23]
 800fcf8:	e0a2      	b.n	800fe40 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	78da      	ldrb	r2, [r3, #3]
 800fcfe:	7dfb      	ldrb	r3, [r7, #23]
 800fd00:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd04:	fb01 f202 	mul.w	r2, r1, r2
 800fd08:	1a9b      	subs	r3, r3, r2
 800fd0a:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800fd0c:	7dfb      	ldrb	r3, [r7, #23]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	78d2      	ldrb	r2, [r2, #3]
 800fd14:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd18:	fb01 f202 	mul.w	r2, r1, r2
 800fd1c:	1a9b      	subs	r3, r3, r2
 800fd1e:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	789b      	ldrb	r3, [r3, #2]
 800fd24:	7d7a      	ldrb	r2, [r7, #21]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	f080 8087 	bcs.w	800fe3a <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800fd30:	7d3a      	ldrb	r2, [r7, #20]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	f080 8081 	bcs.w	800fe3a <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800fd38:	7d7b      	ldrb	r3, [r7, #21]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d12f      	bne.n	800fda6 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800fd46:	7d3b      	ldrb	r3, [r7, #20]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d028      	beq.n	800fda6 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800fd54:	7d3b      	ldrb	r3, [r7, #20]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	4413      	add	r3, r2
 800fd5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fd68:	7cfa      	ldrb	r2, [r7, #19]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d21b      	bcs.n	800fda6 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fd6e:	7cfa      	ldrb	r2, [r7, #19]
 800fd70:	4613      	mov	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	4413      	add	r3, r2
 800fd80:	3304      	adds	r3, #4
 800fd82:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	7dfa      	ldrb	r2, [r7, #23]
 800fd88:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800fd8a:	7dfb      	ldrb	r3, [r7, #23]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	22ff      	movs	r2, #255	; 0xff
 800fd98:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2200      	movs	r2, #0
 800fda4:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800fda6:	7d7b      	ldrb	r3, [r7, #21]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	4413      	add	r3, r2
 800fdac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d042      	beq.n	800fe3a <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800fdb4:	7d3b      	ldrb	r3, [r7, #20]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	4413      	add	r3, r2
 800fdba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d13b      	bne.n	800fe3a <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800fdc2:	7d7b      	ldrb	r3, [r7, #21]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fdd6:	7cfa      	ldrb	r2, [r7, #19]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d22e      	bcs.n	800fe3a <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fddc:	7cfa      	ldrb	r2, [r7, #19]
 800fdde:	4613      	mov	r3, r2
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	4413      	add	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	3304      	adds	r3, #4
 800fdf0:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	7dfa      	ldrb	r2, [r7, #23]
 800fdf6:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800fe0a:	1ad3      	subs	r3, r2, r3
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	3301      	adds	r3, #1
 800fe10:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	3301      	adds	r3, #1
 800fe24:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	799b      	ldrb	r3, [r3, #6]
 800fe2e:	7cba      	ldrb	r2, [r7, #18]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d202      	bcs.n	800fe3a <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	7cba      	ldrb	r2, [r7, #18]
 800fe38:	719a      	strb	r2, [r3, #6]
		blb++) {
 800fe3a:	7dfb      	ldrb	r3, [r7, #23]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800fe40:	7dfa      	ldrb	r2, [r7, #23]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe48:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800fe4e:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800fe50:	429a      	cmp	r2, r3
 800fe52:	f6ff af52 	blt.w	800fcfa <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe56:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	371c      	adds	r7, #28
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b090      	sub	sp, #64	; 0x40
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	6039      	str	r1, [r7, #0]
 800fe70:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800fe78:	f107 030c 	add.w	r3, r7, #12
 800fe7c:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800fe84:	2301      	movs	r3, #1
 800fe86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d965      	bls.n	800ff60 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800fe94:	e05f      	b.n	800ff56 <VL53L1_f_028+0xf0>

		swapped = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fea2:	e051      	b.n	800ff48 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 800fea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fea8:	1e5a      	subs	r2, r3, #1
 800feaa:	4613      	mov	r3, r2
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	4413      	add	r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	4413      	add	r3, r2
 800feba:	3304      	adds	r3, #4
 800febc:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 800febe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fec2:	4613      	mov	r3, r2
 800fec4:	00db      	lsls	r3, r3, #3
 800fec6:	4413      	add	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	4413      	add	r3, r2
 800fed2:	3304      	adds	r3, #4
 800fed4:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d118      	bne.n	800ff0e <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800fedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fede:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 800fee4:	429a      	cmp	r2, r3
 800fee6:	da2a      	bge.n	800ff3e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800fee8:	2224      	movs	r2, #36	; 0x24
 800feea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800feec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800feee:	f009 faed 	bl	80194cc <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fef2:	2224      	movs	r2, #36	; 0x24
 800fef4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fef8:	f009 fae8 	bl	80194cc <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fefc:	2224      	movs	r2, #36	; 0x24
 800fefe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff02:	f009 fae3 	bl	80194cc <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800ff06:	2301      	movs	r3, #1
 800ff08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ff0c:	e017      	b.n	800ff3e <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 800ff0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d911      	bls.n	800ff3e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800ff1a:	2224      	movs	r2, #36	; 0x24
 800ff1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff20:	f009 fad4 	bl	80194cc <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800ff24:	2224      	movs	r2, #36	; 0x24
 800ff26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff2a:	f009 facf 	bl	80194cc <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800ff2e:	2224      	movs	r2, #36	; 0x24
 800ff30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff34:	f009 faca 	bl	80194cc <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800ff3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ff42:	3301      	adds	r3, #1
 800ff44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ff4e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d3a6      	bcc.n	800fea4 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 800ff56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d19b      	bne.n	800fe96 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 800ff5e:	e000      	b.n	800ff62 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 800ff60:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800ff62:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3740      	adds	r7, #64	; 0x40
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ff6e:	b480      	push	{r7}
 800ff70:	b087      	sub	sp, #28
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	4603      	mov	r3, r0
 800ff76:	60b9      	str	r1, [r7, #8]
 800ff78:	607a      	str	r2, [r7, #4]
 800ff7a:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ff80:	2300      	movs	r3, #0
 800ff82:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800ff88:	7bfa      	ldrb	r2, [r7, #15]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	00db      	lsls	r3, r3, #3
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	4413      	add	r3, r2
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	75fb      	strb	r3, [r7, #23]
 800ffb0:	e01c      	b.n	800ffec <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	78da      	ldrb	r2, [r3, #3]
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffbc:	fb01 f202 	mul.w	r2, r1, r2
 800ffc0:	1a9b      	subs	r3, r3, r2
 800ffc2:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	68da      	ldr	r2, [r3, #12]
 800ffc8:	7d79      	ldrb	r1, [r7, #21]
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	3106      	adds	r1, #6
 800ffce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ffd2:	441a      	add	r2, r3
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	689a      	ldr	r2, [r3, #8]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	441a      	add	r2, r3
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	75fb      	strb	r3, [r7, #23]
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	791b      	ldrb	r3, [r3, #4]
 800fff0:	7dfa      	ldrb	r2, [r7, #23]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d9dd      	bls.n	800ffb2 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	68da      	ldr	r2, [r3, #12]
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8010004:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010008:	4618      	mov	r0, r3
 801000a:	371c      	adds	r7, #28
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b08d      	sub	sp, #52	; 0x34
 8010018:	af02      	add	r7, sp, #8
 801001a:	60ba      	str	r2, [r7, #8]
 801001c:	607b      	str	r3, [r7, #4]
 801001e:	4603      	mov	r3, r0
 8010020:	73fb      	strb	r3, [r7, #15]
 8010022:	460b      	mov	r3, r1
 8010024:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010026:	2300      	movs	r3, #0
 8010028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8010036:	2300      	movs	r3, #0
 8010038:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 801003a:	2300      	movs	r3, #0
 801003c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010042:	7bfa      	ldrb	r2, [r7, #15]
 8010044:	4613      	mov	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4413      	add	r3, r2
 8010054:	3304      	adds	r3, #4
 8010056:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	789b      	ldrb	r3, [r3, #2]
 801005c:	2bff      	cmp	r3, #255	; 0xff
 801005e:	d102      	bne.n	8010066 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2201      	movs	r2, #1
 8010064:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	789b      	ldrb	r3, [r3, #2]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	78d2      	ldrb	r2, [r2, #3]
 801006e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010072:	fb01 f202 	mul.w	r2, r1, r2
 8010076:	1a9b      	subs	r3, r3, r2
 8010078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 801007c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010080:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	b29a      	uxth	r2, r3
 8010088:	8c3b      	ldrh	r3, [r7, #32]
 801008a:	4413      	add	r3, r2
 801008c:	b29b      	uxth	r3, r3
 801008e:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8010090:	8c3a      	ldrh	r2, [r7, #32]
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	789b      	ldrb	r3, [r3, #2]
 8010096:	b29b      	uxth	r3, r3
 8010098:	1ad3      	subs	r3, r2, r3
 801009a:	b29b      	uxth	r3, r3
 801009c:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801009e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80100a2:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	791b      	ldrb	r3, [r3, #4]
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	8bfb      	ldrh	r3, [r7, #30]
 80100ac:	4413      	add	r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80100b2:	8bfa      	ldrh	r2, [r7, #30]
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	789b      	ldrb	r3, [r3, #2]
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	b29b      	uxth	r3, r3
 80100be:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80100c0:	8bfa      	ldrh	r2, [r7, #30]
 80100c2:	8c3b      	ldrh	r3, [r7, #32]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80100ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	dd01      	ble.n	80100d6 <VL53L1_f_027+0xc2>
		window_width = 3;
 80100d2:	2303      	movs	r3, #3
 80100d4:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80100d6:	8c3a      	ldrh	r2, [r7, #32]
 80100d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100da:	4413      	add	r3, r2
 80100dc:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80100de:	b219      	sxth	r1, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	78da      	ldrb	r2, [r3, #3]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	3314      	adds	r3, #20
 80100e8:	7bbc      	ldrb	r4, [r7, #14]
 80100ea:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80100ee:	9301      	str	r3, [sp, #4]
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	4623      	mov	r3, r4
 80100f6:	f000 f846 	bl	8010186 <VL53L1_f_030>
 80100fa:	4603      	mov	r3, r0
 80100fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 8010100:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010104:	2b00      	cmp	r3, #0
 8010106:	d114      	bne.n	8010132 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8010108:	8bfa      	ldrh	r2, [r7, #30]
 801010a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8010110:	b218      	sxth	r0, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	78da      	ldrb	r2, [r3, #3]
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	331c      	adds	r3, #28
 801011a:	7bbc      	ldrb	r4, [r7, #14]
 801011c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8010120:	9301      	str	r3, [sp, #4]
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	4623      	mov	r3, r4
 8010128:	f000 f82d 	bl	8010186 <VL53L1_f_030>
 801012c:	4603      	mov	r3, r0
 801012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	695a      	ldr	r2, [r3, #20]
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	69db      	ldr	r3, [r3, #28]
 801013a:	429a      	cmp	r2, r3
 801013c:	d909      	bls.n	8010152 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	695b      	ldr	r3, [r3, #20]
 8010142:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	69da      	ldr	r2, [r3, #28]
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	69ba      	ldr	r2, [r7, #24]
 8010150:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	699a      	ldr	r2, [r3, #24]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	695b      	ldr	r3, [r3, #20]
 801015a:	429a      	cmp	r2, r3
 801015c:	d203      	bcs.n	8010166 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	699a      	ldr	r2, [r3, #24]
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	699a      	ldr	r2, [r3, #24]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	429a      	cmp	r2, r3
 8010170:	d903      	bls.n	801017a <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	699a      	ldr	r2, [r3, #24]
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 801017a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801017e:	4618      	mov	r0, r3
 8010180:	372c      	adds	r7, #44	; 0x2c
 8010182:	46bd      	mov	sp, r7
 8010184:	bd90      	pop	{r4, r7, pc}

08010186 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8010186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018a:	b09d      	sub	sp, #116	; 0x74
 801018c:	af00      	add	r7, sp, #0
 801018e:	461c      	mov	r4, r3
 8010190:	4603      	mov	r3, r0
 8010192:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010196:	460b      	mov	r3, r1
 8010198:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801019c:	4613      	mov	r3, r2
 801019e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101a2:	4623      	mov	r3, r4
 80101a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80101a8:	2300      	movs	r3, #0
 80101aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80101ba:	f04f 0200 	mov.w	r2, #0
 80101be:	f04f 0300 	mov.w	r3, #0
 80101c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80101c6:	f04f 0200 	mov.w	r2, #0
 80101ca:	f04f 0300 	mov.w	r3, #0
 80101ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80101d2:	f04f 0200 	mov.w	r2, #0
 80101d6:	f04f 0300 	mov.w	r3, #0
 80101da:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80101de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80101e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101e6:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80101e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f000 809c 	beq.w	801032a <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80101f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80101f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80101fa:	e08f      	b.n	801031c <VL53L1_f_030+0x196>

		if (lb < 0)
 80101fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010200:	2b00      	cmp	r3, #0
 8010202:	da09      	bge.n	8010218 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8010204:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010208:	b29a      	uxth	r2, r3
 801020a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801020e:	4413      	add	r3, r2
 8010210:	b29b      	uxth	r3, r3
 8010212:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010216:	e00a      	b.n	801022e <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8010218:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 801021c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8010220:	fb91 f3f2 	sdiv	r3, r1, r2
 8010224:	fb02 f303 	mul.w	r3, r2, r3
 8010228:	1acb      	subs	r3, r1, r3
 801022a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 801022e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010232:	2b00      	cmp	r3, #0
 8010234:	db6b      	blt.n	801030e <VL53L1_f_030+0x188>
 8010236:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801023a:	2b17      	cmp	r3, #23
 801023c:	dc67      	bgt.n	801030e <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 801023e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010242:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010246:	3306      	adds	r3, #6
 8010248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801024c:	17da      	asrs	r2, r3, #31
 801024e:	633b      	str	r3, [r7, #48]	; 0x30
 8010250:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8010252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801025a:	17da      	asrs	r2, r3, #31
 801025c:	62bb      	str	r3, [r7, #40]	; 0x28
 801025e:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8010260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010266:	4602      	mov	r2, r0
 8010268:	1a9b      	subs	r3, r3, r2
 801026a:	623b      	str	r3, [r7, #32]
 801026c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026e:	460a      	mov	r2, r1
 8010270:	eb63 0302 	sbc.w	r3, r3, r2
 8010274:	627b      	str	r3, [r7, #36]	; 0x24
 8010276:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801027a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801027e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <VL53L1_f_030+0x114>
 8010286:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801028a:	2b00      	cmp	r3, #0
 801028c:	da05      	bge.n	801029a <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801028e:	f04f 0200 	mov.w	r2, #0
 8010292:	f04f 0300 	mov.w	r3, #0
 8010296:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 801029a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801029e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80102a2:	1884      	adds	r4, r0, r2
 80102a4:	61bc      	str	r4, [r7, #24]
 80102a6:	eb41 0303 	adc.w	r3, r1, r3
 80102aa:	61fb      	str	r3, [r7, #28]
 80102ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80102b0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80102b4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80102b8:	17da      	asrs	r2, r3, #31
 80102ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80102bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80102be:	f04f 0200 	mov.w	r2, #0
 80102c2:	f04f 0300 	mov.w	r3, #0
 80102c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102c8:	02cb      	lsls	r3, r1, #11
 80102ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80102d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102d2:	02ca      	lsls	r2, r1, #11
 80102d4:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80102d8:	f143 0600 	adc.w	r6, r3, #0
 80102dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102de:	fb06 f203 	mul.w	r2, r6, r3
 80102e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102e4:	fb05 f303 	mul.w	r3, r5, r3
 80102e8:	441a      	add	r2, r3
 80102ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102ec:	fba3 ab05 	umull	sl, fp, r3, r5
 80102f0:	eb02 030b 	add.w	r3, r2, fp
 80102f4:	469b      	mov	fp, r3
			weighted_sum +=
 80102f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80102fa:	eb12 010a 	adds.w	r1, r2, sl
 80102fe:	6139      	str	r1, [r7, #16]
 8010300:	eb43 030b 	adc.w	r3, r3, fp
 8010304:	617b      	str	r3, [r7, #20]
 8010306:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801030a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801030e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010312:	b29b      	uxth	r3, r3
 8010314:	3301      	adds	r3, #1
 8010316:	b29b      	uxth	r3, r3
 8010318:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801031c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8010320:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010324:	429a      	cmp	r2, r3
 8010326:	f77f af69 	ble.w	80101fc <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 801032a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801032e:	2a01      	cmp	r2, #1
 8010330:	f173 0300 	sbcs.w	r3, r3, #0
 8010334:	db3b      	blt.n	80103ae <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8010336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801033a:	0fd9      	lsrs	r1, r3, #31
 801033c:	2000      	movs	r0, #0
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	60f8      	str	r0, [r7, #12]
 8010342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010346:	4621      	mov	r1, r4
 8010348:	eb11 0802 	adds.w	r8, r1, r2
 801034c:	4629      	mov	r1, r5
 801034e:	eb41 0903 	adc.w	r9, r1, r3
 8010352:	f04f 0200 	mov.w	r2, #0
 8010356:	f04f 0300 	mov.w	r3, #0
 801035a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 801035e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8010362:	ea4f 0369 	mov.w	r3, r9, asr #1
 8010366:	4610      	mov	r0, r2
 8010368:	4619      	mov	r1, r3
 801036a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801036e:	1814      	adds	r4, r2, r0
 8010370:	603c      	str	r4, [r7, #0]
 8010372:	414b      	adcs	r3, r1
 8010374:	607b      	str	r3, [r7, #4]
 8010376:	e9d7 3400 	ldrd	r3, r4, [r7]
 801037a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801037e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010382:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010386:	f7ef ff4b 	bl	8000220 <__aeabi_ldivmod>
 801038a:	4602      	mov	r2, r0
 801038c:	460b      	mov	r3, r1
 801038e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8010392:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010396:	2b00      	cmp	r3, #0
 8010398:	da05      	bge.n	80103a6 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 801039a:	f04f 0200 	mov.w	r2, #0
 801039e:	f04f 0300 	mov.w	r3, #0
 80103a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 80103a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103ac:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80103ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3774      	adds	r7, #116	; 0x74
 80103b6:	46bd      	mov	sp, r7
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103bc <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60b9      	str	r1, [r7, #8]
 80103c4:	607a      	str	r2, [r7, #4]
 80103c6:	603b      	str	r3, [r7, #0]
 80103c8:	4603      	mov	r3, r0
 80103ca:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80103cc:	2300      	movs	r3, #0
 80103ce:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80103d0:	2300      	movs	r3, #0
 80103d2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80103d4:	2300      	movs	r3, #0
 80103d6:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80103d8:	7bfa      	ldrb	r2, [r7, #15]
 80103da:	4613      	mov	r3, r2
 80103dc:	00db      	lsls	r3, r3, #3
 80103de:	4413      	add	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	4413      	add	r3, r2
 80103ea:	3304      	adds	r3, #4
 80103ec:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 80103ee:	22ac      	movs	r2, #172	; 0xac
 80103f0:	68b9      	ldr	r1, [r7, #8]
 80103f2:	6a38      	ldr	r0, [r7, #32]
 80103f4:	f009 f86a 	bl	80194cc <memcpy>



	for (lb = palgo->VL53L1_p_049;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80103fe:	75fb      	strb	r3, [r7, #23]
 8010400:	e020      	b.n	8010444 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	7dfa      	ldrb	r2, [r7, #23]
 8010408:	429a      	cmp	r2, r3
 801040a:	d304      	bcc.n	8010416 <VL53L1_f_023+0x5a>
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	791b      	ldrb	r3, [r3, #4]
 8010410:	7dfa      	ldrb	r2, [r7, #23]
 8010412:	429a      	cmp	r2, r3
 8010414:	d913      	bls.n	801043e <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	78da      	ldrb	r2, [r3, #3]
 801041a:	7dfb      	ldrb	r3, [r7, #23]
 801041c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010420:	fb01 f202 	mul.w	r2, r1, r2
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	7a9b      	ldrb	r3, [r3, #10]
 801042c:	7d7a      	ldrb	r2, [r7, #21]
 801042e:	429a      	cmp	r2, r3
 8010430:	d205      	bcs.n	801043e <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010432:	7d7a      	ldrb	r2, [r7, #21]
 8010434:	6a3b      	ldr	r3, [r7, #32]
 8010436:	3206      	adds	r2, #6
 8010438:	6839      	ldr	r1, [r7, #0]
 801043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801043e:	7dfb      	ldrb	r3, [r7, #23]
 8010440:	3301      	adds	r3, #1
 8010442:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010444:	7dfa      	ldrb	r2, [r7, #23]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801044c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010452:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010454:	429a      	cmp	r2, r3
 8010456:	dbd4      	blt.n	8010402 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010458:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801045c:	4618      	mov	r0, r3
 801045e:	3718      	adds	r7, #24
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	b096      	sub	sp, #88	; 0x58
 801046a:	af08      	add	r7, sp, #32
 801046c:	4604      	mov	r4, r0
 801046e:	4608      	mov	r0, r1
 8010470:	4611      	mov	r1, r2
 8010472:	461a      	mov	r2, r3
 8010474:	4623      	mov	r3, r4
 8010476:	73fb      	strb	r3, [r7, #15]
 8010478:	4603      	mov	r3, r0
 801047a:	73bb      	strb	r3, [r7, #14]
 801047c:	460b      	mov	r3, r1
 801047e:	737b      	strb	r3, [r7, #13]
 8010480:	4613      	mov	r3, r2
 8010482:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010484:	2300      	movs	r3, #0
 8010486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 801048a:	2300      	movs	r3, #0
 801048c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8010490:	2300      	movs	r3, #0
 8010492:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 801049a:	2300      	movs	r3, #0
 801049c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80104b6:	7b7b      	ldrb	r3, [r7, #13]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d106      	bne.n	80104ca <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80104bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104c2:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80104c4:	f06f 030e 	mvn.w	r3, #14
 80104c8:	e06f      	b.n	80105aa <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80104ca:	7bfb      	ldrb	r3, [r7, #15]
 80104cc:	7b7a      	ldrb	r2, [r7, #13]
 80104ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80104d2:	fb01 f202 	mul.w	r2, r1, r2
 80104d6:	1a9b      	subs	r3, r3, r2
 80104d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80104dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80104e0:	7b39      	ldrb	r1, [r7, #12]
 80104e2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80104e6:	f107 0320 	add.w	r3, r7, #32
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	4613      	mov	r3, r2
 80104f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104f6:	f000 fddb 	bl	80110b0 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80104fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80104fe:	7b39      	ldrb	r1, [r7, #12]
 8010500:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801050e:	9300      	str	r3, [sp, #0]
 8010510:	4613      	mov	r3, r2
 8010512:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010514:	f000 fdcc 	bl	80110b0 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010518:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00e      	beq.n	801053e <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010520:	f107 021c 	add.w	r2, r7, #28
 8010524:	7b39      	ldrb	r1, [r7, #12]
 8010526:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801052a:	f107 0314 	add.w	r3, r7, #20
 801052e:	9301      	str	r3, [sp, #4]
 8010530:	f107 0318 	add.w	r3, r7, #24
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	4613      	mov	r3, r2
 8010538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801053a:	f000 fdb9 	bl	80110b0 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010540:	469c      	mov	ip, r3
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	469e      	mov	lr, r3
 8010546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010548:	4698      	mov	r8, r3
 801054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054c:	4619      	mov	r1, r3
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	461c      	mov	r4, r3
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	461d      	mov	r5, r3
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	461e      	mov	r6, r3
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 801055e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010564:	607b      	str	r3, [r7, #4]
 8010566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010568:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801056c:	7bb8      	ldrb	r0, [r7, #14]
 801056e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010570:	9207      	str	r2, [sp, #28]
 8010572:	9306      	str	r3, [sp, #24]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	9205      	str	r2, [sp, #20]
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	9603      	str	r6, [sp, #12]
 801057e:	9502      	str	r5, [sp, #8]
 8010580:	9401      	str	r4, [sp, #4]
 8010582:	9100      	str	r1, [sp, #0]
 8010584:	4643      	mov	r3, r8
 8010586:	4672      	mov	r2, lr
 8010588:	4661      	mov	r1, ip
 801058a:	f002 ff30 	bl	80133ee <VL53L1_f_014>
 801058e:	4603      	mov	r3, r0
 8010590:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8010594:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8010598:	f113 0f0f 	cmn.w	r3, #15
 801059c:	d103      	bne.n	80105a6 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801059e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105a4:	801a      	strh	r2, [r3, #0]


	return status;
 80105a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3738      	adds	r7, #56	; 0x38
 80105ae:	46bd      	mov	sp, r7
 80105b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105b4 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80105b4:	b490      	push	{r4, r7}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4604      	mov	r4, r0
 80105bc:	4608      	mov	r0, r1
 80105be:	4611      	mov	r1, r2
 80105c0:	461a      	mov	r2, r3
 80105c2:	4623      	mov	r3, r4
 80105c4:	71fb      	strb	r3, [r7, #7]
 80105c6:	4603      	mov	r3, r0
 80105c8:	71bb      	strb	r3, [r7, #6]
 80105ca:	460b      	mov	r3, r1
 80105cc:	717b      	strb	r3, [r7, #5]
 80105ce:	4613      	mov	r3, r2
 80105d0:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80105d2:	2300      	movs	r3, #0
 80105d4:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	79fa      	ldrb	r2, [r7, #7]
 80105de:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	2200      	movs	r2, #0
 80105e4:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	781a      	ldrb	r2, [r3, #0]
 80105ea:	6a3b      	ldr	r3, [r7, #32]
 80105ec:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	785a      	ldrb	r2, [r3, #1]
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	789a      	ldrb	r2, [r3, #2]
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	78da      	ldrb	r2, [r3, #3]
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	791a      	ldrb	r2, [r3, #4]
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	795a      	ldrb	r2, [r3, #5]
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	791a      	ldrb	r2, [r3, #4]
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	1ad3      	subs	r3, r2, r3
 8010620:	b2db      	uxtb	r3, r3
 8010622:	3301      	adds	r3, #1
 8010624:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010626:	6a3b      	ldr	r3, [r7, #32]
 8010628:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	8c1a      	ldrh	r2, [r3, #32]
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	695b      	ldr	r3, [r3, #20]
 8010640:	b29a      	uxth	r2, r3
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	b29a      	uxth	r2, r3
 801064c:	6a3b      	ldr	r3, [r7, #32]
 801064e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	69db      	ldr	r3, [r3, #28]
 8010656:	b29a      	uxth	r2, r3
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	461a      	mov	r2, r3
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	691a      	ldr	r2, [r3, #16]
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	461a      	mov	r2, r3
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	2213      	movs	r2, #19
 8010688:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 801068c:	887b      	ldrh	r3, [r7, #2]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	8c1b      	ldrh	r3, [r3, #32]
 8010696:	461a      	mov	r2, r3
 8010698:	887b      	ldrh	r3, [r7, #2]
 801069a:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 801069c:	429a      	cmp	r2, r3
 801069e:	d903      	bls.n	80106a8 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80106a0:	6a3b      	ldr	r3, [r7, #32]
 80106a2:	2206      	movs	r2, #6
 80106a4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80106a8:	79bb      	ldrb	r3, [r7, #6]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	021b      	lsls	r3, r3, #8
 80106ae:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	8a9b      	ldrh	r3, [r3, #20]
 80106b4:	89fa      	ldrh	r2, [r7, #14]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d205      	bcs.n	80106c6 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80106be:	89fb      	ldrh	r3, [r7, #14]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	81fb      	strh	r3, [r7, #14]
 80106c4:	e001      	b.n	80106ca <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80106ca:	797b      	ldrb	r3, [r7, #5]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	021b      	lsls	r3, r3, #8
 80106d0:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80106d8:	89bb      	ldrh	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80106e4:	89fa      	ldrh	r2, [r7, #14]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d805      	bhi.n	80106f6 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80106f0:	89ba      	ldrh	r2, [r7, #12]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d203      	bcs.n	80106fe <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	2205      	movs	r2, #5
 80106fa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 80106fe:	bf00      	nop
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bc90      	pop	{r4, r7}
 8010706:	4770      	bx	lr

08010708 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070a:	b08f      	sub	sp, #60	; 0x3c
 801070c:	af06      	add	r7, sp, #24
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010716:	2300      	movs	r3, #0
 8010718:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801071e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010720:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010724:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010726:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010728:	f7ff f856 	bl	800f7d8 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 801072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801072e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010732:	22ac      	movs	r2, #172	; 0xac
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f008 fec8 	bl	80194cc <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	781a      	ldrb	r2, [r3, #0]
 8010740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010742:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	785a      	ldrb	r2, [r3, #1]
 8010748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801074a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	789a      	ldrb	r2, [r3, #2]
 8010750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010752:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801075a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801075c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 801075e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010760:	2200      	movs	r2, #0
 8010762:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010766:	2204      	movs	r2, #4
 8010768:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 801076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076c:	2200      	movs	r2, #0
 801076e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010770:	2300      	movs	r3, #0
 8010772:	77bb      	strb	r3, [r7, #30]
 8010774:	e008      	b.n	8010788 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8010776:	7fbb      	ldrb	r3, [r7, #30]
 8010778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	4413      	add	r3, r2
 801077e:	2200      	movs	r2, #0
 8010780:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010782:	7fbb      	ldrb	r3, [r7, #30]
 8010784:	3301      	adds	r3, #1
 8010786:	77bb      	strb	r3, [r7, #30]
 8010788:	7fbb      	ldrb	r3, [r7, #30]
 801078a:	2b04      	cmp	r3, #4
 801078c:	d9f3      	bls.n	8010776 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 801078e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010790:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010794:	4618      	mov	r0, r3
 8010796:	f7fd ff58 	bl	800e64a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 801079e:	461a      	mov	r2, r3
 80107a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80107a6:	4619      	mov	r1, r3
 80107a8:	4610      	mov	r0, r2
 80107aa:	f7fd ff8e 	bl	800e6ca <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80107ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe fb66 	bl	800ee86 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80107ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fd fffc 	bl	800e7be <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d009      	beq.n	80107e4 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 80107d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80107d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80107dc:	461a      	mov	r2, r3
 80107de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107e0:	f000 fdae 	bl	8011340 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80107ec:	2300      	movs	r3, #0
 80107ee:	77bb      	strb	r3, [r7, #30]
 80107f0:	e01e      	b.n	8010830 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 80107f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d117      	bne.n	801082a <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 80107fa:	7fbb      	ldrb	r3, [r7, #30]
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	3304      	adds	r3, #4
 8010800:	005b      	lsls	r3, r3, #1
 8010802:	4413      	add	r3, r2
 8010804:	8898      	ldrh	r0, [r3, #4]
 8010806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010808:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 801080c:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010812:	4413      	add	r3, r2
 8010814:	3304      	adds	r3, #4
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	460b      	mov	r3, r1
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	68f9      	ldr	r1, [r7, #12]
 8010822:	f7fe fb7b 	bl	800ef1c <VL53L1_f_001>
 8010826:	4603      	mov	r3, r0
 8010828:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801082a:	7fbb      	ldrb	r3, [r7, #30]
 801082c:	3301      	adds	r3, #1
 801082e:	77bb      	strb	r3, [r7, #30]
 8010830:	7fbb      	ldrb	r3, [r7, #30]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d9dd      	bls.n	80107f2 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d11a      	bne.n	8010874 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010846:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010854:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801085a:	f502 7252 	add.w	r2, r2, #840	; 0x348
 801085e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010860:	9102      	str	r1, [sp, #8]
 8010862:	9201      	str	r2, [sp, #4]
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	462b      	mov	r3, r5
 8010868:	4622      	mov	r2, r4
 801086a:	4631      	mov	r1, r6
 801086c:	f7ff f82d 	bl	800f8ca <VL53L1_f_018>
 8010870:	4603      	mov	r3, r0
 8010872:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010874:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d104      	bne.n	8010886 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 801087c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801087e:	f7ff f954 	bl	800fb2a <VL53L1_f_019>
 8010882:	4603      	mov	r3, r0
 8010884:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010886:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d104      	bne.n	8010898 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 801088e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010890:	f7ff f999 	bl	800fbc6 <VL53L1_f_020>
 8010894:	4603      	mov	r3, r0
 8010896:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010898:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d104      	bne.n	80108aa <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 80108a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108a2:	f7ff fa0e 	bl	800fcc2 <VL53L1_f_021>
 80108a6:	4603      	mov	r3, r0
 80108a8:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80108aa:	2300      	movs	r3, #0
 80108ac:	77bb      	strb	r3, [r7, #30]
 80108ae:	e0a6      	b.n	80109fe <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80108b0:	7fba      	ldrb	r2, [r7, #30]
 80108b2:	4613      	mov	r3, r2
 80108b4:	00db      	lsls	r3, r3, #3
 80108b6:	4413      	add	r3, r2
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80108be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108c0:	4413      	add	r3, r2
 80108c2:	3304      	adds	r3, #4
 80108c4:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80108c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d109      	bne.n	80108e2 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 80108ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80108d4:	7fbb      	ldrb	r3, [r7, #30]
 80108d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fb48 	bl	800ff6e <VL53L1_f_022>
 80108de:	4603      	mov	r3, r0
 80108e0:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 80108e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d110      	bne.n	801090c <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 80108ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ec:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80108f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80108fc:	7fb8      	ldrb	r0, [r7, #30]
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	4613      	mov	r3, r2
 8010902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010904:	f7ff fd5a 	bl	80103bc <VL53L1_f_023>
 8010908:	4603      	mov	r3, r0
 801090a:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 801090c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10d      	bne.n	8010930 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010916:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801091a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801091c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010920:	7fb8      	ldrb	r0, [r7, #30]
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	2300      	movs	r3, #0
 8010926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010928:	f7ff fd48 	bl	80103bc <VL53L1_f_023>
 801092c:	4603      	mov	r3, r0
 801092e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010930:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d10d      	bne.n	8010954 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801093a:	f503 7152 	add.w	r1, r3, #840	; 0x348
 801093e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010940:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010944:	7fb8      	ldrb	r0, [r7, #30]
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	2300      	movs	r3, #0
 801094a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801094c:	f7ff fd36 	bl	80103bc <VL53L1_f_023>
 8010950:	4603      	mov	r3, r0
 8010952:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010954:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d109      	bne.n	8010970 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 801095c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801095e:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010962:	7fb8      	ldrb	r0, [r7, #30]
 8010964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010968:	f000 f8dd 	bl	8010b26 <VL53L1_f_034>
 801096c:	4603      	mov	r3, r0
 801096e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d108      	bne.n	801098a <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	8a19      	ldrh	r1, [r3, #16]
 801097c:	7fb8      	ldrb	r0, [r7, #30]
 801097e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010982:	f000 f95c 	bl	8010c3e <VL53L1_f_035>
 8010986:	4603      	mov	r3, r0
 8010988:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 801098a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d124      	bne.n	80109dc <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	789d      	ldrb	r5, [r3, #2]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	7e1e      	ldrb	r6, [r3, #24]
 801099a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801099c:	f893 c003 	ldrb.w	ip, [r3, #3]
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	f893 e006 	ldrb.w	lr, [r3, #6]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109ae:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80109b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109b4:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80109b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109ba:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 80109be:	697c      	ldr	r4, [r7, #20]
 80109c0:	3420      	adds	r4, #32
 80109c2:	9404      	str	r4, [sp, #16]
 80109c4:	9003      	str	r0, [sp, #12]
 80109c6:	9102      	str	r1, [sp, #8]
 80109c8:	9201      	str	r2, [sp, #4]
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	4673      	mov	r3, lr
 80109ce:	4662      	mov	r2, ip
 80109d0:	4631      	mov	r1, r6
 80109d2:	4628      	mov	r0, r5
 80109d4:	f7ff fd46 	bl	8010464 <VL53L1_f_026>
 80109d8:	4603      	mov	r3, r0
 80109da:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 80109dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d109      	bne.n	80109f8 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 80109e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e6:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80109ea:	7fb8      	ldrb	r0, [r7, #30]
 80109ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ee:	2101      	movs	r1, #1
 80109f0:	f7ff fb10 	bl	8010014 <VL53L1_f_027>
 80109f4:	4603      	mov	r3, r0
 80109f6:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80109f8:	7fbb      	ldrb	r3, [r7, #30]
 80109fa:	3301      	adds	r3, #1
 80109fc:	77bb      	strb	r3, [r7, #30]
 80109fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a00:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010a04:	7fba      	ldrb	r2, [r7, #30]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	f4ff af52 	bcc.w	80108b0 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d107      	bne.n	8010a24 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	785b      	ldrb	r3, [r3, #1]
 8010a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7ff fa23 	bl	800fe66 <VL53L1_f_028>
 8010a20:	4603      	mov	r3, r0
 8010a22:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010a24:	2300      	movs	r3, #0
 8010a26:	77bb      	strb	r3, [r7, #30]
 8010a28:	e071      	b.n	8010b0e <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010a2a:	7fba      	ldrb	r2, [r7, #30]
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	4413      	add	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a3a:	4413      	add	r3, r2
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a42:	7c9a      	ldrb	r2, [r3, #18]
 8010a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a46:	7c5b      	ldrb	r3, [r3, #17]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d25c      	bcs.n	8010b06 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010a54:	429a      	cmp	r2, r3
 8010a56:	dd57      	ble.n	8010b08 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010a5c:	2bff      	cmp	r3, #255	; 0xff
 8010a5e:	d053      	beq.n	8010b08 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a62:	7c9b      	ldrb	r3, [r3, #18]
 8010a64:	461a      	mov	r2, r3
			prange_data =
 8010a66:	234c      	movs	r3, #76	; 0x4c
 8010a68:	fb02 f303 	mul.w	r3, r2, r3
 8010a6c:	3310      	adds	r3, #16
 8010a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a70:	4413      	add	r3, r2
 8010a72:	3304      	adds	r3, #4
 8010a74:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d115      	bne.n	8010aaa <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a80:	7c98      	ldrb	r0, [r3, #18]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	8b5d      	ldrh	r5, [r3, #26]
 8010a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a98:	693a      	ldr	r2, [r7, #16]
 8010a9a:	9202      	str	r2, [sp, #8]
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	9201      	str	r2, [sp, #4]
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	4622      	mov	r2, r4
 8010aa6:	f7ff fd85 	bl	80105b4 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d115      	bne.n	8010ade <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010aca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010ace:	9301      	str	r3, [sp, #4]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	f000 fb44 	bl	8011162 <VL53L1_f_011>
 8010ada:	4603      	mov	r3, r0
 8010adc:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d108      	bne.n	8010af8 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	8bd8      	ldrh	r0, [r3, #30]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	4619      	mov	r1, r3
 8010af4:	f000 fbda 	bl	80112ac <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010afa:	7c9b      	ldrb	r3, [r3, #18]
 8010afc:	3301      	adds	r3, #1
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b02:	749a      	strb	r2, [r3, #18]
 8010b04:	e000      	b.n	8010b08 <VL53L1_f_033+0x400>
			continue;
 8010b06:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010b08:	7fbb      	ldrb	r3, [r7, #30]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	77bb      	strb	r3, [r7, #30]
 8010b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b10:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010b14:	7fba      	ldrb	r2, [r7, #30]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d387      	bcc.n	8010a2a <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3724      	adds	r7, #36	; 0x24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b26 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b08c      	sub	sp, #48	; 0x30
 8010b2a:	af02      	add	r7, sp, #8
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	603b      	str	r3, [r7, #0]
 8010b32:	4603      	mov	r3, r0
 8010b34:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010b36:	2300      	movs	r3, #0
 8010b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010b3c:	7bfa      	ldrb	r2, [r7, #15]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	4413      	add	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	3304      	adds	r3, #4
 8010b50:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010b64:	2300      	movs	r3, #0
 8010b66:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	785a      	ldrb	r2, [r3, #1]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	781a      	ldrb	r2, [r3, #0]
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	789a      	ldrb	r2, [r3, #2]
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010b80:	6a3b      	ldr	r3, [r7, #32]
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b88:	e04d      	b.n	8010c26 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	78da      	ldrb	r2, [r3, #3]
 8010b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b96:	fb01 f202 	mul.w	r2, r1, r2
 8010b9a:	1a9b      	subs	r3, r3, r2
 8010b9c:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	7999      	ldrb	r1, [r3, #6]
 8010ba2:	f107 0218 	add.w	r2, r7, #24
 8010ba6:	7ff8      	ldrb	r0, [r7, #31]
 8010ba8:	f107 0310 	add.w	r3, r7, #16
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	f107 0314 	add.w	r3, r7, #20
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	f000 fa7a 	bl	80110b0 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010bbc:	7ffb      	ldrb	r3, [r7, #31]
 8010bbe:	69ba      	ldr	r2, [r7, #24]
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	440b      	add	r3, r1
 8010bc6:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010bc8:	7ffb      	ldrb	r3, [r7, #31]
 8010bca:	697a      	ldr	r2, [r7, #20]
 8010bcc:	6839      	ldr	r1, [r7, #0]
 8010bce:	3318      	adds	r3, #24
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	440b      	add	r3, r1
 8010bd4:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010bd6:	7ffb      	ldrb	r3, [r7, #31]
 8010bd8:	693a      	ldr	r2, [r7, #16]
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	3330      	adds	r3, #48	; 0x30
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	440b      	add	r3, r1
 8010be2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010be4:	69ba      	ldr	r2, [r7, #24]
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010bf2:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010bf4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	3348      	adds	r3, #72	; 0x48
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	440b      	add	r3, r1
 8010bfe:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	689a      	ldr	r2, [r3, #8]
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010c0e:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010c10:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010c12:	6839      	ldr	r1, [r7, #0]
 8010c14:	3360      	adds	r3, #96	; 0x60
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	440b      	add	r3, r1
 8010c1a:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c20:	3301      	adds	r3, #1
 8010c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c26:	6a3b      	ldr	r3, [r7, #32]
 8010c28:	791b      	ldrb	r3, [r3, #4]
 8010c2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d9ab      	bls.n	8010b8a <VL53L1_f_034+0x64>
	}

	return status;
 8010c32:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3728      	adds	r7, #40	; 0x28
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c40:	b08f      	sub	sp, #60	; 0x3c
 8010c42:	af06      	add	r7, sp, #24
 8010c44:	60ba      	str	r2, [r7, #8]
 8010c46:	607b      	str	r3, [r7, #4]
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73fb      	strb	r3, [r7, #15]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010c50:	2300      	movs	r3, #0
 8010c52:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010c54:	2300      	movs	r3, #0
 8010c56:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010c58:	7bfa      	ldrb	r2, [r7, #15]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	00db      	lsls	r3, r3, #3
 8010c5e:	4413      	add	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	4413      	add	r3, r2
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	77fb      	strb	r3, [r7, #31]
 8010c80:	e0b9      	b.n	8010df6 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	78da      	ldrb	r2, [r3, #3]
 8010c86:	7ffb      	ldrb	r3, [r7, #31]
 8010c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c8c:	fb01 f202 	mul.w	r2, r1, r2
 8010c90:	1a9b      	subs	r3, r3, r2
 8010c92:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010c94:	7ffb      	ldrb	r3, [r7, #31]
 8010c96:	3301      	adds	r3, #1
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	78d2      	ldrb	r2, [r2, #3]
 8010c9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8010ca0:	fb01 f202 	mul.w	r2, r1, r2
 8010ca4:	1a9b      	subs	r3, r3, r2
 8010ca6:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	789b      	ldrb	r3, [r3, #2]
 8010cac:	7dfa      	ldrb	r2, [r7, #23]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f080 809e 	bcs.w	8010df0 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010cb8:	7dba      	ldrb	r2, [r7, #22]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	f080 8098 	bcs.w	8010df0 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010cc0:	7dfb      	ldrb	r3, [r7, #23]
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	3348      	adds	r3, #72	; 0x48
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	4413      	add	r3, r2
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10e      	bne.n	8010cee <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010cd0:	7dfb      	ldrb	r3, [r7, #23]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	3360      	adds	r3, #96	; 0x60
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d106      	bne.n	8010cee <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010ce0:	7dfb      	ldrb	r3, [r7, #23]
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010cec:	e043      	b.n	8010d76 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010cee:	7dfb      	ldrb	r3, [r7, #23]
 8010cf0:	68ba      	ldr	r2, [r7, #8]
 8010cf2:	3348      	adds	r3, #72	; 0x48
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	db0e      	blt.n	8010d1c <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010cfe:	7dfb      	ldrb	r3, [r7, #23]
 8010d00:	68ba      	ldr	r2, [r7, #8]
 8010d02:	3360      	adds	r3, #96	; 0x60
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	db06      	blt.n	8010d1c <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010d0e:	7dfb      	ldrb	r3, [r7, #23]
 8010d10:	68ba      	ldr	r2, [r7, #8]
 8010d12:	4413      	add	r3, r2
 8010d14:	2201      	movs	r2, #1
 8010d16:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010d1a:	e02c      	b.n	8010d76 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	68ba      	ldr	r2, [r7, #8]
 8010d20:	3348      	adds	r3, #72	; 0x48
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	4413      	add	r3, r2
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	da1e      	bge.n	8010d6a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010d2c:	7dfb      	ldrb	r3, [r7, #23]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	3360      	adds	r3, #96	; 0x60
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	4413      	add	r3, r2
 8010d36:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	db16      	blt.n	8010d6a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010d3c:	7dbb      	ldrb	r3, [r7, #22]
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	3348      	adds	r3, #72	; 0x48
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	db0e      	blt.n	8010d6a <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8010d4c:	7dbb      	ldrb	r3, [r7, #22]
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	3360      	adds	r3, #96	; 0x60
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	da06      	bge.n	8010d6a <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8010d5c:	7dfb      	ldrb	r3, [r7, #23]
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	4413      	add	r3, r2
 8010d62:	2201      	movs	r2, #1
 8010d64:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010d68:	e005      	b.n	8010d76 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	4413      	add	r3, r2
 8010d70:	2200      	movs	r2, #0
 8010d72:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010d76:	7dfb      	ldrb	r3, [r7, #23]
 8010d78:	68ba      	ldr	r2, [r7, #8]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d035      	beq.n	8010df0 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	7ffa      	ldrb	r2, [r7, #31]
 8010d88:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	68ba      	ldr	r2, [r7, #8]
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4413      	add	r3, r2
 8010d92:	685c      	ldr	r4, [r3, #4]
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	3318      	adds	r3, #24
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	685d      	ldr	r5, [r3, #4]
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	3330      	adds	r3, #48	; 0x30
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	685e      	ldr	r6, [r3, #4]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	78d2      	ldrb	r2, [r2, #3]
 8010db4:	69b9      	ldr	r1, [r7, #24]
 8010db6:	3118      	adds	r1, #24
 8010db8:	7ff8      	ldrb	r0, [r7, #31]
 8010dba:	9105      	str	r1, [sp, #20]
 8010dbc:	9204      	str	r2, [sp, #16]
 8010dbe:	9303      	str	r3, [sp, #12]
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	9302      	str	r3, [sp, #8]
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	4633      	mov	r3, r6
 8010dce:	462a      	mov	r2, r5
 8010dd0:	4621      	mov	r1, r4
 8010dd2:	f000 f81c 	bl	8010e0e <VL53L1_f_036>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8010dda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010dde:	f113 0f0f 	cmn.w	r3, #15
 8010de2:	d105      	bne.n	8010df0 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8010de4:	7dfb      	ldrb	r3, [r7, #23]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	4413      	add	r3, r2
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010df0:	7ffb      	ldrb	r3, [r7, #31]
 8010df2:	3301      	adds	r3, #1
 8010df4:	77fb      	strb	r3, [r7, #31]
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	791b      	ldrb	r3, [r3, #4]
 8010dfa:	7ffa      	ldrb	r2, [r7, #31]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	f4ff af40 	bcc.w	8010c82 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010e02:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3724      	adds	r7, #36	; 0x24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e0e <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010e0e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e12:	b0b2      	sub	sp, #200	; 0xc8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e22:	4603      	mov	r3, r0
 8010e24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010e28:	23f1      	movs	r3, #241	; 0xf1
 8010e2a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e32:	f04f 0300 	mov.w	r3, #0
 8010e36:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010e3a:	f04f 0200 	mov.w	r2, #0
 8010e3e:	f04f 0300 	mov.w	r3, #0
 8010e42:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010e46:	f04f 0200 	mov.w	r2, #0
 8010e4a:	f04f 0300 	mov.w	r3, #0
 8010e4e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e56:	17da      	asrs	r2, r3, #31
 8010e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010e60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010e64:	17da      	asrs	r2, r3, #31
 8010e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e6a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010e76:	4602      	mov	r2, r0
 8010e78:	ebb3 0802 	subs.w	r8, r3, r2
 8010e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e80:	460a      	mov	r2, r1
 8010e82:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e8a:	17da      	asrs	r2, r3, #31
 8010e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010e90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010e94:	460b      	mov	r3, r1
 8010e96:	ebb8 0a03 	subs.w	sl, r8, r3
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	eb69 0b03 	sbc.w	fp, r9, r3
 8010ea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ea4:	17da      	asrs	r2, r3, #31
 8010ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8010ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8010eaa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010eae:	460b      	mov	r3, r1
 8010eb0:	ebba 0403 	subs.w	r4, sl, r3
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010eba:	f04f 0200 	mov.w	r2, #0
 8010ebe:	f04f 0300 	mov.w	r3, #0
 8010ec2:	032b      	lsls	r3, r5, #12
 8010ec4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8010ec8:	0322      	lsls	r2, r4, #12
 8010eca:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ed2:	17da      	asrs	r2, r3, #31
 8010ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ed6:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010edc:	17da      	asrs	r2, r3, #31
 8010ede:	663b      	str	r3, [r7, #96]	; 0x60
 8010ee0:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ee2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010ee6:	4623      	mov	r3, r4
 8010ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010eec:	4602      	mov	r2, r0
 8010eee:	1a9b      	subs	r3, r3, r2
 8010ef0:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ef2:	462b      	mov	r3, r5
 8010ef4:	460a      	mov	r2, r1
 8010ef6:	eb63 0302 	sbc.w	r3, r3, r2
 8010efa:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f00:	17da      	asrs	r2, r3, #31
 8010f02:	653b      	str	r3, [r7, #80]	; 0x50
 8010f04:	657a      	str	r2, [r7, #84]	; 0x54
 8010f06:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8010f0a:	4623      	mov	r3, r4
 8010f0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010f10:	4602      	mov	r2, r0
 8010f12:	1a9b      	subs	r3, r3, r2
 8010f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f16:	462b      	mov	r3, r5
 8010f18:	460a      	mov	r2, r1
 8010f1a:	eb63 0302 	sbc.w	r3, r3, r2
 8010f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010f20:	f04f 0200 	mov.w	r2, #0
 8010f24:	f04f 0300 	mov.w	r3, #0
 8010f28:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	030b      	lsls	r3, r1, #12
 8010f30:	4621      	mov	r1, r4
 8010f32:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010f36:	4621      	mov	r1, r4
 8010f38:	030a      	lsls	r2, r1, #12
 8010f3a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8010f3e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f42:	4313      	orrs	r3, r2
 8010f44:	f000 80a8 	beq.w	8011098 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8010f48:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010f4c:	f04f 0000 	mov.w	r0, #0
 8010f50:	f04f 0100 	mov.w	r1, #0
 8010f54:	0319      	lsls	r1, r3, #12
 8010f56:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010f5a:	0310      	lsls	r0, r2, #12
 8010f5c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f60:	1814      	adds	r4, r2, r0
 8010f62:	633c      	str	r4, [r7, #48]	; 0x30
 8010f64:	414b      	adcs	r3, r1
 8010f66:	637b      	str	r3, [r7, #52]	; 0x34
 8010f68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010f6c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8010f70:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010f74:	1891      	adds	r1, r2, r2
 8010f76:	62b9      	str	r1, [r7, #40]	; 0x28
 8010f78:	415b      	adcs	r3, r3
 8010f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010f80:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010f84:	f7ef f94c 	bl	8000220 <__aeabi_ldivmod>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8010f90:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010f94:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8010f98:	6239      	str	r1, [r7, #32]
 8010f9a:	f143 0300 	adc.w	r3, r3, #0
 8010f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8010fa0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010fa4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8010fa8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010fac:	2200      	movs	r2, #0
 8010fae:	643b      	str	r3, [r7, #64]	; 0x40
 8010fb0:	647a      	str	r2, [r7, #68]	; 0x44
 8010fb2:	f04f 0200 	mov.w	r2, #0
 8010fb6:	f04f 0300 	mov.w	r3, #0
 8010fba:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	030b      	lsls	r3, r1, #12
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010fc8:	4621      	mov	r1, r4
 8010fca:	030a      	lsls	r2, r1, #12
 8010fcc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010fd0:	1884      	adds	r4, r0, r2
 8010fd2:	61bc      	str	r4, [r7, #24]
 8010fd4:	eb41 0303 	adc.w	r3, r1, r3
 8010fd8:	61fb      	str	r3, [r7, #28]
 8010fda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010fde:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8010fe2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010fe6:	1c51      	adds	r1, r2, #1
 8010fe8:	63b9      	str	r1, [r7, #56]	; 0x38
 8010fea:	f143 0300 	adc.w	r3, r3, #0
 8010fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	0fdb      	lsrs	r3, r3, #31
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	613b      	str	r3, [r7, #16]
 8010ffc:	617a      	str	r2, [r7, #20]
 8010ffe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011002:	4623      	mov	r3, r4
 8011004:	4602      	mov	r2, r0
 8011006:	189b      	adds	r3, r3, r2
 8011008:	60bb      	str	r3, [r7, #8]
 801100a:	460b      	mov	r3, r1
 801100c:	462a      	mov	r2, r5
 801100e:	eb42 0303 	adc.w	r3, r2, r3
 8011012:	60fb      	str	r3, [r7, #12]
 8011014:	f04f 0200 	mov.w	r2, #0
 8011018:	f04f 0300 	mov.w	r3, #0
 801101c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011020:	4621      	mov	r1, r4
 8011022:	084a      	lsrs	r2, r1, #1
 8011024:	4629      	mov	r1, r5
 8011026:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801102a:	4629      	mov	r1, r5
 801102c:	104b      	asrs	r3, r1, #1
 801102e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8011032:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011036:	2b00      	cmp	r3, #0
 8011038:	da05      	bge.n	8011046 <VL53L1_f_036+0x238>
			mean_phase = 0;
 801103a:	f04f 0200 	mov.w	r2, #0
 801103e:	f04f 0300 	mov.w	r3, #0
 8011042:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8011046:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801104a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801104e:	f173 0300 	sbcs.w	r3, r3, #0
 8011052:	db05      	blt.n	8011060 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011058:	f04f 0300 	mov.w	r3, #0
 801105c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8011060:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8011068:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 801106c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801106e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011072:	fb93 f1f2 	sdiv	r1, r3, r2
 8011076:	fb01 f202 	mul.w	r2, r1, r2
 801107a:	1a9b      	subs	r3, r3, r2
 801107c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8011080:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011084:	17da      	asrs	r2, r3, #31
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	607a      	str	r2, [r7, #4]
 801108a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801108e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8011092:	2300      	movs	r3, #0
 8011094:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8011098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801109c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110a0:	601a      	str	r2, [r3, #0]

	return status;
 80110a2:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	37c8      	adds	r7, #200	; 0xc8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080110b0 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b087      	sub	sp, #28
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60ba      	str	r2, [r7, #8]
 80110b8:	607b      	str	r3, [r7, #4]
 80110ba:	4603      	mov	r3, r0
 80110bc:	73fb      	strb	r3, [r7, #15]
 80110be:	460b      	mov	r3, r1
 80110c0:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80110c2:	2300      	movs	r3, #0
 80110c4:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80110c6:	2300      	movs	r3, #0
 80110c8:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80110d0:	7bfa      	ldrb	r2, [r7, #15]
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	3206      	adds	r2, #6
 80110d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80110da:	6a3b      	ldr	r3, [r7, #32]
 80110dc:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	2200      	movs	r2, #0
 80110e2:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80110e4:	2300      	movs	r3, #0
 80110e6:	75fb      	strb	r3, [r7, #23]
 80110e8:	e02f      	b.n	801114a <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80110ea:	7bfa      	ldrb	r2, [r7, #15]
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	4413      	add	r3, r2
 80110f0:	68ba      	ldr	r2, [r7, #8]
 80110f2:	7a92      	ldrb	r2, [r2, #10]
 80110f4:	441a      	add	r2, r3
 80110f6:	7bbb      	ldrb	r3, [r7, #14]
 80110f8:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 80110fa:	68ba      	ldr	r2, [r7, #8]
 80110fc:	7a92      	ldrb	r2, [r2, #10]
 80110fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8011102:	fb01 f202 	mul.w	r2, r1, r2
 8011106:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011108:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 801110a:	7dfa      	ldrb	r2, [r7, #23]
 801110c:	7bbb      	ldrb	r3, [r7, #14]
 801110e:	429a      	cmp	r2, r3
 8011110:	d20a      	bcs.n	8011128 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	7db9      	ldrb	r1, [r7, #22]
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	3106      	adds	r1, #6
 801111c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011120:	441a      	add	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	e00d      	b.n	8011144 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8011128:	7dfa      	ldrb	r2, [r7, #23]
 801112a:	7bbb      	ldrb	r3, [r7, #14]
 801112c:	429a      	cmp	r2, r3
 801112e:	d909      	bls.n	8011144 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	7db9      	ldrb	r1, [r7, #22]
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	3106      	adds	r1, #6
 801113a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801113e:	441a      	add	r2, r3
 8011140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011142:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011144:	7dfb      	ldrb	r3, [r7, #23]
 8011146:	3301      	adds	r3, #1
 8011148:	75fb      	strb	r3, [r7, #23]
 801114a:	7bbb      	ldrb	r3, [r7, #14]
 801114c:	005a      	lsls	r2, r3, #1
 801114e:	7dfb      	ldrb	r3, [r7, #23]
 8011150:	429a      	cmp	r2, r3
 8011152:	daca      	bge.n	80110ea <VL53L1_f_013+0x3a>
	}
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop
 8011158:	371c      	adds	r7, #28
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b088      	sub	sp, #32
 8011166:	af00      	add	r7, sp, #0
 8011168:	60ba      	str	r2, [r7, #8]
 801116a:	461a      	mov	r2, r3
 801116c:	4603      	mov	r3, r0
 801116e:	81fb      	strh	r3, [r7, #14]
 8011170:	460b      	mov	r3, r1
 8011172:	81bb      	strh	r3, [r7, #12]
 8011174:	4613      	mov	r3, r2
 8011176:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8011178:	2300      	movs	r3, #0
 801117a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 801117c:	2300      	movs	r3, #0
 801117e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8011180:	2300      	movs	r3, #0
 8011182:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8011188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118a:	89fa      	ldrh	r2, [r7, #14]
 801118c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011190:	89ba      	ldrh	r2, [r7, #12]
 8011192:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8011194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	88fa      	ldrh	r2, [r7, #6]
 801119e:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 80111a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a2:	8a5b      	ldrh	r3, [r3, #18]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d101      	bne.n	80111ac <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80111a8:	23f1      	movs	r3, #241	; 0xf1
 80111aa:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80111b4:	23f1      	movs	r3, #241	; 0xf1
 80111b6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80111b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d16f      	bne.n	80112a0 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	8a5b      	ldrh	r3, [r3, #18]
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fd f903 	bl	800e3d0 <VL53L1_calc_pll_period_us>
 80111ca:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80111cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	3301      	adds	r3, #1
 80111d2:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80111d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d6:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80111d8:	4619      	mov	r1, r3
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111e0:	6978      	ldr	r0, [r7, #20]
 80111e2:	f7fd f90c 	bl	800e3fe <VL53L1_duration_maths>
 80111e6:	4602      	mov	r2, r0
 80111e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ea:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 80111ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ee:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 80111f0:	0119      	lsls	r1, r3, #4
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111f8:	6978      	ldr	r0, [r7, #20]
 80111fa:	f7fd f900 	bl	800e3fe <VL53L1_duration_maths>
 80111fe:	4602      	mov	r2, r0
 8011200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011202:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8011208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	4619      	mov	r1, r3
 801120e:	4610      	mov	r0, r2
 8011210:	f7fd fb6d 	bl	800e8ee <VL53L1_rate_maths>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 801121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	6a1b      	ldr	r3, [r3, #32]
 8011224:	4619      	mov	r1, r3
 8011226:	4610      	mov	r0, r2
 8011228:	f7fd fb61 	bl	800e8ee <VL53L1_rate_maths>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011232:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8011238:	461a      	mov	r2, r3
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	6a1b      	ldr	r3, [r3, #32]
 801123e:	4619      	mov	r1, r3
 8011240:	4610      	mov	r0, r2
 8011242:	f7fd fb54 	bl	800e8ee <VL53L1_rate_maths>
 8011246:	4603      	mov	r3, r0
 8011248:	461a      	mov	r2, r3
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011252:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8011258:	4413      	add	r3, r2
 801125a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 801125c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011260:	2b01      	cmp	r3, #1
 8011262:	d905      	bls.n	8011270 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8011264:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011268:	69ba      	ldr	r2, [r7, #24]
 801126a:	fbb2 f3f3 	udiv	r3, r2, r3
 801126e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8011270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011272:	8ada      	ldrh	r2, [r3, #22]
 8011274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011278:	69b9      	ldr	r1, [r7, #24]
 801127a:	2006      	movs	r0, #6
 801127c:	f7fd fb7c 	bl	800e978 <VL53L1_rate_per_spad_maths>
 8011280:	4603      	mov	r3, r0
 8011282:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8011284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011286:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8011288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	8ad9      	ldrh	r1, [r3, #22]
 8011290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011292:	69db      	ldr	r3, [r3, #28]
 8011294:	461a      	mov	r2, r3
 8011296:	f7fd f90b 	bl	800e4b0 <VL53L1_events_per_spad_maths>
 801129a:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 801129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129e:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 80112a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3720      	adds	r7, #32
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80112ac:	b590      	push	{r4, r7, lr}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af02      	add	r7, sp, #8
 80112b2:	4603      	mov	r3, r0
 80112b4:	603a      	str	r2, [r7, #0]
 80112b6:	80fb      	strh	r3, [r7, #6]
 80112b8:	460b      	mov	r3, r1
 80112ba:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	8a58      	ldrh	r0, [r3, #18]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	8a9c      	ldrh	r4, [r3, #20]
 80112c8:	88fb      	ldrh	r3, [r7, #6]
 80112ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80112ce:	9201      	str	r2, [sp, #4]
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	2300      	movs	r3, #0
 80112d4:	4622      	mov	r2, r4
 80112d6:	f7fd fb83 	bl	800e9e0 <VL53L1_range_maths>
 80112da:	4603      	mov	r3, r0
 80112dc:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	8a58      	ldrh	r0, [r3, #18]
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	8a9c      	ldrh	r4, [r3, #20]
 80112f2:	88fb      	ldrh	r3, [r7, #6]
 80112f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80112f8:	9201      	str	r2, [sp, #4]
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	2300      	movs	r3, #0
 80112fe:	4622      	mov	r2, r4
 8011300:	f7fd fb6e 	bl	800e9e0 <VL53L1_range_maths>
 8011304:	4603      	mov	r3, r0
 8011306:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	8a58      	ldrh	r0, [r3, #18]
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	8a9c      	ldrh	r4, [r3, #20]
 801131c:	88fb      	ldrh	r3, [r7, #6]
 801131e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011322:	9201      	str	r2, [sp, #4]
 8011324:	9300      	str	r3, [sp, #0]
 8011326:	2300      	movs	r3, #0
 8011328:	4622      	mov	r2, r4
 801132a:	f7fd fb59 	bl	800e9e0 <VL53L1_range_maths>
 801132e:	4603      	mov	r3, r0
 8011330:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8011338:	bf00      	nop
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	bd90      	pop	{r4, r7, pc}

08011340 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 801134c:	2300      	movs	r3, #0
 801134e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8011350:	2300      	movs	r3, #0
 8011352:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011354:	2300      	movs	r3, #0
 8011356:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8011358:	2300      	movs	r3, #0
 801135a:	757b      	strb	r3, [r7, #21]





	memcpy(
 801135c:	22ac      	movs	r2, #172	; 0xac
 801135e:	68b9      	ldr	r1, [r7, #8]
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f008 f8b3 	bl	80194cc <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011366:	2300      	movs	r3, #0
 8011368:	75fb      	strb	r3, [r7, #23]
 801136a:	e008      	b.n	801137e <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 801136c:	7dfa      	ldrb	r2, [r7, #23]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	3206      	adds	r2, #6
 8011372:	2100      	movs	r1, #0
 8011374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011378:	7dfb      	ldrb	r3, [r7, #23]
 801137a:	3301      	adds	r3, #1
 801137c:	75fb      	strb	r3, [r7, #23]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	7a5b      	ldrb	r3, [r3, #9]
 8011382:	7dfa      	ldrb	r2, [r7, #23]
 8011384:	429a      	cmp	r2, r3
 8011386:	d3f1      	bcc.n	801136c <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8011388:	68f9      	ldr	r1, [r7, #12]
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	f000 f878 	bl	8011480 <VL53L1_f_038>
 8011390:	4603      	mov	r3, r0
 8011392:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	7a9a      	ldrb	r2, [r3, #10]
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	7a9b      	ldrb	r3, [r3, #10]
 801139c:	429a      	cmp	r2, r3
 801139e:	d203      	bcs.n	80113a8 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	7a9b      	ldrb	r3, [r3, #10]
 80113a4:	75bb      	strb	r3, [r7, #22]
 80113a6:	e002      	b.n	80113ae <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	7a9b      	ldrb	r3, [r3, #10]
 80113ac:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80113ae:	2300      	movs	r3, #0
 80113b0:	75fb      	strb	r3, [r7, #23]
 80113b2:	e05c      	b.n	801146e <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80113b4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	db0f      	blt.n	80113dc <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80113bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113c0:	461a      	mov	r2, r3
 80113c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113c6:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	7a92      	ldrb	r2, [r2, #10]
 80113cc:	b252      	sxtb	r2, r2
 80113ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80113d2:	fb01 f202 	mul.w	r2, r1, r2
 80113d6:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80113d8:	757b      	strb	r3, [r7, #21]
 80113da:	e013      	b.n	8011404 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	7a9b      	ldrb	r3, [r3, #10]
 80113e0:	b25b      	sxtb	r3, r3
 80113e2:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80113e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113e8:	4619      	mov	r1, r3
 80113ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80113ee:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80113f0:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 80113f2:	68ba      	ldr	r2, [r7, #8]
 80113f4:	7a92      	ldrb	r2, [r2, #10]
 80113f6:	b252      	sxtb	r2, r2
 80113f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80113fc:	fb01 f202 	mul.w	r2, r1, r2
 8011400:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011402:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011404:	7d7b      	ldrb	r3, [r7, #21]
 8011406:	461a      	mov	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	3206      	adds	r2, #6
 801140c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8011410:	7df9      	ldrb	r1, [r7, #23]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	3106      	adds	r1, #6
 8011416:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801141a:	429a      	cmp	r2, r3
 801141c:	dd12      	ble.n	8011444 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801141e:	7d7b      	ldrb	r3, [r7, #21]
 8011420:	461a      	mov	r2, r3
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	3206      	adds	r2, #6
 8011426:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801142a:	7df9      	ldrb	r1, [r7, #23]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	3106      	adds	r1, #6
 8011430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011434:	7d79      	ldrb	r1, [r7, #21]
 8011436:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011438:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	1d82      	adds	r2, r0, #6
 801143e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011442:	e006      	b.n	8011452 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011444:	7d7b      	ldrb	r3, [r7, #21]
 8011446:	461a      	mov	r2, r3
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	3206      	adds	r2, #6
 801144c:	2100      	movs	r1, #0
 801144e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8011452:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011454:	7d7b      	ldrb	r3, [r7, #21]
 8011456:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3206      	adds	r2, #6
 801145c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	1d82      	adds	r2, r0, #6
 8011464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8011468:	7dfb      	ldrb	r3, [r7, #23]
 801146a:	3301      	adds	r3, #1
 801146c:	75fb      	strb	r3, [r7, #23]
 801146e:	7dfa      	ldrb	r2, [r7, #23]
 8011470:	7dbb      	ldrb	r3, [r7, #22]
 8011472:	429a      	cmp	r2, r3
 8011474:	d39e      	bcc.n	80113b4 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8011476:	bf00      	nop
 8011478:	bf00      	nop
 801147a:	3718      	adds	r7, #24
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 801148a:	2300      	movs	r3, #0
 801148c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801148e:	2300      	movs	r3, #0
 8011490:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8011496:	2300      	movs	r3, #0
 8011498:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fd fb85 	bl	800ebb0 <VL53L1_decode_vcsel_period>
 80114a6:	4603      	mov	r3, r0
	period = 2048 *
 80114a8:	02db      	lsls	r3, r3, #11
 80114aa:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d00a      	beq.n	80114c8 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80114b8:	68ba      	ldr	r2, [r7, #8]
 80114ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80114be:	68b9      	ldr	r1, [r7, #8]
 80114c0:	fb01 f202 	mul.w	r2, r1, r2
 80114c4:	1a9b      	subs	r3, r3, r2
 80114c6:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80114ce:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80114d0:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd09      	ble.n	80114f0 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da01      	bge.n	80114ea <VL53L1_f_038+0x6a>
 80114e6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80114ea:	12db      	asrs	r3, r3, #11
 80114ec:	75fb      	strb	r3, [r7, #23]
 80114ee:	e008      	b.n	8011502 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	da01      	bge.n	80114fe <VL53L1_f_038+0x7e>
 80114fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80114fe:	12db      	asrs	r3, r3, #11
 8011500:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8011502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3718      	adds	r7, #24
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b08e      	sub	sp, #56	; 0x38
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
 8011516:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011518:	2300      	movs	r3, #0
 801151a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011524:	2300      	movs	r3, #0
 8011526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801152a:	2300      	movs	r3, #0
 801152c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011534:	2300      	movs	r3, #0
 8011536:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8011540:	22ac      	movs	r2, #172	; 0xac
 8011542:	6879      	ldr	r1, [r7, #4]
 8011544:	6838      	ldr	r0, [r7, #0]
 8011546:	f007 ffc1 	bl	80194cc <memcpy>


	podata->VL53L1_p_024 = 0;
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2200      	movs	r2, #0
 801154e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011550:	2300      	movs	r3, #0
 8011552:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011556:	e00a      	b.n	801156e <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8011558:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	4413      	add	r3, r2
 8011560:	2210      	movs	r2, #16
 8011562:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011564:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011568:	3301      	adds	r3, #1
 801156a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801156e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011572:	2b05      	cmp	r3, #5
 8011574:	d9f0      	bls.n	8011558 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011576:	2300      	movs	r3, #0
 8011578:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801157c:	e00b      	b.n	8011596 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801157e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	3206      	adds	r2, #6
 8011586:	2100      	movs	r1, #0
 8011588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 801158c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011590:	3301      	adds	r3, #1
 8011592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	7a5b      	ldrb	r3, [r3, #9]
 801159a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801159e:	429a      	cmp	r2, r3
 80115a0:	d3ed      	bcc.n	801157e <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80115a2:	2300      	movs	r3, #0
 80115a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80115a8:	e012      	b.n	80115d0 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80115aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115ae:	3338      	adds	r3, #56	; 0x38
 80115b0:	443b      	add	r3, r7
 80115b2:	2200      	movs	r2, #0
 80115b4:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80115b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115bc:	3338      	adds	r3, #56	; 0x38
 80115be:	443b      	add	r3, r7
 80115c0:	2200      	movs	r2, #0
 80115c2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80115c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115ca:	3301      	adds	r3, #1
 80115cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80115d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115d4:	2b0f      	cmp	r3, #15
 80115d6:	d9e8      	bls.n	80115aa <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80115d8:	2300      	movs	r3, #0
 80115da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80115de:	2300      	movs	r3, #0
 80115e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80115e4:	e068      	b.n	80116b8 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80115e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4413      	add	r3, r2
 80115ee:	7b1b      	ldrb	r3, [r3, #12]
 80115f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 80115f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80115f8:	3338      	adds	r3, #56	; 0x38
 80115fa:	443b      	add	r3, r7
 80115fc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d115      	bne.n	8011630 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011604:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011608:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801160c:	0092      	lsls	r2, r2, #2
 801160e:	b2d2      	uxtb	r2, r2
 8011610:	3338      	adds	r3, #56	; 0x38
 8011612:	443b      	add	r3, r7
 8011614:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801161c:	683a      	ldr	r2, [r7, #0]
 801161e:	4413      	add	r3, r2
 8011620:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011624:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801162a:	3301      	adds	r3, #1
 801162c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011634:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011638:	443a      	add	r2, r7
 801163a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801163e:	3201      	adds	r2, #1
 8011640:	b2d2      	uxtb	r2, r2
 8011642:	3338      	adds	r3, #56	; 0x38
 8011644:	443b      	add	r3, r7
 8011646:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801164a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801164e:	3338      	adds	r3, #56	; 0x38
 8011650:	443b      	add	r3, r7
 8011652:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801165a:	2300      	movs	r3, #0
 801165c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011660:	e021      	b.n	80116a6 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8011662:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011666:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801166a:	441a      	add	r2, r3
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	3206      	adds	r2, #6
 8011670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011674:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011678:	009a      	lsls	r2, r3, #2
 801167a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801167e:	441a      	add	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3206      	adds	r2, #6
 8011684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8011688:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 801168c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011690:	4402      	add	r2, r0
 8011692:	4419      	add	r1, r3
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	3206      	adds	r2, #6
 8011698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 801169c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80116a0:	3301      	adds	r3, #1
 80116a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80116a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d9d9      	bls.n	8011662 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116b2:	3301      	adds	r3, #1
 80116b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116bc:	2b05      	cmp	r3, #5
 80116be:	d992      	bls.n	80115e6 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116c0:	2300      	movs	r3, #0
 80116c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116c6:	e022      	b.n	801170e <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80116c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116cc:	683a      	ldr	r2, [r7, #0]
 80116ce:	4413      	add	r3, r2
 80116d0:	7b1b      	ldrb	r3, [r3, #12]
 80116d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80116d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80116da:	2b0f      	cmp	r3, #15
 80116dc:	d80c      	bhi.n	80116f8 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80116de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80116e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80116e6:	3238      	adds	r2, #56	; 0x38
 80116e8:	443a      	add	r2, r7
 80116ea:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80116ee:	683a      	ldr	r2, [r7, #0]
 80116f0:	4413      	add	r3, r2
 80116f2:	460a      	mov	r2, r1
 80116f4:	749a      	strb	r2, [r3, #18]
 80116f6:	e005      	b.n	8011704 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80116f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	4413      	add	r3, r2
 8011700:	2200      	movs	r2, #0
 8011702:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011704:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011708:	3301      	adds	r3, #1
 801170a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801170e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011712:	2b05      	cmp	r3, #5
 8011714:	d9d8      	bls.n	80116c8 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	b2da      	uxtb	r2, r3
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011722:	2300      	movs	r3, #0
 8011724:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011728:	e050      	b.n	80117cc <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801172a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801172e:	3338      	adds	r3, #56	; 0x38
 8011730:	443b      	add	r3, r7
 8011732:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011736:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173a:	2b00      	cmp	r3, #0
 801173c:	dd41      	ble.n	80117c2 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 801173e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011742:	3338      	adds	r3, #56	; 0x38
 8011744:	443b      	add	r3, r7
 8011746:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801174a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 801174e:	2300      	movs	r3, #0
 8011750:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011754:	e031      	b.n	80117ba <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011756:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801175a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801175e:	441a      	add	r2, r3
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	3206      	adds	r2, #6
 8011764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8011768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176a:	0fda      	lsrs	r2, r3, #31
 801176c:	4413      	add	r3, r2
 801176e:	105b      	asrs	r3, r3, #1
 8011770:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8011772:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011776:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801177a:	441a      	add	r2, r3
 801177c:	4401      	add	r1, r0
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	3206      	adds	r2, #6
 8011782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8011786:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801178a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801178e:	441a      	add	r2, r3
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	3206      	adds	r2, #6
 8011794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011798:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801179c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117a0:	441a      	add	r2, r3
 80117a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a4:	fb91 f1f3 	sdiv	r1, r1, r3
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	3206      	adds	r2, #6
 80117ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80117b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117b4:	3301      	adds	r3, #1
 80117b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80117ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117be:	2b03      	cmp	r3, #3
 80117c0:	d9c9      	bls.n	8011756 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80117c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117c6:	3301      	adds	r3, #1
 80117c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117d0:	2b0f      	cmp	r3, #15
 80117d2:	d9aa      	bls.n	801172a <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	2200      	movs	r2, #0
 80117d8:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80117da:	7bfb      	ldrb	r3, [r7, #15]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d102      	bne.n	80117e6 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d002      	beq.n	80117ec <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	2204      	movs	r2, #4
 80117ea:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 80117ec:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3738      	adds	r7, #56	; 0x38
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 80117f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fa:	b0cb      	sub	sp, #300	; 0x12c
 80117fc:	af06      	add	r7, sp, #24
 80117fe:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011802:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011806:	6020      	str	r0, [r4, #0]
 8011808:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801180c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011810:	6001      	str	r1, [r0, #0]
 8011812:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011816:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801181a:	600a      	str	r2, [r1, #0]
 801181c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011820:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011824:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011826:	2300      	movs	r3, #0
 8011828:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 801182c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011830:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 801183c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011844:	f107 0318 	add.w	r3, r7, #24
 8011848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 801184c:	2300      	movs	r3, #0
 801184e:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011850:	2300      	movs	r3, #0
 8011852:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011856:	2300      	movs	r3, #0
 8011858:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 801185c:	2300      	movs	r3, #0
 801185e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801187c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	f7ff fe44 	bl	801150e <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801188a:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 801188c:	b299      	uxth	r1, r3
 801188e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011892:	3348      	adds	r3, #72	; 0x48
 8011894:	461a      	mov	r2, r3
 8011896:	2000      	movs	r0, #0
 8011898:	f7fd f9db 	bl	800ec52 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 801189c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80118a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118a4:	3348      	adds	r3, #72	; 0x48
 80118a6:	4619      	mov	r1, r3
 80118a8:	4610      	mov	r0, r2
 80118aa:	f7fd f994 	bl	800ebd6 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80118ae:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d142      	bne.n	801193c <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80118b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d039      	beq.n	801193c <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80118c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80118d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 80118e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 80118f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80118fe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011902:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011906:	6812      	ldr	r2, [r2, #0]
 8011908:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 801190c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011910:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011914:	6809      	ldr	r1, [r1, #0]
 8011916:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801191a:	f107 0014 	add.w	r0, r7, #20
 801191e:	9004      	str	r0, [sp, #16]
 8011920:	9103      	str	r1, [sp, #12]
 8011922:	9202      	str	r2, [sp, #8]
 8011924:	9301      	str	r3, [sp, #4]
 8011926:	2300      	movs	r3, #0
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	2300      	movs	r3, #0
 801192c:	4632      	mov	r2, r6
 801192e:	4629      	mov	r1, r5
 8011930:	4620      	mov	r0, r4
 8011932:	f002 f98c 	bl	8013c4e <VL53L1_f_040>
 8011936:	4603      	mov	r3, r0
 8011938:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 801193c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011940:	2b00      	cmp	r3, #0
 8011942:	d115      	bne.n	8011970 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011948:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00c      	beq.n	8011970 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011956:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011960:	3348      	adds	r3, #72	; 0x48
 8011962:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011966:	f002 fbe4 	bl	8014132 <VL53L1_f_041>
 801196a:	4603      	mov	r3, r0
 801196c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011974:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011978:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801197c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011980:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011984:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011988:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801198c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011990:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011994:	2200      	movs	r2, #0
 8011996:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 801199a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801199e:	2200      	movs	r2, #0
 80119a0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80119a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119a8:	2200      	movs	r2, #0
 80119aa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80119ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 80119b8:	2300      	movs	r3, #0
 80119ba:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80119be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d002      	beq.n	80119d6 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80119d6:	2300      	movs	r3, #0
 80119d8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80119dc:	e108      	b.n	8011bf0 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80119de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80119ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 80119f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119f4:	3348      	adds	r3, #72	; 0x48
 80119f6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80119fa:	7814      	ldrb	r4, [r2, #0]
 80119fc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011a00:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011a04:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011a08:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011a0c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011a10:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011a14:	9405      	str	r4, [sp, #20]
 8011a16:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011a1a:	9404      	str	r4, [sp, #16]
 8011a1c:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011a20:	9403      	str	r4, [sp, #12]
 8011a22:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011a26:	9402      	str	r4, [sp, #8]
 8011a28:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011a2c:	9401      	str	r4, [sp, #4]
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	6809      	ldr	r1, [r1, #0]
 8011a38:	6800      	ldr	r0, [r0, #0]
 8011a3a:	f7fe fe65 	bl	8010708 <VL53L1_f_033>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011a44:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f040 80cb 	bne.w	8011be4 <VL53L1_hist_process_data+0x3ec>
 8011a4e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f040 80c6 	bne.w	8011be4 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a5c:	7c9b      	ldrb	r3, [r3, #18]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d110      	bne.n	8011a84 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a66:	3314      	adds	r3, #20
 8011a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a70:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011a72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011a76:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a7c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011a7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011a82:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011a94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011aa0:	fb02 f303 	mul.w	r3, r2, r3
 8011aa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011aac:	011b      	lsls	r3, r3, #4
 8011aae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011ab8:	e08b      	b.n	8011bd2 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011aba:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011abe:	224c      	movs	r2, #76	; 0x4c
 8011ac0:	fb02 f303 	mul.w	r3, r2, r3
 8011ac4:	3310      	adds	r3, #16
 8011ac6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011aca:	4413      	add	r3, r2
 8011acc:	3304      	adds	r3, #4
 8011ace:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011ad2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ad6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011ada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ade:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	dd0e      	ble.n	8011b04 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011ae6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011aea:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011aee:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011af0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011af4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011af8:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	b29b      	uxth	r3, r3
				delta_mm =
 8011afe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011b02:	e00d      	b.n	8011b20 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b08:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011b0c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011b0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b12:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011b16:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	b29b      	uxth	r3, r3
				delta_mm =
 8011b1c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011b2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	461a      	mov	r2, r3
 8011b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b3c:	fb02 f303 	mul.w	r3, r2, r3
 8011b40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011b44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b48:	015b      	lsls	r3, r3, #5
 8011b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011b4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b52:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011b64:	429a      	cmp	r2, r3
 8011b66:	dd2f      	ble.n	8011bc8 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011b68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b6c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	da22      	bge.n	8011bc8 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011b82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011b88:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d91b      	bls.n	8011bc8 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011b90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b94:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011b96:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011b98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d913      	bls.n	8011bc8 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011ba0:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011ba4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011ba8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011bac:	6812      	ldr	r2, [r2, #0]
 8011bae:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	da09      	bge.n	8011bc8 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011bbc:	224c      	movs	r2, #76	; 0x4c
 8011bbe:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f007 fc82 	bl	80194cc <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011bc8:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011bcc:	3301      	adds	r3, #1
 8011bce:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bd6:	7c9b      	ldrb	r3, [r3, #18]
 8011bd8:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	f4ff af6c 	bcc.w	8011aba <VL53L1_hist_process_data+0x2c2>
 8011be2:	e000      	b.n	8011be6 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011be4:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011be6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011bea:	3301      	adds	r3, #1
 8011bec:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011bf0:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011bf4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	f67f aef0 	bls.w	80119de <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011c10:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c1e <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b086      	sub	sp, #24
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	460b      	mov	r3, r1
 8011c28:	607a      	str	r2, [r7, #4]
 8011c2a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d104      	bne.n	8011c42 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7f9 fb5a 	bl	800b2f2 <VL53L1_disable_firmware>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d104      	bne.n	8011c54 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	f7f9 fb82 	bl	800b354 <VL53L1_enable_powerforce>
 8011c50:	4603      	mov	r3, r0
 8011c52:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d105      	bne.n	8011c68 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011c5c:	21fa      	movs	r1, #250	; 0xfa
 8011c5e:	68f8      	ldr	r0, [r7, #12]
 8011c60:	f002 fdd0 	bl	8014804 <VL53L1_WaitUs>
 8011c64:	4603      	mov	r3, r0
 8011c66:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d107      	bne.n	8011c80 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011c70:	2201      	movs	r2, #1
 8011c72:	f240 7181 	movw	r1, #1921	; 0x781
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f002 fcd0 	bl	801461c <VL53L1_WrByte>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d107      	bne.n	8011c98 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011c88:	2205      	movs	r2, #5
 8011c8a:	f240 6183 	movw	r1, #1667	; 0x683
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f002 fcc4 	bl	801461c <VL53L1_WrByte>
 8011c94:	4603      	mov	r3, r0
 8011c96:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d105      	bne.n	8011cac <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011ca0:	6879      	ldr	r1, [r7, #4]
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f002 fdae 	bl	8014804 <VL53L1_WaitUs>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d107      	bne.n	8011cc4 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f002 fcae 	bl	801461c <VL53L1_WrByte>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d108      	bne.n	8011cde <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011ccc:	897b      	ldrh	r3, [r7, #10]
 8011cce:	461a      	mov	r2, r3
 8011cd0:	f240 7184 	movw	r1, #1924	; 0x784
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f002 fccb 	bl	8014670 <VL53L1_WrWord>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011cde:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3718      	adds	r7, #24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b086      	sub	sp, #24
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	60f8      	str	r0, [r7, #12]
 8011cf2:	607b      	str	r3, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	72fb      	strb	r3, [r7, #11]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011d00:	2300      	movs	r3, #0
 8011d02:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011d04:	7afb      	ldrb	r3, [r7, #11]
 8011d06:	75bb      	strb	r3, [r7, #22]
 8011d08:	e041      	b.n	8011d8e <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d108      	bne.n	8011d24 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011d12:	7dbb      	ldrb	r3, [r7, #22]
 8011d14:	461a      	mov	r2, r3
 8011d16:	f240 7194 	movw	r1, #1940	; 0x794
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f002 fc7e 	bl	801461c <VL53L1_WrByte>
 8011d20:	4603      	mov	r3, r0
 8011d22:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011d24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d107      	bne.n	8011d3c <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f240 7183 	movw	r1, #1923	; 0x783
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f002 fc72 	bl	801461c <VL53L1_WrByte>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8011d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d105      	bne.n	8011d50 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011d44:	2105      	movs	r1, #5
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f002 fd5c 	bl	8014804 <VL53L1_WaitUs>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d107      	bne.n	8011d68 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011d58:	2201      	movs	r2, #1
 8011d5a:	f240 7183 	movw	r1, #1923	; 0x783
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f002 fc5c 	bl	801461c <VL53L1_WrByte>
 8011d64:	4603      	mov	r3, r0
 8011d66:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d108      	bne.n	8011d82 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011d70:	2304      	movs	r3, #4
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f002 fc19 	bl	80145b0 <VL53L1_ReadMulti>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	3304      	adds	r3, #4
 8011d86:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011d88:	7dbb      	ldrb	r3, [r7, #22]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	75bb      	strb	r3, [r7, #22]
 8011d8e:	7dba      	ldrb	r2, [r7, #22]
 8011d90:	7af9      	ldrb	r1, [r7, #11]
 8011d92:	7abb      	ldrb	r3, [r7, #10]
 8011d94:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8011d96:	429a      	cmp	r2, r3
 8011d98:	dbb7      	blt.n	8011d0a <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8011d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b084      	sub	sp, #16
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011dae:	2300      	movs	r3, #0
 8011db0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d107      	bne.n	8011dca <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011dba:	2201      	movs	r2, #1
 8011dbc:	f240 7183 	movw	r1, #1923	; 0x783
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f002 fc2b 	bl	801461c <VL53L1_WrByte>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d107      	bne.n	8011de2 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f240 7181 	movw	r1, #1921	; 0x781
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f002 fc1f 	bl	801461c <VL53L1_WrByte>
 8011dde:	4603      	mov	r3, r0
 8011de0:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8011de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d104      	bne.n	8011df4 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7f9 fac4 	bl	800b378 <VL53L1_disable_powerforce>
 8011df0:	4603      	mov	r3, r0
 8011df2:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d104      	bne.n	8011e06 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f7f9 fa66 	bl	800b2ce <VL53L1_enable_firmware>
 8011e02:	4603      	mov	r3, r0
 8011e04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011e06:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011e12:	b480      	push	{r7}
 8011e14:	b087      	sub	sp, #28
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	4603      	mov	r3, r0
 8011e1a:	60b9      	str	r1, [r7, #8]
 8011e1c:	607a      	str	r2, [r7, #4]
 8011e1e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e20:	2300      	movs	r3, #0
 8011e22:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011e28:	89fb      	ldrh	r3, [r7, #14]
 8011e2a:	2b03      	cmp	r3, #3
 8011e2c:	d802      	bhi.n	8011e34 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011e2e:	f06f 0308 	mvn.w	r3, #8
 8011e32:	e018      	b.n	8011e66 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e38:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	3302      	adds	r3, #2
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	8afa      	ldrh	r2, [r7, #22]
 8011e44:	1ad3      	subs	r3, r2, r3
 8011e46:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011e48:	8afb      	ldrh	r3, [r7, #22]
 8011e4a:	2bff      	cmp	r3, #255	; 0xff
 8011e4c:	d901      	bls.n	8011e52 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011e52:	8afb      	ldrh	r3, [r7, #22]
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	78da      	ldrb	r2, [r3, #3]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	705a      	strb	r2, [r3, #1]

	return status;
 8011e62:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	371c      	adds	r7, #28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011e72:	b590      	push	{r4, r7, lr}
 8011e74:	b087      	sub	sp, #28
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	4603      	mov	r3, r0
 8011e7a:	60b9      	str	r1, [r7, #8]
 8011e7c:	607a      	str	r2, [r7, #4]
 8011e7e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e80:	2300      	movs	r3, #0
 8011e82:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8011e8c:	89fb      	ldrh	r3, [r7, #14]
 8011e8e:	2b37      	cmp	r3, #55	; 0x37
 8011e90:	d802      	bhi.n	8011e98 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011e92:	f06f 0308 	mvn.w	r3, #8
 8011e96:	e03e      	b.n	8011f16 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011e98:	68b9      	ldr	r1, [r7, #8]
 8011e9a:	2002      	movs	r0, #2
 8011e9c:	f7f9 f8fd 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	3302      	adds	r3, #2
 8011eac:	4619      	mov	r1, r3
 8011eae:	2002      	movs	r0, #2
 8011eb0:	f7f9 f8f3 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8011ec0:	099b      	lsrs	r3, r3, #6
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2219      	movs	r2, #25
 8011ecc:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2205      	movs	r2, #5
 8011ed2:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2205      	movs	r2, #5
 8011ed8:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	3304      	adds	r3, #4
 8011ede:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	74fb      	strb	r3, [r7, #19]
 8011ee4:	e012      	b.n	8011f0c <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8011ee6:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8011ee8:	6979      	ldr	r1, [r7, #20]
 8011eea:	2002      	movs	r0, #2
 8011eec:	f7f9 f8d5 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	1d23      	adds	r3, r4, #4
 8011ef8:	005b      	lsls	r3, r3, #1
 8011efa:	4413      	add	r3, r2
 8011efc:	460a      	mov	r2, r1
 8011efe:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	3302      	adds	r3, #2
 8011f04:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011f06:	7cfb      	ldrb	r3, [r7, #19]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	74fb      	strb	r3, [r7, #19]
 8011f0c:	7cfb      	ldrb	r3, [r7, #19]
 8011f0e:	2b18      	cmp	r3, #24
 8011f10:	d9e9      	bls.n	8011ee6 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8011f12:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	371c      	adds	r7, #28
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd90      	pop	{r4, r7, pc}

08011f1e <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	4603      	mov	r3, r0
 8011f26:	60b9      	str	r1, [r7, #8]
 8011f28:	607a      	str	r2, [r7, #4]
 8011f2a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8011f30:	89fb      	ldrh	r3, [r7, #14]
 8011f32:	2b07      	cmp	r3, #7
 8011f34:	d802      	bhi.n	8011f3c <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011f36:	f06f 0308 	mvn.w	r3, #8
 8011f3a:	e027      	b.n	8011f8c <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011f3c:	68b9      	ldr	r1, [r7, #8]
 8011f3e:	2002      	movs	r0, #2
 8011f40:	f7f9 f8ab 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011f44:	4603      	mov	r3, r0
 8011f46:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	3302      	adds	r3, #2
 8011f50:	4619      	mov	r1, r3
 8011f52:	2002      	movs	r0, #2
 8011f54:	f7f9 f8a1 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	3304      	adds	r3, #4
 8011f64:	4619      	mov	r1, r3
 8011f66:	2002      	movs	r0, #2
 8011f68:	f7f9 f897 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	3306      	adds	r3, #6
 8011f78:	4619      	mov	r1, r3
 8011f7a:	2002      	movs	r0, #2
 8011f7c:	f7f9 f88d 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011f80:	4603      	mov	r3, r0
 8011f82:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	80da      	strh	r2, [r3, #6]

	return status;
 8011f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b086      	sub	sp, #24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8011fa6:	89fb      	ldrh	r3, [r7, #14]
 8011fa8:	2b0f      	cmp	r3, #15
 8011faa:	d802      	bhi.n	8011fb2 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011fac:	f06f 0308 	mvn.w	r3, #8
 8011fb0:	e04d      	b.n	801204e <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011fb2:	68b9      	ldr	r1, [r7, #8]
 8011fb4:	2002      	movs	r0, #2
 8011fb6:	f7f9 f870 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	789a      	ldrb	r2, [r3, #2]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	78da      	ldrb	r2, [r3, #3]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	2002      	movs	r0, #2
 8011fda:	f7f9 f85e 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	3306      	adds	r3, #6
 8011fea:	4619      	mov	r1, r3
 8011fec:	2002      	movs	r0, #2
 8011fee:	f7f9 f854 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	3308      	adds	r3, #8
 8011ffe:	4619      	mov	r1, r3
 8012000:	2002      	movs	r0, #2
 8012002:	f7f9 f84a 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012006:	4603      	mov	r3, r0
 8012008:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	330a      	adds	r3, #10
 8012012:	4619      	mov	r1, r3
 8012014:	2002      	movs	r0, #2
 8012016:	f7f9 f840 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 801201a:	4603      	mov	r3, r0
 801201c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	330c      	adds	r3, #12
 8012026:	4619      	mov	r1, r3
 8012028:	2002      	movs	r0, #2
 801202a:	f7f9 f836 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 801202e:	4603      	mov	r3, r0
 8012030:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	330e      	adds	r3, #14
 801203a:	4619      	mov	r1, r3
 801203c:	2002      	movs	r0, #2
 801203e:	f7f9 f82c 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012042:	4603      	mov	r3, r0
 8012044:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	81da      	strh	r2, [r3, #14]

	return status;
 801204a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3718      	adds	r7, #24
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8012056:	b580      	push	{r7, lr}
 8012058:	b086      	sub	sp, #24
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	607b      	str	r3, [r7, #4]
 8012060:	460b      	mov	r3, r1
 8012062:	72fb      	strb	r3, [r7, #11]
 8012064:	4613      	mov	r3, r2
 8012066:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012068:	2300      	movs	r3, #0
 801206a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 801206c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d106      	bne.n	8012082 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8012074:	2232      	movs	r2, #50	; 0x32
 8012076:	2104      	movs	r1, #4
 8012078:	68f8      	ldr	r0, [r7, #12]
 801207a:	f7ff fdd0 	bl	8011c1e <VL53L1_nvm_enable>
 801207e:	4603      	mov	r3, r0
 8012080:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8012082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d107      	bne.n	801209a <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 801208a:	7aba      	ldrb	r2, [r7, #10]
 801208c:	7af9      	ldrb	r1, [r7, #11]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	68f8      	ldr	r0, [r7, #12]
 8012092:	f7ff fe2a 	bl	8011cea <VL53L1_nvm_read>
 8012096:	4603      	mov	r3, r0
 8012098:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 801209a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d104      	bne.n	80120ac <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff fe7f 	bl	8011da6 <VL53L1_nvm_disable>
 80120a8:	4603      	mov	r3, r0
 80120aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80120ac:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3718      	adds	r7, #24
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80120c2:	2300      	movs	r3, #0
 80120c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80120c6:	f107 0308 	add.w	r3, r7, #8
 80120ca:	2201      	movs	r2, #1
 80120cc:	212e      	movs	r1, #46	; 0x2e
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7ff ffc1 	bl	8012056 <VL53L1_read_nvm_raw_data>
 80120d4:	4603      	mov	r3, r0
 80120d6:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80120d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d108      	bne.n	80120f2 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80120e0:	f107 0308 	add.w	r3, r7, #8
 80120e4:	683a      	ldr	r2, [r7, #0]
 80120e6:	4619      	mov	r1, r3
 80120e8:	2004      	movs	r0, #4
 80120ea:	f7ff fe92 	bl	8011e12 <VL53L1_nvm_decode_optical_centre>
 80120ee:	4603      	mov	r3, r0
 80120f0:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80120f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b092      	sub	sp, #72	; 0x48
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
 8012106:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012108:	2300      	movs	r3, #0
 801210a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801210e:	f107 030c 	add.w	r3, r7, #12
 8012112:	220e      	movs	r2, #14
 8012114:	2157      	movs	r1, #87	; 0x57
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7ff ff9d 	bl	8012056 <VL53L1_read_nvm_raw_data>
 801211c:	4603      	mov	r3, r0
 801211e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012122:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012126:	2b00      	cmp	r3, #0
 8012128:	d109      	bne.n	801213e <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 801212a:	f107 030c 	add.w	r3, r7, #12
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	4619      	mov	r1, r3
 8012132:	2038      	movs	r0, #56	; 0x38
 8012134:	f7ff fe9d 	bl	8011e72 <VL53L1_nvm_decode_cal_peak_rate_map>
 8012138:	4603      	mov	r3, r0
 801213a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 801213e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012142:	4618      	mov	r0, r3
 8012144:	3748      	adds	r7, #72	; 0x48
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 801214a:	b580      	push	{r7, lr}
 801214c:	b086      	sub	sp, #24
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012154:	2300      	movs	r3, #0
 8012156:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012158:	f107 030c 	add.w	r3, r7, #12
 801215c:	2202      	movs	r2, #2
 801215e:	2165      	movs	r1, #101	; 0x65
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ff78 	bl	8012056 <VL53L1_read_nvm_raw_data>
 8012166:	4603      	mov	r3, r0
 8012168:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801216a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d108      	bne.n	8012184 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8012172:	f107 030c 	add.w	r3, r7, #12
 8012176:	683a      	ldr	r2, [r7, #0]
 8012178:	4619      	mov	r1, r3
 801217a:	2008      	movs	r0, #8
 801217c:	f7ff fecf 	bl	8011f1e <VL53L1_nvm_decode_additional_offset_cal_data>
 8012180:	4603      	mov	r3, r0
 8012182:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012184:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012188:	4618      	mov	r0, r3
 801218a:	3718      	adds	r7, #24
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08a      	sub	sp, #40	; 0x28
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	460b      	mov	r3, r1
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801219e:	2300      	movs	r3, #0
 80121a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80121a4:	897b      	ldrh	r3, [r7, #10]
 80121a6:	089b      	lsrs	r3, r3, #2
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	b2d9      	uxtb	r1, r3
 80121ac:	f107 0314 	add.w	r3, r7, #20
 80121b0:	2204      	movs	r2, #4
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f7ff ff4f 	bl	8012056 <VL53L1_read_nvm_raw_data>
 80121b8:	4603      	mov	r3, r0
 80121ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80121be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d109      	bne.n	80121da <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80121c6:	f107 0314 	add.w	r3, r7, #20
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4619      	mov	r1, r3
 80121ce:	2010      	movs	r0, #16
 80121d0:	f7ff fee0 	bl	8011f94 <VL53L1_nvm_decode_fmt_range_results_data>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80121da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80121de:	4618      	mov	r0, r3
 80121e0:	3728      	adds	r7, #40	; 0x28
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b086      	sub	sp, #24
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	60f8      	str	r0, [r7, #12]
 80121ee:	460b      	mov	r3, r1
 80121f0:	607a      	str	r2, [r7, #4]
 80121f2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80121f4:	2300      	movs	r3, #0
 80121f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80121f8:	897b      	ldrh	r3, [r7, #10]
 80121fa:	2b0a      	cmp	r3, #10
 80121fc:	d802      	bhi.n	8012204 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80121fe:	f06f 0309 	mvn.w	r3, #9
 8012202:	e047      	b.n	8012294 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801220c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801221a:	f002 020f 	and.w	r2, r2, #15
 801221e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012220:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801222a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801222e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012230:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801223a:	f002 0203 	and.w	r2, r2, #3
 801223e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012240:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801224a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801224e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012250:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	88d8      	ldrh	r0, [r3, #6]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	3305      	adds	r3, #5
 801225a:	461a      	mov	r2, r3
 801225c:	2102      	movs	r1, #2
 801225e:	f7f8 fef1 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801226a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012274:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801227e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012282:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012284:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801228e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012294:	4618      	mov	r0, r3
 8012296:	3718      	adds	r7, #24
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b086      	sub	sp, #24
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	4603      	mov	r3, r0
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80122ae:	89fb      	ldrh	r3, [r7, #14]
 80122b0:	2b0a      	cmp	r3, #10
 80122b2:	d802      	bhi.n	80122ba <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80122b4:	f06f 0309 	mvn.w	r3, #9
 80122b8:	e046      	b.n	8012348 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122c2:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	3301      	adds	r3, #1
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	f003 030f 	and.w	r3, r3, #15
 80122d2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	3302      	adds	r3, #2
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122e2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	3303      	adds	r3, #3
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	f003 0303 	and.w	r3, r3, #3
 80122f2:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	3304      	adds	r3, #4
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012302:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	3305      	adds	r3, #5
 801230c:	4619      	mov	r1, r3
 801230e:	2002      	movs	r0, #2
 8012310:	f7f8 fec3 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012314:	4603      	mov	r3, r0
 8012316:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	79da      	ldrb	r2, [r3, #7]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	7a1a      	ldrb	r2, [r3, #8]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	3309      	adds	r3, #9
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012336:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	7a9a      	ldrb	r2, [r3, #10]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012348:	4618      	mov	r0, r3
 801234a:	3718      	adds	r7, #24
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801235a:	2300      	movs	r3, #0
 801235c:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801235e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d108      	bne.n	8012378 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012366:	f107 020c 	add.w	r2, r7, #12
 801236a:	230b      	movs	r3, #11
 801236c:	2101      	movs	r1, #1
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f002 f91e 	bl	80145b0 <VL53L1_ReadMulti>
 8012374:	4603      	mov	r3, r0
 8012376:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d108      	bne.n	8012392 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8012380:	f107 030c 	add.w	r3, r7, #12
 8012384:	683a      	ldr	r2, [r7, #0]
 8012386:	4619      	mov	r1, r3
 8012388:	200b      	movs	r0, #11
 801238a:	f7ff ff87 	bl	801229c <VL53L1_i2c_decode_static_nvm_managed>
 801238e:	4603      	mov	r3, r0
 8012390:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012396:	4618      	mov	r0, r3
 8012398:	3718      	adds	r7, #24
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801239e:	b580      	push	{r7, lr}
 80123a0:	b086      	sub	sp, #24
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	60f8      	str	r0, [r7, #12]
 80123a6:	460b      	mov	r3, r1
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123ac:	2300      	movs	r3, #0
 80123ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80123b0:	897b      	ldrh	r3, [r7, #10]
 80123b2:	2b16      	cmp	r3, #22
 80123b4:	d802      	bhi.n	80123bc <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80123b6:	f06f 0309 	mvn.w	r3, #9
 80123ba:	e076      	b.n	80124aa <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80123cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80123d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80123e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80123ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80123f4:	f002 020f 	and.w	r2, r2, #15
 80123f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80123fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012404:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801240e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012412:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012414:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801241e:	f002 0203 	and.w	r2, r2, #3
 8012422:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012424:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	8958      	ldrh	r0, [r3, #10]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3309      	adds	r3, #9
 801242e:	461a      	mov	r2, r3
 8012430:	2102      	movs	r1, #2
 8012432:	f7f8 fe07 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	330b      	adds	r3, #11
 8012440:	461a      	mov	r2, r3
 8012442:	2102      	movs	r1, #2
 8012444:	f7f8 fe49 	bl	800b0da <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	330d      	adds	r3, #13
 8012452:	461a      	mov	r2, r3
 8012454:	2102      	movs	r1, #2
 8012456:	f7f8 fe40 	bl	800b0da <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	8a18      	ldrh	r0, [r3, #16]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	330f      	adds	r3, #15
 8012462:	461a      	mov	r2, r3
 8012464:	2102      	movs	r1, #2
 8012466:	f7f8 fded 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8012470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012474:	b218      	sxth	r0, r3
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3311      	adds	r3, #17
 801247a:	461a      	mov	r2, r3
 801247c:	2102      	movs	r1, #2
 801247e:	f7f8 fe2c 	bl	800b0da <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	3313      	adds	r3, #19
 801248c:	461a      	mov	r2, r3
 801248e:	2102      	movs	r1, #2
 8012490:	f7f8 fe23 	bl	800b0da <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3315      	adds	r3, #21
 801249e:	461a      	mov	r2, r3
 80124a0:	2102      	movs	r1, #2
 80124a2:	f7f8 fe1a 	bl	800b0da <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80124a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3718      	adds	r7, #24
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b086      	sub	sp, #24
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	4603      	mov	r3, r0
 80124ba:	60b9      	str	r1, [r7, #8]
 80124bc:	607a      	str	r2, [r7, #4]
 80124be:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124c0:	2300      	movs	r3, #0
 80124c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80124c4:	89fb      	ldrh	r3, [r7, #14]
 80124c6:	2b16      	cmp	r3, #22
 80124c8:	d802      	bhi.n	80124d0 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124ca:	f06f 0309 	mvn.w	r3, #9
 80124ce:	e079      	b.n	80125c4 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	785a      	ldrb	r2, [r3, #1]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	789a      	ldrb	r2, [r3, #2]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	78da      	ldrb	r2, [r3, #3]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	791a      	ldrb	r2, [r3, #4]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	3305      	adds	r3, #5
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f003 030f 	and.w	r3, r3, #15
 8012502:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	799a      	ldrb	r2, [r3, #6]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	3307      	adds	r3, #7
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801251a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	3308      	adds	r3, #8
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	f003 0303 	and.w	r3, r3, #3
 801252a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	3309      	adds	r3, #9
 8012534:	4619      	mov	r1, r3
 8012536:	2002      	movs	r0, #2
 8012538:	f7f8 fdaf 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 801253c:	4603      	mov	r3, r0
 801253e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	330b      	adds	r3, #11
 8012548:	4619      	mov	r1, r3
 801254a:	2002      	movs	r0, #2
 801254c:	f7f8 fdf1 	bl	800b132 <VL53L1_i2c_decode_int16_t>
 8012550:	4603      	mov	r3, r0
 8012552:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	330d      	adds	r3, #13
 801255c:	4619      	mov	r1, r3
 801255e:	2002      	movs	r0, #2
 8012560:	f7f8 fde7 	bl	800b132 <VL53L1_i2c_decode_int16_t>
 8012564:	4603      	mov	r3, r0
 8012566:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	330f      	adds	r3, #15
 8012570:	4619      	mov	r1, r3
 8012572:	2002      	movs	r0, #2
 8012574:	f7f8 fd91 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012578:	4603      	mov	r3, r0
 801257a:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	3311      	adds	r3, #17
 8012584:	4619      	mov	r1, r3
 8012586:	2002      	movs	r0, #2
 8012588:	f7f8 fdd3 	bl	800b132 <VL53L1_i2c_decode_int16_t>
 801258c:	4603      	mov	r3, r0
 801258e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012592:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	3313      	adds	r3, #19
 801259c:	4619      	mov	r1, r3
 801259e:	2002      	movs	r0, #2
 80125a0:	f7f8 fdc7 	bl	800b132 <VL53L1_i2c_decode_int16_t>
 80125a4:	4603      	mov	r3, r0
 80125a6:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	3315      	adds	r3, #21
 80125b0:	4619      	mov	r1, r3
 80125b2:	2002      	movs	r0, #2
 80125b4:	f7f8 fdbd 	bl	800b132 <VL53L1_i2c_decode_int16_t>
 80125b8:	4603      	mov	r3, r0
 80125ba:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80125c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3718      	adds	r7, #24
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b088      	sub	sp, #32
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125d6:	2300      	movs	r3, #0
 80125d8:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80125da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d108      	bne.n	80125f4 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80125e2:	f107 0208 	add.w	r2, r7, #8
 80125e6:	2317      	movs	r3, #23
 80125e8:	210d      	movs	r1, #13
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f001 ffe0 	bl	80145b0 <VL53L1_ReadMulti>
 80125f0:	4603      	mov	r3, r0
 80125f2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80125f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d108      	bne.n	801260e <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80125fc:	f107 0308 	add.w	r3, r7, #8
 8012600:	683a      	ldr	r2, [r7, #0]
 8012602:	4619      	mov	r1, r3
 8012604:	2017      	movs	r0, #23
 8012606:	f7ff ff54 	bl	80124b2 <VL53L1_i2c_decode_customer_nvm_managed>
 801260a:	4603      	mov	r3, r0
 801260c:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801260e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3720      	adds	r7, #32
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b086      	sub	sp, #24
 801261e:	af00      	add	r7, sp, #0
 8012620:	60f8      	str	r0, [r7, #12]
 8012622:	460b      	mov	r3, r1
 8012624:	607a      	str	r2, [r7, #4]
 8012626:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012628:	2300      	movs	r3, #0
 801262a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 801262c:	897b      	ldrh	r3, [r7, #10]
 801262e:	2b1f      	cmp	r3, #31
 8012630:	d802      	bhi.n	8012638 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012632:	f06f 0309 	mvn.w	r3, #9
 8012636:	e0cf      	b.n	80127d8 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	881b      	ldrh	r3, [r3, #0]
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	2102      	movs	r1, #2
 8012640:	4618      	mov	r0, r3
 8012642:	f7f8 fcff 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801264e:	f002 0201 	and.w	r2, r2, #1
 8012652:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012654:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801265e:	f002 020f 	and.w	r2, r2, #15
 8012662:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012664:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801266e:	f002 020f 	and.w	r2, r2, #15
 8012672:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801267e:	f002 021f 	and.w	r2, r2, #31
 8012682:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012684:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801268e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012692:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012694:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801269e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80126a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80126a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80126ae:	f002 0201 	and.w	r2, r2, #1
 80126b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80126b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80126ba:	68fa      	ldr	r2, [r7, #12]
 80126bc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80126be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80126c8:	f002 0201 	and.w	r2, r2, #1
 80126cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80126ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80126d8:	f002 0203 	and.w	r2, r2, #3
 80126dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80126de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80126e8:	f002 021f 	and.w	r2, r2, #31
 80126ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80126ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80126f8:	f002 0203 	and.w	r2, r2, #3
 80126fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80126fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012708:	f002 0203 	and.w	r2, r2, #3
 801270c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801270e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012718:	f002 0207 	and.w	r2, r2, #7
 801271c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801271e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012728:	f002 021f 	and.w	r2, r2, #31
 801272c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801272e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012738:	f002 0201 	and.w	r2, r2, #1
 801273c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801273e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012748:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801275c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012766:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 801276c:	68fa      	ldr	r2, [r7, #12]
 801276e:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8012770:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 801277a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	8b18      	ldrh	r0, [r3, #24]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3318      	adds	r3, #24
 8012784:	461a      	mov	r2, r3
 8012786:	2102      	movs	r1, #2
 8012788:	f7f8 fc5c 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012794:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 801279a:	68fa      	ldr	r2, [r7, #12]
 801279c:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 801279e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80127a8:	f002 020f 	and.w	r2, r2, #15
 80127ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80127ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80127b4:	68fa      	ldr	r2, [r7, #12]
 80127b6:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80127b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80127c2:	f002 020f 	and.w	r2, r2, #15
 80127c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80127c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80127d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80127d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	460b      	mov	r3, r1
 80127ea:	607a      	str	r2, [r7, #4]
 80127ec:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127ee:	2300      	movs	r3, #0
 80127f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 80127f2:	897b      	ldrh	r3, [r7, #10]
 80127f4:	2b15      	cmp	r3, #21
 80127f6:	d802      	bhi.n	80127fe <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127f8:	f06f 0309 	mvn.w	r3, #9
 80127fc:	e070      	b.n	80128e0 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801280a:	68fa      	ldr	r2, [r7, #12]
 801280c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801280e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012818:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012826:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012828:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 801282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012832:	b298      	uxth	r0, r3
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3304      	adds	r3, #4
 8012838:	461a      	mov	r2, r3
 801283a:	2102      	movs	r1, #2
 801283c:	f7f8 fc02 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801284c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801284e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012854:	68fa      	ldr	r2, [r7, #12]
 8012856:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012858:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 801285e:	68fa      	ldr	r2, [r7, #12]
 8012860:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012862:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 801286c:	f002 0201 	and.w	r2, r2, #1
 8012870:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012872:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 801287c:	f002 0207 	and.w	r2, r2, #7
 8012880:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012882:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	8998      	ldrh	r0, [r3, #12]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	330c      	adds	r3, #12
 801288c:	461a      	mov	r2, r3
 801288e:	2102      	movs	r1, #2
 8012890:	f7f8 fbd8 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	89d8      	ldrh	r0, [r3, #14]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	330e      	adds	r3, #14
 801289c:	461a      	mov	r2, r3
 801289e:	2102      	movs	r1, #2
 80128a0:	f7f8 fbd0 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	8a18      	ldrh	r0, [r3, #16]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3310      	adds	r3, #16
 80128ac:	461a      	mov	r2, r3
 80128ae:	2102      	movs	r1, #2
 80128b0:	f7f8 fbc8 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80128bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80128c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80128d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80128d6:	68fa      	ldr	r2, [r7, #12]
 80128d8:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80128da:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80128dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b086      	sub	sp, #24
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	460b      	mov	r3, r1
 80128f2:	607a      	str	r2, [r7, #4]
 80128f4:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80128f6:	2300      	movs	r3, #0
 80128f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 80128fa:	897b      	ldrh	r3, [r7, #10]
 80128fc:	2b16      	cmp	r3, #22
 80128fe:	d802      	bhi.n	8012906 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012900:	f06f 0309 	mvn.w	r3, #9
 8012904:	e06e      	b.n	80129e4 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	f003 030f 	and.w	r3, r3, #15
 801290e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801291c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012926:	f002 020f 	and.w	r2, r2, #15
 801292a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801292c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012932:	68fa      	ldr	r2, [r7, #12]
 8012934:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012936:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012940:	f002 020f 	and.w	r2, r2, #15
 8012944:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012946:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012950:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801295a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801295e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012960:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801296a:	f002 020f 	and.w	r2, r2, #15
 801296e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012970:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012976:	68fa      	ldr	r2, [r7, #12]
 8012978:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801297a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012984:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012988:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801298a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	8958      	ldrh	r0, [r3, #10]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	330a      	adds	r3, #10
 8012994:	461a      	mov	r2, r3
 8012996:	2102      	movs	r1, #2
 8012998:	f7f8 fb54 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	8998      	ldrh	r0, [r3, #12]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	330c      	adds	r3, #12
 80129a4:	461a      	mov	r2, r3
 80129a6:	2102      	movs	r1, #2
 80129a8:	f7f8 fb4c 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80129b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80129be:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	6918      	ldr	r0, [r3, #16]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3312      	adds	r3, #18
 80129c8:	461a      	mov	r2, r3
 80129ca:	2104      	movs	r1, #4
 80129cc:	f7f8 fbda 	bl	800b184 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80129d8:	f002 0201 	and.w	r2, r2, #1
 80129dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80129de:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80129e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3718      	adds	r7, #24
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b086      	sub	sp, #24
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	460b      	mov	r3, r1
 80129f6:	607a      	str	r2, [r7, #4]
 80129f8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80129fa:	2300      	movs	r3, #0
 80129fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 80129fe:	897b      	ldrh	r3, [r7, #10]
 8012a00:	2b11      	cmp	r3, #17
 8012a02:	d802      	bhi.n	8012a0a <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a04:	f06f 0309 	mvn.w	r3, #9
 8012a08:	e071      	b.n	8012aee <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	f003 0303 	and.w	r3, r3, #3
 8012a12:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	8858      	ldrh	r0, [r3, #2]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	461a      	mov	r2, r3
 8012a22:	2102      	movs	r1, #2
 8012a24:	f7f8 fb0e 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	8898      	ldrh	r0, [r3, #4]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3303      	adds	r3, #3
 8012a30:	461a      	mov	r2, r3
 8012a32:	2102      	movs	r1, #2
 8012a34:	f7f8 fb06 	bl	800b044 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012a40:	f002 0201 	and.w	r2, r2, #1
 8012a44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012a46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012a50:	f002 0207 	and.w	r2, r2, #7
 8012a54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012a56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012a60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012a6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012a74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012a7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012a84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a88:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012a8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012a94:	f002 0203 	and.w	r2, r2, #3
 8012a98:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012a9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012aa4:	f002 0203 	and.w	r2, r2, #3
 8012aa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012aaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012ab4:	f002 020f 	and.w	r2, r2, #15
 8012ab8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012aba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012ac0:	68fa      	ldr	r2, [r7, #12]
 8012ac2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012ac4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012aca:	68fa      	ldr	r2, [r7, #12]
 8012acc:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012ace:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012ad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012ae2:	f002 0203 	and.w	r2, r2, #3
 8012ae6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012ae8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3718      	adds	r7, #24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012af6:	b480      	push	{r7}
 8012af8:	b087      	sub	sp, #28
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	60f8      	str	r0, [r7, #12]
 8012afe:	460b      	mov	r3, r1
 8012b00:	607a      	str	r2, [r7, #4]
 8012b02:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b04:	2300      	movs	r3, #0
 8012b06:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012b08:	897b      	ldrh	r3, [r7, #10]
 8012b0a:	2b04      	cmp	r3, #4
 8012b0c:	d802      	bhi.n	8012b14 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012b0e:	f06f 0309 	mvn.w	r3, #9
 8012b12:	e025      	b.n	8012b60 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	f003 0301 	and.w	r3, r3, #1
 8012b1c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012b2a:	f002 0201 	and.w	r2, r2, #1
 8012b2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012b30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012b3a:	f002 0201 	and.w	r2, r2, #1
 8012b3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012b40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012b4a:	f002 0203 	and.w	r2, r2, #3
 8012b4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012b50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012b5a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	371c      	adds	r7, #28
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b76:	2300      	movs	r3, #0
 8012b78:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d108      	bne.n	8012b94 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012b82:	f107 0308 	add.w	r3, r7, #8
 8012b86:	461a      	mov	r2, r3
 8012b88:	2105      	movs	r1, #5
 8012b8a:	6838      	ldr	r0, [r7, #0]
 8012b8c:	f7ff ffb3 	bl	8012af6 <VL53L1_i2c_encode_system_control>
 8012b90:	4603      	mov	r3, r0
 8012b92:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d108      	bne.n	8012bae <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012b9c:	f107 0208 	add.w	r2, r7, #8
 8012ba0:	2305      	movs	r3, #5
 8012ba2:	2183      	movs	r1, #131	; 0x83
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f001 fccd 	bl	8014544 <VL53L1_WriteMulti>
 8012baa:	4603      	mov	r3, r0
 8012bac:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}

08012bba <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012bba:	b580      	push	{r7, lr}
 8012bbc:	b086      	sub	sp, #24
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	60b9      	str	r1, [r7, #8]
 8012bc4:	607a      	str	r2, [r7, #4]
 8012bc6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012bcc:	89fb      	ldrh	r3, [r7, #14]
 8012bce:	2b2b      	cmp	r3, #43	; 0x2b
 8012bd0:	d802      	bhi.n	8012bd8 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012bd2:	f06f 0309 	mvn.w	r3, #9
 8012bd6:	e0e2      	b.n	8012d9e <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012be0:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	785a      	ldrb	r2, [r3, #1]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	3302      	adds	r3, #2
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	f003 030f 	and.w	r3, r3, #15
 8012bf8:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	78da      	ldrb	r2, [r3, #3]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	3304      	adds	r3, #4
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	2002      	movs	r0, #2
 8012c0e:	f7f8 fa44 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c12:	4603      	mov	r3, r0
 8012c14:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	3306      	adds	r3, #6
 8012c1e:	4619      	mov	r1, r3
 8012c20:	2002      	movs	r0, #2
 8012c22:	f7f8 fa3a 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c26:	4603      	mov	r3, r0
 8012c28:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	3308      	adds	r3, #8
 8012c32:	4619      	mov	r1, r3
 8012c34:	2002      	movs	r0, #2
 8012c36:	f7f8 fa30 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	330a      	adds	r3, #10
 8012c46:	4619      	mov	r1, r3
 8012c48:	2002      	movs	r0, #2
 8012c4a:	f7f8 fa26 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	330c      	adds	r3, #12
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	2002      	movs	r0, #2
 8012c5e:	f7f8 fa1c 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c62:	4603      	mov	r3, r0
 8012c64:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	330e      	adds	r3, #14
 8012c6e:	4619      	mov	r1, r3
 8012c70:	2002      	movs	r0, #2
 8012c72:	f7f8 fa12 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c76:	4603      	mov	r3, r0
 8012c78:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	3310      	adds	r3, #16
 8012c82:	4619      	mov	r1, r3
 8012c84:	2002      	movs	r0, #2
 8012c86:	f7f8 fa08 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	3312      	adds	r3, #18
 8012c96:	4619      	mov	r1, r3
 8012c98:	2002      	movs	r0, #2
 8012c9a:	f7f8 f9fe 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	3314      	adds	r3, #20
 8012caa:	4619      	mov	r1, r3
 8012cac:	2002      	movs	r0, #2
 8012cae:	f7f8 f9f4 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	3316      	adds	r3, #22
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	2002      	movs	r0, #2
 8012cc2:	f7f8 f9ea 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	3318      	adds	r3, #24
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	2002      	movs	r0, #2
 8012cd6:	f7f8 f9e0 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	331a      	adds	r3, #26
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	2002      	movs	r0, #2
 8012cea:	f7f8 f9d6 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	331c      	adds	r3, #28
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	2002      	movs	r0, #2
 8012cfe:	f7f8 f9cc 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d02:	4603      	mov	r3, r0
 8012d04:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	331e      	adds	r3, #30
 8012d0e:	4619      	mov	r1, r3
 8012d10:	2002      	movs	r0, #2
 8012d12:	f7f8 f9c2 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d16:	4603      	mov	r3, r0
 8012d18:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	3320      	adds	r3, #32
 8012d22:	4619      	mov	r1, r3
 8012d24:	2002      	movs	r0, #2
 8012d26:	f7f8 f9b8 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	3322      	adds	r3, #34	; 0x22
 8012d36:	4619      	mov	r1, r3
 8012d38:	2002      	movs	r0, #2
 8012d3a:	f7f8 f9ae 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	3324      	adds	r3, #36	; 0x24
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	2002      	movs	r0, #2
 8012d4e:	f7f8 f9a4 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d52:	4603      	mov	r3, r0
 8012d54:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	3326      	adds	r3, #38	; 0x26
 8012d5e:	4619      	mov	r1, r3
 8012d60:	2002      	movs	r0, #2
 8012d62:	f7f8 f99a 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d66:	4603      	mov	r3, r0
 8012d68:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	3328      	adds	r3, #40	; 0x28
 8012d72:	4619      	mov	r1, r3
 8012d74:	2002      	movs	r0, #2
 8012d76:	f7f8 f990 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b086      	sub	sp, #24
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	4603      	mov	r3, r0
 8012dae:	60b9      	str	r1, [r7, #8]
 8012db0:	607a      	str	r2, [r7, #4]
 8012db2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012db4:	2300      	movs	r3, #0
 8012db6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012db8:	89fb      	ldrh	r3, [r7, #14]
 8012dba:	2b20      	cmp	r3, #32
 8012dbc:	d802      	bhi.n	8012dc4 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012dbe:	f06f 0309 	mvn.w	r3, #9
 8012dc2:	e04d      	b.n	8012e60 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012dc4:	68b9      	ldr	r1, [r7, #8]
 8012dc6:	2004      	movs	r0, #4
 8012dc8:	f7f8 fa06 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012dcc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	2004      	movs	r0, #4
 8012dda:	f7f8 f9fd 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012dde:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	3308      	adds	r3, #8
 8012de8:	4619      	mov	r1, r3
 8012dea:	2004      	movs	r0, #4
 8012dec:	f7f8 fa11 	bl	800b212 <VL53L1_i2c_decode_int32_t>
 8012df0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	330c      	adds	r3, #12
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	2004      	movs	r0, #4
 8012dfe:	f7f8 f9eb 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012e02:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	3310      	adds	r3, #16
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	2004      	movs	r0, #4
 8012e10:	f7f8 f9e2 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012e14:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	3314      	adds	r3, #20
 8012e1e:	4619      	mov	r1, r3
 8012e20:	2004      	movs	r0, #4
 8012e22:	f7f8 f9d9 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012e26:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	3318      	adds	r3, #24
 8012e30:	4619      	mov	r1, r3
 8012e32:	2004      	movs	r0, #4
 8012e34:	f7f8 f9ed 	bl	800b212 <VL53L1_i2c_decode_int32_t>
 8012e38:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	331c      	adds	r3, #28
 8012e42:	4619      	mov	r1, r3
 8012e44:	2004      	movs	r0, #4
 8012e46:	f7f8 f9c7 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8012e4a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3718      	adds	r7, #24
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b086      	sub	sp, #24
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	4603      	mov	r3, r0
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e76:	2300      	movs	r3, #0
 8012e78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012e7a:	89fb      	ldrh	r3, [r7, #14]
 8012e7c:	2b37      	cmp	r3, #55	; 0x37
 8012e7e:	d802      	bhi.n	8012e86 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012e80:	f06f 0309 	mvn.w	r3, #9
 8012e84:	e15e      	b.n	8013144 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012e86:	68b9      	ldr	r1, [r7, #8]
 8012e88:	2002      	movs	r0, #2
 8012e8a:	f7f8 f906 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	3302      	adds	r3, #2
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ea0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	3303      	adds	r3, #3
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012eb0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	3304      	adds	r3, #4
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	f003 0303 	and.w	r3, r3, #3
 8012ec0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	3305      	adds	r3, #5
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	3306      	adds	r3, #6
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ee0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	3307      	adds	r3, #7
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ef0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	3308      	adds	r3, #8
 8012efa:	4619      	mov	r1, r3
 8012efc:	2002      	movs	r0, #2
 8012efe:	f7f8 f8cc 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012f02:	4603      	mov	r3, r0
 8012f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f08:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	330a      	adds	r3, #10
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	f003 0303 	and.w	r3, r3, #3
 8012f18:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	330b      	adds	r3, #11
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	f003 0303 	and.w	r3, r3, #3
 8012f28:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	330c      	adds	r3, #12
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f003 030f 	and.w	r3, r3, #15
 8012f38:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	330d      	adds	r3, #13
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f003 0307 	and.w	r3, r3, #7
 8012f48:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	330e      	adds	r3, #14
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	f003 0301 	and.w	r3, r3, #1
 8012f58:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	330f      	adds	r3, #15
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0303 	and.w	r3, r3, #3
 8012f68:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	7c1a      	ldrb	r2, [r3, #16]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	7c5a      	ldrb	r2, [r3, #17]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	3312      	adds	r3, #18
 8012f82:	4619      	mov	r1, r3
 8012f84:	2002      	movs	r0, #2
 8012f86:	f7f8 f888 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f90:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	3316      	adds	r3, #22
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2002      	movs	r0, #2
 8012f9e:	f7f8 f87c 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	3318      	adds	r3, #24
 8012fae:	4619      	mov	r1, r3
 8012fb0:	2002      	movs	r0, #2
 8012fb2:	f7f8 f872 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	331a      	adds	r3, #26
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f003 0301 	and.w	r3, r3, #1
 8012fc8:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	331b      	adds	r3, #27
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	f003 0307 	and.w	r3, r3, #7
 8012fd8:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	7f1a      	ldrb	r2, [r3, #28]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	7f5a      	ldrb	r2, [r3, #29]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	331e      	adds	r3, #30
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ff8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	331f      	adds	r3, #31
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013008:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	3320      	adds	r3, #32
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	f003 0303 	and.w	r3, r3, #3
 8013018:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	3321      	adds	r3, #33	; 0x21
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	f003 030f 	and.w	r3, r3, #15
 8013028:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	3325      	adds	r3, #37	; 0x25
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	f003 0301 	and.w	r3, r3, #1
 801305c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	3326      	adds	r3, #38	; 0x26
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	f003 0303 	and.w	r3, r3, #3
 801306e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	3327      	adds	r3, #39	; 0x27
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	f003 031f 	and.w	r3, r3, #31
 8013080:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	3328      	adds	r3, #40	; 0x28
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	f003 031f 	and.w	r3, r3, #31
 8013092:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	3329      	adds	r3, #41	; 0x29
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	f003 031f 	and.w	r3, r3, #31
 80130a4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	332a      	adds	r3, #42	; 0x2a
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	f003 0301 	and.w	r3, r3, #1
 80130b6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	332b      	adds	r3, #43	; 0x2b
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 0301 	and.w	r3, r3, #1
 80130c8:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	332c      	adds	r3, #44	; 0x2c
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	f003 0303 	and.w	r3, r3, #3
 80130da:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	332d      	adds	r3, #45	; 0x2d
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130ec:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	332e      	adds	r3, #46	; 0x2e
 80130f8:	4619      	mov	r1, r3
 80130fa:	2004      	movs	r0, #4
 80130fc:	f7f8 f86c 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8013100:	4603      	mov	r3, r0
 8013102:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	3332      	adds	r3, #50	; 0x32
 801310e:	4619      	mov	r1, r3
 8013110:	2004      	movs	r0, #4
 8013112:	f7f8 f861 	bl	800b1d8 <VL53L1_i2c_decode_uint32_t>
 8013116:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	3336      	adds	r3, #54	; 0x36
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	f003 0301 	and.w	r3, r3, #1
 8013126:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	3337      	adds	r3, #55	; 0x37
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	f003 0301 	and.w	r3, r3, #1
 8013138:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8013140:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013144:	4618      	mov	r0, r3
 8013146:	3718      	adds	r7, #24
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	4603      	mov	r3, r0
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	607a      	str	r2, [r7, #4]
 8013158:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801315a:	2300      	movs	r3, #0
 801315c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801315e:	89fb      	ldrh	r3, [r7, #14]
 8013160:	2b30      	cmp	r3, #48	; 0x30
 8013162:	d802      	bhi.n	801316a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013164:	f06f 0309 	mvn.w	r3, #9
 8013168:	e112      	b.n	8013390 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	785a      	ldrb	r2, [r3, #1]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	789a      	ldrb	r2, [r3, #2]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	3303      	adds	r3, #3
 8013186:	4619      	mov	r1, r3
 8013188:	2002      	movs	r0, #2
 801318a:	f7f7 ff86 	bl	800b09a <VL53L1_i2c_decode_uint16_t>
 801318e:	4603      	mov	r3, r0
 8013190:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	3305      	adds	r3, #5
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131a0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	3306      	adds	r3, #6
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	f003 0307 	and.w	r3, r3, #7
 80131b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	3307      	adds	r3, #7
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	f003 0307 	and.w	r3, r3, #7
 80131c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	3308      	adds	r3, #8
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	3309      	adds	r3, #9
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	330a      	adds	r3, #10
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	330b      	adds	r3, #11
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013200:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	330c      	adds	r3, #12
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	330d      	adds	r3, #13
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013220:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	330e      	adds	r3, #14
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013230:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	7bda      	ldrb	r2, [r3, #15]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	7c1a      	ldrb	r2, [r3, #16]
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	7c5a      	ldrb	r2, [r3, #17]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	7c9a      	ldrb	r2, [r3, #18]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	7cda      	ldrb	r2, [r3, #19]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	7d1a      	ldrb	r2, [r3, #20]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	7d5a      	ldrb	r2, [r3, #21]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	7d9a      	ldrb	r2, [r3, #22]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	7dda      	ldrb	r2, [r3, #23]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	7e1a      	ldrb	r2, [r3, #24]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	7e5a      	ldrb	r2, [r3, #25]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	7e9a      	ldrb	r2, [r3, #26]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	7eda      	ldrb	r2, [r3, #27]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	7f1a      	ldrb	r2, [r3, #28]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	7f5a      	ldrb	r2, [r3, #29]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	7f9a      	ldrb	r2, [r3, #30]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	7fda      	ldrb	r2, [r3, #31]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801338c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3718      	adds	r7, #24
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b090      	sub	sp, #64	; 0x40
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80133a2:	2300      	movs	r3, #0
 80133a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80133a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d10a      	bne.n	80133c6 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80133b0:	f107 020c 	add.w	r2, r7, #12
 80133b4:	2331      	movs	r3, #49	; 0x31
 80133b6:	f240 110f 	movw	r1, #271	; 0x10f
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f001 f8f8 	bl	80145b0 <VL53L1_ReadMulti>
 80133c0:	4603      	mov	r3, r0
 80133c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80133c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d109      	bne.n	80133e2 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80133ce:	f107 030c 	add.w	r3, r7, #12
 80133d2:	683a      	ldr	r2, [r7, #0]
 80133d4:	4619      	mov	r1, r3
 80133d6:	2031      	movs	r0, #49	; 0x31
 80133d8:	f7ff feb8 	bl	801314c <VL53L1_i2c_decode_nvm_copy_data>
 80133dc:	4603      	mov	r3, r0
 80133de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80133e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3740      	adds	r7, #64	; 0x40
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80133ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80133f2:	b0d6      	sub	sp, #344	; 0x158
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80133fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80133fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013402:	4603      	mov	r3, r0
 8013404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013408:	23f1      	movs	r3, #241	; 0xf1
 801340a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801340e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 801341c:	f04f 0200 	mov.w	r2, #0
 8013420:	f04f 0300 	mov.w	r3, #0
 8013424:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013428:	f04f 0200 	mov.w	r2, #0
 801342c:	f04f 0300 	mov.w	r3, #0
 8013430:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013434:	f04f 0200 	mov.w	r2, #0
 8013438:	f04f 0300 	mov.w	r3, #0
 801343c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8013440:	f04f 0200 	mov.w	r2, #0
 8013444:	f04f 0300 	mov.w	r3, #0
 8013448:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 801344c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013454:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8013456:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801345a:	2b00      	cmp	r3, #0
 801345c:	f000 8322 	beq.w	8013aa4 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8013460:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013464:	4618      	mov	r0, r3
 8013466:	f7fb fa23 	bl	800e8b0 <VL53L1_calc_pll_period_mm>
 801346a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801346e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8013472:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013476:	429a      	cmp	r2, r3
 8013478:	d91a      	bls.n	80134b0 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801347a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801347e:	2200      	movs	r2, #0
 8013480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013484:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8013488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801348c:	2200      	movs	r2, #0
 801348e:	4698      	mov	r8, r3
 8013490:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8013492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013496:	460b      	mov	r3, r1
 8013498:	ebb3 0308 	subs.w	r3, r3, r8
 801349c:	63bb      	str	r3, [r7, #56]	; 0x38
 801349e:	4613      	mov	r3, r2
 80134a0:	eb63 0309 	sbc.w	r3, r3, r9
 80134a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80134a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80134aa:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80134ae:	e013      	b.n	80134d8 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80134b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80134b4:	2200      	movs	r2, #0
 80134b6:	469a      	mov	sl, r3
 80134b8:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80134ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80134be:	2200      	movs	r2, #0
 80134c0:	461c      	mov	r4, r3
 80134c2:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80134c4:	ebba 0304 	subs.w	r3, sl, r4
 80134c8:	633b      	str	r3, [r7, #48]	; 0x30
 80134ca:	eb6b 0305 	sbc.w	r3, fp, r5
 80134ce:	637b      	str	r3, [r7, #52]	; 0x34
 80134d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80134d4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80134d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80134dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d91f      	bls.n	8013524 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80134e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80134e8:	2200      	movs	r2, #0
 80134ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80134ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 80134f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134f6:	2200      	movs	r2, #0
 80134f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80134fc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013500:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013504:	4623      	mov	r3, r4
 8013506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801350a:	4602      	mov	r2, r0
 801350c:	1a9b      	subs	r3, r3, r2
 801350e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013510:	462b      	mov	r3, r5
 8013512:	460a      	mov	r2, r1
 8013514:	eb63 0302 	sbc.w	r3, r3, r2
 8013518:	62fb      	str	r3, [r7, #44]	; 0x2c
 801351a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801351e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013522:	e01e      	b.n	8013562 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013524:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013528:	2200      	movs	r2, #0
 801352a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801352e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013532:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013536:	2200      	movs	r2, #0
 8013538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801353c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013540:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013544:	4623      	mov	r3, r4
 8013546:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801354a:	4602      	mov	r2, r0
 801354c:	1a9b      	subs	r3, r3, r2
 801354e:	623b      	str	r3, [r7, #32]
 8013550:	462b      	mov	r3, r5
 8013552:	460a      	mov	r2, r1
 8013554:	eb63 0302 	sbc.w	r3, r3, r2
 8013558:	627b      	str	r3, [r7, #36]	; 0x24
 801355a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801355e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8013562:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013566:	4313      	orrs	r3, r2
 8013568:	f000 829c 	beq.w	8013aa4 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 801356c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013570:	2200      	movs	r2, #0
 8013572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013576:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801357a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801357e:	2200      	movs	r2, #0
 8013580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013588:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 801358c:	4623      	mov	r3, r4
 801358e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8013592:	4602      	mov	r2, r0
 8013594:	189b      	adds	r3, r3, r2
 8013596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801359a:	460b      	mov	r3, r1
 801359c:	462a      	mov	r2, r5
 801359e:	eb42 0303 	adc.w	r3, r2, r3
 80135a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80135a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80135aa:	2200      	movs	r2, #0
 80135ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80135b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80135b4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80135b8:	4623      	mov	r3, r4
 80135ba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80135be:	4602      	mov	r2, r0
 80135c0:	189b      	adds	r3, r3, r2
 80135c2:	61bb      	str	r3, [r7, #24]
 80135c4:	460b      	mov	r3, r1
 80135c6:	462a      	mov	r2, r5
 80135c8:	eb42 0303 	adc.w	r3, r2, r3
 80135cc:	61fb      	str	r3, [r7, #28]
 80135ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80135d2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80135d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80135da:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80135de:	f173 0300 	sbcs.w	r3, r3, #0
 80135e2:	d305      	bcc.n	80135f0 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80135e4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80135e8:	f04f 0300 	mov.w	r3, #0
 80135ec:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 80135f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80135f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80135f8:	fb03 f102 	mul.w	r1, r3, r2
 80135fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013600:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013604:	fb02 f303 	mul.w	r3, r2, r3
 8013608:	18ca      	adds	r2, r1, r3
 801360a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801360e:	fba3 1303 	umull	r1, r3, r3, r3
 8013612:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013616:	460b      	mov	r3, r1
 8013618:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013620:	18d3      	adds	r3, r2, r3
 8013622:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013626:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801362a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801362e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013632:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013636:	f04f 0000 	mov.w	r0, #0
 801363a:	f04f 0100 	mov.w	r1, #0
 801363e:	0219      	lsls	r1, r3, #8
 8013640:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013644:	0210      	lsls	r0, r2, #8
 8013646:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801364a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801364e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013652:	d305      	bcc.n	8013660 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013654:	f04f 32ff 	mov.w	r2, #4294967295
 8013658:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801365c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013660:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013664:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013668:	f7ec fe2a 	bl	80002c0 <__aeabi_uldivmod>
 801366c:	4602      	mov	r2, r0
 801366e:	460b      	mov	r3, r1
 8013670:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013674:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013678:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801367c:	f7ec fe20 	bl	80002c0 <__aeabi_uldivmod>
 8013680:	4602      	mov	r2, r0
 8013682:	460b      	mov	r3, r1
 8013684:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8013688:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801368c:	2b80      	cmp	r3, #128	; 0x80
 801368e:	d305      	bcc.n	801369c <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8013690:	f04f 32ff 	mov.w	r2, #4294967295
 8013694:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8013698:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 801369c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80136a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80136a4:	fb03 f102 	mul.w	r1, r3, r2
 80136a8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80136ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80136b0:	fb02 f303 	mul.w	r3, r2, r3
 80136b4:	4419      	add	r1, r3
 80136b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80136ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80136be:	fba2 2303 	umull	r2, r3, r2, r3
 80136c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80136c6:	4613      	mov	r3, r2
 80136c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80136cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136d0:	18cb      	adds	r3, r1, r3
 80136d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80136d6:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80136da:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80136de:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80136e2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80136e6:	2200      	movs	r2, #0
 80136e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80136ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80136f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80136f4:	2200      	movs	r2, #0
 80136f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80136fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80136fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013702:	4623      	mov	r3, r4
 8013704:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013708:	4602      	mov	r2, r0
 801370a:	189b      	adds	r3, r3, r2
 801370c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013710:	460b      	mov	r3, r1
 8013712:	462a      	mov	r2, r5
 8013714:	eb42 0303 	adc.w	r3, r2, r3
 8013718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801371c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013720:	2200      	movs	r2, #0
 8013722:	67bb      	str	r3, [r7, #120]	; 0x78
 8013724:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013726:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801372a:	4623      	mov	r3, r4
 801372c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013730:	4602      	mov	r2, r0
 8013732:	189b      	adds	r3, r3, r2
 8013734:	673b      	str	r3, [r7, #112]	; 0x70
 8013736:	460b      	mov	r3, r1
 8013738:	462a      	mov	r2, r5
 801373a:	eb42 0303 	adc.w	r3, r2, r3
 801373e:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013740:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013744:	2200      	movs	r2, #0
 8013746:	66bb      	str	r3, [r7, #104]	; 0x68
 8013748:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801374a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801374e:	4623      	mov	r3, r4
 8013750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013754:	4602      	mov	r2, r0
 8013756:	189b      	adds	r3, r3, r2
 8013758:	613b      	str	r3, [r7, #16]
 801375a:	460b      	mov	r3, r1
 801375c:	462a      	mov	r2, r5
 801375e:	eb42 0303 	adc.w	r3, r2, r3
 8013762:	617b      	str	r3, [r7, #20]
 8013764:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013768:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 801376c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013770:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013774:	f173 0300 	sbcs.w	r3, r3, #0
 8013778:	d305      	bcc.n	8013786 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 801377a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801377e:	f04f 0300 	mov.w	r3, #0
 8013782:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8013786:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801378a:	f04f 0000 	mov.w	r0, #0
 801378e:	f04f 0100 	mov.w	r1, #0
 8013792:	0219      	lsls	r1, r3, #8
 8013794:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013798:	0210      	lsls	r0, r2, #8
 801379a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801379e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80137a2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80137a6:	1884      	adds	r4, r0, r2
 80137a8:	60bc      	str	r4, [r7, #8]
 80137aa:	eb41 0303 	adc.w	r3, r1, r3
 80137ae:	60fb      	str	r3, [r7, #12]
 80137b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80137b4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80137b8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80137bc:	2b00      	cmp	r3, #0
 80137be:	da05      	bge.n	80137cc <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80137c0:	f04f 32ff 	mov.w	r2, #4294967295
 80137c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80137c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80137cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d331      	bcc.n	8013838 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80137d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80137d8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80137dc:	f7ec fd70 	bl	80002c0 <__aeabi_uldivmod>
 80137e0:	4602      	mov	r2, r0
 80137e2:	460b      	mov	r3, r1
 80137e4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80137e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137ec:	2200      	movs	r2, #0
 80137ee:	663b      	str	r3, [r7, #96]	; 0x60
 80137f0:	667a      	str	r2, [r7, #100]	; 0x64
 80137f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80137f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80137fa:	4622      	mov	r2, r4
 80137fc:	fb02 f203 	mul.w	r2, r2, r3
 8013800:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013804:	4629      	mov	r1, r5
 8013806:	fb01 f303 	mul.w	r3, r1, r3
 801380a:	441a      	add	r2, r3
 801380c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013810:	4621      	mov	r1, r4
 8013812:	fba3 1301 	umull	r1, r3, r3, r1
 8013816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801381a:	460b      	mov	r3, r1
 801381c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013824:	18d3      	adds	r3, r2, r3
 8013826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801382a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801382e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013832:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013836:	e030      	b.n	801389a <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801383c:	2200      	movs	r2, #0
 801383e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013840:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013842:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013846:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801384a:	4622      	mov	r2, r4
 801384c:	fb02 f203 	mul.w	r2, r2, r3
 8013850:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013854:	4629      	mov	r1, r5
 8013856:	fb01 f303 	mul.w	r3, r1, r3
 801385a:	441a      	add	r2, r3
 801385c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013860:	4621      	mov	r1, r4
 8013862:	fba3 1301 	umull	r1, r3, r3, r1
 8013866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801386a:	460b      	mov	r3, r1
 801386c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013874:	18d3      	adds	r3, r2, r3
 8013876:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801387a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801387e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013882:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013886:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801388a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801388e:	f7ec fd17 	bl	80002c0 <__aeabi_uldivmod>
 8013892:	4602      	mov	r2, r0
 8013894:	460b      	mov	r3, r1
 8013896:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 801389a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801389e:	2b00      	cmp	r3, #0
 80138a0:	da05      	bge.n	80138ae <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 80138a2:	f04f 32ff 	mov.w	r2, #4294967295
 80138a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80138aa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80138ae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d33d      	bcc.n	8013932 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80138b6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80138ba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138be:	f7ec fcff 	bl	80002c0 <__aeabi_uldivmod>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80138ca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138ce:	f04f 0200 	mov.w	r2, #0
 80138d2:	f04f 0300 	mov.w	r3, #0
 80138d6:	0882      	lsrs	r2, r0, #2
 80138d8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80138dc:	088b      	lsrs	r3, r1, #2
 80138de:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80138e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138e6:	2200      	movs	r2, #0
 80138e8:	653b      	str	r3, [r7, #80]	; 0x50
 80138ea:	657a      	str	r2, [r7, #84]	; 0x54
 80138ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80138f0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80138f4:	4622      	mov	r2, r4
 80138f6:	fb02 f203 	mul.w	r2, r2, r3
 80138fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80138fe:	4629      	mov	r1, r5
 8013900:	fb01 f303 	mul.w	r3, r1, r3
 8013904:	4413      	add	r3, r2
 8013906:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801390a:	4621      	mov	r1, r4
 801390c:	fba2 1201 	umull	r1, r2, r2, r1
 8013910:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013914:	460a      	mov	r2, r1
 8013916:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801391a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801391e:	4413      	add	r3, r2
 8013920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013924:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013928:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801392c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013930:	e03c      	b.n	80139ac <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013936:	2200      	movs	r2, #0
 8013938:	64bb      	str	r3, [r7, #72]	; 0x48
 801393a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801393c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013940:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013944:	4622      	mov	r2, r4
 8013946:	fb02 f203 	mul.w	r2, r2, r3
 801394a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801394e:	4629      	mov	r1, r5
 8013950:	fb01 f303 	mul.w	r3, r1, r3
 8013954:	4413      	add	r3, r2
 8013956:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801395a:	4621      	mov	r1, r4
 801395c:	fba2 1201 	umull	r1, r2, r2, r1
 8013960:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013964:	460a      	mov	r2, r1
 8013966:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801396a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801396e:	4413      	add	r3, r2
 8013970:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013974:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013978:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801397c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013980:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013984:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013988:	f7ec fc9a 	bl	80002c0 <__aeabi_uldivmod>
 801398c:	4602      	mov	r2, r0
 801398e:	460b      	mov	r3, r1
 8013990:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013994:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013998:	f04f 0200 	mov.w	r2, #0
 801399c:	f04f 0300 	mov.w	r3, #0
 80139a0:	0882      	lsrs	r2, r0, #2
 80139a2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80139a6:	088b      	lsrs	r3, r1, #2
 80139a8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80139ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	da05      	bge.n	80139c0 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 80139b4:	f04f 32ff 	mov.w	r2, #4294967295
 80139b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80139bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80139c0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139c4:	f04f 0200 	mov.w	r2, #0
 80139c8:	f04f 0300 	mov.w	r3, #0
 80139cc:	0882      	lsrs	r2, r0, #2
 80139ce:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80139d2:	088b      	lsrs	r3, r1, #2
 80139d4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80139d8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d305      	bcc.n	80139ec <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 80139e0:	f04f 32ff 	mov.w	r2, #4294967295
 80139e4:	f04f 0300 	mov.w	r3, #0
 80139e8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80139ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80139f0:	2200      	movs	r2, #0
 80139f2:	643b      	str	r3, [r7, #64]	; 0x40
 80139f4:	647a      	str	r2, [r7, #68]	; 0x44
 80139f6:	f04f 0200 	mov.w	r2, #0
 80139fa:	f04f 0300 	mov.w	r3, #0
 80139fe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013a02:	4629      	mov	r1, r5
 8013a04:	01cb      	lsls	r3, r1, #7
 8013a06:	4621      	mov	r1, r4
 8013a08:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	01ca      	lsls	r2, r1, #7
 8013a10:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013a14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013a18:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013a1c:	fb03 f202 	mul.w	r2, r3, r2
 8013a20:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013a24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013a28:	fb01 f303 	mul.w	r3, r1, r3
 8013a2c:	441a      	add	r2, r3
 8013a2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a32:	fba3 1303 	umull	r1, r3, r3, r3
 8013a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013a44:	18d3      	adds	r3, r2, r3
 8013a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013a4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013a4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013a52:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013a56:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a5a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a5e:	1884      	adds	r4, r0, r2
 8013a60:	603c      	str	r4, [r7, #0]
 8013a62:	eb41 0303 	adc.w	r3, r1, r3
 8013a66:	607b      	str	r3, [r7, #4]
 8013a68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013a6c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013a70:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d305      	bcc.n	8013a84 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013a78:	f04f 32ff 	mov.w	r2, #4294967295
 8013a7c:	f04f 0300 	mov.w	r3, #0
 8013a80:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013a84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7fa fdaa 	bl	800e5e2 <VL53L1_isqrt>
 8013a8e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013a9c:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013aa4:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013ab4 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b086      	sub	sp, #24
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013abc:	2300      	movs	r3, #0
 8013abe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	3318      	adds	r3, #24
 8013ac4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d107      	bne.n	8013ae2 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013ad2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f000 f88b 	bl	8013bf2 <VL53L1_poll_for_range_completion>
 8013adc:	4603      	mov	r3, r0
 8013ade:	75fb      	strb	r3, [r7, #23]
 8013ae0:	e01b      	b.n	8013b1a <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013ae6:	e011      	b.n	8013b0c <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013ae8:	f107 030f 	add.w	r3, r7, #15
 8013aec:	4619      	mov	r1, r3
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 f819 	bl	8013b26 <VL53L1_is_new_data_ready>
 8013af4:	4603      	mov	r3, r0
 8013af6:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d105      	bne.n	8013b0c <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013b00:	2101      	movs	r1, #1
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 fe6e 	bl	80147e4 <VL53L1_WaitMs>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013b0c:	7bfb      	ldrb	r3, [r7, #15]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d103      	bne.n	8013b1a <VL53L1_wait_for_test_completion+0x66>
 8013b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d0e6      	beq.n	8013ae8 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3718      	adds	r7, #24
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b086      	sub	sp, #24
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013b30:	2300      	movs	r3, #0
 8013b32:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	3318      	adds	r3, #24
 8013b38:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013b42:	2300      	movs	r3, #0
 8013b44:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013b4c:	f003 0310 	and.w	r3, r3, #16
 8013b50:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013b52:	7bfb      	ldrb	r3, [r7, #15]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d102      	bne.n	8013b5e <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	75fb      	strb	r3, [r7, #23]
 8013b5c:	e001      	b.n	8013b62 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013b62:	f107 030e 	add.w	r3, r7, #14
 8013b66:	461a      	mov	r2, r3
 8013b68:	2131      	movs	r1, #49	; 0x31
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 fdb2 	bl	80146d4 <VL53L1_RdByte>
 8013b70:	4603      	mov	r3, r0
 8013b72:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013b74:	7bbb      	ldrb	r3, [r7, #14]
 8013b76:	f003 0201 	and.w	r2, r3, #1
 8013b7a:	7dfb      	ldrb	r3, [r7, #23]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d103      	bne.n	8013b88 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	2201      	movs	r2, #1
 8013b84:	701a      	strb	r2, [r3, #0]
 8013b86:	e002      	b.n	8013b8e <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013b8e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b086      	sub	sp, #24
 8013b9e:	af02      	add	r7, sp, #8
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013ba8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f000 fe29 	bl	8014804 <VL53L1_WaitUs>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d10b      	bne.n	8013bd6 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	22e5      	movs	r2, #229	; 0xe5
 8013bca:	6839      	ldr	r1, [r7, #0]
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f000 fe31 	bl	8014834 <VL53L1_WaitValueMaskEx>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d103      	bne.n	8013be6 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013bde:	2103      	movs	r1, #3
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7f6 fc38 	bl	800a456 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b088      	sub	sp, #32
 8013bf6:	af02      	add	r7, sp, #8
 8013bf8:	6078      	str	r0, [r7, #4]
 8013bfa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	3318      	adds	r3, #24
 8013c04:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013c06:	2300      	movs	r3, #0
 8013c08:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013c14:	f003 0310 	and.w	r3, r3, #16
 8013c18:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013c1a:	7bfb      	ldrb	r3, [r7, #15]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d102      	bne.n	8013c26 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013c20:	2301      	movs	r3, #1
 8013c22:	75fb      	strb	r3, [r7, #23]
 8013c24:	e001      	b.n	8013c2a <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013c26:	2300      	movs	r3, #0
 8013c28:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	9201      	str	r2, [sp, #4]
 8013c30:	2201      	movs	r2, #1
 8013c32:	9200      	str	r2, [sp, #0]
 8013c34:	2231      	movs	r2, #49	; 0x31
 8013c36:	6839      	ldr	r1, [r7, #0]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f000 fdfb 	bl	8014834 <VL53L1_WaitValueMaskEx>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013c42:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3718      	adds	r7, #24
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013c4e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c52:	b0c0      	sub	sp, #256	; 0x100
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013c62:	4613      	mov	r3, r2
 8013c64:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013c68:	4603      	mov	r3, r0
 8013c6a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013c86:	2300      	movs	r3, #0
 8013c88:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013c98:	f04f 0200 	mov.w	r2, #0
 8013c9c:	f04f 0300 	mov.w	r3, #0
 8013ca0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013ca4:	f04f 0200 	mov.w	r2, #0
 8013ca8:	f04f 0300 	mov.w	r3, #0
 8013cac:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013cb0:	f04f 0200 	mov.w	r2, #0
 8013cb4:	f04f 0300 	mov.w	r3, #0
 8013cb8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013cbc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d108      	bne.n	8013cd6 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013cc4:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013cc8:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013ccc:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fb f867 	bl	800eda4 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013cd6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d165      	bne.n	8013daa <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013cde:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ce2:	091b      	lsrs	r3, r3, #4
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d00e      	beq.n	8013d0c <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013cee:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013cf8:	095b      	lsrs	r3, r3, #5
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	3b01      	subs	r3, #1
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013d0a:	e00b      	b.n	8013d24 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013d0c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d16:	095b      	lsrs	r3, r3, #5
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013d24:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013d28:	b29a      	uxth	r2, r3
 8013d2a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d2e:	095b      	lsrs	r3, r3, #5
 8013d30:	b2db      	uxtb	r3, r3
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4413      	add	r3, r2
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8013d3c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d40:	f003 0301 	and.w	r3, r3, #1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d011      	beq.n	8013d6c <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013d48:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d4c:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8013d4e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d52:	f003 020f 	and.w	r2, r3, #15
 8013d56:	0fd3      	lsrs	r3, r2, #31
 8013d58:	4413      	add	r3, r2
 8013d5a:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	1acb      	subs	r3, r1, r3
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	3b01      	subs	r3, #1
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8013d6a:	e00f      	b.n	8013d8c <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8013d6c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d70:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013d72:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d76:	f003 020f 	and.w	r2, r3, #15
 8013d7a:	0fd3      	lsrs	r3, r2, #31
 8013d7c:	4413      	add	r3, r2
 8013d7e:	105b      	asrs	r3, r3, #1
 8013d80:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	440b      	add	r3, r1
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8013d8c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013d90:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8013d92:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013d96:	f003 020f 	and.w	r2, r3, #15
 8013d9a:	0fd3      	lsrs	r3, r2, #31
 8013d9c:	4413      	add	r3, r2
 8013d9e:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	440b      	add	r3, r1
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013daa:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d133      	bne.n	8013e1a <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013db2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013dbc:	4413      	add	r3, r2
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	3b0f      	subs	r3, #15
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8013dcc:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8013dd6:	4413      	add	r3, r2
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	3b0f      	subs	r3, #15
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8013de6:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013df0:	4413      	add	r3, r2
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	005b      	lsls	r3, r3, #1
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	3b0f      	subs	r3, #15
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013e00:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013e0a:	4413      	add	r3, r2
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	005b      	lsls	r3, r3, #1
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	3b0f      	subs	r3, #15
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013e1a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	f040 8135 	bne.w	801408e <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013e24:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013e28:	17da      	asrs	r2, r3, #31
 8013e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013e2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e32:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013e36:	17da      	asrs	r2, r3, #31
 8013e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013e40:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013e44:	460b      	mov	r3, r1
 8013e46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013e4a:	fb02 f203 	mul.w	r2, r2, r3
 8013e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013e52:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013e56:	4601      	mov	r1, r0
 8013e58:	fb01 f303 	mul.w	r3, r1, r3
 8013e5c:	4413      	add	r3, r2
 8013e5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013e62:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013e66:	fba2 4501 	umull	r4, r5, r2, r1
 8013e6a:	442b      	add	r3, r5
 8013e6c:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e6e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013e72:	17da      	asrs	r2, r3, #31
 8013e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013e78:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013e7c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013e80:	17da      	asrs	r2, r3, #31
 8013e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013e86:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013e94:	fb02 f203 	mul.w	r2, r2, r3
 8013e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013e9c:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8013ea0:	4601      	mov	r1, r0
 8013ea2:	fb01 f303 	mul.w	r3, r1, r3
 8013ea6:	4413      	add	r3, r2
 8013ea8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013eac:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013eb0:	fba2 8901 	umull	r8, r9, r2, r1
 8013eb4:	444b      	add	r3, r9
 8013eb6:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013eb8:	eb14 0308 	adds.w	r3, r4, r8
 8013ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ebe:	eb45 0309 	adc.w	r3, r5, r9
 8013ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ec4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013ec8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8013ecc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013ed0:	1c51      	adds	r1, r2, #1
 8013ed2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013ed6:	f143 0300 	adc.w	r3, r3, #0
 8013eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013ede:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	0fdb      	lsrs	r3, r3, #31
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8013eea:	647a      	str	r2, [r7, #68]	; 0x44
 8013eec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013ef0:	4623      	mov	r3, r4
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	189b      	adds	r3, r3, r2
 8013ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ef8:	460b      	mov	r3, r1
 8013efa:	462a      	mov	r2, r5
 8013efc:	eb42 0303 	adc.w	r3, r2, r3
 8013f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f02:	f04f 0200 	mov.w	r2, #0
 8013f06:	f04f 0300 	mov.w	r3, #0
 8013f0a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8013f0e:	4621      	mov	r1, r4
 8013f10:	084a      	lsrs	r2, r1, #1
 8013f12:	4629      	mov	r1, r5
 8013f14:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013f18:	4629      	mov	r1, r5
 8013f1a:	104b      	asrs	r3, r1, #1
 8013f1c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8013f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f24:	2200      	movs	r2, #0
 8013f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013f2e:	f04f 0000 	mov.w	r0, #0
 8013f32:	f04f 0100 	mov.w	r1, #0
 8013f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013f3a:	462b      	mov	r3, r5
 8013f3c:	0099      	lsls	r1, r3, #2
 8013f3e:	4623      	mov	r3, r4
 8013f40:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8013f44:	4623      	mov	r3, r4
 8013f46:	0098      	lsls	r0, r3, #2
 8013f48:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013f4c:	1814      	adds	r4, r2, r0
 8013f4e:	633c      	str	r4, [r7, #48]	; 0x30
 8013f50:	414b      	adcs	r3, r1
 8013f52:	637b      	str	r3, [r7, #52]	; 0x34
 8013f54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013f58:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013f5c:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8013f60:	17da      	asrs	r2, r3, #31
 8013f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013f66:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013f6a:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013f6e:	17da      	asrs	r2, r3, #31
 8013f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013f74:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013f78:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013f7c:	462b      	mov	r3, r5
 8013f7e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8013f82:	4642      	mov	r2, r8
 8013f84:	fb02 f203 	mul.w	r2, r2, r3
 8013f88:	464b      	mov	r3, r9
 8013f8a:	4621      	mov	r1, r4
 8013f8c:	fb01 f303 	mul.w	r3, r1, r3
 8013f90:	4413      	add	r3, r2
 8013f92:	4622      	mov	r2, r4
 8013f94:	4641      	mov	r1, r8
 8013f96:	fba2 ab01 	umull	sl, fp, r2, r1
 8013f9a:	445b      	add	r3, fp
 8013f9c:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013f9e:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8013fa2:	17da      	asrs	r2, r3, #31
 8013fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8013fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8013fa8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013fac:	17da      	asrs	r2, r3, #31
 8013fae:	673b      	str	r3, [r7, #112]	; 0x70
 8013fb0:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013fb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8013fb6:	462b      	mov	r3, r5
 8013fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013fbc:	4642      	mov	r2, r8
 8013fbe:	fb02 f203 	mul.w	r2, r2, r3
 8013fc2:	464b      	mov	r3, r9
 8013fc4:	4621      	mov	r1, r4
 8013fc6:	fb01 f303 	mul.w	r3, r1, r3
 8013fca:	4413      	add	r3, r2
 8013fcc:	4622      	mov	r2, r4
 8013fce:	4641      	mov	r1, r8
 8013fd0:	fba2 1201 	umull	r1, r2, r2, r1
 8013fd4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013fd8:	460a      	mov	r2, r1
 8013fda:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013fde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013fe2:	4413      	add	r3, r2
 8013fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013fe8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8013fec:	460b      	mov	r3, r1
 8013fee:	eb1a 0303 	adds.w	r3, sl, r3
 8013ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	eb4b 0303 	adc.w	r3, fp, r3
 8013ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ffc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8014000:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8014004:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014008:	1c51      	adds	r1, r2, #1
 801400a:	66b9      	str	r1, [r7, #104]	; 0x68
 801400c:	f143 0300 	adc.w	r3, r3, #0
 8014010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014016:	460b      	mov	r3, r1
 8014018:	0fdb      	lsrs	r3, r3, #31
 801401a:	2200      	movs	r2, #0
 801401c:	623b      	str	r3, [r7, #32]
 801401e:	627a      	str	r2, [r7, #36]	; 0x24
 8014020:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014024:	4623      	mov	r3, r4
 8014026:	4602      	mov	r2, r0
 8014028:	189b      	adds	r3, r3, r2
 801402a:	61bb      	str	r3, [r7, #24]
 801402c:	460b      	mov	r3, r1
 801402e:	462a      	mov	r2, r5
 8014030:	eb42 0303 	adc.w	r3, r2, r3
 8014034:	61fb      	str	r3, [r7, #28]
 8014036:	f04f 0200 	mov.w	r2, #0
 801403a:	f04f 0300 	mov.w	r3, #0
 801403e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014042:	4621      	mov	r1, r4
 8014044:	084a      	lsrs	r2, r1, #1
 8014046:	4629      	mov	r1, r5
 8014048:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801404c:	4629      	mov	r1, r5
 801404e:	104b      	asrs	r3, r1, #1
 8014050:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014058:	2200      	movs	r2, #0
 801405a:	663b      	str	r3, [r7, #96]	; 0x60
 801405c:	667a      	str	r2, [r7, #100]	; 0x64
 801405e:	f04f 0200 	mov.w	r2, #0
 8014062:	f04f 0300 	mov.w	r3, #0
 8014066:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801406a:	4629      	mov	r1, r5
 801406c:	008b      	lsls	r3, r1, #2
 801406e:	4621      	mov	r1, r4
 8014070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014074:	4621      	mov	r1, r4
 8014076:	008a      	lsls	r2, r1, #2
 8014078:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801407c:	1884      	adds	r4, r0, r2
 801407e:	613c      	str	r4, [r7, #16]
 8014080:	eb41 0303 	adc.w	r3, r1, r3
 8014084:	617b      	str	r3, [r7, #20]
 8014086:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801408a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801408e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014092:	2b00      	cmp	r3, #0
 8014094:	d132      	bne.n	80140fc <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8014096:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 801409a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801409e:	1884      	adds	r4, r0, r2
 80140a0:	65bc      	str	r4, [r7, #88]	; 0x58
 80140a2:	eb41 0303 	adc.w	r3, r1, r3
 80140a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80140a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80140ac:	460b      	mov	r3, r1
 80140ae:	3301      	adds	r3, #1
 80140b0:	653b      	str	r3, [r7, #80]	; 0x50
 80140b2:	4613      	mov	r3, r2
 80140b4:	f143 0300 	adc.w	r3, r3, #0
 80140b8:	657b      	str	r3, [r7, #84]	; 0x54
 80140ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80140be:	460b      	mov	r3, r1
 80140c0:	0fdb      	lsrs	r3, r3, #31
 80140c2:	2200      	movs	r2, #0
 80140c4:	60bb      	str	r3, [r7, #8]
 80140c6:	60fa      	str	r2, [r7, #12]
 80140c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80140cc:	4623      	mov	r3, r4
 80140ce:	4602      	mov	r2, r0
 80140d0:	189b      	adds	r3, r3, r2
 80140d2:	603b      	str	r3, [r7, #0]
 80140d4:	460b      	mov	r3, r1
 80140d6:	462a      	mov	r2, r5
 80140d8:	eb42 0303 	adc.w	r3, r2, r3
 80140dc:	607b      	str	r3, [r7, #4]
 80140de:	f04f 0200 	mov.w	r2, #0
 80140e2:	f04f 0300 	mov.w	r3, #0
 80140e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80140ea:	4621      	mov	r1, r4
 80140ec:	084a      	lsrs	r2, r1, #1
 80140ee:	4629      	mov	r1, r5
 80140f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80140f4:	4629      	mov	r1, r5
 80140f6:	104b      	asrs	r3, r1, #1
 80140f8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 80140fc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014100:	2b00      	cmp	r3, #0
 8014102:	d109      	bne.n	8014118 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8014104:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8014108:	2b00      	cmp	r3, #0
 801410a:	da05      	bge.n	8014118 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 801410c:	f04f 0200 	mov.w	r2, #0
 8014110:	f04f 0300 	mov.w	r3, #0
 8014114:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8014118:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801411c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014120:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8014122:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8014126:	4618      	mov	r0, r3
 8014128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801412c:	46bd      	mov	sp, r7
 801412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014132 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8014132:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014136:	b09a      	sub	sp, #104	; 0x68
 8014138:	af00      	add	r7, sp, #0
 801413a:	6478      	str	r0, [r7, #68]	; 0x44
 801413c:	6439      	str	r1, [r7, #64]	; 0x40
 801413e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014140:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8014142:	2300      	movs	r3, #0
 8014144:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8014148:	f04f 0200 	mov.w	r2, #0
 801414c:	f04f 0300 	mov.w	r3, #0
 8014150:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014154:	f04f 0200 	mov.w	r2, #0
 8014158:	f04f 0300 	mov.w	r3, #0
 801415c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8014160:	f04f 0200 	mov.w	r2, #0
 8014164:	f04f 0300 	mov.w	r3, #0
 8014168:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 801416c:	2300      	movs	r3, #0
 801416e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8014172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014174:	2200      	movs	r2, #0
 8014176:	633b      	str	r3, [r7, #48]	; 0x30
 8014178:	637a      	str	r2, [r7, #52]	; 0x34
 801417a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014180:	2200      	movs	r2, #0
 8014182:	62bb      	str	r3, [r7, #40]	; 0x28
 8014184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014186:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801418a:	460b      	mov	r3, r1
 801418c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801418e:	fb02 f203 	mul.w	r2, r2, r3
 8014192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014194:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8014198:	4601      	mov	r1, r0
 801419a:	fb01 f303 	mul.w	r3, r1, r3
 801419e:	4413      	add	r3, r2
 80141a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80141a4:	fba2 4501 	umull	r4, r5, r2, r1
 80141a8:	442b      	add	r3, r5
 80141aa:	461d      	mov	r5, r3
 80141ac:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80141b0:	623b      	str	r3, [r7, #32]
 80141b2:	f145 0300 	adc.w	r3, r5, #0
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24
 80141b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141bc:	f04f 0300 	mov.w	r3, #0
 80141c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80141c4:	f7ec f87c 	bl	80002c0 <__aeabi_uldivmod>
 80141c8:	4602      	mov	r2, r0
 80141ca:	460b      	mov	r3, r1
 80141cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80141d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141d2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	2200      	movs	r2, #0
 80141da:	61bb      	str	r3, [r7, #24]
 80141dc:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80141de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141e0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80141e4:	4622      	mov	r2, r4
 80141e6:	fb02 f203 	mul.w	r2, r2, r3
 80141ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141ec:	4629      	mov	r1, r5
 80141ee:	fb01 f303 	mul.w	r3, r1, r3
 80141f2:	4413      	add	r3, r2
 80141f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141f6:	4621      	mov	r1, r4
 80141f8:	fba2 ab01 	umull	sl, fp, r2, r1
 80141fc:	445b      	add	r3, fp
 80141fe:	469b      	mov	fp, r3
 8014200:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8014204:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8014208:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801420c:	f04f 0200 	mov.w	r2, #0
 8014210:	f04f 0300 	mov.w	r3, #0
 8014214:	0a02      	lsrs	r2, r0, #8
 8014216:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801421a:	0a0b      	lsrs	r3, r1, #8
 801421c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8014220:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014224:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8014228:	6139      	str	r1, [r7, #16]
 801422a:	f143 0300 	adc.w	r3, r3, #0
 801422e:	617b      	str	r3, [r7, #20]
 8014230:	f04f 0200 	mov.w	r2, #0
 8014234:	f04f 0300 	mov.w	r3, #0
 8014238:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801423c:	4621      	mov	r1, r4
 801423e:	0aca      	lsrs	r2, r1, #11
 8014240:	4629      	mov	r1, r5
 8014242:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8014246:	4629      	mov	r1, r5
 8014248:	0acb      	lsrs	r3, r1, #11
 801424a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801424e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014252:	2b01      	cmp	r3, #1
 8014254:	d305      	bcc.n	8014262 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8014256:	f04f 32ff 	mov.w	r2, #4294967295
 801425a:	f04f 0300 	mov.w	r3, #0
 801425e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014262:	2300      	movs	r3, #0
 8014264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014268:	e041      	b.n	80142ee <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801426a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801426e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014270:	3302      	adds	r3, #2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4413      	add	r3, r2
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	60bb      	str	r3, [r7, #8]
 801427c:	60fa      	str	r2, [r7, #12]
 801427e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014280:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014284:	4622      	mov	r2, r4
 8014286:	fb02 f203 	mul.w	r2, r2, r3
 801428a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801428c:	4629      	mov	r1, r5
 801428e:	fb01 f303 	mul.w	r3, r1, r3
 8014292:	4413      	add	r3, r2
 8014294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014296:	4621      	mov	r1, r4
 8014298:	fba2 8901 	umull	r8, r9, r2, r1
 801429c:	444b      	add	r3, r9
 801429e:	4699      	mov	r9, r3
 80142a0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80142a4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80142a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80142ac:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80142b0:	6039      	str	r1, [r7, #0]
 80142b2:	f143 0300 	adc.w	r3, r3, #0
 80142b6:	607b      	str	r3, [r7, #4]
 80142b8:	f04f 0200 	mov.w	r2, #0
 80142bc:	f04f 0300 	mov.w	r3, #0
 80142c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80142c4:	4621      	mov	r1, r4
 80142c6:	0a8a      	lsrs	r2, r1, #10
 80142c8:	4629      	mov	r1, r5
 80142ca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80142ce:	4629      	mov	r1, r5
 80142d0:	0a8b      	lsrs	r3, r1, #10
 80142d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80142d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80142da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80142dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142de:	3206      	adds	r2, #6
 80142e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80142e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142e8:	3301      	adds	r3, #1
 80142ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80142ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f0:	7a9b      	ldrb	r3, [r3, #10]
 80142f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d3b7      	bcc.n	801426a <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80142fa:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3768      	adds	r7, #104	; 0x68
 8014302:	46bd      	mov	sp, r7
 8014304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014308 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8014308:	b590      	push	{r4, r7, lr}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	4604      	mov	r4, r0
 8014310:	4608      	mov	r0, r1
 8014312:	4611      	mov	r1, r2
 8014314:	461a      	mov	r2, r3
 8014316:	4623      	mov	r3, r4
 8014318:	71fb      	strb	r3, [r7, #7]
 801431a:	4603      	mov	r3, r0
 801431c:	71bb      	strb	r3, [r7, #6]
 801431e:	460b      	mov	r3, r1
 8014320:	717b      	strb	r3, [r7, #5]
 8014322:	4613      	mov	r3, r2
 8014324:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014326:	2300      	movs	r3, #0
 8014328:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 801432a:	2300      	movs	r3, #0
 801432c:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 801432e:	2300      	movs	r3, #0
 8014330:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8014332:	2300      	movs	r3, #0
 8014334:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8014336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014338:	2210      	movs	r2, #16
 801433a:	701a      	strb	r2, [r3, #0]

	i = 0;
 801433c:	2300      	movs	r3, #0
 801433e:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8014340:	2300      	movs	r3, #0
 8014342:	73fb      	strb	r3, [r7, #15]
 8014344:	e046      	b.n	80143d4 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8014346:	2300      	movs	r3, #0
 8014348:	73bb      	strb	r3, [r7, #14]
 801434a:	e03b      	b.n	80143c4 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 801434c:	89bb      	ldrh	r3, [r7, #12]
 801434e:	2b0f      	cmp	r3, #15
 8014350:	d832      	bhi.n	80143b8 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8014352:	89bb      	ldrh	r3, [r7, #12]
 8014354:	b2da      	uxtb	r2, r3
 8014356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014358:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 801435a:	89bb      	ldrh	r3, [r7, #12]
 801435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801435e:	3306      	adds	r3, #6
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	4413      	add	r3, r2
 8014364:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014368:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 801436a:	89bb      	ldrh	r3, [r7, #12]
 801436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801436e:	3306      	adds	r3, #6
 8014370:	009b      	lsls	r3, r3, #2
 8014372:	4413      	add	r3, r2
 8014374:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014378:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 801437a:	7bfa      	ldrb	r2, [r7, #15]
 801437c:	79bb      	ldrb	r3, [r7, #6]
 801437e:	fb12 f303 	smulbb	r3, r2, r3
 8014382:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8014384:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8014386:	79fa      	ldrb	r2, [r7, #7]
 8014388:	440a      	add	r2, r1
 801438a:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 801438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801438e:	3306      	adds	r3, #6
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	4413      	add	r3, r2
 8014394:	460a      	mov	r2, r1
 8014396:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8014398:	7bba      	ldrb	r2, [r7, #14]
 801439a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801439e:	fb12 f303 	smulbb	r3, r2, r3
 80143a2:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 80143a4:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 80143a6:	793a      	ldrb	r2, [r7, #4]
 80143a8:	440a      	add	r2, r1
 80143aa:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80143ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143ae:	3306      	adds	r3, #6
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	4413      	add	r3, r2
 80143b4:	460a      	mov	r2, r1
 80143b6:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80143b8:	89bb      	ldrh	r3, [r7, #12]
 80143ba:	3301      	adds	r3, #1
 80143bc:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80143be:	7bbb      	ldrb	r3, [r7, #14]
 80143c0:	3301      	adds	r3, #1
 80143c2:	73bb      	strb	r3, [r7, #14]
 80143c4:	7bba      	ldrb	r2, [r7, #14]
 80143c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d3be      	bcc.n	801434c <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
 80143d0:	3301      	adds	r3, #1
 80143d2:	73fb      	strb	r3, [r7, #15]
 80143d4:	7bfa      	ldrb	r2, [r7, #15]
 80143d6:	797b      	ldrb	r3, [r7, #5]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d3b4      	bcc.n	8014346 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80143dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143de:	f000 f86c 	bl	80144ba <VL53L1_init_zone_config_histogram_bins>
 80143e2:	4603      	mov	r3, r0
 80143e4:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80143e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3714      	adds	r7, #20
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd90      	pop	{r4, r7, pc}

080143f2 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b084      	sub	sp, #16
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80143fc:	2300      	movs	r3, #0
 80143fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2205      	movs	r2, #5
 8014404:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	2204      	movs	r2, #4
 801440a:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	220f      	movs	r2, #15
 8014410:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	2207      	movs	r2, #7
 8014416:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	2204      	movs	r2, #4
 801441c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	2208      	movs	r2, #8
 8014422:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	220f      	movs	r2, #15
 8014428:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	2207      	movs	r2, #7
 8014430:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	220c      	movs	r2, #12
 8014438:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	2208      	movs	r2, #8
 8014440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2207      	movs	r2, #7
 8014448:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	220f      	movs	r2, #15
 8014450:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2208      	movs	r2, #8
 8014458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2204      	movs	r2, #4
 8014460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	2207      	movs	r2, #7
 8014468:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	220f      	movs	r2, #15
 8014470:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	2208      	movs	r2, #8
 8014478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	220c      	movs	r2, #12
 8014480:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014484:	683b      	ldr	r3, [r7, #0]
 8014486:	220f      	movs	r2, #15
 8014488:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	220f      	movs	r2, #15
 8014490:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	2208      	movs	r2, #8
 8014498:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	2208      	movs	r2, #8
 80144a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80144a4:	6838      	ldr	r0, [r7, #0]
 80144a6:	f000 f808 	bl	80144ba <VL53L1_init_zone_config_histogram_bins>
 80144aa:	4603      	mov	r3, r0
 80144ac:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80144ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80144ba:	b480      	push	{r7}
 80144bc:	b085      	sub	sp, #20
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80144c2:	2300      	movs	r3, #0
 80144c4:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80144c6:	2300      	movs	r3, #0
 80144c8:	73fb      	strb	r3, [r7, #15]
 80144ca:	e008      	b.n	80144de <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80144cc:	7bfb      	ldrb	r3, [r7, #15]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	4413      	add	r3, r2
 80144d2:	2201      	movs	r2, #1
 80144d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80144d8:	7bfb      	ldrb	r3, [r7, #15]
 80144da:	3301      	adds	r3, #1
 80144dc:	73fb      	strb	r3, [r7, #15]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	7bfa      	ldrb	r2, [r7, #15]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d3f1      	bcc.n	80144cc <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80144e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3714      	adds	r7, #20
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	8910      	ldrh	r0, [r2, #8]
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	b292      	uxth	r2, r2
 8014510:	68b9      	ldr	r1, [r7, #8]
 8014512:	4798      	blx	r3
 8014514:	4603      	mov	r3, r0
}
 8014516:	4618      	mov	r0, r3
 8014518:	3710      	adds	r7, #16
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801451e:	b580      	push	{r7, lr}
 8014520:	b084      	sub	sp, #16
 8014522:	af00      	add	r7, sp, #0
 8014524:	60f8      	str	r0, [r7, #12]
 8014526:	60b9      	str	r1, [r7, #8]
 8014528:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	691b      	ldr	r3, [r3, #16]
 801452e:	68fa      	ldr	r2, [r7, #12]
 8014530:	8910      	ldrh	r0, [r2, #8]
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	b292      	uxth	r2, r2
 8014536:	68b9      	ldr	r1, [r7, #8]
 8014538:	4798      	blx	r3
 801453a:	4603      	mov	r3, r0
}
 801453c:	4618      	mov	r0, r3
 801453e:	3710      	adds	r7, #16
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	607a      	str	r2, [r7, #4]
 801454e:	603b      	str	r3, [r7, #0]
 8014550:	460b      	mov	r3, r1
 8014552:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014554:	2300      	movs	r3, #0
 8014556:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	2bff      	cmp	r3, #255	; 0xff
 801455c:	d902      	bls.n	8014564 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801455e:	f06f 0303 	mvn.w	r3, #3
 8014562:	e01d      	b.n	80145a0 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014564:	897b      	ldrh	r3, [r7, #10]
 8014566:	0a1b      	lsrs	r3, r3, #8
 8014568:	b29b      	uxth	r3, r3
 801456a:	b2da      	uxtb	r2, r3
 801456c:	4b0e      	ldr	r3, [pc, #56]	; (80145a8 <VL53L1_WriteMulti+0x64>)
 801456e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014570:	897b      	ldrh	r3, [r7, #10]
 8014572:	b2da      	uxtb	r2, r3
 8014574:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <VL53L1_WriteMulti+0x64>)
 8014576:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8014578:	683a      	ldr	r2, [r7, #0]
 801457a:	6879      	ldr	r1, [r7, #4]
 801457c:	480b      	ldr	r0, [pc, #44]	; (80145ac <VL53L1_WriteMulti+0x68>)
 801457e:	f004 ffa5 	bl	80194cc <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	3302      	adds	r3, #2
 8014586:	461a      	mov	r2, r3
 8014588:	4907      	ldr	r1, [pc, #28]	; (80145a8 <VL53L1_WriteMulti+0x64>)
 801458a:	68f8      	ldr	r0, [r7, #12]
 801458c:	f7ff ffb4 	bl	80144f8 <_I2CWrite>
 8014590:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014598:	23f3      	movs	r3, #243	; 0xf3
 801459a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 801459c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3718      	adds	r7, #24
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20008518 	.word	0x20008518
 80145ac:	2000851a 	.word	0x2000851a

080145b0 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	607a      	str	r2, [r7, #4]
 80145ba:	603b      	str	r3, [r7, #0]
 80145bc:	460b      	mov	r3, r1
 80145be:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80145c0:	2300      	movs	r3, #0
 80145c2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80145c4:	897b      	ldrh	r3, [r7, #10]
 80145c6:	0a1b      	lsrs	r3, r3, #8
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	b2da      	uxtb	r2, r3
 80145cc:	4b12      	ldr	r3, [pc, #72]	; (8014618 <VL53L1_ReadMulti+0x68>)
 80145ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80145d0:	897b      	ldrh	r3, [r7, #10]
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	4b10      	ldr	r3, [pc, #64]	; (8014618 <VL53L1_ReadMulti+0x68>)
 80145d6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80145d8:	2202      	movs	r2, #2
 80145da:	490f      	ldr	r1, [pc, #60]	; (8014618 <VL53L1_ReadMulti+0x68>)
 80145dc:	68f8      	ldr	r0, [r7, #12]
 80145de:	f7ff ff8b 	bl	80144f8 <_I2CWrite>
 80145e2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d002      	beq.n	80145f0 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80145ea:	23f3      	movs	r3, #243	; 0xf3
 80145ec:	75fb      	strb	r3, [r7, #23]
        goto done;
 80145ee:	e00c      	b.n	801460a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80145f0:	683a      	ldr	r2, [r7, #0]
 80145f2:	6879      	ldr	r1, [r7, #4]
 80145f4:	68f8      	ldr	r0, [r7, #12]
 80145f6:	f7ff ff92 	bl	801451e <_I2CRead>
 80145fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d002      	beq.n	8014608 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014602:	23f3      	movs	r3, #243	; 0xf3
 8014604:	75fb      	strb	r3, [r7, #23]
 8014606:	e000      	b.n	801460a <VL53L1_ReadMulti+0x5a>
    }
done:
 8014608:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801460a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801460e:	4618      	mov	r0, r3
 8014610:	3718      	adds	r7, #24
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	20008518 	.word	0x20008518

0801461c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 801461c:	b580      	push	{r7, lr}
 801461e:	b084      	sub	sp, #16
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	460b      	mov	r3, r1
 8014626:	807b      	strh	r3, [r7, #2]
 8014628:	4613      	mov	r3, r2
 801462a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801462c:	2300      	movs	r3, #0
 801462e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014630:	887b      	ldrh	r3, [r7, #2]
 8014632:	0a1b      	lsrs	r3, r3, #8
 8014634:	b29b      	uxth	r3, r3
 8014636:	b2da      	uxtb	r2, r3
 8014638:	4b0c      	ldr	r3, [pc, #48]	; (801466c <VL53L1_WrByte+0x50>)
 801463a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801463c:	887b      	ldrh	r3, [r7, #2]
 801463e:	b2da      	uxtb	r2, r3
 8014640:	4b0a      	ldr	r3, [pc, #40]	; (801466c <VL53L1_WrByte+0x50>)
 8014642:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014644:	4a09      	ldr	r2, [pc, #36]	; (801466c <VL53L1_WrByte+0x50>)
 8014646:	787b      	ldrb	r3, [r7, #1]
 8014648:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801464a:	2203      	movs	r2, #3
 801464c:	4907      	ldr	r1, [pc, #28]	; (801466c <VL53L1_WrByte+0x50>)
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ff ff52 	bl	80144f8 <_I2CWrite>
 8014654:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d001      	beq.n	8014660 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801465c:	23f3      	movs	r3, #243	; 0xf3
 801465e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014664:	4618      	mov	r0, r3
 8014666:	3710      	adds	r7, #16
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}
 801466c:	20008518 	.word	0x20008518

08014670 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8014670:	b580      	push	{r7, lr}
 8014672:	b084      	sub	sp, #16
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	460b      	mov	r3, r1
 801467a:	807b      	strh	r3, [r7, #2]
 801467c:	4613      	mov	r3, r2
 801467e:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014680:	2300      	movs	r3, #0
 8014682:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014684:	887b      	ldrh	r3, [r7, #2]
 8014686:	0a1b      	lsrs	r3, r3, #8
 8014688:	b29b      	uxth	r3, r3
 801468a:	b2da      	uxtb	r2, r3
 801468c:	4b10      	ldr	r3, [pc, #64]	; (80146d0 <VL53L1_WrWord+0x60>)
 801468e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014690:	887b      	ldrh	r3, [r7, #2]
 8014692:	b2da      	uxtb	r2, r3
 8014694:	4b0e      	ldr	r3, [pc, #56]	; (80146d0 <VL53L1_WrWord+0x60>)
 8014696:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8014698:	883b      	ldrh	r3, [r7, #0]
 801469a:	0a1b      	lsrs	r3, r3, #8
 801469c:	b29b      	uxth	r3, r3
 801469e:	b2da      	uxtb	r2, r3
 80146a0:	4b0b      	ldr	r3, [pc, #44]	; (80146d0 <VL53L1_WrWord+0x60>)
 80146a2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80146a4:	883b      	ldrh	r3, [r7, #0]
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <VL53L1_WrWord+0x60>)
 80146aa:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80146ac:	2204      	movs	r2, #4
 80146ae:	4908      	ldr	r1, [pc, #32]	; (80146d0 <VL53L1_WrWord+0x60>)
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f7ff ff21 	bl	80144f8 <_I2CWrite>
 80146b6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80146be:	23f3      	movs	r3, #243	; 0xf3
 80146c0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80146c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3710      	adds	r7, #16
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	20008518 	.word	0x20008518

080146d4 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	460b      	mov	r3, r1
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80146e6:	897b      	ldrh	r3, [r7, #10]
 80146e8:	0a1b      	lsrs	r3, r3, #8
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	b2da      	uxtb	r2, r3
 80146ee:	4b12      	ldr	r3, [pc, #72]	; (8014738 <VL53L1_RdByte+0x64>)
 80146f0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80146f2:	897b      	ldrh	r3, [r7, #10]
 80146f4:	b2da      	uxtb	r2, r3
 80146f6:	4b10      	ldr	r3, [pc, #64]	; (8014738 <VL53L1_RdByte+0x64>)
 80146f8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80146fa:	2202      	movs	r2, #2
 80146fc:	490e      	ldr	r1, [pc, #56]	; (8014738 <VL53L1_RdByte+0x64>)
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	f7ff fefa 	bl	80144f8 <_I2CWrite>
 8014704:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d002      	beq.n	8014712 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801470c:	23f3      	movs	r3, #243	; 0xf3
 801470e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014710:	e00c      	b.n	801472c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014712:	2201      	movs	r2, #1
 8014714:	6879      	ldr	r1, [r7, #4]
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	f7ff ff01 	bl	801451e <_I2CRead>
 801471c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d002      	beq.n	801472a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014724:	23f3      	movs	r3, #243	; 0xf3
 8014726:	75fb      	strb	r3, [r7, #23]
 8014728:	e000      	b.n	801472c <VL53L1_RdByte+0x58>
    }
done:
 801472a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801472c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3718      	adds	r7, #24
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	20008518 	.word	0x20008518

0801473c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	460b      	mov	r3, r1
 8014746:	607a      	str	r2, [r7, #4]
 8014748:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801474a:	2300      	movs	r3, #0
 801474c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801474e:	897b      	ldrh	r3, [r7, #10]
 8014750:	0a1b      	lsrs	r3, r3, #8
 8014752:	b29b      	uxth	r3, r3
 8014754:	b2da      	uxtb	r2, r3
 8014756:	4b18      	ldr	r3, [pc, #96]	; (80147b8 <VL53L1_RdWord+0x7c>)
 8014758:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801475a:	897b      	ldrh	r3, [r7, #10]
 801475c:	b2da      	uxtb	r2, r3
 801475e:	4b16      	ldr	r3, [pc, #88]	; (80147b8 <VL53L1_RdWord+0x7c>)
 8014760:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014762:	2202      	movs	r2, #2
 8014764:	4914      	ldr	r1, [pc, #80]	; (80147b8 <VL53L1_RdWord+0x7c>)
 8014766:	68f8      	ldr	r0, [r7, #12]
 8014768:	f7ff fec6 	bl	80144f8 <_I2CWrite>
 801476c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d002      	beq.n	801477a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014774:	23f3      	movs	r3, #243	; 0xf3
 8014776:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014778:	e017      	b.n	80147aa <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801477a:	2202      	movs	r2, #2
 801477c:	490e      	ldr	r1, [pc, #56]	; (80147b8 <VL53L1_RdWord+0x7c>)
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f7ff fecd 	bl	801451e <_I2CRead>
 8014784:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d002      	beq.n	8014792 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801478c:	23f3      	movs	r3, #243	; 0xf3
 801478e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014790:	e00b      	b.n	80147aa <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8014792:	4b09      	ldr	r3, [pc, #36]	; (80147b8 <VL53L1_RdWord+0x7c>)
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	b29b      	uxth	r3, r3
 8014798:	021b      	lsls	r3, r3, #8
 801479a:	b29a      	uxth	r2, r3
 801479c:	4b06      	ldr	r3, [pc, #24]	; (80147b8 <VL53L1_RdWord+0x7c>)
 801479e:	785b      	ldrb	r3, [r3, #1]
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	4413      	add	r3, r2
 80147a4:	b29a      	uxth	r2, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80147aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3718      	adds	r7, #24
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20008518 	.word	0x20008518

080147bc <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80147c6:	2300      	movs	r3, #0
 80147c8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	695b      	ldr	r3, [r3, #20]
 80147ce:	4798      	blx	r3
 80147d0:	4603      	mov	r3, r0
 80147d2:	461a      	mov	r2, r3
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80147d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3710      	adds	r7, #16
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	4619      	mov	r1, r3
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 f8d2 	bl	801499c <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 80147f8:	2300      	movs	r3, #0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
	...

08014804 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	4a07      	ldr	r2, [pc, #28]	; (8014830 <VL53L1_WaitUs+0x2c>)
 8014812:	fb82 1203 	smull	r1, r2, r2, r3
 8014816:	1192      	asrs	r2, r2, #6
 8014818:	17db      	asrs	r3, r3, #31
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	4619      	mov	r1, r3
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 f8bc 	bl	801499c <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	10624dd3 	.word	0x10624dd3

08014834 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014834:	b590      	push	{r4, r7, lr}
 8014836:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801483a:	af00      	add	r7, sp, #0
 801483c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014840:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014844:	6020      	str	r0, [r4, #0]
 8014846:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801484a:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 801484e:	6001      	str	r1, [r0, #0]
 8014850:	4619      	mov	r1, r3
 8014852:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014856:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 801485a:	801a      	strh	r2, [r3, #0]
 801485c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014860:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014864:	460a      	mov	r2, r1
 8014866:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014868:	2300      	movs	r3, #0
 801486a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 801486e:	2300      	movs	r3, #0
 8014870:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 801487a:	2300      	movs	r3, #0
 801487c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014880:	2300      	movs	r3, #0
 8014882:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 801488c:	f107 0310 	add.w	r3, r7, #16
 8014890:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014894:	4940      	ldr	r1, [pc, #256]	; (8014998 <VL53L1_WaitValueMaskEx+0x164>)
 8014896:	4618      	mov	r0, r3
 8014898:	f004 fed2 	bl	8019640 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 801489c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80148a0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80148a4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80148a8:	4611      	mov	r1, r2
 80148aa:	6818      	ldr	r0, [r3, #0]
 80148ac:	f7ff ff86 	bl	80147bc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80148b0:	e04e      	b.n	8014950 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80148b2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d110      	bne.n	80148dc <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80148ba:	f207 2213 	addw	r2, r7, #531	; 0x213
 80148be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80148c2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80148c6:	8819      	ldrh	r1, [r3, #0]
 80148c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80148cc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80148d0:	6818      	ldr	r0, [r3, #0]
 80148d2:	f7ff feff 	bl	80146d4 <VL53L1_RdByte>
 80148d6:	4603      	mov	r3, r0
 80148d8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80148dc:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80148e0:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80148e4:	4013      	ands	r3, r2
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80148ec:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 80148f0:	7812      	ldrb	r2, [r2, #0]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d102      	bne.n	80148fc <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 80148f6:	2301      	movs	r3, #1
 80148f8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80148fc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014900:	2b00      	cmp	r3, #0
 8014902:	d114      	bne.n	801492e <VL53L1_WaitValueMaskEx+0xfa>
 8014904:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014908:	2b00      	cmp	r3, #0
 801490a:	d110      	bne.n	801492e <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 801490c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014910:	2b00      	cmp	r3, #0
 8014912:	d00c      	beq.n	801492e <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014914:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014918:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801491c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014920:	4611      	mov	r1, r2
 8014922:	6818      	ldr	r0, [r3, #0]
 8014924:	f7ff ff5e 	bl	80147e4 <VL53L1_WaitMs>
 8014928:	4603      	mov	r3, r0
 801492a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 801492e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014932:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014936:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801493a:	4611      	mov	r1, r2
 801493c:	6818      	ldr	r0, [r3, #0]
 801493e:	f7ff ff3d 	bl	80147bc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014942:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014946:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014950:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014954:	2b00      	cmp	r3, #0
 8014956:	d10c      	bne.n	8014972 <VL53L1_WaitValueMaskEx+0x13e>
 8014958:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801495c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014960:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	429a      	cmp	r2, r3
 8014968:	d203      	bcs.n	8014972 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801496a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801496e:	2b00      	cmp	r3, #0
 8014970:	d09f      	beq.n	80148b2 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014972:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <VL53L1_WaitValueMaskEx+0x154>
 801497a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801497e:	2b00      	cmp	r3, #0
 8014980:	d102      	bne.n	8014988 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014982:	23f9      	movs	r3, #249	; 0xf9
 8014984:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014988:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 801498c:	4618      	mov	r0, r3
 801498e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014992:	46bd      	mov	sp, r7
 8014994:	bd90      	pop	{r4, r7, pc}
 8014996:	bf00      	nop
 8014998:	0801a6dc 	.word	0x0801a6dc

0801499c <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	4798      	blx	r3
 80149ac:	4603      	mov	r3, r0
 80149ae:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80149b0:	bf00      	nop
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	695b      	ldr	r3, [r3, #20]
 80149b6:	4798      	blx	r3
 80149b8:	4603      	mov	r3, r0
 80149ba:	461a      	mov	r2, r3
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	683a      	ldr	r2, [r7, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d8f5      	bhi.n	80149b2 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3710      	adds	r7, #16
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b08c      	sub	sp, #48	; 0x30
 80149d4:	af06      	add	r7, sp, #24
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	607a      	str	r2, [r7, #4]
 80149dc:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80149de:	2300      	movs	r3, #0
 80149e0:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 80149e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e4:	9304      	str	r3, [sp, #16]
 80149e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e8:	9303      	str	r3, [sp, #12]
 80149ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ec:	9302      	str	r3, [sp, #8]
 80149ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f0:	9301      	str	r3, [sp, #4]
 80149f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f4:	9300      	str	r3, [sp, #0]
 80149f6:	6a3b      	ldr	r3, [r7, #32]
 80149f8:	683a      	ldr	r2, [r7, #0]
 80149fa:	6879      	ldr	r1, [r7, #4]
 80149fc:	68b8      	ldr	r0, [r7, #8]
 80149fe:	f7fc fefb 	bl	80117f8 <VL53L1_hist_process_data>
 8014a02:	4603      	mov	r3, r0
 8014a04:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3718      	adds	r7, #24
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}

08014a12 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014a12:	b580      	push	{r7, lr}
 8014a14:	b084      	sub	sp, #16
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
 8014a1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d103      	bne.n	8014a2a <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014a22:	f06f 0301 	mvn.w	r3, #1
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	e023      	b.n	8014a72 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	681a      	ldr	r2, [r3, #0]
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	685a      	ldr	r2, [r3, #4]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	891a      	ldrh	r2, [r3, #8]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	68da      	ldr	r2, [r3, #12]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	691a      	ldr	r2, [r3, #16]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	695a      	ldr	r2, [r3, #20]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d004      	beq.n	8014a6c <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	4798      	blx	r3
 8014a68:	60f8      	str	r0, [r7, #12]
 8014a6a:	e002      	b.n	8014a72 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a70:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014a72:	68fb      	ldr	r3, [r7, #12]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3710      	adds	r7, #16
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a8a:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d003      	beq.n	8014a9a <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014a92:	f04f 33ff 	mov.w	r3, #4294967295
 8014a96:	60fb      	str	r3, [r7, #12]
 8014a98:	e04d      	b.n	8014b36 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7ed f8d1 	bl	8001c42 <VL53L1_WaitDeviceBooted>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d003      	beq.n	8014aae <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8014aaa:	60fb      	str	r3, [r7, #12]
 8014aac:	e043      	b.n	8014b36 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f7ed f847 	bl	8001b42 <VL53L1_DataInit>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d003      	beq.n	8014ac2 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014aba:	f04f 33ff 	mov.w	r3, #4294967295
 8014abe:	60fb      	str	r3, [r7, #12]
 8014ac0:	e039      	b.n	8014b36 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7ed f892 	bl	8001bec <VL53L1_StaticInit>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014ace:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad2:	60fb      	str	r3, [r7, #12]
 8014ad4:	e02f      	b.n	8014b36 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f7ee fe8a 	bl	80037f0 <VL53L1_PerformRefSpadManagement>
 8014adc:	4603      	mov	r3, r0
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d003      	beq.n	8014aea <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e025      	b.n	8014b36 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014afc:	2200      	movs	r2, #0
 8014afe:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b20:	2200      	movs	r2, #0
 8014b22:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014b32:	2300      	movs	r3, #0
 8014b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b36:	68fb      	ldr	r3, [r7, #12]
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3710      	adds	r7, #16
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014b48:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b54:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d111      	bne.n	8014b80 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	4798      	blx	r3
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d003      	beq.n	8014b70 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6c:	60fb      	str	r3, [r7, #12]
 8014b6e:	e007      	b.n	8014b80 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014b80:	68fb      	ldr	r3, [r7, #12]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d002      	beq.n	8014ba0 <VL53L1CB_ReadID+0x16>
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d103      	bne.n	8014ba8 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ba0:	f06f 0301 	mvn.w	r3, #1
 8014ba4:	60fb      	str	r3, [r7, #12]
 8014ba6:	e00a      	b.n	8014bbe <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	2200      	movs	r2, #0
 8014bac:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014bae:	683a      	ldr	r2, [r7, #0]
 8014bb0:	f240 110f 	movw	r1, #271	; 0x10f
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7ff fdc1 	bl	801473c <VL53L1_RdWord>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3710      	adds	r7, #16
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d002      	beq.n	8014bde <VL53L1CB_GetCapabilities+0x16>
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d103      	bne.n	8014be6 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014bde:	f06f 0301 	mvn.w	r3, #1
 8014be2:	60fb      	str	r3, [r7, #12]
 8014be4:	e00d      	b.n	8014c02 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	2201      	movs	r2, #1
 8014bea:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	2204      	movs	r2, #4
 8014bf0:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014c02:	68fb      	ldr	r3, [r7, #12]
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3714      	adds	r7, #20
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d009      	beq.n	8014c34 <VL53L1CB_ConfigProfile+0x24>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d006      	beq.n	8014c34 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014c2c:	7afb      	ldrb	r3, [r7, #11]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d103      	bne.n	8014c3a <VL53L1CB_ConfigProfile+0x2a>
 8014c32:	e00c      	b.n	8014c4e <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014c34:	f06f 0301 	mvn.w	r3, #1
 8014c38:	e043      	b.n	8014cc2 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014c3a:	7afb      	ldrb	r3, [r7, #11]
 8014c3c:	2b02      	cmp	r3, #2
 8014c3e:	d006      	beq.n	8014c4e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014c40:	7afb      	ldrb	r3, [r7, #11]
 8014c42:	2b03      	cmp	r3, #3
 8014c44:	d003      	beq.n	8014c4e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014c46:	f06f 0301 	mvn.w	r3, #1
 8014c4a:	60fb      	str	r3, [r7, #12]
 8014c4c:	e038      	b.n	8014cc0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014c4e:	7afb      	ldrb	r3, [r7, #11]
 8014c50:	4619      	mov	r1, r3
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7ed f970 	bl	8001f38 <VL53L1_SetDistanceMode>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d003      	beq.n	8014c66 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	e02c      	b.n	8014cc0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c6e:	fb02 f303 	mul.w	r3, r2, r3
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7ed f9ed 	bl	8002054 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d003      	beq.n	8014c88 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014c80:	f04f 33ff 	mov.w	r3, #4294967295
 8014c84:	60fb      	str	r3, [r7, #12]
 8014c86:	e01b      	b.n	8014cc0 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	bf14      	ite	ne
 8014c90:	2301      	movne	r3, #1
 8014c92:	2300      	moveq	r3, #0
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	461a      	mov	r2, r3
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c9e:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	691b      	ldr	r3, [r3, #16]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	bf14      	ite	ne
 8014caa:	2301      	movne	r3, #1
 8014cac:	2300      	moveq	r3, #0
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014cb8:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3710      	adds	r7, #16
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b094      	sub	sp, #80	; 0x50
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
 8014cd2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d002      	beq.n	8014ce0 <VL53L1CB_ConfigROI+0x16>
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d103      	bne.n	8014ce8 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ce0:	f06f 0301 	mvn.w	r3, #1
 8014ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ce6:	e01c      	b.n	8014d22 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014ce8:	2301      	movs	r3, #1
 8014cea:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	789b      	ldrb	r3, [r3, #2]
 8014cf0:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	78db      	ldrb	r3, [r3, #3]
 8014cf6:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	785b      	ldrb	r3, [r3, #1]
 8014d02:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014d04:	f107 0308 	add.w	r3, r7, #8
 8014d08:	4619      	mov	r1, r3
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7ed fca6 	bl	800265c <VL53L1_SetROI>
 8014d10:	4603      	mov	r3, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d003      	beq.n	8014d1e <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014d16:	f04f 33ff 	mov.w	r3, #4294967295
 8014d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d1c:	e001      	b.n	8014d22 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3750      	adds	r7, #80	; 0x50
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}

08014d2c <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014d36:	f06f 0303 	mvn.w	r3, #3
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	370c      	adds	r7, #12
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr

08014d46 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b084      	sub	sp, #16
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
 8014d4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d002      	beq.n	8014d5c <VL53L1CB_GetDistance+0x16>
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d103      	bne.n	8014d64 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d5c:	f06f 0301 	mvn.w	r3, #1
 8014d60:	60fb      	str	r3, [r7, #12]
 8014d62:	e03a      	b.n	8014dda <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d6a:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d103      	bne.n	8014d7a <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014d72:	f04f 33ff 	mov.w	r3, #4294967295
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	e02f      	b.n	8014dda <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d80:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014d84:	2b01      	cmp	r3, #1
 8014d86:	d106      	bne.n	8014d96 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014d88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f000 f92b 	bl	8014fe8 <vl53l1cb_poll_for_measurement>
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	e004      	b.n	8014da0 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8014d96:	2100      	movs	r1, #0
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 f925 	bl	8014fe8 <vl53l1cb_poll_for_measurement>
 8014d9e:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d119      	bne.n	8014dda <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014da6:	6839      	ldr	r1, [r7, #0]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f94b 	bl	8015044 <vl53l1cb_get_result>
 8014dae:	4603      	mov	r3, r0
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d003      	beq.n	8014dbc <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014db4:	f04f 33ff 	mov.w	r3, #4294967295
 8014db8:	60fb      	str	r3, [r7, #12]
 8014dba:	e00e      	b.n	8014dda <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dc2:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d105      	bne.n	8014dd6 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f7ed fdde 	bl	800298c <VL53L1_ClearInterruptAndStartMeasurement>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	e001      	b.n	8014dda <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8014dda:	68fb      	ldr	r3, [r7, #12]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d103      	bne.n	8014dfc <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014df4:	f06f 0301 	mvn.w	r3, #1
 8014df8:	60fb      	str	r3, [r7, #12]
 8014dfa:	e068      	b.n	8014ece <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e02:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014e06:	2b01      	cmp	r3, #1
 8014e08:	d103      	bne.n	8014e12 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0e:	60fb      	str	r3, [r7, #12]
 8014e10:	e05d      	b.n	8014ece <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7ed fcf6 	bl	8002804 <VL53L1_StartMeasurement>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d154      	bne.n	8014ec8 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e24:	2201      	movs	r2, #1
 8014e26:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	3b01      	subs	r3, #1
 8014e32:	2b03      	cmp	r3, #3
 8014e34:	d83e      	bhi.n	8014eb4 <VL53L1CB_Start+0xd0>
 8014e36:	a201      	add	r2, pc, #4	; (adr r2, 8014e3c <VL53L1CB_Start+0x58>)
 8014e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e3c:	08014e4d 	.word	0x08014e4d
 8014e40:	08014e67 	.word	0x08014e67
 8014e44:	08014e81 	.word	0x08014e81
 8014e48:	08014e9b 	.word	0x08014e9b
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e52:	2201      	movs	r2, #1
 8014e54:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e5e:	2201      	movs	r2, #1
 8014e60:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e64:	e033      	b.n	8014ece <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e78:	2201      	movs	r2, #1
 8014e7a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e7e:	e026      	b.n	8014ece <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e86:	2201      	movs	r2, #1
 8014e88:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e92:	2200      	movs	r2, #0
 8014e94:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014e98:	e019      	b.n	8014ece <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014eac:	2200      	movs	r2, #0
 8014eae:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014eb2:	e00c      	b.n	8014ece <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8014ec0:	f06f 0301 	mvn.w	r3, #1
 8014ec4:	60fb      	str	r3, [r7, #12]
      break;
 8014ec6:	e002      	b.n	8014ece <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ecc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ece:	68fb      	ldr	r3, [r7, #12]
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3710      	adds	r7, #16
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d103      	bne.n	8014eee <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ee6:	f06f 0301 	mvn.w	r3, #1
 8014eea:	60fb      	str	r3, [r7, #12]
 8014eec:	e01c      	b.n	8014f28 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ef4:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d103      	bne.n	8014f04 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8014efc:	f04f 33ff 	mov.w	r3, #4294967295
 8014f00:	60fb      	str	r3, [r7, #12]
 8014f02:	e011      	b.n	8014f28 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f7ed fd1d 	bl	8002944 <VL53L1_StopMeasurement>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d108      	bne.n	8014f22 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f16:	2200      	movs	r2, #0
 8014f18:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	60fb      	str	r3, [r7, #12]
 8014f20:	e002      	b.n	8014f28 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014f22:	f04f 33ff 	mov.w	r3, #4294967295
 8014f26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f28:	68fb      	ldr	r3, [r7, #12]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b084      	sub	sp, #16
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
 8014f3a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d103      	bne.n	8014f4a <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f42:	f06f 0301 	mvn.w	r3, #1
 8014f46:	60fb      	str	r3, [r7, #12]
 8014f48:	e012      	b.n	8014f70 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	4619      	mov	r1, r3
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f7ec fdcf 	bl	8001af4 <VL53L1_SetDeviceAddress>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d003      	beq.n	8014f64 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8014f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f60:	60fb      	str	r3, [r7, #12]
 8014f62:	e005      	b.n	8014f70 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f70:	68fb      	ldr	r3, [r7, #12]
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8014f7a:	b480      	push	{r7}
 8014f7c:	b085      	sub	sp, #20
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d002      	beq.n	8014f90 <VL53L1CB_GetAddress+0x16>
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d103      	bne.n	8014f98 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f90:	f06f 0301 	mvn.w	r3, #1
 8014f94:	60fb      	str	r3, [r7, #12]
 8014f96:	e006      	b.n	8014fa6 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	891b      	ldrh	r3, [r3, #8]
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3714      	adds	r7, #20
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014fbe:	f06f 0303 	mvn.w	r3, #3
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	370c      	adds	r7, #12
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr

08014fce <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 8014fce:	b480      	push	{r7}
 8014fd0:	b083      	sub	sp, #12
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
 8014fd6:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014fd8:	f06f 0303 	mvn.w	r3, #3
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d102      	bne.n	8015002 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8014ffc:	f06f 0301 	mvn.w	r3, #1
 8015000:	e01b      	b.n	801503a <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	695b      	ldr	r3, [r3, #20]
 8015006:	4798      	blx	r3
 8015008:	4603      	mov	r3, r0
 801500a:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 801500c:	f107 030b 	add.w	r3, r7, #11
 8015010:	4619      	mov	r1, r3
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7ed fcd0 	bl	80029b8 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8015018:	7afb      	ldrb	r3, [r7, #11]
 801501a:	2b01      	cmp	r3, #1
 801501c:	d101      	bne.n	8015022 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801501e:	2300      	movs	r3, #0
 8015020:	e00b      	b.n	801503a <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	695b      	ldr	r3, [r3, #20]
 8015026:	4798      	blx	r3
 8015028:	4603      	mov	r3, r0
 801502a:	461a      	mov	r2, r3
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	1ad3      	subs	r3, r2, r3
 8015030:	683a      	ldr	r2, [r7, #0]
 8015032:	429a      	cmp	r2, r3
 8015034:	d8ea      	bhi.n	801500c <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8015036:	f06f 0302 	mvn.w	r3, #2
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
	...

08015044 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015044:	b590      	push	{r4, r7, lr}
 8015046:	b0a9      	sub	sp, #164	; 0xa4
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d002      	beq.n	801505a <vl53l1cb_get_result+0x16>
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d104      	bne.n	8015064 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801505a:	f06f 0301 	mvn.w	r3, #1
 801505e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015062:	e120      	b.n	80152a6 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8015064:	f107 030c 	add.w	r3, r7, #12
 8015068:	4619      	mov	r1, r3
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7ee fb82 	bl	8003774 <VL53L1_GetMultiRangingData>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d004      	beq.n	8015080 <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 8015076:	f04f 33ff 	mov.w	r3, #4294967295
 801507a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801507e:	e112      	b.n	80152a6 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015080:	2300      	movs	r3, #0
 8015082:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015086:	e106      	b.n	8015296 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8015088:	7cbb      	ldrb	r3, [r7, #18]
 801508a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801508e:	4618      	mov	r0, r3
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	4613      	mov	r3, r2
 8015094:	011b      	lsls	r3, r3, #4
 8015096:	4413      	add	r3, r2
 8015098:	009b      	lsls	r3, r3, #2
 801509a:	440b      	add	r3, r1
 801509c:	3304      	adds	r3, #4
 801509e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80150a0:	2300      	movs	r3, #0
 80150a2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80150a6:	e0eb      	b.n	8015280 <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80150a8:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80150ac:	4613      	mov	r3, r2
 80150ae:	00db      	lsls	r3, r3, #3
 80150b0:	1a9b      	subs	r3, r3, r2
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	33a0      	adds	r3, #160	; 0xa0
 80150b6:	443b      	add	r3, r7
 80150b8:	3b78      	subs	r3, #120	; 0x78
 80150ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	da0d      	bge.n	80150de <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80150c2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80150c6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80150ca:	6839      	ldr	r1, [r7, #0]
 80150cc:	4613      	mov	r3, r2
 80150ce:	011b      	lsls	r3, r3, #4
 80150d0:	4413      	add	r3, r2
 80150d2:	4403      	add	r3, r0
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	440b      	add	r3, r1
 80150d8:	2200      	movs	r2, #0
 80150da:	609a      	str	r2, [r3, #8]
 80150dc:	e017      	b.n	801510e <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80150de:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80150e2:	4613      	mov	r3, r2
 80150e4:	00db      	lsls	r3, r3, #3
 80150e6:	1a9b      	subs	r3, r3, r2
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	33a0      	adds	r3, #160	; 0xa0
 80150ec:	443b      	add	r3, r7
 80150ee:	3b78      	subs	r3, #120	; 0x78
 80150f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150f4:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80150f8:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80150fc:	461c      	mov	r4, r3
 80150fe:	6839      	ldr	r1, [r7, #0]
 8015100:	4613      	mov	r3, r2
 8015102:	011b      	lsls	r3, r3, #4
 8015104:	4413      	add	r3, r2
 8015106:	4403      	add	r3, r0
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	440b      	add	r3, r1
 801510c:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015114:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8015118:	2b01      	cmp	r3, #1
 801511a:	d136      	bne.n	801518a <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 801511c:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015120:	4613      	mov	r3, r2
 8015122:	00db      	lsls	r3, r3, #3
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	33a0      	adds	r3, #160	; 0xa0
 801512a:	443b      	add	r3, r7
 801512c:	3b80      	subs	r3, #128	; 0x80
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	ee07 3a90 	vmov	s15, r3
 8015134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015138:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80152b4 <vl53l1cb_get_result+0x270>
 801513c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015140:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80152b8 <vl53l1cb_get_result+0x274>
 8015144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015148:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 801514c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015150:	0a1b      	lsrs	r3, r3, #8
 8015152:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8015156:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801515a:	ee07 3a90 	vmov	s15, r3
 801515e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015162:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015166:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801516a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801516e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015172:	6839      	ldr	r1, [r7, #0]
 8015174:	4613      	mov	r3, r2
 8015176:	011b      	lsls	r3, r3, #4
 8015178:	4413      	add	r3, r2
 801517a:	4403      	add	r3, r0
 801517c:	3308      	adds	r3, #8
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	440b      	add	r3, r1
 8015182:	3308      	adds	r3, #8
 8015184:	edc3 7a00 	vstr	s15, [r3]
 8015188:	e00f      	b.n	80151aa <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 801518a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801518e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015192:	6839      	ldr	r1, [r7, #0]
 8015194:	4613      	mov	r3, r2
 8015196:	011b      	lsls	r3, r3, #4
 8015198:	4413      	add	r3, r2
 801519a:	4403      	add	r3, r0
 801519c:	3308      	adds	r3, #8
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	440b      	add	r3, r1
 80151a2:	3308      	adds	r3, #8
 80151a4:	f04f 0200 	mov.w	r2, #0
 80151a8:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151b0:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	d136      	bne.n	8015226 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80151b8:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80151bc:	4613      	mov	r3, r2
 80151be:	00db      	lsls	r3, r3, #3
 80151c0:	1a9b      	subs	r3, r3, r2
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	33a0      	adds	r3, #160	; 0xa0
 80151c6:	443b      	add	r3, r7
 80151c8:	3b84      	subs	r3, #132	; 0x84
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	ee07 3a90 	vmov	s15, r3
 80151d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80151d4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80152b4 <vl53l1cb_get_result+0x270>
 80151d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80151dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80152b8 <vl53l1cb_get_result+0x274>
 80151e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151e4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80151e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80151ec:	0a1b      	lsrs	r3, r3, #8
 80151ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80151f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80151f6:	ee07 3a90 	vmov	s15, r3
 80151fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80151fe:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015202:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015206:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 801520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	4613      	mov	r3, r2
 8015212:	011b      	lsls	r3, r3, #4
 8015214:	4413      	add	r3, r2
 8015216:	4403      	add	r3, r0
 8015218:	330c      	adds	r3, #12
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	440b      	add	r3, r1
 801521e:	3308      	adds	r3, #8
 8015220:	edc3 7a00 	vstr	s15, [r3]
 8015224:	e00f      	b.n	8015246 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8015226:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801522a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801522e:	6839      	ldr	r1, [r7, #0]
 8015230:	4613      	mov	r3, r2
 8015232:	011b      	lsls	r3, r3, #4
 8015234:	4413      	add	r3, r2
 8015236:	4403      	add	r3, r0
 8015238:	330c      	adds	r3, #12
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	440b      	add	r3, r1
 801523e:	3308      	adds	r3, #8
 8015240:	f04f 0200 	mov.w	r2, #0
 8015244:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8015246:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801524a:	4613      	mov	r3, r2
 801524c:	00db      	lsls	r3, r3, #3
 801524e:	1a9b      	subs	r3, r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	33a0      	adds	r3, #160	; 0xa0
 8015254:	443b      	add	r3, r7
 8015256:	3b75      	subs	r3, #117	; 0x75
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801525e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015262:	461c      	mov	r4, r3
 8015264:	6839      	ldr	r1, [r7, #0]
 8015266:	4613      	mov	r3, r2
 8015268:	011b      	lsls	r3, r3, #4
 801526a:	4413      	add	r3, r2
 801526c:	4403      	add	r3, r0
 801526e:	3304      	adds	r3, #4
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	440b      	add	r3, r1
 8015274:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015276:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 801527a:	3301      	adds	r3, #1
 801527c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8015280:	7cbb      	ldrb	r3, [r7, #18]
 8015282:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015286:	429a      	cmp	r2, r3
 8015288:	f4ff af0e 	bcc.w	80150a8 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801528c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015290:	3301      	adds	r3, #1
 8015292:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015296:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801529a:	2b00      	cmp	r3, #0
 801529c:	f43f aef4 	beq.w	8015088 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 80152a0:	2300      	movs	r3, #0
 80152a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 80152a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	37a4      	adds	r7, #164	; 0xa4
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd90      	pop	{r4, r7, pc}
 80152b2:	bf00      	nop
 80152b4:	47800000 	.word	0x47800000
 80152b8:	447a0000 	.word	0x447a0000

080152bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80152c2:	2300      	movs	r3, #0
 80152c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80152c6:	4b0c      	ldr	r3, [pc, #48]	; (80152f8 <HAL_Init+0x3c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	4a0b      	ldr	r2, [pc, #44]	; (80152f8 <HAL_Init+0x3c>)
 80152cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80152d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80152d2:	2003      	movs	r0, #3
 80152d4:	f000 f90f 	bl	80154f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80152d8:	200f      	movs	r0, #15
 80152da:	f7eb fd31 	bl	8000d40 <HAL_InitTick>
 80152de:	4603      	mov	r3, r0
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d002      	beq.n	80152ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80152e4:	2301      	movs	r3, #1
 80152e6:	71fb      	strb	r3, [r7, #7]
 80152e8:	e001      	b.n	80152ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80152ea:	f7eb fc6b 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80152ee:	79fb      	ldrb	r3, [r7, #7]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	58004000 	.word	0x58004000

080152fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80152fc:	b480      	push	{r7}
 80152fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015300:	4b06      	ldr	r3, [pc, #24]	; (801531c <HAL_IncTick+0x20>)
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	461a      	mov	r2, r3
 8015306:	4b06      	ldr	r3, [pc, #24]	; (8015320 <HAL_IncTick+0x24>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4413      	add	r3, r2
 801530c:	4a04      	ldr	r2, [pc, #16]	; (8015320 <HAL_IncTick+0x24>)
 801530e:	6013      	str	r3, [r2, #0]
}
 8015310:	bf00      	nop
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	20000070 	.word	0x20000070
 8015320:	20008618 	.word	0x20008618

08015324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015324:	b480      	push	{r7}
 8015326:	af00      	add	r7, sp, #0
  return uwTick;
 8015328:	4b03      	ldr	r3, [pc, #12]	; (8015338 <HAL_GetTick+0x14>)
 801532a:	681b      	ldr	r3, [r3, #0]
}
 801532c:	4618      	mov	r0, r3
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr
 8015336:	bf00      	nop
 8015338:	20008618 	.word	0x20008618

0801533c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 801533c:	b480      	push	{r7}
 801533e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8015340:	4b03      	ldr	r3, [pc, #12]	; (8015350 <HAL_GetTickPrio+0x14>)
 8015342:	681b      	ldr	r3, [r3, #0]
}
 8015344:	4618      	mov	r0, r3
 8015346:	46bd      	mov	sp, r7
 8015348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop
 8015350:	2000006c 	.word	0x2000006c

08015354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801535c:	f7ff ffe2 	bl	8015324 <HAL_GetTick>
 8015360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801536c:	d005      	beq.n	801537a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801536e:	4b0a      	ldr	r3, [pc, #40]	; (8015398 <HAL_Delay+0x44>)
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	461a      	mov	r2, r3
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	4413      	add	r3, r2
 8015378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801537a:	bf00      	nop
 801537c:	f7ff ffd2 	bl	8015324 <HAL_GetTick>
 8015380:	4602      	mov	r2, r0
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	1ad3      	subs	r3, r2, r3
 8015386:	68fa      	ldr	r2, [r7, #12]
 8015388:	429a      	cmp	r2, r3
 801538a:	d8f7      	bhi.n	801537c <HAL_Delay+0x28>
  {
  }
}
 801538c:	bf00      	nop
 801538e:	bf00      	nop
 8015390:	3710      	adds	r7, #16
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	20000070 	.word	0x20000070

0801539c <__NVIC_SetPriorityGrouping>:
{
 801539c:	b480      	push	{r7}
 801539e:	b085      	sub	sp, #20
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f003 0307 	and.w	r3, r3, #7
 80153aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80153ac:	4b0c      	ldr	r3, [pc, #48]	; (80153e0 <__NVIC_SetPriorityGrouping+0x44>)
 80153ae:	68db      	ldr	r3, [r3, #12]
 80153b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80153b2:	68ba      	ldr	r2, [r7, #8]
 80153b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80153b8:	4013      	ands	r3, r2
 80153ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80153c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80153c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80153cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80153ce:	4a04      	ldr	r2, [pc, #16]	; (80153e0 <__NVIC_SetPriorityGrouping+0x44>)
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	60d3      	str	r3, [r2, #12]
}
 80153d4:	bf00      	nop
 80153d6:	3714      	adds	r7, #20
 80153d8:	46bd      	mov	sp, r7
 80153da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153de:	4770      	bx	lr
 80153e0:	e000ed00 	.word	0xe000ed00

080153e4 <__NVIC_GetPriorityGrouping>:
{
 80153e4:	b480      	push	{r7}
 80153e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80153e8:	4b04      	ldr	r3, [pc, #16]	; (80153fc <__NVIC_GetPriorityGrouping+0x18>)
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	0a1b      	lsrs	r3, r3, #8
 80153ee:	f003 0307 	and.w	r3, r3, #7
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	e000ed00 	.word	0xe000ed00

08015400 <__NVIC_EnableIRQ>:
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801540e:	2b00      	cmp	r3, #0
 8015410:	db0b      	blt.n	801542a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015412:	79fb      	ldrb	r3, [r7, #7]
 8015414:	f003 021f 	and.w	r2, r3, #31
 8015418:	4907      	ldr	r1, [pc, #28]	; (8015438 <__NVIC_EnableIRQ+0x38>)
 801541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801541e:	095b      	lsrs	r3, r3, #5
 8015420:	2001      	movs	r0, #1
 8015422:	fa00 f202 	lsl.w	r2, r0, r2
 8015426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801542a:	bf00      	nop
 801542c:	370c      	adds	r7, #12
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	e000e100 	.word	0xe000e100

0801543c <__NVIC_SetPriority>:
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	4603      	mov	r3, r0
 8015444:	6039      	str	r1, [r7, #0]
 8015446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801544c:	2b00      	cmp	r3, #0
 801544e:	db0a      	blt.n	8015466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	b2da      	uxtb	r2, r3
 8015454:	490c      	ldr	r1, [pc, #48]	; (8015488 <__NVIC_SetPriority+0x4c>)
 8015456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801545a:	0112      	lsls	r2, r2, #4
 801545c:	b2d2      	uxtb	r2, r2
 801545e:	440b      	add	r3, r1
 8015460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015464:	e00a      	b.n	801547c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	b2da      	uxtb	r2, r3
 801546a:	4908      	ldr	r1, [pc, #32]	; (801548c <__NVIC_SetPriority+0x50>)
 801546c:	79fb      	ldrb	r3, [r7, #7]
 801546e:	f003 030f 	and.w	r3, r3, #15
 8015472:	3b04      	subs	r3, #4
 8015474:	0112      	lsls	r2, r2, #4
 8015476:	b2d2      	uxtb	r2, r2
 8015478:	440b      	add	r3, r1
 801547a:	761a      	strb	r2, [r3, #24]
}
 801547c:	bf00      	nop
 801547e:	370c      	adds	r7, #12
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr
 8015488:	e000e100 	.word	0xe000e100
 801548c:	e000ed00 	.word	0xe000ed00

08015490 <NVIC_EncodePriority>:
{
 8015490:	b480      	push	{r7}
 8015492:	b089      	sub	sp, #36	; 0x24
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f003 0307 	and.w	r3, r3, #7
 80154a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	f1c3 0307 	rsb	r3, r3, #7
 80154aa:	2b04      	cmp	r3, #4
 80154ac:	bf28      	it	cs
 80154ae:	2304      	movcs	r3, #4
 80154b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	3304      	adds	r3, #4
 80154b6:	2b06      	cmp	r3, #6
 80154b8:	d902      	bls.n	80154c0 <NVIC_EncodePriority+0x30>
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	3b03      	subs	r3, #3
 80154be:	e000      	b.n	80154c2 <NVIC_EncodePriority+0x32>
 80154c0:	2300      	movs	r3, #0
 80154c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80154c4:	f04f 32ff 	mov.w	r2, #4294967295
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	fa02 f303 	lsl.w	r3, r2, r3
 80154ce:	43da      	mvns	r2, r3
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	401a      	ands	r2, r3
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80154d8:	f04f 31ff 	mov.w	r1, #4294967295
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	fa01 f303 	lsl.w	r3, r1, r3
 80154e2:	43d9      	mvns	r1, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80154e8:	4313      	orrs	r3, r2
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3724      	adds	r7, #36	; 0x24
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b082      	sub	sp, #8
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f7ff ff4c 	bl	801539c <__NVIC_SetPriorityGrouping>
}
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b086      	sub	sp, #24
 8015510:	af00      	add	r7, sp, #0
 8015512:	4603      	mov	r3, r0
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801551a:	f7ff ff63 	bl	80153e4 <__NVIC_GetPriorityGrouping>
 801551e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	68b9      	ldr	r1, [r7, #8]
 8015524:	6978      	ldr	r0, [r7, #20]
 8015526:	f7ff ffb3 	bl	8015490 <NVIC_EncodePriority>
 801552a:	4602      	mov	r2, r0
 801552c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015530:	4611      	mov	r1, r2
 8015532:	4618      	mov	r0, r3
 8015534:	f7ff ff82 	bl	801543c <__NVIC_SetPriority>
}
 8015538:	bf00      	nop
 801553a:	3718      	adds	r7, #24
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	4603      	mov	r3, r0
 8015548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801554e:	4618      	mov	r0, r3
 8015550:	f7ff ff56 	bl	8015400 <__NVIC_EnableIRQ>
}
 8015554:	bf00      	nop
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801555c:	b480      	push	{r7}
 801555e:	b087      	sub	sp, #28
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015566:	2300      	movs	r3, #0
 8015568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801556a:	e14c      	b.n	8015806 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	681a      	ldr	r2, [r3, #0]
 8015570:	2101      	movs	r1, #1
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	fa01 f303 	lsl.w	r3, r1, r3
 8015578:	4013      	ands	r3, r2
 801557a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2b00      	cmp	r3, #0
 8015580:	f000 813e 	beq.w	8015800 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	f003 0303 	and.w	r3, r3, #3
 801558c:	2b01      	cmp	r3, #1
 801558e:	d005      	beq.n	801559c <HAL_GPIO_Init+0x40>
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	f003 0303 	and.w	r3, r3, #3
 8015598:	2b02      	cmp	r3, #2
 801559a:	d130      	bne.n	80155fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	2203      	movs	r2, #3
 80155a8:	fa02 f303 	lsl.w	r3, r2, r3
 80155ac:	43db      	mvns	r3, r3
 80155ae:	693a      	ldr	r2, [r7, #16]
 80155b0:	4013      	ands	r3, r2
 80155b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	68da      	ldr	r2, [r3, #12]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	005b      	lsls	r3, r3, #1
 80155bc:	fa02 f303 	lsl.w	r3, r2, r3
 80155c0:	693a      	ldr	r2, [r7, #16]
 80155c2:	4313      	orrs	r3, r2
 80155c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	693a      	ldr	r2, [r7, #16]
 80155ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80155d2:	2201      	movs	r2, #1
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	fa02 f303 	lsl.w	r3, r2, r3
 80155da:	43db      	mvns	r3, r3
 80155dc:	693a      	ldr	r2, [r7, #16]
 80155de:	4013      	ands	r3, r2
 80155e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	091b      	lsrs	r3, r3, #4
 80155e8:	f003 0201 	and.w	r2, r3, #1
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	fa02 f303 	lsl.w	r3, r2, r3
 80155f2:	693a      	ldr	r2, [r7, #16]
 80155f4:	4313      	orrs	r3, r2
 80155f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	693a      	ldr	r2, [r7, #16]
 80155fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	f003 0303 	and.w	r3, r3, #3
 8015606:	2b03      	cmp	r3, #3
 8015608:	d017      	beq.n	801563a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	005b      	lsls	r3, r3, #1
 8015614:	2203      	movs	r2, #3
 8015616:	fa02 f303 	lsl.w	r3, r2, r3
 801561a:	43db      	mvns	r3, r3
 801561c:	693a      	ldr	r2, [r7, #16]
 801561e:	4013      	ands	r3, r2
 8015620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	689a      	ldr	r2, [r3, #8]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	005b      	lsls	r3, r3, #1
 801562a:	fa02 f303 	lsl.w	r3, r2, r3
 801562e:	693a      	ldr	r2, [r7, #16]
 8015630:	4313      	orrs	r3, r2
 8015632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	693a      	ldr	r2, [r7, #16]
 8015638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	f003 0303 	and.w	r3, r3, #3
 8015642:	2b02      	cmp	r3, #2
 8015644:	d123      	bne.n	801568e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	08da      	lsrs	r2, r3, #3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	3208      	adds	r2, #8
 801564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	f003 0307 	and.w	r3, r3, #7
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	220f      	movs	r2, #15
 801565e:	fa02 f303 	lsl.w	r3, r2, r3
 8015662:	43db      	mvns	r3, r3
 8015664:	693a      	ldr	r2, [r7, #16]
 8015666:	4013      	ands	r3, r2
 8015668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	691a      	ldr	r2, [r3, #16]
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	f003 0307 	and.w	r3, r3, #7
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	fa02 f303 	lsl.w	r3, r2, r3
 801567a:	693a      	ldr	r2, [r7, #16]
 801567c:	4313      	orrs	r3, r2
 801567e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	08da      	lsrs	r2, r3, #3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	3208      	adds	r2, #8
 8015688:	6939      	ldr	r1, [r7, #16]
 801568a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	005b      	lsls	r3, r3, #1
 8015698:	2203      	movs	r2, #3
 801569a:	fa02 f303 	lsl.w	r3, r2, r3
 801569e:	43db      	mvns	r3, r3
 80156a0:	693a      	ldr	r2, [r7, #16]
 80156a2:	4013      	ands	r3, r2
 80156a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	f003 0203 	and.w	r2, r3, #3
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	005b      	lsls	r3, r3, #1
 80156b2:	fa02 f303 	lsl.w	r3, r2, r3
 80156b6:	693a      	ldr	r2, [r7, #16]
 80156b8:	4313      	orrs	r3, r2
 80156ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	693a      	ldr	r2, [r7, #16]
 80156c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f000 8098 	beq.w	8015800 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80156d0:	4a54      	ldr	r2, [pc, #336]	; (8015824 <HAL_GPIO_Init+0x2c8>)
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	089b      	lsrs	r3, r3, #2
 80156d6:	3302      	adds	r3, #2
 80156d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	f003 0303 	and.w	r3, r3, #3
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	220f      	movs	r2, #15
 80156e8:	fa02 f303 	lsl.w	r3, r2, r3
 80156ec:	43db      	mvns	r3, r3
 80156ee:	693a      	ldr	r2, [r7, #16]
 80156f0:	4013      	ands	r3, r2
 80156f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80156fa:	d019      	beq.n	8015730 <HAL_GPIO_Init+0x1d4>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	4a4a      	ldr	r2, [pc, #296]	; (8015828 <HAL_GPIO_Init+0x2cc>)
 8015700:	4293      	cmp	r3, r2
 8015702:	d013      	beq.n	801572c <HAL_GPIO_Init+0x1d0>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	4a49      	ldr	r2, [pc, #292]	; (801582c <HAL_GPIO_Init+0x2d0>)
 8015708:	4293      	cmp	r3, r2
 801570a:	d00d      	beq.n	8015728 <HAL_GPIO_Init+0x1cc>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	4a48      	ldr	r2, [pc, #288]	; (8015830 <HAL_GPIO_Init+0x2d4>)
 8015710:	4293      	cmp	r3, r2
 8015712:	d007      	beq.n	8015724 <HAL_GPIO_Init+0x1c8>
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	4a47      	ldr	r2, [pc, #284]	; (8015834 <HAL_GPIO_Init+0x2d8>)
 8015718:	4293      	cmp	r3, r2
 801571a:	d101      	bne.n	8015720 <HAL_GPIO_Init+0x1c4>
 801571c:	2304      	movs	r3, #4
 801571e:	e008      	b.n	8015732 <HAL_GPIO_Init+0x1d6>
 8015720:	2307      	movs	r3, #7
 8015722:	e006      	b.n	8015732 <HAL_GPIO_Init+0x1d6>
 8015724:	2303      	movs	r3, #3
 8015726:	e004      	b.n	8015732 <HAL_GPIO_Init+0x1d6>
 8015728:	2302      	movs	r3, #2
 801572a:	e002      	b.n	8015732 <HAL_GPIO_Init+0x1d6>
 801572c:	2301      	movs	r3, #1
 801572e:	e000      	b.n	8015732 <HAL_GPIO_Init+0x1d6>
 8015730:	2300      	movs	r3, #0
 8015732:	697a      	ldr	r2, [r7, #20]
 8015734:	f002 0203 	and.w	r2, r2, #3
 8015738:	0092      	lsls	r2, r2, #2
 801573a:	4093      	lsls	r3, r2
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	4313      	orrs	r3, r2
 8015740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8015742:	4938      	ldr	r1, [pc, #224]	; (8015824 <HAL_GPIO_Init+0x2c8>)
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	089b      	lsrs	r3, r3, #2
 8015748:	3302      	adds	r3, #2
 801574a:	693a      	ldr	r2, [r7, #16]
 801574c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015750:	4b39      	ldr	r3, [pc, #228]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	43db      	mvns	r3, r3
 801575a:	693a      	ldr	r2, [r7, #16]
 801575c:	4013      	ands	r3, r2
 801575e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015768:	2b00      	cmp	r3, #0
 801576a:	d003      	beq.n	8015774 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 801576c:	693a      	ldr	r2, [r7, #16]
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	4313      	orrs	r3, r2
 8015772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015774:	4a30      	ldr	r2, [pc, #192]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801577a:	4b2f      	ldr	r3, [pc, #188]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	43db      	mvns	r3, r3
 8015784:	693a      	ldr	r2, [r7, #16]
 8015786:	4013      	ands	r3, r2
 8015788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015792:	2b00      	cmp	r3, #0
 8015794:	d003      	beq.n	801579e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015796:	693a      	ldr	r2, [r7, #16]
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	4313      	orrs	r3, r2
 801579c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801579e:	4a26      	ldr	r2, [pc, #152]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80157a4:	4b24      	ldr	r3, [pc, #144]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 80157a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	43db      	mvns	r3, r3
 80157b0:	693a      	ldr	r2, [r7, #16]
 80157b2:	4013      	ands	r3, r2
 80157b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d003      	beq.n	80157ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80157c2:	693a      	ldr	r2, [r7, #16]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	4313      	orrs	r3, r2
 80157c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80157ca:	4a1b      	ldr	r2, [pc, #108]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80157d2:	4b19      	ldr	r3, [pc, #100]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 80157d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80157d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	43db      	mvns	r3, r3
 80157de:	693a      	ldr	r2, [r7, #16]
 80157e0:	4013      	ands	r3, r2
 80157e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d003      	beq.n	80157f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	4313      	orrs	r3, r2
 80157f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80157f8:	4a0f      	ldr	r2, [pc, #60]	; (8015838 <HAL_GPIO_Init+0x2dc>)
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	3301      	adds	r3, #1
 8015804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	fa22 f303 	lsr.w	r3, r2, r3
 8015810:	2b00      	cmp	r3, #0
 8015812:	f47f aeab 	bne.w	801556c <HAL_GPIO_Init+0x10>
  }
}
 8015816:	bf00      	nop
 8015818:	bf00      	nop
 801581a:	371c      	adds	r7, #28
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr
 8015824:	40010000 	.word	0x40010000
 8015828:	48000400 	.word	0x48000400
 801582c:	48000800 	.word	0x48000800
 8015830:	48000c00 	.word	0x48000c00
 8015834:	48001000 	.word	0x48001000
 8015838:	58000800 	.word	0x58000800

0801583c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801583c:	b480      	push	{r7}
 801583e:	b087      	sub	sp, #28
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015846:	2300      	movs	r3, #0
 8015848:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801584a:	e0bb      	b.n	80159c4 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801584c:	2201      	movs	r2, #1
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	fa02 f303 	lsl.w	r3, r2, r3
 8015854:	683a      	ldr	r2, [r7, #0]
 8015856:	4013      	ands	r3, r2
 8015858:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	2b00      	cmp	r3, #0
 801585e:	f000 80ae 	beq.w	80159be <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8015862:	4a5f      	ldr	r2, [pc, #380]	; (80159e0 <HAL_GPIO_DeInit+0x1a4>)
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	089b      	lsrs	r3, r3, #2
 8015868:	3302      	adds	r3, #2
 801586a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801586e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	f003 0303 	and.w	r3, r3, #3
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	220f      	movs	r2, #15
 801587a:	fa02 f303 	lsl.w	r3, r2, r3
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	4013      	ands	r3, r2
 8015882:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801588a:	d019      	beq.n	80158c0 <HAL_GPIO_DeInit+0x84>
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	4a55      	ldr	r2, [pc, #340]	; (80159e4 <HAL_GPIO_DeInit+0x1a8>)
 8015890:	4293      	cmp	r3, r2
 8015892:	d013      	beq.n	80158bc <HAL_GPIO_DeInit+0x80>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a54      	ldr	r2, [pc, #336]	; (80159e8 <HAL_GPIO_DeInit+0x1ac>)
 8015898:	4293      	cmp	r3, r2
 801589a:	d00d      	beq.n	80158b8 <HAL_GPIO_DeInit+0x7c>
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	4a53      	ldr	r2, [pc, #332]	; (80159ec <HAL_GPIO_DeInit+0x1b0>)
 80158a0:	4293      	cmp	r3, r2
 80158a2:	d007      	beq.n	80158b4 <HAL_GPIO_DeInit+0x78>
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	4a52      	ldr	r2, [pc, #328]	; (80159f0 <HAL_GPIO_DeInit+0x1b4>)
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d101      	bne.n	80158b0 <HAL_GPIO_DeInit+0x74>
 80158ac:	2304      	movs	r3, #4
 80158ae:	e008      	b.n	80158c2 <HAL_GPIO_DeInit+0x86>
 80158b0:	2307      	movs	r3, #7
 80158b2:	e006      	b.n	80158c2 <HAL_GPIO_DeInit+0x86>
 80158b4:	2303      	movs	r3, #3
 80158b6:	e004      	b.n	80158c2 <HAL_GPIO_DeInit+0x86>
 80158b8:	2302      	movs	r3, #2
 80158ba:	e002      	b.n	80158c2 <HAL_GPIO_DeInit+0x86>
 80158bc:	2301      	movs	r3, #1
 80158be:	e000      	b.n	80158c2 <HAL_GPIO_DeInit+0x86>
 80158c0:	2300      	movs	r3, #0
 80158c2:	697a      	ldr	r2, [r7, #20]
 80158c4:	f002 0203 	and.w	r2, r2, #3
 80158c8:	0092      	lsls	r2, r2, #2
 80158ca:	4093      	lsls	r3, r2
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d136      	bne.n	8015940 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80158d2:	4b48      	ldr	r3, [pc, #288]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 80158d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	43db      	mvns	r3, r3
 80158dc:	4945      	ldr	r1, [pc, #276]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 80158de:	4013      	ands	r3, r2
 80158e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80158e4:	4b43      	ldr	r3, [pc, #268]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 80158e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	43db      	mvns	r3, r3
 80158ee:	4941      	ldr	r1, [pc, #260]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 80158f0:	4013      	ands	r3, r2
 80158f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80158f6:	4b3f      	ldr	r3, [pc, #252]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	43db      	mvns	r3, r3
 80158fe:	493d      	ldr	r1, [pc, #244]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 8015900:	4013      	ands	r3, r2
 8015902:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015904:	4b3b      	ldr	r3, [pc, #236]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	43db      	mvns	r3, r3
 801590c:	4939      	ldr	r1, [pc, #228]	; (80159f4 <HAL_GPIO_DeInit+0x1b8>)
 801590e:	4013      	ands	r3, r2
 8015910:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	f003 0303 	and.w	r3, r3, #3
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	220f      	movs	r2, #15
 801591c:	fa02 f303 	lsl.w	r3, r2, r3
 8015920:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015922:	4a2f      	ldr	r2, [pc, #188]	; (80159e0 <HAL_GPIO_DeInit+0x1a4>)
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	089b      	lsrs	r3, r3, #2
 8015928:	3302      	adds	r3, #2
 801592a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	43da      	mvns	r2, r3
 8015932:	482b      	ldr	r0, [pc, #172]	; (80159e0 <HAL_GPIO_DeInit+0x1a4>)
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	089b      	lsrs	r3, r3, #2
 8015938:	400a      	ands	r2, r1
 801593a:	3302      	adds	r3, #2
 801593c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	005b      	lsls	r3, r3, #1
 8015948:	2103      	movs	r1, #3
 801594a:	fa01 f303 	lsl.w	r3, r1, r3
 801594e:	431a      	orrs	r2, r3
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	08da      	lsrs	r2, r3, #3
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3208      	adds	r2, #8
 801595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f003 0307 	and.w	r3, r3, #7
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	220f      	movs	r2, #15
 801596a:	fa02 f303 	lsl.w	r3, r2, r3
 801596e:	43db      	mvns	r3, r3
 8015970:	697a      	ldr	r2, [r7, #20]
 8015972:	08d2      	lsrs	r2, r2, #3
 8015974:	4019      	ands	r1, r3
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	3208      	adds	r2, #8
 801597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	68da      	ldr	r2, [r3, #12]
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	2103      	movs	r1, #3
 8015988:	fa01 f303 	lsl.w	r3, r1, r3
 801598c:	43db      	mvns	r3, r3
 801598e:	401a      	ands	r2, r3
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	685a      	ldr	r2, [r3, #4]
 8015998:	2101      	movs	r1, #1
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	fa01 f303 	lsl.w	r3, r1, r3
 80159a0:	43db      	mvns	r3, r3
 80159a2:	401a      	ands	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	689a      	ldr	r2, [r3, #8]
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	2103      	movs	r1, #3
 80159b2:	fa01 f303 	lsl.w	r3, r1, r3
 80159b6:	43db      	mvns	r3, r3
 80159b8:	401a      	ands	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	3301      	adds	r3, #1
 80159c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80159c4:	683a      	ldr	r2, [r7, #0]
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	fa22 f303 	lsr.w	r3, r2, r3
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	f47f af3d 	bne.w	801584c <HAL_GPIO_DeInit+0x10>
  }
}
 80159d2:	bf00      	nop
 80159d4:	bf00      	nop
 80159d6:	371c      	adds	r7, #28
 80159d8:	46bd      	mov	sp, r7
 80159da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159de:	4770      	bx	lr
 80159e0:	40010000 	.word	0x40010000
 80159e4:	48000400 	.word	0x48000400
 80159e8:	48000800 	.word	0x48000800
 80159ec:	48000c00 	.word	0x48000c00
 80159f0:	48001000 	.word	0x48001000
 80159f4:	58000800 	.word	0x58000800

080159f8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80159f8:	b480      	push	{r7}
 80159fa:	b085      	sub	sp, #20
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	460b      	mov	r3, r1
 8015a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	691a      	ldr	r2, [r3, #16]
 8015a08:	887b      	ldrh	r3, [r7, #2]
 8015a0a:	4013      	ands	r3, r2
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015a10:	2301      	movs	r3, #1
 8015a12:	73fb      	strb	r3, [r7, #15]
 8015a14:	e001      	b.n	8015a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015a16:	2300      	movs	r3, #0
 8015a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3714      	adds	r7, #20
 8015a20:	46bd      	mov	sp, r7
 8015a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a26:	4770      	bx	lr

08015a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	460b      	mov	r3, r1
 8015a32:	807b      	strh	r3, [r7, #2]
 8015a34:	4613      	mov	r3, r2
 8015a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015a38:	787b      	ldrb	r3, [r7, #1]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d003      	beq.n	8015a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015a3e:	887a      	ldrh	r2, [r7, #2]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015a44:	e002      	b.n	8015a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015a46:	887a      	ldrh	r2, [r7, #2]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015a4c:	bf00      	nop
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d101      	bne.n	8015a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015a66:	2301      	movs	r3, #1
 8015a68:	e081      	b.n	8015b6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d106      	bne.n	8015a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f000 f8a8 	bl	8015bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2224      	movs	r2, #36	; 0x24
 8015a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	f022 0201 	bic.w	r2, r2, #1
 8015a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	685a      	ldr	r2, [r3, #4]
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	689a      	ldr	r2, [r3, #8]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d107      	bne.n	8015ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	689a      	ldr	r2, [r3, #8]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015ace:	609a      	str	r2, [r3, #8]
 8015ad0:	e006      	b.n	8015ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	689a      	ldr	r2, [r3, #8]
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	2b02      	cmp	r3, #2
 8015ae6:	d104      	bne.n	8015af2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	6812      	ldr	r2, [r2, #0]
 8015afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	68da      	ldr	r2, [r3, #12]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	691a      	ldr	r2, [r3, #16]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	699b      	ldr	r3, [r3, #24]
 8015b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	430a      	orrs	r2, r1
 8015b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	69d9      	ldr	r1, [r3, #28]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6a1a      	ldr	r2, [r3, #32]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	430a      	orrs	r2, r1
 8015b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f042 0201 	orr.w	r2, r2, #1
 8015b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2220      	movs	r2, #32
 8015b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2200      	movs	r2, #0
 8015b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2200      	movs	r2, #0
 8015b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015b6c:	2300      	movs	r3, #0
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3708      	adds	r7, #8
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}

08015b76 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015b76:	b580      	push	{r7, lr}
 8015b78:	b082      	sub	sp, #8
 8015b7a:	af00      	add	r7, sp, #0
 8015b7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d101      	bne.n	8015b88 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015b84:	2301      	movs	r3, #1
 8015b86:	e021      	b.n	8015bcc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2224      	movs	r2, #36	; 0x24
 8015b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	681a      	ldr	r2, [r3, #0]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	f022 0201 	bic.w	r2, r2, #1
 8015b9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f000 f821 	bl	8015be8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015bca:	2300      	movs	r3, #0
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015bf0:	bf00      	nop
 8015bf2:	370c      	adds	r7, #12
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b088      	sub	sp, #32
 8015c00:	af02      	add	r7, sp, #8
 8015c02:	60f8      	str	r0, [r7, #12]
 8015c04:	607a      	str	r2, [r7, #4]
 8015c06:	461a      	mov	r2, r3
 8015c08:	460b      	mov	r3, r1
 8015c0a:	817b      	strh	r3, [r7, #10]
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	2b20      	cmp	r3, #32
 8015c1a:	f040 80da 	bne.w	8015dd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d101      	bne.n	8015c2c <HAL_I2C_Master_Transmit+0x30>
 8015c28:	2302      	movs	r3, #2
 8015c2a:	e0d3      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2201      	movs	r2, #1
 8015c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015c34:	f7ff fb76 	bl	8015324 <HAL_GetTick>
 8015c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	2319      	movs	r3, #25
 8015c40:	2201      	movs	r2, #1
 8015c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f000 fa00 	bl	801604c <I2C_WaitOnFlagUntilTimeout>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d001      	beq.n	8015c56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015c52:	2301      	movs	r3, #1
 8015c54:	e0be      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2221      	movs	r2, #33	; 0x21
 8015c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2210      	movs	r2, #16
 8015c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	893a      	ldrh	r2, [r7, #8]
 8015c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	2bff      	cmp	r3, #255	; 0xff
 8015c86:	d90e      	bls.n	8015ca6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	22ff      	movs	r2, #255	; 0xff
 8015c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c92:	b2da      	uxtb	r2, r3
 8015c94:	8979      	ldrh	r1, [r7, #10]
 8015c96:	4b51      	ldr	r3, [pc, #324]	; (8015ddc <HAL_I2C_Master_Transmit+0x1e0>)
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	f000 fbf6 	bl	8016490 <I2C_TransferConfig>
 8015ca4:	e06c      	b.n	8015d80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cb4:	b2da      	uxtb	r2, r3
 8015cb6:	8979      	ldrh	r1, [r7, #10]
 8015cb8:	4b48      	ldr	r3, [pc, #288]	; (8015ddc <HAL_I2C_Master_Transmit+0x1e0>)
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015cc0:	68f8      	ldr	r0, [r7, #12]
 8015cc2:	f000 fbe5 	bl	8016490 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015cc6:	e05b      	b.n	8015d80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015cc8:	697a      	ldr	r2, [r7, #20]
 8015cca:	6a39      	ldr	r1, [r7, #32]
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f000 f9fd 	bl	80160cc <I2C_WaitOnTXISFlagUntilTimeout>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e07b      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce0:	781a      	ldrb	r2, [r3, #0]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cec:	1c5a      	adds	r2, r3, #1
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	3b01      	subs	r3, #1
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d04:	3b01      	subs	r3, #1
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d034      	beq.n	8015d80 <HAL_I2C_Master_Transmit+0x184>
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d130      	bne.n	8015d80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	2200      	movs	r2, #0
 8015d26:	2180      	movs	r1, #128	; 0x80
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f000 f98f 	bl	801604c <I2C_WaitOnFlagUntilTimeout>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e04d      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	2bff      	cmp	r3, #255	; 0xff
 8015d40:	d90e      	bls.n	8015d60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	22ff      	movs	r2, #255	; 0xff
 8015d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d4c:	b2da      	uxtb	r2, r3
 8015d4e:	8979      	ldrh	r1, [r7, #10]
 8015d50:	2300      	movs	r3, #0
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f000 fb99 	bl	8016490 <I2C_TransferConfig>
 8015d5e:	e00f      	b.n	8015d80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d64:	b29a      	uxth	r2, r3
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d6e:	b2da      	uxtb	r2, r3
 8015d70:	8979      	ldrh	r1, [r7, #10]
 8015d72:	2300      	movs	r3, #0
 8015d74:	9300      	str	r3, [sp, #0]
 8015d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015d7a:	68f8      	ldr	r0, [r7, #12]
 8015d7c:	f000 fb88 	bl	8016490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d19e      	bne.n	8015cc8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d8a:	697a      	ldr	r2, [r7, #20]
 8015d8c:	6a39      	ldr	r1, [r7, #32]
 8015d8e:	68f8      	ldr	r0, [r7, #12]
 8015d90:	f000 f9dc 	bl	801614c <I2C_WaitOnSTOPFlagUntilTimeout>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d001      	beq.n	8015d9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	e01a      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	2220      	movs	r2, #32
 8015da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	6859      	ldr	r1, [r3, #4]
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	4b0b      	ldr	r3, [pc, #44]	; (8015de0 <HAL_I2C_Master_Transmit+0x1e4>)
 8015db2:	400b      	ands	r3, r1
 8015db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	2220      	movs	r2, #32
 8015dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e000      	b.n	8015dd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015dd2:	2302      	movs	r3, #2
  }
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3718      	adds	r7, #24
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}
 8015ddc:	80002000 	.word	0x80002000
 8015de0:	fe00e800 	.word	0xfe00e800

08015de4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b088      	sub	sp, #32
 8015de8:	af02      	add	r7, sp, #8
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	607a      	str	r2, [r7, #4]
 8015dee:	461a      	mov	r2, r3
 8015df0:	460b      	mov	r3, r1
 8015df2:	817b      	strh	r3, [r7, #10]
 8015df4:	4613      	mov	r3, r2
 8015df6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	2b20      	cmp	r3, #32
 8015e02:	f040 80db 	bne.w	8015fbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d101      	bne.n	8015e14 <HAL_I2C_Master_Receive+0x30>
 8015e10:	2302      	movs	r3, #2
 8015e12:	e0d4      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2201      	movs	r2, #1
 8015e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015e1c:	f7ff fa82 	bl	8015324 <HAL_GetTick>
 8015e20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	2319      	movs	r3, #25
 8015e28:	2201      	movs	r2, #1
 8015e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015e2e:	68f8      	ldr	r0, [r7, #12]
 8015e30:	f000 f90c 	bl	801604c <I2C_WaitOnFlagUntilTimeout>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d001      	beq.n	8015e3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	e0bf      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2222      	movs	r2, #34	; 0x22
 8015e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2210      	movs	r2, #16
 8015e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2200      	movs	r2, #0
 8015e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	893a      	ldrh	r2, [r7, #8]
 8015e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2200      	movs	r2, #0
 8015e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e6a:	b29b      	uxth	r3, r3
 8015e6c:	2bff      	cmp	r3, #255	; 0xff
 8015e6e:	d90e      	bls.n	8015e8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	22ff      	movs	r2, #255	; 0xff
 8015e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e7a:	b2da      	uxtb	r2, r3
 8015e7c:	8979      	ldrh	r1, [r7, #10]
 8015e7e:	4b52      	ldr	r3, [pc, #328]	; (8015fc8 <HAL_I2C_Master_Receive+0x1e4>)
 8015e80:	9300      	str	r3, [sp, #0]
 8015e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e86:	68f8      	ldr	r0, [r7, #12]
 8015e88:	f000 fb02 	bl	8016490 <I2C_TransferConfig>
 8015e8c:	e06d      	b.n	8015f6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e9c:	b2da      	uxtb	r2, r3
 8015e9e:	8979      	ldrh	r1, [r7, #10]
 8015ea0:	4b49      	ldr	r3, [pc, #292]	; (8015fc8 <HAL_I2C_Master_Receive+0x1e4>)
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015ea8:	68f8      	ldr	r0, [r7, #12]
 8015eaa:	f000 faf1 	bl	8016490 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015eae:	e05c      	b.n	8015f6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015eb0:	697a      	ldr	r2, [r7, #20]
 8015eb2:	6a39      	ldr	r1, [r7, #32]
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f000 f985 	bl	80161c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d001      	beq.n	8015ec4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	e07c      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ece:	b2d2      	uxtb	r2, r2
 8015ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed6:	1c5a      	adds	r2, r3, #1
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ee0:	3b01      	subs	r3, #1
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d034      	beq.n	8015f6a <HAL_I2C_Master_Receive+0x186>
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d130      	bne.n	8015f6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	6a3b      	ldr	r3, [r7, #32]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	2180      	movs	r1, #128	; 0x80
 8015f12:	68f8      	ldr	r0, [r7, #12]
 8015f14:	f000 f89a 	bl	801604c <I2C_WaitOnFlagUntilTimeout>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d001      	beq.n	8015f22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e04d      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	2bff      	cmp	r3, #255	; 0xff
 8015f2a:	d90e      	bls.n	8015f4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	22ff      	movs	r2, #255	; 0xff
 8015f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f36:	b2da      	uxtb	r2, r3
 8015f38:	8979      	ldrh	r1, [r7, #10]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015f42:	68f8      	ldr	r0, [r7, #12]
 8015f44:	f000 faa4 	bl	8016490 <I2C_TransferConfig>
 8015f48:	e00f      	b.n	8015f6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f58:	b2da      	uxtb	r2, r3
 8015f5a:	8979      	ldrh	r1, [r7, #10]
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	9300      	str	r3, [sp, #0]
 8015f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f000 fa93 	bl	8016490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d19d      	bne.n	8015eb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f74:	697a      	ldr	r2, [r7, #20]
 8015f76:	6a39      	ldr	r1, [r7, #32]
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	f000 f8e7 	bl	801614c <I2C_WaitOnSTOPFlagUntilTimeout>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d001      	beq.n	8015f88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015f84:	2301      	movs	r3, #1
 8015f86:	e01a      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2220      	movs	r2, #32
 8015f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	6859      	ldr	r1, [r3, #4]
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	4b0c      	ldr	r3, [pc, #48]	; (8015fcc <HAL_I2C_Master_Receive+0x1e8>)
 8015f9c:	400b      	ands	r3, r1
 8015f9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2220      	movs	r2, #32
 8015fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2200      	movs	r2, #0
 8015fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	e000      	b.n	8015fbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015fbc:	2302      	movs	r3, #2
  }
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3718      	adds	r7, #24
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}
 8015fc6:	bf00      	nop
 8015fc8:	80002400 	.word	0x80002400
 8015fcc:	fe00e800 	.word	0xfe00e800

08015fd0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015fde:	b2db      	uxtb	r3, r3
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr

08015fec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	699b      	ldr	r3, [r3, #24]
 8016012:	f003 0302 	and.w	r3, r3, #2
 8016016:	2b02      	cmp	r3, #2
 8016018:	d103      	bne.n	8016022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	2200      	movs	r2, #0
 8016020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	699b      	ldr	r3, [r3, #24]
 8016028:	f003 0301 	and.w	r3, r3, #1
 801602c:	2b01      	cmp	r3, #1
 801602e:	d007      	beq.n	8016040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	699a      	ldr	r2, [r3, #24]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f042 0201 	orr.w	r2, r2, #1
 801603e:	619a      	str	r2, [r3, #24]
  }
}
 8016040:	bf00      	nop
 8016042:	370c      	adds	r7, #12
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b084      	sub	sp, #16
 8016050:	af00      	add	r7, sp, #0
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	603b      	str	r3, [r7, #0]
 8016058:	4613      	mov	r3, r2
 801605a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801605c:	e022      	b.n	80160a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016064:	d01e      	beq.n	80160a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016066:	f7ff f95d 	bl	8015324 <HAL_GetTick>
 801606a:	4602      	mov	r2, r0
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	1ad3      	subs	r3, r2, r3
 8016070:	683a      	ldr	r2, [r7, #0]
 8016072:	429a      	cmp	r2, r3
 8016074:	d302      	bcc.n	801607c <I2C_WaitOnFlagUntilTimeout+0x30>
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d113      	bne.n	80160a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016080:	f043 0220 	orr.w	r2, r3, #32
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2220      	movs	r2, #32
 801608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2200      	movs	r2, #0
 8016094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2200      	movs	r2, #0
 801609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80160a0:	2301      	movs	r3, #1
 80160a2:	e00f      	b.n	80160c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	699a      	ldr	r2, [r3, #24]
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	4013      	ands	r3, r2
 80160ae:	68ba      	ldr	r2, [r7, #8]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	bf0c      	ite	eq
 80160b4:	2301      	moveq	r3, #1
 80160b6:	2300      	movne	r3, #0
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	461a      	mov	r2, r3
 80160bc:	79fb      	ldrb	r3, [r7, #7]
 80160be:	429a      	cmp	r2, r3
 80160c0:	d0cd      	beq.n	801605e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80160c2:	2300      	movs	r3, #0
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3710      	adds	r7, #16
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}

080160cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	60f8      	str	r0, [r7, #12]
 80160d4:	60b9      	str	r1, [r7, #8]
 80160d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80160d8:	e02c      	b.n	8016134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	68b9      	ldr	r1, [r7, #8]
 80160de:	68f8      	ldr	r0, [r7, #12]
 80160e0:	f000 f8ea 	bl	80162b8 <I2C_IsErrorOccurred>
 80160e4:	4603      	mov	r3, r0
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d001      	beq.n	80160ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160ea:	2301      	movs	r3, #1
 80160ec:	e02a      	b.n	8016144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160f4:	d01e      	beq.n	8016134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80160f6:	f7ff f915 	bl	8015324 <HAL_GetTick>
 80160fa:	4602      	mov	r2, r0
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	1ad3      	subs	r3, r2, r3
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	429a      	cmp	r2, r3
 8016104:	d302      	bcc.n	801610c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d113      	bne.n	8016134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016110:	f043 0220 	orr.w	r2, r3, #32
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2220      	movs	r2, #32
 801611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	2200      	movs	r2, #0
 8016124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2200      	movs	r2, #0
 801612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016130:	2301      	movs	r3, #1
 8016132:	e007      	b.n	8016144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	699b      	ldr	r3, [r3, #24]
 801613a:	f003 0302 	and.w	r3, r3, #2
 801613e:	2b02      	cmp	r3, #2
 8016140:	d1cb      	bne.n	80160da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016142:	2300      	movs	r3, #0
}
 8016144:	4618      	mov	r0, r3
 8016146:	3710      	adds	r7, #16
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b084      	sub	sp, #16
 8016150:	af00      	add	r7, sp, #0
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	60b9      	str	r1, [r7, #8]
 8016156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016158:	e028      	b.n	80161ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801615a:	687a      	ldr	r2, [r7, #4]
 801615c:	68b9      	ldr	r1, [r7, #8]
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f000 f8aa 	bl	80162b8 <I2C_IsErrorOccurred>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d001      	beq.n	801616e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801616a:	2301      	movs	r3, #1
 801616c:	e026      	b.n	80161bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801616e:	f7ff f8d9 	bl	8015324 <HAL_GetTick>
 8016172:	4602      	mov	r2, r0
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	429a      	cmp	r2, r3
 801617c:	d302      	bcc.n	8016184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d113      	bne.n	80161ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016188:	f043 0220 	orr.w	r2, r3, #32
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2220      	movs	r2, #32
 8016194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2200      	movs	r2, #0
 801619c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2200      	movs	r2, #0
 80161a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80161a8:	2301      	movs	r3, #1
 80161aa:	e007      	b.n	80161bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	699b      	ldr	r3, [r3, #24]
 80161b2:	f003 0320 	and.w	r3, r3, #32
 80161b6:	2b20      	cmp	r3, #32
 80161b8:	d1cf      	bne.n	801615a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3710      	adds	r7, #16
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	60f8      	str	r0, [r7, #12]
 80161cc:	60b9      	str	r1, [r7, #8]
 80161ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80161d0:	e064      	b.n	801629c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	68b9      	ldr	r1, [r7, #8]
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	f000 f86e 	bl	80162b8 <I2C_IsErrorOccurred>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d001      	beq.n	80161e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80161e2:	2301      	movs	r3, #1
 80161e4:	e062      	b.n	80162ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	699b      	ldr	r3, [r3, #24]
 80161ec:	f003 0320 	and.w	r3, r3, #32
 80161f0:	2b20      	cmp	r3, #32
 80161f2:	d138      	bne.n	8016266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	699b      	ldr	r3, [r3, #24]
 80161fa:	f003 0304 	and.w	r3, r3, #4
 80161fe:	2b04      	cmp	r3, #4
 8016200:	d105      	bne.n	801620e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016206:	2b00      	cmp	r3, #0
 8016208:	d001      	beq.n	801620e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	e04e      	b.n	80162ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	699b      	ldr	r3, [r3, #24]
 8016214:	f003 0310 	and.w	r3, r3, #16
 8016218:	2b10      	cmp	r3, #16
 801621a:	d107      	bne.n	801622c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2210      	movs	r2, #16
 8016222:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2204      	movs	r2, #4
 8016228:	645a      	str	r2, [r3, #68]	; 0x44
 801622a:	e002      	b.n	8016232 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2200      	movs	r2, #0
 8016230:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2220      	movs	r2, #32
 8016238:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	6859      	ldr	r1, [r3, #4]
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	4b1b      	ldr	r3, [pc, #108]	; (80162b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8016246:	400b      	ands	r3, r1
 8016248:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2220      	movs	r2, #32
 801624e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2200      	movs	r2, #0
 8016256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2200      	movs	r2, #0
 801625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016262:	2301      	movs	r3, #1
 8016264:	e022      	b.n	80162ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016266:	f7ff f85d 	bl	8015324 <HAL_GetTick>
 801626a:	4602      	mov	r2, r0
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	1ad3      	subs	r3, r2, r3
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	429a      	cmp	r2, r3
 8016274:	d302      	bcc.n	801627c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d10f      	bne.n	801629c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016280:	f043 0220 	orr.w	r2, r3, #32
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	2220      	movs	r2, #32
 801628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	2200      	movs	r2, #0
 8016294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8016298:	2301      	movs	r3, #1
 801629a:	e007      	b.n	80162ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	699b      	ldr	r3, [r3, #24]
 80162a2:	f003 0304 	and.w	r3, r3, #4
 80162a6:	2b04      	cmp	r3, #4
 80162a8:	d193      	bne.n	80161d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	fe00e800 	.word	0xfe00e800

080162b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b08a      	sub	sp, #40	; 0x28
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162c4:	2300      	movs	r3, #0
 80162c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	699b      	ldr	r3, [r3, #24]
 80162d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80162d2:	2300      	movs	r3, #0
 80162d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	f003 0310 	and.w	r3, r3, #16
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d075      	beq.n	80163d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2210      	movs	r2, #16
 80162ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80162ec:	e056      	b.n	801639c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f4:	d052      	beq.n	801639c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80162f6:	f7ff f815 	bl	8015324 <HAL_GetTick>
 80162fa:	4602      	mov	r2, r0
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	429a      	cmp	r2, r3
 8016304:	d302      	bcc.n	801630c <I2C_IsErrorOccurred+0x54>
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d147      	bne.n	801639c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016316:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801631e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	699b      	ldr	r3, [r3, #24]
 8016326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801632a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801632e:	d12e      	bne.n	801638e <I2C_IsErrorOccurred+0xd6>
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016336:	d02a      	beq.n	801638e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8016338:	7cfb      	ldrb	r3, [r7, #19]
 801633a:	2b20      	cmp	r3, #32
 801633c:	d027      	beq.n	801638e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	685a      	ldr	r2, [r3, #4]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801634c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801634e:	f7fe ffe9 	bl	8015324 <HAL_GetTick>
 8016352:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016354:	e01b      	b.n	801638e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016356:	f7fe ffe5 	bl	8015324 <HAL_GetTick>
 801635a:	4602      	mov	r2, r0
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	1ad3      	subs	r3, r2, r3
 8016360:	2b19      	cmp	r3, #25
 8016362:	d914      	bls.n	801638e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016368:	f043 0220 	orr.w	r2, r3, #32
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2220      	movs	r2, #32
 8016374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	2200      	movs	r2, #0
 801637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2200      	movs	r2, #0
 8016384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8016388:	2301      	movs	r3, #1
 801638a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	699b      	ldr	r3, [r3, #24]
 8016394:	f003 0320 	and.w	r3, r3, #32
 8016398:	2b20      	cmp	r3, #32
 801639a:	d1dc      	bne.n	8016356 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	699b      	ldr	r3, [r3, #24]
 80163a2:	f003 0320 	and.w	r3, r3, #32
 80163a6:	2b20      	cmp	r3, #32
 80163a8:	d003      	beq.n	80163b2 <I2C_IsErrorOccurred+0xfa>
 80163aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d09d      	beq.n	80162ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80163b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d103      	bne.n	80163c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2220      	movs	r2, #32
 80163c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80163c2:	6a3b      	ldr	r3, [r7, #32]
 80163c4:	f043 0304 	orr.w	r3, r3, #4
 80163c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80163ca:	2301      	movs	r3, #1
 80163cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	699b      	ldr	r3, [r3, #24]
 80163d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80163d8:	69bb      	ldr	r3, [r7, #24]
 80163da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d00b      	beq.n	80163fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80163e2:	6a3b      	ldr	r3, [r7, #32]
 80163e4:	f043 0301 	orr.w	r3, r3, #1
 80163e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80163f4:	2301      	movs	r3, #1
 80163f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80163fa:	69bb      	ldr	r3, [r7, #24]
 80163fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016400:	2b00      	cmp	r3, #0
 8016402:	d00b      	beq.n	801641c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016404:	6a3b      	ldr	r3, [r7, #32]
 8016406:	f043 0308 	orr.w	r3, r3, #8
 801640a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016416:	2301      	movs	r3, #1
 8016418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801641c:	69bb      	ldr	r3, [r7, #24]
 801641e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00b      	beq.n	801643e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016426:	6a3b      	ldr	r3, [r7, #32]
 8016428:	f043 0302 	orr.w	r3, r3, #2
 801642c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016436:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016438:	2301      	movs	r3, #1
 801643a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801643e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016442:	2b00      	cmp	r3, #0
 8016444:	d01c      	beq.n	8016480 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f7ff fddc 	bl	8016004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	6859      	ldr	r1, [r3, #4]
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	681a      	ldr	r2, [r3, #0]
 8016456:	4b0d      	ldr	r3, [pc, #52]	; (801648c <I2C_IsErrorOccurred+0x1d4>)
 8016458:	400b      	ands	r3, r1
 801645a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016460:	6a3b      	ldr	r3, [r7, #32]
 8016462:	431a      	orrs	r2, r3
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2220      	movs	r2, #32
 801646c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2200      	movs	r2, #0
 801647c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016484:	4618      	mov	r0, r3
 8016486:	3728      	adds	r7, #40	; 0x28
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}
 801648c:	fe00e800 	.word	0xfe00e800

08016490 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016490:	b480      	push	{r7}
 8016492:	b087      	sub	sp, #28
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	607b      	str	r3, [r7, #4]
 801649a:	460b      	mov	r3, r1
 801649c:	817b      	strh	r3, [r7, #10]
 801649e:	4613      	mov	r3, r2
 80164a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164a2:	897b      	ldrh	r3, [r7, #10]
 80164a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80164a8:	7a7b      	ldrb	r3, [r7, #9]
 80164aa:	041b      	lsls	r3, r3, #16
 80164ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80164b6:	6a3b      	ldr	r3, [r7, #32]
 80164b8:	4313      	orrs	r3, r2
 80164ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	685a      	ldr	r2, [r3, #4]
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	0d5b      	lsrs	r3, r3, #21
 80164ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80164ce:	4b08      	ldr	r3, [pc, #32]	; (80164f0 <I2C_TransferConfig+0x60>)
 80164d0:	430b      	orrs	r3, r1
 80164d2:	43db      	mvns	r3, r3
 80164d4:	ea02 0103 	and.w	r1, r2, r3
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	697a      	ldr	r2, [r7, #20]
 80164de:	430a      	orrs	r2, r1
 80164e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80164e2:	bf00      	nop
 80164e4:	371c      	adds	r7, #28
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	03ff63ff 	.word	0x03ff63ff

080164f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b20      	cmp	r3, #32
 8016508:	d138      	bne.n	801657c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016510:	2b01      	cmp	r3, #1
 8016512:	d101      	bne.n	8016518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016514:	2302      	movs	r3, #2
 8016516:	e032      	b.n	801657e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2201      	movs	r2, #1
 801651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2224      	movs	r2, #36	; 0x24
 8016524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f022 0201 	bic.w	r2, r2, #1
 8016536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	6819      	ldr	r1, [r3, #0]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	683a      	ldr	r2, [r7, #0]
 8016554:	430a      	orrs	r2, r1
 8016556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f042 0201 	orr.w	r2, r2, #1
 8016566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2220      	movs	r2, #32
 801656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016578:	2300      	movs	r3, #0
 801657a:	e000      	b.n	801657e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801657c:	2302      	movs	r3, #2
  }
}
 801657e:	4618      	mov	r0, r3
 8016580:	370c      	adds	r7, #12
 8016582:	46bd      	mov	sp, r7
 8016584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016588:	4770      	bx	lr

0801658a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801658a:	b480      	push	{r7}
 801658c:	b085      	sub	sp, #20
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
 8016592:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801659a:	b2db      	uxtb	r3, r3
 801659c:	2b20      	cmp	r3, #32
 801659e:	d139      	bne.n	8016614 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d101      	bne.n	80165ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80165aa:	2302      	movs	r3, #2
 80165ac:	e033      	b.n	8016616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2201      	movs	r2, #1
 80165b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2224      	movs	r2, #36	; 0x24
 80165ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	f022 0201 	bic.w	r2, r2, #1
 80165cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80165dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	021b      	lsls	r3, r3, #8
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	4313      	orrs	r3, r2
 80165e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	68fa      	ldr	r2, [r7, #12]
 80165ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	681a      	ldr	r2, [r3, #0]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f042 0201 	orr.w	r2, r2, #1
 80165fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2220      	movs	r2, #32
 8016604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2200      	movs	r2, #0
 801660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016610:	2300      	movs	r3, #0
 8016612:	e000      	b.n	8016616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016614:	2302      	movs	r3, #2
  }
}
 8016616:	4618      	mov	r0, r3
 8016618:	3714      	adds	r7, #20
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr

08016622 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016624:	b08b      	sub	sp, #44	; 0x2c
 8016626:	af06      	add	r7, sp, #24
 8016628:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d101      	bne.n	8016634 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016630:	2301      	movs	r3, #1
 8016632:	e0cb      	b.n	80167cc <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801663a:	b2db      	uxtb	r3, r3
 801663c:	2b00      	cmp	r3, #0
 801663e:	d106      	bne.n	801664e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2200      	movs	r2, #0
 8016644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	f7ea fb09 	bl	8000c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2203      	movs	r2, #3
 8016652:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	4618      	mov	r0, r3
 801665c:	f002 fed0 	bl	8019400 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016660:	2300      	movs	r3, #0
 8016662:	73fb      	strb	r3, [r7, #15]
 8016664:	e040      	b.n	80166e8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016666:	7bfb      	ldrb	r3, [r7, #15]
 8016668:	6879      	ldr	r1, [r7, #4]
 801666a:	1c5a      	adds	r2, r3, #1
 801666c:	4613      	mov	r3, r2
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	4413      	add	r3, r2
 8016672:	00db      	lsls	r3, r3, #3
 8016674:	440b      	add	r3, r1
 8016676:	3301      	adds	r3, #1
 8016678:	2201      	movs	r2, #1
 801667a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801667c:	7bfb      	ldrb	r3, [r7, #15]
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	1c5a      	adds	r2, r3, #1
 8016682:	4613      	mov	r3, r2
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	4413      	add	r3, r2
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	440b      	add	r3, r1
 801668c:	7bfa      	ldrb	r2, [r7, #15]
 801668e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016690:	7bfb      	ldrb	r3, [r7, #15]
 8016692:	6879      	ldr	r1, [r7, #4]
 8016694:	1c5a      	adds	r2, r3, #1
 8016696:	4613      	mov	r3, r2
 8016698:	009b      	lsls	r3, r3, #2
 801669a:	4413      	add	r3, r2
 801669c:	00db      	lsls	r3, r3, #3
 801669e:	440b      	add	r3, r1
 80166a0:	3303      	adds	r3, #3
 80166a2:	2200      	movs	r2, #0
 80166a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80166a6:	7bfa      	ldrb	r2, [r7, #15]
 80166a8:	6879      	ldr	r1, [r7, #4]
 80166aa:	4613      	mov	r3, r2
 80166ac:	009b      	lsls	r3, r3, #2
 80166ae:	4413      	add	r3, r2
 80166b0:	00db      	lsls	r3, r3, #3
 80166b2:	440b      	add	r3, r1
 80166b4:	3338      	adds	r3, #56	; 0x38
 80166b6:	2200      	movs	r2, #0
 80166b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80166ba:	7bfa      	ldrb	r2, [r7, #15]
 80166bc:	6879      	ldr	r1, [r7, #4]
 80166be:	4613      	mov	r3, r2
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	4413      	add	r3, r2
 80166c4:	00db      	lsls	r3, r3, #3
 80166c6:	440b      	add	r3, r1
 80166c8:	333c      	adds	r3, #60	; 0x3c
 80166ca:	2200      	movs	r2, #0
 80166cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80166ce:	7bfa      	ldrb	r2, [r7, #15]
 80166d0:	6879      	ldr	r1, [r7, #4]
 80166d2:	4613      	mov	r3, r2
 80166d4:	009b      	lsls	r3, r3, #2
 80166d6:	4413      	add	r3, r2
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	440b      	add	r3, r1
 80166dc:	3340      	adds	r3, #64	; 0x40
 80166de:	2200      	movs	r2, #0
 80166e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80166e2:	7bfb      	ldrb	r3, [r7, #15]
 80166e4:	3301      	adds	r3, #1
 80166e6:	73fb      	strb	r3, [r7, #15]
 80166e8:	7bfa      	ldrb	r2, [r7, #15]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d3b9      	bcc.n	8016666 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80166f2:	2300      	movs	r3, #0
 80166f4:	73fb      	strb	r3, [r7, #15]
 80166f6:	e044      	b.n	8016782 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80166f8:	7bfa      	ldrb	r2, [r7, #15]
 80166fa:	6879      	ldr	r1, [r7, #4]
 80166fc:	4613      	mov	r3, r2
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	4413      	add	r3, r2
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	440b      	add	r3, r1
 8016706:	f203 1369 	addw	r3, r3, #361	; 0x169
 801670a:	2200      	movs	r2, #0
 801670c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801670e:	7bfa      	ldrb	r2, [r7, #15]
 8016710:	6879      	ldr	r1, [r7, #4]
 8016712:	4613      	mov	r3, r2
 8016714:	009b      	lsls	r3, r3, #2
 8016716:	4413      	add	r3, r2
 8016718:	00db      	lsls	r3, r3, #3
 801671a:	440b      	add	r3, r1
 801671c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016720:	7bfa      	ldrb	r2, [r7, #15]
 8016722:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016724:	7bfa      	ldrb	r2, [r7, #15]
 8016726:	6879      	ldr	r1, [r7, #4]
 8016728:	4613      	mov	r3, r2
 801672a:	009b      	lsls	r3, r3, #2
 801672c:	4413      	add	r3, r2
 801672e:	00db      	lsls	r3, r3, #3
 8016730:	440b      	add	r3, r1
 8016732:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8016736:	2200      	movs	r2, #0
 8016738:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801673a:	7bfa      	ldrb	r2, [r7, #15]
 801673c:	6879      	ldr	r1, [r7, #4]
 801673e:	4613      	mov	r3, r2
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	4413      	add	r3, r2
 8016744:	00db      	lsls	r3, r3, #3
 8016746:	440b      	add	r3, r1
 8016748:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801674c:	2200      	movs	r2, #0
 801674e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016750:	7bfa      	ldrb	r2, [r7, #15]
 8016752:	6879      	ldr	r1, [r7, #4]
 8016754:	4613      	mov	r3, r2
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	4413      	add	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	440b      	add	r3, r1
 801675e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016762:	2200      	movs	r2, #0
 8016764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016766:	7bfa      	ldrb	r2, [r7, #15]
 8016768:	6879      	ldr	r1, [r7, #4]
 801676a:	4613      	mov	r3, r2
 801676c:	009b      	lsls	r3, r3, #2
 801676e:	4413      	add	r3, r2
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	440b      	add	r3, r1
 8016774:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016778:	2200      	movs	r2, #0
 801677a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801677c:	7bfb      	ldrb	r3, [r7, #15]
 801677e:	3301      	adds	r3, #1
 8016780:	73fb      	strb	r3, [r7, #15]
 8016782:	7bfa      	ldrb	r2, [r7, #15]
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	429a      	cmp	r2, r3
 801678a:	d3b5      	bcc.n	80166f8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	603b      	str	r3, [r7, #0]
 8016792:	687e      	ldr	r6, [r7, #4]
 8016794:	466d      	mov	r5, sp
 8016796:	f106 0410 	add.w	r4, r6, #16
 801679a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801679c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801679e:	6823      	ldr	r3, [r4, #0]
 80167a0:	602b      	str	r3, [r5, #0]
 80167a2:	1d33      	adds	r3, r6, #4
 80167a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80167a6:	6838      	ldr	r0, [r7, #0]
 80167a8:	f002 fe45 	bl	8019436 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2200      	movs	r2, #0
 80167b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2201      	movs	r2, #1
 80167b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	69db      	ldr	r3, [r3, #28]
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d102      	bne.n	80167ca <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 f805 	bl	80167d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80167ca:	2300      	movs	r3, #0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3714      	adds	r7, #20
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b085      	sub	sp, #20
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2201      	movs	r2, #1
 80167e6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2200      	movs	r2, #0
 80167ee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80167f8:	b29b      	uxth	r3, r3
 80167fa:	f043 0301 	orr.w	r3, r3, #1
 80167fe:	b29a      	uxth	r2, r3
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801680c:	b29b      	uxth	r3, r3
 801680e:	f043 0302 	orr.w	r3, r3, #2
 8016812:	b29a      	uxth	r2, r3
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801681a:	2300      	movs	r3, #0
}
 801681c:	4618      	mov	r0, r3
 801681e:	3714      	adds	r7, #20
 8016820:	46bd      	mov	sp, r7
 8016822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016826:	4770      	bx	lr

08016828 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016828:	b480      	push	{r7}
 801682a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801682c:	4b05      	ldr	r3, [pc, #20]	; (8016844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4a04      	ldr	r2, [pc, #16]	; (8016844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016836:	6013      	str	r3, [r2, #0]
}
 8016838:	bf00      	nop
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	58000400 	.word	0x58000400

08016848 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016848:	b480      	push	{r7}
 801684a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 801684c:	4b04      	ldr	r3, [pc, #16]	; (8016860 <HAL_PWREx_GetVoltageRange+0x18>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016854:	4618      	mov	r0, r3
 8016856:	46bd      	mov	sp, r7
 8016858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop
 8016860:	58000400 	.word	0x58000400

08016864 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016864:	b480      	push	{r7}
 8016866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016876:	d101      	bne.n	801687c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016878:	2301      	movs	r3, #1
 801687a:	e000      	b.n	801687e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801687c:	2300      	movs	r3, #0
}
 801687e:	4618      	mov	r0, r3
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr

08016888 <LL_RCC_HSE_Enable>:
{
 8016888:	b480      	push	{r7}
 801688a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801688c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801689a:	6013      	str	r3, [r2, #0]
}
 801689c:	bf00      	nop
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr

080168a6 <LL_RCC_HSE_Disable>:
{
 80168a6:	b480      	push	{r7}
 80168a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80168aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80168b8:	6013      	str	r3, [r2, #0]
}
 80168ba:	bf00      	nop
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <LL_RCC_HSE_IsReady>:
{
 80168c4:	b480      	push	{r7}
 80168c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80168c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80168d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80168d6:	d101      	bne.n	80168dc <LL_RCC_HSE_IsReady+0x18>
 80168d8:	2301      	movs	r3, #1
 80168da:	e000      	b.n	80168de <LL_RCC_HSE_IsReady+0x1a>
 80168dc:	2300      	movs	r3, #0
}
 80168de:	4618      	mov	r0, r3
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr

080168e8 <LL_RCC_HSI_Enable>:
{
 80168e8:	b480      	push	{r7}
 80168ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80168ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80168fa:	6013      	str	r3, [r2, #0]
}
 80168fc:	bf00      	nop
 80168fe:	46bd      	mov	sp, r7
 8016900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016904:	4770      	bx	lr

08016906 <LL_RCC_HSI_Disable>:
{
 8016906:	b480      	push	{r7}
 8016908:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801690a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016918:	6013      	str	r3, [r2, #0]
}
 801691a:	bf00      	nop
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr

08016924 <LL_RCC_HSI_IsReady>:
{
 8016924:	b480      	push	{r7}
 8016926:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016936:	d101      	bne.n	801693c <LL_RCC_HSI_IsReady+0x18>
 8016938:	2301      	movs	r3, #1
 801693a:	e000      	b.n	801693e <LL_RCC_HSI_IsReady+0x1a>
 801693c:	2300      	movs	r3, #0
}
 801693e:	4618      	mov	r0, r3
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016954:	685b      	ldr	r3, [r3, #4]
 8016956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	061b      	lsls	r3, r3, #24
 801695e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016962:	4313      	orrs	r3, r2
 8016964:	604b      	str	r3, [r1, #4]
}
 8016966:	bf00      	nop
 8016968:	370c      	adds	r7, #12
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr

08016972 <LL_RCC_HSI48_Enable>:
{
 8016972:	b480      	push	{r7}
 8016974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801697a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801697e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016982:	f043 0301 	orr.w	r3, r3, #1
 8016986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801698a:	bf00      	nop
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr

08016994 <LL_RCC_HSI48_Disable>:
{
 8016994:	b480      	push	{r7}
 8016996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801699c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80169a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169a4:	f023 0301 	bic.w	r3, r3, #1
 80169a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80169ac:	bf00      	nop
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr

080169b6 <LL_RCC_HSI48_IsReady>:
{
 80169b6:	b480      	push	{r7}
 80169b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80169ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80169c2:	f003 0302 	and.w	r3, r3, #2
 80169c6:	2b02      	cmp	r3, #2
 80169c8:	d101      	bne.n	80169ce <LL_RCC_HSI48_IsReady+0x18>
 80169ca:	2301      	movs	r3, #1
 80169cc:	e000      	b.n	80169d0 <LL_RCC_HSI48_IsReady+0x1a>
 80169ce:	2300      	movs	r3, #0
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr

080169da <LL_RCC_LSE_Enable>:
{
 80169da:	b480      	push	{r7}
 80169dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80169de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169ea:	f043 0301 	orr.w	r3, r3, #1
 80169ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80169f2:	bf00      	nop
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr

080169fc <LL_RCC_LSE_Disable>:
{
 80169fc:	b480      	push	{r7}
 80169fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a0c:	f023 0301 	bic.w	r3, r3, #1
 8016a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a14:	bf00      	nop
 8016a16:	46bd      	mov	sp, r7
 8016a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1c:	4770      	bx	lr

08016a1e <LL_RCC_LSE_EnableBypass>:
{
 8016a1e:	b480      	push	{r7}
 8016a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a2e:	f043 0304 	orr.w	r3, r3, #4
 8016a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a36:	bf00      	nop
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <LL_RCC_LSE_DisableBypass>:
{
 8016a40:	b480      	push	{r7}
 8016a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a50:	f023 0304 	bic.w	r3, r3, #4
 8016a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016a58:	bf00      	nop
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr

08016a62 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016a62:	b480      	push	{r7}
 8016a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a6e:	f003 0302 	and.w	r3, r3, #2
 8016a72:	2b02      	cmp	r3, #2
 8016a74:	d101      	bne.n	8016a7a <LL_RCC_LSE_IsReady+0x18>
 8016a76:	2301      	movs	r3, #1
 8016a78:	e000      	b.n	8016a7c <LL_RCC_LSE_IsReady+0x1a>
 8016a7a:	2300      	movs	r3, #0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a84:	4770      	bx	lr

08016a86 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016a86:	b480      	push	{r7}
 8016a88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a96:	f043 0301 	orr.w	r3, r3, #1
 8016a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016a9e:	bf00      	nop
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr

08016aa8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ab8:	f023 0301 	bic.w	r3, r3, #1
 8016abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016ac0:	bf00      	nop
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac8:	4770      	bx	lr

08016aca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016aca:	b480      	push	{r7}
 8016acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ad6:	f003 0302 	and.w	r3, r3, #2
 8016ada:	2b02      	cmp	r3, #2
 8016adc:	d101      	bne.n	8016ae2 <LL_RCC_LSI1_IsReady+0x18>
 8016ade:	2301      	movs	r3, #1
 8016ae0:	e000      	b.n	8016ae4 <LL_RCC_LSI1_IsReady+0x1a>
 8016ae2:	2300      	movs	r3, #0
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr

08016aee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016aee:	b480      	push	{r7}
 8016af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016afe:	f043 0304 	orr.w	r3, r3, #4
 8016b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016b06:	bf00      	nop
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0e:	4770      	bx	lr

08016b10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016b10:	b480      	push	{r7}
 8016b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b20:	f023 0304 	bic.w	r3, r3, #4
 8016b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016b28:	bf00      	nop
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr

08016b32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016b32:	b480      	push	{r7}
 8016b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b3e:	f003 0308 	and.w	r3, r3, #8
 8016b42:	2b08      	cmp	r3, #8
 8016b44:	d101      	bne.n	8016b4a <LL_RCC_LSI2_IsReady+0x18>
 8016b46:	2301      	movs	r3, #1
 8016b48:	e000      	b.n	8016b4c <LL_RCC_LSI2_IsReady+0x1a>
 8016b4a:	2300      	movs	r3, #0
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b54:	4770      	bx	lr

08016b56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016b56:	b480      	push	{r7}
 8016b58:	b083      	sub	sp, #12
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016b66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	021b      	lsls	r3, r3, #8
 8016b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b72:	4313      	orrs	r3, r2
 8016b74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016b78:	bf00      	nop
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr

08016b84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016b84:	b480      	push	{r7}
 8016b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b92:	f043 0301 	orr.w	r3, r3, #1
 8016b96:	6013      	str	r3, [r2, #0]
}
 8016b98:	bf00      	nop
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016ba2:	b480      	push	{r7}
 8016ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bb0:	f023 0301 	bic.w	r3, r3, #1
 8016bb4:	6013      	str	r3, [r2, #0]
}
 8016bb6:	bf00      	nop
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr

08016bc0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f003 0302 	and.w	r3, r3, #2
 8016bce:	2b02      	cmp	r3, #2
 8016bd0:	d101      	bne.n	8016bd6 <LL_RCC_MSI_IsReady+0x16>
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	e000      	b.n	8016bd8 <LL_RCC_MSI_IsReady+0x18>
 8016bd6:	2300      	movs	r3, #0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr

08016be2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016be2:	b480      	push	{r7}
 8016be4:	b083      	sub	sp, #12
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	4313      	orrs	r3, r2
 8016bfc:	600b      	str	r3, [r1, #0]
}
 8016bfe:	bf00      	nop
 8016c00:	370c      	adds	r7, #12
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr

08016c0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016c0a:	b480      	push	{r7}
 8016c0c:	b083      	sub	sp, #12
 8016c0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2bb0      	cmp	r3, #176	; 0xb0
 8016c20:	d901      	bls.n	8016c26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016c22:	23b0      	movs	r3, #176	; 0xb0
 8016c24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016c26:	687b      	ldr	r3, [r7, #4]
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	370c      	adds	r7, #12
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c32:	4770      	bx	lr

08016c34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	021b      	lsls	r3, r3, #8
 8016c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c4e:	4313      	orrs	r3, r2
 8016c50:	604b      	str	r3, [r1, #4]
}
 8016c52:	bf00      	nop
 8016c54:	370c      	adds	r7, #12
 8016c56:	46bd      	mov	sp, r7
 8016c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5c:	4770      	bx	lr

08016c5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016c5e:	b480      	push	{r7}
 8016c60:	b083      	sub	sp, #12
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c6a:	689b      	ldr	r3, [r3, #8]
 8016c6c:	f023 0203 	bic.w	r2, r3, #3
 8016c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	4313      	orrs	r3, r2
 8016c78:	608b      	str	r3, [r1, #8]
}
 8016c7a:	bf00      	nop
 8016c7c:	370c      	adds	r7, #12
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr

08016c86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016c86:	b480      	push	{r7}
 8016c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c8e:	689b      	ldr	r3, [r3, #8]
 8016c90:	f003 030c 	and.w	r3, r3, #12
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	46bd      	mov	sp, r7
 8016c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9c:	4770      	bx	lr

08016c9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016c9e:	b480      	push	{r7}
 8016ca0:	b083      	sub	sp, #12
 8016ca2:	af00      	add	r7, sp, #0
 8016ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016caa:	689b      	ldr	r3, [r3, #8]
 8016cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	4313      	orrs	r3, r2
 8016cb8:	608b      	str	r3, [r1, #8]
}
 8016cba:	bf00      	nop
 8016cbc:	370c      	adds	r7, #12
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc4:	4770      	bx	lr

08016cc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016cc6:	b480      	push	{r7}
 8016cc8:	b083      	sub	sp, #12
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	4313      	orrs	r3, r2
 8016ce2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016ce6:	bf00      	nop
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016cf2:	b480      	push	{r7}
 8016cf4:	b083      	sub	sp, #12
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016d02:	f023 020f 	bic.w	r2, r3, #15
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	091b      	lsrs	r3, r3, #4
 8016d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d0e:	4313      	orrs	r3, r2
 8016d10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016d14:	bf00      	nop
 8016d16:	370c      	adds	r7, #12
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1e:	4770      	bx	lr

08016d20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016d20:	b480      	push	{r7}
 8016d22:	b083      	sub	sp, #12
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d2c:	689b      	ldr	r3, [r3, #8]
 8016d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	608b      	str	r3, [r1, #8]
}
 8016d3c:	bf00      	nop
 8016d3e:	370c      	adds	r7, #12
 8016d40:	46bd      	mov	sp, r7
 8016d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d46:	4770      	bx	lr

08016d48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016d48:	b480      	push	{r7}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d54:	689b      	ldr	r3, [r3, #8]
 8016d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	4313      	orrs	r3, r2
 8016d62:	608b      	str	r3, [r1, #8]
}
 8016d64:	bf00      	nop
 8016d66:	370c      	adds	r7, #12
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016d70:	b480      	push	{r7}
 8016d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d78:	689b      	ldr	r3, [r3, #8]
 8016d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8016d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr

08016da2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016da2:	b480      	push	{r7}
 8016da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016daa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016dae:	011b      	lsls	r3, r3, #4
 8016db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr

08016dbe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016dbe:	b480      	push	{r7}
 8016dc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dc6:	689b      	ldr	r3, [r3, #8]
 8016dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016dd6:	b480      	push	{r7}
 8016dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr

08016dee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016dee:	b480      	push	{r7}
 8016df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016e00:	6013      	str	r3, [r2, #0]
}
 8016e02:	bf00      	nop
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr

08016e0c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016e1e:	6013      	str	r3, [r2, #0]
}
 8016e20:	bf00      	nop
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr

08016e2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016e2a:	b480      	push	{r7}
 8016e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016e3c:	d101      	bne.n	8016e42 <LL_RCC_PLL_IsReady+0x18>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	e000      	b.n	8016e44 <LL_RCC_PLL_IsReady+0x1a>
 8016e42:	2300      	movs	r3, #0
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr

08016e4e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016e4e:	b480      	push	{r7}
 8016e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	0a1b      	lsrs	r3, r3, #8
 8016e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016e80:	b480      	push	{r7}
 8016e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8016e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr

08016e98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8016e98:	b480      	push	{r7}
 8016e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8016e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ea0:	68db      	ldr	r3, [r3, #12]
 8016ea2:	f003 0303 	and.w	r3, r3, #3
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eae:	4770      	bx	lr

08016eb0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eb8:	689b      	ldr	r3, [r3, #8]
 8016eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ec2:	d101      	bne.n	8016ec8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	e000      	b.n	8016eca <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8016ec8:	2300      	movs	r3, #0
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed2:	4770      	bx	lr

08016ed4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8016ed4:	b480      	push	{r7}
 8016ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8016ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016edc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016ee8:	d101      	bne.n	8016eee <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8016eea:	2301      	movs	r3, #1
 8016eec:	e000      	b.n	8016ef0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8016eee:	2300      	movs	r3, #0
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef8:	4770      	bx	lr

08016efa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8016efa:	b480      	push	{r7}
 8016efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8016efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f0e:	d101      	bne.n	8016f14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8016f10:	2301      	movs	r3, #1
 8016f12:	e000      	b.n	8016f16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8016f14:	2300      	movs	r3, #0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1e:	4770      	bx	lr

08016f20 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8016f20:	b480      	push	{r7}
 8016f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8016f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f28:	689b      	ldr	r3, [r3, #8]
 8016f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016f32:	d101      	bne.n	8016f38 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8016f34:	2301      	movs	r3, #1
 8016f36:	e000      	b.n	8016f3a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8016f38:	2300      	movs	r3, #0
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f42:	4770      	bx	lr

08016f44 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8016f44:	b480      	push	{r7}
 8016f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8016f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f4c:	689b      	ldr	r3, [r3, #8]
 8016f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016f56:	d101      	bne.n	8016f5c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8016f58:	2301      	movs	r3, #1
 8016f5a:	e000      	b.n	8016f5e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8016f5c:	2300      	movs	r3, #0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	46bd      	mov	sp, r7
 8016f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f66:	4770      	bx	lr

08016f68 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016f68:	b590      	push	{r4, r7, lr}
 8016f6a:	b08d      	sub	sp, #52	; 0x34
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d101      	bne.n	8016f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016f76:	2301      	movs	r3, #1
 8016f78:	e363      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f003 0320 	and.w	r3, r3, #32
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	f000 808d 	beq.w	80170a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016f88:	f7ff fe7d 	bl	8016c86 <LL_RCC_GetSysClkSource>
 8016f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016f8e:	f7ff ff83 	bl	8016e98 <LL_RCC_PLL_GetMainSource>
 8016f92:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d005      	beq.n	8016fa6 <HAL_RCC_OscConfig+0x3e>
 8016f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f9c:	2b0c      	cmp	r3, #12
 8016f9e:	d147      	bne.n	8017030 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8016fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	d144      	bne.n	8017030 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	69db      	ldr	r3, [r3, #28]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d101      	bne.n	8016fb2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	e347      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016fb6:	f7ff fe28 	bl	8016c0a <LL_RCC_MSI_GetRange>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	429c      	cmp	r4, r3
 8016fbe:	d914      	bls.n	8016fea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f000 fd61 	bl	8017a8c <RCC_SetFlashLatencyFromMSIRange>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d001      	beq.n	8016fd4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	e336      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7ff fe02 	bl	8016be2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6a1b      	ldr	r3, [r3, #32]
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ff fe26 	bl	8016c34 <LL_RCC_MSI_SetCalibTrimming>
 8016fe8:	e013      	b.n	8017012 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7ff fdf7 	bl	8016be2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6a1b      	ldr	r3, [r3, #32]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7ff fe1b 	bl	8016c34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017002:	4618      	mov	r0, r3
 8017004:	f000 fd42 	bl	8017a8c <RCC_SetFlashLatencyFromMSIRange>
 8017008:	4603      	mov	r3, r0
 801700a:	2b00      	cmp	r3, #0
 801700c:	d001      	beq.n	8017012 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801700e:	2301      	movs	r3, #1
 8017010:	e317      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017012:	f000 fcc9 	bl	80179a8 <HAL_RCC_GetHCLKFreq>
 8017016:	4603      	mov	r3, r0
 8017018:	4aa4      	ldr	r2, [pc, #656]	; (80172ac <HAL_RCC_OscConfig+0x344>)
 801701a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801701c:	4ba4      	ldr	r3, [pc, #656]	; (80172b0 <HAL_RCC_OscConfig+0x348>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	4618      	mov	r0, r3
 8017022:	f7e9 fe8d 	bl	8000d40 <HAL_InitTick>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d039      	beq.n	80170a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801702c:	2301      	movs	r3, #1
 801702e:	e308      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	69db      	ldr	r3, [r3, #28]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d01e      	beq.n	8017076 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017038:	f7ff fda4 	bl	8016b84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801703c:	f7fe f972 	bl	8015324 <HAL_GetTick>
 8017040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8017042:	e008      	b.n	8017056 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017044:	f7fe f96e 	bl	8015324 <HAL_GetTick>
 8017048:	4602      	mov	r2, r0
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	1ad3      	subs	r3, r2, r3
 801704e:	2b02      	cmp	r3, #2
 8017050:	d901      	bls.n	8017056 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8017052:	2303      	movs	r3, #3
 8017054:	e2f5      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8017056:	f7ff fdb3 	bl	8016bc0 <LL_RCC_MSI_IsReady>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d0f1      	beq.n	8017044 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017064:	4618      	mov	r0, r3
 8017066:	f7ff fdbc 	bl	8016be2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6a1b      	ldr	r3, [r3, #32]
 801706e:	4618      	mov	r0, r3
 8017070:	f7ff fde0 	bl	8016c34 <LL_RCC_MSI_SetCalibTrimming>
 8017074:	e015      	b.n	80170a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017076:	f7ff fd94 	bl	8016ba2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801707a:	f7fe f953 	bl	8015324 <HAL_GetTick>
 801707e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8017080:	e008      	b.n	8017094 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017082:	f7fe f94f 	bl	8015324 <HAL_GetTick>
 8017086:	4602      	mov	r2, r0
 8017088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708a:	1ad3      	subs	r3, r2, r3
 801708c:	2b02      	cmp	r3, #2
 801708e:	d901      	bls.n	8017094 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8017090:	2303      	movs	r3, #3
 8017092:	e2d6      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017094:	f7ff fd94 	bl	8016bc0 <LL_RCC_MSI_IsReady>
 8017098:	4603      	mov	r3, r0
 801709a:	2b00      	cmp	r3, #0
 801709c:	d1f1      	bne.n	8017082 <HAL_RCC_OscConfig+0x11a>
 801709e:	e000      	b.n	80170a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80170a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	f003 0301 	and.w	r3, r3, #1
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d047      	beq.n	801713e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80170ae:	f7ff fdea 	bl	8016c86 <LL_RCC_GetSysClkSource>
 80170b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80170b4:	f7ff fef0 	bl	8016e98 <LL_RCC_PLL_GetMainSource>
 80170b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80170ba:	6a3b      	ldr	r3, [r7, #32]
 80170bc:	2b08      	cmp	r3, #8
 80170be:	d005      	beq.n	80170cc <HAL_RCC_OscConfig+0x164>
 80170c0:	6a3b      	ldr	r3, [r7, #32]
 80170c2:	2b0c      	cmp	r3, #12
 80170c4:	d108      	bne.n	80170d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	2b03      	cmp	r3, #3
 80170ca:	d105      	bne.n	80170d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d134      	bne.n	801713e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80170d4:	2301      	movs	r3, #1
 80170d6:	e2b4      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170e0:	d102      	bne.n	80170e8 <HAL_RCC_OscConfig+0x180>
 80170e2:	f7ff fbd1 	bl	8016888 <LL_RCC_HSE_Enable>
 80170e6:	e001      	b.n	80170ec <HAL_RCC_OscConfig+0x184>
 80170e8:	f7ff fbdd 	bl	80168a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d012      	beq.n	801711a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170f4:	f7fe f916 	bl	8015324 <HAL_GetTick>
 80170f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80170fa:	e008      	b.n	801710e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80170fc:	f7fe f912 	bl	8015324 <HAL_GetTick>
 8017100:	4602      	mov	r2, r0
 8017102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017104:	1ad3      	subs	r3, r2, r3
 8017106:	2b64      	cmp	r3, #100	; 0x64
 8017108:	d901      	bls.n	801710e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801710a:	2303      	movs	r3, #3
 801710c:	e299      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801710e:	f7ff fbd9 	bl	80168c4 <LL_RCC_HSE_IsReady>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	d0f1      	beq.n	80170fc <HAL_RCC_OscConfig+0x194>
 8017118:	e011      	b.n	801713e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801711a:	f7fe f903 	bl	8015324 <HAL_GetTick>
 801711e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8017120:	e008      	b.n	8017134 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017122:	f7fe f8ff 	bl	8015324 <HAL_GetTick>
 8017126:	4602      	mov	r2, r0
 8017128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801712a:	1ad3      	subs	r3, r2, r3
 801712c:	2b64      	cmp	r3, #100	; 0x64
 801712e:	d901      	bls.n	8017134 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8017130:	2303      	movs	r3, #3
 8017132:	e286      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017134:	f7ff fbc6 	bl	80168c4 <LL_RCC_HSE_IsReady>
 8017138:	4603      	mov	r3, r0
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1f1      	bne.n	8017122 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	f003 0302 	and.w	r3, r3, #2
 8017146:	2b00      	cmp	r3, #0
 8017148:	d04c      	beq.n	80171e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801714a:	f7ff fd9c 	bl	8016c86 <LL_RCC_GetSysClkSource>
 801714e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017150:	f7ff fea2 	bl	8016e98 <LL_RCC_PLL_GetMainSource>
 8017154:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	2b04      	cmp	r3, #4
 801715a:	d005      	beq.n	8017168 <HAL_RCC_OscConfig+0x200>
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	2b0c      	cmp	r3, #12
 8017160:	d10e      	bne.n	8017180 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	2b02      	cmp	r3, #2
 8017166:	d10b      	bne.n	8017180 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d101      	bne.n	8017174 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8017170:	2301      	movs	r3, #1
 8017172:	e266      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	691b      	ldr	r3, [r3, #16]
 8017178:	4618      	mov	r0, r3
 801717a:	f7ff fbe5 	bl	8016948 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801717e:	e031      	b.n	80171e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	68db      	ldr	r3, [r3, #12]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d019      	beq.n	80171bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017188:	f7ff fbae 	bl	80168e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801718c:	f7fe f8ca 	bl	8015324 <HAL_GetTick>
 8017190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8017192:	e008      	b.n	80171a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017194:	f7fe f8c6 	bl	8015324 <HAL_GetTick>
 8017198:	4602      	mov	r2, r0
 801719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719c:	1ad3      	subs	r3, r2, r3
 801719e:	2b02      	cmp	r3, #2
 80171a0:	d901      	bls.n	80171a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80171a2:	2303      	movs	r3, #3
 80171a4:	e24d      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80171a6:	f7ff fbbd 	bl	8016924 <LL_RCC_HSI_IsReady>
 80171aa:	4603      	mov	r3, r0
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d0f1      	beq.n	8017194 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	691b      	ldr	r3, [r3, #16]
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7ff fbc7 	bl	8016948 <LL_RCC_HSI_SetCalibTrimming>
 80171ba:	e013      	b.n	80171e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80171bc:	f7ff fba3 	bl	8016906 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80171c0:	f7fe f8b0 	bl	8015324 <HAL_GetTick>
 80171c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80171c6:	e008      	b.n	80171da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80171c8:	f7fe f8ac 	bl	8015324 <HAL_GetTick>
 80171cc:	4602      	mov	r2, r0
 80171ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d0:	1ad3      	subs	r3, r2, r3
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	d901      	bls.n	80171da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80171d6:	2303      	movs	r3, #3
 80171d8:	e233      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80171da:	f7ff fba3 	bl	8016924 <LL_RCC_HSI_IsReady>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1f1      	bne.n	80171c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	f003 0308 	and.w	r3, r3, #8
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d106      	bne.n	80171fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	f000 80a3 	beq.w	8017344 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	695b      	ldr	r3, [r3, #20]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d076      	beq.n	80172f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	f003 0310 	and.w	r3, r3, #16
 801720e:	2b00      	cmp	r3, #0
 8017210:	d046      	beq.n	80172a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8017212:	f7ff fc5a 	bl	8016aca <LL_RCC_LSI1_IsReady>
 8017216:	4603      	mov	r3, r0
 8017218:	2b00      	cmp	r3, #0
 801721a:	d113      	bne.n	8017244 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801721c:	f7ff fc33 	bl	8016a86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017220:	f7fe f880 	bl	8015324 <HAL_GetTick>
 8017224:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8017226:	e008      	b.n	801723a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017228:	f7fe f87c 	bl	8015324 <HAL_GetTick>
 801722c:	4602      	mov	r2, r0
 801722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017230:	1ad3      	subs	r3, r2, r3
 8017232:	2b02      	cmp	r3, #2
 8017234:	d901      	bls.n	801723a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8017236:	2303      	movs	r3, #3
 8017238:	e203      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801723a:	f7ff fc46 	bl	8016aca <LL_RCC_LSI1_IsReady>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d0f1      	beq.n	8017228 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017244:	f7ff fc53 	bl	8016aee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017248:	f7fe f86c 	bl	8015324 <HAL_GetTick>
 801724c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801724e:	e008      	b.n	8017262 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017250:	f7fe f868 	bl	8015324 <HAL_GetTick>
 8017254:	4602      	mov	r2, r0
 8017256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017258:	1ad3      	subs	r3, r2, r3
 801725a:	2b03      	cmp	r3, #3
 801725c:	d901      	bls.n	8017262 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801725e:	2303      	movs	r3, #3
 8017260:	e1ef      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017262:	f7ff fc66 	bl	8016b32 <LL_RCC_LSI2_IsReady>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d0f1      	beq.n	8017250 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	699b      	ldr	r3, [r3, #24]
 8017270:	4618      	mov	r0, r3
 8017272:	f7ff fc70 	bl	8016b56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8017276:	f7ff fc17 	bl	8016aa8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801727a:	f7fe f853 	bl	8015324 <HAL_GetTick>
 801727e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017280:	e008      	b.n	8017294 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017282:	f7fe f84f 	bl	8015324 <HAL_GetTick>
 8017286:	4602      	mov	r2, r0
 8017288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728a:	1ad3      	subs	r3, r2, r3
 801728c:	2b02      	cmp	r3, #2
 801728e:	d901      	bls.n	8017294 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8017290:	2303      	movs	r3, #3
 8017292:	e1d6      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017294:	f7ff fc19 	bl	8016aca <LL_RCC_LSI1_IsReady>
 8017298:	4603      	mov	r3, r0
 801729a:	2b00      	cmp	r3, #0
 801729c:	d1f1      	bne.n	8017282 <HAL_RCC_OscConfig+0x31a>
 801729e:	e051      	b.n	8017344 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80172a0:	f7ff fbf1 	bl	8016a86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80172a4:	f7fe f83e 	bl	8015324 <HAL_GetTick>
 80172a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80172aa:	e00c      	b.n	80172c6 <HAL_RCC_OscConfig+0x35e>
 80172ac:	20000004 	.word	0x20000004
 80172b0:	2000006c 	.word	0x2000006c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80172b4:	f7fe f836 	bl	8015324 <HAL_GetTick>
 80172b8:	4602      	mov	r2, r0
 80172ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172bc:	1ad3      	subs	r3, r2, r3
 80172be:	2b02      	cmp	r3, #2
 80172c0:	d901      	bls.n	80172c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80172c2:	2303      	movs	r3, #3
 80172c4:	e1bd      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80172c6:	f7ff fc00 	bl	8016aca <LL_RCC_LSI1_IsReady>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d0f1      	beq.n	80172b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80172d0:	f7ff fc1e 	bl	8016b10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80172d4:	e008      	b.n	80172e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80172d6:	f7fe f825 	bl	8015324 <HAL_GetTick>
 80172da:	4602      	mov	r2, r0
 80172dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172de:	1ad3      	subs	r3, r2, r3
 80172e0:	2b03      	cmp	r3, #3
 80172e2:	d901      	bls.n	80172e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80172e4:	2303      	movs	r3, #3
 80172e6:	e1ac      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80172e8:	f7ff fc23 	bl	8016b32 <LL_RCC_LSI2_IsReady>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d1f1      	bne.n	80172d6 <HAL_RCC_OscConfig+0x36e>
 80172f2:	e027      	b.n	8017344 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80172f4:	f7ff fc0c 	bl	8016b10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172f8:	f7fe f814 	bl	8015324 <HAL_GetTick>
 80172fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80172fe:	e008      	b.n	8017312 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017300:	f7fe f810 	bl	8015324 <HAL_GetTick>
 8017304:	4602      	mov	r2, r0
 8017306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	2b03      	cmp	r3, #3
 801730c:	d901      	bls.n	8017312 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801730e:	2303      	movs	r3, #3
 8017310:	e197      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8017312:	f7ff fc0e 	bl	8016b32 <LL_RCC_LSI2_IsReady>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d1f1      	bne.n	8017300 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801731c:	f7ff fbc4 	bl	8016aa8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017320:	f7fe f800 	bl	8015324 <HAL_GetTick>
 8017324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8017326:	e008      	b.n	801733a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017328:	f7fd fffc 	bl	8015324 <HAL_GetTick>
 801732c:	4602      	mov	r2, r0
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	1ad3      	subs	r3, r2, r3
 8017332:	2b02      	cmp	r3, #2
 8017334:	d901      	bls.n	801733a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8017336:	2303      	movs	r3, #3
 8017338:	e183      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801733a:	f7ff fbc6 	bl	8016aca <LL_RCC_LSI1_IsReady>
 801733e:	4603      	mov	r3, r0
 8017340:	2b00      	cmp	r3, #0
 8017342:	d1f1      	bne.n	8017328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f003 0304 	and.w	r3, r3, #4
 801734c:	2b00      	cmp	r3, #0
 801734e:	d05b      	beq.n	8017408 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017350:	4ba7      	ldr	r3, [pc, #668]	; (80175f0 <HAL_RCC_OscConfig+0x688>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017358:	2b00      	cmp	r3, #0
 801735a:	d114      	bne.n	8017386 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801735c:	f7ff fa64 	bl	8016828 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017360:	f7fd ffe0 	bl	8015324 <HAL_GetTick>
 8017364:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017366:	e008      	b.n	801737a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017368:	f7fd ffdc 	bl	8015324 <HAL_GetTick>
 801736c:	4602      	mov	r2, r0
 801736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017370:	1ad3      	subs	r3, r2, r3
 8017372:	2b02      	cmp	r3, #2
 8017374:	d901      	bls.n	801737a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8017376:	2303      	movs	r3, #3
 8017378:	e163      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801737a:	4b9d      	ldr	r3, [pc, #628]	; (80175f0 <HAL_RCC_OscConfig+0x688>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017382:	2b00      	cmp	r3, #0
 8017384:	d0f0      	beq.n	8017368 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	689b      	ldr	r3, [r3, #8]
 801738a:	2b01      	cmp	r3, #1
 801738c:	d102      	bne.n	8017394 <HAL_RCC_OscConfig+0x42c>
 801738e:	f7ff fb24 	bl	80169da <LL_RCC_LSE_Enable>
 8017392:	e00c      	b.n	80173ae <HAL_RCC_OscConfig+0x446>
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	689b      	ldr	r3, [r3, #8]
 8017398:	2b05      	cmp	r3, #5
 801739a:	d104      	bne.n	80173a6 <HAL_RCC_OscConfig+0x43e>
 801739c:	f7ff fb3f 	bl	8016a1e <LL_RCC_LSE_EnableBypass>
 80173a0:	f7ff fb1b 	bl	80169da <LL_RCC_LSE_Enable>
 80173a4:	e003      	b.n	80173ae <HAL_RCC_OscConfig+0x446>
 80173a6:	f7ff fb29 	bl	80169fc <LL_RCC_LSE_Disable>
 80173aa:	f7ff fb49 	bl	8016a40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	689b      	ldr	r3, [r3, #8]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d014      	beq.n	80173e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80173b6:	f7fd ffb5 	bl	8015324 <HAL_GetTick>
 80173ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80173bc:	e00a      	b.n	80173d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173be:	f7fd ffb1 	bl	8015324 <HAL_GetTick>
 80173c2:	4602      	mov	r2, r0
 80173c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c6:	1ad3      	subs	r3, r2, r3
 80173c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80173cc:	4293      	cmp	r3, r2
 80173ce:	d901      	bls.n	80173d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80173d0:	2303      	movs	r3, #3
 80173d2:	e136      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80173d4:	f7ff fb45 	bl	8016a62 <LL_RCC_LSE_IsReady>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d0ef      	beq.n	80173be <HAL_RCC_OscConfig+0x456>
 80173de:	e013      	b.n	8017408 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80173e0:	f7fd ffa0 	bl	8015324 <HAL_GetTick>
 80173e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80173e6:	e00a      	b.n	80173fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173e8:	f7fd ff9c 	bl	8015324 <HAL_GetTick>
 80173ec:	4602      	mov	r2, r0
 80173ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80173f6:	4293      	cmp	r3, r2
 80173f8:	d901      	bls.n	80173fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80173fa:	2303      	movs	r3, #3
 80173fc:	e121      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80173fe:	f7ff fb30 	bl	8016a62 <LL_RCC_LSE_IsReady>
 8017402:	4603      	mov	r3, r0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d1ef      	bne.n	80173e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017410:	2b00      	cmp	r3, #0
 8017412:	d02c      	beq.n	801746e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017418:	2b00      	cmp	r3, #0
 801741a:	d014      	beq.n	8017446 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801741c:	f7ff faa9 	bl	8016972 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017420:	f7fd ff80 	bl	8015324 <HAL_GetTick>
 8017424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8017426:	e008      	b.n	801743a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017428:	f7fd ff7c 	bl	8015324 <HAL_GetTick>
 801742c:	4602      	mov	r2, r0
 801742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017430:	1ad3      	subs	r3, r2, r3
 8017432:	2b02      	cmp	r3, #2
 8017434:	d901      	bls.n	801743a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8017436:	2303      	movs	r3, #3
 8017438:	e103      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801743a:	f7ff fabc 	bl	80169b6 <LL_RCC_HSI48_IsReady>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d0f1      	beq.n	8017428 <HAL_RCC_OscConfig+0x4c0>
 8017444:	e013      	b.n	801746e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017446:	f7ff faa5 	bl	8016994 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801744a:	f7fd ff6b 	bl	8015324 <HAL_GetTick>
 801744e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017450:	e008      	b.n	8017464 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017452:	f7fd ff67 	bl	8015324 <HAL_GetTick>
 8017456:	4602      	mov	r2, r0
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	2b02      	cmp	r3, #2
 801745e:	d901      	bls.n	8017464 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8017460:	2303      	movs	r3, #3
 8017462:	e0ee      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017464:	f7ff faa7 	bl	80169b6 <LL_RCC_HSI48_IsReady>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	d1f1      	bne.n	8017452 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017472:	2b00      	cmp	r3, #0
 8017474:	f000 80e4 	beq.w	8017640 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017478:	f7ff fc05 	bl	8016c86 <LL_RCC_GetSysClkSource>
 801747c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801747e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017482:	68db      	ldr	r3, [r3, #12]
 8017484:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801748a:	2b02      	cmp	r3, #2
 801748c:	f040 80b4 	bne.w	80175f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	f003 0203 	and.w	r2, r3, #3
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801749a:	429a      	cmp	r2, r3
 801749c:	d123      	bne.n	80174e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d11c      	bne.n	80174e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	0a1b      	lsrs	r3, r3, #8
 80174b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d114      	bne.n	80174e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80174c6:	429a      	cmp	r2, r3
 80174c8:	d10d      	bne.n	80174e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d106      	bne.n	80174e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d05d      	beq.n	80175a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	2b0c      	cmp	r3, #12
 80174ea:	d058      	beq.n	801759e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80174ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d001      	beq.n	80174fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80174fa:	2301      	movs	r3, #1
 80174fc:	e0a1      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80174fe:	f7ff fc85 	bl	8016e0c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017502:	f7fd ff0f 	bl	8015324 <HAL_GetTick>
 8017506:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017508:	e008      	b.n	801751c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801750a:	f7fd ff0b 	bl	8015324 <HAL_GetTick>
 801750e:	4602      	mov	r2, r0
 8017510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017512:	1ad3      	subs	r3, r2, r3
 8017514:	2b02      	cmp	r3, #2
 8017516:	d901      	bls.n	801751c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8017518:	2303      	movs	r3, #3
 801751a:	e092      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801751c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017526:	2b00      	cmp	r3, #0
 8017528:	d1ef      	bne.n	801750a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801752a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801752e:	68da      	ldr	r2, [r3, #12]
 8017530:	4b30      	ldr	r3, [pc, #192]	; (80175f4 <HAL_RCC_OscConfig+0x68c>)
 8017532:	4013      	ands	r3, r2
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801753c:	4311      	orrs	r1, r2
 801753e:	687a      	ldr	r2, [r7, #4]
 8017540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017542:	0212      	lsls	r2, r2, #8
 8017544:	4311      	orrs	r1, r2
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801754a:	4311      	orrs	r1, r2
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017550:	4311      	orrs	r1, r2
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017556:	430a      	orrs	r2, r1
 8017558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801755c:	4313      	orrs	r3, r2
 801755e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017560:	f7ff fc45 	bl	8016dee <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801756e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017572:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017574:	f7fd fed6 	bl	8015324 <HAL_GetTick>
 8017578:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801757a:	e008      	b.n	801758e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801757c:	f7fd fed2 	bl	8015324 <HAL_GetTick>
 8017580:	4602      	mov	r2, r0
 8017582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017584:	1ad3      	subs	r3, r2, r3
 8017586:	2b02      	cmp	r3, #2
 8017588:	d901      	bls.n	801758e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801758a:	2303      	movs	r3, #3
 801758c:	e059      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801758e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017598:	2b00      	cmp	r3, #0
 801759a:	d0ef      	beq.n	801757c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801759c:	e050      	b.n	8017640 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801759e:	2301      	movs	r3, #1
 80175a0:	e04f      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80175a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d147      	bne.n	8017640 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80175b0:	f7ff fc1d 	bl	8016dee <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80175b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175b8:	68db      	ldr	r3, [r3, #12]
 80175ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80175be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80175c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80175c4:	f7fd feae 	bl	8015324 <HAL_GetTick>
 80175c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80175ca:	e008      	b.n	80175de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80175cc:	f7fd feaa 	bl	8015324 <HAL_GetTick>
 80175d0:	4602      	mov	r2, r0
 80175d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d4:	1ad3      	subs	r3, r2, r3
 80175d6:	2b02      	cmp	r3, #2
 80175d8:	d901      	bls.n	80175de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80175da:	2303      	movs	r3, #3
 80175dc:	e031      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80175de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d0ef      	beq.n	80175cc <HAL_RCC_OscConfig+0x664>
 80175ec:	e028      	b.n	8017640 <HAL_RCC_OscConfig+0x6d8>
 80175ee:	bf00      	nop
 80175f0:	58000400 	.word	0x58000400
 80175f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	2b0c      	cmp	r3, #12
 80175fc:	d01e      	beq.n	801763c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80175fe:	f7ff fc05 	bl	8016e0c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017602:	f7fd fe8f 	bl	8015324 <HAL_GetTick>
 8017606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017608:	e008      	b.n	801761c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801760a:	f7fd fe8b 	bl	8015324 <HAL_GetTick>
 801760e:	4602      	mov	r2, r0
 8017610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017612:	1ad3      	subs	r3, r2, r3
 8017614:	2b02      	cmp	r3, #2
 8017616:	d901      	bls.n	801761c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8017618:	2303      	movs	r3, #3
 801761a:	e012      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801761c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017626:	2b00      	cmp	r3, #0
 8017628:	d1ef      	bne.n	801760a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801762e:	68da      	ldr	r2, [r3, #12]
 8017630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017634:	4b05      	ldr	r3, [pc, #20]	; (801764c <HAL_RCC_OscConfig+0x6e4>)
 8017636:	4013      	ands	r3, r2
 8017638:	60cb      	str	r3, [r1, #12]
 801763a:	e001      	b.n	8017640 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801763c:	2301      	movs	r3, #1
 801763e:	e000      	b.n	8017642 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8017640:	2300      	movs	r3, #0
}
 8017642:	4618      	mov	r0, r3
 8017644:	3734      	adds	r7, #52	; 0x34
 8017646:	46bd      	mov	sp, r7
 8017648:	bd90      	pop	{r4, r7, pc}
 801764a:	bf00      	nop
 801764c:	eefefffc 	.word	0xeefefffc

08017650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b084      	sub	sp, #16
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
 8017658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d101      	bne.n	8017664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017660:	2301      	movs	r3, #1
 8017662:	e12d      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017664:	4b98      	ldr	r3, [pc, #608]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f003 0307 	and.w	r3, r3, #7
 801766c:	683a      	ldr	r2, [r7, #0]
 801766e:	429a      	cmp	r2, r3
 8017670:	d91b      	bls.n	80176aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017672:	4b95      	ldr	r3, [pc, #596]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	f023 0207 	bic.w	r2, r3, #7
 801767a:	4993      	ldr	r1, [pc, #588]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	4313      	orrs	r3, r2
 8017680:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017682:	f7fd fe4f 	bl	8015324 <HAL_GetTick>
 8017686:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017688:	e008      	b.n	801769c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801768a:	f7fd fe4b 	bl	8015324 <HAL_GetTick>
 801768e:	4602      	mov	r2, r0
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	1ad3      	subs	r3, r2, r3
 8017694:	2b02      	cmp	r3, #2
 8017696:	d901      	bls.n	801769c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017698:	2303      	movs	r3, #3
 801769a:	e111      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801769c:	4b8a      	ldr	r3, [pc, #552]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	f003 0307 	and.w	r3, r3, #7
 80176a4:	683a      	ldr	r2, [r7, #0]
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d1ef      	bne.n	801768a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	f003 0302 	and.w	r3, r3, #2
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d016      	beq.n	80176e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	689b      	ldr	r3, [r3, #8]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7ff faef 	bl	8016c9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80176c0:	f7fd fe30 	bl	8015324 <HAL_GetTick>
 80176c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80176c6:	e008      	b.n	80176da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80176c8:	f7fd fe2c 	bl	8015324 <HAL_GetTick>
 80176cc:	4602      	mov	r2, r0
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	1ad3      	subs	r3, r2, r3
 80176d2:	2b02      	cmp	r3, #2
 80176d4:	d901      	bls.n	80176da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80176d6:	2303      	movs	r3, #3
 80176d8:	e0f2      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80176da:	f7ff fbe9 	bl	8016eb0 <LL_RCC_IsActiveFlag_HPRE>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d0f1      	beq.n	80176c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	f003 0320 	and.w	r3, r3, #32
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d016      	beq.n	801771e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	695b      	ldr	r3, [r3, #20]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f7ff fae6 	bl	8016cc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80176fa:	f7fd fe13 	bl	8015324 <HAL_GetTick>
 80176fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017700:	e008      	b.n	8017714 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017702:	f7fd fe0f 	bl	8015324 <HAL_GetTick>
 8017706:	4602      	mov	r2, r0
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	1ad3      	subs	r3, r2, r3
 801770c:	2b02      	cmp	r3, #2
 801770e:	d901      	bls.n	8017714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8017710:	2303      	movs	r3, #3
 8017712:	e0d5      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017714:	f7ff fbde 	bl	8016ed4 <LL_RCC_IsActiveFlag_C2HPRE>
 8017718:	4603      	mov	r3, r0
 801771a:	2b00      	cmp	r3, #0
 801771c:	d0f1      	beq.n	8017702 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017726:	2b00      	cmp	r3, #0
 8017728:	d016      	beq.n	8017758 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	699b      	ldr	r3, [r3, #24]
 801772e:	4618      	mov	r0, r3
 8017730:	f7ff fadf 	bl	8016cf2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017734:	f7fd fdf6 	bl	8015324 <HAL_GetTick>
 8017738:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801773a:	e008      	b.n	801774e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801773c:	f7fd fdf2 	bl	8015324 <HAL_GetTick>
 8017740:	4602      	mov	r2, r0
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	1ad3      	subs	r3, r2, r3
 8017746:	2b02      	cmp	r3, #2
 8017748:	d901      	bls.n	801774e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801774a:	2303      	movs	r3, #3
 801774c:	e0b8      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801774e:	f7ff fbd4 	bl	8016efa <LL_RCC_IsActiveFlag_SHDHPRE>
 8017752:	4603      	mov	r3, r0
 8017754:	2b00      	cmp	r3, #0
 8017756:	d0f1      	beq.n	801773c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	f003 0304 	and.w	r3, r3, #4
 8017760:	2b00      	cmp	r3, #0
 8017762:	d016      	beq.n	8017792 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	4618      	mov	r0, r3
 801776a:	f7ff fad9 	bl	8016d20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801776e:	f7fd fdd9 	bl	8015324 <HAL_GetTick>
 8017772:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017774:	e008      	b.n	8017788 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017776:	f7fd fdd5 	bl	8015324 <HAL_GetTick>
 801777a:	4602      	mov	r2, r0
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	1ad3      	subs	r3, r2, r3
 8017780:	2b02      	cmp	r3, #2
 8017782:	d901      	bls.n	8017788 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017784:	2303      	movs	r3, #3
 8017786:	e09b      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017788:	f7ff fbca 	bl	8016f20 <LL_RCC_IsActiveFlag_PPRE1>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0f1      	beq.n	8017776 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	f003 0308 	and.w	r3, r3, #8
 801779a:	2b00      	cmp	r3, #0
 801779c:	d017      	beq.n	80177ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	691b      	ldr	r3, [r3, #16]
 80177a2:	00db      	lsls	r3, r3, #3
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7ff facf 	bl	8016d48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80177aa:	f7fd fdbb 	bl	8015324 <HAL_GetTick>
 80177ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80177b0:	e008      	b.n	80177c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80177b2:	f7fd fdb7 	bl	8015324 <HAL_GetTick>
 80177b6:	4602      	mov	r2, r0
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	1ad3      	subs	r3, r2, r3
 80177bc:	2b02      	cmp	r3, #2
 80177be:	d901      	bls.n	80177c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80177c0:	2303      	movs	r3, #3
 80177c2:	e07d      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80177c4:	f7ff fbbe 	bl	8016f44 <LL_RCC_IsActiveFlag_PPRE2>
 80177c8:	4603      	mov	r3, r0
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d0f1      	beq.n	80177b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	f003 0301 	and.w	r3, r3, #1
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d043      	beq.n	8017862 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	685b      	ldr	r3, [r3, #4]
 80177de:	2b02      	cmp	r3, #2
 80177e0:	d106      	bne.n	80177f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80177e2:	f7ff f86f 	bl	80168c4 <LL_RCC_HSE_IsReady>
 80177e6:	4603      	mov	r3, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d11e      	bne.n	801782a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80177ec:	2301      	movs	r3, #1
 80177ee:	e067      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	685b      	ldr	r3, [r3, #4]
 80177f4:	2b03      	cmp	r3, #3
 80177f6:	d106      	bne.n	8017806 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80177f8:	f7ff fb17 	bl	8016e2a <LL_RCC_PLL_IsReady>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d113      	bne.n	801782a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017802:	2301      	movs	r3, #1
 8017804:	e05c      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d106      	bne.n	801781c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801780e:	f7ff f9d7 	bl	8016bc0 <LL_RCC_MSI_IsReady>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d108      	bne.n	801782a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017818:	2301      	movs	r3, #1
 801781a:	e051      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801781c:	f7ff f882 	bl	8016924 <LL_RCC_HSI_IsReady>
 8017820:	4603      	mov	r3, r0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d101      	bne.n	801782a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017826:	2301      	movs	r3, #1
 8017828:	e04a      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	685b      	ldr	r3, [r3, #4]
 801782e:	4618      	mov	r0, r3
 8017830:	f7ff fa15 	bl	8016c5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017834:	f7fd fd76 	bl	8015324 <HAL_GetTick>
 8017838:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801783a:	e00a      	b.n	8017852 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801783c:	f7fd fd72 	bl	8015324 <HAL_GetTick>
 8017840:	4602      	mov	r2, r0
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	1ad3      	subs	r3, r2, r3
 8017846:	f241 3288 	movw	r2, #5000	; 0x1388
 801784a:	4293      	cmp	r3, r2
 801784c:	d901      	bls.n	8017852 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801784e:	2303      	movs	r3, #3
 8017850:	e036      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017852:	f7ff fa18 	bl	8016c86 <LL_RCC_GetSysClkSource>
 8017856:	4602      	mov	r2, r0
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	685b      	ldr	r3, [r3, #4]
 801785c:	009b      	lsls	r3, r3, #2
 801785e:	429a      	cmp	r2, r3
 8017860:	d1ec      	bne.n	801783c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017862:	4b19      	ldr	r3, [pc, #100]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	f003 0307 	and.w	r3, r3, #7
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	429a      	cmp	r2, r3
 801786e:	d21b      	bcs.n	80178a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017870:	4b15      	ldr	r3, [pc, #84]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	f023 0207 	bic.w	r2, r3, #7
 8017878:	4913      	ldr	r1, [pc, #76]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	4313      	orrs	r3, r2
 801787e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017880:	f7fd fd50 	bl	8015324 <HAL_GetTick>
 8017884:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017886:	e008      	b.n	801789a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017888:	f7fd fd4c 	bl	8015324 <HAL_GetTick>
 801788c:	4602      	mov	r2, r0
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	1ad3      	subs	r3, r2, r3
 8017892:	2b02      	cmp	r3, #2
 8017894:	d901      	bls.n	801789a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017896:	2303      	movs	r3, #3
 8017898:	e012      	b.n	80178c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801789a:	4b0b      	ldr	r3, [pc, #44]	; (80178c8 <HAL_RCC_ClockConfig+0x278>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f003 0307 	and.w	r3, r3, #7
 80178a2:	683a      	ldr	r2, [r7, #0]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d1ef      	bne.n	8017888 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80178a8:	f000 f87e 	bl	80179a8 <HAL_RCC_GetHCLKFreq>
 80178ac:	4603      	mov	r3, r0
 80178ae:	4a07      	ldr	r2, [pc, #28]	; (80178cc <HAL_RCC_ClockConfig+0x27c>)
 80178b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80178b2:	f7fd fd43 	bl	801533c <HAL_GetTickPrio>
 80178b6:	4603      	mov	r3, r0
 80178b8:	4618      	mov	r0, r3
 80178ba:	f7e9 fa41 	bl	8000d40 <HAL_InitTick>
 80178be:	4603      	mov	r3, r0
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3710      	adds	r7, #16
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	58004000 	.word	0x58004000
 80178cc:	20000004 	.word	0x20000004

080178d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80178d0:	b590      	push	{r4, r7, lr}
 80178d2:	b085      	sub	sp, #20
 80178d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80178d6:	f7ff f9d6 	bl	8016c86 <LL_RCC_GetSysClkSource>
 80178da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d10a      	bne.n	80178f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80178e2:	f7ff f992 	bl	8016c0a <LL_RCC_MSI_GetRange>
 80178e6:	4603      	mov	r3, r0
 80178e8:	091b      	lsrs	r3, r3, #4
 80178ea:	f003 030f 	and.w	r3, r3, #15
 80178ee:	4a2b      	ldr	r2, [pc, #172]	; (801799c <HAL_RCC_GetSysClockFreq+0xcc>)
 80178f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178f4:	60fb      	str	r3, [r7, #12]
 80178f6:	e04b      	b.n	8017990 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2b04      	cmp	r3, #4
 80178fc:	d102      	bne.n	8017904 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80178fe:	4b28      	ldr	r3, [pc, #160]	; (80179a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017900:	60fb      	str	r3, [r7, #12]
 8017902:	e045      	b.n	8017990 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2b08      	cmp	r3, #8
 8017908:	d10a      	bne.n	8017920 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801790a:	f7fe ffab 	bl	8016864 <LL_RCC_HSE_IsEnabledDiv2>
 801790e:	4603      	mov	r3, r0
 8017910:	2b01      	cmp	r3, #1
 8017912:	d102      	bne.n	801791a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017914:	4b22      	ldr	r3, [pc, #136]	; (80179a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017916:	60fb      	str	r3, [r7, #12]
 8017918:	e03a      	b.n	8017990 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801791a:	4b22      	ldr	r3, [pc, #136]	; (80179a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801791c:	60fb      	str	r3, [r7, #12]
 801791e:	e037      	b.n	8017990 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017920:	f7ff faba 	bl	8016e98 <LL_RCC_PLL_GetMainSource>
 8017924:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	2b02      	cmp	r3, #2
 801792a:	d003      	beq.n	8017934 <HAL_RCC_GetSysClockFreq+0x64>
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2b03      	cmp	r3, #3
 8017930:	d003      	beq.n	801793a <HAL_RCC_GetSysClockFreq+0x6a>
 8017932:	e00d      	b.n	8017950 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017934:	4b1a      	ldr	r3, [pc, #104]	; (80179a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017936:	60bb      	str	r3, [r7, #8]
        break;
 8017938:	e015      	b.n	8017966 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801793a:	f7fe ff93 	bl	8016864 <LL_RCC_HSE_IsEnabledDiv2>
 801793e:	4603      	mov	r3, r0
 8017940:	2b01      	cmp	r3, #1
 8017942:	d102      	bne.n	801794a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017944:	4b16      	ldr	r3, [pc, #88]	; (80179a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017946:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017948:	e00d      	b.n	8017966 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801794a:	4b16      	ldr	r3, [pc, #88]	; (80179a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801794c:	60bb      	str	r3, [r7, #8]
        break;
 801794e:	e00a      	b.n	8017966 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017950:	f7ff f95b 	bl	8016c0a <LL_RCC_MSI_GetRange>
 8017954:	4603      	mov	r3, r0
 8017956:	091b      	lsrs	r3, r3, #4
 8017958:	f003 030f 	and.w	r3, r3, #15
 801795c:	4a0f      	ldr	r2, [pc, #60]	; (801799c <HAL_RCC_GetSysClockFreq+0xcc>)
 801795e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017962:	60bb      	str	r3, [r7, #8]
        break;
 8017964:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017966:	f7ff fa72 	bl	8016e4e <LL_RCC_PLL_GetN>
 801796a:	4602      	mov	r2, r0
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	fb03 f402 	mul.w	r4, r3, r2
 8017972:	f7ff fa85 	bl	8016e80 <LL_RCC_PLL_GetDivider>
 8017976:	4603      	mov	r3, r0
 8017978:	091b      	lsrs	r3, r3, #4
 801797a:	3301      	adds	r3, #1
 801797c:	fbb4 f4f3 	udiv	r4, r4, r3
 8017980:	f7ff fa72 	bl	8016e68 <LL_RCC_PLL_GetR>
 8017984:	4603      	mov	r3, r0
 8017986:	0f5b      	lsrs	r3, r3, #29
 8017988:	3301      	adds	r3, #1
 801798a:	fbb4 f3f3 	udiv	r3, r4, r3
 801798e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017990:	68fb      	ldr	r3, [r7, #12]
}
 8017992:	4618      	mov	r0, r3
 8017994:	3714      	adds	r7, #20
 8017996:	46bd      	mov	sp, r7
 8017998:	bd90      	pop	{r4, r7, pc}
 801799a:	bf00      	nop
 801799c:	0801a76c 	.word	0x0801a76c
 80179a0:	00f42400 	.word	0x00f42400
 80179a4:	01e84800 	.word	0x01e84800

080179a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80179a8:	b598      	push	{r3, r4, r7, lr}
 80179aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80179ac:	f7ff ff90 	bl	80178d0 <HAL_RCC_GetSysClockFreq>
 80179b0:	4604      	mov	r4, r0
 80179b2:	f7ff f9dd 	bl	8016d70 <LL_RCC_GetAHBPrescaler>
 80179b6:	4603      	mov	r3, r0
 80179b8:	091b      	lsrs	r3, r3, #4
 80179ba:	f003 030f 	and.w	r3, r3, #15
 80179be:	4a03      	ldr	r2, [pc, #12]	; (80179cc <HAL_RCC_GetHCLKFreq+0x24>)
 80179c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	bd98      	pop	{r3, r4, r7, pc}
 80179cc:	0801a70c 	.word	0x0801a70c

080179d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80179d0:	b598      	push	{r3, r4, r7, lr}
 80179d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80179d4:	f7ff ffe8 	bl	80179a8 <HAL_RCC_GetHCLKFreq>
 80179d8:	4604      	mov	r4, r0
 80179da:	f7ff f9f0 	bl	8016dbe <LL_RCC_GetAPB1Prescaler>
 80179de:	4603      	mov	r3, r0
 80179e0:	0a1b      	lsrs	r3, r3, #8
 80179e2:	f003 0307 	and.w	r3, r3, #7
 80179e6:	4a04      	ldr	r2, [pc, #16]	; (80179f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80179e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179ec:	f003 031f 	and.w	r3, r3, #31
 80179f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	bd98      	pop	{r3, r4, r7, pc}
 80179f8:	0801a74c 	.word	0x0801a74c

080179fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80179fc:	b598      	push	{r3, r4, r7, lr}
 80179fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017a00:	f7ff ffd2 	bl	80179a8 <HAL_RCC_GetHCLKFreq>
 8017a04:	4604      	mov	r4, r0
 8017a06:	f7ff f9e6 	bl	8016dd6 <LL_RCC_GetAPB2Prescaler>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	0adb      	lsrs	r3, r3, #11
 8017a0e:	f003 0307 	and.w	r3, r3, #7
 8017a12:	4a04      	ldr	r2, [pc, #16]	; (8017a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a18:	f003 031f 	and.w	r3, r3, #31
 8017a1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	bd98      	pop	{r3, r4, r7, pc}
 8017a24:	0801a74c 	.word	0x0801a74c

08017a28 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	226f      	movs	r2, #111	; 0x6f
 8017a36:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017a38:	f7ff f925 	bl	8016c86 <LL_RCC_GetSysClkSource>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017a42:	f7ff f995 	bl	8016d70 <LL_RCC_GetAHBPrescaler>
 8017a46:	4602      	mov	r2, r0
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017a4c:	f7ff f9b7 	bl	8016dbe <LL_RCC_GetAPB1Prescaler>
 8017a50:	4602      	mov	r2, r0
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017a56:	f7ff f9be 	bl	8016dd6 <LL_RCC_GetAPB2Prescaler>
 8017a5a:	4602      	mov	r2, r0
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017a60:	f7ff f992 	bl	8016d88 <LL_C2_RCC_GetAHBPrescaler>
 8017a64:	4602      	mov	r2, r0
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017a6a:	f7ff f99a 	bl	8016da2 <LL_RCC_GetAHB4Prescaler>
 8017a6e:	4602      	mov	r2, r0
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017a74:	4b04      	ldr	r3, [pc, #16]	; (8017a88 <HAL_RCC_GetClockConfig+0x60>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f003 0207 	and.w	r2, r3, #7
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	601a      	str	r2, [r3, #0]
}
 8017a80:	bf00      	nop
 8017a82:	3708      	adds	r7, #8
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}
 8017a88:	58004000 	.word	0x58004000

08017a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017a8c:	b590      	push	{r4, r7, lr}
 8017a8e:	b085      	sub	sp, #20
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2bb0      	cmp	r3, #176	; 0xb0
 8017a98:	d903      	bls.n	8017aa2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017a9a:	4b15      	ldr	r3, [pc, #84]	; (8017af0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a9e:	60fb      	str	r3, [r7, #12]
 8017aa0:	e007      	b.n	8017ab2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	091b      	lsrs	r3, r3, #4
 8017aa6:	f003 030f 	and.w	r3, r3, #15
 8017aaa:	4a11      	ldr	r2, [pc, #68]	; (8017af0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ab0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017ab2:	f7ff f976 	bl	8016da2 <LL_RCC_GetAHB4Prescaler>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	091b      	lsrs	r3, r3, #4
 8017aba:	f003 030f 	and.w	r3, r3, #15
 8017abe:	4a0d      	ldr	r2, [pc, #52]	; (8017af4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ac4:	68fa      	ldr	r2, [r7, #12]
 8017ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8017aca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	4a0a      	ldr	r2, [pc, #40]	; (8017af8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8017ad4:	0c9c      	lsrs	r4, r3, #18
 8017ad6:	f7fe feb7 	bl	8016848 <HAL_PWREx_GetVoltageRange>
 8017ada:	4603      	mov	r3, r0
 8017adc:	4619      	mov	r1, r3
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f000 f80c 	bl	8017afc <RCC_SetFlashLatency>
 8017ae4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3714      	adds	r7, #20
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd90      	pop	{r4, r7, pc}
 8017aee:	bf00      	nop
 8017af0:	0801a76c 	.word	0x0801a76c
 8017af4:	0801a70c 	.word	0x0801a70c
 8017af8:	431bde83 	.word	0x431bde83

08017afc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017afc:	b590      	push	{r4, r7, lr}
 8017afe:	b093      	sub	sp, #76	; 0x4c
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017b06:	4b37      	ldr	r3, [pc, #220]	; (8017be4 <RCC_SetFlashLatency+0xe8>)
 8017b08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017b12:	4a35      	ldr	r2, [pc, #212]	; (8017be8 <RCC_SetFlashLatency+0xec>)
 8017b14:	f107 031c 	add.w	r3, r7, #28
 8017b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017b1e:	4b33      	ldr	r3, [pc, #204]	; (8017bec <RCC_SetFlashLatency+0xf0>)
 8017b20:	f107 040c 	add.w	r4, r7, #12
 8017b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b34:	d11a      	bne.n	8017b6c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017b36:	2300      	movs	r3, #0
 8017b38:	643b      	str	r3, [r7, #64]	; 0x40
 8017b3a:	e013      	b.n	8017b64 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b3e:	009b      	lsls	r3, r3, #2
 8017b40:	3348      	adds	r3, #72	; 0x48
 8017b42:	443b      	add	r3, r7
 8017b44:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017b48:	687a      	ldr	r2, [r7, #4]
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d807      	bhi.n	8017b5e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b50:	009b      	lsls	r3, r3, #2
 8017b52:	3348      	adds	r3, #72	; 0x48
 8017b54:	443b      	add	r3, r7
 8017b56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017b5a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017b5c:	e020      	b.n	8017ba0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b60:	3301      	adds	r3, #1
 8017b62:	643b      	str	r3, [r7, #64]	; 0x40
 8017b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b66:	2b03      	cmp	r3, #3
 8017b68:	d9e8      	bls.n	8017b3c <RCC_SetFlashLatency+0x40>
 8017b6a:	e019      	b.n	8017ba0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b70:	e013      	b.n	8017b9a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b74:	009b      	lsls	r3, r3, #2
 8017b76:	3348      	adds	r3, #72	; 0x48
 8017b78:	443b      	add	r3, r7
 8017b7a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d807      	bhi.n	8017b94 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b86:	009b      	lsls	r3, r3, #2
 8017b88:	3348      	adds	r3, #72	; 0x48
 8017b8a:	443b      	add	r3, r7
 8017b8c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017b90:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017b92:	e005      	b.n	8017ba0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b96:	3301      	adds	r3, #1
 8017b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b9c:	2b02      	cmp	r3, #2
 8017b9e:	d9e8      	bls.n	8017b72 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017ba0:	4b13      	ldr	r3, [pc, #76]	; (8017bf0 <RCC_SetFlashLatency+0xf4>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	f023 0207 	bic.w	r2, r3, #7
 8017ba8:	4911      	ldr	r1, [pc, #68]	; (8017bf0 <RCC_SetFlashLatency+0xf4>)
 8017baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bac:	4313      	orrs	r3, r2
 8017bae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017bb0:	f7fd fbb8 	bl	8015324 <HAL_GetTick>
 8017bb4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017bb6:	e008      	b.n	8017bca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017bb8:	f7fd fbb4 	bl	8015324 <HAL_GetTick>
 8017bbc:	4602      	mov	r2, r0
 8017bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc0:	1ad3      	subs	r3, r2, r3
 8017bc2:	2b02      	cmp	r3, #2
 8017bc4:	d901      	bls.n	8017bca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017bc6:	2303      	movs	r3, #3
 8017bc8:	e007      	b.n	8017bda <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017bca:	4b09      	ldr	r3, [pc, #36]	; (8017bf0 <RCC_SetFlashLatency+0xf4>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f003 0307 	and.w	r3, r3, #7
 8017bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d1ef      	bne.n	8017bb8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017bd8:	2300      	movs	r3, #0
}
 8017bda:	4618      	mov	r0, r3
 8017bdc:	374c      	adds	r7, #76	; 0x4c
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd90      	pop	{r4, r7, pc}
 8017be2:	bf00      	nop
 8017be4:	0801a6e0 	.word	0x0801a6e0
 8017be8:	0801a6f0 	.word	0x0801a6f0
 8017bec:	0801a6fc 	.word	0x0801a6fc
 8017bf0:	58004000 	.word	0x58004000

08017bf4 <LL_RCC_LSE_IsEnabled>:
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c00:	f003 0301 	and.w	r3, r3, #1
 8017c04:	2b01      	cmp	r3, #1
 8017c06:	d101      	bne.n	8017c0c <LL_RCC_LSE_IsEnabled+0x18>
 8017c08:	2301      	movs	r3, #1
 8017c0a:	e000      	b.n	8017c0e <LL_RCC_LSE_IsEnabled+0x1a>
 8017c0c:	2300      	movs	r3, #0
}
 8017c0e:	4618      	mov	r0, r3
 8017c10:	46bd      	mov	sp, r7
 8017c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c16:	4770      	bx	lr

08017c18 <LL_RCC_LSE_IsReady>:
{
 8017c18:	b480      	push	{r7}
 8017c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c24:	f003 0302 	and.w	r3, r3, #2
 8017c28:	2b02      	cmp	r3, #2
 8017c2a:	d101      	bne.n	8017c30 <LL_RCC_LSE_IsReady+0x18>
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e000      	b.n	8017c32 <LL_RCC_LSE_IsReady+0x1a>
 8017c30:	2300      	movs	r3, #0
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr

08017c3c <LL_RCC_MSI_EnablePLLMode>:
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017c4a:	f043 0304 	orr.w	r3, r3, #4
 8017c4e:	6013      	str	r3, [r2, #0]
}
 8017c50:	bf00      	nop
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr

08017c5a <LL_RCC_SetRFWKPClockSource>:
{
 8017c5a:	b480      	push	{r7}
 8017c5c:	b083      	sub	sp, #12
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	4313      	orrs	r3, r2
 8017c76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017c7a:	bf00      	nop
 8017c7c:	370c      	adds	r7, #12
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <LL_RCC_SetSMPSClockSource>:
{
 8017c86:	b480      	push	{r7}
 8017c88:	b083      	sub	sp, #12
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c94:	f023 0203 	bic.w	r2, r3, #3
 8017c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	4313      	orrs	r3, r2
 8017ca0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017ca2:	bf00      	nop
 8017ca4:	370c      	adds	r7, #12
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <LL_RCC_SetSMPSPrescaler>:
{
 8017cae:	b480      	push	{r7}
 8017cb0:	b083      	sub	sp, #12
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	4313      	orrs	r3, r2
 8017cc8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017cca:	bf00      	nop
 8017ccc:	370c      	adds	r7, #12
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr

08017cd6 <LL_RCC_SetUSARTClockSource>:
{
 8017cd6:	b480      	push	{r7}
 8017cd8:	b083      	sub	sp, #12
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ce6:	f023 0203 	bic.w	r2, r3, #3
 8017cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017cf6:	bf00      	nop
 8017cf8:	370c      	adds	r7, #12
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr

08017d02 <LL_RCC_SetLPUARTClockSource>:
{
 8017d02:	b480      	push	{r7}
 8017d04:	b083      	sub	sp, #12
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	4313      	orrs	r3, r2
 8017d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d22:	bf00      	nop
 8017d24:	370c      	adds	r7, #12
 8017d26:	46bd      	mov	sp, r7
 8017d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2c:	4770      	bx	lr

08017d2e <LL_RCC_SetI2CClockSource>:
{
 8017d2e:	b480      	push	{r7}
 8017d30:	b083      	sub	sp, #12
 8017d32:	af00      	add	r7, sp, #0
 8017d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	091b      	lsrs	r3, r3, #4
 8017d42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017d46:	43db      	mvns	r3, r3
 8017d48:	401a      	ands	r2, r3
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	011b      	lsls	r3, r3, #4
 8017d4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d56:	4313      	orrs	r3, r2
 8017d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d5c:	bf00      	nop
 8017d5e:	370c      	adds	r7, #12
 8017d60:	46bd      	mov	sp, r7
 8017d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d66:	4770      	bx	lr

08017d68 <LL_RCC_SetLPTIMClockSource>:
{
 8017d68:	b480      	push	{r7}
 8017d6a:	b083      	sub	sp, #12
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	0c1b      	lsrs	r3, r3, #16
 8017d7c:	041b      	lsls	r3, r3, #16
 8017d7e:	43db      	mvns	r3, r3
 8017d80:	401a      	ands	r2, r3
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	041b      	lsls	r3, r3, #16
 8017d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017d8a:	4313      	orrs	r3, r2
 8017d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017d90:	bf00      	nop
 8017d92:	370c      	adds	r7, #12
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr

08017d9c <LL_RCC_SetSAIClockSource>:
{
 8017d9c:	b480      	push	{r7}
 8017d9e:	b083      	sub	sp, #12
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	4313      	orrs	r3, r2
 8017db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017dbc:	bf00      	nop
 8017dbe:	370c      	adds	r7, #12
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc6:	4770      	bx	lr

08017dc8 <LL_RCC_SetRNGClockSource>:
{
 8017dc8:	b480      	push	{r7}
 8017dca:	b083      	sub	sp, #12
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dd8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	4313      	orrs	r3, r2
 8017de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017de8:	bf00      	nop
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <LL_RCC_SetCLK48ClockSource>:
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	4313      	orrs	r3, r2
 8017e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e14:	bf00      	nop
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr

08017e20 <LL_RCC_SetUSBClockSource>:
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b082      	sub	sp, #8
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7ff ffe3 	bl	8017df4 <LL_RCC_SetCLK48ClockSource>
}
 8017e2e:	bf00      	nop
 8017e30:	3708      	adds	r7, #8
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <LL_RCC_SetADCClockSource>:
{
 8017e36:	b480      	push	{r7}
 8017e38:	b083      	sub	sp, #12
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4313      	orrs	r3, r2
 8017e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e56:	bf00      	nop
 8017e58:	370c      	adds	r7, #12
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e60:	4770      	bx	lr

08017e62 <LL_RCC_SetRTCClockSource>:
{
 8017e62:	b480      	push	{r7}
 8017e64:	b083      	sub	sp, #12
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	4313      	orrs	r3, r2
 8017e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017e82:	bf00      	nop
 8017e84:	370c      	adds	r7, #12
 8017e86:	46bd      	mov	sp, r7
 8017e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8c:	4770      	bx	lr

08017e8e <LL_RCC_GetRTCClockSource>:
{
 8017e8e:	b480      	push	{r7}
 8017e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8017e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea6:	4770      	bx	lr

08017ea8 <LL_RCC_ForceBackupDomainReset>:
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017ec0:	bf00      	nop
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr

08017eca <LL_RCC_ReleaseBackupDomainReset>:
{
 8017eca:	b480      	push	{r7}
 8017ecc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017ee2:	bf00      	nop
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eea:	4770      	bx	lr

08017eec <LL_RCC_PLLSAI1_Enable>:
{
 8017eec:	b480      	push	{r7}
 8017eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017efe:	6013      	str	r3, [r2, #0]
}
 8017f00:	bf00      	nop
 8017f02:	46bd      	mov	sp, r7
 8017f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f08:	4770      	bx	lr

08017f0a <LL_RCC_PLLSAI1_Disable>:
{
 8017f0a:	b480      	push	{r7}
 8017f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017f1c:	6013      	str	r3, [r2, #0]
}
 8017f1e:	bf00      	nop
 8017f20:	46bd      	mov	sp, r7
 8017f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f26:	4770      	bx	lr

08017f28 <LL_RCC_PLLSAI1_IsReady>:
{
 8017f28:	b480      	push	{r7}
 8017f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8017f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f3a:	d101      	bne.n	8017f40 <LL_RCC_PLLSAI1_IsReady+0x18>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e000      	b.n	8017f42 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8017f40:	2300      	movs	r3, #0
}
 8017f42:	4618      	mov	r0, r3
 8017f44:	46bd      	mov	sp, r7
 8017f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4a:	4770      	bx	lr

08017f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b088      	sub	sp, #32
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8017f54:	2300      	movs	r3, #0
 8017f56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8017f58:	2300      	movs	r3, #0
 8017f5a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d034      	beq.n	8017fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017f70:	d021      	beq.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8017f72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017f76:	d81b      	bhi.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f7c:	d01d      	beq.n	8017fba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8017f7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f82:	d815      	bhi.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d00b      	beq.n	8017fa0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8017f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017f8c:	d110      	bne.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8017f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f92:	68db      	ldr	r3, [r3, #12]
 8017f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017f9c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8017f9e:	e00d      	b.n	8017fbc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	3304      	adds	r3, #4
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f000 f94d 	bl	8018244 <RCCEx_PLLSAI1_ConfigNP>
 8017faa:	4603      	mov	r3, r0
 8017fac:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017fae:	e005      	b.n	8017fbc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	77fb      	strb	r3, [r7, #31]
        break;
 8017fb4:	e002      	b.n	8017fbc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017fb6:	bf00      	nop
 8017fb8:	e000      	b.n	8017fbc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017fbc:	7ffb      	ldrb	r3, [r7, #31]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d105      	bne.n	8017fce <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7ff fee8 	bl	8017d9c <LL_RCC_SetSAIClockSource>
 8017fcc:	e001      	b.n	8017fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017fce:	7ffb      	ldrb	r3, [r7, #31]
 8017fd0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d046      	beq.n	801806c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8017fde:	f7ff ff56 	bl	8017e8e <LL_RCC_GetRTCClockSource>
 8017fe2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fe8:	69ba      	ldr	r2, [r7, #24]
 8017fea:	429a      	cmp	r2, r3
 8017fec:	d03c      	beq.n	8018068 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017fee:	f7fe fc1b 	bl	8016828 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d105      	bne.n	8018004 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7ff ff30 	bl	8017e62 <LL_RCC_SetRTCClockSource>
 8018002:	e02e      	b.n	8018062 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8018004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801800c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801800e:	f7ff ff4b 	bl	8017ea8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8018012:	f7ff ff5a 	bl	8017eca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018020:	4313      	orrs	r3, r2
 8018022:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8018024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801802e:	f7ff fde1 	bl	8017bf4 <LL_RCC_LSE_IsEnabled>
 8018032:	4603      	mov	r3, r0
 8018034:	2b01      	cmp	r3, #1
 8018036:	d114      	bne.n	8018062 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018038:	f7fd f974 	bl	8015324 <HAL_GetTick>
 801803c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801803e:	e00b      	b.n	8018058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018040:	f7fd f970 	bl	8015324 <HAL_GetTick>
 8018044:	4602      	mov	r2, r0
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	1ad3      	subs	r3, r2, r3
 801804a:	f241 3288 	movw	r2, #5000	; 0x1388
 801804e:	4293      	cmp	r3, r2
 8018050:	d902      	bls.n	8018058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8018052:	2303      	movs	r3, #3
 8018054:	77fb      	strb	r3, [r7, #31]
              break;
 8018056:	e004      	b.n	8018062 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8018058:	f7ff fdde 	bl	8017c18 <LL_RCC_LSE_IsReady>
 801805c:	4603      	mov	r3, r0
 801805e:	2b01      	cmp	r3, #1
 8018060:	d1ee      	bne.n	8018040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8018062:	7ffb      	ldrb	r3, [r7, #31]
 8018064:	77bb      	strb	r3, [r7, #30]
 8018066:	e001      	b.n	801806c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018068:	7ffb      	ldrb	r3, [r7, #31]
 801806a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f003 0301 	and.w	r3, r3, #1
 8018074:	2b00      	cmp	r3, #0
 8018076:	d004      	beq.n	8018082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	699b      	ldr	r3, [r3, #24]
 801807c:	4618      	mov	r0, r3
 801807e:	f7ff fe2a 	bl	8017cd6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	f003 0302 	and.w	r3, r3, #2
 801808a:	2b00      	cmp	r3, #0
 801808c:	d004      	beq.n	8018098 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	69db      	ldr	r3, [r3, #28]
 8018092:	4618      	mov	r0, r3
 8018094:	f7ff fe35 	bl	8017d02 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f003 0310 	and.w	r3, r3, #16
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d004      	beq.n	80180ae <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7ff fe5d 	bl	8017d68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f003 0320 	and.w	r3, r3, #32
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d004      	beq.n	80180c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ff fe52 	bl	8017d68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f003 0304 	and.w	r3, r3, #4
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d004      	beq.n	80180da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	6a1b      	ldr	r3, [r3, #32]
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7ff fe2a 	bl	8017d2e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	f003 0308 	and.w	r3, r3, #8
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d004      	beq.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7ff fe1f 	bl	8017d2e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d022      	beq.n	8018142 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018100:	4618      	mov	r0, r3
 8018102:	f7ff fe8d 	bl	8017e20 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801810a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801810e:	d107      	bne.n	8018120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8018110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801811a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801811e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018128:	d10b      	bne.n	8018142 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	3304      	adds	r3, #4
 801812e:	4618      	mov	r0, r3
 8018130:	f000 f8e3 	bl	80182fa <RCCEx_PLLSAI1_ConfigNQ>
 8018134:	4603      	mov	r3, r0
 8018136:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018138:	7ffb      	ldrb	r3, [r7, #31]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d001      	beq.n	8018142 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801813e:	7ffb      	ldrb	r3, [r7, #31]
 8018140:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801814a:	2b00      	cmp	r3, #0
 801814c:	d02b      	beq.n	80181a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018156:	d008      	beq.n	801816a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801815c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018160:	d003      	beq.n	801816a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018166:	2b00      	cmp	r3, #0
 8018168:	d105      	bne.n	8018176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801816e:	4618      	mov	r0, r3
 8018170:	f7ff fe2a 	bl	8017dc8 <LL_RCC_SetRNGClockSource>
 8018174:	e00a      	b.n	801818c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801817a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801817e:	60fb      	str	r3, [r7, #12]
 8018180:	2000      	movs	r0, #0
 8018182:	f7ff fe21 	bl	8017dc8 <LL_RCC_SetRNGClockSource>
 8018186:	68f8      	ldr	r0, [r7, #12]
 8018188:	f7ff fe34 	bl	8017df4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018190:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018194:	d107      	bne.n	80181a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8018196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801819a:	68db      	ldr	r3, [r3, #12]
 801819c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80181a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d022      	beq.n	80181f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7ff fe3d 	bl	8017e36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80181c4:	d107      	bne.n	80181d6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80181c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ca:	68db      	ldr	r3, [r3, #12]
 80181cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80181d4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80181de:	d10b      	bne.n	80181f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	3304      	adds	r3, #4
 80181e4:	4618      	mov	r0, r3
 80181e6:	f000 f8e3 	bl	80183b0 <RCCEx_PLLSAI1_ConfigNR>
 80181ea:	4603      	mov	r3, r0
 80181ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80181ee:	7ffb      	ldrb	r3, [r7, #31]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d001      	beq.n	80181f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80181f4:	7ffb      	ldrb	r3, [r7, #31]
 80181f6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018200:	2b00      	cmp	r3, #0
 8018202:	d004      	beq.n	801820e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018208:	4618      	mov	r0, r3
 801820a:	f7ff fd26 	bl	8017c5a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018216:	2b00      	cmp	r3, #0
 8018218:	d009      	beq.n	801822e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801821e:	4618      	mov	r0, r3
 8018220:	f7ff fd45 	bl	8017cae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018228:	4618      	mov	r0, r3
 801822a:	f7ff fd2c 	bl	8017c86 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801822e:	7fbb      	ldrb	r3, [r7, #30]
}
 8018230:	4618      	mov	r0, r3
 8018232:	3720      	adds	r7, #32
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}

08018238 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801823c:	f7ff fcfe 	bl	8017c3c <LL_RCC_MSI_EnablePLLMode>
}
 8018240:	bf00      	nop
 8018242:	bd80      	pop	{r7, pc}

08018244 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b084      	sub	sp, #16
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801824c:	2300      	movs	r3, #0
 801824e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018250:	f7ff fe5b 	bl	8017f0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018254:	f7fd f866 	bl	8015324 <HAL_GetTick>
 8018258:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801825a:	e009      	b.n	8018270 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801825c:	f7fd f862 	bl	8015324 <HAL_GetTick>
 8018260:	4602      	mov	r2, r0
 8018262:	68bb      	ldr	r3, [r7, #8]
 8018264:	1ad3      	subs	r3, r2, r3
 8018266:	2b02      	cmp	r3, #2
 8018268:	d902      	bls.n	8018270 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801826a:	2303      	movs	r3, #3
 801826c:	73fb      	strb	r3, [r7, #15]
      break;
 801826e:	e004      	b.n	801827a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018270:	f7ff fe5a 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 8018274:	4603      	mov	r3, r0
 8018276:	2b00      	cmp	r3, #0
 8018278:	d1f0      	bne.n	801825c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801827a:	7bfb      	ldrb	r3, [r7, #15]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d137      	bne.n	80182f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018284:	691b      	ldr	r3, [r3, #16]
 8018286:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	021b      	lsls	r3, r3, #8
 8018290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018294:	4313      	orrs	r3, r2
 8018296:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8018298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801829c:	691b      	ldr	r3, [r3, #16]
 801829e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	685b      	ldr	r3, [r3, #4]
 80182a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182aa:	4313      	orrs	r3, r2
 80182ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80182ae:	f7ff fe1d 	bl	8017eec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80182b2:	f7fd f837 	bl	8015324 <HAL_GetTick>
 80182b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80182b8:	e009      	b.n	80182ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80182ba:	f7fd f833 	bl	8015324 <HAL_GetTick>
 80182be:	4602      	mov	r2, r0
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	1ad3      	subs	r3, r2, r3
 80182c4:	2b02      	cmp	r3, #2
 80182c6:	d902      	bls.n	80182ce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80182c8:	2303      	movs	r3, #3
 80182ca:	73fb      	strb	r3, [r7, #15]
        break;
 80182cc:	e004      	b.n	80182d8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80182ce:	f7ff fe2b 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 80182d2:	4603      	mov	r3, r0
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	d1f0      	bne.n	80182ba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80182d8:	7bfb      	ldrb	r3, [r7, #15]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d108      	bne.n	80182f0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80182de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182e2:	691a      	ldr	r2, [r3, #16]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	691b      	ldr	r3, [r3, #16]
 80182e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182ec:	4313      	orrs	r3, r2
 80182ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80182f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}

080182fa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b084      	sub	sp, #16
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018302:	2300      	movs	r3, #0
 8018304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018306:	f7ff fe00 	bl	8017f0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801830a:	f7fd f80b 	bl	8015324 <HAL_GetTick>
 801830e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018310:	e009      	b.n	8018326 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018312:	f7fd f807 	bl	8015324 <HAL_GetTick>
 8018316:	4602      	mov	r2, r0
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	1ad3      	subs	r3, r2, r3
 801831c:	2b02      	cmp	r3, #2
 801831e:	d902      	bls.n	8018326 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8018320:	2303      	movs	r3, #3
 8018322:	73fb      	strb	r3, [r7, #15]
      break;
 8018324:	e004      	b.n	8018330 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018326:	f7ff fdff 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 801832a:	4603      	mov	r3, r0
 801832c:	2b00      	cmp	r3, #0
 801832e:	d1f0      	bne.n	8018312 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8018330:	7bfb      	ldrb	r3, [r7, #15]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d137      	bne.n	80183a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801833a:	691b      	ldr	r3, [r3, #16]
 801833c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	021b      	lsls	r3, r3, #8
 8018346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801834a:	4313      	orrs	r3, r2
 801834c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801834e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018352:	691b      	ldr	r3, [r3, #16]
 8018354:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	689b      	ldr	r3, [r3, #8]
 801835c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018360:	4313      	orrs	r3, r2
 8018362:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018364:	f7ff fdc2 	bl	8017eec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018368:	f7fc ffdc 	bl	8015324 <HAL_GetTick>
 801836c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801836e:	e009      	b.n	8018384 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018370:	f7fc ffd8 	bl	8015324 <HAL_GetTick>
 8018374:	4602      	mov	r2, r0
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	1ad3      	subs	r3, r2, r3
 801837a:	2b02      	cmp	r3, #2
 801837c:	d902      	bls.n	8018384 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801837e:	2303      	movs	r3, #3
 8018380:	73fb      	strb	r3, [r7, #15]
        break;
 8018382:	e004      	b.n	801838e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018384:	f7ff fdd0 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 8018388:	4603      	mov	r3, r0
 801838a:	2b01      	cmp	r3, #1
 801838c:	d1f0      	bne.n	8018370 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801838e:	7bfb      	ldrb	r3, [r7, #15]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d108      	bne.n	80183a6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018398:	691a      	ldr	r2, [r3, #16]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	691b      	ldr	r3, [r3, #16]
 801839e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183a2:	4313      	orrs	r3, r2
 80183a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80183a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3710      	adds	r7, #16
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b084      	sub	sp, #16
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80183b8:	2300      	movs	r3, #0
 80183ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80183bc:	f7ff fda5 	bl	8017f0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80183c0:	f7fc ffb0 	bl	8015324 <HAL_GetTick>
 80183c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183c6:	e009      	b.n	80183dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80183c8:	f7fc ffac 	bl	8015324 <HAL_GetTick>
 80183cc:	4602      	mov	r2, r0
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	1ad3      	subs	r3, r2, r3
 80183d2:	2b02      	cmp	r3, #2
 80183d4:	d902      	bls.n	80183dc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80183d6:	2303      	movs	r3, #3
 80183d8:	73fb      	strb	r3, [r7, #15]
      break;
 80183da:	e004      	b.n	80183e6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183dc:	f7ff fda4 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 80183e0:	4603      	mov	r3, r0
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d1f0      	bne.n	80183c8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80183e6:	7bfb      	ldrb	r3, [r7, #15]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d137      	bne.n	801845c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80183ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183f0:	691b      	ldr	r3, [r3, #16]
 80183f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	021b      	lsls	r3, r3, #8
 80183fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018400:	4313      	orrs	r3, r2
 8018402:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018408:	691b      	ldr	r3, [r3, #16]
 801840a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018416:	4313      	orrs	r3, r2
 8018418:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801841a:	f7ff fd67 	bl	8017eec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801841e:	f7fc ff81 	bl	8015324 <HAL_GetTick>
 8018422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018424:	e009      	b.n	801843a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018426:	f7fc ff7d 	bl	8015324 <HAL_GetTick>
 801842a:	4602      	mov	r2, r0
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	2b02      	cmp	r3, #2
 8018432:	d902      	bls.n	801843a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018434:	2303      	movs	r3, #3
 8018436:	73fb      	strb	r3, [r7, #15]
        break;
 8018438:	e004      	b.n	8018444 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801843a:	f7ff fd75 	bl	8017f28 <LL_RCC_PLLSAI1_IsReady>
 801843e:	4603      	mov	r3, r0
 8018440:	2b01      	cmp	r3, #1
 8018442:	d1f0      	bne.n	8018426 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018444:	7bfb      	ldrb	r3, [r7, #15]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d108      	bne.n	801845c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801844a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801844e:	691a      	ldr	r2, [r3, #16]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	691b      	ldr	r3, [r3, #16]
 8018454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018458:	4313      	orrs	r3, r2
 801845a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801845c:	7bfb      	ldrb	r3, [r7, #15]
}
 801845e:	4618      	mov	r0, r3
 8018460:	3710      	adds	r7, #16
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}

08018466 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018466:	b580      	push	{r7, lr}
 8018468:	b082      	sub	sp, #8
 801846a:	af00      	add	r7, sp, #0
 801846c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d101      	bne.n	8018478 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018474:	2301      	movs	r3, #1
 8018476:	e049      	b.n	801850c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b00      	cmp	r3, #0
 8018482:	d106      	bne.n	8018492 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2200      	movs	r2, #0
 8018488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	f000 f841 	bl	8018514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2202      	movs	r2, #2
 8018496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681a      	ldr	r2, [r3, #0]
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	3304      	adds	r3, #4
 80184a2:	4619      	mov	r1, r3
 80184a4:	4610      	mov	r0, r2
 80184a6:	f000 f9d5 	bl	8018854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2201      	movs	r2, #1
 80184ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2201      	movs	r2, #1
 80184b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	2201      	movs	r2, #1
 80184be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2201      	movs	r2, #1
 80184c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2201      	movs	r2, #1
 80184ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	2201      	movs	r2, #1
 80184d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2201      	movs	r2, #1
 80184de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2201      	movs	r2, #1
 80184e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	2201      	movs	r2, #1
 80184ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	2201      	movs	r2, #1
 80184f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2201      	movs	r2, #1
 80184fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	2201      	movs	r2, #1
 8018506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801850a:	2300      	movs	r3, #0
}
 801850c:	4618      	mov	r0, r3
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}

08018514 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018514:	b480      	push	{r7}
 8018516:	b083      	sub	sp, #12
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801851c:	bf00      	nop
 801851e:	370c      	adds	r7, #12
 8018520:	46bd      	mov	sp, r7
 8018522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018526:	4770      	bx	lr

08018528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018536:	b2db      	uxtb	r3, r3
 8018538:	2b01      	cmp	r3, #1
 801853a:	d001      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801853c:	2301      	movs	r3, #1
 801853e:	e036      	b.n	80185ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2202      	movs	r2, #2
 8018544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	68da      	ldr	r2, [r3, #12]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	f042 0201 	orr.w	r2, r2, #1
 8018556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a17      	ldr	r2, [pc, #92]	; (80185bc <HAL_TIM_Base_Start_IT+0x94>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d004      	beq.n	801856c <HAL_TIM_Base_Start_IT+0x44>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801856a:	d115      	bne.n	8018598 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	689a      	ldr	r2, [r3, #8]
 8018572:	4b13      	ldr	r3, [pc, #76]	; (80185c0 <HAL_TIM_Base_Start_IT+0x98>)
 8018574:	4013      	ands	r3, r2
 8018576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2b06      	cmp	r3, #6
 801857c:	d015      	beq.n	80185aa <HAL_TIM_Base_Start_IT+0x82>
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018584:	d011      	beq.n	80185aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	681a      	ldr	r2, [r3, #0]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	f042 0201 	orr.w	r2, r2, #1
 8018594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018596:	e008      	b.n	80185aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	681a      	ldr	r2, [r3, #0]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	f042 0201 	orr.w	r2, r2, #1
 80185a6:	601a      	str	r2, [r3, #0]
 80185a8:	e000      	b.n	80185ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80185ac:	2300      	movs	r3, #0
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3714      	adds	r7, #20
 80185b2:	46bd      	mov	sp, r7
 80185b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	40012c00 	.word	0x40012c00
 80185c0:	00010007 	.word	0x00010007

080185c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	691b      	ldr	r3, [r3, #16]
 80185d2:	f003 0302 	and.w	r3, r3, #2
 80185d6:	2b02      	cmp	r3, #2
 80185d8:	d122      	bne.n	8018620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	68db      	ldr	r3, [r3, #12]
 80185e0:	f003 0302 	and.w	r3, r3, #2
 80185e4:	2b02      	cmp	r3, #2
 80185e6:	d11b      	bne.n	8018620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f06f 0202 	mvn.w	r2, #2
 80185f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	2201      	movs	r2, #1
 80185f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	699b      	ldr	r3, [r3, #24]
 80185fe:	f003 0303 	and.w	r3, r3, #3
 8018602:	2b00      	cmp	r3, #0
 8018604:	d003      	beq.n	801860e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f000 f905 	bl	8018816 <HAL_TIM_IC_CaptureCallback>
 801860c:	e005      	b.n	801861a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 f8f7 	bl	8018802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	f000 f908 	bl	801882a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2200      	movs	r2, #0
 801861e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	691b      	ldr	r3, [r3, #16]
 8018626:	f003 0304 	and.w	r3, r3, #4
 801862a:	2b04      	cmp	r3, #4
 801862c:	d122      	bne.n	8018674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	f003 0304 	and.w	r3, r3, #4
 8018638:	2b04      	cmp	r3, #4
 801863a:	d11b      	bne.n	8018674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	f06f 0204 	mvn.w	r2, #4
 8018644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2202      	movs	r2, #2
 801864a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	699b      	ldr	r3, [r3, #24]
 8018652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018656:	2b00      	cmp	r3, #0
 8018658:	d003      	beq.n	8018662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	f000 f8db 	bl	8018816 <HAL_TIM_IC_CaptureCallback>
 8018660:	e005      	b.n	801866e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 f8cd 	bl	8018802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f000 f8de 	bl	801882a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2200      	movs	r2, #0
 8018672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	691b      	ldr	r3, [r3, #16]
 801867a:	f003 0308 	and.w	r3, r3, #8
 801867e:	2b08      	cmp	r3, #8
 8018680:	d122      	bne.n	80186c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	68db      	ldr	r3, [r3, #12]
 8018688:	f003 0308 	and.w	r3, r3, #8
 801868c:	2b08      	cmp	r3, #8
 801868e:	d11b      	bne.n	80186c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	f06f 0208 	mvn.w	r2, #8
 8018698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	2204      	movs	r2, #4
 801869e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	69db      	ldr	r3, [r3, #28]
 80186a6:	f003 0303 	and.w	r3, r3, #3
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d003      	beq.n	80186b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	f000 f8b1 	bl	8018816 <HAL_TIM_IC_CaptureCallback>
 80186b4:	e005      	b.n	80186c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	f000 f8a3 	bl	8018802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80186bc:	6878      	ldr	r0, [r7, #4]
 80186be:	f000 f8b4 	bl	801882a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2200      	movs	r2, #0
 80186c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	691b      	ldr	r3, [r3, #16]
 80186ce:	f003 0310 	and.w	r3, r3, #16
 80186d2:	2b10      	cmp	r3, #16
 80186d4:	d122      	bne.n	801871c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	68db      	ldr	r3, [r3, #12]
 80186dc:	f003 0310 	and.w	r3, r3, #16
 80186e0:	2b10      	cmp	r3, #16
 80186e2:	d11b      	bne.n	801871c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	f06f 0210 	mvn.w	r2, #16
 80186ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	2208      	movs	r2, #8
 80186f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	69db      	ldr	r3, [r3, #28]
 80186fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d003      	beq.n	801870a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	f000 f887 	bl	8018816 <HAL_TIM_IC_CaptureCallback>
 8018708:	e005      	b.n	8018716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 f879 	bl	8018802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f000 f88a 	bl	801882a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2200      	movs	r2, #0
 801871a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	691b      	ldr	r3, [r3, #16]
 8018722:	f003 0301 	and.w	r3, r3, #1
 8018726:	2b01      	cmp	r3, #1
 8018728:	d10e      	bne.n	8018748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	68db      	ldr	r3, [r3, #12]
 8018730:	f003 0301 	and.w	r3, r3, #1
 8018734:	2b01      	cmp	r3, #1
 8018736:	d107      	bne.n	8018748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f06f 0201 	mvn.w	r2, #1
 8018740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018742:	6878      	ldr	r0, [r7, #4]
 8018744:	f7e8 f9dc 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	691b      	ldr	r3, [r3, #16]
 801874e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018752:	2b80      	cmp	r3, #128	; 0x80
 8018754:	d10e      	bne.n	8018774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018760:	2b80      	cmp	r3, #128	; 0x80
 8018762:	d107      	bne.n	8018774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801876c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f000 f8de 	bl	8018930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	691b      	ldr	r3, [r3, #16]
 801877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801877e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018782:	d10e      	bne.n	80187a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	68db      	ldr	r3, [r3, #12]
 801878a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801878e:	2b80      	cmp	r3, #128	; 0x80
 8018790:	d107      	bne.n	80187a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801879a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f000 f8d1 	bl	8018944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	691b      	ldr	r3, [r3, #16]
 80187a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187ac:	2b40      	cmp	r3, #64	; 0x40
 80187ae:	d10e      	bne.n	80187ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	68db      	ldr	r3, [r3, #12]
 80187b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187ba:	2b40      	cmp	r3, #64	; 0x40
 80187bc:	d107      	bne.n	80187ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80187c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f000 f838 	bl	801883e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	691b      	ldr	r3, [r3, #16]
 80187d4:	f003 0320 	and.w	r3, r3, #32
 80187d8:	2b20      	cmp	r3, #32
 80187da:	d10e      	bne.n	80187fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	68db      	ldr	r3, [r3, #12]
 80187e2:	f003 0320 	and.w	r3, r3, #32
 80187e6:	2b20      	cmp	r3, #32
 80187e8:	d107      	bne.n	80187fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	f06f 0220 	mvn.w	r2, #32
 80187f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f000 f891 	bl	801891c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80187fa:	bf00      	nop
 80187fc:	3708      	adds	r7, #8
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}

08018802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018802:	b480      	push	{r7}
 8018804:	b083      	sub	sp, #12
 8018806:	af00      	add	r7, sp, #0
 8018808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801880a:	bf00      	nop
 801880c:	370c      	adds	r7, #12
 801880e:	46bd      	mov	sp, r7
 8018810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018814:	4770      	bx	lr

08018816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018816:	b480      	push	{r7}
 8018818:	b083      	sub	sp, #12
 801881a:	af00      	add	r7, sp, #0
 801881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801881e:	bf00      	nop
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr

0801882a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801882a:	b480      	push	{r7}
 801882c:	b083      	sub	sp, #12
 801882e:	af00      	add	r7, sp, #0
 8018830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018832:	bf00      	nop
 8018834:	370c      	adds	r7, #12
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr

0801883e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801883e:	b480      	push	{r7}
 8018840:	b083      	sub	sp, #12
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018846:	bf00      	nop
 8018848:	370c      	adds	r7, #12
 801884a:	46bd      	mov	sp, r7
 801884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018850:	4770      	bx	lr
	...

08018854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018854:	b480      	push	{r7}
 8018856:	b085      	sub	sp, #20
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	4a2a      	ldr	r2, [pc, #168]	; (8018910 <TIM_Base_SetConfig+0xbc>)
 8018868:	4293      	cmp	r3, r2
 801886a:	d003      	beq.n	8018874 <TIM_Base_SetConfig+0x20>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018872:	d108      	bne.n	8018886 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801887a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	68fa      	ldr	r2, [r7, #12]
 8018882:	4313      	orrs	r3, r2
 8018884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	4a21      	ldr	r2, [pc, #132]	; (8018910 <TIM_Base_SetConfig+0xbc>)
 801888a:	4293      	cmp	r3, r2
 801888c:	d00b      	beq.n	80188a6 <TIM_Base_SetConfig+0x52>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018894:	d007      	beq.n	80188a6 <TIM_Base_SetConfig+0x52>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	4a1e      	ldr	r2, [pc, #120]	; (8018914 <TIM_Base_SetConfig+0xc0>)
 801889a:	4293      	cmp	r3, r2
 801889c:	d003      	beq.n	80188a6 <TIM_Base_SetConfig+0x52>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	4a1d      	ldr	r2, [pc, #116]	; (8018918 <TIM_Base_SetConfig+0xc4>)
 80188a2:	4293      	cmp	r3, r2
 80188a4:	d108      	bne.n	80188b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80188ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80188ae:	683b      	ldr	r3, [r7, #0]
 80188b0:	68db      	ldr	r3, [r3, #12]
 80188b2:	68fa      	ldr	r2, [r7, #12]
 80188b4:	4313      	orrs	r3, r2
 80188b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	695b      	ldr	r3, [r3, #20]
 80188c2:	4313      	orrs	r3, r2
 80188c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	68fa      	ldr	r2, [r7, #12]
 80188ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	689a      	ldr	r2, [r3, #8]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80188d4:	683b      	ldr	r3, [r7, #0]
 80188d6:	681a      	ldr	r2, [r3, #0]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	4a0c      	ldr	r2, [pc, #48]	; (8018910 <TIM_Base_SetConfig+0xbc>)
 80188e0:	4293      	cmp	r3, r2
 80188e2:	d007      	beq.n	80188f4 <TIM_Base_SetConfig+0xa0>
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	4a0b      	ldr	r2, [pc, #44]	; (8018914 <TIM_Base_SetConfig+0xc0>)
 80188e8:	4293      	cmp	r3, r2
 80188ea:	d003      	beq.n	80188f4 <TIM_Base_SetConfig+0xa0>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	4a0a      	ldr	r2, [pc, #40]	; (8018918 <TIM_Base_SetConfig+0xc4>)
 80188f0:	4293      	cmp	r3, r2
 80188f2:	d103      	bne.n	80188fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	691a      	ldr	r2, [r3, #16]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2201      	movs	r2, #1
 8018900:	615a      	str	r2, [r3, #20]
}
 8018902:	bf00      	nop
 8018904:	3714      	adds	r7, #20
 8018906:	46bd      	mov	sp, r7
 8018908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890c:	4770      	bx	lr
 801890e:	bf00      	nop
 8018910:	40012c00 	.word	0x40012c00
 8018914:	40014400 	.word	0x40014400
 8018918:	40014800 	.word	0x40014800

0801891c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801891c:	b480      	push	{r7}
 801891e:	b083      	sub	sp, #12
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018924:	bf00      	nop
 8018926:	370c      	adds	r7, #12
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr

08018944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018944:	b480      	push	{r7}
 8018946:	b083      	sub	sp, #12
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801894c:	bf00      	nop
 801894e:	370c      	adds	r7, #12
 8018950:	46bd      	mov	sp, r7
 8018952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018956:	4770      	bx	lr

08018958 <LL_RCC_GetUSARTClockSource>:
{
 8018958:	b480      	push	{r7}
 801895a:	b083      	sub	sp, #12
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018964:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	4013      	ands	r3, r2
}
 801896c:	4618      	mov	r0, r3
 801896e:	370c      	adds	r7, #12
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr

08018978 <LL_RCC_GetLPUARTClockSource>:
{
 8018978:	b480      	push	{r7}
 801897a:	b083      	sub	sp, #12
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018984:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	4013      	ands	r3, r2
}
 801898c:	4618      	mov	r0, r3
 801898e:	370c      	adds	r7, #12
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d101      	bne.n	80189aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80189a6:	2301      	movs	r3, #1
 80189a8:	e042      	b.n	8018a30 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d106      	bne.n	80189c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2200      	movs	r2, #0
 80189b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80189bc:	6878      	ldr	r0, [r7, #4]
 80189be:	f7e8 f909 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2224      	movs	r2, #36	; 0x24
 80189c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	681a      	ldr	r2, [r3, #0]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f022 0201 	bic.w	r2, r2, #1
 80189d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f000 f82c 	bl	8018a38 <UART_SetConfig>
 80189e0:	4603      	mov	r3, r0
 80189e2:	2b01      	cmp	r3, #1
 80189e4:	d101      	bne.n	80189ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80189e6:	2301      	movs	r3, #1
 80189e8:	e022      	b.n	8018a30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d002      	beq.n	80189f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	f000 fa48 	bl	8018e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	685a      	ldr	r2, [r3, #4]
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	689a      	ldr	r2, [r3, #8]
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	f042 0201 	orr.w	r2, r2, #1
 8018a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f000 facf 	bl	8018fcc <UART_CheckIdleState>
 8018a2e:	4603      	mov	r3, r0
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3708      	adds	r7, #8
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}

08018a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a3c:	b08c      	sub	sp, #48	; 0x30
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a42:	2300      	movs	r3, #0
 8018a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	689a      	ldr	r2, [r3, #8]
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	691b      	ldr	r3, [r3, #16]
 8018a50:	431a      	orrs	r2, r3
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	695b      	ldr	r3, [r3, #20]
 8018a56:	431a      	orrs	r2, r3
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	69db      	ldr	r3, [r3, #28]
 8018a5c:	4313      	orrs	r3, r2
 8018a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	681a      	ldr	r2, [r3, #0]
 8018a66:	4baf      	ldr	r3, [pc, #700]	; (8018d24 <UART_SetConfig+0x2ec>)
 8018a68:	4013      	ands	r3, r2
 8018a6a:	697a      	ldr	r2, [r7, #20]
 8018a6c:	6812      	ldr	r2, [r2, #0]
 8018a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a70:	430b      	orrs	r3, r1
 8018a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	68da      	ldr	r2, [r3, #12]
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	430a      	orrs	r2, r1
 8018a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a8a:	697b      	ldr	r3, [r7, #20]
 8018a8c:	699b      	ldr	r3, [r3, #24]
 8018a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	4aa4      	ldr	r2, [pc, #656]	; (8018d28 <UART_SetConfig+0x2f0>)
 8018a96:	4293      	cmp	r3, r2
 8018a98:	d004      	beq.n	8018aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	6a1b      	ldr	r3, [r3, #32]
 8018a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aa0:	4313      	orrs	r3, r2
 8018aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	689b      	ldr	r3, [r3, #8]
 8018aaa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018aae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018ab2:	697a      	ldr	r2, [r7, #20]
 8018ab4:	6812      	ldr	r2, [r2, #0]
 8018ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ab8:	430b      	orrs	r3, r1
 8018aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac2:	f023 010f 	bic.w	r1, r3, #15
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	430a      	orrs	r2, r1
 8018ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018ad2:	697b      	ldr	r3, [r7, #20]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	4a95      	ldr	r2, [pc, #596]	; (8018d2c <UART_SetConfig+0x2f4>)
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	d125      	bne.n	8018b28 <UART_SetConfig+0xf0>
 8018adc:	2003      	movs	r0, #3
 8018ade:	f7ff ff3b 	bl	8018958 <LL_RCC_GetUSARTClockSource>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	2b03      	cmp	r3, #3
 8018ae6:	d81b      	bhi.n	8018b20 <UART_SetConfig+0xe8>
 8018ae8:	a201      	add	r2, pc, #4	; (adr r2, 8018af0 <UART_SetConfig+0xb8>)
 8018aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aee:	bf00      	nop
 8018af0:	08018b01 	.word	0x08018b01
 8018af4:	08018b11 	.word	0x08018b11
 8018af8:	08018b09 	.word	0x08018b09
 8018afc:	08018b19 	.word	0x08018b19
 8018b00:	2301      	movs	r3, #1
 8018b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b06:	e042      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b08:	2302      	movs	r3, #2
 8018b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b0e:	e03e      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b10:	2304      	movs	r3, #4
 8018b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b16:	e03a      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b18:	2308      	movs	r3, #8
 8018b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b1e:	e036      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b20:	2310      	movs	r3, #16
 8018b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b26:	e032      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b28:	697b      	ldr	r3, [r7, #20]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	4a7e      	ldr	r2, [pc, #504]	; (8018d28 <UART_SetConfig+0x2f0>)
 8018b2e:	4293      	cmp	r3, r2
 8018b30:	d12a      	bne.n	8018b88 <UART_SetConfig+0x150>
 8018b32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018b36:	f7ff ff1f 	bl	8018978 <LL_RCC_GetLPUARTClockSource>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018b40:	d01a      	beq.n	8018b78 <UART_SetConfig+0x140>
 8018b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018b46:	d81b      	bhi.n	8018b80 <UART_SetConfig+0x148>
 8018b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b4c:	d00c      	beq.n	8018b68 <UART_SetConfig+0x130>
 8018b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b52:	d815      	bhi.n	8018b80 <UART_SetConfig+0x148>
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d003      	beq.n	8018b60 <UART_SetConfig+0x128>
 8018b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b5c:	d008      	beq.n	8018b70 <UART_SetConfig+0x138>
 8018b5e:	e00f      	b.n	8018b80 <UART_SetConfig+0x148>
 8018b60:	2300      	movs	r3, #0
 8018b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b66:	e012      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b68:	2302      	movs	r3, #2
 8018b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b6e:	e00e      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b70:	2304      	movs	r3, #4
 8018b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b76:	e00a      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b78:	2308      	movs	r3, #8
 8018b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b7e:	e006      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b80:	2310      	movs	r3, #16
 8018b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018b86:	e002      	b.n	8018b8e <UART_SetConfig+0x156>
 8018b88:	2310      	movs	r3, #16
 8018b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018b8e:	697b      	ldr	r3, [r7, #20]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4a65      	ldr	r2, [pc, #404]	; (8018d28 <UART_SetConfig+0x2f0>)
 8018b94:	4293      	cmp	r3, r2
 8018b96:	f040 8097 	bne.w	8018cc8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018b9e:	2b08      	cmp	r3, #8
 8018ba0:	d823      	bhi.n	8018bea <UART_SetConfig+0x1b2>
 8018ba2:	a201      	add	r2, pc, #4	; (adr r2, 8018ba8 <UART_SetConfig+0x170>)
 8018ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba8:	08018bcd 	.word	0x08018bcd
 8018bac:	08018beb 	.word	0x08018beb
 8018bb0:	08018bd5 	.word	0x08018bd5
 8018bb4:	08018beb 	.word	0x08018beb
 8018bb8:	08018bdb 	.word	0x08018bdb
 8018bbc:	08018beb 	.word	0x08018beb
 8018bc0:	08018beb 	.word	0x08018beb
 8018bc4:	08018beb 	.word	0x08018beb
 8018bc8:	08018be3 	.word	0x08018be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018bcc:	f7fe ff00 	bl	80179d0 <HAL_RCC_GetPCLK1Freq>
 8018bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018bd2:	e010      	b.n	8018bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018bd4:	4b56      	ldr	r3, [pc, #344]	; (8018d30 <UART_SetConfig+0x2f8>)
 8018bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018bd8:	e00d      	b.n	8018bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018bda:	f7fe fe79 	bl	80178d0 <HAL_RCC_GetSysClockFreq>
 8018bde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018be0:	e009      	b.n	8018bf6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018be8:	e005      	b.n	8018bf6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018bea:	2300      	movs	r3, #0
 8018bec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018bee:	2301      	movs	r3, #1
 8018bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	f000 812b 	beq.w	8018e54 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c02:	4a4c      	ldr	r2, [pc, #304]	; (8018d34 <UART_SetConfig+0x2fc>)
 8018c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c08:	461a      	mov	r2, r3
 8018c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	685a      	ldr	r2, [r3, #4]
 8018c16:	4613      	mov	r3, r2
 8018c18:	005b      	lsls	r3, r3, #1
 8018c1a:	4413      	add	r3, r2
 8018c1c:	69ba      	ldr	r2, [r7, #24]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d305      	bcc.n	8018c2e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	685b      	ldr	r3, [r3, #4]
 8018c26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018c28:	69ba      	ldr	r2, [r7, #24]
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d903      	bls.n	8018c36 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018c2e:	2301      	movs	r3, #1
 8018c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018c34:	e10e      	b.n	8018e54 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c38:	2200      	movs	r2, #0
 8018c3a:	60bb      	str	r3, [r7, #8]
 8018c3c:	60fa      	str	r2, [r7, #12]
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c42:	4a3c      	ldr	r2, [pc, #240]	; (8018d34 <UART_SetConfig+0x2fc>)
 8018c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c48:	b29b      	uxth	r3, r3
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	603b      	str	r3, [r7, #0]
 8018c4e:	607a      	str	r2, [r7, #4]
 8018c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018c58:	f7e7 fb32 	bl	80002c0 <__aeabi_uldivmod>
 8018c5c:	4602      	mov	r2, r0
 8018c5e:	460b      	mov	r3, r1
 8018c60:	4610      	mov	r0, r2
 8018c62:	4619      	mov	r1, r3
 8018c64:	f04f 0200 	mov.w	r2, #0
 8018c68:	f04f 0300 	mov.w	r3, #0
 8018c6c:	020b      	lsls	r3, r1, #8
 8018c6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018c72:	0202      	lsls	r2, r0, #8
 8018c74:	6979      	ldr	r1, [r7, #20]
 8018c76:	6849      	ldr	r1, [r1, #4]
 8018c78:	0849      	lsrs	r1, r1, #1
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	460c      	mov	r4, r1
 8018c7e:	4605      	mov	r5, r0
 8018c80:	eb12 0804 	adds.w	r8, r2, r4
 8018c84:	eb43 0905 	adc.w	r9, r3, r5
 8018c88:	697b      	ldr	r3, [r7, #20]
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	469a      	mov	sl, r3
 8018c90:	4693      	mov	fp, r2
 8018c92:	4652      	mov	r2, sl
 8018c94:	465b      	mov	r3, fp
 8018c96:	4640      	mov	r0, r8
 8018c98:	4649      	mov	r1, r9
 8018c9a:	f7e7 fb11 	bl	80002c0 <__aeabi_uldivmod>
 8018c9e:	4602      	mov	r2, r0
 8018ca0:	460b      	mov	r3, r1
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018ca6:	6a3b      	ldr	r3, [r7, #32]
 8018ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018cac:	d308      	bcc.n	8018cc0 <UART_SetConfig+0x288>
 8018cae:	6a3b      	ldr	r3, [r7, #32]
 8018cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018cb4:	d204      	bcs.n	8018cc0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6a3a      	ldr	r2, [r7, #32]
 8018cbc:	60da      	str	r2, [r3, #12]
 8018cbe:	e0c9      	b.n	8018e54 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018cc6:	e0c5      	b.n	8018e54 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	69db      	ldr	r3, [r3, #28]
 8018ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018cd0:	d16d      	bne.n	8018dae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018cd6:	3b01      	subs	r3, #1
 8018cd8:	2b07      	cmp	r3, #7
 8018cda:	d82d      	bhi.n	8018d38 <UART_SetConfig+0x300>
 8018cdc:	a201      	add	r2, pc, #4	; (adr r2, 8018ce4 <UART_SetConfig+0x2ac>)
 8018cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce2:	bf00      	nop
 8018ce4:	08018d05 	.word	0x08018d05
 8018ce8:	08018d0d 	.word	0x08018d0d
 8018cec:	08018d39 	.word	0x08018d39
 8018cf0:	08018d13 	.word	0x08018d13
 8018cf4:	08018d39 	.word	0x08018d39
 8018cf8:	08018d39 	.word	0x08018d39
 8018cfc:	08018d39 	.word	0x08018d39
 8018d00:	08018d1b 	.word	0x08018d1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018d04:	f7fe fe7a 	bl	80179fc <HAL_RCC_GetPCLK2Freq>
 8018d08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d0a:	e01b      	b.n	8018d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018d0c:	4b08      	ldr	r3, [pc, #32]	; (8018d30 <UART_SetConfig+0x2f8>)
 8018d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d10:	e018      	b.n	8018d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018d12:	f7fe fddd 	bl	80178d0 <HAL_RCC_GetSysClockFreq>
 8018d16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d18:	e014      	b.n	8018d44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d20:	e010      	b.n	8018d44 <UART_SetConfig+0x30c>
 8018d22:	bf00      	nop
 8018d24:	cfff69f3 	.word	0xcfff69f3
 8018d28:	40008000 	.word	0x40008000
 8018d2c:	40013800 	.word	0x40013800
 8018d30:	00f42400 	.word	0x00f42400
 8018d34:	0801a7ac 	.word	0x0801a7ac
      default:
        pclk = 0U;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018d3c:	2301      	movs	r3, #1
 8018d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	f000 8084 	beq.w	8018e54 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d50:	4a4b      	ldr	r2, [pc, #300]	; (8018e80 <UART_SetConfig+0x448>)
 8018d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d56:	461a      	mov	r2, r3
 8018d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d5e:	005a      	lsls	r2, r3, #1
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	685b      	ldr	r3, [r3, #4]
 8018d64:	085b      	lsrs	r3, r3, #1
 8018d66:	441a      	add	r2, r3
 8018d68:	697b      	ldr	r3, [r7, #20]
 8018d6a:	685b      	ldr	r3, [r3, #4]
 8018d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d70:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d72:	6a3b      	ldr	r3, [r7, #32]
 8018d74:	2b0f      	cmp	r3, #15
 8018d76:	d916      	bls.n	8018da6 <UART_SetConfig+0x36e>
 8018d78:	6a3b      	ldr	r3, [r7, #32]
 8018d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d7e:	d212      	bcs.n	8018da6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018d80:	6a3b      	ldr	r3, [r7, #32]
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	f023 030f 	bic.w	r3, r3, #15
 8018d88:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018d8a:	6a3b      	ldr	r3, [r7, #32]
 8018d8c:	085b      	lsrs	r3, r3, #1
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	f003 0307 	and.w	r3, r3, #7
 8018d94:	b29a      	uxth	r2, r3
 8018d96:	8bfb      	ldrh	r3, [r7, #30]
 8018d98:	4313      	orrs	r3, r2
 8018d9a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	8bfa      	ldrh	r2, [r7, #30]
 8018da2:	60da      	str	r2, [r3, #12]
 8018da4:	e056      	b.n	8018e54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018da6:	2301      	movs	r3, #1
 8018da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018dac:	e052      	b.n	8018e54 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018db2:	3b01      	subs	r3, #1
 8018db4:	2b07      	cmp	r3, #7
 8018db6:	d822      	bhi.n	8018dfe <UART_SetConfig+0x3c6>
 8018db8:	a201      	add	r2, pc, #4	; (adr r2, 8018dc0 <UART_SetConfig+0x388>)
 8018dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dbe:	bf00      	nop
 8018dc0:	08018de1 	.word	0x08018de1
 8018dc4:	08018de9 	.word	0x08018de9
 8018dc8:	08018dff 	.word	0x08018dff
 8018dcc:	08018def 	.word	0x08018def
 8018dd0:	08018dff 	.word	0x08018dff
 8018dd4:	08018dff 	.word	0x08018dff
 8018dd8:	08018dff 	.word	0x08018dff
 8018ddc:	08018df7 	.word	0x08018df7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018de0:	f7fe fe0c 	bl	80179fc <HAL_RCC_GetPCLK2Freq>
 8018de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018de6:	e010      	b.n	8018e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018de8:	4b26      	ldr	r3, [pc, #152]	; (8018e84 <UART_SetConfig+0x44c>)
 8018dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018dec:	e00d      	b.n	8018e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018dee:	f7fe fd6f 	bl	80178d0 <HAL_RCC_GetSysClockFreq>
 8018df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018df4:	e009      	b.n	8018e0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018dfc:	e005      	b.n	8018e0a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018e02:	2301      	movs	r3, #1
 8018e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018e08:	bf00      	nop
    }

    if (pclk != 0U)
 8018e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d021      	beq.n	8018e54 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e14:	4a1a      	ldr	r2, [pc, #104]	; (8018e80 <UART_SetConfig+0x448>)
 8018e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	685b      	ldr	r3, [r3, #4]
 8018e26:	085b      	lsrs	r3, r3, #1
 8018e28:	441a      	add	r2, r3
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	685b      	ldr	r3, [r3, #4]
 8018e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018e34:	6a3b      	ldr	r3, [r7, #32]
 8018e36:	2b0f      	cmp	r3, #15
 8018e38:	d909      	bls.n	8018e4e <UART_SetConfig+0x416>
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e40:	d205      	bcs.n	8018e4e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018e42:	6a3b      	ldr	r3, [r7, #32]
 8018e44:	b29a      	uxth	r2, r3
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	60da      	str	r2, [r3, #12]
 8018e4c:	e002      	b.n	8018e54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018e4e:	2301      	movs	r3, #1
 8018e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	2201      	movs	r2, #1
 8018e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	2201      	movs	r2, #1
 8018e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	2200      	movs	r2, #0
 8018e68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8018e6a:	697b      	ldr	r3, [r7, #20]
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8018e70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3730      	adds	r7, #48	; 0x30
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018e7e:	bf00      	nop
 8018e80:	0801a7ac 	.word	0x0801a7ac
 8018e84:	00f42400 	.word	0x00f42400

08018e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018e88:	b480      	push	{r7}
 8018e8a:	b083      	sub	sp, #12
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e94:	f003 0301 	and.w	r3, r3, #1
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d00a      	beq.n	8018eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	430a      	orrs	r2, r1
 8018eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eb6:	f003 0302 	and.w	r3, r3, #2
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d00a      	beq.n	8018ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	430a      	orrs	r2, r1
 8018ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ed8:	f003 0304 	and.w	r3, r3, #4
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d00a      	beq.n	8018ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	685b      	ldr	r3, [r3, #4]
 8018ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	430a      	orrs	r2, r1
 8018ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018efa:	f003 0308 	and.w	r3, r3, #8
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d00a      	beq.n	8018f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	685b      	ldr	r3, [r3, #4]
 8018f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	430a      	orrs	r2, r1
 8018f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f1c:	f003 0310 	and.w	r3, r3, #16
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d00a      	beq.n	8018f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	689b      	ldr	r3, [r3, #8]
 8018f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	430a      	orrs	r2, r1
 8018f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f3e:	f003 0320 	and.w	r3, r3, #32
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d00a      	beq.n	8018f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	689b      	ldr	r3, [r3, #8]
 8018f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	430a      	orrs	r2, r1
 8018f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d01a      	beq.n	8018f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	430a      	orrs	r2, r1
 8018f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018f86:	d10a      	bne.n	8018f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	430a      	orrs	r2, r1
 8018f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d00a      	beq.n	8018fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	685b      	ldr	r3, [r3, #4]
 8018fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	430a      	orrs	r2, r1
 8018fbe:	605a      	str	r2, [r3, #4]
  }
}
 8018fc0:	bf00      	nop
 8018fc2:	370c      	adds	r7, #12
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fca:	4770      	bx	lr

08018fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b086      	sub	sp, #24
 8018fd0:	af02      	add	r7, sp, #8
 8018fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018fdc:	f7fc f9a2 	bl	8015324 <HAL_GetTick>
 8018fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	f003 0308 	and.w	r3, r3, #8
 8018fec:	2b08      	cmp	r3, #8
 8018fee:	d10e      	bne.n	801900e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018ff4:	9300      	str	r3, [sp, #0]
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f000 f832 	bl	8019068 <UART_WaitOnFlagUntilTimeout>
 8019004:	4603      	mov	r3, r0
 8019006:	2b00      	cmp	r3, #0
 8019008:	d001      	beq.n	801900e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801900a:	2303      	movs	r3, #3
 801900c:	e028      	b.n	8019060 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	f003 0304 	and.w	r3, r3, #4
 8019018:	2b04      	cmp	r3, #4
 801901a:	d10e      	bne.n	801903a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801901c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019020:	9300      	str	r3, [sp, #0]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2200      	movs	r2, #0
 8019026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f000 f81c 	bl	8019068 <UART_WaitOnFlagUntilTimeout>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d001      	beq.n	801903a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019036:	2303      	movs	r3, #3
 8019038:	e012      	b.n	8019060 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	2220      	movs	r2, #32
 801903e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2220      	movs	r2, #32
 8019046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2200      	movs	r2, #0
 801904e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2200      	movs	r2, #0
 8019054:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	2200      	movs	r2, #0
 801905a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801905e:	2300      	movs	r3, #0
}
 8019060:	4618      	mov	r0, r3
 8019062:	3710      	adds	r7, #16
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b09c      	sub	sp, #112	; 0x70
 801906c:	af00      	add	r7, sp, #0
 801906e:	60f8      	str	r0, [r7, #12]
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	603b      	str	r3, [r7, #0]
 8019074:	4613      	mov	r3, r2
 8019076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019078:	e0a9      	b.n	80191ce <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801907a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801907c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019080:	f000 80a5 	beq.w	80191ce <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019084:	f7fc f94e 	bl	8015324 <HAL_GetTick>
 8019088:	4602      	mov	r2, r0
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	1ad3      	subs	r3, r2, r3
 801908e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019090:	429a      	cmp	r2, r3
 8019092:	d302      	bcc.n	801909a <UART_WaitOnFlagUntilTimeout+0x32>
 8019094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019096:	2b00      	cmp	r3, #0
 8019098:	d140      	bne.n	801911c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190a2:	e853 3f00 	ldrex	r3, [r3]
 80190a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80190a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80190ae:	667b      	str	r3, [r7, #100]	; 0x64
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	461a      	mov	r2, r3
 80190b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80190b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80190ba:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80190be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80190c0:	e841 2300 	strex	r3, r2, [r1]
 80190c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80190c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d1e6      	bne.n	801909a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	3308      	adds	r3, #8
 80190d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190d6:	e853 3f00 	ldrex	r3, [r3]
 80190da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80190dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190de:	f023 0301 	bic.w	r3, r3, #1
 80190e2:	663b      	str	r3, [r7, #96]	; 0x60
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	3308      	adds	r3, #8
 80190ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80190ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80190ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80190f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190f4:	e841 2300 	strex	r3, r2, [r1]
 80190f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80190fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d1e5      	bne.n	80190cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	2220      	movs	r2, #32
 8019104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	2220      	movs	r2, #32
 801910c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	2200      	movs	r2, #0
 8019114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8019118:	2303      	movs	r3, #3
 801911a:	e069      	b.n	80191f0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	f003 0304 	and.w	r3, r3, #4
 8019126:	2b00      	cmp	r3, #0
 8019128:	d051      	beq.n	80191ce <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	69db      	ldr	r3, [r3, #28]
 8019130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019138:	d149      	bne.n	80191ce <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019142:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914c:	e853 3f00 	ldrex	r3, [r3]
 8019150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019158:	66fb      	str	r3, [r7, #108]	; 0x6c
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	461a      	mov	r2, r3
 8019160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019162:	637b      	str	r3, [r7, #52]	; 0x34
 8019164:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801916a:	e841 2300 	strex	r3, r2, [r1]
 801916e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8019170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019172:	2b00      	cmp	r3, #0
 8019174:	d1e6      	bne.n	8019144 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	3308      	adds	r3, #8
 801917c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	e853 3f00 	ldrex	r3, [r3]
 8019184:	613b      	str	r3, [r7, #16]
   return(result);
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	f023 0301 	bic.w	r3, r3, #1
 801918c:	66bb      	str	r3, [r7, #104]	; 0x68
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	3308      	adds	r3, #8
 8019194:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019196:	623a      	str	r2, [r7, #32]
 8019198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801919a:	69f9      	ldr	r1, [r7, #28]
 801919c:	6a3a      	ldr	r2, [r7, #32]
 801919e:	e841 2300 	strex	r3, r2, [r1]
 80191a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80191a4:	69bb      	ldr	r3, [r7, #24]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d1e5      	bne.n	8019176 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	2220      	movs	r2, #32
 80191ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	2220      	movs	r2, #32
 80191b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	2220      	movs	r2, #32
 80191be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	2200      	movs	r2, #0
 80191c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80191ca:	2303      	movs	r3, #3
 80191cc:	e010      	b.n	80191f0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	69da      	ldr	r2, [r3, #28]
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	4013      	ands	r3, r2
 80191d8:	68ba      	ldr	r2, [r7, #8]
 80191da:	429a      	cmp	r2, r3
 80191dc:	bf0c      	ite	eq
 80191de:	2301      	moveq	r3, #1
 80191e0:	2300      	movne	r3, #0
 80191e2:	b2db      	uxtb	r3, r3
 80191e4:	461a      	mov	r2, r3
 80191e6:	79fb      	ldrb	r3, [r7, #7]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	f43f af46 	beq.w	801907a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80191ee:	2300      	movs	r3, #0
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3770      	adds	r7, #112	; 0x70
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80191f8:	b480      	push	{r7}
 80191fa:	b085      	sub	sp, #20
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019206:	2b01      	cmp	r3, #1
 8019208:	d101      	bne.n	801920e <HAL_UARTEx_DisableFifoMode+0x16>
 801920a:	2302      	movs	r3, #2
 801920c:	e027      	b.n	801925e <HAL_UARTEx_DisableFifoMode+0x66>
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2201      	movs	r2, #1
 8019212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	2224      	movs	r2, #36	; 0x24
 801921a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	681a      	ldr	r2, [r3, #0]
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f022 0201 	bic.w	r2, r2, #1
 8019234:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801923c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2200      	movs	r2, #0
 8019242:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	68fa      	ldr	r2, [r7, #12]
 801924a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	2220      	movs	r2, #32
 8019250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2200      	movs	r2, #0
 8019258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801925c:	2300      	movs	r3, #0
}
 801925e:	4618      	mov	r0, r3
 8019260:	3714      	adds	r7, #20
 8019262:	46bd      	mov	sp, r7
 8019264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019268:	4770      	bx	lr

0801926a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801926a:	b580      	push	{r7, lr}
 801926c:	b084      	sub	sp, #16
 801926e:	af00      	add	r7, sp, #0
 8019270:	6078      	str	r0, [r7, #4]
 8019272:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801927a:	2b01      	cmp	r3, #1
 801927c:	d101      	bne.n	8019282 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801927e:	2302      	movs	r3, #2
 8019280:	e02d      	b.n	80192de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2201      	movs	r2, #1
 8019286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2224      	movs	r2, #36	; 0x24
 801928e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	f022 0201 	bic.w	r2, r2, #1
 80192a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	689b      	ldr	r3, [r3, #8]
 80192b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	683a      	ldr	r2, [r7, #0]
 80192ba:	430a      	orrs	r2, r1
 80192bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f000 f850 	bl	8019364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	68fa      	ldr	r2, [r7, #12]
 80192ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2220      	movs	r2, #32
 80192d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	2200      	movs	r2, #0
 80192d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80192dc:	2300      	movs	r3, #0
}
 80192de:	4618      	mov	r0, r3
 80192e0:	3710      	adds	r7, #16
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}

080192e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80192e6:	b580      	push	{r7, lr}
 80192e8:	b084      	sub	sp, #16
 80192ea:	af00      	add	r7, sp, #0
 80192ec:	6078      	str	r0, [r7, #4]
 80192ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80192f6:	2b01      	cmp	r3, #1
 80192f8:	d101      	bne.n	80192fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80192fa:	2302      	movs	r3, #2
 80192fc:	e02d      	b.n	801935a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2201      	movs	r2, #1
 8019302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2224      	movs	r2, #36	; 0x24
 801930a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	681a      	ldr	r2, [r3, #0]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	f022 0201 	bic.w	r2, r2, #1
 8019324:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	683a      	ldr	r2, [r7, #0]
 8019336:	430a      	orrs	r2, r1
 8019338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	f000 f812 	bl	8019364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	68fa      	ldr	r2, [r7, #12]
 8019346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2220      	movs	r2, #32
 801934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2200      	movs	r2, #0
 8019354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019358:	2300      	movs	r3, #0
}
 801935a:	4618      	mov	r0, r3
 801935c:	3710      	adds	r7, #16
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
	...

08019364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019364:	b480      	push	{r7}
 8019366:	b085      	sub	sp, #20
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019370:	2b00      	cmp	r3, #0
 8019372:	d108      	bne.n	8019386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2201      	movs	r2, #1
 8019378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2201      	movs	r2, #1
 8019380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019384:	e031      	b.n	80193ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019386:	2308      	movs	r3, #8
 8019388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801938a:	2308      	movs	r3, #8
 801938c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	689b      	ldr	r3, [r3, #8]
 8019394:	0e5b      	lsrs	r3, r3, #25
 8019396:	b2db      	uxtb	r3, r3
 8019398:	f003 0307 	and.w	r3, r3, #7
 801939c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	689b      	ldr	r3, [r3, #8]
 80193a4:	0f5b      	lsrs	r3, r3, #29
 80193a6:	b2db      	uxtb	r3, r3
 80193a8:	f003 0307 	and.w	r3, r3, #7
 80193ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80193ae:	7bbb      	ldrb	r3, [r7, #14]
 80193b0:	7b3a      	ldrb	r2, [r7, #12]
 80193b2:	4911      	ldr	r1, [pc, #68]	; (80193f8 <UARTEx_SetNbDataToProcess+0x94>)
 80193b4:	5c8a      	ldrb	r2, [r1, r2]
 80193b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80193ba:	7b3a      	ldrb	r2, [r7, #12]
 80193bc:	490f      	ldr	r1, [pc, #60]	; (80193fc <UARTEx_SetNbDataToProcess+0x98>)
 80193be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80193c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80193c4:	b29a      	uxth	r2, r3
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80193cc:	7bfb      	ldrb	r3, [r7, #15]
 80193ce:	7b7a      	ldrb	r2, [r7, #13]
 80193d0:	4909      	ldr	r1, [pc, #36]	; (80193f8 <UARTEx_SetNbDataToProcess+0x94>)
 80193d2:	5c8a      	ldrb	r2, [r1, r2]
 80193d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80193d8:	7b7a      	ldrb	r2, [r7, #13]
 80193da:	4908      	ldr	r1, [pc, #32]	; (80193fc <UARTEx_SetNbDataToProcess+0x98>)
 80193dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80193de:	fb93 f3f2 	sdiv	r3, r3, r2
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80193ea:	bf00      	nop
 80193ec:	3714      	adds	r7, #20
 80193ee:	46bd      	mov	sp, r7
 80193f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop
 80193f8:	0801a7c4 	.word	0x0801a7c4
 80193fc:	0801a7cc 	.word	0x0801a7cc

08019400 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019400:	b480      	push	{r7}
 8019402:	b085      	sub	sp, #20
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019408:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801940c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8019414:	b29a      	uxth	r2, r3
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	b29b      	uxth	r3, r3
 801941a:	43db      	mvns	r3, r3
 801941c:	b29b      	uxth	r3, r3
 801941e:	4013      	ands	r3, r2
 8019420:	b29a      	uxth	r2, r3
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019428:	2300      	movs	r3, #0
}
 801942a:	4618      	mov	r0, r3
 801942c:	3714      	adds	r7, #20
 801942e:	46bd      	mov	sp, r7
 8019430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019434:	4770      	bx	lr

08019436 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019436:	b084      	sub	sp, #16
 8019438:	b480      	push	{r7}
 801943a:	b083      	sub	sp, #12
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
 8019440:	f107 0014 	add.w	r0, r7, #20
 8019444:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2201      	movs	r2, #1
 801944c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2200      	movs	r2, #0
 8019454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	2200      	movs	r2, #0
 801945c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2200      	movs	r2, #0
 8019464:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8019468:	2300      	movs	r3, #0
}
 801946a:	4618      	mov	r0, r3
 801946c:	370c      	adds	r7, #12
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	b004      	add	sp, #16
 8019476:	4770      	bx	lr

08019478 <__errno>:
 8019478:	4b01      	ldr	r3, [pc, #4]	; (8019480 <__errno+0x8>)
 801947a:	6818      	ldr	r0, [r3, #0]
 801947c:	4770      	bx	lr
 801947e:	bf00      	nop
 8019480:	20000074 	.word	0x20000074

08019484 <__libc_init_array>:
 8019484:	b570      	push	{r4, r5, r6, lr}
 8019486:	4d0d      	ldr	r5, [pc, #52]	; (80194bc <__libc_init_array+0x38>)
 8019488:	4c0d      	ldr	r4, [pc, #52]	; (80194c0 <__libc_init_array+0x3c>)
 801948a:	1b64      	subs	r4, r4, r5
 801948c:	10a4      	asrs	r4, r4, #2
 801948e:	2600      	movs	r6, #0
 8019490:	42a6      	cmp	r6, r4
 8019492:	d109      	bne.n	80194a8 <__libc_init_array+0x24>
 8019494:	4d0b      	ldr	r5, [pc, #44]	; (80194c4 <__libc_init_array+0x40>)
 8019496:	4c0c      	ldr	r4, [pc, #48]	; (80194c8 <__libc_init_array+0x44>)
 8019498:	f001 f8a4 	bl	801a5e4 <_init>
 801949c:	1b64      	subs	r4, r4, r5
 801949e:	10a4      	asrs	r4, r4, #2
 80194a0:	2600      	movs	r6, #0
 80194a2:	42a6      	cmp	r6, r4
 80194a4:	d105      	bne.n	80194b2 <__libc_init_array+0x2e>
 80194a6:	bd70      	pop	{r4, r5, r6, pc}
 80194a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80194ac:	4798      	blx	r3
 80194ae:	3601      	adds	r6, #1
 80194b0:	e7ee      	b.n	8019490 <__libc_init_array+0xc>
 80194b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80194b6:	4798      	blx	r3
 80194b8:	3601      	adds	r6, #1
 80194ba:	e7f2      	b.n	80194a2 <__libc_init_array+0x1e>
 80194bc:	0801a874 	.word	0x0801a874
 80194c0:	0801a874 	.word	0x0801a874
 80194c4:	0801a874 	.word	0x0801a874
 80194c8:	0801a878 	.word	0x0801a878

080194cc <memcpy>:
 80194cc:	440a      	add	r2, r1
 80194ce:	4291      	cmp	r1, r2
 80194d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80194d4:	d100      	bne.n	80194d8 <memcpy+0xc>
 80194d6:	4770      	bx	lr
 80194d8:	b510      	push	{r4, lr}
 80194da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194e2:	4291      	cmp	r1, r2
 80194e4:	d1f9      	bne.n	80194da <memcpy+0xe>
 80194e6:	bd10      	pop	{r4, pc}

080194e8 <memset>:
 80194e8:	4402      	add	r2, r0
 80194ea:	4603      	mov	r3, r0
 80194ec:	4293      	cmp	r3, r2
 80194ee:	d100      	bne.n	80194f2 <memset+0xa>
 80194f0:	4770      	bx	lr
 80194f2:	f803 1b01 	strb.w	r1, [r3], #1
 80194f6:	e7f9      	b.n	80194ec <memset+0x4>

080194f8 <iprintf>:
 80194f8:	b40f      	push	{r0, r1, r2, r3}
 80194fa:	4b0a      	ldr	r3, [pc, #40]	; (8019524 <iprintf+0x2c>)
 80194fc:	b513      	push	{r0, r1, r4, lr}
 80194fe:	681c      	ldr	r4, [r3, #0]
 8019500:	b124      	cbz	r4, 801950c <iprintf+0x14>
 8019502:	69a3      	ldr	r3, [r4, #24]
 8019504:	b913      	cbnz	r3, 801950c <iprintf+0x14>
 8019506:	4620      	mov	r0, r4
 8019508:	f000 fa88 	bl	8019a1c <__sinit>
 801950c:	ab05      	add	r3, sp, #20
 801950e:	9a04      	ldr	r2, [sp, #16]
 8019510:	68a1      	ldr	r1, [r4, #8]
 8019512:	9301      	str	r3, [sp, #4]
 8019514:	4620      	mov	r0, r4
 8019516:	f000 fc91 	bl	8019e3c <_vfiprintf_r>
 801951a:	b002      	add	sp, #8
 801951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019520:	b004      	add	sp, #16
 8019522:	4770      	bx	lr
 8019524:	20000074 	.word	0x20000074

08019528 <putchar>:
 8019528:	4b09      	ldr	r3, [pc, #36]	; (8019550 <putchar+0x28>)
 801952a:	b513      	push	{r0, r1, r4, lr}
 801952c:	681c      	ldr	r4, [r3, #0]
 801952e:	4601      	mov	r1, r0
 8019530:	b134      	cbz	r4, 8019540 <putchar+0x18>
 8019532:	69a3      	ldr	r3, [r4, #24]
 8019534:	b923      	cbnz	r3, 8019540 <putchar+0x18>
 8019536:	9001      	str	r0, [sp, #4]
 8019538:	4620      	mov	r0, r4
 801953a:	f000 fa6f 	bl	8019a1c <__sinit>
 801953e:	9901      	ldr	r1, [sp, #4]
 8019540:	68a2      	ldr	r2, [r4, #8]
 8019542:	4620      	mov	r0, r4
 8019544:	b002      	add	sp, #8
 8019546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801954a:	f000 bf3b 	b.w	801a3c4 <_putc_r>
 801954e:	bf00      	nop
 8019550:	20000074 	.word	0x20000074

08019554 <_puts_r>:
 8019554:	b570      	push	{r4, r5, r6, lr}
 8019556:	460e      	mov	r6, r1
 8019558:	4605      	mov	r5, r0
 801955a:	b118      	cbz	r0, 8019564 <_puts_r+0x10>
 801955c:	6983      	ldr	r3, [r0, #24]
 801955e:	b90b      	cbnz	r3, 8019564 <_puts_r+0x10>
 8019560:	f000 fa5c 	bl	8019a1c <__sinit>
 8019564:	69ab      	ldr	r3, [r5, #24]
 8019566:	68ac      	ldr	r4, [r5, #8]
 8019568:	b913      	cbnz	r3, 8019570 <_puts_r+0x1c>
 801956a:	4628      	mov	r0, r5
 801956c:	f000 fa56 	bl	8019a1c <__sinit>
 8019570:	4b2c      	ldr	r3, [pc, #176]	; (8019624 <_puts_r+0xd0>)
 8019572:	429c      	cmp	r4, r3
 8019574:	d120      	bne.n	80195b8 <_puts_r+0x64>
 8019576:	686c      	ldr	r4, [r5, #4]
 8019578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801957a:	07db      	lsls	r3, r3, #31
 801957c:	d405      	bmi.n	801958a <_puts_r+0x36>
 801957e:	89a3      	ldrh	r3, [r4, #12]
 8019580:	0598      	lsls	r0, r3, #22
 8019582:	d402      	bmi.n	801958a <_puts_r+0x36>
 8019584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019586:	f000 fae7 	bl	8019b58 <__retarget_lock_acquire_recursive>
 801958a:	89a3      	ldrh	r3, [r4, #12]
 801958c:	0719      	lsls	r1, r3, #28
 801958e:	d51d      	bpl.n	80195cc <_puts_r+0x78>
 8019590:	6923      	ldr	r3, [r4, #16]
 8019592:	b1db      	cbz	r3, 80195cc <_puts_r+0x78>
 8019594:	3e01      	subs	r6, #1
 8019596:	68a3      	ldr	r3, [r4, #8]
 8019598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801959c:	3b01      	subs	r3, #1
 801959e:	60a3      	str	r3, [r4, #8]
 80195a0:	bb39      	cbnz	r1, 80195f2 <_puts_r+0x9e>
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	da38      	bge.n	8019618 <_puts_r+0xc4>
 80195a6:	4622      	mov	r2, r4
 80195a8:	210a      	movs	r1, #10
 80195aa:	4628      	mov	r0, r5
 80195ac:	f000 f85c 	bl	8019668 <__swbuf_r>
 80195b0:	3001      	adds	r0, #1
 80195b2:	d011      	beq.n	80195d8 <_puts_r+0x84>
 80195b4:	250a      	movs	r5, #10
 80195b6:	e011      	b.n	80195dc <_puts_r+0x88>
 80195b8:	4b1b      	ldr	r3, [pc, #108]	; (8019628 <_puts_r+0xd4>)
 80195ba:	429c      	cmp	r4, r3
 80195bc:	d101      	bne.n	80195c2 <_puts_r+0x6e>
 80195be:	68ac      	ldr	r4, [r5, #8]
 80195c0:	e7da      	b.n	8019578 <_puts_r+0x24>
 80195c2:	4b1a      	ldr	r3, [pc, #104]	; (801962c <_puts_r+0xd8>)
 80195c4:	429c      	cmp	r4, r3
 80195c6:	bf08      	it	eq
 80195c8:	68ec      	ldreq	r4, [r5, #12]
 80195ca:	e7d5      	b.n	8019578 <_puts_r+0x24>
 80195cc:	4621      	mov	r1, r4
 80195ce:	4628      	mov	r0, r5
 80195d0:	f000 f89c 	bl	801970c <__swsetup_r>
 80195d4:	2800      	cmp	r0, #0
 80195d6:	d0dd      	beq.n	8019594 <_puts_r+0x40>
 80195d8:	f04f 35ff 	mov.w	r5, #4294967295
 80195dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195de:	07da      	lsls	r2, r3, #31
 80195e0:	d405      	bmi.n	80195ee <_puts_r+0x9a>
 80195e2:	89a3      	ldrh	r3, [r4, #12]
 80195e4:	059b      	lsls	r3, r3, #22
 80195e6:	d402      	bmi.n	80195ee <_puts_r+0x9a>
 80195e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195ea:	f000 fab6 	bl	8019b5a <__retarget_lock_release_recursive>
 80195ee:	4628      	mov	r0, r5
 80195f0:	bd70      	pop	{r4, r5, r6, pc}
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	da04      	bge.n	8019600 <_puts_r+0xac>
 80195f6:	69a2      	ldr	r2, [r4, #24]
 80195f8:	429a      	cmp	r2, r3
 80195fa:	dc06      	bgt.n	801960a <_puts_r+0xb6>
 80195fc:	290a      	cmp	r1, #10
 80195fe:	d004      	beq.n	801960a <_puts_r+0xb6>
 8019600:	6823      	ldr	r3, [r4, #0]
 8019602:	1c5a      	adds	r2, r3, #1
 8019604:	6022      	str	r2, [r4, #0]
 8019606:	7019      	strb	r1, [r3, #0]
 8019608:	e7c5      	b.n	8019596 <_puts_r+0x42>
 801960a:	4622      	mov	r2, r4
 801960c:	4628      	mov	r0, r5
 801960e:	f000 f82b 	bl	8019668 <__swbuf_r>
 8019612:	3001      	adds	r0, #1
 8019614:	d1bf      	bne.n	8019596 <_puts_r+0x42>
 8019616:	e7df      	b.n	80195d8 <_puts_r+0x84>
 8019618:	6823      	ldr	r3, [r4, #0]
 801961a:	250a      	movs	r5, #10
 801961c:	1c5a      	adds	r2, r3, #1
 801961e:	6022      	str	r2, [r4, #0]
 8019620:	701d      	strb	r5, [r3, #0]
 8019622:	e7db      	b.n	80195dc <_puts_r+0x88>
 8019624:	0801a7f8 	.word	0x0801a7f8
 8019628:	0801a818 	.word	0x0801a818
 801962c:	0801a7d8 	.word	0x0801a7d8

08019630 <puts>:
 8019630:	4b02      	ldr	r3, [pc, #8]	; (801963c <puts+0xc>)
 8019632:	4601      	mov	r1, r0
 8019634:	6818      	ldr	r0, [r3, #0]
 8019636:	f7ff bf8d 	b.w	8019554 <_puts_r>
 801963a:	bf00      	nop
 801963c:	20000074 	.word	0x20000074

08019640 <strncpy>:
 8019640:	b510      	push	{r4, lr}
 8019642:	3901      	subs	r1, #1
 8019644:	4603      	mov	r3, r0
 8019646:	b132      	cbz	r2, 8019656 <strncpy+0x16>
 8019648:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801964c:	f803 4b01 	strb.w	r4, [r3], #1
 8019650:	3a01      	subs	r2, #1
 8019652:	2c00      	cmp	r4, #0
 8019654:	d1f7      	bne.n	8019646 <strncpy+0x6>
 8019656:	441a      	add	r2, r3
 8019658:	2100      	movs	r1, #0
 801965a:	4293      	cmp	r3, r2
 801965c:	d100      	bne.n	8019660 <strncpy+0x20>
 801965e:	bd10      	pop	{r4, pc}
 8019660:	f803 1b01 	strb.w	r1, [r3], #1
 8019664:	e7f9      	b.n	801965a <strncpy+0x1a>
	...

08019668 <__swbuf_r>:
 8019668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801966a:	460e      	mov	r6, r1
 801966c:	4614      	mov	r4, r2
 801966e:	4605      	mov	r5, r0
 8019670:	b118      	cbz	r0, 801967a <__swbuf_r+0x12>
 8019672:	6983      	ldr	r3, [r0, #24]
 8019674:	b90b      	cbnz	r3, 801967a <__swbuf_r+0x12>
 8019676:	f000 f9d1 	bl	8019a1c <__sinit>
 801967a:	4b21      	ldr	r3, [pc, #132]	; (8019700 <__swbuf_r+0x98>)
 801967c:	429c      	cmp	r4, r3
 801967e:	d12b      	bne.n	80196d8 <__swbuf_r+0x70>
 8019680:	686c      	ldr	r4, [r5, #4]
 8019682:	69a3      	ldr	r3, [r4, #24]
 8019684:	60a3      	str	r3, [r4, #8]
 8019686:	89a3      	ldrh	r3, [r4, #12]
 8019688:	071a      	lsls	r2, r3, #28
 801968a:	d52f      	bpl.n	80196ec <__swbuf_r+0x84>
 801968c:	6923      	ldr	r3, [r4, #16]
 801968e:	b36b      	cbz	r3, 80196ec <__swbuf_r+0x84>
 8019690:	6923      	ldr	r3, [r4, #16]
 8019692:	6820      	ldr	r0, [r4, #0]
 8019694:	1ac0      	subs	r0, r0, r3
 8019696:	6963      	ldr	r3, [r4, #20]
 8019698:	b2f6      	uxtb	r6, r6
 801969a:	4283      	cmp	r3, r0
 801969c:	4637      	mov	r7, r6
 801969e:	dc04      	bgt.n	80196aa <__swbuf_r+0x42>
 80196a0:	4621      	mov	r1, r4
 80196a2:	4628      	mov	r0, r5
 80196a4:	f000 f926 	bl	80198f4 <_fflush_r>
 80196a8:	bb30      	cbnz	r0, 80196f8 <__swbuf_r+0x90>
 80196aa:	68a3      	ldr	r3, [r4, #8]
 80196ac:	3b01      	subs	r3, #1
 80196ae:	60a3      	str	r3, [r4, #8]
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	1c5a      	adds	r2, r3, #1
 80196b4:	6022      	str	r2, [r4, #0]
 80196b6:	701e      	strb	r6, [r3, #0]
 80196b8:	6963      	ldr	r3, [r4, #20]
 80196ba:	3001      	adds	r0, #1
 80196bc:	4283      	cmp	r3, r0
 80196be:	d004      	beq.n	80196ca <__swbuf_r+0x62>
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	07db      	lsls	r3, r3, #31
 80196c4:	d506      	bpl.n	80196d4 <__swbuf_r+0x6c>
 80196c6:	2e0a      	cmp	r6, #10
 80196c8:	d104      	bne.n	80196d4 <__swbuf_r+0x6c>
 80196ca:	4621      	mov	r1, r4
 80196cc:	4628      	mov	r0, r5
 80196ce:	f000 f911 	bl	80198f4 <_fflush_r>
 80196d2:	b988      	cbnz	r0, 80196f8 <__swbuf_r+0x90>
 80196d4:	4638      	mov	r0, r7
 80196d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196d8:	4b0a      	ldr	r3, [pc, #40]	; (8019704 <__swbuf_r+0x9c>)
 80196da:	429c      	cmp	r4, r3
 80196dc:	d101      	bne.n	80196e2 <__swbuf_r+0x7a>
 80196de:	68ac      	ldr	r4, [r5, #8]
 80196e0:	e7cf      	b.n	8019682 <__swbuf_r+0x1a>
 80196e2:	4b09      	ldr	r3, [pc, #36]	; (8019708 <__swbuf_r+0xa0>)
 80196e4:	429c      	cmp	r4, r3
 80196e6:	bf08      	it	eq
 80196e8:	68ec      	ldreq	r4, [r5, #12]
 80196ea:	e7ca      	b.n	8019682 <__swbuf_r+0x1a>
 80196ec:	4621      	mov	r1, r4
 80196ee:	4628      	mov	r0, r5
 80196f0:	f000 f80c 	bl	801970c <__swsetup_r>
 80196f4:	2800      	cmp	r0, #0
 80196f6:	d0cb      	beq.n	8019690 <__swbuf_r+0x28>
 80196f8:	f04f 37ff 	mov.w	r7, #4294967295
 80196fc:	e7ea      	b.n	80196d4 <__swbuf_r+0x6c>
 80196fe:	bf00      	nop
 8019700:	0801a7f8 	.word	0x0801a7f8
 8019704:	0801a818 	.word	0x0801a818
 8019708:	0801a7d8 	.word	0x0801a7d8

0801970c <__swsetup_r>:
 801970c:	4b32      	ldr	r3, [pc, #200]	; (80197d8 <__swsetup_r+0xcc>)
 801970e:	b570      	push	{r4, r5, r6, lr}
 8019710:	681d      	ldr	r5, [r3, #0]
 8019712:	4606      	mov	r6, r0
 8019714:	460c      	mov	r4, r1
 8019716:	b125      	cbz	r5, 8019722 <__swsetup_r+0x16>
 8019718:	69ab      	ldr	r3, [r5, #24]
 801971a:	b913      	cbnz	r3, 8019722 <__swsetup_r+0x16>
 801971c:	4628      	mov	r0, r5
 801971e:	f000 f97d 	bl	8019a1c <__sinit>
 8019722:	4b2e      	ldr	r3, [pc, #184]	; (80197dc <__swsetup_r+0xd0>)
 8019724:	429c      	cmp	r4, r3
 8019726:	d10f      	bne.n	8019748 <__swsetup_r+0x3c>
 8019728:	686c      	ldr	r4, [r5, #4]
 801972a:	89a3      	ldrh	r3, [r4, #12]
 801972c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019730:	0719      	lsls	r1, r3, #28
 8019732:	d42c      	bmi.n	801978e <__swsetup_r+0x82>
 8019734:	06dd      	lsls	r5, r3, #27
 8019736:	d411      	bmi.n	801975c <__swsetup_r+0x50>
 8019738:	2309      	movs	r3, #9
 801973a:	6033      	str	r3, [r6, #0]
 801973c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019740:	81a3      	strh	r3, [r4, #12]
 8019742:	f04f 30ff 	mov.w	r0, #4294967295
 8019746:	e03e      	b.n	80197c6 <__swsetup_r+0xba>
 8019748:	4b25      	ldr	r3, [pc, #148]	; (80197e0 <__swsetup_r+0xd4>)
 801974a:	429c      	cmp	r4, r3
 801974c:	d101      	bne.n	8019752 <__swsetup_r+0x46>
 801974e:	68ac      	ldr	r4, [r5, #8]
 8019750:	e7eb      	b.n	801972a <__swsetup_r+0x1e>
 8019752:	4b24      	ldr	r3, [pc, #144]	; (80197e4 <__swsetup_r+0xd8>)
 8019754:	429c      	cmp	r4, r3
 8019756:	bf08      	it	eq
 8019758:	68ec      	ldreq	r4, [r5, #12]
 801975a:	e7e6      	b.n	801972a <__swsetup_r+0x1e>
 801975c:	0758      	lsls	r0, r3, #29
 801975e:	d512      	bpl.n	8019786 <__swsetup_r+0x7a>
 8019760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019762:	b141      	cbz	r1, 8019776 <__swsetup_r+0x6a>
 8019764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019768:	4299      	cmp	r1, r3
 801976a:	d002      	beq.n	8019772 <__swsetup_r+0x66>
 801976c:	4630      	mov	r0, r6
 801976e:	f000 fa5b 	bl	8019c28 <_free_r>
 8019772:	2300      	movs	r3, #0
 8019774:	6363      	str	r3, [r4, #52]	; 0x34
 8019776:	89a3      	ldrh	r3, [r4, #12]
 8019778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801977c:	81a3      	strh	r3, [r4, #12]
 801977e:	2300      	movs	r3, #0
 8019780:	6063      	str	r3, [r4, #4]
 8019782:	6923      	ldr	r3, [r4, #16]
 8019784:	6023      	str	r3, [r4, #0]
 8019786:	89a3      	ldrh	r3, [r4, #12]
 8019788:	f043 0308 	orr.w	r3, r3, #8
 801978c:	81a3      	strh	r3, [r4, #12]
 801978e:	6923      	ldr	r3, [r4, #16]
 8019790:	b94b      	cbnz	r3, 80197a6 <__swsetup_r+0x9a>
 8019792:	89a3      	ldrh	r3, [r4, #12]
 8019794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801979c:	d003      	beq.n	80197a6 <__swsetup_r+0x9a>
 801979e:	4621      	mov	r1, r4
 80197a0:	4630      	mov	r0, r6
 80197a2:	f000 fa01 	bl	8019ba8 <__smakebuf_r>
 80197a6:	89a0      	ldrh	r0, [r4, #12]
 80197a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197ac:	f010 0301 	ands.w	r3, r0, #1
 80197b0:	d00a      	beq.n	80197c8 <__swsetup_r+0xbc>
 80197b2:	2300      	movs	r3, #0
 80197b4:	60a3      	str	r3, [r4, #8]
 80197b6:	6963      	ldr	r3, [r4, #20]
 80197b8:	425b      	negs	r3, r3
 80197ba:	61a3      	str	r3, [r4, #24]
 80197bc:	6923      	ldr	r3, [r4, #16]
 80197be:	b943      	cbnz	r3, 80197d2 <__swsetup_r+0xc6>
 80197c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197c4:	d1ba      	bne.n	801973c <__swsetup_r+0x30>
 80197c6:	bd70      	pop	{r4, r5, r6, pc}
 80197c8:	0781      	lsls	r1, r0, #30
 80197ca:	bf58      	it	pl
 80197cc:	6963      	ldrpl	r3, [r4, #20]
 80197ce:	60a3      	str	r3, [r4, #8]
 80197d0:	e7f4      	b.n	80197bc <__swsetup_r+0xb0>
 80197d2:	2000      	movs	r0, #0
 80197d4:	e7f7      	b.n	80197c6 <__swsetup_r+0xba>
 80197d6:	bf00      	nop
 80197d8:	20000074 	.word	0x20000074
 80197dc:	0801a7f8 	.word	0x0801a7f8
 80197e0:	0801a818 	.word	0x0801a818
 80197e4:	0801a7d8 	.word	0x0801a7d8

080197e8 <__sflush_r>:
 80197e8:	898a      	ldrh	r2, [r1, #12]
 80197ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ee:	4605      	mov	r5, r0
 80197f0:	0710      	lsls	r0, r2, #28
 80197f2:	460c      	mov	r4, r1
 80197f4:	d458      	bmi.n	80198a8 <__sflush_r+0xc0>
 80197f6:	684b      	ldr	r3, [r1, #4]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	dc05      	bgt.n	8019808 <__sflush_r+0x20>
 80197fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80197fe:	2b00      	cmp	r3, #0
 8019800:	dc02      	bgt.n	8019808 <__sflush_r+0x20>
 8019802:	2000      	movs	r0, #0
 8019804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801980a:	2e00      	cmp	r6, #0
 801980c:	d0f9      	beq.n	8019802 <__sflush_r+0x1a>
 801980e:	2300      	movs	r3, #0
 8019810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019814:	682f      	ldr	r7, [r5, #0]
 8019816:	602b      	str	r3, [r5, #0]
 8019818:	d032      	beq.n	8019880 <__sflush_r+0x98>
 801981a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801981c:	89a3      	ldrh	r3, [r4, #12]
 801981e:	075a      	lsls	r2, r3, #29
 8019820:	d505      	bpl.n	801982e <__sflush_r+0x46>
 8019822:	6863      	ldr	r3, [r4, #4]
 8019824:	1ac0      	subs	r0, r0, r3
 8019826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019828:	b10b      	cbz	r3, 801982e <__sflush_r+0x46>
 801982a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801982c:	1ac0      	subs	r0, r0, r3
 801982e:	2300      	movs	r3, #0
 8019830:	4602      	mov	r2, r0
 8019832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019834:	6a21      	ldr	r1, [r4, #32]
 8019836:	4628      	mov	r0, r5
 8019838:	47b0      	blx	r6
 801983a:	1c43      	adds	r3, r0, #1
 801983c:	89a3      	ldrh	r3, [r4, #12]
 801983e:	d106      	bne.n	801984e <__sflush_r+0x66>
 8019840:	6829      	ldr	r1, [r5, #0]
 8019842:	291d      	cmp	r1, #29
 8019844:	d82c      	bhi.n	80198a0 <__sflush_r+0xb8>
 8019846:	4a2a      	ldr	r2, [pc, #168]	; (80198f0 <__sflush_r+0x108>)
 8019848:	40ca      	lsrs	r2, r1
 801984a:	07d6      	lsls	r6, r2, #31
 801984c:	d528      	bpl.n	80198a0 <__sflush_r+0xb8>
 801984e:	2200      	movs	r2, #0
 8019850:	6062      	str	r2, [r4, #4]
 8019852:	04d9      	lsls	r1, r3, #19
 8019854:	6922      	ldr	r2, [r4, #16]
 8019856:	6022      	str	r2, [r4, #0]
 8019858:	d504      	bpl.n	8019864 <__sflush_r+0x7c>
 801985a:	1c42      	adds	r2, r0, #1
 801985c:	d101      	bne.n	8019862 <__sflush_r+0x7a>
 801985e:	682b      	ldr	r3, [r5, #0]
 8019860:	b903      	cbnz	r3, 8019864 <__sflush_r+0x7c>
 8019862:	6560      	str	r0, [r4, #84]	; 0x54
 8019864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019866:	602f      	str	r7, [r5, #0]
 8019868:	2900      	cmp	r1, #0
 801986a:	d0ca      	beq.n	8019802 <__sflush_r+0x1a>
 801986c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019870:	4299      	cmp	r1, r3
 8019872:	d002      	beq.n	801987a <__sflush_r+0x92>
 8019874:	4628      	mov	r0, r5
 8019876:	f000 f9d7 	bl	8019c28 <_free_r>
 801987a:	2000      	movs	r0, #0
 801987c:	6360      	str	r0, [r4, #52]	; 0x34
 801987e:	e7c1      	b.n	8019804 <__sflush_r+0x1c>
 8019880:	6a21      	ldr	r1, [r4, #32]
 8019882:	2301      	movs	r3, #1
 8019884:	4628      	mov	r0, r5
 8019886:	47b0      	blx	r6
 8019888:	1c41      	adds	r1, r0, #1
 801988a:	d1c7      	bne.n	801981c <__sflush_r+0x34>
 801988c:	682b      	ldr	r3, [r5, #0]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d0c4      	beq.n	801981c <__sflush_r+0x34>
 8019892:	2b1d      	cmp	r3, #29
 8019894:	d001      	beq.n	801989a <__sflush_r+0xb2>
 8019896:	2b16      	cmp	r3, #22
 8019898:	d101      	bne.n	801989e <__sflush_r+0xb6>
 801989a:	602f      	str	r7, [r5, #0]
 801989c:	e7b1      	b.n	8019802 <__sflush_r+0x1a>
 801989e:	89a3      	ldrh	r3, [r4, #12]
 80198a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a4:	81a3      	strh	r3, [r4, #12]
 80198a6:	e7ad      	b.n	8019804 <__sflush_r+0x1c>
 80198a8:	690f      	ldr	r7, [r1, #16]
 80198aa:	2f00      	cmp	r7, #0
 80198ac:	d0a9      	beq.n	8019802 <__sflush_r+0x1a>
 80198ae:	0793      	lsls	r3, r2, #30
 80198b0:	680e      	ldr	r6, [r1, #0]
 80198b2:	bf08      	it	eq
 80198b4:	694b      	ldreq	r3, [r1, #20]
 80198b6:	600f      	str	r7, [r1, #0]
 80198b8:	bf18      	it	ne
 80198ba:	2300      	movne	r3, #0
 80198bc:	eba6 0807 	sub.w	r8, r6, r7
 80198c0:	608b      	str	r3, [r1, #8]
 80198c2:	f1b8 0f00 	cmp.w	r8, #0
 80198c6:	dd9c      	ble.n	8019802 <__sflush_r+0x1a>
 80198c8:	6a21      	ldr	r1, [r4, #32]
 80198ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198cc:	4643      	mov	r3, r8
 80198ce:	463a      	mov	r2, r7
 80198d0:	4628      	mov	r0, r5
 80198d2:	47b0      	blx	r6
 80198d4:	2800      	cmp	r0, #0
 80198d6:	dc06      	bgt.n	80198e6 <__sflush_r+0xfe>
 80198d8:	89a3      	ldrh	r3, [r4, #12]
 80198da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198de:	81a3      	strh	r3, [r4, #12]
 80198e0:	f04f 30ff 	mov.w	r0, #4294967295
 80198e4:	e78e      	b.n	8019804 <__sflush_r+0x1c>
 80198e6:	4407      	add	r7, r0
 80198e8:	eba8 0800 	sub.w	r8, r8, r0
 80198ec:	e7e9      	b.n	80198c2 <__sflush_r+0xda>
 80198ee:	bf00      	nop
 80198f0:	20400001 	.word	0x20400001

080198f4 <_fflush_r>:
 80198f4:	b538      	push	{r3, r4, r5, lr}
 80198f6:	690b      	ldr	r3, [r1, #16]
 80198f8:	4605      	mov	r5, r0
 80198fa:	460c      	mov	r4, r1
 80198fc:	b913      	cbnz	r3, 8019904 <_fflush_r+0x10>
 80198fe:	2500      	movs	r5, #0
 8019900:	4628      	mov	r0, r5
 8019902:	bd38      	pop	{r3, r4, r5, pc}
 8019904:	b118      	cbz	r0, 801990e <_fflush_r+0x1a>
 8019906:	6983      	ldr	r3, [r0, #24]
 8019908:	b90b      	cbnz	r3, 801990e <_fflush_r+0x1a>
 801990a:	f000 f887 	bl	8019a1c <__sinit>
 801990e:	4b14      	ldr	r3, [pc, #80]	; (8019960 <_fflush_r+0x6c>)
 8019910:	429c      	cmp	r4, r3
 8019912:	d11b      	bne.n	801994c <_fflush_r+0x58>
 8019914:	686c      	ldr	r4, [r5, #4]
 8019916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d0ef      	beq.n	80198fe <_fflush_r+0xa>
 801991e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019920:	07d0      	lsls	r0, r2, #31
 8019922:	d404      	bmi.n	801992e <_fflush_r+0x3a>
 8019924:	0599      	lsls	r1, r3, #22
 8019926:	d402      	bmi.n	801992e <_fflush_r+0x3a>
 8019928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801992a:	f000 f915 	bl	8019b58 <__retarget_lock_acquire_recursive>
 801992e:	4628      	mov	r0, r5
 8019930:	4621      	mov	r1, r4
 8019932:	f7ff ff59 	bl	80197e8 <__sflush_r>
 8019936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019938:	07da      	lsls	r2, r3, #31
 801993a:	4605      	mov	r5, r0
 801993c:	d4e0      	bmi.n	8019900 <_fflush_r+0xc>
 801993e:	89a3      	ldrh	r3, [r4, #12]
 8019940:	059b      	lsls	r3, r3, #22
 8019942:	d4dd      	bmi.n	8019900 <_fflush_r+0xc>
 8019944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019946:	f000 f908 	bl	8019b5a <__retarget_lock_release_recursive>
 801994a:	e7d9      	b.n	8019900 <_fflush_r+0xc>
 801994c:	4b05      	ldr	r3, [pc, #20]	; (8019964 <_fflush_r+0x70>)
 801994e:	429c      	cmp	r4, r3
 8019950:	d101      	bne.n	8019956 <_fflush_r+0x62>
 8019952:	68ac      	ldr	r4, [r5, #8]
 8019954:	e7df      	b.n	8019916 <_fflush_r+0x22>
 8019956:	4b04      	ldr	r3, [pc, #16]	; (8019968 <_fflush_r+0x74>)
 8019958:	429c      	cmp	r4, r3
 801995a:	bf08      	it	eq
 801995c:	68ec      	ldreq	r4, [r5, #12]
 801995e:	e7da      	b.n	8019916 <_fflush_r+0x22>
 8019960:	0801a7f8 	.word	0x0801a7f8
 8019964:	0801a818 	.word	0x0801a818
 8019968:	0801a7d8 	.word	0x0801a7d8

0801996c <std>:
 801996c:	2300      	movs	r3, #0
 801996e:	b510      	push	{r4, lr}
 8019970:	4604      	mov	r4, r0
 8019972:	e9c0 3300 	strd	r3, r3, [r0]
 8019976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801997a:	6083      	str	r3, [r0, #8]
 801997c:	8181      	strh	r1, [r0, #12]
 801997e:	6643      	str	r3, [r0, #100]	; 0x64
 8019980:	81c2      	strh	r2, [r0, #14]
 8019982:	6183      	str	r3, [r0, #24]
 8019984:	4619      	mov	r1, r3
 8019986:	2208      	movs	r2, #8
 8019988:	305c      	adds	r0, #92	; 0x5c
 801998a:	f7ff fdad 	bl	80194e8 <memset>
 801998e:	4b05      	ldr	r3, [pc, #20]	; (80199a4 <std+0x38>)
 8019990:	6263      	str	r3, [r4, #36]	; 0x24
 8019992:	4b05      	ldr	r3, [pc, #20]	; (80199a8 <std+0x3c>)
 8019994:	62a3      	str	r3, [r4, #40]	; 0x28
 8019996:	4b05      	ldr	r3, [pc, #20]	; (80199ac <std+0x40>)
 8019998:	62e3      	str	r3, [r4, #44]	; 0x2c
 801999a:	4b05      	ldr	r3, [pc, #20]	; (80199b0 <std+0x44>)
 801999c:	6224      	str	r4, [r4, #32]
 801999e:	6323      	str	r3, [r4, #48]	; 0x30
 80199a0:	bd10      	pop	{r4, pc}
 80199a2:	bf00      	nop
 80199a4:	0801a475 	.word	0x0801a475
 80199a8:	0801a497 	.word	0x0801a497
 80199ac:	0801a4cf 	.word	0x0801a4cf
 80199b0:	0801a4f3 	.word	0x0801a4f3

080199b4 <_cleanup_r>:
 80199b4:	4901      	ldr	r1, [pc, #4]	; (80199bc <_cleanup_r+0x8>)
 80199b6:	f000 b8af 	b.w	8019b18 <_fwalk_reent>
 80199ba:	bf00      	nop
 80199bc:	080198f5 	.word	0x080198f5

080199c0 <__sfmoreglue>:
 80199c0:	b570      	push	{r4, r5, r6, lr}
 80199c2:	2268      	movs	r2, #104	; 0x68
 80199c4:	1e4d      	subs	r5, r1, #1
 80199c6:	4355      	muls	r5, r2
 80199c8:	460e      	mov	r6, r1
 80199ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80199ce:	f000 f997 	bl	8019d00 <_malloc_r>
 80199d2:	4604      	mov	r4, r0
 80199d4:	b140      	cbz	r0, 80199e8 <__sfmoreglue+0x28>
 80199d6:	2100      	movs	r1, #0
 80199d8:	e9c0 1600 	strd	r1, r6, [r0]
 80199dc:	300c      	adds	r0, #12
 80199de:	60a0      	str	r0, [r4, #8]
 80199e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80199e4:	f7ff fd80 	bl	80194e8 <memset>
 80199e8:	4620      	mov	r0, r4
 80199ea:	bd70      	pop	{r4, r5, r6, pc}

080199ec <__sfp_lock_acquire>:
 80199ec:	4801      	ldr	r0, [pc, #4]	; (80199f4 <__sfp_lock_acquire+0x8>)
 80199ee:	f000 b8b3 	b.w	8019b58 <__retarget_lock_acquire_recursive>
 80199f2:	bf00      	nop
 80199f4:	2000861d 	.word	0x2000861d

080199f8 <__sfp_lock_release>:
 80199f8:	4801      	ldr	r0, [pc, #4]	; (8019a00 <__sfp_lock_release+0x8>)
 80199fa:	f000 b8ae 	b.w	8019b5a <__retarget_lock_release_recursive>
 80199fe:	bf00      	nop
 8019a00:	2000861d 	.word	0x2000861d

08019a04 <__sinit_lock_acquire>:
 8019a04:	4801      	ldr	r0, [pc, #4]	; (8019a0c <__sinit_lock_acquire+0x8>)
 8019a06:	f000 b8a7 	b.w	8019b58 <__retarget_lock_acquire_recursive>
 8019a0a:	bf00      	nop
 8019a0c:	2000861e 	.word	0x2000861e

08019a10 <__sinit_lock_release>:
 8019a10:	4801      	ldr	r0, [pc, #4]	; (8019a18 <__sinit_lock_release+0x8>)
 8019a12:	f000 b8a2 	b.w	8019b5a <__retarget_lock_release_recursive>
 8019a16:	bf00      	nop
 8019a18:	2000861e 	.word	0x2000861e

08019a1c <__sinit>:
 8019a1c:	b510      	push	{r4, lr}
 8019a1e:	4604      	mov	r4, r0
 8019a20:	f7ff fff0 	bl	8019a04 <__sinit_lock_acquire>
 8019a24:	69a3      	ldr	r3, [r4, #24]
 8019a26:	b11b      	cbz	r3, 8019a30 <__sinit+0x14>
 8019a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a2c:	f7ff bff0 	b.w	8019a10 <__sinit_lock_release>
 8019a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a34:	6523      	str	r3, [r4, #80]	; 0x50
 8019a36:	4b13      	ldr	r3, [pc, #76]	; (8019a84 <__sinit+0x68>)
 8019a38:	4a13      	ldr	r2, [pc, #76]	; (8019a88 <__sinit+0x6c>)
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a3e:	42a3      	cmp	r3, r4
 8019a40:	bf04      	itt	eq
 8019a42:	2301      	moveq	r3, #1
 8019a44:	61a3      	streq	r3, [r4, #24]
 8019a46:	4620      	mov	r0, r4
 8019a48:	f000 f820 	bl	8019a8c <__sfp>
 8019a4c:	6060      	str	r0, [r4, #4]
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f000 f81c 	bl	8019a8c <__sfp>
 8019a54:	60a0      	str	r0, [r4, #8]
 8019a56:	4620      	mov	r0, r4
 8019a58:	f000 f818 	bl	8019a8c <__sfp>
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	60e0      	str	r0, [r4, #12]
 8019a60:	2104      	movs	r1, #4
 8019a62:	6860      	ldr	r0, [r4, #4]
 8019a64:	f7ff ff82 	bl	801996c <std>
 8019a68:	68a0      	ldr	r0, [r4, #8]
 8019a6a:	2201      	movs	r2, #1
 8019a6c:	2109      	movs	r1, #9
 8019a6e:	f7ff ff7d 	bl	801996c <std>
 8019a72:	68e0      	ldr	r0, [r4, #12]
 8019a74:	2202      	movs	r2, #2
 8019a76:	2112      	movs	r1, #18
 8019a78:	f7ff ff78 	bl	801996c <std>
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	61a3      	str	r3, [r4, #24]
 8019a80:	e7d2      	b.n	8019a28 <__sinit+0xc>
 8019a82:	bf00      	nop
 8019a84:	0801a7d4 	.word	0x0801a7d4
 8019a88:	080199b5 	.word	0x080199b5

08019a8c <__sfp>:
 8019a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a8e:	4607      	mov	r7, r0
 8019a90:	f7ff ffac 	bl	80199ec <__sfp_lock_acquire>
 8019a94:	4b1e      	ldr	r3, [pc, #120]	; (8019b10 <__sfp+0x84>)
 8019a96:	681e      	ldr	r6, [r3, #0]
 8019a98:	69b3      	ldr	r3, [r6, #24]
 8019a9a:	b913      	cbnz	r3, 8019aa2 <__sfp+0x16>
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	f7ff ffbd 	bl	8019a1c <__sinit>
 8019aa2:	3648      	adds	r6, #72	; 0x48
 8019aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019aa8:	3b01      	subs	r3, #1
 8019aaa:	d503      	bpl.n	8019ab4 <__sfp+0x28>
 8019aac:	6833      	ldr	r3, [r6, #0]
 8019aae:	b30b      	cbz	r3, 8019af4 <__sfp+0x68>
 8019ab0:	6836      	ldr	r6, [r6, #0]
 8019ab2:	e7f7      	b.n	8019aa4 <__sfp+0x18>
 8019ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ab8:	b9d5      	cbnz	r5, 8019af0 <__sfp+0x64>
 8019aba:	4b16      	ldr	r3, [pc, #88]	; (8019b14 <__sfp+0x88>)
 8019abc:	60e3      	str	r3, [r4, #12]
 8019abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8019ac4:	f000 f847 	bl	8019b56 <__retarget_lock_init_recursive>
 8019ac8:	f7ff ff96 	bl	80199f8 <__sfp_lock_release>
 8019acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019ad4:	6025      	str	r5, [r4, #0]
 8019ad6:	61a5      	str	r5, [r4, #24]
 8019ad8:	2208      	movs	r2, #8
 8019ada:	4629      	mov	r1, r5
 8019adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ae0:	f7ff fd02 	bl	80194e8 <memset>
 8019ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019aec:	4620      	mov	r0, r4
 8019aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019af0:	3468      	adds	r4, #104	; 0x68
 8019af2:	e7d9      	b.n	8019aa8 <__sfp+0x1c>
 8019af4:	2104      	movs	r1, #4
 8019af6:	4638      	mov	r0, r7
 8019af8:	f7ff ff62 	bl	80199c0 <__sfmoreglue>
 8019afc:	4604      	mov	r4, r0
 8019afe:	6030      	str	r0, [r6, #0]
 8019b00:	2800      	cmp	r0, #0
 8019b02:	d1d5      	bne.n	8019ab0 <__sfp+0x24>
 8019b04:	f7ff ff78 	bl	80199f8 <__sfp_lock_release>
 8019b08:	230c      	movs	r3, #12
 8019b0a:	603b      	str	r3, [r7, #0]
 8019b0c:	e7ee      	b.n	8019aec <__sfp+0x60>
 8019b0e:	bf00      	nop
 8019b10:	0801a7d4 	.word	0x0801a7d4
 8019b14:	ffff0001 	.word	0xffff0001

08019b18 <_fwalk_reent>:
 8019b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b1c:	4606      	mov	r6, r0
 8019b1e:	4688      	mov	r8, r1
 8019b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b24:	2700      	movs	r7, #0
 8019b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8019b2e:	d505      	bpl.n	8019b3c <_fwalk_reent+0x24>
 8019b30:	6824      	ldr	r4, [r4, #0]
 8019b32:	2c00      	cmp	r4, #0
 8019b34:	d1f7      	bne.n	8019b26 <_fwalk_reent+0xe>
 8019b36:	4638      	mov	r0, r7
 8019b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b3c:	89ab      	ldrh	r3, [r5, #12]
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d907      	bls.n	8019b52 <_fwalk_reent+0x3a>
 8019b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b46:	3301      	adds	r3, #1
 8019b48:	d003      	beq.n	8019b52 <_fwalk_reent+0x3a>
 8019b4a:	4629      	mov	r1, r5
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	47c0      	blx	r8
 8019b50:	4307      	orrs	r7, r0
 8019b52:	3568      	adds	r5, #104	; 0x68
 8019b54:	e7e9      	b.n	8019b2a <_fwalk_reent+0x12>

08019b56 <__retarget_lock_init_recursive>:
 8019b56:	4770      	bx	lr

08019b58 <__retarget_lock_acquire_recursive>:
 8019b58:	4770      	bx	lr

08019b5a <__retarget_lock_release_recursive>:
 8019b5a:	4770      	bx	lr

08019b5c <__swhatbuf_r>:
 8019b5c:	b570      	push	{r4, r5, r6, lr}
 8019b5e:	460e      	mov	r6, r1
 8019b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b64:	2900      	cmp	r1, #0
 8019b66:	b096      	sub	sp, #88	; 0x58
 8019b68:	4614      	mov	r4, r2
 8019b6a:	461d      	mov	r5, r3
 8019b6c:	da08      	bge.n	8019b80 <__swhatbuf_r+0x24>
 8019b6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019b72:	2200      	movs	r2, #0
 8019b74:	602a      	str	r2, [r5, #0]
 8019b76:	061a      	lsls	r2, r3, #24
 8019b78:	d410      	bmi.n	8019b9c <__swhatbuf_r+0x40>
 8019b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b7e:	e00e      	b.n	8019b9e <__swhatbuf_r+0x42>
 8019b80:	466a      	mov	r2, sp
 8019b82:	f000 fcdd 	bl	801a540 <_fstat_r>
 8019b86:	2800      	cmp	r0, #0
 8019b88:	dbf1      	blt.n	8019b6e <__swhatbuf_r+0x12>
 8019b8a:	9a01      	ldr	r2, [sp, #4]
 8019b8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019b90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019b94:	425a      	negs	r2, r3
 8019b96:	415a      	adcs	r2, r3
 8019b98:	602a      	str	r2, [r5, #0]
 8019b9a:	e7ee      	b.n	8019b7a <__swhatbuf_r+0x1e>
 8019b9c:	2340      	movs	r3, #64	; 0x40
 8019b9e:	2000      	movs	r0, #0
 8019ba0:	6023      	str	r3, [r4, #0]
 8019ba2:	b016      	add	sp, #88	; 0x58
 8019ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ba8 <__smakebuf_r>:
 8019ba8:	898b      	ldrh	r3, [r1, #12]
 8019baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bac:	079d      	lsls	r5, r3, #30
 8019bae:	4606      	mov	r6, r0
 8019bb0:	460c      	mov	r4, r1
 8019bb2:	d507      	bpl.n	8019bc4 <__smakebuf_r+0x1c>
 8019bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019bb8:	6023      	str	r3, [r4, #0]
 8019bba:	6123      	str	r3, [r4, #16]
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	6163      	str	r3, [r4, #20]
 8019bc0:	b002      	add	sp, #8
 8019bc2:	bd70      	pop	{r4, r5, r6, pc}
 8019bc4:	ab01      	add	r3, sp, #4
 8019bc6:	466a      	mov	r2, sp
 8019bc8:	f7ff ffc8 	bl	8019b5c <__swhatbuf_r>
 8019bcc:	9900      	ldr	r1, [sp, #0]
 8019bce:	4605      	mov	r5, r0
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	f000 f895 	bl	8019d00 <_malloc_r>
 8019bd6:	b948      	cbnz	r0, 8019bec <__smakebuf_r+0x44>
 8019bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bdc:	059a      	lsls	r2, r3, #22
 8019bde:	d4ef      	bmi.n	8019bc0 <__smakebuf_r+0x18>
 8019be0:	f023 0303 	bic.w	r3, r3, #3
 8019be4:	f043 0302 	orr.w	r3, r3, #2
 8019be8:	81a3      	strh	r3, [r4, #12]
 8019bea:	e7e3      	b.n	8019bb4 <__smakebuf_r+0xc>
 8019bec:	4b0d      	ldr	r3, [pc, #52]	; (8019c24 <__smakebuf_r+0x7c>)
 8019bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8019bf0:	89a3      	ldrh	r3, [r4, #12]
 8019bf2:	6020      	str	r0, [r4, #0]
 8019bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bf8:	81a3      	strh	r3, [r4, #12]
 8019bfa:	9b00      	ldr	r3, [sp, #0]
 8019bfc:	6163      	str	r3, [r4, #20]
 8019bfe:	9b01      	ldr	r3, [sp, #4]
 8019c00:	6120      	str	r0, [r4, #16]
 8019c02:	b15b      	cbz	r3, 8019c1c <__smakebuf_r+0x74>
 8019c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c08:	4630      	mov	r0, r6
 8019c0a:	f000 fcab 	bl	801a564 <_isatty_r>
 8019c0e:	b128      	cbz	r0, 8019c1c <__smakebuf_r+0x74>
 8019c10:	89a3      	ldrh	r3, [r4, #12]
 8019c12:	f023 0303 	bic.w	r3, r3, #3
 8019c16:	f043 0301 	orr.w	r3, r3, #1
 8019c1a:	81a3      	strh	r3, [r4, #12]
 8019c1c:	89a0      	ldrh	r0, [r4, #12]
 8019c1e:	4305      	orrs	r5, r0
 8019c20:	81a5      	strh	r5, [r4, #12]
 8019c22:	e7cd      	b.n	8019bc0 <__smakebuf_r+0x18>
 8019c24:	080199b5 	.word	0x080199b5

08019c28 <_free_r>:
 8019c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c2a:	2900      	cmp	r1, #0
 8019c2c:	d044      	beq.n	8019cb8 <_free_r+0x90>
 8019c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c32:	9001      	str	r0, [sp, #4]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f1a1 0404 	sub.w	r4, r1, #4
 8019c3a:	bfb8      	it	lt
 8019c3c:	18e4      	addlt	r4, r4, r3
 8019c3e:	f000 fcb3 	bl	801a5a8 <__malloc_lock>
 8019c42:	4a1e      	ldr	r2, [pc, #120]	; (8019cbc <_free_r+0x94>)
 8019c44:	9801      	ldr	r0, [sp, #4]
 8019c46:	6813      	ldr	r3, [r2, #0]
 8019c48:	b933      	cbnz	r3, 8019c58 <_free_r+0x30>
 8019c4a:	6063      	str	r3, [r4, #4]
 8019c4c:	6014      	str	r4, [r2, #0]
 8019c4e:	b003      	add	sp, #12
 8019c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c54:	f000 bcae 	b.w	801a5b4 <__malloc_unlock>
 8019c58:	42a3      	cmp	r3, r4
 8019c5a:	d908      	bls.n	8019c6e <_free_r+0x46>
 8019c5c:	6825      	ldr	r5, [r4, #0]
 8019c5e:	1961      	adds	r1, r4, r5
 8019c60:	428b      	cmp	r3, r1
 8019c62:	bf01      	itttt	eq
 8019c64:	6819      	ldreq	r1, [r3, #0]
 8019c66:	685b      	ldreq	r3, [r3, #4]
 8019c68:	1949      	addeq	r1, r1, r5
 8019c6a:	6021      	streq	r1, [r4, #0]
 8019c6c:	e7ed      	b.n	8019c4a <_free_r+0x22>
 8019c6e:	461a      	mov	r2, r3
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	b10b      	cbz	r3, 8019c78 <_free_r+0x50>
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	d9fa      	bls.n	8019c6e <_free_r+0x46>
 8019c78:	6811      	ldr	r1, [r2, #0]
 8019c7a:	1855      	adds	r5, r2, r1
 8019c7c:	42a5      	cmp	r5, r4
 8019c7e:	d10b      	bne.n	8019c98 <_free_r+0x70>
 8019c80:	6824      	ldr	r4, [r4, #0]
 8019c82:	4421      	add	r1, r4
 8019c84:	1854      	adds	r4, r2, r1
 8019c86:	42a3      	cmp	r3, r4
 8019c88:	6011      	str	r1, [r2, #0]
 8019c8a:	d1e0      	bne.n	8019c4e <_free_r+0x26>
 8019c8c:	681c      	ldr	r4, [r3, #0]
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	6053      	str	r3, [r2, #4]
 8019c92:	4421      	add	r1, r4
 8019c94:	6011      	str	r1, [r2, #0]
 8019c96:	e7da      	b.n	8019c4e <_free_r+0x26>
 8019c98:	d902      	bls.n	8019ca0 <_free_r+0x78>
 8019c9a:	230c      	movs	r3, #12
 8019c9c:	6003      	str	r3, [r0, #0]
 8019c9e:	e7d6      	b.n	8019c4e <_free_r+0x26>
 8019ca0:	6825      	ldr	r5, [r4, #0]
 8019ca2:	1961      	adds	r1, r4, r5
 8019ca4:	428b      	cmp	r3, r1
 8019ca6:	bf04      	itt	eq
 8019ca8:	6819      	ldreq	r1, [r3, #0]
 8019caa:	685b      	ldreq	r3, [r3, #4]
 8019cac:	6063      	str	r3, [r4, #4]
 8019cae:	bf04      	itt	eq
 8019cb0:	1949      	addeq	r1, r1, r5
 8019cb2:	6021      	streq	r1, [r4, #0]
 8019cb4:	6054      	str	r4, [r2, #4]
 8019cb6:	e7ca      	b.n	8019c4e <_free_r+0x26>
 8019cb8:	b003      	add	sp, #12
 8019cba:	bd30      	pop	{r4, r5, pc}
 8019cbc:	20008620 	.word	0x20008620

08019cc0 <sbrk_aligned>:
 8019cc0:	b570      	push	{r4, r5, r6, lr}
 8019cc2:	4e0e      	ldr	r6, [pc, #56]	; (8019cfc <sbrk_aligned+0x3c>)
 8019cc4:	460c      	mov	r4, r1
 8019cc6:	6831      	ldr	r1, [r6, #0]
 8019cc8:	4605      	mov	r5, r0
 8019cca:	b911      	cbnz	r1, 8019cd2 <sbrk_aligned+0x12>
 8019ccc:	f000 fbc2 	bl	801a454 <_sbrk_r>
 8019cd0:	6030      	str	r0, [r6, #0]
 8019cd2:	4621      	mov	r1, r4
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	f000 fbbd 	bl	801a454 <_sbrk_r>
 8019cda:	1c43      	adds	r3, r0, #1
 8019cdc:	d00a      	beq.n	8019cf4 <sbrk_aligned+0x34>
 8019cde:	1cc4      	adds	r4, r0, #3
 8019ce0:	f024 0403 	bic.w	r4, r4, #3
 8019ce4:	42a0      	cmp	r0, r4
 8019ce6:	d007      	beq.n	8019cf8 <sbrk_aligned+0x38>
 8019ce8:	1a21      	subs	r1, r4, r0
 8019cea:	4628      	mov	r0, r5
 8019cec:	f000 fbb2 	bl	801a454 <_sbrk_r>
 8019cf0:	3001      	adds	r0, #1
 8019cf2:	d101      	bne.n	8019cf8 <sbrk_aligned+0x38>
 8019cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	bd70      	pop	{r4, r5, r6, pc}
 8019cfc:	20008624 	.word	0x20008624

08019d00 <_malloc_r>:
 8019d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d04:	1ccd      	adds	r5, r1, #3
 8019d06:	f025 0503 	bic.w	r5, r5, #3
 8019d0a:	3508      	adds	r5, #8
 8019d0c:	2d0c      	cmp	r5, #12
 8019d0e:	bf38      	it	cc
 8019d10:	250c      	movcc	r5, #12
 8019d12:	2d00      	cmp	r5, #0
 8019d14:	4607      	mov	r7, r0
 8019d16:	db01      	blt.n	8019d1c <_malloc_r+0x1c>
 8019d18:	42a9      	cmp	r1, r5
 8019d1a:	d905      	bls.n	8019d28 <_malloc_r+0x28>
 8019d1c:	230c      	movs	r3, #12
 8019d1e:	603b      	str	r3, [r7, #0]
 8019d20:	2600      	movs	r6, #0
 8019d22:	4630      	mov	r0, r6
 8019d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d28:	4e2e      	ldr	r6, [pc, #184]	; (8019de4 <_malloc_r+0xe4>)
 8019d2a:	f000 fc3d 	bl	801a5a8 <__malloc_lock>
 8019d2e:	6833      	ldr	r3, [r6, #0]
 8019d30:	461c      	mov	r4, r3
 8019d32:	bb34      	cbnz	r4, 8019d82 <_malloc_r+0x82>
 8019d34:	4629      	mov	r1, r5
 8019d36:	4638      	mov	r0, r7
 8019d38:	f7ff ffc2 	bl	8019cc0 <sbrk_aligned>
 8019d3c:	1c43      	adds	r3, r0, #1
 8019d3e:	4604      	mov	r4, r0
 8019d40:	d14d      	bne.n	8019dde <_malloc_r+0xde>
 8019d42:	6834      	ldr	r4, [r6, #0]
 8019d44:	4626      	mov	r6, r4
 8019d46:	2e00      	cmp	r6, #0
 8019d48:	d140      	bne.n	8019dcc <_malloc_r+0xcc>
 8019d4a:	6823      	ldr	r3, [r4, #0]
 8019d4c:	4631      	mov	r1, r6
 8019d4e:	4638      	mov	r0, r7
 8019d50:	eb04 0803 	add.w	r8, r4, r3
 8019d54:	f000 fb7e 	bl	801a454 <_sbrk_r>
 8019d58:	4580      	cmp	r8, r0
 8019d5a:	d13a      	bne.n	8019dd2 <_malloc_r+0xd2>
 8019d5c:	6821      	ldr	r1, [r4, #0]
 8019d5e:	3503      	adds	r5, #3
 8019d60:	1a6d      	subs	r5, r5, r1
 8019d62:	f025 0503 	bic.w	r5, r5, #3
 8019d66:	3508      	adds	r5, #8
 8019d68:	2d0c      	cmp	r5, #12
 8019d6a:	bf38      	it	cc
 8019d6c:	250c      	movcc	r5, #12
 8019d6e:	4629      	mov	r1, r5
 8019d70:	4638      	mov	r0, r7
 8019d72:	f7ff ffa5 	bl	8019cc0 <sbrk_aligned>
 8019d76:	3001      	adds	r0, #1
 8019d78:	d02b      	beq.n	8019dd2 <_malloc_r+0xd2>
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	442b      	add	r3, r5
 8019d7e:	6023      	str	r3, [r4, #0]
 8019d80:	e00e      	b.n	8019da0 <_malloc_r+0xa0>
 8019d82:	6822      	ldr	r2, [r4, #0]
 8019d84:	1b52      	subs	r2, r2, r5
 8019d86:	d41e      	bmi.n	8019dc6 <_malloc_r+0xc6>
 8019d88:	2a0b      	cmp	r2, #11
 8019d8a:	d916      	bls.n	8019dba <_malloc_r+0xba>
 8019d8c:	1961      	adds	r1, r4, r5
 8019d8e:	42a3      	cmp	r3, r4
 8019d90:	6025      	str	r5, [r4, #0]
 8019d92:	bf18      	it	ne
 8019d94:	6059      	strne	r1, [r3, #4]
 8019d96:	6863      	ldr	r3, [r4, #4]
 8019d98:	bf08      	it	eq
 8019d9a:	6031      	streq	r1, [r6, #0]
 8019d9c:	5162      	str	r2, [r4, r5]
 8019d9e:	604b      	str	r3, [r1, #4]
 8019da0:	4638      	mov	r0, r7
 8019da2:	f104 060b 	add.w	r6, r4, #11
 8019da6:	f000 fc05 	bl	801a5b4 <__malloc_unlock>
 8019daa:	f026 0607 	bic.w	r6, r6, #7
 8019dae:	1d23      	adds	r3, r4, #4
 8019db0:	1af2      	subs	r2, r6, r3
 8019db2:	d0b6      	beq.n	8019d22 <_malloc_r+0x22>
 8019db4:	1b9b      	subs	r3, r3, r6
 8019db6:	50a3      	str	r3, [r4, r2]
 8019db8:	e7b3      	b.n	8019d22 <_malloc_r+0x22>
 8019dba:	6862      	ldr	r2, [r4, #4]
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	bf0c      	ite	eq
 8019dc0:	6032      	streq	r2, [r6, #0]
 8019dc2:	605a      	strne	r2, [r3, #4]
 8019dc4:	e7ec      	b.n	8019da0 <_malloc_r+0xa0>
 8019dc6:	4623      	mov	r3, r4
 8019dc8:	6864      	ldr	r4, [r4, #4]
 8019dca:	e7b2      	b.n	8019d32 <_malloc_r+0x32>
 8019dcc:	4634      	mov	r4, r6
 8019dce:	6876      	ldr	r6, [r6, #4]
 8019dd0:	e7b9      	b.n	8019d46 <_malloc_r+0x46>
 8019dd2:	230c      	movs	r3, #12
 8019dd4:	603b      	str	r3, [r7, #0]
 8019dd6:	4638      	mov	r0, r7
 8019dd8:	f000 fbec 	bl	801a5b4 <__malloc_unlock>
 8019ddc:	e7a1      	b.n	8019d22 <_malloc_r+0x22>
 8019dde:	6025      	str	r5, [r4, #0]
 8019de0:	e7de      	b.n	8019da0 <_malloc_r+0xa0>
 8019de2:	bf00      	nop
 8019de4:	20008620 	.word	0x20008620

08019de8 <__sfputc_r>:
 8019de8:	6893      	ldr	r3, [r2, #8]
 8019dea:	3b01      	subs	r3, #1
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	b410      	push	{r4}
 8019df0:	6093      	str	r3, [r2, #8]
 8019df2:	da08      	bge.n	8019e06 <__sfputc_r+0x1e>
 8019df4:	6994      	ldr	r4, [r2, #24]
 8019df6:	42a3      	cmp	r3, r4
 8019df8:	db01      	blt.n	8019dfe <__sfputc_r+0x16>
 8019dfa:	290a      	cmp	r1, #10
 8019dfc:	d103      	bne.n	8019e06 <__sfputc_r+0x1e>
 8019dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e02:	f7ff bc31 	b.w	8019668 <__swbuf_r>
 8019e06:	6813      	ldr	r3, [r2, #0]
 8019e08:	1c58      	adds	r0, r3, #1
 8019e0a:	6010      	str	r0, [r2, #0]
 8019e0c:	7019      	strb	r1, [r3, #0]
 8019e0e:	4608      	mov	r0, r1
 8019e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e14:	4770      	bx	lr

08019e16 <__sfputs_r>:
 8019e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e18:	4606      	mov	r6, r0
 8019e1a:	460f      	mov	r7, r1
 8019e1c:	4614      	mov	r4, r2
 8019e1e:	18d5      	adds	r5, r2, r3
 8019e20:	42ac      	cmp	r4, r5
 8019e22:	d101      	bne.n	8019e28 <__sfputs_r+0x12>
 8019e24:	2000      	movs	r0, #0
 8019e26:	e007      	b.n	8019e38 <__sfputs_r+0x22>
 8019e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e2c:	463a      	mov	r2, r7
 8019e2e:	4630      	mov	r0, r6
 8019e30:	f7ff ffda 	bl	8019de8 <__sfputc_r>
 8019e34:	1c43      	adds	r3, r0, #1
 8019e36:	d1f3      	bne.n	8019e20 <__sfputs_r+0xa>
 8019e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e3c <_vfiprintf_r>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	460d      	mov	r5, r1
 8019e42:	b09d      	sub	sp, #116	; 0x74
 8019e44:	4614      	mov	r4, r2
 8019e46:	4698      	mov	r8, r3
 8019e48:	4606      	mov	r6, r0
 8019e4a:	b118      	cbz	r0, 8019e54 <_vfiprintf_r+0x18>
 8019e4c:	6983      	ldr	r3, [r0, #24]
 8019e4e:	b90b      	cbnz	r3, 8019e54 <_vfiprintf_r+0x18>
 8019e50:	f7ff fde4 	bl	8019a1c <__sinit>
 8019e54:	4b89      	ldr	r3, [pc, #548]	; (801a07c <_vfiprintf_r+0x240>)
 8019e56:	429d      	cmp	r5, r3
 8019e58:	d11b      	bne.n	8019e92 <_vfiprintf_r+0x56>
 8019e5a:	6875      	ldr	r5, [r6, #4]
 8019e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e5e:	07d9      	lsls	r1, r3, #31
 8019e60:	d405      	bmi.n	8019e6e <_vfiprintf_r+0x32>
 8019e62:	89ab      	ldrh	r3, [r5, #12]
 8019e64:	059a      	lsls	r2, r3, #22
 8019e66:	d402      	bmi.n	8019e6e <_vfiprintf_r+0x32>
 8019e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e6a:	f7ff fe75 	bl	8019b58 <__retarget_lock_acquire_recursive>
 8019e6e:	89ab      	ldrh	r3, [r5, #12]
 8019e70:	071b      	lsls	r3, r3, #28
 8019e72:	d501      	bpl.n	8019e78 <_vfiprintf_r+0x3c>
 8019e74:	692b      	ldr	r3, [r5, #16]
 8019e76:	b9eb      	cbnz	r3, 8019eb4 <_vfiprintf_r+0x78>
 8019e78:	4629      	mov	r1, r5
 8019e7a:	4630      	mov	r0, r6
 8019e7c:	f7ff fc46 	bl	801970c <__swsetup_r>
 8019e80:	b1c0      	cbz	r0, 8019eb4 <_vfiprintf_r+0x78>
 8019e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e84:	07dc      	lsls	r4, r3, #31
 8019e86:	d50e      	bpl.n	8019ea6 <_vfiprintf_r+0x6a>
 8019e88:	f04f 30ff 	mov.w	r0, #4294967295
 8019e8c:	b01d      	add	sp, #116	; 0x74
 8019e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e92:	4b7b      	ldr	r3, [pc, #492]	; (801a080 <_vfiprintf_r+0x244>)
 8019e94:	429d      	cmp	r5, r3
 8019e96:	d101      	bne.n	8019e9c <_vfiprintf_r+0x60>
 8019e98:	68b5      	ldr	r5, [r6, #8]
 8019e9a:	e7df      	b.n	8019e5c <_vfiprintf_r+0x20>
 8019e9c:	4b79      	ldr	r3, [pc, #484]	; (801a084 <_vfiprintf_r+0x248>)
 8019e9e:	429d      	cmp	r5, r3
 8019ea0:	bf08      	it	eq
 8019ea2:	68f5      	ldreq	r5, [r6, #12]
 8019ea4:	e7da      	b.n	8019e5c <_vfiprintf_r+0x20>
 8019ea6:	89ab      	ldrh	r3, [r5, #12]
 8019ea8:	0598      	lsls	r0, r3, #22
 8019eaa:	d4ed      	bmi.n	8019e88 <_vfiprintf_r+0x4c>
 8019eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019eae:	f7ff fe54 	bl	8019b5a <__retarget_lock_release_recursive>
 8019eb2:	e7e9      	b.n	8019e88 <_vfiprintf_r+0x4c>
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8019eb8:	2320      	movs	r3, #32
 8019eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ec2:	2330      	movs	r3, #48	; 0x30
 8019ec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a088 <_vfiprintf_r+0x24c>
 8019ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ecc:	f04f 0901 	mov.w	r9, #1
 8019ed0:	4623      	mov	r3, r4
 8019ed2:	469a      	mov	sl, r3
 8019ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ed8:	b10a      	cbz	r2, 8019ede <_vfiprintf_r+0xa2>
 8019eda:	2a25      	cmp	r2, #37	; 0x25
 8019edc:	d1f9      	bne.n	8019ed2 <_vfiprintf_r+0x96>
 8019ede:	ebba 0b04 	subs.w	fp, sl, r4
 8019ee2:	d00b      	beq.n	8019efc <_vfiprintf_r+0xc0>
 8019ee4:	465b      	mov	r3, fp
 8019ee6:	4622      	mov	r2, r4
 8019ee8:	4629      	mov	r1, r5
 8019eea:	4630      	mov	r0, r6
 8019eec:	f7ff ff93 	bl	8019e16 <__sfputs_r>
 8019ef0:	3001      	adds	r0, #1
 8019ef2:	f000 80aa 	beq.w	801a04a <_vfiprintf_r+0x20e>
 8019ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ef8:	445a      	add	r2, fp
 8019efa:	9209      	str	r2, [sp, #36]	; 0x24
 8019efc:	f89a 3000 	ldrb.w	r3, [sl]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	f000 80a2 	beq.w	801a04a <_vfiprintf_r+0x20e>
 8019f06:	2300      	movs	r3, #0
 8019f08:	f04f 32ff 	mov.w	r2, #4294967295
 8019f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f10:	f10a 0a01 	add.w	sl, sl, #1
 8019f14:	9304      	str	r3, [sp, #16]
 8019f16:	9307      	str	r3, [sp, #28]
 8019f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8019f1e:	4654      	mov	r4, sl
 8019f20:	2205      	movs	r2, #5
 8019f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f26:	4858      	ldr	r0, [pc, #352]	; (801a088 <_vfiprintf_r+0x24c>)
 8019f28:	f7e6 f92a 	bl	8000180 <memchr>
 8019f2c:	9a04      	ldr	r2, [sp, #16]
 8019f2e:	b9d8      	cbnz	r0, 8019f68 <_vfiprintf_r+0x12c>
 8019f30:	06d1      	lsls	r1, r2, #27
 8019f32:	bf44      	itt	mi
 8019f34:	2320      	movmi	r3, #32
 8019f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f3a:	0713      	lsls	r3, r2, #28
 8019f3c:	bf44      	itt	mi
 8019f3e:	232b      	movmi	r3, #43	; 0x2b
 8019f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f44:	f89a 3000 	ldrb.w	r3, [sl]
 8019f48:	2b2a      	cmp	r3, #42	; 0x2a
 8019f4a:	d015      	beq.n	8019f78 <_vfiprintf_r+0x13c>
 8019f4c:	9a07      	ldr	r2, [sp, #28]
 8019f4e:	4654      	mov	r4, sl
 8019f50:	2000      	movs	r0, #0
 8019f52:	f04f 0c0a 	mov.w	ip, #10
 8019f56:	4621      	mov	r1, r4
 8019f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f5c:	3b30      	subs	r3, #48	; 0x30
 8019f5e:	2b09      	cmp	r3, #9
 8019f60:	d94e      	bls.n	801a000 <_vfiprintf_r+0x1c4>
 8019f62:	b1b0      	cbz	r0, 8019f92 <_vfiprintf_r+0x156>
 8019f64:	9207      	str	r2, [sp, #28]
 8019f66:	e014      	b.n	8019f92 <_vfiprintf_r+0x156>
 8019f68:	eba0 0308 	sub.w	r3, r0, r8
 8019f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8019f70:	4313      	orrs	r3, r2
 8019f72:	9304      	str	r3, [sp, #16]
 8019f74:	46a2      	mov	sl, r4
 8019f76:	e7d2      	b.n	8019f1e <_vfiprintf_r+0xe2>
 8019f78:	9b03      	ldr	r3, [sp, #12]
 8019f7a:	1d19      	adds	r1, r3, #4
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	9103      	str	r1, [sp, #12]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	bfbb      	ittet	lt
 8019f84:	425b      	neglt	r3, r3
 8019f86:	f042 0202 	orrlt.w	r2, r2, #2
 8019f8a:	9307      	strge	r3, [sp, #28]
 8019f8c:	9307      	strlt	r3, [sp, #28]
 8019f8e:	bfb8      	it	lt
 8019f90:	9204      	strlt	r2, [sp, #16]
 8019f92:	7823      	ldrb	r3, [r4, #0]
 8019f94:	2b2e      	cmp	r3, #46	; 0x2e
 8019f96:	d10c      	bne.n	8019fb2 <_vfiprintf_r+0x176>
 8019f98:	7863      	ldrb	r3, [r4, #1]
 8019f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8019f9c:	d135      	bne.n	801a00a <_vfiprintf_r+0x1ce>
 8019f9e:	9b03      	ldr	r3, [sp, #12]
 8019fa0:	1d1a      	adds	r2, r3, #4
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	9203      	str	r2, [sp, #12]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	bfb8      	it	lt
 8019faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fae:	3402      	adds	r4, #2
 8019fb0:	9305      	str	r3, [sp, #20]
 8019fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a098 <_vfiprintf_r+0x25c>
 8019fb6:	7821      	ldrb	r1, [r4, #0]
 8019fb8:	2203      	movs	r2, #3
 8019fba:	4650      	mov	r0, sl
 8019fbc:	f7e6 f8e0 	bl	8000180 <memchr>
 8019fc0:	b140      	cbz	r0, 8019fd4 <_vfiprintf_r+0x198>
 8019fc2:	2340      	movs	r3, #64	; 0x40
 8019fc4:	eba0 000a 	sub.w	r0, r0, sl
 8019fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8019fcc:	9b04      	ldr	r3, [sp, #16]
 8019fce:	4303      	orrs	r3, r0
 8019fd0:	3401      	adds	r4, #1
 8019fd2:	9304      	str	r3, [sp, #16]
 8019fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fd8:	482c      	ldr	r0, [pc, #176]	; (801a08c <_vfiprintf_r+0x250>)
 8019fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019fde:	2206      	movs	r2, #6
 8019fe0:	f7e6 f8ce 	bl	8000180 <memchr>
 8019fe4:	2800      	cmp	r0, #0
 8019fe6:	d03f      	beq.n	801a068 <_vfiprintf_r+0x22c>
 8019fe8:	4b29      	ldr	r3, [pc, #164]	; (801a090 <_vfiprintf_r+0x254>)
 8019fea:	bb1b      	cbnz	r3, 801a034 <_vfiprintf_r+0x1f8>
 8019fec:	9b03      	ldr	r3, [sp, #12]
 8019fee:	3307      	adds	r3, #7
 8019ff0:	f023 0307 	bic.w	r3, r3, #7
 8019ff4:	3308      	adds	r3, #8
 8019ff6:	9303      	str	r3, [sp, #12]
 8019ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ffa:	443b      	add	r3, r7
 8019ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8019ffe:	e767      	b.n	8019ed0 <_vfiprintf_r+0x94>
 801a000:	fb0c 3202 	mla	r2, ip, r2, r3
 801a004:	460c      	mov	r4, r1
 801a006:	2001      	movs	r0, #1
 801a008:	e7a5      	b.n	8019f56 <_vfiprintf_r+0x11a>
 801a00a:	2300      	movs	r3, #0
 801a00c:	3401      	adds	r4, #1
 801a00e:	9305      	str	r3, [sp, #20]
 801a010:	4619      	mov	r1, r3
 801a012:	f04f 0c0a 	mov.w	ip, #10
 801a016:	4620      	mov	r0, r4
 801a018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a01c:	3a30      	subs	r2, #48	; 0x30
 801a01e:	2a09      	cmp	r2, #9
 801a020:	d903      	bls.n	801a02a <_vfiprintf_r+0x1ee>
 801a022:	2b00      	cmp	r3, #0
 801a024:	d0c5      	beq.n	8019fb2 <_vfiprintf_r+0x176>
 801a026:	9105      	str	r1, [sp, #20]
 801a028:	e7c3      	b.n	8019fb2 <_vfiprintf_r+0x176>
 801a02a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a02e:	4604      	mov	r4, r0
 801a030:	2301      	movs	r3, #1
 801a032:	e7f0      	b.n	801a016 <_vfiprintf_r+0x1da>
 801a034:	ab03      	add	r3, sp, #12
 801a036:	9300      	str	r3, [sp, #0]
 801a038:	462a      	mov	r2, r5
 801a03a:	4b16      	ldr	r3, [pc, #88]	; (801a094 <_vfiprintf_r+0x258>)
 801a03c:	a904      	add	r1, sp, #16
 801a03e:	4630      	mov	r0, r6
 801a040:	f3af 8000 	nop.w
 801a044:	4607      	mov	r7, r0
 801a046:	1c78      	adds	r0, r7, #1
 801a048:	d1d6      	bne.n	8019ff8 <_vfiprintf_r+0x1bc>
 801a04a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a04c:	07d9      	lsls	r1, r3, #31
 801a04e:	d405      	bmi.n	801a05c <_vfiprintf_r+0x220>
 801a050:	89ab      	ldrh	r3, [r5, #12]
 801a052:	059a      	lsls	r2, r3, #22
 801a054:	d402      	bmi.n	801a05c <_vfiprintf_r+0x220>
 801a056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a058:	f7ff fd7f 	bl	8019b5a <__retarget_lock_release_recursive>
 801a05c:	89ab      	ldrh	r3, [r5, #12]
 801a05e:	065b      	lsls	r3, r3, #25
 801a060:	f53f af12 	bmi.w	8019e88 <_vfiprintf_r+0x4c>
 801a064:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a066:	e711      	b.n	8019e8c <_vfiprintf_r+0x50>
 801a068:	ab03      	add	r3, sp, #12
 801a06a:	9300      	str	r3, [sp, #0]
 801a06c:	462a      	mov	r2, r5
 801a06e:	4b09      	ldr	r3, [pc, #36]	; (801a094 <_vfiprintf_r+0x258>)
 801a070:	a904      	add	r1, sp, #16
 801a072:	4630      	mov	r0, r6
 801a074:	f000 f880 	bl	801a178 <_printf_i>
 801a078:	e7e4      	b.n	801a044 <_vfiprintf_r+0x208>
 801a07a:	bf00      	nop
 801a07c:	0801a7f8 	.word	0x0801a7f8
 801a080:	0801a818 	.word	0x0801a818
 801a084:	0801a7d8 	.word	0x0801a7d8
 801a088:	0801a838 	.word	0x0801a838
 801a08c:	0801a842 	.word	0x0801a842
 801a090:	00000000 	.word	0x00000000
 801a094:	08019e17 	.word	0x08019e17
 801a098:	0801a83e 	.word	0x0801a83e

0801a09c <_printf_common>:
 801a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0a0:	4616      	mov	r6, r2
 801a0a2:	4699      	mov	r9, r3
 801a0a4:	688a      	ldr	r2, [r1, #8]
 801a0a6:	690b      	ldr	r3, [r1, #16]
 801a0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	bfb8      	it	lt
 801a0b0:	4613      	movlt	r3, r2
 801a0b2:	6033      	str	r3, [r6, #0]
 801a0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a0b8:	4607      	mov	r7, r0
 801a0ba:	460c      	mov	r4, r1
 801a0bc:	b10a      	cbz	r2, 801a0c2 <_printf_common+0x26>
 801a0be:	3301      	adds	r3, #1
 801a0c0:	6033      	str	r3, [r6, #0]
 801a0c2:	6823      	ldr	r3, [r4, #0]
 801a0c4:	0699      	lsls	r1, r3, #26
 801a0c6:	bf42      	ittt	mi
 801a0c8:	6833      	ldrmi	r3, [r6, #0]
 801a0ca:	3302      	addmi	r3, #2
 801a0cc:	6033      	strmi	r3, [r6, #0]
 801a0ce:	6825      	ldr	r5, [r4, #0]
 801a0d0:	f015 0506 	ands.w	r5, r5, #6
 801a0d4:	d106      	bne.n	801a0e4 <_printf_common+0x48>
 801a0d6:	f104 0a19 	add.w	sl, r4, #25
 801a0da:	68e3      	ldr	r3, [r4, #12]
 801a0dc:	6832      	ldr	r2, [r6, #0]
 801a0de:	1a9b      	subs	r3, r3, r2
 801a0e0:	42ab      	cmp	r3, r5
 801a0e2:	dc26      	bgt.n	801a132 <_printf_common+0x96>
 801a0e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a0e8:	1e13      	subs	r3, r2, #0
 801a0ea:	6822      	ldr	r2, [r4, #0]
 801a0ec:	bf18      	it	ne
 801a0ee:	2301      	movne	r3, #1
 801a0f0:	0692      	lsls	r2, r2, #26
 801a0f2:	d42b      	bmi.n	801a14c <_printf_common+0xb0>
 801a0f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a0f8:	4649      	mov	r1, r9
 801a0fa:	4638      	mov	r0, r7
 801a0fc:	47c0      	blx	r8
 801a0fe:	3001      	adds	r0, #1
 801a100:	d01e      	beq.n	801a140 <_printf_common+0xa4>
 801a102:	6823      	ldr	r3, [r4, #0]
 801a104:	68e5      	ldr	r5, [r4, #12]
 801a106:	6832      	ldr	r2, [r6, #0]
 801a108:	f003 0306 	and.w	r3, r3, #6
 801a10c:	2b04      	cmp	r3, #4
 801a10e:	bf08      	it	eq
 801a110:	1aad      	subeq	r5, r5, r2
 801a112:	68a3      	ldr	r3, [r4, #8]
 801a114:	6922      	ldr	r2, [r4, #16]
 801a116:	bf0c      	ite	eq
 801a118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a11c:	2500      	movne	r5, #0
 801a11e:	4293      	cmp	r3, r2
 801a120:	bfc4      	itt	gt
 801a122:	1a9b      	subgt	r3, r3, r2
 801a124:	18ed      	addgt	r5, r5, r3
 801a126:	2600      	movs	r6, #0
 801a128:	341a      	adds	r4, #26
 801a12a:	42b5      	cmp	r5, r6
 801a12c:	d11a      	bne.n	801a164 <_printf_common+0xc8>
 801a12e:	2000      	movs	r0, #0
 801a130:	e008      	b.n	801a144 <_printf_common+0xa8>
 801a132:	2301      	movs	r3, #1
 801a134:	4652      	mov	r2, sl
 801a136:	4649      	mov	r1, r9
 801a138:	4638      	mov	r0, r7
 801a13a:	47c0      	blx	r8
 801a13c:	3001      	adds	r0, #1
 801a13e:	d103      	bne.n	801a148 <_printf_common+0xac>
 801a140:	f04f 30ff 	mov.w	r0, #4294967295
 801a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a148:	3501      	adds	r5, #1
 801a14a:	e7c6      	b.n	801a0da <_printf_common+0x3e>
 801a14c:	18e1      	adds	r1, r4, r3
 801a14e:	1c5a      	adds	r2, r3, #1
 801a150:	2030      	movs	r0, #48	; 0x30
 801a152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a156:	4422      	add	r2, r4
 801a158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a15c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a160:	3302      	adds	r3, #2
 801a162:	e7c7      	b.n	801a0f4 <_printf_common+0x58>
 801a164:	2301      	movs	r3, #1
 801a166:	4622      	mov	r2, r4
 801a168:	4649      	mov	r1, r9
 801a16a:	4638      	mov	r0, r7
 801a16c:	47c0      	blx	r8
 801a16e:	3001      	adds	r0, #1
 801a170:	d0e6      	beq.n	801a140 <_printf_common+0xa4>
 801a172:	3601      	adds	r6, #1
 801a174:	e7d9      	b.n	801a12a <_printf_common+0x8e>
	...

0801a178 <_printf_i>:
 801a178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a17c:	7e0f      	ldrb	r7, [r1, #24]
 801a17e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a180:	2f78      	cmp	r7, #120	; 0x78
 801a182:	4691      	mov	r9, r2
 801a184:	4680      	mov	r8, r0
 801a186:	460c      	mov	r4, r1
 801a188:	469a      	mov	sl, r3
 801a18a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a18e:	d807      	bhi.n	801a1a0 <_printf_i+0x28>
 801a190:	2f62      	cmp	r7, #98	; 0x62
 801a192:	d80a      	bhi.n	801a1aa <_printf_i+0x32>
 801a194:	2f00      	cmp	r7, #0
 801a196:	f000 80d8 	beq.w	801a34a <_printf_i+0x1d2>
 801a19a:	2f58      	cmp	r7, #88	; 0x58
 801a19c:	f000 80a3 	beq.w	801a2e6 <_printf_i+0x16e>
 801a1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a1a8:	e03a      	b.n	801a220 <_printf_i+0xa8>
 801a1aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a1ae:	2b15      	cmp	r3, #21
 801a1b0:	d8f6      	bhi.n	801a1a0 <_printf_i+0x28>
 801a1b2:	a101      	add	r1, pc, #4	; (adr r1, 801a1b8 <_printf_i+0x40>)
 801a1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a1b8:	0801a211 	.word	0x0801a211
 801a1bc:	0801a225 	.word	0x0801a225
 801a1c0:	0801a1a1 	.word	0x0801a1a1
 801a1c4:	0801a1a1 	.word	0x0801a1a1
 801a1c8:	0801a1a1 	.word	0x0801a1a1
 801a1cc:	0801a1a1 	.word	0x0801a1a1
 801a1d0:	0801a225 	.word	0x0801a225
 801a1d4:	0801a1a1 	.word	0x0801a1a1
 801a1d8:	0801a1a1 	.word	0x0801a1a1
 801a1dc:	0801a1a1 	.word	0x0801a1a1
 801a1e0:	0801a1a1 	.word	0x0801a1a1
 801a1e4:	0801a331 	.word	0x0801a331
 801a1e8:	0801a255 	.word	0x0801a255
 801a1ec:	0801a313 	.word	0x0801a313
 801a1f0:	0801a1a1 	.word	0x0801a1a1
 801a1f4:	0801a1a1 	.word	0x0801a1a1
 801a1f8:	0801a353 	.word	0x0801a353
 801a1fc:	0801a1a1 	.word	0x0801a1a1
 801a200:	0801a255 	.word	0x0801a255
 801a204:	0801a1a1 	.word	0x0801a1a1
 801a208:	0801a1a1 	.word	0x0801a1a1
 801a20c:	0801a31b 	.word	0x0801a31b
 801a210:	682b      	ldr	r3, [r5, #0]
 801a212:	1d1a      	adds	r2, r3, #4
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	602a      	str	r2, [r5, #0]
 801a218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a220:	2301      	movs	r3, #1
 801a222:	e0a3      	b.n	801a36c <_printf_i+0x1f4>
 801a224:	6820      	ldr	r0, [r4, #0]
 801a226:	6829      	ldr	r1, [r5, #0]
 801a228:	0606      	lsls	r6, r0, #24
 801a22a:	f101 0304 	add.w	r3, r1, #4
 801a22e:	d50a      	bpl.n	801a246 <_printf_i+0xce>
 801a230:	680e      	ldr	r6, [r1, #0]
 801a232:	602b      	str	r3, [r5, #0]
 801a234:	2e00      	cmp	r6, #0
 801a236:	da03      	bge.n	801a240 <_printf_i+0xc8>
 801a238:	232d      	movs	r3, #45	; 0x2d
 801a23a:	4276      	negs	r6, r6
 801a23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a240:	485e      	ldr	r0, [pc, #376]	; (801a3bc <_printf_i+0x244>)
 801a242:	230a      	movs	r3, #10
 801a244:	e019      	b.n	801a27a <_printf_i+0x102>
 801a246:	680e      	ldr	r6, [r1, #0]
 801a248:	602b      	str	r3, [r5, #0]
 801a24a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a24e:	bf18      	it	ne
 801a250:	b236      	sxthne	r6, r6
 801a252:	e7ef      	b.n	801a234 <_printf_i+0xbc>
 801a254:	682b      	ldr	r3, [r5, #0]
 801a256:	6820      	ldr	r0, [r4, #0]
 801a258:	1d19      	adds	r1, r3, #4
 801a25a:	6029      	str	r1, [r5, #0]
 801a25c:	0601      	lsls	r1, r0, #24
 801a25e:	d501      	bpl.n	801a264 <_printf_i+0xec>
 801a260:	681e      	ldr	r6, [r3, #0]
 801a262:	e002      	b.n	801a26a <_printf_i+0xf2>
 801a264:	0646      	lsls	r6, r0, #25
 801a266:	d5fb      	bpl.n	801a260 <_printf_i+0xe8>
 801a268:	881e      	ldrh	r6, [r3, #0]
 801a26a:	4854      	ldr	r0, [pc, #336]	; (801a3bc <_printf_i+0x244>)
 801a26c:	2f6f      	cmp	r7, #111	; 0x6f
 801a26e:	bf0c      	ite	eq
 801a270:	2308      	moveq	r3, #8
 801a272:	230a      	movne	r3, #10
 801a274:	2100      	movs	r1, #0
 801a276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a27a:	6865      	ldr	r5, [r4, #4]
 801a27c:	60a5      	str	r5, [r4, #8]
 801a27e:	2d00      	cmp	r5, #0
 801a280:	bfa2      	ittt	ge
 801a282:	6821      	ldrge	r1, [r4, #0]
 801a284:	f021 0104 	bicge.w	r1, r1, #4
 801a288:	6021      	strge	r1, [r4, #0]
 801a28a:	b90e      	cbnz	r6, 801a290 <_printf_i+0x118>
 801a28c:	2d00      	cmp	r5, #0
 801a28e:	d04d      	beq.n	801a32c <_printf_i+0x1b4>
 801a290:	4615      	mov	r5, r2
 801a292:	fbb6 f1f3 	udiv	r1, r6, r3
 801a296:	fb03 6711 	mls	r7, r3, r1, r6
 801a29a:	5dc7      	ldrb	r7, [r0, r7]
 801a29c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a2a0:	4637      	mov	r7, r6
 801a2a2:	42bb      	cmp	r3, r7
 801a2a4:	460e      	mov	r6, r1
 801a2a6:	d9f4      	bls.n	801a292 <_printf_i+0x11a>
 801a2a8:	2b08      	cmp	r3, #8
 801a2aa:	d10b      	bne.n	801a2c4 <_printf_i+0x14c>
 801a2ac:	6823      	ldr	r3, [r4, #0]
 801a2ae:	07de      	lsls	r6, r3, #31
 801a2b0:	d508      	bpl.n	801a2c4 <_printf_i+0x14c>
 801a2b2:	6923      	ldr	r3, [r4, #16]
 801a2b4:	6861      	ldr	r1, [r4, #4]
 801a2b6:	4299      	cmp	r1, r3
 801a2b8:	bfde      	ittt	le
 801a2ba:	2330      	movle	r3, #48	; 0x30
 801a2bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a2c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a2c4:	1b52      	subs	r2, r2, r5
 801a2c6:	6122      	str	r2, [r4, #16]
 801a2c8:	f8cd a000 	str.w	sl, [sp]
 801a2cc:	464b      	mov	r3, r9
 801a2ce:	aa03      	add	r2, sp, #12
 801a2d0:	4621      	mov	r1, r4
 801a2d2:	4640      	mov	r0, r8
 801a2d4:	f7ff fee2 	bl	801a09c <_printf_common>
 801a2d8:	3001      	adds	r0, #1
 801a2da:	d14c      	bne.n	801a376 <_printf_i+0x1fe>
 801a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a2e0:	b004      	add	sp, #16
 801a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2e6:	4835      	ldr	r0, [pc, #212]	; (801a3bc <_printf_i+0x244>)
 801a2e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a2ec:	6829      	ldr	r1, [r5, #0]
 801a2ee:	6823      	ldr	r3, [r4, #0]
 801a2f0:	f851 6b04 	ldr.w	r6, [r1], #4
 801a2f4:	6029      	str	r1, [r5, #0]
 801a2f6:	061d      	lsls	r5, r3, #24
 801a2f8:	d514      	bpl.n	801a324 <_printf_i+0x1ac>
 801a2fa:	07df      	lsls	r7, r3, #31
 801a2fc:	bf44      	itt	mi
 801a2fe:	f043 0320 	orrmi.w	r3, r3, #32
 801a302:	6023      	strmi	r3, [r4, #0]
 801a304:	b91e      	cbnz	r6, 801a30e <_printf_i+0x196>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	f023 0320 	bic.w	r3, r3, #32
 801a30c:	6023      	str	r3, [r4, #0]
 801a30e:	2310      	movs	r3, #16
 801a310:	e7b0      	b.n	801a274 <_printf_i+0xfc>
 801a312:	6823      	ldr	r3, [r4, #0]
 801a314:	f043 0320 	orr.w	r3, r3, #32
 801a318:	6023      	str	r3, [r4, #0]
 801a31a:	2378      	movs	r3, #120	; 0x78
 801a31c:	4828      	ldr	r0, [pc, #160]	; (801a3c0 <_printf_i+0x248>)
 801a31e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a322:	e7e3      	b.n	801a2ec <_printf_i+0x174>
 801a324:	0659      	lsls	r1, r3, #25
 801a326:	bf48      	it	mi
 801a328:	b2b6      	uxthmi	r6, r6
 801a32a:	e7e6      	b.n	801a2fa <_printf_i+0x182>
 801a32c:	4615      	mov	r5, r2
 801a32e:	e7bb      	b.n	801a2a8 <_printf_i+0x130>
 801a330:	682b      	ldr	r3, [r5, #0]
 801a332:	6826      	ldr	r6, [r4, #0]
 801a334:	6961      	ldr	r1, [r4, #20]
 801a336:	1d18      	adds	r0, r3, #4
 801a338:	6028      	str	r0, [r5, #0]
 801a33a:	0635      	lsls	r5, r6, #24
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	d501      	bpl.n	801a344 <_printf_i+0x1cc>
 801a340:	6019      	str	r1, [r3, #0]
 801a342:	e002      	b.n	801a34a <_printf_i+0x1d2>
 801a344:	0670      	lsls	r0, r6, #25
 801a346:	d5fb      	bpl.n	801a340 <_printf_i+0x1c8>
 801a348:	8019      	strh	r1, [r3, #0]
 801a34a:	2300      	movs	r3, #0
 801a34c:	6123      	str	r3, [r4, #16]
 801a34e:	4615      	mov	r5, r2
 801a350:	e7ba      	b.n	801a2c8 <_printf_i+0x150>
 801a352:	682b      	ldr	r3, [r5, #0]
 801a354:	1d1a      	adds	r2, r3, #4
 801a356:	602a      	str	r2, [r5, #0]
 801a358:	681d      	ldr	r5, [r3, #0]
 801a35a:	6862      	ldr	r2, [r4, #4]
 801a35c:	2100      	movs	r1, #0
 801a35e:	4628      	mov	r0, r5
 801a360:	f7e5 ff0e 	bl	8000180 <memchr>
 801a364:	b108      	cbz	r0, 801a36a <_printf_i+0x1f2>
 801a366:	1b40      	subs	r0, r0, r5
 801a368:	6060      	str	r0, [r4, #4]
 801a36a:	6863      	ldr	r3, [r4, #4]
 801a36c:	6123      	str	r3, [r4, #16]
 801a36e:	2300      	movs	r3, #0
 801a370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a374:	e7a8      	b.n	801a2c8 <_printf_i+0x150>
 801a376:	6923      	ldr	r3, [r4, #16]
 801a378:	462a      	mov	r2, r5
 801a37a:	4649      	mov	r1, r9
 801a37c:	4640      	mov	r0, r8
 801a37e:	47d0      	blx	sl
 801a380:	3001      	adds	r0, #1
 801a382:	d0ab      	beq.n	801a2dc <_printf_i+0x164>
 801a384:	6823      	ldr	r3, [r4, #0]
 801a386:	079b      	lsls	r3, r3, #30
 801a388:	d413      	bmi.n	801a3b2 <_printf_i+0x23a>
 801a38a:	68e0      	ldr	r0, [r4, #12]
 801a38c:	9b03      	ldr	r3, [sp, #12]
 801a38e:	4298      	cmp	r0, r3
 801a390:	bfb8      	it	lt
 801a392:	4618      	movlt	r0, r3
 801a394:	e7a4      	b.n	801a2e0 <_printf_i+0x168>
 801a396:	2301      	movs	r3, #1
 801a398:	4632      	mov	r2, r6
 801a39a:	4649      	mov	r1, r9
 801a39c:	4640      	mov	r0, r8
 801a39e:	47d0      	blx	sl
 801a3a0:	3001      	adds	r0, #1
 801a3a2:	d09b      	beq.n	801a2dc <_printf_i+0x164>
 801a3a4:	3501      	adds	r5, #1
 801a3a6:	68e3      	ldr	r3, [r4, #12]
 801a3a8:	9903      	ldr	r1, [sp, #12]
 801a3aa:	1a5b      	subs	r3, r3, r1
 801a3ac:	42ab      	cmp	r3, r5
 801a3ae:	dcf2      	bgt.n	801a396 <_printf_i+0x21e>
 801a3b0:	e7eb      	b.n	801a38a <_printf_i+0x212>
 801a3b2:	2500      	movs	r5, #0
 801a3b4:	f104 0619 	add.w	r6, r4, #25
 801a3b8:	e7f5      	b.n	801a3a6 <_printf_i+0x22e>
 801a3ba:	bf00      	nop
 801a3bc:	0801a849 	.word	0x0801a849
 801a3c0:	0801a85a 	.word	0x0801a85a

0801a3c4 <_putc_r>:
 801a3c4:	b570      	push	{r4, r5, r6, lr}
 801a3c6:	460d      	mov	r5, r1
 801a3c8:	4614      	mov	r4, r2
 801a3ca:	4606      	mov	r6, r0
 801a3cc:	b118      	cbz	r0, 801a3d6 <_putc_r+0x12>
 801a3ce:	6983      	ldr	r3, [r0, #24]
 801a3d0:	b90b      	cbnz	r3, 801a3d6 <_putc_r+0x12>
 801a3d2:	f7ff fb23 	bl	8019a1c <__sinit>
 801a3d6:	4b1c      	ldr	r3, [pc, #112]	; (801a448 <_putc_r+0x84>)
 801a3d8:	429c      	cmp	r4, r3
 801a3da:	d124      	bne.n	801a426 <_putc_r+0x62>
 801a3dc:	6874      	ldr	r4, [r6, #4]
 801a3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3e0:	07d8      	lsls	r0, r3, #31
 801a3e2:	d405      	bmi.n	801a3f0 <_putc_r+0x2c>
 801a3e4:	89a3      	ldrh	r3, [r4, #12]
 801a3e6:	0599      	lsls	r1, r3, #22
 801a3e8:	d402      	bmi.n	801a3f0 <_putc_r+0x2c>
 801a3ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3ec:	f7ff fbb4 	bl	8019b58 <__retarget_lock_acquire_recursive>
 801a3f0:	68a3      	ldr	r3, [r4, #8]
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	60a3      	str	r3, [r4, #8]
 801a3f8:	da05      	bge.n	801a406 <_putc_r+0x42>
 801a3fa:	69a2      	ldr	r2, [r4, #24]
 801a3fc:	4293      	cmp	r3, r2
 801a3fe:	db1c      	blt.n	801a43a <_putc_r+0x76>
 801a400:	b2eb      	uxtb	r3, r5
 801a402:	2b0a      	cmp	r3, #10
 801a404:	d019      	beq.n	801a43a <_putc_r+0x76>
 801a406:	6823      	ldr	r3, [r4, #0]
 801a408:	1c5a      	adds	r2, r3, #1
 801a40a:	6022      	str	r2, [r4, #0]
 801a40c:	701d      	strb	r5, [r3, #0]
 801a40e:	b2ed      	uxtb	r5, r5
 801a410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a412:	07da      	lsls	r2, r3, #31
 801a414:	d405      	bmi.n	801a422 <_putc_r+0x5e>
 801a416:	89a3      	ldrh	r3, [r4, #12]
 801a418:	059b      	lsls	r3, r3, #22
 801a41a:	d402      	bmi.n	801a422 <_putc_r+0x5e>
 801a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a41e:	f7ff fb9c 	bl	8019b5a <__retarget_lock_release_recursive>
 801a422:	4628      	mov	r0, r5
 801a424:	bd70      	pop	{r4, r5, r6, pc}
 801a426:	4b09      	ldr	r3, [pc, #36]	; (801a44c <_putc_r+0x88>)
 801a428:	429c      	cmp	r4, r3
 801a42a:	d101      	bne.n	801a430 <_putc_r+0x6c>
 801a42c:	68b4      	ldr	r4, [r6, #8]
 801a42e:	e7d6      	b.n	801a3de <_putc_r+0x1a>
 801a430:	4b07      	ldr	r3, [pc, #28]	; (801a450 <_putc_r+0x8c>)
 801a432:	429c      	cmp	r4, r3
 801a434:	bf08      	it	eq
 801a436:	68f4      	ldreq	r4, [r6, #12]
 801a438:	e7d1      	b.n	801a3de <_putc_r+0x1a>
 801a43a:	4629      	mov	r1, r5
 801a43c:	4622      	mov	r2, r4
 801a43e:	4630      	mov	r0, r6
 801a440:	f7ff f912 	bl	8019668 <__swbuf_r>
 801a444:	4605      	mov	r5, r0
 801a446:	e7e3      	b.n	801a410 <_putc_r+0x4c>
 801a448:	0801a7f8 	.word	0x0801a7f8
 801a44c:	0801a818 	.word	0x0801a818
 801a450:	0801a7d8 	.word	0x0801a7d8

0801a454 <_sbrk_r>:
 801a454:	b538      	push	{r3, r4, r5, lr}
 801a456:	4d06      	ldr	r5, [pc, #24]	; (801a470 <_sbrk_r+0x1c>)
 801a458:	2300      	movs	r3, #0
 801a45a:	4604      	mov	r4, r0
 801a45c:	4608      	mov	r0, r1
 801a45e:	602b      	str	r3, [r5, #0]
 801a460:	f7e6 feea 	bl	8001238 <_sbrk>
 801a464:	1c43      	adds	r3, r0, #1
 801a466:	d102      	bne.n	801a46e <_sbrk_r+0x1a>
 801a468:	682b      	ldr	r3, [r5, #0]
 801a46a:	b103      	cbz	r3, 801a46e <_sbrk_r+0x1a>
 801a46c:	6023      	str	r3, [r4, #0]
 801a46e:	bd38      	pop	{r3, r4, r5, pc}
 801a470:	20008628 	.word	0x20008628

0801a474 <__sread>:
 801a474:	b510      	push	{r4, lr}
 801a476:	460c      	mov	r4, r1
 801a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a47c:	f000 f8a0 	bl	801a5c0 <_read_r>
 801a480:	2800      	cmp	r0, #0
 801a482:	bfab      	itete	ge
 801a484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a486:	89a3      	ldrhlt	r3, [r4, #12]
 801a488:	181b      	addge	r3, r3, r0
 801a48a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a48e:	bfac      	ite	ge
 801a490:	6563      	strge	r3, [r4, #84]	; 0x54
 801a492:	81a3      	strhlt	r3, [r4, #12]
 801a494:	bd10      	pop	{r4, pc}

0801a496 <__swrite>:
 801a496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a49a:	461f      	mov	r7, r3
 801a49c:	898b      	ldrh	r3, [r1, #12]
 801a49e:	05db      	lsls	r3, r3, #23
 801a4a0:	4605      	mov	r5, r0
 801a4a2:	460c      	mov	r4, r1
 801a4a4:	4616      	mov	r6, r2
 801a4a6:	d505      	bpl.n	801a4b4 <__swrite+0x1e>
 801a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ac:	2302      	movs	r3, #2
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	f000 f868 	bl	801a584 <_lseek_r>
 801a4b4:	89a3      	ldrh	r3, [r4, #12]
 801a4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4be:	81a3      	strh	r3, [r4, #12]
 801a4c0:	4632      	mov	r2, r6
 801a4c2:	463b      	mov	r3, r7
 801a4c4:	4628      	mov	r0, r5
 801a4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4ca:	f000 b817 	b.w	801a4fc <_write_r>

0801a4ce <__sseek>:
 801a4ce:	b510      	push	{r4, lr}
 801a4d0:	460c      	mov	r4, r1
 801a4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4d6:	f000 f855 	bl	801a584 <_lseek_r>
 801a4da:	1c43      	adds	r3, r0, #1
 801a4dc:	89a3      	ldrh	r3, [r4, #12]
 801a4de:	bf15      	itete	ne
 801a4e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a4ea:	81a3      	strheq	r3, [r4, #12]
 801a4ec:	bf18      	it	ne
 801a4ee:	81a3      	strhne	r3, [r4, #12]
 801a4f0:	bd10      	pop	{r4, pc}

0801a4f2 <__sclose>:
 801a4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4f6:	f000 b813 	b.w	801a520 <_close_r>
	...

0801a4fc <_write_r>:
 801a4fc:	b538      	push	{r3, r4, r5, lr}
 801a4fe:	4d07      	ldr	r5, [pc, #28]	; (801a51c <_write_r+0x20>)
 801a500:	4604      	mov	r4, r0
 801a502:	4608      	mov	r0, r1
 801a504:	4611      	mov	r1, r2
 801a506:	2200      	movs	r2, #0
 801a508:	602a      	str	r2, [r5, #0]
 801a50a:	461a      	mov	r2, r3
 801a50c:	f7e6 f976 	bl	80007fc <_write>
 801a510:	1c43      	adds	r3, r0, #1
 801a512:	d102      	bne.n	801a51a <_write_r+0x1e>
 801a514:	682b      	ldr	r3, [r5, #0]
 801a516:	b103      	cbz	r3, 801a51a <_write_r+0x1e>
 801a518:	6023      	str	r3, [r4, #0]
 801a51a:	bd38      	pop	{r3, r4, r5, pc}
 801a51c:	20008628 	.word	0x20008628

0801a520 <_close_r>:
 801a520:	b538      	push	{r3, r4, r5, lr}
 801a522:	4d06      	ldr	r5, [pc, #24]	; (801a53c <_close_r+0x1c>)
 801a524:	2300      	movs	r3, #0
 801a526:	4604      	mov	r4, r0
 801a528:	4608      	mov	r0, r1
 801a52a:	602b      	str	r3, [r5, #0]
 801a52c:	f7e6 fe4f 	bl	80011ce <_close>
 801a530:	1c43      	adds	r3, r0, #1
 801a532:	d102      	bne.n	801a53a <_close_r+0x1a>
 801a534:	682b      	ldr	r3, [r5, #0]
 801a536:	b103      	cbz	r3, 801a53a <_close_r+0x1a>
 801a538:	6023      	str	r3, [r4, #0]
 801a53a:	bd38      	pop	{r3, r4, r5, pc}
 801a53c:	20008628 	.word	0x20008628

0801a540 <_fstat_r>:
 801a540:	b538      	push	{r3, r4, r5, lr}
 801a542:	4d07      	ldr	r5, [pc, #28]	; (801a560 <_fstat_r+0x20>)
 801a544:	2300      	movs	r3, #0
 801a546:	4604      	mov	r4, r0
 801a548:	4608      	mov	r0, r1
 801a54a:	4611      	mov	r1, r2
 801a54c:	602b      	str	r3, [r5, #0]
 801a54e:	f7e6 fe4a 	bl	80011e6 <_fstat>
 801a552:	1c43      	adds	r3, r0, #1
 801a554:	d102      	bne.n	801a55c <_fstat_r+0x1c>
 801a556:	682b      	ldr	r3, [r5, #0]
 801a558:	b103      	cbz	r3, 801a55c <_fstat_r+0x1c>
 801a55a:	6023      	str	r3, [r4, #0]
 801a55c:	bd38      	pop	{r3, r4, r5, pc}
 801a55e:	bf00      	nop
 801a560:	20008628 	.word	0x20008628

0801a564 <_isatty_r>:
 801a564:	b538      	push	{r3, r4, r5, lr}
 801a566:	4d06      	ldr	r5, [pc, #24]	; (801a580 <_isatty_r+0x1c>)
 801a568:	2300      	movs	r3, #0
 801a56a:	4604      	mov	r4, r0
 801a56c:	4608      	mov	r0, r1
 801a56e:	602b      	str	r3, [r5, #0]
 801a570:	f7e6 fe49 	bl	8001206 <_isatty>
 801a574:	1c43      	adds	r3, r0, #1
 801a576:	d102      	bne.n	801a57e <_isatty_r+0x1a>
 801a578:	682b      	ldr	r3, [r5, #0]
 801a57a:	b103      	cbz	r3, 801a57e <_isatty_r+0x1a>
 801a57c:	6023      	str	r3, [r4, #0]
 801a57e:	bd38      	pop	{r3, r4, r5, pc}
 801a580:	20008628 	.word	0x20008628

0801a584 <_lseek_r>:
 801a584:	b538      	push	{r3, r4, r5, lr}
 801a586:	4d07      	ldr	r5, [pc, #28]	; (801a5a4 <_lseek_r+0x20>)
 801a588:	4604      	mov	r4, r0
 801a58a:	4608      	mov	r0, r1
 801a58c:	4611      	mov	r1, r2
 801a58e:	2200      	movs	r2, #0
 801a590:	602a      	str	r2, [r5, #0]
 801a592:	461a      	mov	r2, r3
 801a594:	f7e6 fe42 	bl	800121c <_lseek>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_lseek_r+0x1e>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_lseek_r+0x1e>
 801a5a0:	6023      	str	r3, [r4, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	20008628 	.word	0x20008628

0801a5a8 <__malloc_lock>:
 801a5a8:	4801      	ldr	r0, [pc, #4]	; (801a5b0 <__malloc_lock+0x8>)
 801a5aa:	f7ff bad5 	b.w	8019b58 <__retarget_lock_acquire_recursive>
 801a5ae:	bf00      	nop
 801a5b0:	2000861c 	.word	0x2000861c

0801a5b4 <__malloc_unlock>:
 801a5b4:	4801      	ldr	r0, [pc, #4]	; (801a5bc <__malloc_unlock+0x8>)
 801a5b6:	f7ff bad0 	b.w	8019b5a <__retarget_lock_release_recursive>
 801a5ba:	bf00      	nop
 801a5bc:	2000861c 	.word	0x2000861c

0801a5c0 <_read_r>:
 801a5c0:	b538      	push	{r3, r4, r5, lr}
 801a5c2:	4d07      	ldr	r5, [pc, #28]	; (801a5e0 <_read_r+0x20>)
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	4608      	mov	r0, r1
 801a5c8:	4611      	mov	r1, r2
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	602a      	str	r2, [r5, #0]
 801a5ce:	461a      	mov	r2, r3
 801a5d0:	f7e6 fde0 	bl	8001194 <_read>
 801a5d4:	1c43      	adds	r3, r0, #1
 801a5d6:	d102      	bne.n	801a5de <_read_r+0x1e>
 801a5d8:	682b      	ldr	r3, [r5, #0]
 801a5da:	b103      	cbz	r3, 801a5de <_read_r+0x1e>
 801a5dc:	6023      	str	r3, [r4, #0]
 801a5de:	bd38      	pop	{r3, r4, r5, pc}
 801a5e0:	20008628 	.word	0x20008628

0801a5e4 <_init>:
 801a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e6:	bf00      	nop
 801a5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ea:	bc08      	pop	{r3}
 801a5ec:	469e      	mov	lr, r3
 801a5ee:	4770      	bx	lr

0801a5f0 <_fini>:
 801a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f2:	bf00      	nop
 801a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5f6:	bc08      	pop	{r3}
 801a5f8:	469e      	mov	lr, r3
 801a5fa:	4770      	bx	lr
