
Test_Tof_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a638  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0801a778  0801a778  0002a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801abe0  0801abe0  0002abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801abe8  0801abe8  0002abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801abec  0801abec  0002abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000008  0801abf0  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000855c  200000e0  0801acc4  000300e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000863c  0801acc4  0003863c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064d45  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d42  00000000  00000000  00094e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003300  00000000  00000000  0009bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003008  00000000  00000000  0009ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f572  00000000  00000000  000a1ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b616  00000000  00000000  000d1412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011a9e9  00000000  00000000  0010ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00227411  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e474  00000000  00000000  00227464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a760 	.word	0x0801a760

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0801a760 	.word	0x0801a760

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 80005c8:	f000 f82a 	bl	8000620 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 80005cc:	f000 f844 	bl	8000658 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 80005d0:	f000 f85e 	bl	8000690 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n\n");
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <VL_TOF_Process+0x30>)
 80005de:	f019 f8e5 	bl	80197ac <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 80005e2:	f000 f871 	bl	80006c8 <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n\n");
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <VL_TOF_Process+0x34>)
 80005e8:	f019 f8e0 	bl	80197ac <puts>

  printf("\n ---- start TOF Right ---- \n\n");
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <VL_TOF_Process+0x38>)
 80005ee:	f019 f8dd 	bl	80197ac <puts>
  //VL_53L1A2_SimpleRanging_Process_R();
  printf("\n ---- end TOF Right ---- \n\n");
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <VL_TOF_Process+0x3c>)
 80005f4:	f019 f8da 	bl	80197ac <puts>

  printf("\n ---- start TOF Left ---- \n\n");
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <VL_TOF_Process+0x40>)
 80005fa:	f019 f8d7 	bl	80197ac <puts>
  //VL_53L1A2_SimpleRanging_Process_L();
  printf("\n ---- end TOF Left ---- \n\n");
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <VL_TOF_Process+0x44>)
 8000600:	f019 f8d4 	bl	80197ac <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	0801a778 	.word	0x0801a778
 800060c:	0801a798 	.word	0x0801a798
 8000610:	0801a7b8 	.word	0x0801a7b8
 8000614:	0801a7d8 	.word	0x0801a7d8
 8000618:	0801a7f4 	.word	0x0801a7f4
 800061c:	0801a814 	.word	0x0801a814

08000620 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 8000624:	2001      	movs	r0, #1
 8000626:	f001 f945 	bl	80018b4 <VL53L1A2_RANGING_SENSOR_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 800062e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 800063a:	f019 f8b7 	bl	80197ac <puts>
    while(1);
 800063e:	e7fe      	b.n	800063e <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  printf(" ****** Initialization TOF CENTER OK ****** \n");
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 8000642:	f019 f8b3 	bl	80197ac <puts>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000110 	.word	0x20000110
 8000650:	0801a830 	.word	0x0801a830
 8000654:	0801a854 	.word	0x0801a854

08000658 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 800065c:	2002      	movs	r0, #2
 800065e:	f001 f929 	bl	80018b4 <VL53L1A2_RANGING_SENSOR_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 8000666:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <VL_53L1A2_SimpleRanging_Init_R+0x30>)
 8000672:	f019 f89b 	bl	80197ac <puts>
    while(1);
 8000676:	e7fe      	b.n	8000676 <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }
  printf(" ****** Initialization TOF RIGHT OK ****** \n");
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <VL_53L1A2_SimpleRanging_Init_R+0x34>)
 800067a:	f019 f897 	bl	80197ac <puts>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000114 	.word	0x20000114
 8000688:	0801a830 	.word	0x0801a830
 800068c:	0801a884 	.word	0x0801a884

08000690 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 8000694:	2000      	movs	r0, #0
 8000696:	f001 f90d 	bl	80018b4 <VL53L1A2_RANGING_SENSOR_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 800069e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <VL_53L1A2_SimpleRanging_Init_L+0x30>)
 80006aa:	f019 f87f 	bl	80197ac <puts>
    while(1);
 80006ae:	e7fe      	b.n	80006ae <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }
  printf(" ****** Initialization TOF LEFT OK ****** \n");
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <VL_53L1A2_SimpleRanging_Init_L+0x34>)
 80006b2:	f019 f87b 	bl	80197ac <puts>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000118 	.word	0x20000118
 80006c0:	0801a830 	.word	0x0801a830
 80006c4:	0801a8b0 	.word	0x0801a8b0

080006c8 <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 80006ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f913 	bl	8001900 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006e2:	221e      	movs	r2, #30
 80006e4:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 80006f8:	491e      	ldr	r1, [pc, #120]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 f928 	bl	8001950 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000700:	2101      	movs	r1, #1
 8000702:	2001      	movs	r0, #1
 8000704:	f001 f974 	bl	80019f0 <VL53L1A2_RANGING_SENSOR_Start>
 8000708:	4603      	mov	r3, r0
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800070c:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8000718:	f019 f848 	bl	80197ac <puts>
    while(1);
 800071c:	e7fe      	b.n	800071c <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800071e:	2301      	movs	r3, #1
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000722:	e01a      	b.n	800075a <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	2001      	movs	r0, #1
 800072a:	f001 f939 	bl	80019a0 <VL53L1A2_RANGING_SENSOR_GetDistance>
 800072e:	4603      	mov	r3, r0
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000732:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d107      	bne.n	800074c <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 800073c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8000740:	f018 ff98 	bl	8019674 <iprintf>
      print_result(&Result_Center);
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f81c 	bl	8000784 <print_result>
    }

    HAL_Delay(1500);
 800074c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000750:	f014 febe 	bl	80154d0 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8000754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000756:	3301      	adds	r3, #1
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800075a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075c:	2b05      	cmp	r3, #5
 800075e:	dde1      	ble.n	8000724 <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8000760:	2001      	movs	r0, #1
 8000762:	f001 f96d 	bl	8001a40 <VL53L1A2_RANGING_SENSOR_Stop>
 8000766:	4603      	mov	r3, r0
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000fc 	.word	0x200000fc
 8000778:	20000110 	.word	0x20000110
 800077c:	0801a8dc 	.word	0x0801a8dc
 8000780:	0801a908 	.word	0x0801a908

08000784 <print_result>:
  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e03f      	b.n	8000812 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	3304      	adds	r3, #4
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <print_result+0xa4>)
 80007a8:	f018 ff64 	bl	8019674 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]
 80007b0:	e020      	b.n	80007f4 <print_result+0x70>
    {
      printf("\n |---> ");
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <print_result+0xa8>)
 80007b4:	f018 ff5e 	bl	8019674 <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	7bb8      	ldrb	r0, [r7, #14]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	4413      	add	r3, r2
 80007c4:	4403      	add	r3, r0
 80007c6:	3304      	adds	r3, #4
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007ce:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	7bb8      	ldrb	r0, [r7, #14]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	4403      	add	r3, r0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007e4:	461a      	mov	r2, r3
 80007e6:	4621      	mov	r1, r4
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <print_result+0xac>)
 80007ea:	f018 ff43 	bl	8019674 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]
 80007f4:	7bb9      	ldrb	r1, [r7, #14]
 80007f6:	7bfa      	ldrb	r2, [r7, #15]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4403      	add	r3, r0
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4299      	cmp	r1, r3
 800080a:	d3d2      	bcc.n	80007b2 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	3301      	adds	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0bc      	beq.n	8000792 <print_result+0xe>
    }
  }
  printf ("\n");
 8000818:	200a      	movs	r0, #10
 800081a:	f018 ff43 	bl	80196a4 <putchar>
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	bf00      	nop
 8000828:	0801a988 	.word	0x0801a988
 800082c:	0801a998 	.word	0x0801a998
 8000830:	0801a9a4 	.word	0x0801a9a4

08000834 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4313      	orrs	r3, r2
 800084a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800084c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000858:	68fb      	ldr	r3, [r7, #12]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	2004      	movs	r0, #4
 800087e:	f7ff ffd9 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff ffd6 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff ffd3 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff ffd0 	bl	8000834 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2123      	movs	r1, #35	; 0x23
 8000898:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_GPIO_Init+0x84>)
 800089a:	f015 f983 	bl	8015ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	2310      	movs	r3, #16
 80008a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_GPIO_Init+0x88>)
 80008b0:	f014 ff12 	bl	80156d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80008b4:	2323      	movs	r3, #35	; 0x23
 80008b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_GPIO_Init+0x84>)
 80008ca:	f014 ff05 	bl	80156d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80008ce:	2303      	movs	r3, #3
 80008d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_GPIO_Init+0x8c>)
 80008e0:	f014 fefa 	bl	80156d8 <HAL_GPIO_Init>

}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800
 80008f4:	48000c00 	.word	0x48000c00

080008f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000904:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d013      	beq.n	8000938 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000910:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000914:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000918:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00b      	beq.n	8000938 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000920:	e000      	b.n	8000924 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000922:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f9      	beq.n	8000922 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800092e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800094e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000956:	f023 0218 	bic.w	r2, r3, #24
 800095a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4313      	orrs	r3, r2
 8000962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb3 	bl	80008f8 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
}
return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f014 fd42 	bl	8015438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f818 	bl	80009e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009b8:	f000 f88c 	bl	8000ad4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f7ff ff54 	bl	8000868 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009c0:	f000 fc14 	bl	80011ec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80009c4:	f000 fcd8 	bl	8001378 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //Tof Initialization
  VL_TOF_Init();
 80009c8:	f7ff fdfc 	bl	80005c4 <VL_TOF_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("\n\n ****** Start TOF Test ****** \n\n");
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <main+0x34>)
 80009ce:	f018 feed 	bl	80197ac <puts>
	  VL_TOF_Process();
 80009d2:	f7ff fe01 	bl	80005d8 <VL_TOF_Process>
	  printf("\n\n ****** End TOF Test ****** \n\n");
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <main+0x38>)
 80009d8:	f018 fee8 	bl	80197ac <puts>
	  printf("\n\n ****** Start TOF Test ****** \n\n");
 80009dc:	e7f6      	b.n	80009cc <main+0x20>
 80009de:	bf00      	nop
 80009e0:	0801a9c8 	.word	0x0801a9c8
 80009e4:	0801a9ec 	.word	0x0801a9ec

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09a      	sub	sp, #104	; 0x68
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2248      	movs	r2, #72	; 0x48
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f018 fe34 	bl	8019664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a1c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	f023 0303 	bic.w	r3, r3, #3
 8000a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a32:	f015 ffb7 	bl	80169a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ff85 	bl	8000946 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <SystemClock_Config+0xe8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <SystemClock_Config+0xe8>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <SystemClock_Config+0xe8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000a58:	2327      	movs	r3, #39	; 0x27
 8000a5a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f016 fb2d 	bl	80170e4 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a90:	f000 f850 	bl	8000b34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a94:	236f      	movs	r3, #111	; 0x6f
 8000a96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f016 fe89 	bl	80177cc <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ac0:	f000 f838 	bl	8000b34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ac4:	f017 fc76 	bl	80183b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ac8:	bf00      	nop
 8000aca:	3768      	adds	r7, #104	; 0x68
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58000400 	.word	0x58000400

08000ad4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2250      	movs	r2, #80	; 0x50
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f018 fdbf 	bl	8019664 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4618      	mov	r0, r3
 8000af8:	f017 fae6 	bl	80180c8 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b02:	f000 f817 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f014 fca9 	bl	8015478 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40014800 	.word	0x40014800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>

08000b3e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	201a      	movs	r0, #26
 8000b96:	f014 fd77 	bl	8015688 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b9a:	201a      	movs	r0, #26
 8000b9c:	f014 fd8e 	bl	80156bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000ba0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ba4:	f7ff ffd2 	bl	8000b4c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f016 fff6 	bl	8017ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bb8:	f016 ffde 	bl	8017b78 <HAL_RCC_GetPCLK2Freq>
 8000bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_InitTick+0x8c>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	0c9b      	lsrs	r3, r3, #18
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_InitTick+0x90>)
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_InitTick+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_InitTick+0x90>)
 8000bd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <HAL_InitTick+0x90>)
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_InitTick+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_InitTick+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <HAL_InitTick+0x90>)
 8000bee:	f017 fcf8 	bl	80185e2 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d104      	bne.n	8000c02 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_InitTick+0x90>)
 8000bfa:	f017 fd53 	bl	80186a4 <HAL_TIM_Base_Start_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	40014800 	.word	0x40014800

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c76:	f017 fd63 	bl	8018740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000011c 	.word	0x2000011c

08000c84 <LL_AHB2_GRP1_EnableClock>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_APB1_GRP1_EnableClock>:
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_APB1_GRP1_DisableClock>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfe:	4013      	ands	r3, r2
 8000d00:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <BSP_I2C1_Init+0x70>)
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <BSP_I2C1_Init+0x74>)
 8000d1e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <BSP_I2C1_Init+0x78>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	4918      	ldr	r1, [pc, #96]	; (8000d88 <BSP_I2C1_Init+0x78>)
 8000d28:	600a      	str	r2, [r1, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d122      	bne.n	8000d74 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <BSP_I2C1_Init+0x70>)
 8000d30:	f015 fa0c 	bl	801614c <HAL_I2C_GetState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11c      	bne.n	8000d74 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <BSP_I2C1_Init+0x70>)
 8000d3c:	f000 f8ee 	bl	8000f1c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d116      	bne.n	8000d74 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <BSP_I2C1_Init+0x70>)
 8000d48:	f000 f8a4 	bl	8000e94 <MX_I2C1_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d52:	f06f 0307 	mvn.w	r3, #7
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	e00c      	b.n	8000d74 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <BSP_I2C1_Init+0x70>)
 8000d5e:	f015 fc87 	bl	8016670 <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d68:	f06f 0307 	mvn.w	r3, #7
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e001      	b.n	8000d74 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000168 	.word	0x20000168
 8000d84:	40005400 	.word	0x40005400
 8000d88:	200001bc 	.word	0x200001bc

08000d8c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <BSP_I2C1_DeInit+0x48>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d014      	beq.n	8000dc8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <BSP_I2C1_DeInit+0x48>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <BSP_I2C1_DeInit+0x48>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <BSP_I2C1_DeInit+0x48>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10b      	bne.n	8000dc8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <BSP_I2C1_DeInit+0x4c>)
 8000db2:	f000 f8f7 	bl	8000fa4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <BSP_I2C1_DeInit+0x4c>)
 8000db8:	f014 ff9b 	bl	8015cf2 <HAL_I2C_DeInit>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000dc2:	f06f 0307 	mvn.w	r3, #7
 8000dc6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001bc 	.word	0x200001bc
 8000dd8:	20000168 	.word	0x20000168

08000ddc <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	88f9      	ldrh	r1, [r7, #6]
 8000df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <BSP_I2C1_Send+0x50>)
 8000dfe:	f014 ffbb 	bl	8015d78 <HAL_I2C_Master_Transmit>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00c      	beq.n	8000e22 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <BSP_I2C1_Send+0x50>)
 8000e0a:	f015 f9ad 	bl	8016168 <HAL_I2C_GetError>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d003      	beq.n	8000e1c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e14:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e002      	b.n	8000e22 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e1c:	f06f 0303 	mvn.w	r3, #3
 8000e20:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000168 	.word	0x20000168

08000e30 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	80fb      	strh	r3, [r7, #6]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	88f9      	ldrh	r1, [r7, #6]
 8000e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <BSP_I2C1_Recv+0x50>)
 8000e52:	f015 f885 	bl	8015f60 <HAL_I2C_Master_Receive>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00c      	beq.n	8000e76 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <BSP_I2C1_Recv+0x50>)
 8000e5e:	f015 f983 	bl	8016168 <HAL_I2C_GetError>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d003      	beq.n	8000e70 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e68:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	e002      	b.n	8000e76 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e70:	f06f 0303 	mvn.w	r3, #3
 8000e74:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000168 	.word	0x20000168

08000e84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000e88:	f014 fb0a 	bl	80154a0 <HAL_GetTick>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_I2C1_Init+0x80>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x84>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f014 fe7c 	bl	8015bd4 <HAL_I2C_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f015 fbc1 	bl	8016670 <HAL_I2CEx_ConfigAnalogFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f015 fc03 	bl	8016706 <HAL_I2CEx_ConfigDigitalFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	00707cbb 	.word	0x00707cbb

08000f1c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b09c      	sub	sp, #112	; 0x70
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2250      	movs	r2, #80	; 0x50
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f018 fb99 	bl	8019664 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f32:	2304      	movs	r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f36:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4618      	mov	r0, r3
 8000f42:	f017 f8c1 	bl	80180c8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff fe9c 	bl	8000c84 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f52:	2312      	movs	r3, #18
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f66:	4619      	mov	r1, r3
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <I2C1_MspInit+0x84>)
 8000f6a:	f014 fbb5 	bl	80156d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000f80:	2304      	movs	r3, #4
 8000f82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000f84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <I2C1_MspInit+0x84>)
 8000f8c:	f014 fba4 	bl	80156d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f94:	f7ff fe8f 	bl	8000cb6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	3770      	adds	r7, #112	; 0x70
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000fac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fb0:	f7ff fe9a 	bl	8000ce8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <I2C1_MspDeInit+0x2c>)
 8000fba:	f014 fcfd 	bl	80159b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <I2C1_MspDeInit+0x2c>)
 8000fc4:	f014 fcf8 	bl	80159b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00a      	b.n	8000ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe6:	f3af 8000 	nop.w
 8000fea:	4601      	mov	r1, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf0      	blt.n	8000fe6 <_read+0x12>
  }

  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_close>:
  }
  return len;
}

int _close(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001036:	605a      	str	r2, [r3, #4]
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_isatty>:

int _isatty(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f018 faa4 	bl	80195f4 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20030000 	.word	0x20030000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200001c0 	.word	0x200001c0
 80010e0:	20008640 	.word	0x20008640

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <SystemInit+0x98>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <SystemInit+0x98>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001110:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <SystemInit+0x9c>)
 800111e:	4013      	ands	r3, r2
 8001120:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112e:	f023 0305 	bic.w	r3, r3, #5
 8001132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800113e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <SystemInit+0xa0>)
 8001150:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <SystemInit+0xa0>)
 8001158:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	faf6fefb 	.word	0xfaf6fefb
 8001184:	22041000 	.word	0x22041000

08001188 <LL_AHB2_GRP1_EnableClock>:
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_APB2_GRP1_EnableClock>:
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_USART1_UART_Init+0x94>)
 80011f2:	4a24      	ldr	r2, [pc, #144]	; (8001284 <MX_USART1_UART_Init+0x98>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART1_UART_Init+0x94>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001204:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001214:	220c      	movs	r2, #12
 8001216:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_USART1_UART_Init+0x94>)
 8001238:	f017 fc6c 	bl	8018b14 <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001242:	f7ff fc77 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800124a:	f018 f8cc 	bl	80193e6 <HAL_UARTEx_SetTxFifoThreshold>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001254:	f7ff fc6e 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800125c:	f018 f901 	bl	8019462 <HAL_UARTEx_SetRxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001266:	f7ff fc65 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART1_UART_Init+0x94>)
 800126c:	f018 f882 	bl	8019374 <HAL_UARTEx_DisableFifoMode>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001276:	f7ff fc5d 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001c4 	.word	0x200001c4
 8001284:	40013800 	.word	0x40013800

08001288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09c      	sub	sp, #112	; 0x70
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2250      	movs	r2, #80	; 0x50
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f018 f9db 	bl	8019664 <memset>
  if(uartHandle->Instance==USART1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_UART_MspInit+0x84>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d124      	bne.n	8001302 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f016 feff 	bl	80180c8 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff fc30 	bl	8000b34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d8:	f7ff ff6f 	bl	80011ba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff ff53 	bl	8001188 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012e2:	23c0      	movs	r3, #192	; 0xc0
 80012e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f2:	2307      	movs	r3, #7
 80012f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <HAL_UART_MspInit+0x88>)
 80012fe:	f014 f9eb 	bl	80156d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3770      	adds	r7, #112	; 0x70
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40013800 	.word	0x40013800
 8001310:	48000400 	.word	0x48000400

08001314 <LL_AHB2_GRP1_EnableClock>:
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800131c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_APB1_GRP1_EnableClock>:
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <MX_USB_PCD_Init+0x4c>)
 8001380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 8001384:	2208      	movs	r2, #8
 8001386:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 800138a:	2202      	movs	r2, #2
 800138c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 8001390:	2202      	movs	r2, #2
 8001392:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_USB_PCD_Init+0x48>)
 80013ae:	f015 f9f6 	bl	801679e <HAL_PCD_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013b8:	f7ff fbbc 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000258 	.word	0x20000258
 80013c4:	40006800 	.word	0x40006800

080013c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	; 0x70
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2250      	movs	r2, #80	; 0x50
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f018 f93b 	bl	8019664 <memset>
  if(pcdHandle->Instance==USB)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_PCD_MspInit+0xa8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d136      	bne.n	8001466 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80013fe:	2318      	movs	r3, #24
 8001400:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800140e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001412:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001418:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800141a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4618      	mov	r0, r3
 8001426:	f016 fe4f 	bl	80180c8 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001430:	f7ff fb80 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ff6d 	bl	8001314 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800143a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800144c:	230a      	movs	r3, #10
 800144e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f014 f93d 	bl	80156d8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800145e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001462:	f7ff ff70 	bl	8001346 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3770      	adds	r7, #112	; 0x70
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40006800 	.word	0x40006800

08001474 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001474:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001476:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001478:	3304      	adds	r3, #4

0800147a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800147e:	d3f9      	bcc.n	8001474 <CopyDataInit>
  bx lr
 8001480:	4770      	bx	lr

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001482:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001484:	3004      	adds	r0, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001486:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  bx lr
 800148a:	4770      	bx	lr

0800148c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001490:	f7ff fe28 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LoopForever+0x6>)
 8001496:	490c      	ldr	r1, [pc, #48]	; (80014c8 <LoopForever+0xa>)
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <LoopForever+0xe>)
 800149a:	2300      	movs	r3, #0
 800149c:	f7ff ffed 	bl	800147a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopForever+0x12>)
 80014a2:	490c      	ldr	r1, [pc, #48]	; (80014d4 <LoopForever+0x16>)
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <LoopForever+0x1a>)
 80014a6:	2300      	movs	r3, #0
 80014a8:	f7ff ffe7 	bl	800147a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <LoopForever+0x1e>)
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <LoopForever+0x22>)
 80014b0:	2300      	movs	r3, #0
 80014b2:	f7ff ffe8 	bl	8001486 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b6:	f018 f8a3 	bl	8019600 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014ba:	f7ff fa77 	bl	80009ac <main>

080014be <LoopForever>:

LoopForever:
  b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   r0, =_estack
 80014c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80014c4:	20000008 	.word	0x20000008
 80014c8:	200000dc 	.word	0x200000dc
 80014cc:	0801abf0 	.word	0x0801abf0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80014d0:	20030000 	.word	0x20030000
 80014d4:	20030000 	.word	0x20030000
 80014d8:	0801acc4 	.word	0x0801acc4
  INIT_BSS _sbss, _ebss
 80014dc:	200000e0 	.word	0x200000e0
 80014e0:	2000863c 	.word	0x2000863c

080014e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_IRQHandler>

080014e6 <LL_AHB2_GRP1_EnableClock>:
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4013      	ands	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <VL53L1A2_Init+0xe4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4934      	ldr	r1, [pc, #208]	; (80015fc <VL53L1A2_Init+0xe4>)
 800152a:	600a      	str	r2, [r1, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d154      	bne.n	80015da <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001530:	f000 f8d4 	bl	80016dc <_I2cFailRecover>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800153c:	f7ff fbe8 	bl	8000d10 <BSP_I2C1_Init>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d147      	bne.n	80015de <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800154e:	463a      	mov	r2, r7
 8001550:	2302      	movs	r3, #2
 8001552:	2100      	movs	r1, #0
 8001554:	2086      	movs	r0, #134	; 0x86
 8001556:	f000 f953 	bl	8001800 <_ExpanderRd>
 800155a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d13f      	bne.n	80015e2 <VL53L1A2_Init+0xca>
 8001562:	783b      	ldrb	r3, [r7, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d13c      	bne.n	80015e2 <VL53L1A2_Init+0xca>
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b16      	cmp	r3, #22
 800156c:	d139      	bne.n	80015e2 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800156e:	463a      	mov	r2, r7
 8001570:	2302      	movs	r3, #2
 8001572:	2100      	movs	r1, #0
 8001574:	2084      	movs	r0, #132	; 0x84
 8001576:	f000 f943 	bl	8001800 <_ExpanderRd>
 800157a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d131      	bne.n	80015e6 <VL53L1A2_Init+0xce>
 8001582:	783b      	ldrb	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d12e      	bne.n	80015e6 <VL53L1A2_Init+0xce>
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b16      	cmp	r3, #22
 800158c:	d12b      	bne.n	80015e6 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <VL53L1A2_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001598:	23ff      	movs	r3, #255	; 0xff
 800159a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800159c:	463a      	mov	r2, r7
 800159e:	2302      	movs	r3, #2
 80015a0:	2114      	movs	r1, #20
 80015a2:	2086      	movs	r0, #134	; 0x86
 80015a4:	f000 f95e 	bl	8001864 <_ExpanderWR>
 80015a8:	6078      	str	r0, [r7, #4]

	  if (status)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11c      	bne.n	80015ea <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80015b4:	23bf      	movs	r3, #191	; 0xbf
 80015b6:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80015b8:	463a      	mov	r2, r7
 80015ba:	2302      	movs	r3, #2
 80015bc:	2114      	movs	r1, #20
 80015be:	2084      	movs	r0, #132	; 0x84
 80015c0:	f000 f950 	bl	8001864 <_ExpanderWR>
 80015c4:	6078      	str	r0, [r7, #4]

	  if (status)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d110      	bne.n	80015ee <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <VL53L1A2_Init+0xe8>)
 80015ce:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80015d2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80015d4:	f000 f8f4 	bl	80017c0 <_ExpandersSetAllIO>
 80015d8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80015da:	bf00      	nop
 80015dc:	e008      	b.n	80015f0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80015de:	bf00      	nop
 80015e0:	e006      	b.n	80015f0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80015e2:	bf00      	nop
 80015e4:	e004      	b.n	80015f0 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80015e6:	bf00      	nop
 80015e8:	e002      	b.n	80015f0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80015ea:	bf00      	nop
 80015ec:	e000      	b.n	80015f0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80015ee:	bf00      	nop
  return status;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000054c 	.word	0x2000054c
 8001600:	20000550 	.word	0x20000550

08001604 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d037      	beq.n	800168a <VL53L1A2_ResetId+0x86>
 800161a:	2b02      	cmp	r3, #2
 800161c:	dc4e      	bgt.n	80016bc <VL53L1A2_ResetId+0xb8>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01a      	beq.n	8001658 <VL53L1A2_ResetId+0x54>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d14a      	bne.n	80016bc <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001628:	78db      	ldrb	r3, [r3, #3]
 800162a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001632:	70da      	strb	r2, [r3, #3]

      if (state)
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001646:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001648:	2301      	movs	r3, #1
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <VL53L1A2_ResetId+0xd0>)
 800164c:	2113      	movs	r1, #19
 800164e:	2084      	movs	r0, #132	; 0x84
 8001650:	f000 f908 	bl	8001864 <_ExpanderWR>
 8001654:	60f8      	str	r0, [r7, #12]
      break;
 8001656:	e035      	b.n	80016c4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001664:	705a      	strb	r2, [r3, #1]

      if (state)
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 800166e:	785b      	ldrb	r3, [r3, #1]
 8001670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001678:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800167a:	2301      	movs	r3, #1
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <VL53L1A2_ResetId+0xd4>)
 800167e:	2113      	movs	r1, #19
 8001680:	2086      	movs	r0, #134	; 0x86
 8001682:	f000 f8ef 	bl	8001864 <_ExpanderWR>
 8001686:	60f8      	str	r0, [r7, #12]
      break;
 8001688:	e01c      	b.n	80016c4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 8001696:	705a      	strb	r2, [r3, #1]

      if (state)
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <VL53L1A2_ResetId+0xcc>)
 80016aa:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <VL53L1A2_ResetId+0xd4>)
 80016b0:	2113      	movs	r1, #19
 80016b2:	2086      	movs	r0, #134	; 0x86
 80016b4:	f000 f8d6 	bl	8001864 <_ExpanderWR>
 80016b8:	60f8      	str	r0, [r7, #12]
      break;
 80016ba:	e003      	b.n	80016c4 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	60fb      	str	r3, [r7, #12]
      goto done;
 80016c2:	e000      	b.n	80016c6 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80016c4:	bf00      	nop
  return status;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000550 	.word	0x20000550
 80016d4:	20000553 	.word	0x20000553
 80016d8:	20000551 	.word	0x20000551

080016dc <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <_I2cFailRecover+0xdc>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e05e      	b.n	80017b0 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2002      	movs	r0, #2
 80016f4:	f7ff fef7 	bl	80014e6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80016f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016fe:	2311      	movs	r3, #17
 8001700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	482c      	ldr	r0, [pc, #176]	; (80017bc <_I2cFailRecover+0xe0>)
 800170c:	f013 ffe4 	bl	80156d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001716:	2311      	movs	r3, #17
 8001718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171a:	2301      	movs	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <_I2cFailRecover+0xe0>)
 8001724:	f013 ffd8 	bl	80156d8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172e:	4823      	ldr	r0, [pc, #140]	; (80017bc <_I2cFailRecover+0xe0>)
 8001730:	f014 fa38 	bl	8015ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800173a:	4820      	ldr	r0, [pc, #128]	; (80017bc <_I2cFailRecover+0xe0>)
 800173c:	f014 fa32 	bl	8015ba4 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
 8001744:	e014      	b.n	8001770 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <_I2cFailRecover+0xe0>)
 800174e:	f014 fa29 	bl	8015ba4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f013 febc 	bl	80154d0 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <_I2cFailRecover+0xe0>)
 8001760:	f014 fa20 	bl	8015ba4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f013 feb3 	bl	80154d0 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	3301      	adds	r3, #1
 800176e:	75fb      	strb	r3, [r7, #23]
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d9e7      	bls.n	8001746 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8001776:	7dbb      	ldrb	r3, [r7, #22]
 8001778:	3301      	adds	r3, #1
 800177a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <_I2cFailRecover+0xe0>)
 8001782:	f014 f9f7 	bl	8015b74 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_I2cFailRecover+0xb6>
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d9d6      	bls.n	8001740 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <_I2cFailRecover+0xe0>)
 8001798:	f014 f9ec 	bl	8015b74 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80017a2:	f06f 0304 	mvn.w	r3, #4
 80017a6:	e003      	b.n	80017b0 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <_I2cFailRecover+0xdc>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000554 	.word	0x20000554
 80017bc:	48000400 	.word	0x48000400

080017c0 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80017c6:	2302      	movs	r3, #2
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <_ExpandersSetAllIO+0x38>)
 80017ca:	2112      	movs	r1, #18
 80017cc:	2086      	movs	r0, #134	; 0x86
 80017ce:	f000 f849 	bl	8001864 <_ExpanderWR>
 80017d2:	6078      	str	r0, [r7, #4]

  if (status)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80017da:	2302      	movs	r3, #2
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <_ExpandersSetAllIO+0x3c>)
 80017de:	2112      	movs	r1, #18
 80017e0:	2084      	movs	r0, #132	; 0x84
 80017e2:	f000 f83f 	bl	8001864 <_ExpanderWR>
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	e000      	b.n	80017ec <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80017ea:	bf00      	nop

done_err:
  return status;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000550 	.word	0x20000550
 80017fc:	20000552 	.word	0x20000552

08001800 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	b299      	uxth	r1, r3
 8001818:	f107 0213 	add.w	r2, r7, #19
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <_ExpanderRd+0x60>)
 8001824:	f014 faa8 	bl	8015d78 <HAL_I2C_Master_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	617b      	str	r3, [r7, #20]

    if (status)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d110      	bne.n	8001854 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	b299      	uxth	r1, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2064      	movs	r0, #100	; 0x64
 800183e:	fb00 f303 	mul.w	r3, r0, r3
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <_ExpanderRd+0x60>)
 800184a:	f014 fb89 	bl	8015f60 <HAL_I2C_Master_Receive>
 800184e:	4603      	mov	r3, r0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e000      	b.n	8001856 <_ExpanderRd+0x56>
      break;
 8001854:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8001856:	697b      	ldr	r3, [r7, #20]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000168 	.word	0x20000168

08001864 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	3301      	adds	r3, #1
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f017 fee0 	bl	8019648 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b299      	uxth	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	b29b      	uxth	r3, r3
 8001894:	f107 0214 	add.w	r2, r7, #20
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	9000      	str	r0, [sp, #0]
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <_ExpanderWR+0x4c>)
 800189e:	f014 fa6b 	bl	8015d78 <HAL_I2C_Master_Transmit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000168 	.word	0x20000168

080018b4 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d903      	bls.n	80018ca <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018c2:	f06f 0301 	mvn.w	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e014      	b.n	80018f4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 80018ca:	f7ff fe25 	bl	8001518 <VL53L1A2_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80018d4:	f06f 0303 	mvn.w	r3, #3
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e00b      	b.n	80018f4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80018dc:	2101      	movs	r1, #1
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8d4 	bl	8001a8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80018e4:	2100      	movs	r1, #0
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f8d0 	bl	8001a8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f90d 	bl	8001b0c <VL53L1CB_Probe>
 80018f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d903      	bls.n	8001918 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001910:	f06f 0301 	mvn.w	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e012      	b.n	800193e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	490b      	ldr	r1, [pc, #44]	; (800194c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	4610      	mov	r0, r2
 800192a:	4798      	blx	r3
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	da03      	bge.n	800193a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001932:	f06f 0304 	mvn.w	r3, #4
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e001      	b.n	800193e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000564 	.word	0x20000564
 800194c:	20000558 	.word	0x20000558

08001950 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d903      	bls.n	8001968 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001960:	f06f 0301 	mvn.w	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e012      	b.n	800198e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	490b      	ldr	r1, [pc, #44]	; (800199c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	4610      	mov	r0, r2
 800197a:	4798      	blx	r3
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	da03      	bge.n	800198a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001982:	f06f 0304 	mvn.w	r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e001      	b.n	800198e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000564 	.word	0x20000564
 800199c:	20000558 	.word	0x20000558

080019a0 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d903      	bls.n	80019b8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019b0:	f06f 0301 	mvn.w	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e012      	b.n	80019de <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	490b      	ldr	r1, [pc, #44]	; (80019ec <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	4610      	mov	r0, r2
 80019ca:	4798      	blx	r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da03      	bge.n	80019da <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019d2:	f06f 0304 	mvn.w	r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e001      	b.n	80019de <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000564 	.word	0x20000564
 80019ec:	20000558 	.word	0x20000558

080019f0 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d903      	bls.n	8001a08 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a00:	f06f 0301 	mvn.w	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e012      	b.n	8001a2e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	490b      	ldr	r1, [pc, #44]	; (8001a3c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4798      	blx	r3
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da03      	bge.n	8001a2a <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a22:	f06f 0304 	mvn.w	r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e001      	b.n	8001a2e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000564 	.word	0x20000564
 8001a3c:	20000558 	.word	0x20000558

08001a40 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d903      	bls.n	8001a56 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a4e:	f06f 0301 	mvn.w	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e011      	b.n	8001a7a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	490a      	ldr	r1, [pc, #40]	; (8001a88 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da03      	bge.n	8001a76 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a6e:	f06f 0304 	mvn.w	r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e001      	b.n	8001a7a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000564 	.word	0x20000564
 8001a88:	20000558 	.word	0x20000558

08001a8c <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d903      	bls.n	8001aa4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a9c:	f06f 0301 	mvn.w	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e02e      	b.n	8001b02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d112      	bne.n	8001ad0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fda7 	bl	8001604 <VL53L1A2_ResetId>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da03      	bge.n	8001ac4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001abc:	f06f 0303 	mvn.w	r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e01e      	b.n	8001b02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f013 fd03 	bl	80154d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e018      	b.n	8001b02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d112      	bne.n	8001afc <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fd91 	bl	8001604 <VL53L1A2_ResetId>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da03      	bge.n	8001af0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ae8:	f06f 0303 	mvn.w	r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e008      	b.n	8001b02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001af0:	2002      	movs	r0, #2
 8001af2:	f013 fced 	bl	80154d0 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e002      	b.n	8001b02 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001afc:	f06f 0301 	mvn.w	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001b14:	2352      	movs	r3, #82	; 0x52
 8001b16:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <VL53L1CB_Probe+0xf0>)
 8001b1a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <VL53L1CB_Probe+0xf4>)
 8001b1e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <VL53L1CB_Probe+0xf8>)
 8001b22:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <VL53L1CB_Probe+0xfc>)
 8001b26:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <VL53L1CB_Probe+0x100>)
 8001b2a:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	4a36      	ldr	r2, [pc, #216]	; (8001c10 <VL53L1CB_Probe+0x104>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	f107 020c 	add.w	r2, r7, #12
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f013 f824 	bl	8014b8e <VL53L1CB_RegisterBusIO>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b4c:	f06f 0304 	mvn.w	r3, #4
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e04d      	b.n	8001bf0 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <VL53L1CB_Probe+0x104>)
 8001b60:	4413      	add	r3, r2
 8001b62:	f107 0208 	add.w	r2, r7, #8
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f013 f8cc 	bl	8014d06 <VL53L1CB_ReadID>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b74:	f06f 0304 	mvn.w	r3, #4
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e039      	b.n	8001bf0 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001b86:	f06f 0306 	mvn.w	r3, #6
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e030      	b.n	8001bf0 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <VL53L1CB_Probe+0x108>)
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <VL53L1CB_Probe+0x10c>)
 8001b92:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <VL53L1CB_Probe+0x104>)
 8001ba0:	441a      	add	r2, r3
 8001ba2:	491e      	ldr	r1, [pc, #120]	; (8001c1c <VL53L1CB_Probe+0x110>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <VL53L1CB_Probe+0x108>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	491a      	ldr	r1, [pc, #104]	; (8001c1c <VL53L1CB_Probe+0x110>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4798      	blx	r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bc2:	f06f 0304 	mvn.w	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc8:	e012      	b.n	8001bf0 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <VL53L1CB_Probe+0x108>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4912      	ldr	r1, [pc, #72]	; (8001c1c <VL53L1CB_Probe+0x110>)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bd8:	4911      	ldr	r1, [pc, #68]	; (8001c20 <VL53L1CB_Probe+0x114>)
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4798      	blx	r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001be4:	f06f 0304 	mvn.w	r3, #4
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	e001      	b.n	8001bf0 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08000d11 	.word	0x08000d11
 8001c00:	08000d8d 	.word	0x08000d8d
 8001c04:	08000ddd 	.word	0x08000ddd
 8001c08:	08000e31 	.word	0x08000e31
 8001c0c:	08000e85 	.word	0x08000e85
 8001c10:	20000578 	.word	0x20000578
 8001c14:	20000564 	.word	0x20000564
 8001c18:	20000038 	.word	0x20000038
 8001c1c:	20000558 	.word	0x20000558
 8001c20:	20000568 	.word	0x20000568

08001c24 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c30:	793b      	ldrb	r3, [r7, #4]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	d808      	bhi.n	8001c48 <CheckValidRectRoi+0x24>
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d805      	bhi.n	8001c48 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	d802      	bhi.n	8001c48 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d901      	bls.n	8001c4c <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001c48:	23fc      	movs	r3, #252	; 0xfc
 8001c4a:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001c4c:	793a      	ldrb	r2, [r7, #4]
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d803      	bhi.n	8001c5c <CheckValidRectRoi+0x38>
 8001c54:	797a      	ldrb	r2, [r7, #5]
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d201      	bcs.n	8001c60 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001c5c:	23fc      	movs	r3, #252	; 0xfc
 8001c5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3318      	adds	r3, #24
 8001c84:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001c8c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	2101      	movs	r1, #1
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f012 fd7d 	bl	8014798 <VL53L1_WrByte>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f002 fc56 	bl	8004586 <VL53L1_data_init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3318      	adds	r3, #24
 8001cea:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f017 fcb3 	bl	8019664 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	73bb      	strb	r3, [r7, #14]
 8001d16:	e012      	b.n	8001d3e <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d112      	bne.n	8001d46 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fc90 	bl	800264e <VL53L1_SetLimitCheckEnable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	73bb      	strb	r3, [r7, #14]
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d9e9      	bls.n	8001d18 <VL53L1_DataInit+0x5a>
 8001d44:	e000      	b.n	8001d48 <VL53L1_DataInit+0x8a>
		else
			break;
 8001d46:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001d50:	2102      	movs	r1, #2
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f005 faef 	bl	8007336 <VL53L1_set_dmax_mode>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001d80:	2320      	movs	r3, #32
 8001d82:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7bba      	ldrb	r2, [r7, #14]
 8001d88:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f947 	bl	8002020 <VL53L1_SetPresetMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001d96:	2102      	movs	r1, #2
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f98b 	bl	80020b4 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001daa:	2100      	movs	r1, #0
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f001 fe69 	bl	8003a84 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001dca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f011 ffa1 	bl	8013d16 <VL53L1_poll_for_boot_completion>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	603a      	str	r2, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	460b      	mov	r3, r1
 8001df2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <ComputeDevicePresetMode+0x138>)
 8001dfa:	f107 0318 	add.w	r3, r7, #24
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4611      	mov	r1, r2
 8001e02:	8019      	strh	r1, [r3, #0]
 8001e04:	3302      	adds	r3, #2
 8001e06:	0c12      	lsrs	r2, r2, #16
 8001e08:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <ComputeDevicePresetMode+0x13c>)
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4611      	mov	r1, r2
 8001e14:	8019      	strh	r1, [r3, #0]
 8001e16:	3302      	adds	r3, #2
 8001e18:	0c12      	lsrs	r2, r2, #16
 8001e1a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001e1c:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <ComputeDevicePresetMode+0x140>)
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	4611      	mov	r1, r2
 8001e26:	8019      	strh	r1, [r3, #0]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	0c12      	lsrs	r2, r2, #16
 8001e2c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001e2e:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <ComputeDevicePresetMode+0x144>)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	4611      	mov	r1, r2
 8001e38:	8019      	strh	r1, [r3, #0]
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	0c12      	lsrs	r2, r2, #16
 8001e3e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001e40:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <ComputeDevicePresetMode+0x148>)
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	8019      	strh	r1, [r3, #0]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	0c12      	lsrs	r2, r2, #16
 8001e50:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d002      	beq.n	8001e64 <ComputeDevicePresetMode+0x80>
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <ComputeDevicePresetMode+0x86>
 8001e62:	e005      	b.n	8001e70 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77bb      	strb	r3, [r7, #30]
		break;
 8001e68:	e004      	b.n	8001e74 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	77bb      	strb	r3, [r7, #30]
		break;
 8001e6e:	e001      	b.n	8001e74 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001e70:	2302      	movs	r3, #2
 8001e72:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d845      	bhi.n	8001f08 <ComputeDevicePresetMode+0x124>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <ComputeDevicePresetMode+0xa0>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001ec9 	.word	0x08001ec9
 8001e8c:	08001ed9 	.word	0x08001ed9
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001f09 	.word	0x08001f09
 8001e98:	08001f09 	.word	0x08001f09
 8001e9c:	08001ef9 	.word	0x08001ef9
 8001ea0:	08001ee9 	.word	0x08001ee9
 8001ea4:	08001f01 	.word	0x08001f01
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001ea8:	7fbb      	ldrb	r3, [r7, #30]
 8001eaa:	3320      	adds	r3, #32
 8001eac:	443b      	add	r3, r7
 8001eae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
		break;
 8001eb6:	e029      	b.n	8001f0c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8001eb8:	7fbb      	ldrb	r3, [r7, #30]
 8001eba:	3320      	adds	r3, #32
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	701a      	strb	r2, [r3, #0]
		break;
 8001ec6:	e021      	b.n	8001f0c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001ec8:	7fbb      	ldrb	r3, [r7, #30]
 8001eca:	3320      	adds	r3, #32
 8001ecc:	443b      	add	r3, r7
 8001ece:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
		break;
 8001ed6:	e019      	b.n	8001f0c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001ed8:	7fbb      	ldrb	r3, [r7, #30]
 8001eda:	3320      	adds	r3, #32
 8001edc:	443b      	add	r3, r7
 8001ede:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	701a      	strb	r2, [r3, #0]
		break;
 8001ee6:	e011      	b.n	8001f0c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001ee8:	7fbb      	ldrb	r3, [r7, #30]
 8001eea:	3320      	adds	r3, #32
 8001eec:	443b      	add	r3, r7
 8001eee:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	701a      	strb	r2, [r3, #0]
		break;
 8001ef6:	e009      	b.n	8001f0c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2211      	movs	r2, #17
 8001efc:	701a      	strb	r2, [r3, #0]
		break;
 8001efe:	e005      	b.n	8001f0c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2227      	movs	r2, #39	; 0x27
 8001f04:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8001f06:	e001      	b.n	8001f0c <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001f08:	23f8      	movs	r3, #248	; 0xf8
 8001f0a:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8001f0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	0801aa38 	.word	0x0801aa38
 8001f20:	0801aa3c 	.word	0x0801aa3c
 8001f24:	0801aa40 	.word	0x0801aa40
 8001f28:	0801aa44 	.word	0x0801aa44
 8001f2c:	0801aa48 	.word	0x0801aa48

08001f30 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d002      	beq.n	8001f64 <SetPresetMode+0x34>
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d103      	bne.n	8001f6c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f6a:	e002      	b.n	8001f72 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001f72:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001f76:	7ab9      	ldrb	r1, [r7, #10]
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff32 	bl	8001de4 <ComputeDevicePresetMode>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d112      	bne.n	8001fb4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001f8e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001f92:	f107 001c 	add.w	r0, r7, #28
 8001f96:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f002 ffaf 	bl	8004f0c <VL53L1_get_preset_mode_timing_cfg>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d112      	bne.n	8001fe2 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001fbc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001fc0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001fc2:	69fd      	ldr	r5, [r7, #28]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	9102      	str	r1, [sp, #8]
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f003 f8ee 	bl	80051b8 <VL53L1_set_preset_mode>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001fe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ff0:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002000:	461a      	mov	r2, r3
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8002014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002018:	4618      	mov	r0, r3
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}

08002020 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002030:	2303      	movs	r3, #3
 8002032:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f00c f94a 	bl	800e2ce <VL53L1_low_power_auto_data_init>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d101      	bne.n	8002048 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002044:	2301      	movs	r3, #1
 8002046:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8002048:	7bba      	ldrb	r2, [r7, #14]
 800204a:	78f9      	ldrb	r1, [r7, #3]
 800204c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff6d 	bl	8001f30 <SetPresetMode>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d117      	bne.n	8002092 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d005      	beq.n	8002074 <VL53L1_SetPresetMode+0x54>
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d002      	beq.n	8002074 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d107      	bne.n	8002084 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002074:	f24a 0128 	movw	r1, #41000	; 0xa028
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8a9 	bl	80021d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e006      	b.n	8002092 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002084:	f248 2135 	movw	r1, #33333	; 0x8235
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8a1 	bl	80021d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800209a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa68 	bl	8002574 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0a2      	sub	sp, #136	; 0x88
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020d8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80020dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 80020e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	d105      	bne.n	80020f4 <VL53L1_SetDistanceMode+0x40>
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 80020ee:	f06f 0303 	mvn.w	r3, #3
 80020f2:	e069      	b.n	80021c8 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d008      	beq.n	800210c <VL53L1_SetDistanceMode+0x58>
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d005      	beq.n	800210c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d002      	beq.n	800210c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8002106:	f06f 0303 	mvn.w	r3, #3
 800210a:	e05d      	b.n	80021c8 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 800210c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002110:	2b00      	cmp	r3, #0
 8002112:	d108      	bne.n	8002126 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f002 fede 	bl	8004edc <VL53L1_get_zone_config>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800212e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8002136:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800213a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800213e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f002 fd8a 	bl	8004c5c <VL53L1_get_timeouts_us>
 8002148:	4603      	mov	r3, r0
 800214a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800214e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800215c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fee5 	bl	8001f30 <SetPresetMode>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800216c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800217a:	461a      	mov	r2, r3
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002182:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800218a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800218c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800218e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f002 fd2a 	bl	8004bea <VL53L1_set_timeouts_us>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800219c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80021a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80021aa:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f002 fe4c 	bl	8004e56 <VL53L1_set_zone_config>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 80021c4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3788      	adds	r7, #136	; 0x88
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80021f4:	4b75      	ldr	r3, [pc, #468]	; (80023cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 80021f6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d902      	bls.n	8002206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002200:	23fc      	movs	r3, #252	; 0xfc
 8002202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8002206:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800220e:	f107 031a 	add.w	r3, r7, #26
 8002212:	461a      	mov	r2, r3
 8002214:	2105      	movs	r1, #5
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb9a 	bl	8002950 <VL53L1_GetSequenceStepEnable>
 800221c:	4603      	mov	r3, r0
 800221e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002222:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800222a:	f107 0319 	add.w	r3, r7, #25
 800222e:	461a      	mov	r2, r3
 8002230:	2106      	movs	r1, #6
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fb8c 	bl	8002950 <VL53L1_GetSequenceStepEnable>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800223e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	f107 0210 	add.w	r2, r7, #16
 800224e:	f107 010c 	add.w	r1, r7, #12
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f002 fd02 	bl	8004c5c <VL53L1_get_timeouts_us>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800225e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 80a0 	bne.w	80023a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800226e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002272:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800227c:	7efb      	ldrb	r3, [r7, #27]
 800227e:	3b01      	subs	r3, #1
 8002280:	2b08      	cmp	r3, #8
 8002282:	d861      	bhi.n	8002348 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8002284:	a201      	add	r2, pc, #4	; (adr r2, 800228c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	08002331 	.word	0x08002331
 8002290:	08002331 	.word	0x08002331
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022b1 	.word	0x080022b1
 800229c:	08002349 	.word	0x08002349
 80022a0:	08002349 	.word	0x08002349
 80022a4:	0800233d 	.word	0x0800233d
 80022a8:	080022f3 	.word	0x080022f3
 80022ac:	08002331 	.word	0x08002331
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80022b0:	7ebb      	ldrb	r3, [r7, #26]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d002      	beq.n	80022bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80022b6:	7e7b      	ldrb	r3, [r7, #25]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d103      	bne.n	80022c4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 80022bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 80022c2:	e044      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 80022c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80022ca:	e040      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80022d2:	7ebb      	ldrb	r3, [r7, #26]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 80022d8:	7e7b      	ldrb	r3, [r7, #25]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d103      	bne.n	80022e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 80022de:	f246 73e8 	movw	r3, #26600	; 0x67e8
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	e002      	b.n	80022ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 80022e6:	f245 4360 	movw	r3, #21600	; 0x5460
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80022f0:	e02d      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80022f8:	23f5      	movs	r3, #245	; 0xf5
 80022fa:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	461a      	mov	r2, r3
 8002302:	f248 0188 	movw	r1, #32904	; 0x8088
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 f88c 	bl	8007424 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dd07      	ble.n	8002322 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	22f5      	movs	r2, #245	; 0xf5
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	461a      	mov	r2, r3
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	4413      	add	r3, r2
 8002320:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800232a:	2302      	movs	r3, #2
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800232e:	e00e      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8002330:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8002336:	2306      	movs	r3, #6
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800233a:	e008      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002342:	3308      	adds	r3, #8
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002346:	e002      	b.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002348:	23f8      	movs	r3, #248	; 0xf8
 800234a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	429a      	cmp	r2, r3
 8002354:	d803      	bhi.n	800235e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002356:	23fc      	movs	r3, #252	; 0xfc
 8002358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800235c:	e003      	b.n	8002366 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8002364:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8002366:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11c      	bne.n	80023a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	429a      	cmp	r2, r3
 8002374:	d203      	bcs.n	800237e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002376:	23fc      	movs	r3, #252	; 0xfc
 8002378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800237c:	e00d      	b.n	800239a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f002 fc2b 	bl	8004bea <VL53L1_set_timeouts_us>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800239a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80023a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023b6:	461a      	mov	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80023be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3730      	adds	r7, #48	; 0x30
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	00086470 	.word	0x00086470
 80023d0:	00989680 	.word	0x00989680

080023d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8002402:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800240a:	f107 031b 	add.w	r3, r7, #27
 800240e:	461a      	mov	r2, r3
 8002410:	2105      	movs	r1, #5
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa9c 	bl	8002950 <VL53L1_GetSequenceStepEnable>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800241e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8002426:	f107 031a 	add.w	r3, r7, #26
 800242a:	461a      	mov	r2, r3
 800242c:	2106      	movs	r1, #6
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa8e 	bl	8002950 <VL53L1_GetSequenceStepEnable>
 8002434:	4603      	mov	r3, r0
 8002436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800243a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	f107 0214 	add.w	r2, r7, #20
 800244a:	f107 010c 	add.w	r1, r7, #12
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f002 fc04 	bl	8004c5c <VL53L1_get_timeouts_us>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800245a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800245e:	2b00      	cmp	r3, #0
 8002460:	d179      	bne.n	8002556 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002468:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800246c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8002470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002474:	3b01      	subs	r3, #1
 8002476:	2b08      	cmp	r3, #8
 8002478:	d869      	bhi.n	800254e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	0800252d 	.word	0x0800252d
 8002484:	0800252d 	.word	0x0800252d
 8002488:	080024c7 	.word	0x080024c7
 800248c:	080024a5 	.word	0x080024a5
 8002490:	0800254f 	.word	0x0800254f
 8002494:	0800254f 	.word	0x0800254f
 8002498:	0800253f 	.word	0x0800253f
 800249c:	080024ef 	.word	0x080024ef
 80024a0:	0800252d 	.word	0x0800252d
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80024a4:	7efb      	ldrb	r3, [r7, #27]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d002      	beq.n	80024b0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 80024aa:	7ebb      	ldrb	r3, [r7, #26]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80024b6:	3308      	adds	r3, #8
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80024ba:	e04d      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024c4:	e048      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80024c6:	7efb      	ldrb	r3, [r7, #27]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d002      	beq.n	80024d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 80024cc:	7ebb      	ldrb	r3, [r7, #26]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d106      	bne.n	80024e0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80024d8:	3334      	adds	r3, #52	; 0x34
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 80024de:	e03b      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80024e6:	3330      	adds	r3, #48	; 0x30
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024ec:	e034      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80024ee:	23f5      	movs	r3, #245	; 0xf5
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	461a      	mov	r2, r3
 80024f8:	f248 0188 	movw	r1, #32904	; 0x8088
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f004 ff91 	bl	8007424 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	dd07      	ble.n	8002518 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	22f5      	movs	r2, #245	; 0xf5
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	4413      	add	r3, r2
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800251e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800252a:	e015      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800253c:	e00c      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	4413      	add	r3, r2
 8002544:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002548:	3308      	adds	r3, #8
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800254c:	e004      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800254e:	23f8      	movs	r3, #248	; 0xf8
 8002550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002554:	e000      	b.n	8002558 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8002556:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8002558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002564:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002566:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800256a:	4618      	mov	r0, r3
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop

08002574 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f002 facc 	bl	8004b38 <VL53L1_set_inter_measurement_period_ms>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f002 fae3 	bl	8004b94 <VL53L1_get_inter_measurement_period_ms>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	019b      	lsls	r3, r3, #6
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80025da:	fba1 1303 	umull	r1, r3, r1, r3
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	460b      	mov	r3, r1
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <SetLimitValue+0x1e>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d009      	beq.n	800262c <SetLimitValue+0x30>
 8002618:	e011      	b.n	800263e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0b9b      	lsrs	r3, r3, #14
 800261e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8002620:	8abb      	ldrh	r3, [r7, #20]
 8002622:	4619      	mov	r1, r3
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f003 f988 	bl	800593a <VL53L1_set_lite_sigma_threshold>
		break;
 800262a:	e00a      	b.n	8002642 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8002632:	8abb      	ldrh	r3, [r7, #20]
 8002634:	4619      	mov	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f003 f9ad 	bl	8005996 <VL53L1_set_lite_min_count_rate>
		break;
 800263c:	e001      	b.n	8002642 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800263e:	23fc      	movs	r3, #252	; 0xfc
 8002640:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	807b      	strh	r3, [r7, #2]
 800265a:	4613      	mov	r3, r2
 800265c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d902      	bls.n	8002672 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800266c:	23fc      	movs	r3, #252	; 0xfc
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e015      	b.n	800269e <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8002672:	787b      	ldrb	r3, [r7, #1]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	e007      	b.n	800268e <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ffb1 	bl	80025fc <SetLimitValue>
 800269a:	4603      	mov	r3, r0
 800269c:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80026a6:	787b      	ldrb	r3, [r7, #1]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	4611      	mov	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80026be:	3334      	adds	r3, #52	; 0x34
 80026c0:	460a      	mov	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80026c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	460b      	mov	r3, r1
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d905      	bls.n	80026f4 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80026e8:	23fc      	movs	r3, #252	; 0xfc
 80026ea:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e00a      	b.n	800270a <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80026fe:	3334      	adds	r3, #52	; 0x34
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7dba      	ldrb	r2, [r7, #22]
 8002708:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800270a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	460b      	mov	r3, r1
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <VL53L1_GetLimitCheckValue+0x22>
 8002736:	2b01      	cmp	r3, #1
 8002738:	d00c      	beq.n	8002754 <VL53L1_GetLimitCheckValue+0x3a>
 800273a:	e017      	b.n	800276c <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f003 f8e2 	bl	800590c <VL53L1_get_lite_sigma_threshold>
 8002748:	4603      	mov	r3, r0
 800274a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800274c:	8abb      	ldrh	r3, [r7, #20]
 800274e:	039b      	lsls	r3, r3, #14
 8002750:	61bb      	str	r3, [r7, #24]
		break;
 8002752:	e00d      	b.n	8002770 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8002754:	f107 0316 	add.w	r3, r7, #22
 8002758:	4619      	mov	r1, r3
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f003 f904 	bl	8005968 <VL53L1_get_lite_min_count_rate>
 8002760:	4603      	mov	r3, r0
 8002762:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002764:	8afb      	ldrh	r3, [r7, #22]
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	61bb      	str	r3, [r7, #24]
		break;
 800276a:	e001      	b.n	8002770 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800276c:	23fc      	movs	r3, #252	; 0xfc
 800276e:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d129      	bne.n	80027cc <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800279e:	3334      	adds	r3, #52	; 0x34
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e012      	b.n	80027cc <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80027c6:	3334      	adds	r3, #52	; 0x34
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80027cc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0a0      	sub	sp, #128	; 0x80
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027f4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80027f8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 80027fc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002800:	2b02      	cmp	r3, #2
 8002802:	d102      	bne.n	800280a <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8002804:	2310      	movs	r3, #16
 8002806:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002812:	429a      	cmp	r2, r3
 8002814:	d303      	bcc.n	800281e <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800281e:	23fc      	movs	r3, #252	; 0xfc
 8002820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8002824:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002828:	2b00      	cmp	r3, #0
 800282a:	d17e      	bne.n	800292a <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 800282c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002830:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 800283c:	2300      	movs	r3, #0
 800283e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002842:	e06a      	b.n	800291a <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8002844:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	3301      	adds	r3, #1
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f7ff f9e3 	bl	8001c24 <CheckValidRectRoi>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8002864:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002868:	2b00      	cmp	r3, #0
 800286a:	d15d      	bne.n	8002928 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800286c:	7abb      	ldrb	r3, [r7, #10]
 800286e:	461a      	mov	r2, r3
 8002870:	7a3b      	ldrb	r3, [r7, #8]
 8002872:	4413      	add	r3, r2
 8002874:	3301      	adds	r3, #1
					/ 2;
 8002876:	0fda      	lsrs	r2, r3, #31
 8002878:	4413      	add	r3, r2
 800287a:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800287c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002880:	7a7b      	ldrb	r3, [r7, #9]
 8002882:	461a      	mov	r2, r3
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	4413      	add	r3, r2
 8002888:	3301      	adds	r3, #1
					/ 2;
 800288a:	0fda      	lsrs	r2, r3, #31
 800288c:	4413      	add	r3, r2
 800288e:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002890:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002894:	7aba      	ldrb	r2, [r7, #10]
 8002896:	7a3b      	ldrb	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 800289e:	7a7a      	ldrb	r2, [r7, #9]
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 80028a8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d903      	bls.n	80028b8 <VL53L1_SetROI+0xe0>
 80028b0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d803      	bhi.n	80028c0 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80028b8:	23fc      	movs	r3, #252	; 0xfc
 80028ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80028be:	e034      	b.n	800292a <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 80028c0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80028c4:	3306      	adds	r3, #6
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3380      	adds	r3, #128	; 0x80
 80028ca:	443b      	add	r3, r7
 80028cc:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80028d0:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 80028d4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80028d8:	3306      	adds	r3, #6
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3380      	adds	r3, #128	; 0x80
 80028de:	443b      	add	r3, r7
 80028e0:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 80028e4:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 80028e8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80028ec:	3306      	adds	r3, #6
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3380      	adds	r3, #128	; 0x80
 80028f2:	443b      	add	r3, r7
 80028f4:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80028f8:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 80028fc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002900:	3306      	adds	r3, #6
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3380      	adds	r3, #128	; 0x80
 8002906:	443b      	add	r3, r7
 8002908:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800290c:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002910:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002914:	3301      	adds	r3, #1
 8002916:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8002922:	429a      	cmp	r2, r3
 8002924:	d38e      	bcc.n	8002844 <VL53L1_SetROI+0x6c>
 8002926:	e000      	b.n	800292a <VL53L1_SetROI+0x152>
				break;
 8002928:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 800292a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f002 fa8c 	bl	8004e56 <VL53L1_set_zone_config>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8002944:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8002948:	4618      	mov	r0, r3
 800294a:	3780      	adds	r7, #128	; 0x80
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	460b      	mov	r3, r1
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4619      	mov	r1, r3
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f002 f9e3 	bl	8004d34 <VL53L1_get_sequence_config_bit>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3318      	adds	r3, #24
 8002990:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7edb      	ldrb	r3, [r3, #27]
 8002996:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d002      	beq.n	80029a4 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fc8e 	bl	80042c0 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	77bb      	strb	r3, [r7, #30]
 80029a8:	e01a      	b.n	80029e0 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80029aa:	7fbb      	ldrb	r3, [r7, #30]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80029b2:	330c      	adds	r3, #12
 80029b4:	2100      	movs	r1, #0
 80029b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80029ba:	7fbb      	ldrb	r3, [r7, #30]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80029c4:	3320      	adds	r3, #32
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80029ca:	7fbb      	ldrb	r3, [r7, #30]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80029da:	7fbb      	ldrb	r3, [r7, #30]
 80029dc:	3301      	adds	r3, #1
 80029de:	77bb      	strb	r3, [r7, #30]
 80029e0:	7fbb      	ldrb	r3, [r7, #30]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d9e1      	bls.n	80029aa <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a04:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8002a08:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002a0a:	7dbb      	ldrb	r3, [r7, #22]
 8002a0c:	2b63      	cmp	r3, #99	; 0x63
 8002a0e:	dc12      	bgt.n	8002a36 <VL53L1_StartMeasurement+0xb6>
 8002a10:	2b62      	cmp	r3, #98	; 0x62
 8002a12:	da0d      	bge.n	8002a30 <VL53L1_StartMeasurement+0xb0>
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	dc0e      	bgt.n	8002a36 <VL53L1_StartMeasurement+0xb6>
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	da09      	bge.n	8002a30 <VL53L1_StartMeasurement+0xb0>
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	dc02      	bgt.n	8002a26 <VL53L1_StartMeasurement+0xa6>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da05      	bge.n	8002a30 <VL53L1_StartMeasurement+0xb0>
 8002a24:	e007      	b.n	8002a36 <VL53L1_StartMeasurement+0xb6>
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d105      	bne.n	8002a36 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	77fb      	strb	r3, [r7, #31]
		break;
 8002a2e:	e004      	b.n	8002a3a <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8002a30:	23f2      	movs	r3, #242	; 0xf2
 8002a32:	77fb      	strb	r3, [r7, #31]
		break;
 8002a34:	e001      	b.n	8002a3a <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8002a36:	23fd      	movs	r3, #253	; 0xfd
 8002a38:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8002a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11f      	bne.n	8002a82 <VL53L1_StartMeasurement+0x102>
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d11c      	bne.n	8002a82 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fcc0 	bl	80023d4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8002a54:	4603      	mov	r3, r0
 8002a56:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <VL53L1_StartMeasurement+0x13c>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fda2 	bl	80025b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002a70:	4603      	mov	r3, r0
 8002a72:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d901      	bls.n	8002a82 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002a7e:	23fc      	movs	r3, #252	; 0xfc
 8002a80:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f002 ff97 	bl	80059c4 <VL53L1_init_and_start_range>
 8002a96:	4603      	mov	r3, r0
 8002a98:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002a9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002aae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f003 fa47 	bl	8005f60 <VL53L1_stop_range>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7edb      	ldrb	r3, [r3, #27]
 8002ada:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d002      	beq.n	8002ae8 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f001 fd1a 	bl	800451c <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002af6:	2203      	movs	r2, #3
 8002af8:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7edb      	ldrb	r3, [r3, #27]
 8002b18:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002b1a:	7bbb      	ldrb	r3, [r7, #14]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f003 ff4b 	bl	80069ba <VL53L1_clear_interrupt_and_enable_next_range>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f011 f8ac 	bl	8013ca2 <VL53L1_is_new_data_ready>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	603a      	str	r2, [r7, #0]
 8002b64:	80fb      	strh	r3, [r7, #6]
 8002b66:	460b      	mov	r3, r1
 8002b68:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8002b6a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b6e:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002b70:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002b74:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8002b76:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002b7a:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002b7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b80:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002b82:	797b      	ldrb	r3, [r7, #5]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <GenNewPresetMode+0x34>
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d012      	beq.n	8002bb2 <GenNewPresetMode+0x58>
 8002b8c:	e023      	b.n	8002bd6 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002b8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dd03      	ble.n	8002ba0 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002b9e:	e02c      	b.n	8002bfa <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002ba0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ba4:	89bb      	ldrh	r3, [r7, #12]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	dd27      	ble.n	8002bfa <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2202      	movs	r2, #2
 8002bae:	701a      	strb	r2, [r3, #0]
		break;
 8002bb0:	e023      	b.n	8002bfa <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002bb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dd03      	ble.n	8002bc4 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002bc2:	e01c      	b.n	8002bfe <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002bc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	da17      	bge.n	8002bfe <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
		break;
 8002bd4:	e013      	b.n	8002bfe <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bda:	89fb      	ldrh	r3, [r7, #14]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	da03      	bge.n	8002be8 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002be6:	e00c      	b.n	8002c02 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002be8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	da07      	bge.n	8002c02 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
		break;
 8002bf8:	e003      	b.n	8002c02 <GenNewPresetMode+0xa8>
		break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <GenNewPresetMode+0xaa>
		break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <GenNewPresetMode+0xaa>
		break;
 8002c02:	bf00      	nop
	}
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	7ddb      	ldrb	r3, [r3, #23]
 8002c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <CheckAndChangeDistanceMode+0xbc>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3318      	adds	r3, #24
 8002c32:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c38:	2bff      	cmp	r3, #255	; 0xff
 8002c3a:	d042      	beq.n	8002cc2 <CheckAndChangeDistanceMode+0xb2>
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	dc07      	bgt.n	8002c50 <CheckAndChangeDistanceMode+0x40>
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	dc02      	bgt.n	8002c4a <CheckAndChangeDistanceMode+0x3a>
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	da3c      	bge.n	8002cc2 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002c48:	e002      	b.n	8002c50 <CheckAndChangeDistanceMode+0x40>
 8002c4a:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d938      	bls.n	8002cc2 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002c50:	bf00      	nop
	}

	DmaxValid = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002c5e:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	db03      	blt.n	8002c70 <CheckAndChangeDistanceMode+0x60>
 8002c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c7c:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002c80:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7dfa      	ldrb	r2, [r7, #23]
 8002c86:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c96:	7df9      	ldrb	r1, [r7, #23]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff5d 	bl	8002b5a <GenNewPresetMode>
 8002ca0:	e010      	b.n	8002cc4 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002caa:	7df9      	ldrb	r1, [r7, #23]
 8002cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff51 	bl	8002b5a <GenNewPresetMode>
 8002cb8:	e004      	b.n	8002cc4 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e000      	b.n	8002cc4 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002cc2:	bf00      	nop
	}
}
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b08d      	sub	sp, #52	; 0x34
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	603a      	str	r2, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002ce0:	2396      	movs	r3, #150	; 0x96
 8002ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002ce4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002ce8:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002cea:	231e      	movs	r3, #30
 8002cec:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <ComputeRQL+0x104>)
 8002cf0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <ComputeRQL+0x108>)
 8002cf4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002cf6:	f641 139a 	movw	r3, #6554	; 0x199a
 8002cfa:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <ComputeRQL+0x3a>
		returnvalue = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d08:	e05b      	b.n	8002dc2 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002d10:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002d18:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002d1a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	da02      	bge.n	8002d28 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	d103      	bne.n	8002d30 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002d28:	2332      	movs	r3, #50	; 0x32
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d2e:	e048      	b.n	8002dc2 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002d36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dd03      	ble.n	8002d46 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002d3e:	8c3b      	ldrh	r3, [r7, #32]
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d44:	e007      	b.n	8002d56 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002d60:	461a      	mov	r2, r3
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d804      	bhi.n	8002d96 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	e006      	b.n	8002da4 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002d96:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	e002      	b.n	8002da4 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002d9e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b32      	cmp	r3, #50	; 0x32
 8002dae:	d905      	bls.n	8002dbc <ComputeRQL+0xec>
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	bf28      	it	cs
 8002db6:	2364      	movcs	r3, #100	; 0x64
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e000      	b.n	8002dbe <ComputeRQL+0xee>
 8002dbc:	2332      	movs	r3, #50	; 0x32
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3734      	adds	r7, #52	; 0x34
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	0075b333 	.word	0x0075b333
 8002dd8:	0030cccd 	.word	0x0030cccd

08002ddc <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	3b04      	subs	r3, #4
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d83d      	bhi.n	8002e6a <ConvertStatusLite+0x8e>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <ConvertStatusLite+0x18>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e47 	.word	0x08002e47
 8002df8:	08002e41 	.word	0x08002e41
 8002dfc:	08002e4d 	.word	0x08002e4d
 8002e00:	08002e53 	.word	0x08002e53
 8002e04:	08002e5f 	.word	0x08002e5f
 8002e08:	08002e65 	.word	0x08002e65
 8002e0c:	08002e6b 	.word	0x08002e6b
 8002e10:	08002e6b 	.word	0x08002e6b
 8002e14:	08002e59 	.word	0x08002e59
 8002e18:	08002e6b 	.word	0x08002e6b
 8002e1c:	08002e6b 	.word	0x08002e6b
 8002e20:	08002e6b 	.word	0x08002e6b
 8002e24:	08002e6b 	.word	0x08002e6b
 8002e28:	08002e6b 	.word	0x08002e6b
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002e3b 	.word	0x08002e3b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002e34:	230a      	movs	r3, #10
 8002e36:	73fb      	strb	r3, [r7, #15]
		break;
 8002e38:	e019      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	73fb      	strb	r3, [r7, #15]
		break;
 8002e3e:	e016      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002e40:	2304      	movs	r3, #4
 8002e42:	73fb      	strb	r3, [r7, #15]
		break;
 8002e44:	e013      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002e46:	2302      	movs	r3, #2
 8002e48:	73fb      	strb	r3, [r7, #15]
		break;
 8002e4a:	e010      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
		break;
 8002e50:	e00d      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002e52:	2307      	movs	r3, #7
 8002e54:	73fb      	strb	r3, [r7, #15]
		break;
 8002e56:	e00a      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	73fb      	strb	r3, [r7, #15]
		break;
 8002e5c:	e007      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	73fb      	strb	r3, [r7, #15]
		break;
 8002e62:	e004      	b.n	8002e6e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
		break;
 8002e68:	e001      	b.n	8002e6e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002e6a:	23ff      	movs	r3, #255	; 0xff
 8002e6c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	3b05      	subs	r3, #5
 8002e8a:	2b12      	cmp	r3, #18
 8002e8c:	d840      	bhi.n	8002f10 <ConvertStatusHisto+0x94>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <ConvertStatusHisto+0x18>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ee1 	.word	0x08002ee1
 8002e98:	08002ee7 	.word	0x08002ee7
 8002e9c:	08002ef3 	.word	0x08002ef3
 8002ea0:	08002f11 	.word	0x08002f11
 8002ea4:	08002f0b 	.word	0x08002f0b
 8002ea8:	08002f11 	.word	0x08002f11
 8002eac:	08002f11 	.word	0x08002f11
 8002eb0:	08002f11 	.word	0x08002f11
 8002eb4:	08002f11 	.word	0x08002f11
 8002eb8:	08002f11 	.word	0x08002f11
 8002ebc:	08002f11 	.word	0x08002f11
 8002ec0:	08002f11 	.word	0x08002f11
 8002ec4:	08002f11 	.word	0x08002f11
 8002ec8:	08002f11 	.word	0x08002f11
 8002ecc:	08002eed 	.word	0x08002eed
 8002ed0:	08002eff 	.word	0x08002eff
 8002ed4:	08002f11 	.word	0x08002f11
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	08002ef9 	.word	0x08002ef9
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	73fb      	strb	r3, [r7, #15]
		break;
 8002ee4:	e016      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
		break;
 8002eea:	e013      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002eec:	2306      	movs	r3, #6
 8002eee:	73fb      	strb	r3, [r7, #15]
		break;
 8002ef0:	e010      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	73fb      	strb	r3, [r7, #15]
		break;
 8002ef6:	e00d      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	73fb      	strb	r3, [r7, #15]
		break;
 8002efc:	e00a      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002efe:	2307      	movs	r3, #7
 8002f00:	73fb      	strb	r3, [r7, #15]
		break;
 8002f02:	e007      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002f04:	230b      	movs	r3, #11
 8002f06:	73fb      	strb	r3, [r7, #15]
		break;
 8002f08:	e004      	b.n	8002f14 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
		break;
 8002f0e:	e001      	b.n	8002f14 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002f10:	23ff      	movs	r3, #255	; 0xff
 8002f12:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop

08002f24 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b092      	sub	sp, #72	; 0x48
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	70fb      	strb	r3, [r7, #3]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70bb      	strb	r3, [r7, #2]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3318      	adds	r3, #24
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002f64:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff feaf 	bl	8002cd0 <ComputeRQL>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f78:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f86:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002f8c:	025b      	lsls	r3, r3, #9
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb6:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fba:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc0:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002fc8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002fcc:	2b11      	cmp	r3, #17
 8002fce:	d009      	beq.n	8002fe4 <SetTargetData+0xc0>
 8002fd0:	2b11      	cmp	r3, #17
 8002fd2:	dc0f      	bgt.n	8002ff4 <SetTargetData+0xd0>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	dc02      	bgt.n	8002fde <SetTargetData+0xba>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dc03      	bgt.n	8002fe4 <SetTargetData+0xc0>
 8002fdc:	e00a      	b.n	8002ff4 <SetTargetData+0xd0>
 8002fde:	2b0d      	cmp	r3, #13
 8002fe0:	d004      	beq.n	8002fec <SetTargetData+0xc8>
 8002fe2:	e007      	b.n	8002ff4 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	75da      	strb	r2, [r3, #23]
		break;
 8002fea:	e006      	b.n	8002ffa <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fee:	220d      	movs	r2, #13
 8002ff0:	75da      	strb	r2, [r3, #23]
		break;
 8002ff2:	e002      	b.n	8002ffa <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffc:	7ddb      	ldrb	r3, [r3, #23]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d117      	bne.n	8003032 <SetTargetData+0x10e>
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 800300e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8003014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003020:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8003022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003024:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003028:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 800302a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003030:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	7ddb      	ldrb	r3, [r3, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d125      	bne.n	8003086 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003040:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8003048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304c:	2b02      	cmp	r3, #2
 800304e:	d007      	beq.n	8003060 <SetTargetData+0x13c>
 8003050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003054:	2b01      	cmp	r3, #1
 8003056:	d003      	beq.n	8003060 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8003058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800305c:	2b09      	cmp	r3, #9
 800305e:	d109      	bne.n	8003074 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8003060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff09 	bl	8002e7c <ConvertStatusHisto>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	75da      	strb	r2, [r3, #23]
 8003072:	e008      	b.n	8003086 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8003074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff feaf 	bl	8002ddc <ConvertStatusLite>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003084:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800308a:	025b      	lsls	r3, r3, #9
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003094:	461a      	mov	r2, r3
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030aa:	461a      	mov	r2, r3
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	461a      	mov	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fb2d 	bl	800271a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80030c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80030ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 80030d2:	f107 0315 	add.w	r3, r7, #21
 80030d6:	461a      	mov	r2, r3
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff faf8 	bl	80026d0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80030e0:	7d7b      	ldrb	r3, [r7, #21]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <SetTargetData+0x1ce>
 80030e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <SetTargetData+0x1ce>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <SetTargetData+0x1d0>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030fe:	461a      	mov	r2, r3
 8003100:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003104:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	461a      	mov	r2, r3
 800310e:	2101      	movs	r1, #1
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fb02 	bl	800271a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8003116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8003124:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8003128:	f107 0315 	add.w	r3, r7, #21
 800312c:	461a      	mov	r2, r3
 800312e:	2101      	movs	r1, #1
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff facd 	bl	80026d0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8003136:	7d7b      	ldrb	r3, [r7, #21]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <SetTargetData+0x224>
 800313c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <SetTargetData+0x224>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <SetTargetData+0x226>
 8003148:	2300      	movs	r3, #0
 800314a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003154:	461a      	mov	r2, r3
 8003156:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800315a:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800315e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003160:	8a9b      	ldrh	r3, [r3, #20]
 8003162:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003166:	7ddb      	ldrb	r3, [r3, #23]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d110      	bne.n	800318e <SetTargetData+0x26a>
 800316c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003170:	2b00      	cmp	r3, #0
 8003172:	da0c      	bge.n	800318e <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8003174:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003178:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <SetTargetData+0x4e4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	da03      	bge.n	8003188 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8003180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003182:	220e      	movs	r2, #14
 8003184:	75da      	strb	r2, [r3, #23]
 8003186:	e002      	b.n	800318e <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	2200      	movs	r2, #0
 800318c:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	461a      	mov	r2, r3
 8003194:	f248 01be 	movw	r1, #32958	; 0x80be
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f004 f943 	bl	8007424 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 80031a2:	787b      	ldrb	r3, [r7, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80031a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031aa:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 80031b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b2:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d902      	bls.n	80031c0 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 80031ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031bc:	220c      	movs	r2, #12
 80031be:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	461a      	mov	r2, r3
 80031c6:	f248 0191 	movw	r1, #32913	; 0x8091
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f004 f92a 	bl	8007424 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80031d0:	78bb      	ldrb	r3, [r7, #2]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80031de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e0:	8a9b      	ldrh	r3, [r3, #20]
 80031e2:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	2200      	movs	r2, #0
 80031ee:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d106      	bne.n	8003204 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031fc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8003200:	2b01      	cmp	r3, #1
 8003202:	d001      	beq.n	8003208 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8250 	beq.w	80036b0 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8003214:	2b07      	cmp	r3, #7
 8003216:	d004      	beq.n	8003222 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800321a:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 800321c:	2b04      	cmp	r3, #4
 800321e:	f040 8247 	bne.w	80036b0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8003222:	787b      	ldrb	r3, [r7, #1]
 8003224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003226:	4413      	add	r3, r2
 8003228:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800322c:	3320      	adds	r3, #32
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d01c      	beq.n	800326e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003238:	4413      	add	r3, r2
 800323a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800323e:	3320      	adds	r3, #32
 8003240:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003242:	2b04      	cmp	r3, #4
 8003244:	d013      	beq.n	800326e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8003246:	787b      	ldrb	r3, [r7, #1]
 8003248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800324a:	4413      	add	r3, r2
 800324c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003250:	3320      	adds	r3, #32
 8003252:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 822b 	bne.w	80036b0 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800325a:	787b      	ldrb	r3, [r7, #1]
 800325c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325e:	4413      	add	r3, r2
 8003260:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003264:	3324      	adds	r3, #36	; 0x24
 8003266:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8221 	bne.w	80036b0 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003274:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003278:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003280:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003282:	429a      	cmp	r2, r3
 8003284:	d00c      	beq.n	80032a0 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800328c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003290:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003298:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800329a:	429a      	cmp	r2, r3
 800329c:	f040 81dc 	bne.w	8003658 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80032a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80032a6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80032b0:	330c      	adds	r3, #12
 80032b2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80032b6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	2b21      	cmp	r3, #33	; 0x21
 80032ca:	d008      	beq.n	80032de <SetTargetData+0x3ba>
 80032cc:	2b21      	cmp	r3, #33	; 0x21
 80032ce:	f300 81bf 	bgt.w	8003650 <SetTargetData+0x72c>
 80032d2:	2b1b      	cmp	r3, #27
 80032d4:	f000 8113 	beq.w	80034fe <SetTargetData+0x5da>
 80032d8:	2b1e      	cmp	r3, #30
 80032da:	d004      	beq.n	80032e6 <SetTargetData+0x3c2>
 80032dc:	e1b8      	b.n	8003650 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80032e4:	e1b9      	b.n	800365a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80032ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dd0f      	ble.n	8003314 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80032fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032fe:	429a      	cmp	r2, r3
 8003300:	da08      	bge.n	8003314 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003302:	7efb      	ldrb	r3, [r7, #27]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800330e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003312:	e0f3      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800331e:	425b      	negs	r3, r3
 8003320:	429a      	cmp	r2, r3
 8003322:	da10      	bge.n	8003346 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8003324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800332e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003330:	429a      	cmp	r2, r3
 8003332:	dd08      	ble.n	8003346 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8003334:	7efb      	ldrb	r3, [r7, #27]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8003340:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003344:	e0da      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800334c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003350:	429a      	cmp	r2, r3
 8003352:	dd0f      	ble.n	8003374 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800335a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800335e:	429a      	cmp	r2, r3
 8003360:	da08      	bge.n	8003374 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003362:	7efb      	ldrb	r3, [r7, #27]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800336e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003372:	e0c3      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800337e:	425b      	negs	r3, r3
 8003380:	429a      	cmp	r2, r3
 8003382:	da10      	bge.n	80033a6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 800338e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003390:	429a      	cmp	r2, r3
 8003392:	dd08      	ble.n	80033a6 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003394:	7efb      	ldrb	r3, [r7, #27]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033a4:	e0aa      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80033ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dd0f      	ble.n	80033d4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80033ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033be:	429a      	cmp	r2, r3
 80033c0:	da08      	bge.n	80033d4 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80033ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033d2:	e093      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80033d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80033de:	425b      	negs	r3, r3
 80033e0:	429a      	cmp	r2, r3
 80033e2:	da13      	bge.n	800340c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80033e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 80033ee:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80033f0:	429a      	cmp	r2, r3
 80033f2:	dd0b      	ble.n	800340c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80033f4:	7efb      	ldrb	r3, [r7, #27]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003400:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003404:	e07a      	b.n	80034fc <SetTargetData+0x5d8>
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003416:	429a      	cmp	r2, r3
 8003418:	dd0f      	ble.n	800343a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8003420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003424:	429a      	cmp	r2, r3
 8003426:	da08      	bge.n	800343a <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8003428:	7efb      	ldrb	r3, [r7, #27]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8003434:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003438:	e060      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800343a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003444:	425b      	negs	r3, r3
 8003446:	429a      	cmp	r2, r3
 8003448:	da10      	bge.n	800346c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800344a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8003454:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8003456:	429a      	cmp	r2, r3
 8003458:	dd08      	ble.n	800346c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800345a:	7efb      	ldrb	r3, [r7, #27]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800346a:	e047      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8003472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003476:	429a      	cmp	r2, r3
 8003478:	da0c      	bge.n	8003494 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003480:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003484:	429a      	cmp	r2, r3
 8003486:	dd05      	ble.n	8003494 <SetTargetData+0x570>
					AddOffset =
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800348e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003492:	e033      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800349a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dd0f      	ble.n	80034c2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 80034a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	da08      	bge.n	80034c2 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 80034b0:	7efb      	ldrb	r3, [r7, #27]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80034bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034c0:	e01c      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80034c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80034cc:	425b      	negs	r3, r3
 80034ce:	429a      	cmp	r2, r3
 80034d0:	da10      	bge.n	80034f4 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80034d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 80034dc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80034de:	429a      	cmp	r2, r3
 80034e0:	dd08      	ble.n	80034f4 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80034ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034f2:	e003      	b.n	80034fc <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80034fa:	e0ae      	b.n	800365a <SetTargetData+0x736>
 80034fc:	e0ad      	b.n	800365a <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8003504:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003508:	429a      	cmp	r2, r3
 800350a:	dd0f      	ble.n	800352c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003516:	429a      	cmp	r2, r3
 8003518:	da08      	bge.n	800352c <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8003526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800352a:	e090      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800352c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8003536:	425b      	negs	r3, r3
 8003538:	429a      	cmp	r2, r3
 800353a:	da10      	bge.n	800355e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800353c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8003546:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003548:	429a      	cmp	r2, r3
 800354a:	dd08      	ble.n	800355e <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800354c:	7efb      	ldrb	r3, [r7, #27]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8003558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800355c:	e077      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003568:	429a      	cmp	r2, r3
 800356a:	dd0f      	ble.n	800358c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003576:	429a      	cmp	r2, r3
 8003578:	da08      	bge.n	800358c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800357a:	7efb      	ldrb	r3, [r7, #27]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8003586:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800358a:	e060      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800358c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003596:	425b      	negs	r3, r3
 8003598:	429a      	cmp	r2, r3
 800359a:	da10      	bge.n	80035be <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800359c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 80035a6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dd08      	ble.n	80035be <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80035ac:	7efb      	ldrb	r3, [r7, #27]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 80035b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035bc:	e047      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 80035c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	da0c      	bge.n	80035e6 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80035d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dd05      	ble.n	80035e6 <SetTargetData+0x6c2>
					AddOffset =
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80035e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035e4:	e033      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80035ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dd0f      	ble.n	8003614 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80035fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035fe:	429a      	cmp	r2, r3
 8003600:	da08      	bge.n	8003614 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003602:	7efb      	ldrb	r3, [r7, #27]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800360e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003612:	e01c      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800361e:	425b      	negs	r3, r3
 8003620:	429a      	cmp	r2, r3
 8003622:	da10      	bge.n	8003646 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8003624:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 800362e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003630:	429a      	cmp	r2, r3
 8003632:	dd08      	ble.n	8003646 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8003634:	7efb      	ldrb	r3, [r7, #27]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8003640:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003644:	e003      	b.n	800364e <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800364c:	e005      	b.n	800365a <SetTargetData+0x736>
 800364e:	e004      	b.n	800365a <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003656:	e000      	b.n	800365a <SetTargetData+0x736>
			}
		}
 8003658:	bf00      	nop

		if (uwr_status) {
 800365a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800365e:	2b00      	cmp	r3, #0
 8003660:	d026      	beq.n	80036b0 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8003662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003664:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003668:	b29a      	uxth	r2, r3
 800366a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800366e:	4413      	add	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	b21a      	sxth	r2, r3
 8003674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003676:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8003678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800367e:	b29a      	uxth	r2, r3
 8003680:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003684:	4413      	add	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	b21a      	sxth	r2, r3
 800368a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368c:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800368e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003690:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003694:	b29a      	uxth	r2, r3
 8003696:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800369a:	4413      	add	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	b21a      	sxth	r2, r3
 80036a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a2:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 80036a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a6:	2201      	movs	r2, #1
 80036a8:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 80036aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ac:	2200      	movs	r2, #0
 80036ae:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80036b8:	330c      	adds	r3, #12
 80036ba:	8b39      	ldrh	r1, [r7, #24]
 80036bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c4:	7dd1      	ldrb	r1, [r2, #23]
 80036c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036ce:	3320      	adds	r3, #32
 80036d0:	460a      	mov	r2, r1
 80036d2:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d8:	7e11      	ldrb	r1, [r2, #24]
 80036da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036dc:	4413      	add	r3, r2
 80036de:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80036e2:	3324      	adds	r3, #36	; 0x24
 80036e4:	460a      	mov	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80036e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036ee:	461a      	mov	r2, r3
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 80036f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3748      	adds	r7, #72	; 0x48
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop

08003704 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b091      	sub	sp, #68	; 0x44
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3318      	adds	r3, #24
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	7c9a      	ldrb	r2, [r3, #18]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	789a      	ldrb	r2, [r3, #2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800374e:	4293      	cmp	r3, r2
 8003750:	bfa8      	it	ge
 8003752:	4613      	movge	r3, r2
 8003754:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800375a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	78da      	ldrb	r2, [r3, #3]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003772:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	7c9b      	ldrb	r3, [r3, #18]
 8003780:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003784:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <SetMeasurementData+0x90>

		iteration = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003792:	e003      	b.n	800379c <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003794:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003798:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 800379c:	2300      	movs	r3, #0
 800379e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80037a2:	e048      	b.n	8003836 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80037a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3308      	adds	r3, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 80037b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037bc:	224c      	movs	r2, #76	; 0x4c
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	3310      	adds	r3, #16
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 80037cc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d114      	bne.n	80037fe <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7918      	ldrb	r0, [r3, #4]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	7c1b      	ldrb	r3, [r3, #16]
 80037dc:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80037e0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	9202      	str	r2, [sp, #8]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	9201      	str	r2, [sp, #4]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4623      	mov	r3, r4
 80037f0:	4602      	mov	r2, r0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff fb96 	bl	8002f24 <SetTargetData>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	7ddb      	ldrb	r3, [r3, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003816:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800381a:	429a      	cmp	r2, r3
 800381c:	da06      	bge.n	800382c <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	8a9b      	ldrh	r3, [r3, #20]
 8003822:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8003824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003828:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 800382c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003830:	3301      	adds	r3, #1
 8003832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003836:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800383a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800383e:	429a      	cmp	r2, r3
 8003840:	d3b0      	bcc.n	80037a4 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800384e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003852:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800385a:	e01f      	b.n	800389c <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800385c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003866:	330c      	adds	r3, #12
 8003868:	2100      	movs	r1, #0
 800386a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800386e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	4413      	add	r3, r2
 8003876:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800387a:	3320      	adds	r3, #32
 800387c:	22ff      	movs	r2, #255	; 0xff
 800387e:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	4413      	add	r3, r2
 8003888:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800388c:	3324      	adds	r3, #36	; 0x24
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003896:	3301      	adds	r3, #1
 8003898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800389c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d9db      	bls.n	800385c <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 80038a4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11b      	bne.n	80038e4 <SetMeasurementData+0x1e0>
 80038ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 80038b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3308      	adds	r3, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 80038c8:	2304      	movs	r3, #4
 80038ca:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 80038cc:	7efb      	ldrb	r3, [r7, #27]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	337e      	adds	r3, #126	; 0x7e
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff f996 	bl	8002c10 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 80038e4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3734      	adds	r7, #52	; 0x34
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}

080038f0 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3318      	adds	r3, #24
 8003902:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800390a:	3308      	adds	r3, #8
 800390c:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	21ff      	movs	r1, #255	; 0xff
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	f015 fea6 	bl	8019664 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	2102      	movs	r1, #2
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f002 fc2e 	bl	800617e <VL53L1_get_device_results>
 8003922:	4603      	mov	r3, r0
 8003924:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8003926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	2b07      	cmp	r3, #7
 8003934:	d002      	beq.n	800393c <VL53L1_GetMultiRangingData+0x4c>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d004      	beq.n	8003944 <VL53L1_GetMultiRangingData+0x54>
 800393a:	e007      	b.n	800394c <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8003942:	e006      	b.n	8003952 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2202      	movs	r2, #2
 8003948:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 800394a:	e002      	b.n	8003952 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fed4 	bl	8003704 <SetMeasurementData>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003960:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b090      	sub	sp, #64	; 0x40
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800397a:	f240 3305 	movw	r3, #773	; 0x305
 800397e:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3318      	adds	r3, #24
 8003984:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	3348      	adds	r3, #72	; 0x48
 800398a:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 800398c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11c      	bne.n	80039ce <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800399a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800399e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 80039a2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8e3 	bl	8003b74 <VL53L1_run_ref_spad_char>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 80039b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 80039bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe fb2c 	bl	8002020 <VL53L1_SetPresetMode>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 80039ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039d2:	f113 0f1d 	cmn.w	r3, #29
 80039d6:	d14e      	bne.n	8003a76 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	2206      	movs	r2, #6
 80039de:	2128      	movs	r1, #40	; 0x28
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f00e fbf6 	bl	80121d2 <VL53L1_read_nvm_raw_data>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 80039ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 80039f4:	f107 020c 	add.w	r2, r7, #12
 80039f8:	2302      	movs	r3, #2
 80039fa:	2114      	movs	r1, #20
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f010 fe5f 	bl	80146c0 <VL53L1_WriteMulti>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8003a08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003a10:	7b3a      	ldrb	r2, [r7, #12]
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8003a16:	7b7a      	ldrb	r2, [r7, #13]
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1a:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	3310      	adds	r3, #16
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8003a24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8003a2c:	2306      	movs	r3, #6
 8003a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a30:	210d      	movs	r1, #13
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f010 fe44 	bl	80146c0 <VL53L1_WriteMulti>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8003a3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d117      	bne.n	8003a76 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	785a      	ldrb	r2, [r3, #1]
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	789a      	ldrb	r2, [r3, #2]
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	78da      	ldrb	r2, [r3, #3]
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	791a      	ldrb	r2, [r3, #4]
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	795a      	ldrb	r2, [r3, #5]
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8003a76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3740      	adds	r7, #64	; 0x40
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d84a      	bhi.n	8003b3c <VL53L1_SmudgeCorrectionEnable+0xb8>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003add 	.word	0x08003add
 8003ab4:	08003afd 	.word	0x08003afd
 8003ab8:	08003b1d 	.word	0x08003b1d
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f004 fbee 	bl	800829e <VL53L1_dynamic_xtalk_correction_disable>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f004 fc17 	bl	80082fa <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003acc:	4603      	mov	r3, r0
 8003ace:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f004 fc40 	bl	8008356 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	733b      	strb	r3, [r7, #12]
		break;
 8003ada:	e032      	b.n	8003b42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f004 fbc7 	bl	8008270 <VL53L1_dynamic_xtalk_correction_enable>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f004 fbf0 	bl	80082cc <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003aec:	4603      	mov	r3, r0
 8003aee:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f004 fc30 	bl	8008356 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003af6:	4603      	mov	r3, r0
 8003af8:	733b      	strb	r3, [r7, #12]
		break;
 8003afa:	e022      	b.n	8003b42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f004 fbb7 	bl	8008270 <VL53L1_dynamic_xtalk_correction_enable>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f004 fbe0 	bl	80082cc <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f004 fc09 	bl	8008328 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8003b16:	4603      	mov	r3, r0
 8003b18:	733b      	strb	r3, [r7, #12]
		break;
 8003b1a:	e012      	b.n	8003b42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f004 fba7 	bl	8008270 <VL53L1_dynamic_xtalk_correction_enable>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f004 fbe7 	bl	80082fa <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f004 fc10 	bl	8008356 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003b36:	4603      	mov	r3, r0
 8003b38:	733b      	strb	r3, [r7, #12]
		break;
 8003b3a:	e002      	b.n	8003b42 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003b3c:	23fc      	movs	r3, #252	; 0xfc
 8003b3e:	73fb      	strb	r3, [r7, #15]
		break;
 8003b40:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003b62:	7b3b      	ldrb	r3, [r7, #12]
 8003b64:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3318      	adds	r3, #24
 8003b86:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003b8e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003b90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f007 fc99 	bl	800b4d0 <VL53L1_enable_powerforce>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d117      	bne.n	8003bda <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	7858      	ldrb	r0, [r3, #1]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	685c      	ldr	r4, [r3, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	891d      	ldrh	r5, [r3, #8]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	899b      	ldrh	r3, [r3, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	8952      	ldrh	r2, [r2, #10]
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003bc4:	9102      	str	r1, [sp, #8]
 8003bc6:	9201      	str	r2, [sp, #4]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	4622      	mov	r2, r4
 8003bce:	4601      	mov	r1, r0
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f009 fbda 	bl	800d38a <VL53L1_set_ref_spad_char_config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f891 	bl	8003d10 <VL53L1_run_device_test>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003bfa:	f107 020c 	add.w	r2, r7, #12
 8003bfe:	2302      	movs	r3, #2
 8003c00:	21d9      	movs	r1, #217	; 0xd9
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f010 fd92 	bl	801472c <VL53L1_ReadMulti>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003c0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003c14:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1c:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003c20:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003c34:	f107 020c 	add.w	r2, r7, #12
 8003c38:	2302      	movs	r3, #2
 8003c3a:	2114      	movs	r1, #20
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f010 fd3f 	bl	80146c0 <VL53L1_WriteMulti>
 8003c42:	4603      	mov	r3, r0
 8003c44:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003c4e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003c56:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003c5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d108      	bne.n	8003c78 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003c66:	f107 020c 	add.w	r2, r7, #12
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	21ac      	movs	r1, #172	; 0xac
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f010 fd5c 	bl	801472c <VL53L1_ReadMulti>
 8003c74:	4603      	mov	r3, r0
 8003c76:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003c80:	f107 020c 	add.w	r2, r7, #12
 8003c84:	2306      	movs	r3, #6
 8003c86:	210d      	movs	r1, #13
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f010 fd19 	bl	80146c0 <VL53L1_WriteMulti>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d117      	bne.n	8003cca <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003c9a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003ca2:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003caa:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003cba:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003cc2:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003cca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d114      	bne.n	8003cfc <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d00c      	beq.n	8003cf6 <VL53L1_run_ref_spad_char+0x182>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	dc0e      	bgt.n	8003cfe <VL53L1_run_ref_spad_char+0x18a>
 8003ce0:	2b0e      	cmp	r3, #14
 8003ce2:	d002      	beq.n	8003cea <VL53L1_run_ref_spad_char+0x176>
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d003      	beq.n	8003cf0 <VL53L1_run_ref_spad_char+0x17c>
 8003ce8:	e009      	b.n	8003cfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003cea:	23e4      	movs	r3, #228	; 0xe4
 8003cec:	77fb      	strb	r3, [r7, #31]
			break;
 8003cee:	e006      	b.n	8003cfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003cf0:	23e3      	movs	r3, #227	; 0xe3
 8003cf2:	77fb      	strb	r3, [r7, #31]
			break;
 8003cf4:	e003      	b.n	8003cfe <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003cf6:	23e2      	movs	r3, #226	; 0xe2
 8003cf8:	77fb      	strb	r3, [r7, #31]
			break;
 8003cfa:	e000      	b.n	8003cfe <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003cfc:	bf00      	nop



	*pcal_status = status;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	7ffa      	ldrb	r2, [r7, #31]
 8003d02:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003d04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bdb0      	pop	{r4, r5, r7, pc}

08003d10 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3318      	adds	r3, #24
 8003d24:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003d32:	f107 030b 	add.w	r3, r7, #11
 8003d36:	461a      	mov	r2, r3
 8003d38:	2130      	movs	r1, #48	; 0x30
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f010 fd88 	bl	8014850 <VL53L1_RdByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003d4c:	7afa      	ldrb	r2, [r7, #11]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f007 fb39 	bl	800b3d8 <VL53L1_start_test>
 8003d66:	4603      	mov	r3, r0
 8003d68:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f00f ff5c 	bl	8013c30 <VL53L1_wait_for_test_completion>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003d84:	f107 020c 	add.w	r2, r7, #12
 8003d88:	2302      	movs	r3, #2
 8003d8a:	2189      	movs	r1, #137	; 0x89
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f010 fccd 	bl	801472c <VL53L1_ReadMulti>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003d9e:	7b3a      	ldrb	r2, [r7, #12]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003da6:	7b7a      	ldrb	r2, [r7, #13]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d108      	bne.n	8003dda <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f007 fba1 	bl	800b518 <VL53L1_clear_interrupt>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003de2:	2100      	movs	r1, #0
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f007 faf7 	bl	800b3d8 <VL53L1_start_test>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b21      	cmp	r3, #33	; 0x21
 8003e0e:	d006      	beq.n	8003e1e <select_offset_per_vcsel+0x24>
 8003e10:	2b21      	cmp	r3, #33	; 0x21
 8003e12:	dc2b      	bgt.n	8003e6c <select_offset_per_vcsel+0x72>
 8003e14:	2b1b      	cmp	r3, #27
 8003e16:	d01c      	beq.n	8003e52 <select_offset_per_vcsel+0x58>
 8003e18:	2b1e      	cmp	r3, #30
 8003e1a:	d00d      	beq.n	8003e38 <select_offset_per_vcsel+0x3e>
 8003e1c:	e026      	b.n	8003e6c <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e24:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003e28:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003e34:	817b      	strh	r3, [r7, #10]
		break;
 8003e36:	e02b      	b.n	8003e90 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003e42:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003e4e:	817b      	strh	r3, [r7, #10]
		break;
 8003e50:	e01e      	b.n	8003e90 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e58:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003e5c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003e68:	817b      	strh	r3, [r7, #10]
		break;
 8003e6a:	e011      	b.n	8003e90 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e72:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003e76:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003e82:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003e84:	23fc      	movs	r3, #252	; 0xfc
 8003e86:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	801a      	strh	r2, [r3, #0]
		break;
 8003e8e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e96:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8003e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003ea0:	7a7b      	ldrb	r3, [r7, #9]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <select_offset_per_vcsel+0xb6>
 8003eaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003eae:	e001      	b.n	8003eb4 <select_offset_per_vcsel+0xba>
 8003eb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	8013      	strh	r3, [r2, #0]

	return status;
 8003eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003ec8:	b490      	push	{r4, r7}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003efa:	e021      	b.n	8003f40 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003efc:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	0052      	lsls	r2, r2, #1
 8003f0a:	441a      	add	r2, r3
 8003f0c:	00d3      	lsls	r3, r2, #3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	460b      	mov	r3, r1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	440b      	add	r3, r1
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	4423      	add	r3, r4
 8003f1c:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003f20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	4413      	add	r3, r2
 8003f28:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003f2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3206      	adds	r2, #6
 8003f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003f3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f40:	79bb      	ldrb	r3, [r7, #6]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3d8      	bcc.n	8003efc <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d047      	beq.n	8003fe0 <vl53l1_diff_histo_stddev+0x118>
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f5e:	e03a      	b.n	8003fd6 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003f60:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	0052      	lsls	r2, r2, #1
 8003f6e:	441a      	add	r2, r3
 8003f70:	00d3      	lsls	r3, r2, #3
 8003f72:	461a      	mov	r2, r3
 8003f74:	460b      	mov	r3, r1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4423      	add	r3, r4
 8003f80:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003f84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f90:	fb03 f202 	mul.w	r2, r3, r2
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f9a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003f9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3206      	adds	r2, #6
 8003fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003fc0:	69b8      	ldr	r0, [r7, #24]
 8003fc2:	6979      	ldr	r1, [r7, #20]
 8003fc4:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	441a      	add	r2, r3
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fd6:	79bb      	ldrb	r3, [r7, #6]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3bf      	bcc.n	8003f60 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003fe0:	bf00      	nop
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc90      	pop	{r4, r7}
 8003fe8:	4770      	bx	lr

08003fea <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003fea:	b5b0      	push	{r4, r5, r7, lr}
 8003fec:	b08c      	sub	sp, #48	; 0x30
 8003fee:	af02      	add	r7, sp, #8
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3318      	adds	r3, #24
 8003ff8:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 800400e:	2300      	movs	r3, #0
 8004010:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800401a:	2318      	movs	r3, #24
 800401c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	461a      	mov	r2, r3
 8004024:	f248 018f 	movw	r1, #32911	; 0x808f
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f003 f9fb 	bl	8007424 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	461a      	mov	r2, r3
 8004034:	f248 018e 	movw	r1, #32910	; 0x808e
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f003 f9f3 	bl	8007424 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 811b 	bne.w	8004284 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8004068:	7efb      	ldrb	r3, [r7, #27]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	7eba      	ldrb	r2, [r7, #26]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800408c:	3b01      	subs	r3, #1
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004092:	e004      	b.n	800409e <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800409e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80040a2:	7efb      	ldrb	r3, [r7, #27]
 80040a4:	69f8      	ldr	r0, [r7, #28]
 80040a6:	461a      	mov	r2, r3
 80040a8:	0052      	lsls	r2, r2, #1
 80040aa:	441a      	add	r2, r3
 80040ac:	0153      	lsls	r3, r2, #5
 80040ae:	461a      	mov	r2, r3
 80040b0:	460b      	mov	r3, r1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	440b      	add	r3, r1
 80040b6:	019b      	lsls	r3, r3, #6
 80040b8:	4413      	add	r3, r2
 80040ba:	4403      	add	r3, r0
 80040bc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 80040c0:	3308      	adds	r3, #8
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dd0c      	ble.n	80040e2 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 80040c8:	7e79      	ldrb	r1, [r7, #25]
 80040ca:	7efa      	ldrb	r2, [r7, #27]
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	69f8      	ldr	r0, [r7, #28]
 80040de:	f7ff fef3 	bl	8003ec8 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	db23      	blt.n	8004132 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80040f0:	3318      	adds	r3, #24
 80040f2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f015 fab3 	bl	8019664 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8004110:	7efb      	ldrb	r3, [r7, #27]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	2206      	movs	r2, #6
 800411e:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8004122:	e034      	b.n	800418e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412a:	2207      	movs	r2, #7
 800412c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8004130:	e02d      	b.n	800418e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800413c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004144:	e01e      	b.n	8004184 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8004146:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800414a:	7e39      	ldrb	r1, [r7, #24]
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	3006      	adds	r0, #6
 8004156:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800415a:	69f8      	ldr	r0, [r7, #28]
 800415c:	461a      	mov	r2, r3
 800415e:	0052      	lsls	r2, r2, #1
 8004160:	441a      	add	r2, r3
 8004162:	00d3      	lsls	r3, r2, #3
 8004164:	461a      	mov	r2, r3
 8004166:	460b      	mov	r3, r1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	440b      	add	r3, r1
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4413      	add	r3, r2
 8004170:	442b      	add	r3, r5
 8004172:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004176:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800417a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800417e:	3301      	adds	r3, #1
 8004180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004184:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004188:	7ebb      	ldrb	r3, [r7, #26]
 800418a:	429a      	cmp	r2, r3
 800418c:	d3db      	bcc.n	8004146 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004198:	461a      	mov	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	3b01      	subs	r3, #1
 800419e:	429a      	cmp	r2, r3
 80041a0:	d109      	bne.n	80041b6 <vl53l1_histo_merge+0x1cc>
 80041a2:	7efb      	ldrb	r3, [r7, #27]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d106      	bne.n	80041b6 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 80041b4:	e00e      	b.n	80041d4 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 80041b6:	7efb      	ldrb	r3, [r7, #27]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10b      	bne.n	80041d4 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80041d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <vl53l1_histo_merge+0x1f8>
 80041dc:	7efb      	ldrb	r3, [r7, #27]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d069      	beq.n	80042b6 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d162      	bne.n	80042b6 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041f4:	e008      	b.n	8004208 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 80041f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	3206      	adds	r2, #6
 80041fc:	2100      	movs	r1, #0
 80041fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004204:	3301      	adds	r3, #1
 8004206:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004208:	7ebb      	ldrb	r3, [r7, #26]
 800420a:	b29b      	uxth	r3, r3
 800420c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800420e:	429a      	cmp	r2, r3
 8004210:	d3f1      	bcc.n	80041f6 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8004212:	2300      	movs	r3, #0
 8004214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004216:	e02f      	b.n	8004278 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8004218:	2300      	movs	r3, #0
 800421a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800421e:	e023      	b.n	8004268 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8004220:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3206      	adds	r2, #6
 8004226:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800422a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800422e:	7efb      	ldrb	r3, [r7, #27]
 8004230:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8004232:	69fc      	ldr	r4, [r7, #28]
 8004234:	461a      	mov	r2, r3
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	441a      	add	r2, r3
 800423a:	00d3      	lsls	r3, r2, #3
 800423c:	461a      	mov	r2, r3
 800423e:	460b      	mov	r3, r1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	440b      	add	r3, r1
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	4413      	add	r3, r2
 8004248:	442b      	add	r3, r5
 800424a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800424e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8004252:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004254:	18c1      	adds	r1, r0, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3206      	adds	r2, #6
 800425a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800425e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004262:	3301      	adds	r3, #1
 8004264:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004268:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	429a      	cmp	r2, r3
 8004270:	dbd6      	blt.n	8004220 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8004272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004274:	3301      	adds	r3, #1
 8004276:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004278:	7ebb      	ldrb	r3, [r7, #26]
 800427a:	b29b      	uxth	r3, r3
 800427c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800427e:	429a      	cmp	r2, r3
 8004280:	d3ca      	bcc.n	8004218 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004282:	e018      	b.n	80042b6 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800428e:	3b01      	subs	r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d105      	bne.n	80042b6 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 80042b6:	bf00      	nop
 80042b8:	3728      	adds	r7, #40	; 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080042c0 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b0c6      	sub	sp, #280	; 0x118
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ce:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80042dc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 80042e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ec:	2200      	movs	r2, #0
 80042ee:	2185      	movs	r1, #133	; 0x85
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f010 fa51 	bl	8014798 <VL53L1_WrByte>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80042fc:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8004304:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004308:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	f007 f8df 	bl	800b4d0 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004312:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8004316:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800431a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800431e:	f248 018c 	movw	r1, #32908	; 0x808c
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	f003 f87e 	bl	8007424 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	2b03      	cmp	r3, #3
 800432e:	d81b      	bhi.n	8004368 <VL53L1_load_patch+0xa8>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <VL53L1_load_patch+0x78>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	08004351 	.word	0x08004351
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
	case 0:
		patch_power = 0x00;
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800434e:	e00e      	b.n	800436e <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8004350:	2310      	movs	r3, #16
 8004352:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004356:	e00a      	b.n	800436e <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8004358:	2320      	movs	r3, #32
 800435a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800435e:	e006      	b.n	800436e <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004366:	e002      	b.n	800436e <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 800436e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004372:	2b00      	cmp	r3, #0
 8004374:	d134      	bne.n	80043e0 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8004376:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800437a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800437e:	2229      	movs	r2, #41	; 0x29
 8004380:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004382:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800438a:	22c9      	movs	r2, #201	; 0xc9
 800438c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800438e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004392:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004396:	220e      	movs	r2, #14
 8004398:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800439a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800439e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043a2:	2240      	movs	r2, #64	; 0x40
 80043a4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80043a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ae:	2228      	movs	r2, #40	; 0x28
 80043b0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80043b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c0:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 80043c2:	f107 020c 	add.w	r2, r7, #12
 80043c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ca:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80043ce:	2306      	movs	r3, #6
 80043d0:	f240 4176 	movw	r1, #1142	; 0x476
 80043d4:	6800      	ldr	r0, [r0, #0]
 80043d6:	f010 f973 	bl	80146c0 <VL53L1_WriteMulti>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80043e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d132      	bne.n	800444e <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 80043e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043f0:	2203      	movs	r2, #3
 80043f2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80043f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043fc:	226d      	movs	r2, #109	; 0x6d
 80043fe:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004404:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004408:	2203      	movs	r2, #3
 800440a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800440c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004414:	226f      	movs	r2, #111	; 0x6f
 8004416:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004418:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800441c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004420:	2207      	movs	r2, #7
 8004422:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004424:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004428:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800442c:	2229      	movs	r2, #41	; 0x29
 800442e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8004430:	f107 020c 	add.w	r2, r7, #12
 8004434:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004438:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800443c:	2306      	movs	r3, #6
 800443e:	f240 4196 	movw	r1, #1174	; 0x496
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	f010 f93c 	bl	80146c0 <VL53L1_WriteMulti>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 800444e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11a      	bne.n	800448c <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8004456:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800445a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800446a:	2207      	movs	r2, #7
 800446c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800446e:	f107 020c 	add.w	r2, r7, #12
 8004472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004476:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800447a:	2302      	movs	r3, #2
 800447c:	f240 4172 	movw	r1, #1138	; 0x472
 8004480:	6800      	ldr	r0, [r0, #0]
 8004482:	f010 f91d 	bl	80146c0 <VL53L1_WriteMulti>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 800448c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11a      	bne.n	80044ca <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004498:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80044a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044a8:	2207      	movs	r2, #7
 80044aa:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80044ac:	f107 020c 	add.w	r2, r7, #12
 80044b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044b4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80044b8:	2302      	movs	r3, #2
 80044ba:	f240 4174 	movw	r1, #1140	; 0x474
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	f010 f8fe 	bl	80146c0 <VL53L1_WriteMulti>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 80044ca:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 80044d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044da:	2201      	movs	r2, #1
 80044dc:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f010 f959 	bl	8014798 <VL53L1_WrByte>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 80044ec:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 80044f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044fc:	2201      	movs	r2, #1
 80044fe:	2185      	movs	r1, #133	; 0x85
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f010 f949 	bl	8014798 <VL53L1_WrByte>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800450c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004510:	4618      	mov	r0, r3
 8004512:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8004530:	2200      	movs	r2, #0
 8004532:	2185      	movs	r1, #133	; 0x85
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f010 f92f 	bl	8014798 <VL53L1_WrByte>
 800453a:	4603      	mov	r3, r0
 800453c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800453e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f006 ffd4 	bl	800b4f4 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 800454c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f010 f91c 	bl	8014798 <VL53L1_WrByte>
 8004560:	4603      	mov	r3, r0
 8004562:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 800456c:	2201      	movs	r2, #1
 800456e:	2185      	movs	r1, #133	; 0x85
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f010 f911 	bl	8014798 <VL53L1_WrByte>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800457a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004586:	b5b0      	push	{r4, r5, r7, lr}
 8004588:	b08a      	sub	sp, #40	; 0x28
 800458a:	af04      	add	r7, sp, #16
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3318      	adds	r3, #24
 800459a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80045a2:	3308      	adds	r3, #8
 80045a4:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 80045aa:	2162      	movs	r1, #98	; 0x62
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f006 f810 	bl	800a5d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2204      	movs	r2, #4
 80045b6:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2210      	movs	r2, #16
 80045c2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	75bb      	strb	r3, [r7, #22]
 80045d2:	e01b      	b.n	800460c <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 80045d4:	7dba      	ldrb	r2, [r7, #22]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	3308      	adds	r3, #8
 80045e8:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004606:	7dbb      	ldrb	r3, [r7, #22]
 8004608:	3301      	adds	r3, #1
 800460a:	75bb      	strb	r3, [r7, #22]
 800460c:	7dbb      	ldrb	r3, [r7, #22]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	d9e0      	bls.n	80045d4 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2210      	movs	r2, #16
 8004616:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2210      	movs	r2, #16
 8004626:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004632:	2300      	movs	r3, #0
 8004634:	75bb      	strb	r3, [r7, #22]
 8004636:	e039      	b.n	80046ac <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8004638:	7dba      	ldrb	r2, [r7, #22]
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 800464e:	7dba      	ldrb	r2, [r7, #22]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8004664:	7dba      	ldrb	r2, [r7, #22]
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800467a:	7dba      	ldrb	r2, [r7, #22]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004690:	7dba      	ldrb	r2, [r7, #22]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80046a6:	7dbb      	ldrb	r3, [r7, #22]
 80046a8:	3301      	adds	r3, #1
 80046aa:	75bb      	strb	r3, [r7, #22]
 80046ac:	7dbb      	ldrb	r3, [r7, #22]
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d9c2      	bls.n	8004638 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2201      	movs	r2, #1
 80046bc:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2200      	movs	r2, #0
 80046c2:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2200      	movs	r2, #0
 80046c8:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2201      	movs	r2, #1
 80046ce:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2201      	movs	r2, #1
 80046d4:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2201      	movs	r2, #1
 80046da:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046e2:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80046ea:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80046f2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2264      	movs	r2, #100	; 0x64
 80046f8:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004700:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f240 72db 	movw	r2, #2011	; 0x7db
 8004728:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8004732:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f005 ff2e 	bl	800a598 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004742:	3318      	adds	r3, #24
 8004744:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f014 ff8a 	bl	8019664 <memset>
	pdev->bin_rec_pos = 0;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <VL53L1_data_init+0x1fa>
 800476e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8b8 	bl	80048ec <VL53L1_read_p2p_data>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800478e:	4618      	mov	r0, r3
 8004790:	f003 fdf8 	bl	8008384 <VL53L1_init_refspadchar_config_struct>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8004798:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 fe10 	bl	80083cc <VL53L1_init_ssc_config_struct>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f003 fe21 	bl	800840e <VL53L1_init_xtalk_config_struct>
 80047cc:	4603      	mov	r3, r0
 80047ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 fe89 	bl	80084f6 <VL53L1_init_xtalk_extract_config_struct>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 feac 	bl	8008554 <VL53L1_init_offset_cal_config_struct>
 80047fc:	4603      	mov	r3, r0
 80047fe:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800480e:	4618      	mov	r0, r3
 8004810:	f003 fec7 	bl	80085a2 <VL53L1_init_zone_cal_config_struct>
 8004814:	4603      	mov	r3, r0
 8004816:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f003 fedb 	bl	80085ea <VL53L1_init_hist_post_process_config_struct>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 8004838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d107      	bne.n	8004850 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004846:	4618      	mov	r0, r3
 8004848:	f004 f8f6 	bl	8008a38 <VL53L1_init_hist_gen3_dmax_config_struct>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d107      	bne.n	8004868 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800485e:	4618      	mov	r0, r3
 8004860:	f003 ff32 	bl	80086c8 <VL53L1_init_tuning_parm_storage_struct>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8004868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	7858      	ldrb	r0, [r3, #1]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	8b1c      	ldrh	r4, [r3, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	689d      	ldr	r5, [r3, #8]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	6912      	ldr	r2, [r2, #16]
 8004884:	6939      	ldr	r1, [r7, #16]
 8004886:	6949      	ldr	r1, [r1, #20]
 8004888:	9102      	str	r1, [sp, #8]
 800488a:	9201      	str	r2, [sp, #4]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	462b      	mov	r3, r5
 8004890:	4622      	mov	r2, r4
 8004892:	4601      	mov	r1, r0
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fc8f 	bl	80051b8 <VL53L1_set_preset_mode>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048a4:	461a      	mov	r2, r3
 80048a6:	2118      	movs	r1, #24
 80048a8:	2000      	movs	r0, #0
 80048aa:	f00a fa90 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80048b4:	461a      	mov	r2, r3
 80048b6:	2118      	movs	r1, #24
 80048b8:	2000      	movs	r0, #0
 80048ba:	f00a fa88 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80048c4:	461a      	mov	r2, r3
 80048c6:	210c      	movs	r1, #12
 80048c8:	2000      	movs	r0, #0
 80048ca:	f006 fc26 	bl	800b11a <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f009 fcd2 	bl	800e278 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f009 fbd1 	bl	800e07c <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f009 fcf7 	bl	800e2ce <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80048e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bdb0      	pop	{r4, r5, r7, pc}

080048ec <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b091      	sub	sp, #68	; 0x44
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3318      	adds	r3, #24
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	3348      	adds	r3, #72	; 0x48
 800490c:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	339c      	adds	r3, #156	; 0x9c
 8004912:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004914:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f00d fdd1 	bl	80124cc <VL53L1_get_static_nvm_managed>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004930:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	3348      	adds	r3, #72	; 0x48
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f00d ff02 	bl	8012748 <VL53L1_get_customer_nvm_managed>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800494a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800494e:	2b00      	cmp	r3, #0
 8004950:	d117      	bne.n	8004982 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f00e fdda 	bl	8013514 <VL53L1_get_nvm_copy_data>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8004966:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f006 f921 	bl	800abc4 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004982:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10e      	bne.n	80049a8 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	895b      	ldrh	r3, [r3, #10]
 800498e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 80049a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d108      	bne.n	80049c2 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	33c0      	adds	r3, #192	; 0xc0
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f00d fc3c 	bl	8012234 <VL53L1_read_nvm_optical_centre>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 80049c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	3360      	adds	r3, #96	; 0x60
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f00d fc52 	bl	801227a <VL53L1_read_nvm_cal_peak_rate_map>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 80049dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d12d      	bne.n	8004a40 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	339c      	adds	r3, #156	; 0x9c
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f00d fc6b 	bl	80122c6 <VL53L1_read_nvm_additional_offset_cal_data>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	889b      	ldrh	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d120      	bne.n	8004a40 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11c      	bne.n	8004a40 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2280      	movs	r2, #128	; 0x80
 8004a0a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004a12:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	3102      	adds	r1, #2
 8004a2c:	9103      	str	r1, [sp, #12]
 8004a2e:	9202      	str	r2, [sp, #8]
 8004a30:	2238      	movs	r2, #56	; 0x38
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	23ff      	movs	r3, #255	; 0xff
 8004a38:	22c7      	movs	r2, #199	; 0xc7
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	f008 f934 	bl	800cca8 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8004a40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d12f      	bne.n	8004aa8 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f00d fc5a 	bl	801230c <VL53L1_read_nvm_fmt_range_results_data>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8004a5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d120      	bne.n	8004aa8 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004a66:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004a6e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004a76:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d006      	beq.n	8004a96 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004a94:	e003      	b.n	8004a9e <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2214      	movs	r2, #20
 8004a9a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004aa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	461a      	mov	r2, r3
 8004aba:	21de      	movs	r1, #222	; 0xde
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f00f fefb 	bl	80148b8 <VL53L1_RdWord>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad2:	d204      	bcs.n	8004ade <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004ada:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004ade:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	33bc      	adds	r3, #188	; 0xbc
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f97d 	bl	8004dec <VL53L1_get_mode_mitigation_roi>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d114      	bne.n	8004b2c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3734      	adds	r7, #52	; 0x34
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}

08004b38 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3318      	adds	r3, #24
 8004b4a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b52:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b5a:	23f1      	movs	r3, #241	; 0xf1
 8004b5c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10e      	bne.n	8004b84 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b72:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004b76:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bae:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004bb6:	23f1      	movs	r3, #241	; 0xf1
 8004bb8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bce:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004bd2:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b088      	sub	sp, #32
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3318      	adds	r3, #24
 8004c00:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c0c:	23f1      	movs	r3, #241	; 0xf1
 8004c0e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11b      	bne.n	8004c50 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004c3c:	9201      	str	r2, [sp, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	460b      	mov	r3, r1
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	68b8      	ldr	r0, [r7, #8]
 8004c48:	f006 fe0b 	bl	800b862 <VL53L1_calc_timeout_register_values>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3318      	adds	r3, #24
 8004c72:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c86:	23f1      	movs	r3, #241	; 0xf1
 8004c88:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004c8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d14a      	bne.n	8004d28 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f006 fc56 	bl	800b552 <VL53L1_calc_macro_period_us>
 8004ca6:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f006 fd14 	bl	800b6de <VL53L1_calc_timeout_us>
 8004cb6:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004cc2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004cd0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004cd2:	4413      	add	r3, r2
 8004cd4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004cd6:	8a7b      	ldrh	r3, [r7, #18]
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f006 fd66 	bl	800b7ac <VL53L1_calc_decoded_timeout_us>
 8004ce0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004cec:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004cee:	8a7b      	ldrh	r3, [r7, #18]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004cfa:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004cfc:	4413      	add	r3, r2
 8004cfe:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d00:	8a7b      	ldrh	r3, [r7, #18]
 8004d02:	6979      	ldr	r1, [r7, #20]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f006 fd51 	bl	800b7ac <VL53L1_calc_decoded_timeout_us>
 8004d0a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004d28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3318      	adds	r3, #24
 8004d4a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004d50:	7afb      	ldrb	r3, [r7, #11]
 8004d52:	2b07      	cmp	r3, #7
 8004d54:	d81c      	bhi.n	8004d90 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004d5c:	7afb      	ldrb	r3, [r7, #11]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004d6c:	7dbb      	ldrb	r3, [r7, #22]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	7afb      	ldrb	r3, [r7, #11]
 8004d84:	fa42 f303 	asr.w	r3, r2, r3
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e001      	b.n	8004d94 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004d90:	23fc      	movs	r3, #252	; 0xfc
 8004d92:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3318      	adds	r3, #24
 8004db6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	7858      	ldrb	r0, [r3, #1]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	7819      	ldrb	r1, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f007 fdeb 	bl	800c9a2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	7898      	ldrb	r0, [r3, #2]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	78d9      	ldrb	r1, [r3, #3]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f007 fe20 	bl	800ca20 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004e12:	f107 020e 	add.w	r2, r7, #14
 8004e16:	f107 010d 	add.w	r1, r7, #13
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f00a f880 	bl	800ef20 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004e20:	7bba      	ldrb	r2, [r7, #14]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004e26:	7b7a      	ldrb	r2, [r7, #13]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004e32:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3318      	adds	r3, #24
 8004e68:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	331c      	adds	r3, #28
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	4619      	mov	r1, r3
 8004e78:	f014 fbe6 	bl	8019648 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	785a      	ldrb	r2, [r3, #1]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	33c2      	adds	r3, #194	; 0xc2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f00f fbce 	bl	8014636 <VL53L1_init_zone_config_histogram_bins>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004eae:	e00f      	b.n	8004ed0 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d807      	bhi.n	8004ec8 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004ec6:	e003      	b.n	8004ed0 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2211      	movs	r2, #17
 8004ecc:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3318      	adds	r3, #24
 8004eee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	33c2      	adds	r3, #194	; 0xc2
 8004ef4:	226c      	movs	r2, #108	; 0x6c
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f014 fba5 	bl	8019648 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3318      	adds	r3, #24
 8004f24:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	2b26      	cmp	r3, #38	; 0x26
 8004f2c:	f200 8139 	bhi.w	80051a2 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004fd5 	.word	0x08004fd5
 8004f3c:	08004fd5 	.word	0x08004fd5
 8004f40:	08004fd5 	.word	0x08004fd5
 8004f44:	08004fd5 	.word	0x08004fd5
 8004f48:	08004fd5 	.word	0x08004fd5
 8004f4c:	08004fff 	.word	0x08004fff
 8004f50:	08004fff 	.word	0x08004fff
 8004f54:	08004fff 	.word	0x08004fff
 8004f58:	080051a3 	.word	0x080051a3
 8004f5c:	080051a3 	.word	0x080051a3
 8004f60:	08005053 	.word	0x08005053
 8004f64:	080050fb 	.word	0x080050fb
 8004f68:	08005053 	.word	0x08005053
 8004f6c:	080051a3 	.word	0x080051a3
 8004f70:	080051a3 	.word	0x080051a3
 8004f74:	080051a3 	.word	0x080051a3
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fff 	.word	0x08004fff
 8004f80:	08005053 	.word	0x08005053
 8004f84:	08005053 	.word	0x08005053
 8004f88:	08005053 	.word	0x08005053
 8004f8c:	08005053 	.word	0x08005053
 8004f90:	08005053 	.word	0x08005053
 8004f94:	0800507d 	.word	0x0800507d
 8004f98:	080050a7 	.word	0x080050a7
 8004f9c:	080050d1 	.word	0x080050d1
 8004fa0:	08005053 	.word	0x08005053
 8004fa4:	08005053 	.word	0x08005053
 8004fa8:	08005053 	.word	0x08005053
 8004fac:	08005125 	.word	0x08005125
 8004fb0:	08005125 	.word	0x08005125
 8004fb4:	08005125 	.word	0x08005125
 8004fb8:	0800514f 	.word	0x0800514f
 8004fbc:	0800514f 	.word	0x0800514f
 8004fc0:	0800514f 	.word	0x0800514f
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08005029 	.word	0x08005029
 8004fd0:	08005179 	.word	0x08005179
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	601a      	str	r2, [r3, #0]
	break;
 8004ffc:	e0d4      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	601a      	str	r2, [r3, #0]
	break;
 8005026:	e0bf      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	601a      	str	r2, [r3, #0]
	break;
 8005050:	e0aa      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	601a      	str	r2, [r3, #0]

	break;
 800507a:	e095      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	601a      	str	r2, [r3, #0]
	break;
 80050a4:	e080      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	601a      	str	r2, [r3, #0]
	break;
 80050ce:	e06b      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	601a      	str	r2, [r3, #0]
	break;
 80050f8:	e056      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	601a      	str	r2, [r3, #0]
	break;
 8005122:	e041      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	601a      	str	r2, [r3, #0]
	break;
 800514c:	e02c      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	601a      	str	r2, [r3, #0]
	break;
 8005176:	e017      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	601a      	str	r2, [r3, #0]
	break;
 80051a0:	e002      	b.n	80051a8 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80051a2:	23fc      	movs	r3, #252	; 0xfc
 80051a4:	75fb      	strb	r3, [r7, #23]
		break;
 80051a6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80051a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b098      	sub	sp, #96	; 0x60
 80051bc:	af06      	add	r7, sp, #24
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	72fb      	strb	r3, [r7, #11]
 80051c6:	4613      	mov	r3, r2
 80051c8:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3318      	adds	r3, #24
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80051dc:	3308      	adds	r3, #8
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 80051e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80051e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ea:	f203 3342 	addw	r3, r3, #834	; 0x342
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f2:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	f203 3362 	addw	r3, r3, #866	; 0x362
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005202:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005212:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005216:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	33c2      	adds	r3, #194	; 0xc2
 800521c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800521e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005220:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005224:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800522c:	3318      	adds	r3, #24
 800522e:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8005230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005232:	7afa      	ldrb	r2, [r7, #11]
 8005234:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800523a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005240:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005246:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8005248:	2103      	movs	r1, #3
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f005 f9c1 	bl	800a5d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	3b01      	subs	r3, #1
 8005254:	2b26      	cmp	r3, #38	; 0x26
 8005256:	f200 8321 	bhi.w	800589c <VL53L1_set_preset_mode+0x6e4>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <VL53L1_set_preset_mode+0xa8>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	080052fd 	.word	0x080052fd
 8005264:	08005321 	.word	0x08005321
 8005268:	08005345 	.word	0x08005345
 800526c:	08005369 	.word	0x08005369
 8005270:	0800538d 	.word	0x0800538d
 8005274:	080053b1 	.word	0x080053b1
 8005278:	080053d5 	.word	0x080053d5
 800527c:	080053f9 	.word	0x080053f9
 8005280:	0800589d 	.word	0x0800589d
 8005284:	0800589d 	.word	0x0800589d
 8005288:	0800541d 	.word	0x0800541d
 800528c:	08005585 	.word	0x08005585
 8005290:	08005715 	.word	0x08005715
 8005294:	0800573d 	.word	0x0800573d
 8005298:	08005765 	.word	0x08005765
 800529c:	0800578d 	.word	0x0800578d
 80052a0:	080057b5 	.word	0x080057b5
 80052a4:	080057d9 	.word	0x080057d9
 80052a8:	0800555d 	.word	0x0800555d
 80052ac:	08005445 	.word	0x08005445
 80052b0:	0800546d 	.word	0x0800546d
 80052b4:	08005495 	.word	0x08005495
 80052b8:	080054bd 	.word	0x080054bd
 80052bc:	080054e5 	.word	0x080054e5
 80052c0:	0800550d 	.word	0x0800550d
 80052c4:	08005535 	.word	0x08005535
 80052c8:	080055ad 	.word	0x080055ad
 80052cc:	080055d5 	.word	0x080055d5
 80052d0:	080055fd 	.word	0x080055fd
 80052d4:	08005625 	.word	0x08005625
 80052d8:	0800564d 	.word	0x0800564d
 80052dc:	08005675 	.word	0x08005675
 80052e0:	0800569d 	.word	0x0800569d
 80052e4:	080056c5 	.word	0x080056c5
 80052e8:	080056ed 	.word	0x080056ed
 80052ec:	080057fd 	.word	0x080057fd
 80052f0:	08005825 	.word	0x08005825
 80052f4:	0800584d 	.word	0x0800584d
 80052f8:	08005875 	.word	0x08005875

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005312:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005314:	f003 fbc6 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800531e:	e2c1      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	9302      	str	r3, [sp, #8]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005338:	f003 fd2d 	bl	8008d96 <VL53L1_preset_mode_standard_ranging_short_range>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005342:	e2af      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800535a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800535c:	f003 fd60 	bl	8008e20 <VL53L1_preset_mode_standard_ranging_long_range>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005366:	e29d      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005380:	f003 fd93 	bl	8008eaa <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800538a:	e28b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	9302      	str	r3, [sp, #8]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053a4:	f003 fdaa 	bl	8008efc <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053ae:	e279      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053c8:	f003 fdc1 	bl	8008f4e <VL53L1_preset_mode_timed_ranging>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053d2:	e267      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053ec:	f003 fded 	bl	8008fca <VL53L1_preset_mode_timed_ranging_short_range>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053f6:	e255      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005410:	f003 fe19 	bl	8009046 <VL53L1_preset_mode_timed_ranging_long_range>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800541a:	e243      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	9302      	str	r3, [sp, #8]
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005436:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005438:	f003 fefb 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005442:	e22f      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	9302      	str	r3, [sp, #8]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800545e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005460:	f003 ff7c 	bl	800935c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800546a:	e21b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	9304      	str	r3, [sp, #16]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005486:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005488:	f003 ffcc 	bl	8009424 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005492:	e207      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054b0:	f003 ffe0 	bl	8009474 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054ba:	e1f3      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054d8:	f004 f830 	bl	800953c <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054e2:	e1df      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	9303      	str	r3, [sp, #12]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	9302      	str	r3, [sp, #8]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005500:	f004 fe25 	bl	800a14e <VL53L1_preset_mode_histogram_multizone>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800550a:	e1cb      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	9304      	str	r3, [sp, #16]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005524:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005528:	f004 fe63 	bl	800a1f2 <VL53L1_preset_mode_histogram_multizone_short_range>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005532:	e1b7      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	9303      	str	r3, [sp, #12]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800554e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005550:	f004 fea1 	bl	800a296 <VL53L1_preset_mode_histogram_multizone_long_range>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800555a:	e1a3      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	9302      	str	r3, [sp, #8]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005578:	f004 ffde 	bl	800a538 <VL53L1_preset_mode_histogram_ranging_ref>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005582:	e18f      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	9302      	str	r3, [sp, #8]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a0:	f003 fff4 	bl	800958c <VL53L1_preset_mode_histogram_ranging_short_timing>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055aa:	e17b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	9303      	str	r3, [sp, #12]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	9302      	str	r3, [sp, #8]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055c8:	f004 f86c 	bl	80096a4 <VL53L1_preset_mode_histogram_long_range>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055d2:	e167      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055f0:	f004 f8f6 	bl	80097e0 <VL53L1_preset_mode_histogram_long_range_mm1>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055fa:	e153      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005614:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005616:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005618:	f004 f943 	bl	80098a2 <VL53L1_preset_mode_histogram_long_range_mm2>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005622:	e13f      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800563e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005640:	f004 f957 	bl	80098f2 <VL53L1_preset_mode_histogram_medium_range>
 8005644:	4603      	mov	r3, r0
 8005646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800564a:	e12b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005666:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005668:	f004 f9e1 	bl	8009a2e <VL53L1_preset_mode_histogram_medium_range_mm1>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005672:	e117      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	9302      	str	r3, [sp, #8]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800568e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005690:	f004 fa2e 	bl	8009af0 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800569a:	e103      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056b8:	f004 fa42 	bl	8009b40 <VL53L1_preset_mode_histogram_short_range>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056c2:	e0ef      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056e0:	f004 fb4c 	bl	8009d7c <VL53L1_preset_mode_histogram_short_range_mm1>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056ea:	e0db      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005708:	f004 fb99 	bl	8009e3e <VL53L1_preset_mode_histogram_short_range_mm2>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005712:	e0c7      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	9302      	str	r3, [sp, #8]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800572e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005730:	f004 fbad 	bl	8009e8e <VL53L1_preset_mode_histogram_characterisation>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800573a:	e0b3      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005758:	f004 fbca 	bl	8009ef0 <VL53L1_preset_mode_histogram_xtalk_planar>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005762:	e09f      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800577e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005780:	f004 fc2d 	bl	8009fde <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800578a:	e08b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057a8:	f004 fcad 	bl	800a106 <VL53L1_preset_mode_histogram_xtalk_mm2>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057b2:	e077      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057cc:	f004 fdb5 	bl	800a33a <VL53L1_preset_mode_olt>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057d6:	e065      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057f0:	f003 fce5 	bl	80091be <VL53L1_preset_mode_singleshot_ranging>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057fa:	e053      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	9304      	str	r3, [sp, #16]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	9302      	str	r3, [sp, #8]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005816:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005818:	f003 fc7d 	bl	8009116 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005822:	e03f      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	9304      	str	r3, [sp, #16]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	9303      	str	r3, [sp, #12]
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005840:	f003 fc3f 	bl	80090c2 <VL53L1_preset_mode_low_power_auto_ranging>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800584a:	e02b      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005866:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005868:	f003 fc7f 	bl	800916a <VL53L1_preset_mode_low_power_auto_long_ranging>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005872:	e017      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800588e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005890:	f004 f9f4 	bl	8009c7c <VL53L1_preset_mode_special_histogram_short_range>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800589a:	e003      	b.n	80058a4 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800589c:	23fc      	movs	r3, #252	; 0xfc
 800589e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 80058a2:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 80058a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	893a      	ldrh	r2, [r7, #8]
 80058b0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80058b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b4:	893a      	ldrh	r2, [r7, #8]
 80058b6:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 80058b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 80058c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff f98f 	bl	8004bea <VL53L1_set_timeouts_us>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80058d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80058da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff f92b 	bl	8004b38 <VL53L1_set_inter_measurement_period_ms>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80058ee:	3301      	adds	r3, #1
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f005 fa82 	bl	800ae04 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005900:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005904:	4618      	mov	r0, r3
 8005906:	3748      	adds	r7, #72	; 0x48
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3318      	adds	r3, #24
 800591e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800592a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3318      	adds	r3, #24
 800594e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8005958:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3318      	adds	r3, #24
 800597a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005986:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3318      	adds	r3, #24
 80059aa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80059b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b0d2      	sub	sp, #328	; 0x148
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059d2:	6018      	str	r0, [r3, #0]
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059dc:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 80059e0:	4602      	mov	r2, r0
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059e8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80059ec:	460a      	mov	r2, r1
 80059ee:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80059f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3318      	adds	r3, #24
 8005a02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8005a06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005a14:	3308      	adds	r3, #8
 8005a16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005a1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a1e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005a22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005a26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a2a:	3348      	adds	r3, #72	; 0x48
 8005a2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005a30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a34:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005a38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005a3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a40:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005a44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005a48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a4c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005a50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005a54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a58:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005a5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005a60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a64:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005a68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005a6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a70:	332c      	adds	r3, #44	; 0x2c
 8005a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005a76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a7a:	3348      	adds	r3, #72	; 0x48
 8005a7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005aa0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aa4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005aa8:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005aac:	7812      	ldrb	r2, [r2, #0]
 8005aae:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005ab0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ab4:	791b      	ldrb	r3, [r3, #4]
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005abe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ac2:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005ad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ad4:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005ad6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005ade:	3336      	adds	r3, #54	; 0x36
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005ae6:	4413      	add	r3, r2
 8005ae8:	1d9a      	adds	r2, r3, #6
 8005aea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005af2:	4611      	mov	r1, r2
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f7ff f955 	bl	8004da4 <VL53L1_set_user_zone>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005b00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b04:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b14:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005b22:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005b26:	4413      	add	r3, r2
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b32:	4611      	mov	r1, r2
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f001 fbd7 	bl	80072e8 <VL53L1_set_zone_dss_config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005b40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b44:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005b50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b54:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005b5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b60:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b68:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005b6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b74:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8005b78:	2bff      	cmp	r3, #255	; 0xff
 8005b7a:	d106      	bne.n	8005b8a <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005b7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b92:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d139      	bne.n	8005c0e <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005b9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba2:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d131      	bne.n	8005c0e <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005baa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bae:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005bb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bba:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bcc:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005bd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bdc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005be0:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005be8:	825a      	strh	r2, [r3, #18]
 8005bea:	e003      	b.n	8005bf4 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005bec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005bf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bf8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d805      	bhi.n	8005c0e <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005c02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c06:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005c0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c16:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d117      	bne.n	8005c4e <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005c1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10f      	bne.n	8005c4e <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005c2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c36:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005c3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c3e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005c42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c46:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c4a:	2206      	movs	r2, #6
 8005c4c:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005c4e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005c56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f007 f98c 	bl	800cf7c <VL53L1_save_cfg_data>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005c6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c6e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d826      	bhi.n	8005cc8 <VL53L1_init_and_start_range+0x304>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <VL53L1_init_and_start_range+0x2bc>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005cc1 	.word	0x08005cc1
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005c99 	.word	0x08005c99
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c9e:	e017      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005ca0:	230d      	movs	r3, #13
 8005ca2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005ca6:	e013      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005ca8:	2324      	movs	r3, #36	; 0x24
 8005caa:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005cae:	e00f      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005cb0:	2344      	movs	r3, #68	; 0x44
 8005cb2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005cb6:	e00b      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005cb8:	235a      	movs	r3, #90	; 0x5a
 8005cba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005cbe:	e007      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005cc0:	2371      	movs	r3, #113	; 0x71
 8005cc2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005cc6:	e003      	b.n	8005cd0 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005cc8:	2383      	movs	r3, #131	; 0x83
 8005cca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005cce:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005cd0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005cd4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005cd8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005cea:	e00b      	b.n	8005d04 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005cec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005cfa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005d04:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005d08:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3ed      	bcc.n	8005cec <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005d10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d14:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d917      	bls.n	8005d4e <VL53L1_init_and_start_range+0x38a>
 8005d1e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d113      	bne.n	8005d4e <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d26:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d2a:	f1c3 0301 	rsb	r3, r3, #1
 8005d2e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d32:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005d36:	f107 020c 	add.w	r2, r7, #12
 8005d3a:	4413      	add	r3, r2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	210b      	movs	r1, #11
 8005d40:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005d44:	f00c fb0d 	bl	8012362 <VL53L1_i2c_encode_static_nvm_managed>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005d4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d52:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d917      	bls.n	8005d8c <VL53L1_init_and_start_range+0x3c8>
 8005d5c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d113      	bne.n	8005d8c <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d64:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d68:	f1c3 030d 	rsb	r3, r3, #13
 8005d6c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d70:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005d74:	f107 020c 	add.w	r2, r7, #12
 8005d78:	4413      	add	r3, r2
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2117      	movs	r1, #23
 8005d7e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005d82:	f00c fbca 	bl	801251a <VL53L1_i2c_encode_customer_nvm_managed>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005d8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d90:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d917      	bls.n	8005dca <VL53L1_init_and_start_range+0x406>
 8005d9a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005da2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005da6:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005daa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005dae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005db2:	f107 020c 	add.w	r2, r7, #12
 8005db6:	4413      	add	r3, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	2120      	movs	r1, #32
 8005dbc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005dc0:	f00c fce9 	bl	8012796 <VL53L1_i2c_encode_static_config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dce:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d917      	bls.n	8005e08 <VL53L1_init_and_start_range+0x444>
 8005dd8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d113      	bne.n	8005e08 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005de0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005de4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005de8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005dec:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005df0:	f107 020c 	add.w	r2, r7, #12
 8005df4:	4413      	add	r3, r2
 8005df6:	461a      	mov	r2, r3
 8005df8:	2116      	movs	r1, #22
 8005dfa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005dfe:	f00c fdad 	bl	801295c <VL53L1_i2c_encode_general_config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005e08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e0c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d917      	bls.n	8005e46 <VL53L1_init_and_start_range+0x482>
 8005e16:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005e1e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e22:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005e26:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e2a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005e2e:	f107 020c 	add.w	r2, r7, #12
 8005e32:	4413      	add	r3, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	2117      	movs	r1, #23
 8005e38:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005e3c:	f00c fe12 	bl	8012a64 <VL53L1_i2c_encode_timing_config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005e46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e4a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d036      	beq.n	8005ec2 <VL53L1_init_and_start_range+0x4fe>
 8005e54:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d132      	bne.n	8005ec2 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005e5c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e60:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005e64:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e86:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e98:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ea6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005eaa:	f107 020c 	add.w	r2, r7, #12
 8005eae:	4413      	add	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2112      	movs	r1, #18
 8005eb4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005eb8:	f00c fe56 	bl	8012b68 <VL53L1_i2c_encode_dynamic_config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005ec2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d113      	bne.n	8005ef2 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005eca:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ece:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005ed2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ed6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005eda:	f107 020c 	add.w	r2, r7, #12
 8005ede:	4413      	add	r3, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2105      	movs	r1, #5
 8005ee4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005ee8:	f00c fec3 	bl	8012c72 <VL53L1_i2c_encode_system_control>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005ef2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8005efa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005efe:	f107 020c 	add.w	r2, r7, #12
 8005f02:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005f06:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005f0a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	f00e fbd6 	bl	80146c0 <VL53L1_WriteMulti>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8005f1a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005f22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	f004 fb82 	bl	800a634 <VL53L1_update_ll_driver_rd_state>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005f36:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005f3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	f004 fd15 	bl	800a976 <VL53L1_update_ll_driver_cfg_state>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005f52:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3318      	adds	r3, #24
 8005f70:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005f78:	3308      	adds	r3, #8
 8005f7a:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005f82:	b25b      	sxtb	r3, r3
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f8e:	b25b      	sxtb	r3, r3
 8005f90:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f00c fea1 	bl	8012ce8 <VL53L1_set_system_control>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005fbc:	2103      	movs	r1, #3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f004 fb07 	bl	800a5d2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f004 ff14 	bl	800ae04 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f004 ff46 	bl	800ae6e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe8:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f008 f9b4 	bl	800e35e <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b0c8      	sub	sp, #288	; 0x120
 8006006:	af00      	add	r7, sp, #0
 8006008:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800600c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006010:	6018      	str	r0, [r3, #0]
 8006012:	460a      	mov	r2, r1
 8006014:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006018:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800601c:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006024:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006028:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3318      	adds	r3, #24
 8006030:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8006034:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006038:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800603c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8006040:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006044:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006048:	331c      	adds	r3, #28
 800604a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800604e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006052:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800605a:	2388      	movs	r3, #136	; 0x88
 800605c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800606c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006070:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d008      	beq.n	800608c <VL53L1_get_measurement_results+0x8a>
 800607a:	2b02      	cmp	r3, #2
 800607c:	d10d      	bne.n	800609a <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800607e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006082:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8006086:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800608a:	e00a      	b.n	80060a2 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800608c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006090:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8006094:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006098:	e003      	b.n	80060a2 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800609a:	232c      	movs	r3, #44	; 0x2c
 800609c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80060a0:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 80060a2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 80060aa:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80060ae:	f107 0208 	add.w	r2, r7, #8
 80060b2:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80060b6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80060ba:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 80060be:	6800      	ldr	r0, [r0, #0]
 80060c0:	f00e fb34 	bl	801472c <VL53L1_ReadMulti>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80060ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80060ce:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d917      	bls.n	8006108 <VL53L1_get_measurement_results+0x106>
 80060d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80060e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80060e4:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80060e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80060ec:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	4413      	add	r3, r2
 80060f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80060fa:	4619      	mov	r1, r3
 80060fc:	2038      	movs	r0, #56	; 0x38
 80060fe:	f00c ff71 	bl	8012fe4 <VL53L1_i2c_decode_debug_results>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8006108:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800610c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d017      	beq.n	8006146 <VL53L1_get_measurement_results+0x144>
 8006116:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800611a:	2b00      	cmp	r3, #0
 800611c:	d113      	bne.n	8006146 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800611e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006122:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8006126:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800612a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800612e:	f107 0208 	add.w	r2, r7, #8
 8006132:	4413      	add	r3, r2
 8006134:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8006138:	4619      	mov	r1, r3
 800613a:	2021      	movs	r0, #33	; 0x21
 800613c:	f00c fef1 	bl	8012f22 <VL53L1_i2c_decode_core_results>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006146:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d110      	bne.n	8006170 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006154:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	4413      	add	r3, r2
 800615e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006162:	4619      	mov	r1, r3
 8006164:	202c      	movs	r0, #44	; 0x2c
 8006166:	f00c fde6 	bl	8012d36 <VL53L1_i2c_decode_system_results>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006170:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8006174:	4618      	mov	r0, r3
 8006176:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800617e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006182:	b0a0      	sub	sp, #128	; 0x80
 8006184:	af06      	add	r7, sp, #24
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	460b      	mov	r3, r1
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3318      	adds	r3, #24
 8006198:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80061a0:	3308      	adds	r3, #8
 80061a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 80061a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 80061a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061aa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80061ae:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 80061b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b2:	332c      	adds	r3, #44	; 0x2c
 80061b4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 80061b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b8:	33c2      	adds	r3, #194	; 0xc2
 80061ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 80061bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061be:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80061ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061cc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80061d0:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80061d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80061da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061dc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80061e0:	3318      	adds	r3, #24
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80061e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80061ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ee:	3348      	adds	r3, #72	; 0x48
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 80061f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f4:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8006202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006204:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8006208:	2b01      	cmp	r3, #1
 800620a:	d108      	bne.n	800621e <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006212:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <VL53L1_get_device_results+0xa0>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <VL53L1_get_device_results+0xa2>
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 82a9 	beq.w	8006786 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8006234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006236:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fbd7 	bl	80069f0 <VL53L1_get_histogram_bin_data>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8006248:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800624c:	2b00      	cmp	r3, #0
 800624e:	d118      	bne.n	8006282 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8006254:	2b00      	cmp	r3, #0
 8006256:	d114      	bne.n	8006282 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8006258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800625a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800625e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8006262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626a:	4413      	add	r3, r2
 800626c:	1d1a      	adds	r2, r3, #4
 800626e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006270:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f005 fb6c 	bl	800b954 <VL53L1_hist_copy_and_scale_ambient_info>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8006282:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 8220 	bne.w	80066cc <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800628c:	f107 0313 	add.w	r3, r7, #19
 8006290:	4619      	mov	r1, r3
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f008 f91a 	bl	800e4cc <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 800629e:	2301      	movs	r3, #1
 80062a0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80062a2:	7cfb      	ldrb	r3, [r7, #19]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 80062aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80062b2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	3202      	adds	r2, #2
 80062ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80062c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c4:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 80062cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f005 fa41 	bl	800b760 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 80062de:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80062e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80062f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f6:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80062fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fe:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006312:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8006316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006318:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8006322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006324:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8006328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8006334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8006346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006348:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 800634e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006350:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8006352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006354:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8006358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800635a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f004 fc2f 	bl	800abc4 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8006366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006368:	795b      	ldrb	r3, [r3, #5]
 800636a:	2b03      	cmp	r3, #3
 800636c:	d048      	beq.n	8006400 <VL53L1_get_device_results+0x282>
 800636e:	2b03      	cmp	r3, #3
 8006370:	dc56      	bgt.n	8006420 <VL53L1_get_device_results+0x2a2>
 8006372:	2b01      	cmp	r3, #1
 8006374:	d002      	beq.n	800637c <VL53L1_get_device_results+0x1fe>
 8006376:	2b02      	cmp	r3, #2
 8006378:	d02e      	beq.n	80063d8 <VL53L1_get_device_results+0x25a>
 800637a:	e051      	b.n	8006420 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800637c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800637e:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8006382:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8006392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006394:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8006398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639a:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80063a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a6:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80063aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80063ac:	319c      	adds	r1, #156	; 0x9c
 80063ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80063b0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 80063b4:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 80063b8:	b2a4      	uxth	r4, r4
 80063ba:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80063bc:	351c      	adds	r5, #28
 80063be:	9505      	str	r5, [sp, #20]
 80063c0:	9404      	str	r4, [sp, #16]
 80063c2:	9003      	str	r0, [sp, #12]
 80063c4:	9102      	str	r1, [sp, #8]
 80063c6:	9201      	str	r2, [sp, #4]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4643      	mov	r3, r8
 80063cc:	4672      	mov	r2, lr
 80063ce:	4661      	mov	r1, ip
 80063d0:	4630      	mov	r0, r6
 80063d2:	f006 fa36 	bl	800c842 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80063d6:	e027      	b.n	8006428 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 80063d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 80063e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80063e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80063f6:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fc:	839a      	strh	r2, [r3, #28]
		break;
 80063fe:	e013      	b.n	8006428 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006402:	331c      	adds	r3, #28
 8006404:	4619      	mov	r1, r3
 8006406:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006408:	f7fd fcf7 	bl	8003dfa <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800640c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006412:	b29b      	uxth	r3, r3
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	b29b      	uxth	r3, r3
 8006418:	b21a      	sxth	r2, r3
 800641a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641c:	839a      	strh	r2, [r3, #28]
		break;
 800641e:	e003      	b.n	8006428 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8006420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006422:	2200      	movs	r2, #0
 8006424:	839a      	strh	r2, [r3, #28]
		break;
 8006426:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8006428:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 814f 	bne.w	80066d0 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 800643e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006440:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8006444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006446:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800644a:	b29c      	uxth	r4, r3
 800644c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800644e:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4623      	mov	r3, r4
 8006456:	f006 fb99 	bl	800cb8c <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800645a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800645c:	7999      	ldrb	r1, [r3, #6]
 800645e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006460:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 ff7b 	bl	8007362 <VL53L1_get_dmax_calibration_data>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8006472:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 812c 	bne.w	80066d4 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 800647c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647e:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8006482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006484:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8006488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648a:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800648e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006490:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8006494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006496:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800649a:	3308      	adds	r3, #8
				pdev->wArea2,
 800649c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800649e:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 80064a2:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 80064a4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80064a6:	9405      	str	r4, [sp, #20]
 80064a8:	f107 0413 	add.w	r4, r7, #19
 80064ac:	9404      	str	r4, [sp, #16]
 80064ae:	9203      	str	r2, [sp, #12]
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	9001      	str	r0, [sp, #4]
 80064b4:	9100      	str	r1, [sp, #0]
 80064b6:	4633      	mov	r3, r6
 80064b8:	462a      	mov	r2, r5
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f00e fb45 	bl	8014b4c <VL53L1_ipp_hist_process_data>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d050      	beq.n	8006572 <VL53L1_get_device_results+0x3f4>
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d94d      	bls.n	8006572 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80064d6:	2300      	movs	r3, #0
 80064d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80064dc:	e045      	b.n	800656a <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 80064de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80064e2:	224c      	movs	r2, #76	; 0x4c
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	3310      	adds	r3, #16
 80064ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064ec:	4413      	add	r3, r2
 80064ee:	3304      	adds	r3, #4
 80064f0:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	7cfa      	ldrb	r2, [r7, #19]
 80064f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	7cfa      	ldrb	r2, [r7, #19]
 8006506:	fbb3 f2f2 	udiv	r2, r3, r2
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	7cfa      	ldrb	r2, [r7, #19]
 8006514:	fb93 f2f2 	sdiv	r2, r3, r2
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006520:	461a      	mov	r2, r3
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	fb92 f3f3 	sdiv	r3, r2, r3
 8006528:	b29a      	uxth	r2, r3
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006532:	461a      	mov	r2, r3
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	fb92 f3f3 	sdiv	r3, r2, r3
 800653a:	b29a      	uxth	r2, r3
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006544:	461a      	mov	r2, r3
 8006546:	7cfb      	ldrb	r3, [r7, #19]
 8006548:	fb92 f3f3 	sdiv	r3, r2, r3
 800654c:	b29a      	uxth	r2, r3
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	7cfa      	ldrb	r2, [r7, #19]
 8006558:	fbb3 f2f2 	udiv	r2, r3, r2
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006560:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006564:	3301      	adds	r3, #1
 8006566:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800656a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800656e:	2b03      	cmp	r3, #3
 8006570:	d9b5      	bls.n	80064de <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8006572:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 80ae 	bne.w	80066d8 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 800657c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800657e:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006584:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800658a:	330e      	adds	r3, #14
 800658c:	461a      	mov	r2, r3
 800658e:	f006 f922 	bl	800c7d6 <VL53L1_hist_wrap_dmax>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8006598:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 809d 	bne.w	80066dc <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80065a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80065ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b4:	4413      	add	r3, r2
 80065b6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80065b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80065bc:	4613      	mov	r3, r2
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80065c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ca:	4413      	add	r3, r2
 80065cc:	f103 0208 	add.w	r2, r3, #8
 80065d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f005 fc1d 	bl	800be12 <VL53L1_hist_phase_consistency_check>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 80065de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d17c      	bne.n	80066e0 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80065e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80065f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	4413      	add	r3, r2
 80065fa:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80065fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006600:	4613      	mov	r3, r2
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800660c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800660e:	4413      	add	r3, r2
 8006610:	f103 0208 	add.w	r2, r3, #8
 8006614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006616:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f006 f883 	bl	800c726 <VL53L1_hist_xmonitor_consistency_check>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8006626:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800662a:	2b00      	cmp	r3, #0
 800662c:	d15a      	bne.n	80066e4 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800662e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	2210      	movs	r2, #16
 800663c:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800663e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006640:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006644:	3301      	adds	r3, #1
 8006646:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006652:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8006654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006656:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800665a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800665e:	429a      	cmp	r2, r3
 8006660:	d222      	bcs.n	80066a8 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8006662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666a:	4413      	add	r3, r2
 800666c:	3304      	adds	r3, #4
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006676:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8006686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006688:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80066a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a6:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 80066a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11b      	bne.n	80066e8 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 80066b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b2:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80066bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066be:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80066c2:	331c      	adds	r3, #28
 80066c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066c6:	f006 fbbe 	bl	800ce46 <VL53L1_hist_copy_results_to_sys_and_core>
 80066ca:	e00e      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066cc:	bf00      	nop
 80066ce:	e00c      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066d0:	bf00      	nop
 80066d2:	e00a      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066d4:	bf00      	nop
 80066d6:	e008      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066d8:	bf00      	nop
 80066da:	e006      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066dc:	bf00      	nop
 80066de:	e004      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066e0:	bf00      	nop
 80066e2:	e002      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066e4:	bf00      	nop
 80066e6:	e000      	b.n	80066ea <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80066e8:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d036      	beq.n	8006760 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	79db      	ldrb	r3, [r3, #7]
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d00a      	beq.n	8006710 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 80066fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8006702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f006 fc73 	bl	800cff0 <VL53L1_dynamic_zone_update>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006716:	e015      	b.n	8006744 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8006718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800671e:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <VL53L1_get_device_results+0x5ac>
 8006726:	2103      	movs	r1, #3
 8006728:	e000      	b.n	800672c <VL53L1_get_device_results+0x5ae>
 800672a:	2101      	movs	r1, #1
 800672c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006732:	4413      	add	r3, r2
 8006734:	460a      	mov	r2, r1
 8006736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800673a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800673e:	3301      	adds	r3, #1
 8006740:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006744:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006748:	2b0f      	cmp	r3, #15
 800674a:	d9e5      	bls.n	8006718 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 800674c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f006 fcc6 	bl	800d0e6 <VL53L1_multizone_hist_bins_update>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8006760:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f007 f9d3 	bl	800db14 <VL53L1_dynamic_xtalk_correction_corrector>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006778:	2b00      	cmp	r3, #0
 800677a:	d043      	beq.n	8006804 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e03e      	b.n	8006804 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8006786:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	4619      	mov	r1, r3
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fc35 	bl	8006002 <VL53L1_get_measurement_results>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 800679e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10d      	bne.n	80067c2 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 80067ac:	4618      	mov	r0, r3
 80067ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b0:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 80067b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b6:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 80067ba:	321c      	adds	r2, #28
 80067bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067be:	f000 fc1f 	bl	8007000 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d11c      	bne.n	8006804 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 80067ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f007 fe24 	bl	800e428 <VL53L1_low_power_auto_setup_manual_calibration>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	2201      	movs	r2, #1
 80067ea:	709a      	strb	r2, [r3, #2]
 80067ec:	e00a      	b.n	8006804 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80067ee:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	2202      	movs	r2, #2
 8006802:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006806:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800680a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800680c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800680e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006810:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006816:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800681e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006820:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8006822:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 80b0 	bne.w	800698c <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 800682c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682e:	2210      	movs	r2, #16
 8006830:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8006834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006836:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800683a:	3301      	adds	r3, #1
 800683c:	b2da      	uxtb	r2, r3
 800683e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006840:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8006844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800684a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 800684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006850:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8006854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006858:	429a      	cmp	r2, r3
 800685a:	f080 8097 	bcs.w	800698c <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 800685e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8006862:	4613      	mov	r3, r2
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800686e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006870:	4413      	add	r3, r2
 8006872:	3308      	adds	r3, #8
 8006874:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8006876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006878:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687c:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800687e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006880:	785a      	ldrb	r2, [r3, #1]
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8006886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006888:	789a      	ldrb	r2, [r3, #2]
 800688a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688c:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 800688e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006890:	78da      	ldrb	r2, [r3, #3]
 8006892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006894:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 8006896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006898:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 800689c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 80068a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 80068a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a8:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 80068aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ac:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 80068b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80068b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b8:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80068bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80068c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c4:	7c5a      	ldrb	r2, [r3, #17]
 80068c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c8:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80068ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068cc:	7c9a      	ldrb	r2, [r3, #18]
 80068ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d0:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80068d8:	e052      	b.n	8006980 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80068da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80068de:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80068e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068e4:	204c      	movs	r0, #76	; 0x4c
 80068e6:	fb00 f303 	mul.w	r3, r0, r3
 80068ea:	440b      	add	r3, r1
 80068ec:	3338      	adds	r3, #56	; 0x38
 80068ee:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80068f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4403      	add	r3, r0
 80068fc:	3308      	adds	r3, #8
 80068fe:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006900:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006904:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006908:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800690a:	204c      	movs	r0, #76	; 0x4c
 800690c:	fb00 f303 	mul.w	r3, r0, r3
 8006910:	440b      	add	r3, r1
 8006912:	333c      	adds	r3, #60	; 0x3c
 8006914:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006916:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006918:	4613      	mov	r3, r2
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4403      	add	r3, r0
 8006922:	330c      	adds	r3, #12
 8006924:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006926:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800692a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800692e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006930:	204c      	movs	r0, #76	; 0x4c
 8006932:	fb00 f303 	mul.w	r3, r0, r3
 8006936:	440b      	add	r3, r1
 8006938:	3354      	adds	r3, #84	; 0x54
 800693a:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800693c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800693e:	4613      	mov	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	3310      	adds	r3, #16
 800694a:	4602      	mov	r2, r0
 800694c:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 800694e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8006952:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8006956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006958:	204c      	movs	r0, #76	; 0x4c
 800695a:	fb00 f303 	mul.w	r3, r0, r3
 800695e:	440b      	add	r3, r1
 8006960:	335e      	adds	r3, #94	; 0x5e
 8006962:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3312      	adds	r3, #18
 8006972:	4602      	mov	r2, r0
 8006974:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8006976:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800697a:	3301      	adds	r3, #1
 800697c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006982:	7c9b      	ldrb	r3, [r3, #18]
 8006984:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006988:	429a      	cmp	r2, r3
 800698a:	d3a6      	bcc.n	80068da <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 800698c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006990:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f012 fe58 	bl	8019648 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006998:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f003 ff35 	bl	800a810 <VL53L1_check_ll_driver_rd_state>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80069ac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3768      	adds	r7, #104	; 0x68
 80069b4:	46bd      	mov	sp, r7
 80069b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080069ba <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 80069ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	2203      	movs	r2, #3
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fe fff3 	bl	80059c4 <VL53L1_init_and_start_range>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80069e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b0d2      	sub	sp, #328	; 0x148
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80069fe:	6018      	str	r0, [r3, #0]
 8006a00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a08:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006a10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3318      	adds	r3, #24
 8006a1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006a20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a24:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006a2e:	3308      	adds	r3, #8
 8006a30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006a34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a38:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006a3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a44:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a50:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006a54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8006a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a5c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006a6c:	f107 030c 	add.w	r3, r7, #12
 8006a70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006a9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006aa2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006aaa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006ab2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ab6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006aba:	2353      	movs	r3, #83	; 0x53
 8006abc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006ac0:	2188      	movs	r1, #136	; 0x88
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	f00d fe32 	bl	801472c <VL53L1_ReadMulti>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006ace:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ad8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006ae2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ae6:	785a      	ldrb	r2, [r3, #1]
 8006ae8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006aec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006af6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006afa:	789a      	ldrb	r2, [r3, #2]
 8006afc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006b0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006b0e:	78da      	ldrb	r2, [r3, #3]
 8006b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006b1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	2002      	movs	r0, #2
 8006b28:	f004 fb75 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006b3e:	234e      	movs	r3, #78	; 0x4e
 8006b40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006b44:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006b48:	f107 020c 	add.w	r2, r7, #12
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006b52:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006b56:	2002      	movs	r0, #2
 8006b58:	f004 fb5d 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006b60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006b6e:	2350      	movs	r3, #80	; 0x50
 8006b70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006b74:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006b78:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b7c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006b80:	5cd2      	ldrb	r2, [r2, r3]
 8006b82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006b90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006b9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba6:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006baa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc0:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006bc4:	2351      	movs	r3, #81	; 0x51
 8006bc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006bca:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006bce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006bd2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006bde:	2352      	movs	r3, #82	; 0x52
 8006be0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006be4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006be8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006bec:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006bf0:	5cd2      	ldrb	r2, [r2, r3]
 8006bf2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006bfc:	234d      	movs	r3, #77	; 0x4d
 8006bfe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006c02:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006c06:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006c0a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006c0e:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006c12:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006c14:	2306      	movs	r3, #6
 8006c16:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006c1a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006c1e:	f107 020c 	add.w	r2, r7, #12
 8006c22:	4413      	add	r3, r2
 8006c24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006c2e:	e01a      	b.n	8006c66 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006c30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c34:	2003      	movs	r0, #3
 8006c36:	f004 fb8d 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8006c3a:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006c3c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006c40:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006c42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c46:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3206      	adds	r2, #6
 8006c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006c52:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c56:	3303      	adds	r3, #3
 8006c58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006c5c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006c60:	3301      	adds	r3, #1
 8006c62:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006c66:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006c6a:	2b17      	cmp	r3, #23
 8006c6c:	d9e0      	bls.n	8006c30 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006c6e:	f107 0208 	add.w	r2, r7, #8
 8006c72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c7a:	f248 018d 	movw	r1, #32909	; 0x808d
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f000 fbd0 	bl	8007424 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006c84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d118      	bne.n	8006cc8 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c9a:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006c9e:	3318      	adds	r3, #24
 8006ca0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f012 fcdc 	bl	8019664 <memset>
		pdev->bin_rec_pos = 0;
 8006cac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006cba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006cc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ccc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10b      	bne.n	8006cee <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006cd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cda:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006cde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ce2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ce6:	6811      	ldr	r1, [r2, #0]
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f7fd f97e 	bl	8003fea <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006cee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cf2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006cf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006d02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d06:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006d10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2218      	movs	r2, #24
 8006d1c:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006d1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2218      	movs	r2, #24
 8006d2a:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d30:	78da      	ldrb	r2, [r3, #3]
 8006d32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006d40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d44:	799b      	ldrb	r3, [r3, #6]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006d4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006d5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d5e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d6c:	7c1b      	ldrb	r3, [r3, #16]
 8006d6e:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006d70:	4413      	add	r3, r2
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d86:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006d88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006d96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d9a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006d9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006da2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006da6:	6811      	ldr	r1, [r2, #0]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f004 fed4 	bl	800bb56 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d117      	bne.n	8006dea <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006dc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dca:	795b      	ldrb	r3, [r3, #5]
 8006dcc:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006dce:	4413      	add	r3, r2
 8006dd0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dd8:	799a      	ldrb	r2, [r3, #6]
 8006dda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dde:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006de8:	e016      	b.n	8006e18 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006dea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dee:	79db      	ldrb	r3, [r3, #7]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006df6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dfa:	7a1b      	ldrb	r3, [r3, #8]
 8006dfc:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006dfe:	4413      	add	r3, r2
 8006e00:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e08:	7a5a      	ldrb	r2, [r3, #9]
 8006e0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006e18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2200      	movs	r2, #0
 8006e24:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006e2c:	e01f      	b.n	8006e6e <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006e2e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006e32:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006e36:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	7b1b      	ldrb	r3, [r3, #12]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	d10d      	bne.n	8006e64 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	7adb      	ldrb	r3, [r3, #11]
 8006e54:	3304      	adds	r3, #4
 8006e56:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006e58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006e64:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006e6e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d9db      	bls.n	8006e2e <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006e76:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f004 fcdb 	bl	800b836 <VL53L1_decode_timeout>
 8006e80:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006e82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f007 fb54 	bl	800e54c <VL53L1_calc_pll_period_us>
 8006ea4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006ea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006eac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006ebc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ec0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8006ed8:	f007 fb4f 	bl	800e57a <VL53L1_duration_maths>
 8006edc:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006ede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ee2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006eec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ef0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006efc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f007 fc5e 	bl	800e7c6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8006f0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	f008 f875 	bl	800f002 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f1c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f30:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006f34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8006f40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	789b      	ldrb	r3, [r3, #2]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006f5a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006f5e:	4413      	add	r3, r2
 8006f60:	3302      	adds	r3, #2
 8006f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6a:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7e:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006f80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f92:	2200      	movs	r2, #0
 8006f94:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006f96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f9a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b11      	cmp	r3, #17
 8006faa:	bf8c      	ite	hi
 8006fac:	2201      	movhi	r2, #1
 8006fae:	2200      	movls	r2, #0
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	d11b      	bne.n	8006fee <VL53L1_get_histogram_bin_data+0x5fe>
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <VL53L1_get_histogram_bin_data+0x60c>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d010      	beq.n	8006fee <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006fcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fe4:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006fe6:	23fa      	movs	r3, #250	; 0xfa
 8006fe8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006fec:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006fee:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	0002200e 	.word	0x0002200e

08007000 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8007000:	b480      	push	{r7}
 8007002:	b08b      	sub	sp, #44	; 0x2c
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	78da      	ldrb	r2, [r3, #3]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2200      	movs	r2, #0
 800702e:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2204      	movs	r2, #4
 8007034:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2201      	movs	r2, #1
 800703a:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	8a1b      	ldrh	r3, [r3, #16]
 8007040:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	8a9b      	ldrh	r3, [r3, #20]
 8007046:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	8a5b      	ldrh	r3, [r3, #18]
 800704c:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007054:	e00b      	b.n	800706e <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8007056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4413      	add	r3, r2
 8007060:	2200      	movs	r2, #0
 8007062:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007068:	3301      	adds	r3, #1
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007072:	2b04      	cmp	r3, #4
 8007074:	d9ef      	bls.n	8007056 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	3314      	adds	r3, #20
 800707a:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800707c:	2300      	movs	r3, #0
 800707e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007082:	e0fe      	b.n	8007282 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800708a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	78db      	ldrb	r3, [r3, #3]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	d104      	bne.n	80070b0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	2213      	movs	r2, #19
 80070aa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80070ae:	e007      	b.n	80070c0 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2200      	movs	r2, #0
 80070c4:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2200      	movs	r2, #0
 80070ca:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2200      	movs	r2, #0
 80070d0:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2200      	movs	r2, #0
 80070d6:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2200      	movs	r2, #0
 80070dc:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2200      	movs	r2, #0
 80070e2:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80070e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d05c      	beq.n	80071aa <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 80070f0:	e0a8      	b.n	8007244 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	789b      	ldrb	r3, [r3, #2]
 80070f6:	2b07      	cmp	r3, #7
 80070f8:	d103      	bne.n	8007102 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	8a7a      	ldrh	r2, [r7, #18]
 80070fe:	82da      	strh	r2, [r3, #22]
 8007100:	e00b      	b.n	800711a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	789b      	ldrb	r3, [r3, #2]
 8007106:	2b08      	cmp	r3, #8
 8007108:	d103      	bne.n	8007112 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	8aba      	ldrh	r2, [r7, #20]
 800710e:	82da      	strh	r2, [r3, #22]
 8007110:	e003      	b.n	800711a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	8afa      	ldrh	r2, [r7, #22]
 800711e:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	895b      	ldrh	r3, [r3, #10]
 8007134:	015b      	lsls	r3, r3, #5
 8007136:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713e:	d302      	bcc.n	8007146 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8007140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007144:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	b29a      	uxth	r2, r3
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800715c:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800716e:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	da01      	bge.n	800717a <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8007176:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800717a:	12db      	asrs	r3, r3, #11
 800717c:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	b21a      	sxth	r2, r3
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80071a8:	e04c      	b.n	8007244 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071c0:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	8bdb      	ldrh	r3, [r3, #30]
 80071ce:	015b      	lsls	r3, r3, #5
 80071d0:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d302      	bcc.n	80071e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80071da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071de:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80071f6:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	fb02 f303 	mul.w	r3, r2, r3
 8007200:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007208:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da01      	bge.n	8007214 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8007210:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007214:	12db      	asrs	r3, r3, #11
 8007216:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	b21a      	sxth	r2, r3
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007242:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	334c      	adds	r3, #76	; 0x4c
 8007276:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	3301      	adds	r3, #1
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007286:	2b01      	cmp	r3, #1
 8007288:	f67f aefc 	bls.w	8007084 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2200      	movs	r2, #0
 8007290:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2b11      	cmp	r3, #17
 800729c:	bf8c      	ite	hi
 800729e:	2201      	movhi	r2, #1
 80072a0:	2200      	movls	r2, #0
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d116      	bne.n	80072d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 80072a8:	2201      	movs	r2, #1
 80072aa:	409a      	lsls	r2, r3
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 80072d4:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80072d6:	bf00      	nop
 80072d8:	372c      	adds	r7, #44	; 0x2c
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	0002200e 	.word	0x0002200e

080072e8 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3318      	adds	r3, #24
 80072fa:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	332c      	adds	r3, #44	; 0x2c
 8007300:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b05      	cmp	r3, #5
 8007308:	d109      	bne.n	800731e <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800731c:	e003      	b.n	8007326 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8007326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3318      	adds	r3, #24
 800734a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b088      	sub	sp, #32
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	72fb      	strb	r3, [r7, #11]
 8007370:	4613      	mov	r3, r2
 8007372:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007374:	2300      	movs	r3, #0
 8007376:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3318      	adds	r3, #24
 800737c:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007384:	3308      	adds	r3, #8
 8007386:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	2b03      	cmp	r3, #3
 800738c:	d006      	beq.n	800739c <VL53L1_get_dmax_calibration_data+0x3a>
 800738e:	2b03      	cmp	r3, #3
 8007390:	dc3e      	bgt.n	8007410 <VL53L1_get_dmax_calibration_data+0xae>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d034      	beq.n	8007400 <VL53L1_get_dmax_calibration_data+0x9e>
 8007396:	2b02      	cmp	r3, #2
 8007398:	d02a      	beq.n	80073f0 <VL53L1_get_dmax_calibration_data+0x8e>
 800739a:	e039      	b.n	8007410 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 800739c:	7aba      	ldrb	r2, [r7, #10]
 800739e:	6979      	ldr	r1, [r7, #20]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 80073b6:	7aba      	ldrb	r2, [r7, #10]
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 80073d6:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ec:	811a      	strh	r2, [r3, #8]
	break;
 80073ee:	e012      	b.n	8007416 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 80073f4:	220a      	movs	r2, #10
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f012 f925 	bl	8019648 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 80073fe:	e00a      	b.n	8007416 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8007404:	220a      	movs	r2, #10
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f012 f91d 	bl	8019648 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800740e:	e002      	b.n	8007416 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007410:	23fc      	movs	r3, #252	; 0xfc
 8007412:	77fb      	strb	r3, [r7, #31]
	break;
 8007414:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007416:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8007424:	b480      	push	{r7}
 8007426:	b089      	sub	sp, #36	; 0x24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	460b      	mov	r3, r1
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007432:	2300      	movs	r3, #0
 8007434:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3318      	adds	r3, #24
 800743a:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007442:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800744a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007452:	2bbe      	cmp	r3, #190	; 0xbe
 8007454:	f200 86fc 	bhi.w	8008250 <VL53L1_get_tuning_parm+0xe2c>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <VL53L1_get_tuning_parm+0x3c>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	0800775d 	.word	0x0800775d
 8007464:	0800776d 	.word	0x0800776d
 8007468:	0800777d 	.word	0x0800777d
 800746c:	0800778d 	.word	0x0800778d
 8007470:	0800779b 	.word	0x0800779b
 8007474:	080077a9 	.word	0x080077a9
 8007478:	080077b7 	.word	0x080077b7
 800747c:	080077c5 	.word	0x080077c5
 8007480:	080077d3 	.word	0x080077d3
 8007484:	080077e1 	.word	0x080077e1
 8007488:	080077ef 	.word	0x080077ef
 800748c:	080077fb 	.word	0x080077fb
 8007490:	08007809 	.word	0x08007809
 8007494:	08007817 	.word	0x08007817
 8007498:	08007823 	.word	0x08007823
 800749c:	08007831 	.word	0x08007831
 80074a0:	0800783f 	.word	0x0800783f
 80074a4:	0800784f 	.word	0x0800784f
 80074a8:	0800785f 	.word	0x0800785f
 80074ac:	0800786d 	.word	0x0800786d
 80074b0:	0800787d 	.word	0x0800787d
 80074b4:	0800788b 	.word	0x0800788b
 80074b8:	0800789b 	.word	0x0800789b
 80074bc:	080078ab 	.word	0x080078ab
 80074c0:	080078bb 	.word	0x080078bb
 80074c4:	080078cb 	.word	0x080078cb
 80074c8:	080078db 	.word	0x080078db
 80074cc:	080078eb 	.word	0x080078eb
 80074d0:	080078fb 	.word	0x080078fb
 80074d4:	0800790b 	.word	0x0800790b
 80074d8:	0800791b 	.word	0x0800791b
 80074dc:	08007929 	.word	0x08007929
 80074e0:	08007939 	.word	0x08007939
 80074e4:	08007949 	.word	0x08007949
 80074e8:	08007959 	.word	0x08007959
 80074ec:	08007969 	.word	0x08007969
 80074f0:	08007979 	.word	0x08007979
 80074f4:	08007989 	.word	0x08007989
 80074f8:	08007999 	.word	0x08007999
 80074fc:	080079a9 	.word	0x080079a9
 8007500:	080079b9 	.word	0x080079b9
 8007504:	080079c9 	.word	0x080079c9
 8007508:	080079d9 	.word	0x080079d9
 800750c:	080079e9 	.word	0x080079e9
 8007510:	080079f9 	.word	0x080079f9
 8007514:	08007a09 	.word	0x08007a09
 8007518:	08007a19 	.word	0x08007a19
 800751c:	08007a29 	.word	0x08007a29
 8007520:	08007a39 	.word	0x08007a39
 8007524:	08007a49 	.word	0x08007a49
 8007528:	08007a59 	.word	0x08007a59
 800752c:	08007a67 	.word	0x08007a67
 8007530:	08007a75 	.word	0x08007a75
 8007534:	08007a83 	.word	0x08007a83
 8007538:	08007a91 	.word	0x08007a91
 800753c:	08007a9f 	.word	0x08007a9f
 8007540:	08007aad 	.word	0x08007aad
 8007544:	08007abb 	.word	0x08007abb
 8007548:	08007ac9 	.word	0x08007ac9
 800754c:	08007ad7 	.word	0x08007ad7
 8007550:	08007ae5 	.word	0x08007ae5
 8007554:	08007af3 	.word	0x08007af3
 8007558:	08007b01 	.word	0x08007b01
 800755c:	08007b0f 	.word	0x08007b0f
 8007560:	08007b1d 	.word	0x08007b1d
 8007564:	08007b2b 	.word	0x08007b2b
 8007568:	08007b39 	.word	0x08007b39
 800756c:	08007b47 	.word	0x08007b47
 8007570:	08007b55 	.word	0x08007b55
 8007574:	08007b63 	.word	0x08007b63
 8007578:	08007b71 	.word	0x08007b71
 800757c:	08007b7f 	.word	0x08007b7f
 8007580:	08007b8d 	.word	0x08007b8d
 8007584:	08007b9b 	.word	0x08007b9b
 8007588:	08007ba7 	.word	0x08007ba7
 800758c:	08007bb5 	.word	0x08007bb5
 8007590:	08007bc3 	.word	0x08007bc3
 8007594:	08007bcf 	.word	0x08007bcf
 8007598:	08007bdb 	.word	0x08007bdb
 800759c:	08007be7 	.word	0x08007be7
 80075a0:	08007bf3 	.word	0x08007bf3
 80075a4:	08007bff 	.word	0x08007bff
 80075a8:	08007c0b 	.word	0x08007c0b
 80075ac:	08007c19 	.word	0x08007c19
 80075b0:	08007c27 	.word	0x08007c27
 80075b4:	08007c35 	.word	0x08007c35
 80075b8:	08007c43 	.word	0x08007c43
 80075bc:	08007c51 	.word	0x08007c51
 80075c0:	08007c5f 	.word	0x08007c5f
 80075c4:	08007c6d 	.word	0x08007c6d
 80075c8:	08007c7b 	.word	0x08007c7b
 80075cc:	08007c89 	.word	0x08007c89
 80075d0:	08007c97 	.word	0x08007c97
 80075d4:	08007ca5 	.word	0x08007ca5
 80075d8:	08007cb3 	.word	0x08007cb3
 80075dc:	08007cc1 	.word	0x08007cc1
 80075e0:	08007ccf 	.word	0x08007ccf
 80075e4:	08007cdd 	.word	0x08007cdd
 80075e8:	08007ceb 	.word	0x08007ceb
 80075ec:	08007cf9 	.word	0x08007cf9
 80075f0:	08007d07 	.word	0x08007d07
 80075f4:	08007d15 	.word	0x08007d15
 80075f8:	08007d23 	.word	0x08007d23
 80075fc:	08007d31 	.word	0x08007d31
 8007600:	08007d3f 	.word	0x08007d3f
 8007604:	08007d4d 	.word	0x08007d4d
 8007608:	08007d5b 	.word	0x08007d5b
 800760c:	08007d69 	.word	0x08007d69
 8007610:	08007d77 	.word	0x08007d77
 8007614:	08007d85 	.word	0x08007d85
 8007618:	08007d93 	.word	0x08007d93
 800761c:	08007da1 	.word	0x08007da1
 8007620:	08007daf 	.word	0x08007daf
 8007624:	08007dbd 	.word	0x08007dbd
 8007628:	08007dcb 	.word	0x08007dcb
 800762c:	08007dd9 	.word	0x08007dd9
 8007630:	08007de7 	.word	0x08007de7
 8007634:	08007df5 	.word	0x08007df5
 8007638:	08007e03 	.word	0x08007e03
 800763c:	08007e15 	.word	0x08007e15
 8007640:	08007e27 	.word	0x08007e27
 8007644:	08007e39 	.word	0x08007e39
 8007648:	08007e4b 	.word	0x08007e4b
 800764c:	08007e5d 	.word	0x08007e5d
 8007650:	08007e6f 	.word	0x08007e6f
 8007654:	08007e81 	.word	0x08007e81
 8007658:	08007e93 	.word	0x08007e93
 800765c:	08007ea5 	.word	0x08007ea5
 8007660:	08007eb7 	.word	0x08007eb7
 8007664:	08007ec9 	.word	0x08007ec9
 8007668:	08007edb 	.word	0x08007edb
 800766c:	08007eed 	.word	0x08007eed
 8007670:	08007eff 	.word	0x08007eff
 8007674:	08007f11 	.word	0x08007f11
 8007678:	08007f23 	.word	0x08007f23
 800767c:	08007f35 	.word	0x08007f35
 8007680:	08007f47 	.word	0x08007f47
 8007684:	08007f59 	.word	0x08007f59
 8007688:	08007f67 	.word	0x08007f67
 800768c:	08007f75 	.word	0x08007f75
 8007690:	08007f83 	.word	0x08007f83
 8007694:	08007f91 	.word	0x08007f91
 8007698:	08007f9f 	.word	0x08007f9f
 800769c:	08007fad 	.word	0x08007fad
 80076a0:	08007fbb 	.word	0x08007fbb
 80076a4:	08007fcd 	.word	0x08007fcd
 80076a8:	08007fdb 	.word	0x08007fdb
 80076ac:	08007fe9 	.word	0x08007fe9
 80076b0:	08007ff7 	.word	0x08007ff7
 80076b4:	08008005 	.word	0x08008005
 80076b8:	08008013 	.word	0x08008013
 80076bc:	08008021 	.word	0x08008021
 80076c0:	0800802f 	.word	0x0800802f
 80076c4:	0800803d 	.word	0x0800803d
 80076c8:	0800804b 	.word	0x0800804b
 80076cc:	08008059 	.word	0x08008059
 80076d0:	08008067 	.word	0x08008067
 80076d4:	08008075 	.word	0x08008075
 80076d8:	08008083 	.word	0x08008083
 80076dc:	08008091 	.word	0x08008091
 80076e0:	0800809f 	.word	0x0800809f
 80076e4:	080080ad 	.word	0x080080ad
 80076e8:	080080bb 	.word	0x080080bb
 80076ec:	080080c9 	.word	0x080080c9
 80076f0:	080080d7 	.word	0x080080d7
 80076f4:	080080e5 	.word	0x080080e5
 80076f8:	080080f3 	.word	0x080080f3
 80076fc:	08008101 	.word	0x08008101
 8007700:	0800810f 	.word	0x0800810f
 8007704:	0800811d 	.word	0x0800811d
 8007708:	0800812b 	.word	0x0800812b
 800770c:	08008139 	.word	0x08008139
 8007710:	08008147 	.word	0x08008147
 8007714:	08008155 	.word	0x08008155
 8007718:	08008163 	.word	0x08008163
 800771c:	08008171 	.word	0x08008171
 8007720:	0800817f 	.word	0x0800817f
 8007724:	0800818d 	.word	0x0800818d
 8007728:	0800819b 	.word	0x0800819b
 800772c:	080081a9 	.word	0x080081a9
 8007730:	080081b7 	.word	0x080081b7
 8007734:	080081c5 	.word	0x080081c5
 8007738:	080081d3 	.word	0x080081d3
 800773c:	080081e1 	.word	0x080081e1
 8007740:	080081ef 	.word	0x080081ef
 8007744:	080081fd 	.word	0x080081fd
 8007748:	0800820b 	.word	0x0800820b
 800774c:	08008219 	.word	0x08008219
 8007750:	08008227 	.word	0x08008227
 8007754:	08008235 	.word	0x08008235
 8007758:	08008243 	.word	0x08008243

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007762:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
	break;
 8007768:	f000 bd79 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8007772:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]
	break;
 8007778:	f000 bd71 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007782:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
	break;
 8007788:	f000 bd69 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
	break;
 8007796:	f000 bd62 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
	break;
 80077a4:	f000 bd5b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
	break;
 80077b2:	f000 bd54 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	78db      	ldrb	r3, [r3, #3]
 80077ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
	break;
 80077c0:	f000 bd4d 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
	break;
 80077ce:	f000 bd46 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	795b      	ldrb	r3, [r3, #5]
 80077d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
	break;
 80077dc:	f000 bd3f 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	799b      	ldrb	r3, [r3, #6]
 80077e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
	break;
 80077ea:	f000 bd38 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
	break;
 80077f6:	f000 bd32 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	891b      	ldrh	r3, [r3, #8]
 80077fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
	break;
 8007804:	f000 bd2b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	8a1b      	ldrh	r3, [r3, #16]
 800780c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
	break;
 8007812:	f000 bd24 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
	break;
 800781e:	f000 bd1e 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	7e1b      	ldrb	r3, [r3, #24]
 8007826:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
	break;
 800782c:	f000 bd17 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	8b5b      	ldrh	r3, [r3, #26]
 8007834:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
	break;
 800783a:	f000 bd10 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8007844:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
	break;
 800784a:	f000 bd08 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007854:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601a      	str	r2, [r3, #0]
	break;
 800785a:	f000 bd00 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007862:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]
	break;
 8007868:	f000 bcf9 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]
	break;
 8007878:	f000 bcf1 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	break;
 8007886:	f000 bcea 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
	break;
 8007896:	f000 bce2 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80078a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	break;
 80078a6:	f000 bcda 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80078b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
	break;
 80078b6:	f000 bcd2 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80078c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
	break;
 80078c6:	f000 bcca 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80078d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
	break;
 80078d6:	f000 bcc2 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80078e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	601a      	str	r2, [r3, #0]
	break;
 80078e6:	f000 bcba 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 80078f0:	461a      	mov	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	break;
 80078f6:	f000 bcb2 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
	break;
 8007906:	f000 bcaa 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8007910:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	break;
 8007916:	f000 bca2 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	break;
 8007924:	f000 bc9b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
	break;
 8007934:	f000 bc93 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
	break;
 8007944:	f000 bc8b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 800794e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
	break;
 8007954:	f000 bc83 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800795e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
	break;
 8007964:	f000 bc7b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800796e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
	break;
 8007974:	f000 bc73 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800797e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	break;
 8007984:	f000 bc6b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800798e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
	break;
 8007994:	f000 bc63 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800799e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
	break;
 80079a4:	f000 bc5b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 80079ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
	break;
 80079b4:	f000 bc53 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 80079be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
	break;
 80079c4:	f000 bc4b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80079ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
	break;
 80079d4:	f000 bc43 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	break;
 80079e4:	f000 bc3b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80079ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	break;
 80079f4:	f000 bc33 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	break;
 8007a04:	f000 bc2b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007a0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
	break;
 8007a14:	f000 bc23 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007a1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
	break;
 8007a24:	f000 bc1b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8007a2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	601a      	str	r2, [r3, #0]
	break;
 8007a34:	f000 bc13 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8007a3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
	break;
 8007a44:	f000 bc0b 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8007a4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]
	break;
 8007a54:	f000 bc03 	b.w	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
	break;
 8007a64:	e3fb      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007a6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
	break;
 8007a72:	e3f4      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8007a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	break;
 8007a80:	e3ed      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007a88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
	break;
 8007a8e:	e3e6      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8007a96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	break;
 8007a9c:	e3df      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007aa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]
	break;
 8007aaa:	e3d8      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
	break;
 8007ab8:	e3d1      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
	break;
 8007ac6:	e3ca      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
	break;
 8007ad4:	e3c3      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007adc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
	break;
 8007ae2:	e3bc      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007aea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
	break;
 8007af0:	e3b5      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007af8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
	break;
 8007afe:	e3ae      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8007b06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
	break;
 8007b0c:	e3a7      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007b14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
	break;
 8007b1a:	e3a0      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
	break;
 8007b28:	e399      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	break;
 8007b36:	e392      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	break;
 8007b44:	e38b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
	break;
 8007b52:	e384      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
	break;
 8007b60:	e37d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8007b68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
	break;
 8007b6e:	e376      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8007b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
	break;
 8007b7c:	e36f      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
	break;
 8007b8a:	e368      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
	break;
 8007b98:	e361      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	7c1b      	ldrb	r3, [r3, #16]
 8007b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	break;
 8007ba4:	e35b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
	break;
 8007bb2:	e354      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
	break;
 8007bc0:	e34d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
	break;
 8007bcc:	e347      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
	break;
 8007bd8:	e341      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	8adb      	ldrh	r3, [r3, #22]
 8007bde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
	break;
 8007be4:	e33b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	8b1b      	ldrh	r3, [r3, #24]
 8007bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
	break;
 8007bf0:	e335      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	break;
 8007bfc:	e32f      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
	break;
 8007c08:	e329      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	break;
 8007c16:	e322      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
	break;
 8007c24:	e31b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
	break;
 8007c32:	e314      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	break;
 8007c40:	e30d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007c48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	break;
 8007c4e:	e306      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007c56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
	break;
 8007c5c:	e2ff      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007c64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
	break;
 8007c6a:	e2f8      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007c72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
	break;
 8007c78:	e2f1      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007c80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
	break;
 8007c86:	e2ea      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007c8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
	break;
 8007c94:	e2e3      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007c9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
	break;
 8007ca2:	e2dc      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007caa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	601a      	str	r2, [r3, #0]
	break;
 8007cb0:	e2d5      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007cb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
	break;
 8007cbe:	e2ce      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	break;
 8007ccc:	e2c7      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007cd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
	break;
 8007cda:	e2c0      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007ce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
	break;
 8007ce8:	e2b9      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007cf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
	break;
 8007cf6:	e2b2      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007cfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	601a      	str	r2, [r3, #0]
	break;
 8007d04:	e2ab      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007d0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	601a      	str	r2, [r3, #0]
	break;
 8007d12:	e2a4      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	601a      	str	r2, [r3, #0]
	break;
 8007d20:	e29d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007d28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
	break;
 8007d2e:	e296      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007d36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
	break;
 8007d3c:	e28f      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007d44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
	break;
 8007d4a:	e288      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007d52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
	break;
 8007d58:	e281      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007d60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
	break;
 8007d66:	e27a      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007d6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	break;
 8007d74:	e273      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007d7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
	break;
 8007d82:	e26c      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007d8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
	break;
 8007d90:	e265      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007d98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
	break;
 8007d9e:	e25e      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007da6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	601a      	str	r2, [r3, #0]
	break;
 8007dac:	e257      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007db4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
	break;
 8007dba:	e250      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007dc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]
	break;
 8007dc8:	e249      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007dd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
	break;
 8007dd6:	e242      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007dde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
	break;
 8007de4:	e23b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007dec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
	break;
 8007df2:	e234      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007dfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	break;
 8007e00:	e22d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e08:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007e0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
	break;
 8007e12:	e224      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	break;
 8007e24:	e21b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007e30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
	break;
 8007e36:	e212      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007e42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
	break;
 8007e48:	e209      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e50:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	601a      	str	r2, [r3, #0]
	break;
 8007e5a:	e200      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e62:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007e66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
	break;
 8007e6c:	e1f7      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e74:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007e78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
	break;
 8007e7e:	e1ee      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e86:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007e8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	601a      	str	r2, [r3, #0]
	break;
 8007e90:	e1e5      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007e9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
	break;
 8007ea2:	e1dc      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eaa:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
	break;
 8007eb4:	e1d3      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebc:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007ec0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]
	break;
 8007ec6:	e1ca      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ece:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
	break;
 8007ed8:	e1c1      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee0:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
	break;
 8007eea:	e1b8      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]
	break;
 8007efc:	e1af      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f04:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
	break;
 8007f0e:	e1a6      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f16:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
	break;
 8007f20:	e19d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	break;
 8007f32:	e194      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8007f3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
	break;
 8007f44:	e18b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8007f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	break;
 8007f56:	e182      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
	break;
 8007f64:	e17b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
	break;
 8007f72:	e174      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007f7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
	break;
 8007f80:	e16d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007f88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
	break;
 8007f8e:	e166      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]
	break;
 8007f9c:	e15f      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007fa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
	break;
 8007faa:	e158      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]
	break;
 8007fb8:	e151      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007fc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
	break;
 8007fca:	e148      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
	break;
 8007fd8:	e141      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	break;
 8007fe6:	e13a      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007fee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
	break;
 8007ff4:	e133      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007ffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
	break;
 8008002:	e12c      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800800a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
	break;
 8008010:	e125      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8008018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
	break;
 800801e:	e11e      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8008026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
	break;
 800802c:	e117      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8008034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
	break;
 800803a:	e110      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8008042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
	break;
 8008048:	e109      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8008050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	break;
 8008056:	e102      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800805e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	break;
 8008064:	e0fb      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800806c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
	break;
 8008072:	e0f4      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800807a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
	break;
 8008080:	e0ed      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8008088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
	break;
 800808e:	e0e6      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8008096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
	break;
 800809c:	e0df      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 80080a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
	break;
 80080aa:	e0d8      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 80080b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
	break;
 80080b8:	e0d1      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 80080c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	break;
 80080c6:	e0ca      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 80080ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
	break;
 80080d4:	e0c3      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 80080dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
	break;
 80080e2:	e0bc      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 80080ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	601a      	str	r2, [r3, #0]
	break;
 80080f0:	e0b5      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 80080f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
	break;
 80080fe:	e0ae      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8008106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
	break;
 800810c:	e0a7      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8008114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
	break;
 800811a:	e0a0      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8008122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	601a      	str	r2, [r3, #0]
	break;
 8008128:	e099      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8008130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
	break;
 8008136:	e092      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800813e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
	break;
 8008144:	e08b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800814c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
	break;
 8008152:	e084      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800815a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	601a      	str	r2, [r3, #0]
	break;
 8008160:	e07d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8008168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
	break;
 800816e:	e076      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8008176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
	break;
 800817c:	e06f      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8008184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
	break;
 800818a:	e068      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8008192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	break;
 8008198:	e061      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 80081a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
	break;
 80081a6:	e05a      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 80081ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]
	break;
 80081b4:	e053      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 80081bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	601a      	str	r2, [r3, #0]
	break;
 80081c2:	e04c      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 80081ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
	break;
 80081d0:	e045      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 80081d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
	break;
 80081de:	e03e      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 80081e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	601a      	str	r2, [r3, #0]
	break;
 80081ec:	e037      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 80081f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
	break;
 80081fa:	e030      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8008202:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]
	break;
 8008208:	e029      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8008210:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	break;
 8008216:	e022      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800821e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
	break;
 8008224:	e01b      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800822c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
	break;
 8008232:	e014      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800823a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	601a      	str	r2, [r3, #0]
	break;
 8008240:	e00d      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
	break;
 800824e:	e006      	b.n	800825e <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008256:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008258:	23fc      	movs	r3, #252	; 0xfc
 800825a:	77fb      	strb	r3, [r7, #31]
	break;
 800825c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800825e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3724      	adds	r7, #36	; 0x24
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3318      	adds	r3, #24
 8008280:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008288:	2201      	movs	r2, #1
 800828a:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3318      	adds	r3, #24
 80082ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 80082bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3318      	adds	r3, #24
 80082dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 80082ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3318      	adds	r3, #24
 800830a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008312:	2200      	movs	r2, #0
 8008314:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3318      	adds	r3, #24
 8008338:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008340:	2201      	movs	r2, #1
 8008342:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8008346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3318      	adds	r3, #24
 8008366:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836e:	2200      	movs	r2, #0
 8008370:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8008374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2208      	movs	r2, #8
 8008394:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	220b      	movs	r2, #11
 800839a:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083a2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80083aa:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80083b2:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80083ba:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80083bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2212      	movs	r2, #18
 80083e2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	220f      	movs	r2, #15
 80083e8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2202      	movs	r2, #2
 80083ee:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80083f6:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220c      	movs	r2, #12
 80083fc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80083fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	895b      	ldrh	r3, [r3, #10]
 8008420:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	895b      	ldrh	r3, [r3, #10]
 800843e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2240      	movs	r2, #64	; 0x40
 800846a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10d      	bne.n	8008490 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d108      	bne.n	8008490 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	741a      	strb	r2, [r3, #16]
 800848e:	e002      	b.n	8008496 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2201      	movs	r2, #1
 8008494:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8008496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d114      	bne.n	80084c8 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d110      	bne.n	80084c8 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	7d9b      	ldrb	r3, [r3, #22]
 80084ba:	f003 f879 	bl	800b5b0 <VL53L1_calc_range_ignore_threshold>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	831a      	strh	r2, [r3, #24]
 80084c6:	e002      	b.n	80084ce <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80084d4:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2232      	movs	r2, #50	; 0x32
 80084da:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80084e2:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	228c      	movs	r2, #140	; 0x8c
 80084e8:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80084ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008508:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008510:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2207      	movs	r2, #7
 8008516:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800851e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f242 7210 	movw	r2, #10000	; 0x2710
 8008526:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800852e:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2246      	movs	r2, #70	; 0x46
 8008534:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800853c:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	228c      	movs	r2, #140	; 0x8c
 8008542:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8008544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008566:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800856e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008576:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800857e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2208      	movs	r2, #8
 8008584:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2228      	movs	r2, #40	; 0x28
 800858a:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2209      	movs	r2, #9
 8008590:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80085b4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80085bc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085c4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80085cc:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2210      	movs	r2, #16
 80085d2:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2208      	movs	r2, #8
 80085d8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	4603      	mov	r3, r0
 80085f2:	6039      	str	r1, [r7, #0]
 80085f4:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2204      	movs	r2, #4
 80085fe:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2201      	movs	r2, #1
 800860a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2202      	movs	r2, #2
 8008610:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2250      	movs	r2, #80	; 0x50
 800861c:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2270      	movs	r2, #112	; 0x70
 8008622:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f241 023d 	movw	r2, #4157	; 0x103d
 800862a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2232      	movs	r2, #50	; 0x32
 8008636:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2264      	movs	r2, #100	; 0x64
 800863c:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	22a0      	movs	r2, #160	; 0xa0
 8008648:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2200      	movs	r2, #0
 800864e:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8008656:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2208      	movs	r2, #8
 800865c:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2288      	movs	r2, #136	; 0x88
 8008664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2208      	movs	r2, #8
 800866c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800867e:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	22fa      	movs	r2, #250	; 0xfa
 8008684:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	79fa      	ldrb	r2, [r7, #7]
 800868a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008694:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2232      	movs	r2, #50	; 0x32
 800869a:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80086a2:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	228c      	movs	r2, #140	; 0x8c
 80086a8:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2250      	movs	r2, #80	; 0x50
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2232      	movs	r2, #50	; 0x32
 80086b6:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80086b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	220e      	movs	r2, #14
 80086de:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f642 7294 	movw	r2, #12180	; 0x2f94
 80086e6:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	220e      	movs	r2, #14
 80086ec:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	220a      	movs	r2, #10
 80086f2:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2206      	movs	r2, #6
 80086f8:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	220e      	movs	r2, #14
 80086fe:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	220a      	movs	r2, #10
 8008704:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2206      	movs	r2, #6
 800870a:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2209      	movs	r2, #9
 8008710:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2205      	movs	r2, #5
 8008716:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2203      	movs	r2, #3
 800871c:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2206      	movs	r2, #6
 8008722:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2206      	movs	r2, #6
 8008728:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2206      	movs	r2, #6
 800872e:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2221      	movs	r2, #33	; 0x21
 800873a:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	223c      	movs	r2, #60	; 0x3c
 800874c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	223c      	movs	r2, #60	; 0x3c
 8008752:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	223c      	movs	r2, #60	; 0x3c
 8008758:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2280      	movs	r2, #128	; 0x80
 800875e:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2280      	movs	r2, #128	; 0x80
 8008764:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2280      	movs	r2, #128	; 0x80
 800876a:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2208      	movs	r2, #8
 8008770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2210      	movs	r2, #16
 8008778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80087aa:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80087b2:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80087ba:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80087c2:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 80087d2:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80087da:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f241 7270 	movw	r2, #6000	; 0x1770
 80087e2:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80087ea:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f242 3228 	movw	r2, #9000	; 0x2328
 80087f2:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80087fa:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008802:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800880a:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008812:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800881a:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008822:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f24f 6218 	movw	r2, #63000	; 0xf618
 800882a:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008832:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800883a:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008842:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008850:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008858:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2206      	movs	r2, #6
 8008878:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800888a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f640 22be 	movw	r2, #2750	; 0xabe
 8008894:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	22fa      	movs	r2, #250	; 0xfa
 800889c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088a6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80088b0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80088ba:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80088c4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80088ce:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f64f 7238 	movw	r2, #65336	; 0xff38
 80088d8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	22c8      	movs	r2, #200	; 0xc8
 80088e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	22fa      	movs	r2, #250	; 0xfa
 80088e8:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80088f2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f640 1206 	movw	r2, #2310	; 0x906
 80088fc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f640 1206 	movw	r2, #2310	; 0x906
 800890e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008918:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008922:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f640 421c 	movw	r2, #3100	; 0xc1c
 800892c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008936:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f641 022e 	movw	r2, #6190	; 0x182e
 8008940:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f641 3230 	movw	r2, #6960	; 0x1b30
 800895a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f641 022e 	movw	r2, #6190	; 0x182e
 8008964:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	22fa      	movs	r2, #250	; 0xfa
 800896c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008976:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008980:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f241 1294 	movw	r2, #4500	; 0x1194
 800898a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008994:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	22c8      	movs	r2, #200	; 0xc8
 800899c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f640 3222 	movw	r2, #2850	; 0xb22
 80089a6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f640 42e4 	movw	r2, #3300	; 0xce4
 80089b0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f640 721e 	movw	r2, #3870	; 0xf1e
 80089ca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f241 222a 	movw	r2, #4650	; 0x122a
 80089d4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f640 720a 	movw	r2, #3850	; 0xf0a
 80089de:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008a00:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008a0a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f641 1288 	movw	r2, #6536	; 0x1988
 8008a24:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8008a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008a4a:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2238      	movs	r2, #56	; 0x38
 8008a50:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2270      	movs	r2, #112	; 0x70
 8008a5c:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2210      	movs	r2, #16
 8008a62:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2264      	movs	r2, #100	; 0x64
 8008a68:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a70:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220f      	movs	r2, #15
 8008a76:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2234      	movs	r2, #52	; 0x34
 8008a7c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	22c8      	movs	r2, #200	; 0xc8
 8008a82:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008a8a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a92:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008abc:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2211      	movs	r2, #17
 8008afe:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2202      	movs	r2, #2
 8008b04:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2208      	movs	r2, #8
 8008b16:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	22ff      	movs	r2, #255	; 0xff
 8008b58:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	220b      	movs	r2, #11
 8008b92:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	220d      	movs	r2, #13
 8008ba6:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008bce:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2238      	movs	r2, #56	; 0x38
 8008bda:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	22ff      	movs	r2, #255	; 0xff
 8008be0:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2200      	movs	r2, #0
 8008bec:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	221a      	movs	r2, #26
 8008bf2:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2201      	movs	r2, #1
 8008c04:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	22cc      	movs	r2, #204	; 0xcc
 8008c0a:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	220b      	movs	r2, #11
 8008c10:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2201      	movs	r2, #1
 8008c16:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	22f5      	movs	r2, #245	; 0xf5
 8008c1c:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2209      	movs	r2, #9
 8008c22:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2208      	movs	r2, #8
 8008c38:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2278      	movs	r2, #120	; 0x78
 8008c3e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2207      	movs	r2, #7
 8008c50:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2221      	movs	r2, #33	; 0x21
 8008c56:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2243      	movs	r2, #67	; 0x43
 8008c5c:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2210      	movs	r2, #16
 8008c62:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2232      	movs	r2, #50	; 0x32
 8008c68:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2254      	movs	r2, #84	; 0x54
 8008c6e:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2207      	movs	r2, #7
 8008c74:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2221      	movs	r2, #33	; 0x21
 8008c7a:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2243      	movs	r2, #67	; 0x43
 8008c80:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2210      	movs	r2, #16
 8008c86:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2243      	movs	r2, #67	; 0x43
 8008c92:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2205      	movs	r2, #5
 8008c98:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2221      	movs	r2, #33	; 0x21
 8008caa:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2243      	movs	r2, #67	; 0x43
 8008cb0:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2232      	movs	r2, #50	; 0x32
 8008cbc:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2254      	movs	r2, #84	; 0x54
 8008cc2:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cca:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cd2:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	2210      	movs	r2, #16
 8008cde:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	220f      	movs	r2, #15
 8008cea:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	220f      	movs	r2, #15
 8008cf0:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	2201      	movs	r2, #1
 8008d02:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	2200      	movs	r2, #0
 8008d08:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	2200      	movs	r2, #0
 8008d14:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	220b      	movs	r2, #11
 8008d24:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	2209      	movs	r2, #9
 8008d2a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	22c7      	movs	r2, #199	; 0xc7
 8008d5a:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	22ff      	movs	r2, #255	; 0xff
 8008d60:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	22db      	movs	r2, #219	; 0xdb
 8008d66:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	2200      	movs	r2, #0
 8008d72:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	2201      	movs	r2, #1
 8008d78:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	2221      	movs	r2, #33	; 0x21
 8008d84:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b08a      	sub	sp, #40	; 0x28
 8008d9a:	af04      	add	r7, sp, #16
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff fe70 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d121      	bne.n	8008e14 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2207      	movs	r2, #7
 8008dd4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2205      	movs	r2, #5
 8008dda:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2208      	movs	r2, #8
 8008df0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2238      	movs	r2, #56	; 0x38
 8008df6:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	2207      	movs	r2, #7
 8008dfc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	2205      	movs	r2, #5
 8008e02:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af04      	add	r7, sp, #16
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	9303      	str	r3, [sp, #12]
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	9302      	str	r3, [sp, #8]
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fe2b 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d121      	bne.n	8008e9e <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	220d      	movs	r2, #13
 8008e64:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2208      	movs	r2, #8
 8008e7a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	22b8      	movs	r2, #184	; 0xb8
 8008e80:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	220f      	movs	r2, #15
 8008e86:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	220d      	movs	r2, #13
 8008e8c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e98:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b08a      	sub	sp, #40	; 0x28
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	9303      	str	r3, [sp, #12]
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff fde6 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	223b      	movs	r2, #59	; 0x3b
 8008eee:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af04      	add	r7, sp, #16
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	9302      	str	r3, [sp, #8]
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fdbd 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	225b      	movs	r2, #91	; 0x5b
 8008f40:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b08a      	sub	sp, #40	; 0x28
 8008f52:	af04      	add	r7, sp, #16
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fd94 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11a      	bne.n	8008fbe <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2200      	movs	r2, #0
 8008f92:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	22b1      	movs	r2, #177	; 0xb1
 8008f98:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	22d4      	movs	r2, #212	; 0xd4
 8008fa4:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008fac:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b08a      	sub	sp, #40	; 0x28
 8008fce:	af04      	add	r7, sp, #16
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
 8008fd6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7ff fecf 	bl	8008d96 <VL53L1_preset_mode_standard_ranging_short_range>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11a      	bne.n	800903a <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2200      	movs	r2, #0
 8009008:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2284      	movs	r2, #132	; 0x84
 8009014:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2201      	movs	r2, #1
 800901a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	22b1      	movs	r2, #177	; 0xb1
 8009020:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009028:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	2240      	movs	r2, #64	; 0x40
 8009038:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800903a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b08a      	sub	sp, #40	; 0x28
 800904a:	af04      	add	r7, sp, #16
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff fed6 	bl	8008e20 <VL53L1_preset_mode_standard_ranging_long_range>
 8009074:	4603      	mov	r3, r0
 8009076:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d11a      	bne.n	80090b6 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	2200      	movs	r2, #0
 8009084:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2200      	movs	r2, #0
 800908a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2297      	movs	r2, #151	; 0x97
 8009090:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2200      	movs	r2, #0
 8009096:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	22b1      	movs	r2, #177	; 0xb1
 800909c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80090a4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	2240      	movs	r2, #64	; 0x40
 80090b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80090b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b08a      	sub	sp, #40	; 0x28
 80090c6:	af04      	add	r7, sp, #16
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 80090d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d6:	9303      	str	r3, [sp, #12]
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	9302      	str	r3, [sp, #8]
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff ff2f 	bl	8008f4e <VL53L1_preset_mode_timed_ranging>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80090fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fe:	6a39      	ldr	r1, [r7, #32]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f005 f978 	bl	800e3f6 <VL53L1_config_low_power_auto_mode>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800910a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b08a      	sub	sp, #40	; 0x28
 800911a:	af04      	add	r7, sp, #16
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009124:	2300      	movs	r3, #0
 8009126:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	9303      	str	r3, [sp, #12]
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	9302      	str	r3, [sp, #8]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff ff43 	bl	8008fca <VL53L1_preset_mode_timed_ranging_short_range>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009152:	6a39      	ldr	r1, [r7, #32]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f005 f94e 	bl	800e3f6 <VL53L1_config_low_power_auto_mode>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800915e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b08a      	sub	sp, #40	; 0x28
 800916e:	af04      	add	r7, sp, #16
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009178:	2300      	movs	r3, #0
 800917a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	9302      	str	r3, [sp, #8]
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff ff57 	bl	8009046 <VL53L1_preset_mode_timed_ranging_long_range>
 8009198:	4603      	mov	r3, r0
 800919a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800919c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	6a39      	ldr	r1, [r7, #32]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f005 f924 	bl	800e3f6 <VL53L1_config_low_power_auto_mode>
 80091ae:	4603      	mov	r3, r0
 80091b0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80091b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08a      	sub	sp, #40	; 0x28
 80091c2:	af04      	add	r7, sp, #16
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	9303      	str	r3, [sp, #12]
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	9302      	str	r3, [sp, #8]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fc5c 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d116      	bne.n	8009226 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	2200      	movs	r2, #0
 80091fc:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	22b1      	movs	r2, #177	; 0xb1
 8009208:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	22d4      	movs	r2, #212	; 0xd4
 8009214:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	2210      	movs	r2, #16
 8009224:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b090      	sub	sp, #64	; 0x40
 8009236:	af0a      	add	r7, sp, #40	; 0x28
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
 800923e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009240:	2300      	movs	r3, #0
 8009242:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	9302      	str	r3, [sp, #8]
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	68b8      	ldr	r0, [r7, #8]
 800925c:	f7ff fc22 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 8009260:	4603      	mov	r3, r0
 8009262:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d171      	bne.n	8009350 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009272:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	9308      	str	r3, [sp, #32]
 8009278:	2305      	movs	r3, #5
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	2304      	movs	r3, #4
 800927e:	9306      	str	r3, [sp, #24]
 8009280:	2303      	movs	r3, #3
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	2302      	movs	r3, #2
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	2301      	movs	r3, #1
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	2300      	movs	r3, #0
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	2304      	movs	r3, #4
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	2303      	movs	r3, #3
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2302      	movs	r3, #2
 800929a:	2201      	movs	r2, #1
 800929c:	2100      	movs	r1, #0
 800929e:	2007      	movs	r0, #7
 80092a0:	f001 fe1b 	bl	800aeda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	3302      	adds	r3, #2
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	2305      	movs	r3, #5
 80092ac:	9307      	str	r3, [sp, #28]
 80092ae:	2304      	movs	r3, #4
 80092b0:	9306      	str	r3, [sp, #24]
 80092b2:	2303      	movs	r3, #3
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	2302      	movs	r3, #2
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	2301      	movs	r3, #1
 80092bc:	9303      	str	r3, [sp, #12]
 80092be:	2300      	movs	r3, #0
 80092c0:	9302      	str	r3, [sp, #8]
 80092c2:	2304      	movs	r3, #4
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	2303      	movs	r3, #3
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	2302      	movs	r3, #2
 80092cc:	2201      	movs	r2, #1
 80092ce:	2100      	movs	r1, #0
 80092d0:	2007      	movs	r0, #7
 80092d2:	f001 fe92 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	2209      	movs	r2, #9
 80092da:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	220b      	movs	r2, #11
 80092e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2209      	movs	r2, #9
 80092e6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	220b      	movs	r2, #11
 80092ec:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	2220      	movs	r2, #32
 80092f8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	2200      	movs	r2, #0
 80092fe:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	221a      	movs	r2, #26
 8009304:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	2200      	movs	r2, #0
 800930a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2228      	movs	r2, #40	; 0x28
 8009310:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2200      	movs	r2, #0
 8009316:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	2221      	movs	r2, #33	; 0x21
 800931c:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	22f5      	movs	r2, #245	; 0xf5
 8009322:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2208      	movs	r2, #8
 8009328:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2288      	movs	r2, #136	; 0x88
 8009330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 f821 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	229b      	movs	r2, #155	; 0x9b
 8009348:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	2226      	movs	r2, #38	; 0x26
 800934e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b090      	sub	sp, #64	; 0x40
 8009360:	af0a      	add	r7, sp, #40	; 0x28
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	9303      	str	r3, [sp, #12]
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	9302      	str	r3, [sp, #8]
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff ff52 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d13e      	bne.n	8009418 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	9308      	str	r3, [sp, #32]
 800939e:	2305      	movs	r3, #5
 80093a0:	9307      	str	r3, [sp, #28]
 80093a2:	2304      	movs	r3, #4
 80093a4:	9306      	str	r3, [sp, #24]
 80093a6:	2303      	movs	r3, #3
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	230a      	movs	r3, #10
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	2309      	movs	r3, #9
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	2308      	movs	r3, #8
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	2304      	movs	r3, #4
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	2303      	movs	r3, #3
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	2302      	movs	r3, #2
 80093c0:	2201      	movs	r2, #1
 80093c2:	2100      	movs	r1, #0
 80093c4:	2007      	movs	r0, #7
 80093c6:	f001 fd88 	bl	800aeda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	3302      	adds	r3, #2
 80093ce:	9308      	str	r3, [sp, #32]
 80093d0:	2305      	movs	r3, #5
 80093d2:	9307      	str	r3, [sp, #28]
 80093d4:	2304      	movs	r3, #4
 80093d6:	9306      	str	r3, [sp, #24]
 80093d8:	2303      	movs	r3, #3
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	230a      	movs	r3, #10
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	2309      	movs	r3, #9
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	2308      	movs	r3, #8
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	2304      	movs	r3, #4
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	2303      	movs	r3, #3
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	2302      	movs	r3, #2
 80093f2:	2201      	movs	r2, #1
 80093f4:	2100      	movs	r1, #0
 80093f6:	2007      	movs	r0, #7
 80093f8:	f001 fdff 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 ffbd 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	22bb      	movs	r2, #187	; 0xbb
 8009410:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	2226      	movs	r2, #38	; 0x26
 8009416:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08c      	sub	sp, #48	; 0x30
 8009428:	af06      	add	r7, sp, #24
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff ff83 	bl	800935c <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800945a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	22db      	movs	r2, #219	; 0xdb
 8009466:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b090      	sub	sp, #64	; 0x40
 8009478:	af0a      	add	r7, sp, #40	; 0x28
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009482:	2300      	movs	r3, #0
 8009484:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	9302      	str	r3, [sp, #8]
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff fec6 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80094aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d13e      	bne.n	8009530 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	230d      	movs	r3, #13
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	230c      	movs	r3, #12
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	230b      	movs	r3, #11
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	230a      	movs	r3, #10
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	2309      	movs	r3, #9
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	2308      	movs	r3, #8
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	230c      	movs	r3, #12
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	230b      	movs	r3, #11
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	230a      	movs	r3, #10
 80094d8:	2209      	movs	r2, #9
 80094da:	2108      	movs	r1, #8
 80094dc:	2007      	movs	r0, #7
 80094de:	f001 fcfc 	bl	800aeda <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	3302      	adds	r3, #2
 80094e6:	9308      	str	r3, [sp, #32]
 80094e8:	230d      	movs	r3, #13
 80094ea:	9307      	str	r3, [sp, #28]
 80094ec:	230c      	movs	r3, #12
 80094ee:	9306      	str	r3, [sp, #24]
 80094f0:	230b      	movs	r3, #11
 80094f2:	9305      	str	r3, [sp, #20]
 80094f4:	230a      	movs	r3, #10
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	2309      	movs	r3, #9
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	2308      	movs	r3, #8
 80094fe:	9302      	str	r3, [sp, #8]
 8009500:	230c      	movs	r3, #12
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	230b      	movs	r3, #11
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	230a      	movs	r3, #10
 800950a:	2209      	movs	r2, #9
 800950c:	2108      	movs	r1, #8
 800950e:	2007      	movs	r0, #7
 8009510:	f001 fd73 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68b9      	ldr	r1, [r7, #8]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 ff31 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2202      	movs	r2, #2
 8009528:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	22bb      	movs	r2, #187	; 0xbb
 800952e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08c      	sub	sp, #48	; 0x30
 8009540:	af06      	add	r7, sp, #24
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800954a:	2300      	movs	r3, #0
 800954c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff ff83 	bl	8009474 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 8009572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	22db      	movs	r2, #219	; 0xdb
 800957e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b090      	sub	sp, #64	; 0x40
 8009590:	af0a      	add	r7, sp, #40	; 0x28
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	9303      	str	r3, [sp, #12]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	9302      	str	r3, [sp, #8]
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fe3a 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80095c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d166      	bne.n	8009698 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80095d0:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	9308      	str	r3, [sp, #32]
 80095d6:	2304      	movs	r3, #4
 80095d8:	9307      	str	r3, [sp, #28]
 80095da:	2303      	movs	r3, #3
 80095dc:	9306      	str	r3, [sp, #24]
 80095de:	2302      	movs	r3, #2
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	2301      	movs	r3, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	2300      	movs	r3, #0
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	2307      	movs	r3, #7
 80095ec:	9302      	str	r3, [sp, #8]
 80095ee:	2304      	movs	r3, #4
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2303      	movs	r3, #3
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	2302      	movs	r3, #2
 80095f8:	2201      	movs	r2, #1
 80095fa:	2100      	movs	r1, #0
 80095fc:	2007      	movs	r0, #7
 80095fe:	f001 fc6c 	bl	800aeda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	3302      	adds	r3, #2
 8009606:	9308      	str	r3, [sp, #32]
 8009608:	2304      	movs	r3, #4
 800960a:	9307      	str	r3, [sp, #28]
 800960c:	2303      	movs	r3, #3
 800960e:	9306      	str	r3, [sp, #24]
 8009610:	2302      	movs	r3, #2
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	2301      	movs	r3, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	2300      	movs	r3, #0
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	2307      	movs	r3, #7
 800961e:	9302      	str	r3, [sp, #8]
 8009620:	2304      	movs	r3, #4
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	2303      	movs	r3, #3
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2302      	movs	r3, #2
 800962a:	2201      	movs	r2, #1
 800962c:	2100      	movs	r1, #0
 800962e:	2007      	movs	r0, #7
 8009630:	f001 fce3 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fea1 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	2204      	movs	r2, #4
 8009648:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	2203      	movs	r2, #3
 800964e:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	2242      	movs	r2, #66	; 0x42
 800965a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	2200      	movs	r2, #0
 8009660:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	2242      	movs	r2, #66	; 0x42
 8009666:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	2200      	movs	r2, #0
 800966c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	2252      	movs	r2, #82	; 0x52
 8009672:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	2200      	movs	r2, #0
 8009678:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	2266      	movs	r2, #102	; 0x66
 800967e:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2204      	movs	r2, #4
 8009684:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	22a4      	movs	r2, #164	; 0xa4
 800968a:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	229b      	movs	r2, #155	; 0x9b
 8009690:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	2226      	movs	r2, #38	; 0x26
 8009696:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b090      	sub	sp, #64	; 0x40
 80096a8:	af0a      	add	r7, sp, #40	; 0x28
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	9302      	str	r3, [sp, #8]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff fdae 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80096da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d178      	bne.n	80097d4 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	9308      	str	r3, [sp, #32]
 80096e6:	2305      	movs	r3, #5
 80096e8:	9307      	str	r3, [sp, #28]
 80096ea:	2304      	movs	r3, #4
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	2303      	movs	r3, #3
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	2302      	movs	r3, #2
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	2301      	movs	r3, #1
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	2304      	movs	r3, #4
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	2303      	movs	r3, #3
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2302      	movs	r3, #2
 8009708:	2201      	movs	r2, #1
 800970a:	2100      	movs	r1, #0
 800970c:	2007      	movs	r0, #7
 800970e:	f001 fbe4 	bl	800aeda <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	3302      	adds	r3, #2
 8009716:	9308      	str	r3, [sp, #32]
 8009718:	2305      	movs	r3, #5
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	2304      	movs	r3, #4
 800971e:	9306      	str	r3, [sp, #24]
 8009720:	2303      	movs	r3, #3
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	2302      	movs	r3, #2
 8009726:	9304      	str	r3, [sp, #16]
 8009728:	2301      	movs	r3, #1
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	2300      	movs	r3, #0
 800972e:	9302      	str	r3, [sp, #8]
 8009730:	2304      	movs	r3, #4
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	2303      	movs	r3, #3
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	2302      	movs	r3, #2
 800973a:	2201      	movs	r2, #1
 800973c:	2100      	movs	r1, #0
 800973e:	2007      	movs	r0, #7
 8009740:	f001 fc5b 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fe19 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	2209      	movs	r2, #9
 8009758:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	220b      	movs	r2, #11
 800975e:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	2221      	movs	r2, #33	; 0x21
 800976a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2200      	movs	r2, #0
 8009770:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	221b      	movs	r2, #27
 8009776:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	2200      	movs	r2, #0
 800977c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	2229      	movs	r2, #41	; 0x29
 8009782:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	2200      	movs	r2, #0
 8009788:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	2222      	movs	r2, #34	; 0x22
 800978e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2209      	movs	r2, #9
 8009794:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	22f5      	movs	r2, #245	; 0xf5
 800979a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	2209      	movs	r2, #9
 80097a0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	220b      	movs	r2, #11
 80097a6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2208      	movs	r2, #8
 80097bc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2288      	movs	r2, #136	; 0x88
 80097c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	229b      	movs	r2, #155	; 0x9b
 80097cc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	2226      	movs	r2, #38	; 0x26
 80097d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80097d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b090      	sub	sp, #64	; 0x40
 80097e4:	af0a      	add	r7, sp, #40	; 0x28
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	9302      	str	r3, [sp, #8]
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff ff49 	bl	80096a4 <VL53L1_preset_mode_histogram_long_range>
 8009812:	4603      	mov	r3, r0
 8009814:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d13b      	bne.n	8009896 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	9308      	str	r3, [sp, #32]
 8009822:	2305      	movs	r3, #5
 8009824:	9307      	str	r3, [sp, #28]
 8009826:	2304      	movs	r3, #4
 8009828:	9306      	str	r3, [sp, #24]
 800982a:	2303      	movs	r3, #3
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	230a      	movs	r3, #10
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	2309      	movs	r3, #9
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	2308      	movs	r3, #8
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	2304      	movs	r3, #4
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	2303      	movs	r3, #3
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	2302      	movs	r3, #2
 8009844:	2201      	movs	r2, #1
 8009846:	2100      	movs	r1, #0
 8009848:	2007      	movs	r0, #7
 800984a:	f001 fb46 	bl	800aeda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	3302      	adds	r3, #2
 8009852:	9308      	str	r3, [sp, #32]
 8009854:	2305      	movs	r3, #5
 8009856:	9307      	str	r3, [sp, #28]
 8009858:	2304      	movs	r3, #4
 800985a:	9306      	str	r3, [sp, #24]
 800985c:	2303      	movs	r3, #3
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	230a      	movs	r3, #10
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	2309      	movs	r3, #9
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	2308      	movs	r3, #8
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	2304      	movs	r3, #4
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	2303      	movs	r3, #3
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2302      	movs	r3, #2
 8009876:	2201      	movs	r2, #1
 8009878:	2100      	movs	r1, #0
 800987a:	2007      	movs	r0, #7
 800987c:	f001 fbbd 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fd7b 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	22bb      	movs	r2, #187	; 0xbb
 8009894:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b08c      	sub	sp, #48	; 0x30
 80098a6:	af06      	add	r7, sp, #24
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	9302      	str	r3, [sp, #8]
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff ff86 	bl	80097e0 <VL53L1_preset_mode_histogram_long_range_mm1>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80098d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	22db      	movs	r2, #219	; 0xdb
 80098e4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80098e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b090      	sub	sp, #64	; 0x40
 80098f6:	af0a      	add	r7, sp, #40	; 0x28
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009900:	2300      	movs	r3, #0
 8009902:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	9302      	str	r3, [sp, #8]
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fc87 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 8009924:	4603      	mov	r3, r0
 8009926:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d178      	bne.n	8009a22 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	9308      	str	r3, [sp, #32]
 8009934:	2303      	movs	r3, #3
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	2302      	movs	r3, #2
 800993a:	9306      	str	r3, [sp, #24]
 800993c:	2301      	movs	r3, #1
 800993e:	9305      	str	r3, [sp, #20]
 8009940:	2302      	movs	r3, #2
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	2301      	movs	r3, #1
 8009946:	9303      	str	r3, [sp, #12]
 8009948:	2300      	movs	r3, #0
 800994a:	9302      	str	r3, [sp, #8]
 800994c:	2302      	movs	r3, #2
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	2302      	movs	r3, #2
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	2301      	movs	r3, #1
 8009956:	2201      	movs	r2, #1
 8009958:	2100      	movs	r1, #0
 800995a:	2007      	movs	r0, #7
 800995c:	f001 fabd 	bl	800aeda <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	3302      	adds	r3, #2
 8009964:	9308      	str	r3, [sp, #32]
 8009966:	2303      	movs	r3, #3
 8009968:	9307      	str	r3, [sp, #28]
 800996a:	2302      	movs	r3, #2
 800996c:	9306      	str	r3, [sp, #24]
 800996e:	2301      	movs	r3, #1
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	2302      	movs	r3, #2
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	2301      	movs	r3, #1
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	2300      	movs	r3, #0
 800997c:	9302      	str	r3, [sp, #8]
 800997e:	2302      	movs	r3, #2
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	2302      	movs	r3, #2
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	2301      	movs	r3, #1
 8009988:	2201      	movs	r2, #1
 800998a:	2100      	movs	r1, #0
 800998c:	2007      	movs	r0, #7
 800998e:	f001 fb34 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fcf2 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	2205      	movs	r2, #5
 80099a6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	2207      	movs	r2, #7
 80099ac:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	2236      	movs	r2, #54	; 0x36
 80099b8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	2200      	movs	r2, #0
 80099be:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	2228      	movs	r2, #40	; 0x28
 80099c4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	2200      	movs	r2, #0
 80099ca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2244      	movs	r2, #68	; 0x44
 80099d0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	2200      	movs	r2, #0
 80099d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	2233      	movs	r2, #51	; 0x33
 80099dc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2205      	movs	r2, #5
 80099e2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	22f5      	movs	r2, #245	; 0xf5
 80099e8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	2205      	movs	r2, #5
 80099ee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	2207      	movs	r2, #7
 80099f4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2208      	movs	r2, #8
 8009a0a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2248      	movs	r2, #72	; 0x48
 8009a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	229b      	movs	r2, #155	; 0x9b
 8009a1a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	2226      	movs	r2, #38	; 0x26
 8009a20:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b090      	sub	sp, #64	; 0x40
 8009a32:	af0a      	add	r7, sp, #40	; 0x28
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a46:	9303      	str	r3, [sp, #12]
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	9302      	str	r3, [sp, #8]
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff ff49 	bl	80098f2 <VL53L1_preset_mode_histogram_medium_range>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d13b      	bne.n	8009ae4 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	9308      	str	r3, [sp, #32]
 8009a70:	2303      	movs	r3, #3
 8009a72:	9307      	str	r3, [sp, #28]
 8009a74:	2302      	movs	r3, #2
 8009a76:	9306      	str	r3, [sp, #24]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	230a      	movs	r3, #10
 8009a7e:	9304      	str	r3, [sp, #16]
 8009a80:	2309      	movs	r3, #9
 8009a82:	9303      	str	r3, [sp, #12]
 8009a84:	2308      	movs	r3, #8
 8009a86:	9302      	str	r3, [sp, #8]
 8009a88:	2302      	movs	r3, #2
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2301      	movs	r3, #1
 8009a92:	2201      	movs	r2, #1
 8009a94:	2100      	movs	r1, #0
 8009a96:	2007      	movs	r0, #7
 8009a98:	f001 fa1f 	bl	800aeda <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	9308      	str	r3, [sp, #32]
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	9307      	str	r3, [sp, #28]
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	9306      	str	r3, [sp, #24]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	9305      	str	r3, [sp, #20]
 8009aae:	230a      	movs	r3, #10
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	2309      	movs	r3, #9
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	2302      	movs	r3, #2
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	2302      	movs	r3, #2
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	2007      	movs	r0, #7
 8009aca:	f001 fa96 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc54 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	22bb      	movs	r2, #187	; 0xbb
 8009ae2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08c      	sub	sp, #48	; 0x30
 8009af4:	af06      	add	r7, sp, #24
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	9302      	str	r3, [sp, #8]
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff ff86 	bl	8009a2e <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d102      	bne.n	8009b34 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	22db      	movs	r2, #219	; 0xdb
 8009b32:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b090      	sub	sp, #64	; 0x40
 8009b44:	af0a      	add	r7, sp, #40	; 0x28
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff fb60 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d178      	bne.n	8009c70 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	9308      	str	r3, [sp, #32]
 8009b82:	2302      	movs	r3, #2
 8009b84:	9307      	str	r3, [sp, #28]
 8009b86:	2302      	movs	r3, #2
 8009b88:	9306      	str	r3, [sp, #24]
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	2301      	movs	r3, #1
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2107      	movs	r1, #7
 8009ba8:	2007      	movs	r0, #7
 8009baa:	f001 f996 	bl	800aeda <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	9308      	str	r3, [sp, #32]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	9307      	str	r3, [sp, #28]
 8009bb8:	2302      	movs	r3, #2
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	2301      	movs	r3, #1
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	2107      	movs	r1, #7
 8009bda:	2007      	movs	r0, #7
 8009bdc:	f001 fa0d 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fbcb 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	2252      	movs	r2, #82	; 0x52
 8009c06:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	2237      	movs	r2, #55	; 0x37
 8009c12:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	2200      	movs	r2, #0
 8009c18:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	2266      	movs	r2, #102	; 0x66
 8009c1e:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	2200      	movs	r2, #0
 8009c24:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	2244      	movs	r2, #68	; 0x44
 8009c2a:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2203      	movs	r2, #3
 8009c30:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	22f5      	movs	r2, #245	; 0xf5
 8009c36:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	2205      	movs	r2, #5
 8009c42:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2208      	movs	r2, #8
 8009c58:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2228      	movs	r2, #40	; 0x28
 8009c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	22bb      	movs	r2, #187	; 0xbb
 8009c68:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	2226      	movs	r2, #38	; 0x26
 8009c6e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b090      	sub	sp, #64	; 0x40
 8009c80:	af0a      	add	r7, sp, #40	; 0x28
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	9302      	str	r3, [sp, #8]
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff ff49 	bl	8009b40 <VL53L1_preset_mode_histogram_short_range>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d15a      	bne.n	8009d70 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	9308      	str	r3, [sp, #32]
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	9307      	str	r3, [sp, #28]
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	9306      	str	r3, [sp, #24]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9303      	str	r3, [sp, #12]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9302      	str	r3, [sp, #8]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	2301      	movs	r3, #1
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2107      	movs	r1, #7
 8009ce4:	2007      	movs	r0, #7
 8009ce6:	f001 f8f8 	bl	800aeda <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	3302      	adds	r3, #2
 8009cee:	9308      	str	r3, [sp, #32]
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	9307      	str	r3, [sp, #28]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	9306      	str	r3, [sp, #24]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9304      	str	r3, [sp, #16]
 8009d00:	2300      	movs	r3, #0
 8009d02:	9303      	str	r3, [sp, #12]
 8009d04:	2300      	movs	r3, #0
 8009d06:	9302      	str	r3, [sp, #8]
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	2200      	movs	r2, #0
 8009d14:	2107      	movs	r1, #7
 8009d16:	2007      	movs	r0, #7
 8009d18:	f001 f96f 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fb2d 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	2203      	movs	r2, #3
 8009d36:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2231      	movs	r2, #49	; 0x31
 8009d42:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	2202      	movs	r2, #2
 8009d48:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2210      	movs	r2, #16
 8009d64:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2218      	movs	r2, #24
 8009d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b090      	sub	sp, #64	; 0x40
 8009d80:	af0a      	add	r7, sp, #40	; 0x28
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68b9      	ldr	r1, [r7, #8]
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff fec9 	bl	8009b40 <VL53L1_preset_mode_histogram_short_range>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d13b      	bne.n	8009e32 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	9308      	str	r3, [sp, #32]
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	9307      	str	r3, [sp, #28]
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	9306      	str	r3, [sp, #24]
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	2301      	movs	r3, #1
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	2309      	movs	r3, #9
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	2301      	movs	r3, #1
 8009de0:	2200      	movs	r2, #0
 8009de2:	2107      	movs	r1, #7
 8009de4:	2007      	movs	r0, #7
 8009de6:	f001 f878 	bl	800aeda <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	3302      	adds	r3, #2
 8009dee:	9308      	str	r3, [sp, #32]
 8009df0:	2302      	movs	r3, #2
 8009df2:	9307      	str	r3, [sp, #28]
 8009df4:	2302      	movs	r3, #2
 8009df6:	9306      	str	r3, [sp, #24]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	9304      	str	r3, [sp, #16]
 8009e00:	2309      	movs	r3, #9
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	2308      	movs	r3, #8
 8009e06:	9302      	str	r3, [sp, #8]
 8009e08:	2301      	movs	r3, #1
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2301      	movs	r3, #1
 8009e12:	2200      	movs	r2, #0
 8009e14:	2107      	movs	r1, #7
 8009e16:	2007      	movs	r0, #7
 8009e18:	f001 f8ef 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 faad 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	22bb      	movs	r2, #187	; 0xbb
 8009e30:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b08c      	sub	sp, #48	; 0x30
 8009e42:	af06      	add	r7, sp, #24
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7ff ff86 	bl	8009d7c <VL53L1_preset_mode_histogram_short_range_mm1>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	22db      	movs	r2, #219	; 0xdb
 8009e80:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08c      	sub	sp, #48	; 0x30
 8009e92:	af06      	add	r7, sp, #24
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	9303      	str	r3, [sp, #12]
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	9302      	str	r3, [sp, #8]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff f9b9 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2283      	movs	r2, #131	; 0x83
 8009edc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	222e      	movs	r2, #46	; 0x2e
 8009ee2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b090      	sub	sp, #64	; 0x40
 8009ef4:	af0a      	add	r7, sp, #40	; 0x28
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	9303      	str	r3, [sp, #12]
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	9302      	str	r3, [sp, #8]
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f9ba 	bl	800a296 <VL53L1_preset_mode_histogram_multizone_long_range>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d151      	bne.n	8009fd2 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f30:	6838      	ldr	r0, [r7, #0]
 8009f32:	f00a fb1c 	bl	801456e <VL53L1_zone_preset_xtalk_planar>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	2209      	movs	r2, #9
 8009f3e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	2209      	movs	r2, #9
 8009f44:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	9308      	str	r3, [sp, #32]
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	2303      	movs	r3, #3
 8009f50:	9306      	str	r3, [sp, #24]
 8009f52:	2302      	movs	r3, #2
 8009f54:	9305      	str	r3, [sp, #20]
 8009f56:	2301      	movs	r3, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	2307      	movs	r3, #7
 8009f60:	9302      	str	r3, [sp, #8]
 8009f62:	2304      	movs	r3, #4
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2303      	movs	r3, #3
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	2100      	movs	r1, #0
 8009f70:	2007      	movs	r0, #7
 8009f72:	f000 ffb2 	bl	800aeda <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	3302      	adds	r3, #2
 8009f7a:	9308      	str	r3, [sp, #32]
 8009f7c:	2304      	movs	r3, #4
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	2303      	movs	r3, #3
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	2302      	movs	r3, #2
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9303      	str	r3, [sp, #12]
 8009f90:	2307      	movs	r3, #7
 8009f92:	9302      	str	r3, [sp, #8]
 8009f94:	2304      	movs	r3, #4
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	2303      	movs	r3, #3
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	2007      	movs	r0, #7
 8009fa4:	f001 f829 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d108      	bne.n	8009fc2 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fba:	f003 f97d 	bl	800d2b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9da 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b090      	sub	sp, #64	; 0x40
 8009fe2:	af0a      	add	r7, sp, #40	; 0x28
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff f911 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800a014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d16e      	bne.n	800a0fa <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	9308      	str	r3, [sp, #32]
 800a020:	230c      	movs	r3, #12
 800a022:	9307      	str	r3, [sp, #28]
 800a024:	230b      	movs	r3, #11
 800a026:	9306      	str	r3, [sp, #24]
 800a028:	230a      	movs	r3, #10
 800a02a:	9305      	str	r3, [sp, #20]
 800a02c:	2309      	movs	r3, #9
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	2308      	movs	r3, #8
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	230f      	movs	r3, #15
 800a036:	9302      	str	r3, [sp, #8]
 800a038:	230c      	movs	r3, #12
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	230b      	movs	r3, #11
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	230a      	movs	r3, #10
 800a042:	2209      	movs	r2, #9
 800a044:	2108      	movs	r1, #8
 800a046:	200f      	movs	r0, #15
 800a048:	f000 ff47 	bl	800aeda <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	3302      	adds	r3, #2
 800a050:	9308      	str	r3, [sp, #32]
 800a052:	230c      	movs	r3, #12
 800a054:	9307      	str	r3, [sp, #28]
 800a056:	230b      	movs	r3, #11
 800a058:	9306      	str	r3, [sp, #24]
 800a05a:	230a      	movs	r3, #10
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	2309      	movs	r3, #9
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	2308      	movs	r3, #8
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	230f      	movs	r3, #15
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	230c      	movs	r3, #12
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	230b      	movs	r3, #11
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	230a      	movs	r3, #10
 800a074:	2209      	movs	r2, #9
 800a076:	2108      	movs	r1, #8
 800a078:	200f      	movs	r0, #15
 800a07a:	f000 ffbe 	bl	800affa <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f97c 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	2209      	movs	r2, #9
 800a092:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	2209      	movs	r2, #9
 800a098:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2221      	movs	r2, #33	; 0x21
 800a0a4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2221      	movs	r2, #33	; 0x21
 800a0b0:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	2229      	movs	r2, #41	; 0x29
 800a0bc:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	2229      	movs	r2, #41	; 0x29
 800a0c8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2209      	movs	r2, #9
 800a0ce:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	22f5      	movs	r2, #245	; 0xf5
 800a0d4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	2209      	movs	r2, #9
 800a0da:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2209      	movs	r2, #9
 800a0e0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	2209      	movs	r2, #9
 800a0e6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	22bb      	movs	r2, #187	; 0xbb
 800a0f2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	2226      	movs	r2, #38	; 0x26
 800a0f8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b08c      	sub	sp, #48	; 0x30
 800a10a:	af06      	add	r7, sp, #24
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	9303      	str	r3, [sp, #12]
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff ff53 	bl	8009fde <VL53L1_preset_mode_histogram_xtalk_mm1>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	22db      	movs	r2, #219	; 0xdb
 800a140:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800a142:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b08c      	sub	sp, #48	; 0x30
 800a152:	af06      	add	r7, sp, #24
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7ff fbb9 	bl	80098f2 <VL53L1_preset_mode_histogram_medium_range>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d12c      	bne.n	800a1e6 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	2307      	movs	r3, #7
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	2307      	movs	r3, #7
 800a196:	9302      	str	r3, [sp, #8]
 800a198:	2302      	movs	r3, #2
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	2308      	movs	r3, #8
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	2304      	movs	r3, #4
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	2108      	movs	r1, #8
 800a1a6:	2004      	movs	r0, #4
 800a1a8:	f00a f96c 	bl	8014484 <VL53L1_init_zone_config_structure>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ce:	f003 f873 	bl	800d2b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f8d0 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b08c      	sub	sp, #48	; 0x30
 800a1f6:	af06      	add	r7, sp, #24
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	9303      	str	r3, [sp, #12]
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fc8e 	bl	8009b40 <VL53L1_preset_mode_histogram_short_range>
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d12c      	bne.n	800a28a <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	9304      	str	r3, [sp, #16]
 800a234:	2307      	movs	r3, #7
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	2307      	movs	r3, #7
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	2302      	movs	r3, #2
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	2308      	movs	r3, #8
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	2304      	movs	r3, #4
 800a246:	2202      	movs	r2, #2
 800a248:	2108      	movs	r1, #8
 800a24a:	2004      	movs	r0, #4
 800a24c:	f00a f91a 	bl	8014484 <VL53L1_init_zone_config_structure>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	3301      	adds	r3, #1
 800a25a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	3302      	adds	r3, #2
 800a26c:	461a      	mov	r2, r3
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a272:	f003 f821 	bl	800d2b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a276:	4603      	mov	r3, r0
 800a278:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f87e 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08c      	sub	sp, #48	; 0x30
 800a29a:	af06      	add	r7, sp, #24
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	9303      	str	r3, [sp, #12]
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	9302      	str	r3, [sp, #8]
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7ff f9ee 	bl	80096a4 <VL53L1_preset_mode_histogram_long_range>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d12c      	bne.n	800a32e <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	2307      	movs	r3, #7
 800a2da:	9303      	str	r3, [sp, #12]
 800a2dc:	2307      	movs	r3, #7
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	2108      	movs	r1, #8
 800a2ee:	2004      	movs	r0, #4
 800a2f0:	f00a f8c8 	bl	8014484 <VL53L1_init_zone_config_structure>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	3302      	adds	r3, #2
 800a310:	461a      	mov	r2, r3
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a316:	f002 ffcf 	bl	800d2b8 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f82c 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a32e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b08a      	sub	sp, #40	; 0x28
 800a33e:	af04      	add	r7, sp, #16
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
 800a346:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a348:	2300      	movs	r3, #0
 800a34a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	68b9      	ldr	r1, [r7, #8]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7fe fb9e 	bl	8008aa4 <VL53L1_preset_mode_standard_ranging>
 800a368:	4603      	mov	r3, r0
 800a36a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a36c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	2201      	movs	r2, #1
 800a378:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	79db      	ldrb	r3, [r3, #7]
 800a3c8:	b29b      	uxth	r3, r3
				<< 8)
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	7a1b      	ldrb	r3, [r3, #8]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	b29b      	uxth	r3, r3
				<< 8)
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	789b      	ldrb	r3, [r3, #2]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	4413      	add	r3, r2
 800a41e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	78db      	ldrb	r3, [r3, #3]
 800a428:	b29b      	uxth	r3, r3
				<< 8)
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	b29b      	uxth	r3, r3
 800a434:	4413      	add	r3, r2
 800a436:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a464:	bf00      	nop
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	79db      	ldrb	r3, [r3, #7]
 800a4b0:	b29b      	uxth	r3, r3
				<< 8)
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	7a1b      	ldrb	r3, [r3, #8]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	b29b      	uxth	r3, r3
				<< 8)
 800a4f2:	021b      	lsls	r3, r3, #8
 800a4f4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	789b      	ldrb	r3, [r3, #2]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	4413      	add	r3, r2
 800a4fe:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	78db      	ldrb	r3, [r3, #3]
 800a508:	b29b      	uxth	r3, r3
				<< 8)
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	b29b      	uxth	r3, r3
 800a514:	4413      	add	r3, r2
 800a516:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08c      	sub	sp, #48	; 0x30
 800a53c:	af06      	add	r7, sp, #24
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a546:	2300      	movs	r3, #0
 800a548:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7fe fe64 	bl	8009232 <VL53L1_preset_mode_histogram_ranging>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10a      	bne.n	800a58c <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fefd 	bl	800a386 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a58c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3318      	adds	r3, #24
 800a5a4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2230      	movs	r2, #48	; 0x30
 800a5ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3318      	adds	r3, #24
 800a5e2:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	332c      	adds	r3, #44	; 0x2c
 800a5e8:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	78fa      	ldrb	r2, [r7, #3]
 800a5ee:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2200      	movs	r2, #0
 800a612:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2202      	movs	r2, #2
 800a618:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	735a      	strb	r2, [r3, #13]

}
 800a626:	bf00      	nop
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
	...

0800a634 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3318      	adds	r3, #24
 800a644:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	332c      	adds	r3, #44	; 0x2c
 800a64a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d115      	bne.n	800a686 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2203      	movs	r2, #3
 800a65e:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2202      	movs	r2, #2
 800a676:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	735a      	strb	r2, [r3, #13]
 800a684:	e0be      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	7a1b      	ldrb	r3, [r3, #8]
 800a68a:	2bff      	cmp	r3, #255	; 0xff
 800a68c:	d103      	bne.n	800a696 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2280      	movs	r2, #128	; 0x80
 800a692:	721a      	strb	r2, [r3, #8]
 800a694:	e005      	b.n	800a6a2 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	7a1b      	ldrb	r3, [r3, #8]
 800a69a:	3301      	adds	r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	7a19      	ldrb	r1, [r3, #8]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f103 0209 	add.w	r2, r3, #9
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	330a      	adds	r3, #10
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f002 fdc2 	bl	800d23a <VL53L1_update_internal_stream_counters>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	7adb      	ldrb	r3, [r3, #11]
 800a6be:	f083 0302 	eor.w	r3, r3, #2
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	79db      	ldrb	r3, [r3, #7]
 800a6cc:	3b03      	subs	r3, #3
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	f200 8082 	bhi.w	800a7d8 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a6f5 	.word	0x0800a6f5
 800a6e0:	0800a7d9 	.word	0x0800a7d9
 800a6e4:	0800a7d9 	.word	0x0800a7d9
 800a6e8:	0800a747 	.word	0x0800a747
 800a6ec:	0800a77d 	.word	0x0800a77d
 800a6f0:	0800a7a7 	.word	0x0800a7a7

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	dd03      	ble.n	800a70a <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2206      	movs	r2, #6
 800a706:	71da      	strb	r2, [r3, #7]
 800a708:	e00d      	b.n	800a726 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a714:	429a      	cmp	r2, r3
 800a716:	d303      	bcc.n	800a720 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2208      	movs	r2, #8
 800a71c:	71da      	strb	r2, [r3, #7]
 800a71e:	e002      	b.n	800a726 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2207      	movs	r2, #7
 800a724:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	735a      	strb	r2, [r3, #13]

			break;
 800a744:	e05e      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a768:	429a      	cmp	r2, r3
 800a76a:	d303      	bcc.n	800a774 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2208      	movs	r2, #8
 800a770:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a772:	e047      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2207      	movs	r2, #7
 800a778:	71da      	strb	r2, [r3, #7]
			break;
 800a77a:	e043      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	7b5b      	ldrb	r3, [r3, #13]
 800a780:	3301      	adds	r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a792:	429a      	cmp	r2, r3
 800a794:	d303      	bcc.n	800a79e <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2208      	movs	r2, #8
 800a79a:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a79c:	e032      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	71da      	strb	r2, [r3, #7]
			break;
 800a7a4:	e02e      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	7b1b      	ldrb	r3, [r3, #12]
 800a7b0:	f083 0301 	eor.w	r3, r3, #1
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d303      	bcc.n	800a7d0 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2208      	movs	r2, #8
 800a7cc:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a7ce:	e019      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2207      	movs	r2, #7
 800a7d4:	71da      	strb	r2, [r3, #7]
			break;
 800a7d6:	e015      	b.n	800a804 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2203      	movs	r2, #3
 800a7dc:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	735a      	strb	r2, [r3, #13]
			break;
 800a802:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a810:	b480      	push	{r7}
 800a812:	b08d      	sub	sp, #52	; 0x34
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3318      	adds	r3, #24
 800a822:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a82a:	3308      	adds	r3, #8
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	332c      	adds	r3, #44	; 0x2c
 800a832:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a83a:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a842:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a84a:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a86a:	f003 031f 	and.w	r3, r3, #31
 800a86e:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	78db      	ldrb	r3, [r3, #3]
 800a874:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a87c:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a880:	2b00      	cmp	r3, #0
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a88a:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a890:	111b      	asrs	r3, r3, #4
 800a892:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a89c:	7c7b      	ldrb	r3, [r7, #17]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d008      	beq.n	800a8b4 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a8a8:	111b      	asrs	r3, r3, #4
 800a8aa:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d04e      	beq.n	800a960 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	79db      	ldrb	r3, [r3, #7]
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	d109      	bne.n	800a8de <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a8ca:	7c7b      	ldrb	r3, [r7, #17]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d14a      	bne.n	800a966 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a8d0:	7cfb      	ldrb	r3, [r7, #19]
 800a8d2:	2b12      	cmp	r3, #18
 800a8d4:	d047      	beq.n	800a966 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a8d6:	23ef      	movs	r3, #239	; 0xef
 800a8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8dc:	e043      	b.n	800a966 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	7a1b      	ldrb	r3, [r3, #8]
 800a8e2:	7cba      	ldrb	r2, [r7, #18]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d002      	beq.n	800a8ee <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a8e8:	23ee      	movs	r3, #238	; 0xee
 800a8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	7adb      	ldrb	r3, [r3, #11]
 800a8f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d002      	beq.n	800a900 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a8fa:	23ed      	movs	r3, #237	; 0xed
 800a8fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	7b5b      	ldrb	r3, [r3, #13]
 800a904:	4619      	mov	r1, r3
		expected_stream_count =
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	460b      	mov	r3, r1
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	440b      	add	r3, r1
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	4413      	add	r3, r2
 800a912:	3302      	adds	r3, #2
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	7b5b      	ldrb	r3, [r3, #13]
 800a91c:	4619      	mov	r1, r3
		expected_gph_id =
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	460b      	mov	r3, r1
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	4413      	add	r3, r2
 800a92a:	3303      	adds	r3, #3
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a930:	7c3a      	ldrb	r2, [r7, #16]
 800a932:	7cbb      	ldrb	r3, [r7, #18]
 800a934:	429a      	cmp	r2, r3
 800a936:	d00a      	beq.n	800a94e <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <VL53L1_check_ll_driver_rd_state+0x138>
 800a942:	7cbb      	ldrb	r3, [r7, #18]
 800a944:	2bff      	cmp	r3, #255	; 0xff
 800a946:	d002      	beq.n	800a94e <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a948:	23ec      	movs	r3, #236	; 0xec
 800a94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a94e:	7bfa      	ldrb	r2, [r7, #15]
 800a950:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a954:	429a      	cmp	r2, r3
 800a956:	d005      	beq.n	800a964 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a958:	23eb      	movs	r3, #235	; 0xeb
 800a95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a95e:	e002      	b.n	800a966 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a960:	bf00      	nop
 800a962:	e000      	b.n	800a966 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a964:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a966:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3734      	adds	r7, #52	; 0x34
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b088      	sub	sp, #32
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a97e:	2300      	movs	r3, #0
 800a980:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3318      	adds	r3, #24
 800a986:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a98e:	3308      	adds	r3, #8
 800a990:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	332c      	adds	r3, #44	; 0x2c
 800a996:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a99e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a9a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d11b      	bne.n	800a9e6 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2203      	movs	r2, #3
 800a9b2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	773b      	strb	r3, [r7, #28]
 800a9e4:	e0b1      	b.n	800ab4a <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	791b      	ldrb	r3, [r3, #4]
 800a9ea:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	799b      	ldrb	r3, [r3, #6]
 800a9f0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2bff      	cmp	r3, #255	; 0xff
 800a9fe:	d103      	bne.n	800aa08 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2280      	movs	r2, #128	; 0x80
 800aa04:	705a      	strb	r2, [r3, #1]
 800aa06:	e005      	b.n	800aa14 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	7859      	ldrb	r1, [r3, #1]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1c9a      	adds	r2, r3, #2
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	3303      	adds	r3, #3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f002 fc0a 	bl	800d23a <VL53L1_update_internal_stream_counters>
 800aa26:	4603      	mov	r3, r0
 800aa28:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	791b      	ldrb	r3, [r3, #4]
 800aa2e:	f083 0302 	eor.w	r3, r3, #2
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b05      	cmp	r3, #5
 800aa3e:	d053      	beq.n	800aae8 <VL53L1_update_ll_driver_cfg_state+0x172>
 800aa40:	2b05      	cmp	r3, #5
 800aa42:	dc69      	bgt.n	800ab18 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d002      	beq.n	800aa4e <VL53L1_update_ll_driver_cfg_state+0xd8>
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d02d      	beq.n	800aaa8 <VL53L1_update_ll_driver_cfg_state+0x132>
 800aa4c:	e064      	b.n	800ab18 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2201      	movs	r2, #1
 800aa52:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d909      	bls.n	800aa76 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2200      	movs	r2, #0
 800aa66:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	795b      	ldrb	r3, [r3, #5]
 800aa6c:	f083 0301 	eor.w	r3, r3, #1
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	70da      	strb	r2, [r3, #3]
 800aa92:	e005      	b.n	800aaa0 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2200      	movs	r2, #0
 800aa98:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800aaa6:	e050      	b.n	800ab4a <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	799b      	ldrb	r3, [r3, #6]
 800aaac:	3301      	adds	r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d940      	bls.n	800ab44 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2200      	movs	r2, #0
 800aac6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	795b      	ldrb	r3, [r3, #5]
 800aacc:	f083 0301 	eor.w	r3, r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d031      	beq.n	800ab44 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2205      	movs	r2, #5
 800aae4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800aae6:	e02d      	b.n	800ab44 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	799b      	ldrb	r3, [r3, #6]
 800aaec:	3301      	adds	r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d922      	bls.n	800ab48 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2200      	movs	r2, #0
 800ab06:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	795b      	ldrb	r3, [r3, #5]
 800ab0c:	f083 0301 	eor.w	r3, r3, #1
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ab16:	e017      	b.n	800ab48 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2200      	movs	r2, #0
 800ab22:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	2200      	movs	r2, #0
 800ab28:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	2202      	movs	r2, #2
 800ab34:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	719a      	strb	r2, [r3, #6]
			break;
 800ab42:	e002      	b.n	800ab4a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ab44:	bf00      	nop
 800ab46:	e000      	b.n	800ab4a <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ab48:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11d      	bne.n	800ab90 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ab54:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800ab56:	7f3b      	ldrb	r3, [r7, #28]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	b2d8      	uxtb	r0, r3
 800ab5c:	68f9      	ldr	r1, [r7, #12]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	440b      	add	r3, r1
 800ab68:	3302      	adds	r3, #2
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	7b5b      	ldrb	r3, [r3, #13]
 800ab72:	4619      	mov	r1, r3
 800ab74:	7f7b      	ldrb	r3, [r7, #29]
 800ab76:	f083 0302 	eor.w	r3, r3, #2
 800ab7a:	b2d8      	uxtb	r0, r3
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4413      	add	r3, r2
 800ab88:	3303      	adds	r3, #3
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	e013      	b.n	800abb8 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ab90:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	440b      	add	r3, r1
 800ab9e:	3302      	adds	r3, #2
 800aba0:	7f3a      	ldrb	r2, [r7, #28]
 800aba2:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800aba4:	7fba      	ldrb	r2, [r7, #30]
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	4613      	mov	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	440b      	add	r3, r1
 800abb2:	3303      	adds	r3, #3
 800abb4:	7f7a      	ldrb	r2, [r7, #29]
 800abb6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800abb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7c1a      	ldrb	r2, [r3, #16]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	7c52      	ldrb	r2, [r2, #17]
 800abde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	3302      	adds	r3, #2
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c92      	ldrb	r2, [r2, #18]
 800abe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	3303      	adds	r3, #3
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	7cd2      	ldrb	r2, [r2, #19]
 800abf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	3304      	adds	r3, #4
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7d12      	ldrb	r2, [r2, #20]
 800abfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	3305      	adds	r3, #5
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	7d52      	ldrb	r2, [r2, #21]
 800ac06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	3306      	adds	r3, #6
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7d92      	ldrb	r2, [r2, #22]
 800ac10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	3307      	adds	r3, #7
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	7dd2      	ldrb	r2, [r2, #23]
 800ac1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7e12      	ldrb	r2, [r2, #24]
 800ac24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	3309      	adds	r3, #9
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	7e52      	ldrb	r2, [r2, #25]
 800ac2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	330a      	adds	r3, #10
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7e92      	ldrb	r2, [r2, #26]
 800ac38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	330b      	adds	r3, #11
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	7ed2      	ldrb	r2, [r2, #27]
 800ac42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	330c      	adds	r3, #12
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7f12      	ldrb	r2, [r2, #28]
 800ac4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	330d      	adds	r3, #13
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	7f52      	ldrb	r2, [r2, #29]
 800ac56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	330e      	adds	r3, #14
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	7f92      	ldrb	r2, [r2, #30]
 800ac60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	330f      	adds	r3, #15
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	7fd2      	ldrb	r2, [r2, #31]
 800ac6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	3310      	adds	r3, #16
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ac76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	3311      	adds	r3, #17
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ac82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	3312      	adds	r3, #18
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ac8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3313      	adds	r3, #19
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ac9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	3314      	adds	r3, #20
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800aca6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	3315      	adds	r3, #21
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800acb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	3316      	adds	r3, #22
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800acbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	3317      	adds	r3, #23
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800acca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	3318      	adds	r3, #24
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800acd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	3319      	adds	r3, #25
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ace2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	331a      	adds	r3, #26
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800acee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	331b      	adds	r3, #27
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800acfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	331c      	adds	r3, #28
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ad06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	331d      	adds	r3, #29
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ad12:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	331e      	adds	r3, #30
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ad1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	331f      	adds	r3, #31
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800ad2a:	701a      	strb	r2, [r3, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	22ff      	movs	r2, #255	; 0xff
 800ad44:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	22ff      	movs	r2, #255	; 0xff
 800ad4a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	22ff      	movs	r2, #255	; 0xff
 800ad50:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	22ff      	movs	r2, #255	; 0xff
 800ad56:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad5e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad66:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad6e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad76:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad7e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad86:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad8e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad96:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad9e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adae:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adb6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adbe:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adc6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adce:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800add6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adde:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ade6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adee:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	22ff      	movs	r2, #255	; 0xff
 800adf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	6039      	str	r1, [r7, #0]
 800ae0e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2210      	movs	r2, #16
 800ae18:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	79fa      	ldrb	r2, [r7, #7]
 800ae1e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
 800ae24:	e017      	b.n	800ae56 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800ae26:	7bfa      	ldrb	r2, [r7, #15]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	4413      	add	r3, r2
 800ae34:	3304      	adds	r3, #4
 800ae36:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2203      	movs	r2, #3
 800ae42:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2204      	movs	r2, #4
 800ae48:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	3301      	adds	r3, #1
 800ae54:	73fb      	strb	r3, [r7, #15]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d3e2      	bcc.n	800ae26 <V53L1_init_zone_results_structure+0x22>
	}
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b087      	sub	sp, #28
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800ae84:	2310      	movs	r3, #16
 800ae86:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ae8e:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800ae90:	2300      	movs	r3, #0
 800ae92:	75fb      	strb	r3, [r7, #23]
 800ae94:	e016      	b.n	800aec4 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800ae96:	7dfa      	ldrb	r2, [r7, #23]
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	440b      	add	r3, r1
 800aea4:	3304      	adds	r3, #4
 800aea6:	2201      	movs	r2, #1
 800aea8:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800aeaa:	7dfa      	ldrb	r2, [r7, #23]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	440b      	add	r3, r1
 800aeb8:	3306      	adds	r3, #6
 800aeba:	2200      	movs	r2, #0
 800aebc:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
 800aec0:	3301      	adds	r3, #1
 800aec2:	75fb      	strb	r3, [r7, #23]
 800aec4:	7dfa      	ldrb	r2, [r7, #23]
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d3e4      	bcc.n	800ae96 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800aeda:	b490      	push	{r4, r7}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	4604      	mov	r4, r0
 800aee2:	4608      	mov	r0, r1
 800aee4:	4611      	mov	r1, r2
 800aee6:	461a      	mov	r2, r3
 800aee8:	4623      	mov	r3, r4
 800aeea:	71fb      	strb	r3, [r7, #7]
 800aeec:	4603      	mov	r3, r0
 800aeee:	71bb      	strb	r3, [r7, #6]
 800aef0:	460b      	mov	r3, r1
 800aef2:	717b      	strb	r3, [r7, #5]
 800aef4:	4613      	mov	r3, r2
 800aef6:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800aef8:	79bb      	ldrb	r3, [r7, #6]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	4413      	add	r3, r2
 800af02:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800af08:	793b      	ldrb	r3, [r7, #4]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	797b      	ldrb	r3, [r7, #5]
 800af10:	4413      	add	r3, r2
 800af12:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800af18:	7d3b      	ldrb	r3, [r7, #20]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	7c3b      	ldrb	r3, [r7, #16]
 800af20:	4413      	add	r3, r2
 800af22:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800af28:	7f3b      	ldrb	r3, [r7, #28]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	7e3b      	ldrb	r3, [r7, #24]
 800af30:	4413      	add	r3, r2
 800af32:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800af38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af44:	4413      	add	r3, r2
 800af46:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800af4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	b2da      	uxtb	r2, r3
 800af54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af58:	4413      	add	r3, r2
 800af5a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	f897 2020 	ldrb.w	r2, [r7, #32]
 800af86:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800af88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af94:	4413      	add	r3, r2
 800af96:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800afa2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2200      	movs	r2, #0
 800afa8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afe0:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afe8:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]

}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bc90      	pop	{r4, r7}
 800aff8:	4770      	bx	lr

0800affa <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800affa:	b490      	push	{r4, r7}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	461a      	mov	r2, r3
 800b008:	4623      	mov	r3, r4
 800b00a:	71fb      	strb	r3, [r7, #7]
 800b00c:	4603      	mov	r3, r0
 800b00e:	71bb      	strb	r3, [r7, #6]
 800b010:	460b      	mov	r3, r1
 800b012:	717b      	strb	r3, [r7, #5]
 800b014:	4613      	mov	r3, r2
 800b016:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b018:	79bb      	ldrb	r3, [r7, #6]
 800b01a:	011b      	lsls	r3, r3, #4
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	4413      	add	r3, r2
 800b022:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b028:	793b      	ldrb	r3, [r7, #4]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	797b      	ldrb	r3, [r7, #5]
 800b030:	4413      	add	r3, r2
 800b032:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b038:	7d3b      	ldrb	r3, [r7, #20]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	7c3b      	ldrb	r3, [r7, #16]
 800b040:	4413      	add	r3, r2
 800b042:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	789a      	ldrb	r2, [r3, #2]
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	78da      	ldrb	r2, [r3, #3]
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	789a      	ldrb	r2, [r3, #2]
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	78da      	ldrb	r2, [r3, #3]
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	791a      	ldrb	r2, [r3, #4]
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b086:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b094:	4413      	add	r3, r2
 800b096:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b0a2:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800b0aa:	7f3b      	ldrb	r3, [r7, #28]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	7e3b      	ldrb	r3, [r7, #24]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800b0ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800b0ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0da:	4413      	add	r3, r2
 800b0dc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	7bda      	ldrb	r2, [r3, #15]
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	7c1a      	ldrb	r2, [r3, #16]
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	7c5a      	ldrb	r2, [r3, #17]
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b100:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b108:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bc90      	pop	{r4, r7}
 800b118:	4770      	bx	lr

0800b11a <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b087      	sub	sp, #28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	460b      	mov	r3, r1
 800b124:	607a      	str	r2, [r7, #4]
 800b126:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	220c      	movs	r2, #12
 800b142:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b144:	897b      	ldrh	r3, [r7, #10]
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b17a:	2300      	movs	r3, #0
 800b17c:	82fb      	strh	r3, [r7, #22]
 800b17e:	e015      	b.n	800b1ac <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b180:	8afa      	ldrh	r2, [r7, #22]
 800b182:	897b      	ldrh	r3, [r7, #10]
 800b184:	429a      	cmp	r2, r3
 800b186:	d207      	bcs.n	800b198 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b188:	8afb      	ldrh	r3, [r7, #22]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	3302      	adds	r3, #2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	605a      	str	r2, [r3, #4]
 800b196:	e006      	b.n	800b1a6 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b198:	8afb      	ldrh	r3, [r7, #22]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	3302      	adds	r3, #2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b1a6:	8afb      	ldrh	r3, [r7, #22]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	82fb      	strh	r3, [r7, #22]
 800b1ac:	8afb      	ldrh	r3, [r7, #22]
 800b1ae:	2b0b      	cmp	r3, #11
 800b1b0:	d9e6      	bls.n	800b180 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	603a      	str	r2, [r7, #0]
 800b1ca:	80fb      	strh	r3, [r7, #6]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b1d8:	88fb      	ldrh	r3, [r7, #6]
 800b1da:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b1dc:	2300      	movs	r3, #0
 800b1de:	81fb      	strh	r3, [r7, #14]
 800b1e0:	e00e      	b.n	800b200 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b1e2:	88ba      	ldrh	r2, [r7, #4]
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	89ba      	ldrh	r2, [r7, #12]
 800b1f0:	b2d2      	uxtb	r2, r2
 800b1f2:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b1f4:	89bb      	ldrh	r3, [r7, #12]
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b1fa:	89fb      	ldrh	r3, [r7, #14]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	81fb      	strh	r3, [r7, #14]
 800b200:	89fa      	ldrh	r2, [r7, #14]
 800b202:	88bb      	ldrh	r3, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d3ec      	bcc.n	800b1e2 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	4603      	mov	r3, r0
 800b21e:	6039      	str	r1, [r7, #0]
 800b220:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b222:	2300      	movs	r3, #0
 800b224:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b226:	e00a      	b.n	800b23e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b228:	89fb      	ldrh	r3, [r7, #14]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	b21a      	sxth	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	1c59      	adds	r1, r3, #1
 800b232:	6039      	str	r1, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b21b      	sxth	r3, r3
 800b238:	4313      	orrs	r3, r2
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	80fa      	strh	r2, [r7, #6]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1ef      	bne.n	800b228 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b248:	89fb      	ldrh	r3, [r7, #14]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b256:	b480      	push	{r7}
 800b258:	b085      	sub	sp, #20
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	4603      	mov	r3, r0
 800b25e:	603a      	str	r2, [r7, #0]
 800b260:	80fb      	strh	r3, [r7, #6]
 800b262:	460b      	mov	r3, r1
 800b264:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b26e:	88fb      	ldrh	r3, [r7, #6]
 800b270:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b272:	2300      	movs	r3, #0
 800b274:	81fb      	strh	r3, [r7, #14]
 800b276:	e00f      	b.n	800b298 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b278:	88ba      	ldrh	r2, [r7, #4]
 800b27a:	89fb      	ldrh	r3, [r7, #14]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	3b01      	subs	r3, #1
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	4413      	add	r3, r2
 800b284:	89ba      	ldrh	r2, [r7, #12]
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b28a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b28e:	121b      	asrs	r3, r3, #8
 800b290:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b292:	89fb      	ldrh	r3, [r7, #14]
 800b294:	3301      	adds	r3, #1
 800b296:	81fb      	strh	r3, [r7, #14]
 800b298:	89fa      	ldrh	r2, [r7, #14]
 800b29a:	88bb      	ldrh	r3, [r7, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d3eb      	bcc.n	800b278 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	6039      	str	r1, [r7, #0]
 800b2b8:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b25b      	sxtb	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	da0e      	bge.n	800b2e6 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2cc:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b2ce:	e00a      	b.n	800b2e6 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b2d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b2d4:	021b      	lsls	r3, r3, #8
 800b2d6:	b21a      	sxth	r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	1c59      	adds	r1, r3, #1
 800b2dc:	6039      	str	r1, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b21b      	sxth	r3, r3
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b2e6:	88fb      	ldrh	r3, [r7, #6]
 800b2e8:	1e5a      	subs	r2, r3, #1
 800b2ea:	80fa      	strh	r2, [r7, #6]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1ef      	bne.n	800b2d0 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b2f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	460b      	mov	r3, r1
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b31a:	2300      	movs	r3, #0
 800b31c:	82fb      	strh	r3, [r7, #22]
 800b31e:	e00e      	b.n	800b33e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b320:	897a      	ldrh	r2, [r7, #10]
 800b322:	8afb      	ldrh	r3, [r7, #22]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	4413      	add	r3, r2
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	b2d2      	uxtb	r2, r2
 800b330:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	0a1b      	lsrs	r3, r3, #8
 800b336:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b338:	8afb      	ldrh	r3, [r7, #22]
 800b33a:	3301      	adds	r3, #1
 800b33c:	82fb      	strh	r3, [r7, #22]
 800b33e:	8afa      	ldrh	r2, [r7, #22]
 800b340:	897b      	ldrh	r3, [r7, #10]
 800b342:	429a      	cmp	r2, r3
 800b344:	d3ec      	bcc.n	800b320 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	371c      	adds	r7, #28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	6039      	str	r1, [r7, #0]
 800b35e:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b364:	e007      	b.n	800b376 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	021a      	lsls	r2, r3, #8
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	1c59      	adds	r1, r3, #1
 800b36e:	6039      	str	r1, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	1e5a      	subs	r2, r3, #1
 800b37a:	80fa      	strh	r2, [r7, #6]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f2      	bne.n	800b366 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	4603      	mov	r3, r0
 800b396:	6039      	str	r1, [r7, #0]
 800b398:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	b25b      	sxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da0b      	bge.n	800b3c0 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ac:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b3ae:	e007      	b.n	800b3c0 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	021a      	lsls	r2, r3, #8
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	1c59      	adds	r1, r3, #1
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	1e5a      	subs	r2, r3, #1
 800b3c4:	80fa      	strh	r2, [r7, #6]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f2      	bne.n	800b3b0 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d107      	bne.n	800b400 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	2127      	movs	r1, #39	; 0x27
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f009 f9ce 	bl	8014798 <VL53L1_WrByte>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3318      	adds	r3, #24
 800b420:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	78fa      	ldrb	r2, [r7, #3]
 800b426:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b430:	461a      	mov	r2, r3
 800b432:	2185      	movs	r1, #133	; 0x85
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f009 f9af 	bl	8014798 <VL53L1_WrByte>
 800b43a:	4603      	mov	r3, r0
 800b43c:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b456:	2101      	movs	r1, #1
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ffd7 	bl	800b40c <VL53L1_set_firmware_enable_register>
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b47a:	2100      	movs	r1, #0
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ffc5 	bl	800b40c <VL53L1_set_firmware_enable_register>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	460b      	mov	r3, r1
 800b49c:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3318      	adds	r3, #24
 800b4a6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	2183      	movs	r1, #131	; 0x83
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f009 f96c 	bl	8014798 <VL53L1_WrByte>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b4dc:	2101      	movs	r1, #1
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff ffd7 	bl	800b492 <VL53L1_set_powerforce_register>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff ffc5 	bl	800b492 <VL53L1_set_powerforce_register>
 800b508:	4603      	mov	r3, r0
 800b50a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b520:	2300      	movs	r3, #0
 800b522:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3318      	adds	r3, #24
 800b528:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b538:	461a      	mov	r2, r3
 800b53a:	2186      	movs	r1, #134	; 0x86
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f009 f92b 	bl	8014798 <VL53L1_WrByte>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b086      	sub	sp, #24
 800b556:	af00      	add	r7, sp, #0
 800b558:	4603      	mov	r3, r0
 800b55a:	460a      	mov	r2, r1
 800b55c:	80fb      	strh	r3, [r7, #6]
 800b55e:	4613      	mov	r3, r2
 800b560:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b56e:	88fb      	ldrh	r3, [r7, #6]
 800b570:	4618      	mov	r0, r3
 800b572:	f002 ffeb 	bl	800e54c <VL53L1_calc_pll_period_us>
 800b576:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b578:	797b      	ldrb	r3, [r7, #5]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f003 fbd6 	bl	800ed2c <VL53L1_decode_vcsel_period>
 800b580:	4603      	mov	r3, r0
 800b582:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4613      	mov	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	099b      	lsrs	r3, r3, #6
 800b594:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b596:	7cfa      	ldrb	r2, [r7, #19]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
 800b59e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	099b      	lsrs	r3, r3, #6
 800b5a4:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b089      	sub	sp, #36	; 0x24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	817b      	strh	r3, [r7, #10]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	813b      	strh	r3, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	011b      	lsls	r3, r3, #4
 800b5e2:	4a23      	ldr	r2, [pc, #140]	; (800b670 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b5e4:	fb82 1203 	smull	r1, r2, r2, r3
 800b5e8:	1192      	asrs	r2, r2, #6
 800b5ea:	17db      	asrs	r3, r3, #31
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b5f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da03      	bge.n	800b600 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b5f8:	897b      	ldrh	r3, [r7, #10]
 800b5fa:	425b      	negs	r3, r3
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b600:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	da03      	bge.n	800b610 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b608:	893b      	ldrh	r3, [r7, #8]
 800b60a:	425b      	negs	r3, r3
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b610:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b614:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b618:	4413      	add	r3, r2
 800b61a:	015b      	lsls	r3, r3, #5
 800b61c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	4a13      	ldr	r2, [pc, #76]	; (800b670 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b622:	fb82 1203 	smull	r1, r2, r2, r3
 800b626:	1192      	asrs	r2, r2, #6
 800b628:	17db      	asrs	r3, r3, #31
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	4413      	add	r3, r2
 800b634:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b636:	79fa      	ldrb	r2, [r7, #7]
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	fb02 f303 	mul.w	r3, r2, r3
 800b63e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	3310      	adds	r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	da00      	bge.n	800b64a <VL53L1_calc_range_ignore_threshold+0x9a>
 800b648:	331f      	adds	r3, #31
 800b64a:	115b      	asrs	r3, r3, #5
 800b64c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b654:	db03      	blt.n	800b65e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b65a:	83fb      	strh	r3, [r7, #30]
 800b65c:	e001      	b.n	800b662 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b662:	8bfb      	ldrh	r3, [r7, #30]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3724      	adds	r7, #36	; 0x24
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	10624dd3 	.word	0x10624dd3

0800b674 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	e008      	b.n	800b6a0 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	031a      	lsls	r2, r3, #12
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	441a      	add	r2, r3
		timeout_mclks =
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff ffd6 	bl	800b674 <VL53L1_calc_timeout_mclks>
 800b6c8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 f887 	bl	800b7de <VL53L1_encode_timeout>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b6d4:	897b      	ldrh	r3, [r7, #10]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b6de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b6ee:	f04f 0000 	mov.w	r0, #0
 800b6f2:	f04f 0100 	mov.w	r1, #0
 800b6f6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	4688      	mov	r8, r1
 800b700:	4681      	mov	r9, r0
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	460c      	mov	r4, r1
 800b708:	4605      	mov	r5, r0
 800b70a:	fb04 f009 	mul.w	r0, r4, r9
 800b70e:	fb08 f105 	mul.w	r1, r8, r5
 800b712:	4401      	add	r1, r0
 800b714:	fba8 2304 	umull	r2, r3, r8, r4
 800b718:	4419      	add	r1, r3
 800b71a:	460b      	mov	r3, r1
 800b71c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b720:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b728:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b72c:	f143 0b00 	adc.w	fp, r3, #0
 800b730:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b738:	f04f 0200 	mov.w	r2, #0
 800b73c:	f04f 0300 	mov.w	r3, #0
 800b740:	0b02      	lsrs	r2, r0, #12
 800b742:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b746:	0b0b      	lsrs	r3, r1, #12
 800b748:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b750:	697b      	ldr	r3, [r7, #20]
}
 800b752:	4618      	mov	r0, r3
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b75c:	4770      	bx	lr
	...

0800b760 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b774:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b778:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b77a:	4413      	add	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	da02      	bge.n	800b78a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	e005      	b.n	800b796 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b790:	db01      	blt.n	800b796 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b794:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b79a:	68bb      	ldr	r3, [r7, #8]

}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	0003ffff 	.word	0x0003ffff

0800b7ac <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6039      	str	r1, [r7, #0]
 800b7b6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b7c0:	88fb      	ldrh	r3, [r7, #6]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f837 	bl	800b836 <VL53L1_decode_timeout>
 800b7c8:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7ff ff86 	bl	800b6de <VL53L1_calc_timeout_us>
 800b7d2:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b087      	sub	sp, #28
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d017      	beq.n	800b828 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b7fe:	e005      	b.n	800b80c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b806:	89fb      	ldrh	r3, [r7, #14]
 800b808:	3301      	adds	r3, #1
 800b80a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1f4      	bne.n	800b800 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b816:	89fb      	ldrh	r3, [r7, #14]
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	b2db      	uxtb	r3, r3
 800b822:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b824:	4413      	add	r3, r2
 800b826:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b828:	8afb      	ldrh	r3, [r7, #22]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b836:	b480      	push	{r7}
 800b838:	b085      	sub	sp, #20
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	4603      	mov	r3, r0
 800b83e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b844:	88fb      	ldrh	r3, [r7, #6]
 800b846:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b848:	88fa      	ldrh	r2, [r7, #6]
 800b84a:	0a12      	lsrs	r2, r2, #8
 800b84c:	b292      	uxth	r2, r2
 800b84e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b850:	3301      	adds	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b854:	68fb      	ldr	r3, [r7, #12]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b088      	sub	sp, #32
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b880:	887b      	ldrh	r3, [r7, #2]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d102      	bne.n	800b88c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b886:	23f1      	movs	r3, #241	; 0xf1
 800b888:	77fb      	strb	r3, [r7, #31]
 800b88a:	e05d      	b.n	800b948 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	799a      	ldrb	r2, [r3, #6]
 800b890:	887b      	ldrh	r3, [r7, #2]
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fe5c 	bl	800b552 <VL53L1_calc_macro_period_us>
 800b89a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b89c:	6979      	ldr	r1, [r7, #20]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fee8 	bl	800b674 <VL53L1_calc_timeout_mclks>
 800b8a4:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2bff      	cmp	r3, #255	; 0xff
 800b8aa:	d901      	bls.n	800b8b0 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b8ac:	23ff      	movs	r3, #255	; 0xff
 800b8ae:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b8b8:	6979      	ldr	r1, [r7, #20]
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	f7ff fef7 	bl	800b6ae <VL53L1_calc_encoded_timeout>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b8c4:	8a7b      	ldrh	r3, [r7, #18]
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b8d0:	8a7b      	ldrh	r3, [r7, #18]
 800b8d2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b8d8:	6979      	ldr	r1, [r7, #20]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fee7 	bl	800b6ae <VL53L1_calc_encoded_timeout>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b8e4:	8a7b      	ldrh	r3, [r7, #18]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b8f0:	8a7b      	ldrh	r3, [r7, #18]
 800b8f2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	7a5a      	ldrb	r2, [r3, #9]
 800b8fc:	887b      	ldrh	r3, [r7, #2]
 800b8fe:	4611      	mov	r1, r2
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff fe26 	bl	800b552 <VL53L1_calc_macro_period_us>
 800b906:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b908:	6979      	ldr	r1, [r7, #20]
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f7ff fecf 	bl	800b6ae <VL53L1_calc_encoded_timeout>
 800b910:	4603      	mov	r3, r0
 800b912:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b914:	8a7b      	ldrh	r3, [r7, #18]
 800b916:	0a1b      	lsrs	r3, r3, #8
 800b918:	b29b      	uxth	r3, r3
 800b91a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b920:	8a7b      	ldrh	r3, [r7, #18]
 800b922:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b928:	6979      	ldr	r1, [r7, #20]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff febf 	bl	800b6ae <VL53L1_calc_encoded_timeout>
 800b930:	4603      	mov	r3, r0
 800b932:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b934:	8a7b      	ldrh	r3, [r7, #18]
 800b936:	0a1b      	lsrs	r3, r3, #8
 800b938:	b29b      	uxth	r3, r3
 800b93a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b940:	8a7b      	ldrh	r3, [r7, #18]
 800b942:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b948:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b958:	b09e      	sub	sp, #120	; 0x78
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6578      	str	r0, [r7, #84]	; 0x54
 800b95e:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b960:	2300      	movs	r3, #0
 800b962:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b97e:	f04f 0200 	mov.w	r2, #0
 800b982:	f04f 0300 	mov.w	r3, #0
 800b986:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d103      	bne.n	800b99a <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b992:	23f1      	movs	r3, #241	; 0xf1
 800b994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b998:	e0d6      	b.n	800bb48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 80d2 	beq.w	800bb48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a6:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 80cd 	bne.w	800bb48 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b8:	647a      	str	r2, [r7, #68]	; 0x44
 800b9ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b9be:	460b      	mov	r3, r1
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	623b      	str	r3, [r7, #32]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	f143 0300 	adc.w	r3, r3, #0
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b9cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9d0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2200      	movs	r2, #0
 800b9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9e0:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	fb02 f203 	mul.w	r2, r2, r3
 800b9ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9f0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b9f4:	fb01 f303 	mul.w	r3, r1, r3
 800b9f8:	441a      	add	r2, r3
 800b9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9fe:	fba3 4501 	umull	r4, r5, r3, r1
 800ba02:	1953      	adds	r3, r2, r5
 800ba04:	461d      	mov	r5, r3
 800ba06:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800ba0a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800ba0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ba18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	3301      	adds	r3, #1
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	4613      	mov	r3, r2
 800ba24:	f143 0300 	adc.w	r3, r3, #0
 800ba28:	61fb      	str	r3, [r7, #28]
 800ba2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ba2e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800ba32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba34:	885b      	ldrh	r3, [r3, #2]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	2200      	movs	r2, #0
 800ba3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba3c:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800ba3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ba44:	4622      	mov	r2, r4
 800ba46:	fb02 f203 	mul.w	r2, r2, r3
 800ba4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	fb01 f303 	mul.w	r3, r1, r3
 800ba52:	441a      	add	r2, r3
 800ba54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba56:	4621      	mov	r1, r4
 800ba58:	fba3 ab01 	umull	sl, fp, r3, r1
 800ba5c:	eb02 030b 	add.w	r3, r2, fp
 800ba60:	469b      	mov	fp, r3
 800ba62:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800ba66:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800ba6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	17da      	asrs	r2, r3, #31
 800ba70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba72:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800ba74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba76:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ba7a:	4622      	mov	r2, r4
 800ba7c:	fb02 f203 	mul.w	r2, r2, r3
 800ba80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba82:	4629      	mov	r1, r5
 800ba84:	fb01 f303 	mul.w	r3, r1, r3
 800ba88:	4413      	add	r3, r2
 800ba8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	fba2 8901 	umull	r8, r9, r2, r1
 800ba92:	444b      	add	r3, r9
 800ba94:	4699      	mov	r9, r3
 800ba96:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800ba9a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800ba9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800baa2:	0fd9      	lsrs	r1, r3, #31
 800baa4:	2000      	movs	r0, #0
 800baa6:	6139      	str	r1, [r7, #16]
 800baa8:	6178      	str	r0, [r7, #20]
 800baaa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800baae:	4621      	mov	r1, r4
 800bab0:	1889      	adds	r1, r1, r2
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	4629      	mov	r1, r5
 800bab6:	eb43 0101 	adc.w	r1, r3, r1
 800baba:	60f9      	str	r1, [r7, #12]
 800babc:	f04f 0200 	mov.w	r2, #0
 800bac0:	f04f 0300 	mov.w	r3, #0
 800bac4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bac8:	4621      	mov	r1, r4
 800baca:	084a      	lsrs	r2, r1, #1
 800bacc:	4629      	mov	r1, r5
 800bace:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bad2:	4629      	mov	r1, r5
 800bad4:	104b      	asrs	r3, r1, #1
 800bad6:	4610      	mov	r0, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bade:	1814      	adds	r4, r2, r0
 800bae0:	603c      	str	r4, [r7, #0]
 800bae2:	414b      	adcs	r3, r1
 800bae4:	607b      	str	r3, [r7, #4]
 800bae6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800baea:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800baee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800baf2:	4313      	orrs	r3, r2
 800baf4:	d009      	beq.n	800bb0a <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800baf6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bafa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bafe:	f7f4 fb8f 	bl	8000220 <__aeabi_ldivmod>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800bb0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800bb12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800bb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800bb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800bb24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb26:	7852      	ldrb	r2, [r2, #1]
 800bb28:	0852      	lsrs	r2, r2, #1
 800bb2a:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800bb2c:	441a      	add	r2, r3
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800bb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800bb3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb3c:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800bb3e:	fb93 f2f2 	sdiv	r2, r3, r2
 800bb42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800bb48:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3778      	adds	r7, #120	; 0x78
 800bb50:	46bd      	mov	sp, r7
 800bb52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bb56 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b087      	sub	sp, #28
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3318      	adds	r3, #24
 800bb64:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800bb78:	029b      	lsls	r3, r3, #10
 800bb7a:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800bb82:	029b      	lsls	r3, r3, #10
 800bb84:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f040 8095 	bne.w	800bcc0 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800bb9c:	091b      	lsrs	r3, r3, #4
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800bbaa:	f003 030f 	and.w	r3, r3, #15
 800bbae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800bbba:	091b      	lsrs	r3, r3, #4
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800bbc8:	f003 030f 	and.w	r3, r3, #15
 800bbcc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800bbd8:	091b      	lsrs	r3, r3, #4
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800bbe6:	f003 030f 	and.w	r3, r3, #15
 800bbea:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	da2c      	bge.n	800bc56 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800bc02:	091b      	lsrs	r3, r3, #4
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800bc10:	f003 030f 	and.w	r3, r3, #15
 800bc14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800bc20:	091b      	lsrs	r3, r3, #4
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bc3e:	091b      	lsrs	r3, r3, #4
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bc4c:	f003 030f 	and.w	r3, r3, #15
 800bc50:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	f340 80c2 	ble.w	800bde8 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bc6a:	091b      	lsrs	r3, r3, #4
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bc88:	091b      	lsrs	r3, r3, #4
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bc96:	f003 030f 	and.w	r3, r3, #15
 800bc9a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800bca6:	091b      	lsrs	r3, r3, #4
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800bcb4:	f003 030f 	and.w	r3, r3, #15
 800bcb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	731a      	strb	r2, [r3, #12]
 800bcbe:	e093      	b.n	800bde8 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800bcc6:	f003 030f 	and.w	r3, r3, #15
 800bcca:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800bcd6:	f003 030f 	and.w	r3, r3, #15
 800bcda:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800bce6:	091b      	lsrs	r3, r3, #4
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800bd04:	091b      	lsrs	r3, r3, #4
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800bd12:	f003 030f 	and.w	r3, r3, #15
 800bd16:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	da2c      	bge.n	800bd82 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800bd2e:	091b      	lsrs	r3, r3, #4
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bd3c:	f003 030f 	and.w	r3, r3, #15
 800bd40:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800bd4c:	091b      	lsrs	r3, r3, #4
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800bd6a:	091b      	lsrs	r3, r3, #4
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	dd2c      	ble.n	800bde8 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800bd94:	091b      	lsrs	r3, r3, #4
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bdb2:	091b      	lsrs	r3, r3, #4
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bdd0:	091b      	lsrs	r3, r3, #4
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]
 800bdec:	e007      	b.n	800bdfe <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	75fb      	strb	r3, [r7, #23]
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	2b05      	cmp	r3, #5
 800be02:	d9f4      	bls.n	800bdee <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800be04:	bf00      	nop
 800be06:	bf00      	nop
 800be08:	371c      	adds	r7, #28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800be12:	b590      	push	{r4, r7, lr}
 800be14:	b093      	sub	sp, #76	; 0x4c
 800be16:	af04      	add	r7, sp, #16
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3318      	adds	r3, #24
 800be2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800be52:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800be5c:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be60:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800be64:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800be6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800be70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be74:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800be76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be78:	021b      	lsls	r3, r3, #8
 800be7a:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	2b07      	cmp	r3, #7
 800be82:	d006      	beq.n	800be92 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800be88:	2b08      	cmp	r3, #8
 800be8a:	d002      	beq.n	800be92 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800be8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be90:	e0ec      	b.n	800c06c <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800be92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800be98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be9c:	e0e6      	b.n	800c06c <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800be9e:	2300      	movs	r3, #0
 800bea0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bea4:	e0d9      	b.n	800c05a <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bea6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	214c      	movs	r1, #76	; 0x4c
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	4413      	add	r3, r2
 800beb4:	335e      	adds	r3, #94	; 0x5e
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b09      	cmp	r3, #9
 800beba:	d00b      	beq.n	800bed4 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800bebc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	214c      	movs	r1, #76	; 0x4c
 800bec4:	fb01 f303 	mul.w	r3, r1, r3
 800bec8:	4413      	add	r3, r2
 800beca:	335e      	adds	r3, #94	; 0x5e
 800becc:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bece:	2b13      	cmp	r3, #19
 800bed0:	f040 80bd 	bne.w	800c04e <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	795b      	ldrb	r3, [r3, #5]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800bedc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	214c      	movs	r1, #76	; 0x4c
 800bee4:	fb01 f303 	mul.w	r3, r1, r3
 800bee8:	4413      	add	r3, r2
 800beea:	335e      	adds	r3, #94	; 0x5e
 800beec:	2217      	movs	r2, #23
 800beee:	701a      	strb	r2, [r3, #0]
 800bef0:	e009      	b.n	800bf06 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800bef2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	214c      	movs	r1, #76	; 0x4c
 800befa:	fb01 f303 	mul.w	r3, r1, r3
 800befe:	4413      	add	r3, r2
 800bf00:	335e      	adds	r3, #94	; 0x5e
 800bf02:	2207      	movs	r2, #7
 800bf04:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800bf06:	2300      	movs	r3, #0
 800bf08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bf0c:	e097      	b.n	800c03e <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bf0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	214c      	movs	r1, #76	; 0x4c
 800bf16:	fb01 f303 	mul.w	r3, r1, r3
 800bf1a:	4413      	add	r3, r2
 800bf1c:	3354      	adds	r3, #84	; 0x54
 800bf1e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800bf20:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4403      	add	r3, r0
 800bf30:	3310      	adds	r3, #16
 800bf32:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bf34:	4299      	cmp	r1, r3
 800bf36:	d915      	bls.n	800bf64 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800bf38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	214c      	movs	r1, #76	; 0x4c
 800bf40:	fb01 f303 	mul.w	r3, r1, r3
 800bf44:	4413      	add	r3, r2
 800bf46:	3354      	adds	r3, #84	; 0x54
 800bf48:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800bf4a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4613      	mov	r3, r2
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4403      	add	r3, r0
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800bf5e:	1acb      	subs	r3, r1, r3
 800bf60:	867b      	strh	r3, [r7, #50]	; 0x32
 800bf62:	e014      	b.n	800bf8e <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800bf64:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	440b      	add	r3, r1
 800bf74:	3310      	adds	r3, #16
 800bf76:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800bf78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	204c      	movs	r0, #76	; 0x4c
 800bf80:	fb00 f303 	mul.w	r3, r0, r3
 800bf84:	440b      	add	r3, r1
 800bf86:	3354      	adds	r3, #84	; 0x54
 800bf88:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800bf8e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bf90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d24e      	bcs.n	800c034 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800bf96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d125      	bne.n	800bfea <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800bf9e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	3308      	adds	r3, #8
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800bfb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800bfb4:	224c      	movs	r2, #76	; 0x4c
 800bfb6:	fb02 f303 	mul.w	r3, r2, r3
 800bfba:	3310      	adds	r3, #16
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bfc4:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800bfc8:	f107 0217 	add.w	r2, r7, #23
 800bfcc:	9203      	str	r2, [sp, #12]
 800bfce:	f107 021c 	add.w	r2, r7, #28
 800bfd2:	9202      	str	r2, [sp, #8]
 800bfd4:	f107 0218 	add.w	r2, r7, #24
 800bfd8:	9201      	str	r2, [sp, #4]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	4623      	mov	r3, r4
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	f000 f848 	bl	800c074 <VL53L1_hist_events_consistency_check>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800bfea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d115      	bne.n	800c01e <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800bff4:	2b09      	cmp	r3, #9
 800bff6:	d112      	bne.n	800c01e <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800bff8:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800bffc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800c000:	224c      	movs	r2, #76	; 0x4c
 800c002:	fb02 f303 	mul.w	r3, r2, r3
 800c006:	3310      	adds	r3, #16
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	4413      	add	r3, r2
 800c00c:	3304      	adds	r3, #4
 800c00e:	f107 0217 	add.w	r2, r7, #23
 800c012:	4619      	mov	r1, r3
 800c014:	f000 fb44 	bl	800c6a0 <VL53L1_hist_merged_pulse_check>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800c01e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c022:	7df8      	ldrb	r0, [r7, #23]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	214c      	movs	r1, #76	; 0x4c
 800c028:	fb01 f303 	mul.w	r3, r1, r3
 800c02c:	4413      	add	r3, r2
 800c02e:	335e      	adds	r3, #94	; 0x5e
 800c030:	4602      	mov	r2, r0
 800c032:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800c034:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c038:	3301      	adds	r3, #1
 800c03a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	795b      	ldrb	r3, [r3, #5]
 800c042:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c046:	429a      	cmp	r2, r3
 800c048:	f4ff af61 	bcc.w	800bf0e <VL53L1_hist_phase_consistency_check+0xfc>
 800c04c:	e000      	b.n	800c050 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800c04e:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c050:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c054:	3301      	adds	r3, #1
 800c056:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	7c9b      	ldrb	r3, [r3, #18]
 800c05e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c062:	429a      	cmp	r2, r3
 800c064:	f4ff af1f 	bcc.w	800bea6 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c068:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	373c      	adds	r7, #60	; 0x3c
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800c074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c078:	b0d4      	sub	sp, #336	; 0x150
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c080:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c084:	4603      	mov	r3, r0
 800c086:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800c08a:	460b      	mov	r3, r1
 800c08c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c090:	2300      	movs	r3, #0
 800c092:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	f04f 0300 	mov.w	r3, #0
 800c0aa:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	f04f 0300 	mov.w	r3, #0
 800c0ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	f04f 0300 	mov.w	r3, #0
 800c0e6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800c102:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c106:	2b00      	cmp	r3, #0
 800c108:	d106      	bne.n	800c118 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c10a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c10e:	2209      	movs	r2, #9
 800c110:	701a      	strb	r2, [r3, #0]
		return status;
 800c112:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800c116:	e2bd      	b.n	800c694 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800c118:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	2200      	movs	r2, #0
 800c120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c124:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c128:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c12c:	460b      	mov	r3, r1
 800c12e:	3301      	adds	r3, #1
 800c130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c134:	4613      	mov	r3, r2
 800c136:	f143 0300 	adc.w	r3, r3, #0
 800c13a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c13e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c142:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800c146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c14a:	885b      	ldrh	r3, [r3, #2]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	2200      	movs	r2, #0
 800c150:	469a      	mov	sl, r3
 800c152:	4693      	mov	fp, r2
 800c154:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c158:	fb0a f203 	mul.w	r2, sl, r3
 800c15c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c160:	fb0b f303 	mul.w	r3, fp, r3
 800c164:	441a      	add	r2, r3
 800c166:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c16a:	fba3 450a 	umull	r4, r5, r3, sl
 800c16e:	1953      	adds	r3, r2, r5
 800c170:	461d      	mov	r5, r3
 800c172:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800c176:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800c17a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2200      	movs	r2, #0
 800c182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c186:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c18a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c18e:	460b      	mov	r3, r1
 800c190:	3301      	adds	r3, #1
 800c192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c196:	4613      	mov	r3, r2
 800c198:	f143 0300 	adc.w	r3, r3, #0
 800c19c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1a0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c1a4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c1a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c1ac:	8adb      	ldrh	r3, [r3, #22]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1b6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c1ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1be:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	fb02 f203 	mul.w	r2, r2, r3
 800c1c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	fb01 f303 	mul.w	r3, r1, r3
 800c1d2:	441a      	add	r2, r3
 800c1d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1d8:	4621      	mov	r1, r4
 800c1da:	fba3 8901 	umull	r8, r9, r3, r1
 800c1de:	eb02 0309 	add.w	r3, r2, r9
 800c1e2:	4699      	mov	r9, r3
 800c1e4:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c1e8:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c1ec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c1f0:	f04f 0000 	mov.w	r0, #0
 800c1f4:	f04f 0100 	mov.w	r1, #0
 800c1f8:	0319      	lsls	r1, r3, #12
 800c1fa:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c1fe:	0310      	lsls	r0, r2, #12
 800c200:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c204:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c208:	0fd9      	lsrs	r1, r3, #31
 800c20a:	2000      	movs	r0, #0
 800c20c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c210:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c214:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c218:	4621      	mov	r1, r4
 800c21a:	1889      	adds	r1, r1, r2
 800c21c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c220:	4629      	mov	r1, r5
 800c222:	eb43 0101 	adc.w	r1, r3, r1
 800c226:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c22a:	f04f 0200 	mov.w	r2, #0
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c236:	4621      	mov	r1, r4
 800c238:	084a      	lsrs	r2, r1, #1
 800c23a:	4629      	mov	r1, r5
 800c23c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c240:	4629      	mov	r1, r5
 800c242:	104b      	asrs	r3, r1, #1
 800c244:	4610      	mov	r0, r2
 800c246:	4619      	mov	r1, r3
 800c248:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c24c:	1814      	adds	r4, r2, r0
 800c24e:	67bc      	str	r4, [r7, #120]	; 0x78
 800c250:	414b      	adcs	r3, r1
 800c252:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c254:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c258:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c25c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c260:	4313      	orrs	r3, r2
 800c262:	d009      	beq.n	800c278 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c264:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c268:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c26c:	f7f3 ffd8 	bl	8000220 <__aeabi_ldivmod>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c278:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c27c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c280:	fb03 f102 	mul.w	r1, r3, r2
 800c284:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c288:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c28c:	fb02 f303 	mul.w	r3, r2, r3
 800c290:	18ca      	adds	r2, r1, r3
 800c292:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c296:	fba3 1303 	umull	r1, r3, r3, r3
 800c29a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c29e:	460b      	mov	r3, r1
 800c2a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2a8:	18d3      	adds	r3, r2, r3
 800c2aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2ae:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c2b2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c2b6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c2ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c2be:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c2c2:	6739      	str	r1, [r7, #112]	; 0x70
 800c2c4:	f143 0300 	adc.w	r3, r3, #0
 800c2c8:	677b      	str	r3, [r7, #116]	; 0x74
 800c2ca:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c2ce:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c2d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	da08      	bge.n	800c2ec <VL53L1_hist_events_consistency_check+0x278>
 800c2da:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c2de:	1851      	adds	r1, r2, r1
 800c2e0:	66b9      	str	r1, [r7, #104]	; 0x68
 800c2e2:	f143 0300 	adc.w	r3, r3, #0
 800c2e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c2ec:	f04f 0000 	mov.w	r0, #0
 800c2f0:	f04f 0100 	mov.w	r1, #0
 800c2f4:	0b10      	lsrs	r0, r2, #12
 800c2f6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c2fa:	1319      	asrs	r1, r3, #12
 800c2fc:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c300:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	2200      	movs	r2, #0
 800c308:	663b      	str	r3, [r7, #96]	; 0x60
 800c30a:	667a      	str	r2, [r7, #100]	; 0x64
 800c30c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c310:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c314:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	2200      	movs	r2, #0
 800c31c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c320:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c324:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c328:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c32c:	4621      	mov	r1, r4
 800c32e:	1a51      	subs	r1, r2, r1
 800c330:	65b9      	str	r1, [r7, #88]	; 0x58
 800c332:	4629      	mov	r1, r5
 800c334:	eb63 0301 	sbc.w	r3, r3, r1
 800c338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c33a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c33e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c342:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c346:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c34a:	fb03 f102 	mul.w	r1, r3, r2
 800c34e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c352:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c356:	fb02 f303 	mul.w	r3, r2, r3
 800c35a:	4419      	add	r1, r3
 800c35c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c360:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c364:	fba2 2303 	umull	r2, r3, r2, r3
 800c368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c36c:	4613      	mov	r3, r2
 800c36e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c376:	18cb      	adds	r3, r1, r3
 800c378:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c37c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c380:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c384:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c388:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c38c:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c390:	6539      	str	r1, [r7, #80]	; 0x50
 800c392:	f143 0300 	adc.w	r3, r3, #0
 800c396:	657b      	str	r3, [r7, #84]	; 0x54
 800c398:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c39c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c3a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	da08      	bge.n	800c3ba <VL53L1_hist_events_consistency_check+0x346>
 800c3a8:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c3ac:	1851      	adds	r1, r2, r1
 800c3ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800c3b0:	f143 0300 	adc.w	r3, r3, #0
 800c3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3ba:	f04f 0000 	mov.w	r0, #0
 800c3be:	f04f 0100 	mov.w	r1, #0
 800c3c2:	0b10      	lsrs	r0, r2, #12
 800c3c4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c3c8:	1319      	asrs	r1, r3, #12
 800c3ca:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c3ce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c3d2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c3d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c3e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c3ea:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	fb02 f203 	mul.w	r2, r2, r3
 800c3f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	fb01 f303 	mul.w	r3, r1, r3
 800c3fe:	441a      	add	r2, r3
 800c400:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c404:	4621      	mov	r1, r4
 800c406:	fba3 1301 	umull	r1, r3, r3, r1
 800c40a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c40e:	460b      	mov	r3, r1
 800c410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c418:	18d3      	adds	r3, r2, r3
 800c41a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c41e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c422:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c426:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c42a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c42e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c432:	6439      	str	r1, [r7, #64]	; 0x40
 800c434:	f143 0300 	adc.w	r3, r3, #0
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
 800c43a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c43e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c442:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c446:	2b00      	cmp	r3, #0
 800c448:	da08      	bge.n	800c45c <VL53L1_hist_events_consistency_check+0x3e8>
 800c44a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c44e:	1851      	adds	r1, r2, r1
 800c450:	63b9      	str	r1, [r7, #56]	; 0x38
 800c452:	f143 0300 	adc.w	r3, r3, #0
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c45c:	f04f 0000 	mov.w	r0, #0
 800c460:	f04f 0100 	mov.w	r1, #0
 800c464:	0b10      	lsrs	r0, r2, #12
 800c466:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c46a:	1319      	asrs	r1, r3, #12
 800c46c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c470:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c474:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c478:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47e:	2200      	movs	r2, #0
 800c480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c484:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c48c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c490:	4622      	mov	r2, r4
 800c492:	fb02 f203 	mul.w	r2, r2, r3
 800c496:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c49a:	4629      	mov	r1, r5
 800c49c:	fb01 f303 	mul.w	r3, r1, r3
 800c4a0:	441a      	add	r2, r3
 800c4a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	fba3 1301 	umull	r1, r3, r3, r1
 800c4ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4ba:	18d3      	adds	r3, r2, r3
 800c4bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4c0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c4c4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c4c8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c4cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c4d0:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c4d4:	6339      	str	r1, [r7, #48]	; 0x30
 800c4d6:	f143 0300 	adc.w	r3, r3, #0
 800c4da:	637b      	str	r3, [r7, #52]	; 0x34
 800c4dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c4e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c4e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	2900      	cmp	r1, #0
 800c4ee:	da08      	bge.n	800c502 <VL53L1_hist_events_consistency_check+0x48e>
 800c4f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c4f4:	18c3      	adds	r3, r0, r3
 800c4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4f8:	f141 0300 	adc.w	r3, r1, #0
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	f04f 0300 	mov.w	r3, #0
 800c50a:	0b02      	lsrs	r2, r0, #12
 800c50c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c510:	130b      	asrs	r3, r1, #12
 800c512:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c516:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c51a:	1c91      	adds	r1, r2, #2
 800c51c:	6239      	str	r1, [r7, #32]
 800c51e:	f143 0300 	adc.w	r3, r3, #0
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
 800c524:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c528:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c52c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c530:	2b00      	cmp	r3, #0
 800c532:	da06      	bge.n	800c542 <VL53L1_hist_events_consistency_check+0x4ce>
 800c534:	1cd1      	adds	r1, r2, #3
 800c536:	61b9      	str	r1, [r7, #24]
 800c538:	f143 0300 	adc.w	r3, r3, #0
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c542:	f04f 0000 	mov.w	r0, #0
 800c546:	f04f 0100 	mov.w	r1, #0
 800c54a:	0890      	lsrs	r0, r2, #2
 800c54c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c550:	1099      	asrs	r1, r3, #2
 800c552:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c55a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c55c:	2200      	movs	r2, #0
 800c55e:	613b      	str	r3, [r7, #16]
 800c560:	617a      	str	r2, [r7, #20]
 800c562:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c566:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c56a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c56e:	1c91      	adds	r1, r2, #2
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	f143 0300 	adc.w	r3, r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c57c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c580:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c584:	2b00      	cmp	r3, #0
 800c586:	da06      	bge.n	800c596 <VL53L1_hist_events_consistency_check+0x522>
 800c588:	1cd1      	adds	r1, r2, #3
 800c58a:	6039      	str	r1, [r7, #0]
 800c58c:	f143 0300 	adc.w	r3, r3, #0
 800c590:	607b      	str	r3, [r7, #4]
 800c592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c596:	f04f 0000 	mov.w	r0, #0
 800c59a:	f04f 0100 	mov.w	r1, #0
 800c59e:	0890      	lsrs	r0, r2, #2
 800c5a0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c5a4:	1099      	asrs	r1, r3, #2
 800c5a6:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ae:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c5b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c5b4:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c5b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c5ba:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c5bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c5c0:	4413      	add	r3, r2
 800c5c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c5c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c5ca:	011b      	lsls	r3, r3, #4
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f002 f8c6 	bl	800e75e <VL53L1_isqrt>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c5d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5da:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c5dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c5e6:	fb03 f202 	mul.w	r2, r3, r2
 800c5ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5ee:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c5f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f103 0220 	add.w	r2, r3, #32
 800c5fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5fe:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c600:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	da00      	bge.n	800c60c <VL53L1_hist_events_consistency_check+0x598>
 800c60a:	333f      	adds	r3, #63	; 0x3f
 800c60c:	119b      	asrs	r3, r3, #6
 800c60e:	461a      	mov	r2, r3
 800c610:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c614:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c62c:	1a9b      	subs	r3, r3, r2
 800c62e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c636:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c63a:	429a      	cmp	r2, r3
 800c63c:	da08      	bge.n	800c650 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c63e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c646:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c648:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	e007      	b.n	800c660 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c654:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c658:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c65a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c65e:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c660:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	dd0b      	ble.n	800c688 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c670:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c674:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c676:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d204      	bcs.n	800c688 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c67e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c682:	2214      	movs	r2, #20
 800c684:	701a      	strb	r2, [r3, #0]
 800c686:	e003      	b.n	800c690 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c688:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c68c:	2209      	movs	r2, #9
 800c68e:	701a      	strb	r2, [r3, #0]





	return status;
 800c690:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c694:	4618      	mov	r0, r3
 800c696:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c69a:	46bd      	mov	sp, r7
 800c69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c6a0 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
 800c6ac:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	dd0b      	ble.n	800c6de <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	b29b      	uxth	r3, r3
		delta_mm =
 800c6da:	82fb      	strh	r3, [r7, #22]
 800c6dc:	e00a      	b.n	800c6f4 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29b      	uxth	r3, r3
		delta_mm =
 800c6f2:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c6f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dd09      	ble.n	800c710 <VL53L1_hist_merged_pulse_check+0x70>
 800c6fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c704:	429a      	cmp	r2, r3
 800c706:	dd03      	ble.n	800c710 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2216      	movs	r2, #22
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	e002      	b.n	800c716 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2209      	movs	r2, #9
 800c714:	701a      	strb	r2, [r3, #0]

	return status;
 800c716:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	371c      	adds	r7, #28
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b08e      	sub	sp, #56	; 0x38
 800c72a:	af04      	add	r7, sp, #16
 800c72c:	60f8      	str	r0, [r7, #12]
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	607a      	str	r2, [r7, #4]
 800c732:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c734:	2300      	movs	r3, #0
 800c736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3318      	adds	r3, #24
 800c73e:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c74e:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c750:	6a3b      	ldr	r3, [r7, #32]
 800c752:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c756:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c75e:	2b09      	cmp	r3, #9
 800c760:	d009      	beq.n	800c776 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c768:	2b13      	cmp	r3, #19
 800c76a:	d004      	beq.n	800c776 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c772:	2b14      	cmp	r3, #20
 800c774:	d129      	bne.n	800c7ca <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	d009      	beq.n	800c794 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c786:	2b13      	cmp	r3, #19
 800c788:	d004      	beq.n	800c794 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c790:	2b14      	cmp	r3, #20
 800c792:	d11a      	bne.n	800c7ca <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2209      	movs	r2, #9
 800c798:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c7a6:	8bb9      	ldrh	r1, [r7, #28]
 800c7a8:	7ff8      	ldrb	r0, [r7, #31]
 800c7aa:	9303      	str	r3, [sp, #12]
 800c7ac:	f107 0318 	add.w	r3, r7, #24
 800c7b0:	9302      	str	r3, [sp, #8]
 800c7b2:	f107 0314 	add.w	r3, r7, #20
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	f7ff fc58 	bl	800c074 <VL53L1_hist_events_consistency_check>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c7ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b088      	sub	sp, #32
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d019      	beq.n	800c836 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c808:	4618      	mov	r0, r3
 800c80a:	f002 f90f 	bl	800ea2c <VL53L1_calc_pll_period_mm>
 800c80e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c816:	021b      	lsls	r3, r3, #8
 800c818:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	69ba      	ldr	r2, [r7, #24]
 800c81e:	fb02 f303 	mul.w	r3, r2, r3
 800c822:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c82a:	0bdb      	lsrs	r3, r3, #15
 800c82c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	b21a      	sxth	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3720      	adds	r7, #32
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c842:	b590      	push	{r4, r7, lr}
 800c844:	b08d      	sub	sp, #52	; 0x34
 800c846:	af04      	add	r7, sp, #16
 800c848:	4604      	mov	r4, r0
 800c84a:	4608      	mov	r0, r1
 800c84c:	4611      	mov	r1, r2
 800c84e:	461a      	mov	r2, r3
 800c850:	4623      	mov	r3, r4
 800c852:	80fb      	strh	r3, [r7, #6]
 800c854:	4603      	mov	r3, r0
 800c856:	80bb      	strh	r3, [r7, #4]
 800c858:	460b      	mov	r3, r1
 800c85a:	70fb      	strb	r3, [r7, #3]
 800c85c:	4613      	mov	r3, r2
 800c85e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c880:	78b9      	ldrb	r1, [r7, #2]
 800c882:	78f8      	ldrb	r0, [r7, #3]
 800c884:	f107 030c 	add.w	r3, r7, #12
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	f107 030e 	add.w	r3, r7, #14
 800c88e:	9302      	str	r3, [sp, #8]
 800c890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	23ff      	movs	r3, #255	; 0xff
 800c89c:	22c7      	movs	r2, #199	; 0xc7
 800c89e:	f000 fa03 	bl	800cca8 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c8a2:	89fb      	ldrh	r3, [r7, #14]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d050      	beq.n	800c94a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c8a8:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d04d      	beq.n	800c94a <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c8ae:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c8b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c8b6:	78b9      	ldrb	r1, [r7, #2]
 800c8b8:	78f8      	ldrb	r0, [r7, #3]
 800c8ba:	f107 0308 	add.w	r3, r7, #8
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	f107 030a 	add.w	r3, r7, #10
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	4623      	mov	r3, r4
 800c8d2:	f000 f9e9 	bl	800cca8 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c8da:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c8dc:	897b      	ldrh	r3, [r7, #10]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	fb02 f303 	mul.w	r3, r2, r3
 800c8e6:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c8e8:	89fb      	ldrh	r3, [r7, #14]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f2:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c8f8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c8fa:	893b      	ldrh	r3, [r7, #8]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	fb02 f303 	mul.w	r3, r2, r3
 800c904:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c906:	89bb      	ldrh	r3, [r7, #12]
 800c908:	461a      	mov	r2, r3
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c910:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c916:	69ba      	ldr	r2, [r7, #24]
 800c918:	fb02 f303 	mul.w	r3, r2, r3
 800c91c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c91e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	fb02 f303 	mul.w	r3, r2, r3
 800c928:	69fa      	ldr	r2, [r7, #28]
 800c92a:	4413      	add	r3, r2
 800c92c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c92e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c930:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c932:	4413      	add	r3, r2
 800c934:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d008      	beq.n	800c94e <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	009a      	lsls	r2, r3, #2
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	fb92 f3f3 	sdiv	r3, r2, r3
 800c946:	61fb      	str	r3, [r7, #28]
 800c948:	e002      	b.n	800c950 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c94e:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	b21a      	sxth	r2, r3
 800c954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c956:	801a      	strh	r2, [r3, #0]

}
 800c958:	bf00      	nop
 800c95a:	3724      	adds	r7, #36	; 0x24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd90      	pop	{r4, r7, pc}

0800c960 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	607a      	str	r2, [r7, #4]
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	08db      	lsrs	r3, r3, #3
 800c974:	b2da      	uxtb	r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	b2da      	uxtb	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	2301      	movs	r3, #1
 800c98e:	4093      	lsls	r3, r2
 800c990:	b2da      	uxtb	r2, r3
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	701a      	strb	r2, [r3, #0]

}
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	603a      	str	r2, [r7, #0]
 800c9ac:	71fb      	strb	r3, [r7, #7]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	2b07      	cmp	r3, #7
 800c9b6:	d90a      	bls.n	800c9ce <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c9b8:	79bb      	ldrb	r3, [r7, #6]
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	3b71      	subs	r3, #113	; 0x71
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c9cc:	e00a      	b.n	800c9e4 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c9ce:	79bb      	ldrb	r3, [r7, #6]
 800c9d0:	f1c3 030f 	rsb	r3, r3, #15
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	4413      	add	r3, r2
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	701a      	strb	r2, [r3, #0]
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	091b      	lsrs	r3, r3, #4
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	f003 030f 	and.w	r3, r3, #15
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	701a      	strb	r2, [r3, #0]

}
 800ca14:	bf00      	nop
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	603a      	str	r2, [r7, #0]
 800ca2a:	71fb      	strb	r3, [r7, #7]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800ca30:	79bb      	ldrb	r3, [r7, #6]
 800ca32:	011b      	lsls	r3, r3, #4
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	79fb      	ldrb	r3, [r7, #7]
 800ca38:	4413      	add	r3, r2
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	701a      	strb	r2, [r3, #0]

}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60ba      	str	r2, [r7, #8]
 800ca54:	607b      	str	r3, [r7, #4]
 800ca56:	4603      	mov	r3, r0
 800ca58:	73fb      	strb	r3, [r7, #15]
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800ca6e:	f107 0217 	add.w	r2, r7, #23
 800ca72:	f107 0116 	add.w	r1, r7, #22
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f002 fa51 	bl	800ef20 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800ca7e:	f107 0214 	add.w	r2, r7, #20
 800ca82:	f107 0115 	add.w	r1, r7, #21
 800ca86:	7bbb      	ldrb	r3, [r7, #14]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff ffb1 	bl	800c9f0 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	7d7b      	ldrb	r3, [r7, #21]
 800ca94:	3301      	adds	r3, #1
 800ca96:	0fd9      	lsrs	r1, r3, #31
 800ca98:	440b      	add	r3, r1
 800ca9a:	105b      	asrs	r3, r3, #1
 800ca9c:	425b      	negs	r3, r3
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	4413      	add	r3, r2
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	b21a      	sxth	r2, r3
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	da02      	bge.n	800caba <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2200      	movs	r2, #0
 800cab8:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	7d7b      	ldrb	r3, [r7, #21]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4413      	add	r3, r2
 800cac8:	b29b      	uxth	r3, r3
 800caca:	b21a      	sxth	r2, r3
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	dd02      	ble.n	800cae0 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	220f      	movs	r2, #15
 800cade:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800cae0:	7dbb      	ldrb	r3, [r7, #22]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	7d3b      	ldrb	r3, [r7, #20]
 800cae6:	3301      	adds	r3, #1
 800cae8:	0fd9      	lsrs	r1, r3, #31
 800caea:	440b      	add	r3, r1
 800caec:	105b      	asrs	r3, r3, #1
 800caee:	425b      	negs	r3, r3
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	4413      	add	r3, r2
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	b21a      	sxth	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	da02      	bge.n	800cb0c <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	7d3b      	ldrb	r3, [r7, #20]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	4413      	add	r3, r2
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	b21a      	sxth	r2, r3
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb28:	2b0f      	cmp	r3, #15
 800cb2a:	dd02      	ble.n	800cb32 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	220f      	movs	r2, #15
 800cb30:	801a      	strh	r2, [r3, #0]
}
 800cb32:	bf00      	nop
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b085      	sub	sp, #20
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	4603      	mov	r3, r0
 800cb42:	460a      	mov	r2, r1
 800cb44:	71fb      	strb	r3, [r7, #7]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	f003 0303 	and.w	r3, r3, #3
 800cb54:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800cb56:	79bb      	ldrb	r3, [r7, #6]
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d104      	bne.n	800cb6e <VL53L1_is_aperture_location+0x34>
 800cb64:	7b7b      	ldrb	r3, [r7, #13]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d101      	bne.n	800cb6e <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d104      	bne.n	800cb7e <VL53L1_is_aperture_location+0x44>
 800cb74:	7b7b      	ldrb	r3, [r7, #13]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800cb8c:	b590      	push	{r4, r7, lr}
 800cb8e:	b08b      	sub	sp, #44	; 0x2c
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	603a      	str	r2, [r7, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	71bb      	strb	r3, [r7, #6]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800cbce:	f107 0416 	add.w	r4, r7, #22
 800cbd2:	f107 0218 	add.w	r2, r7, #24
 800cbd6:	79b9      	ldrb	r1, [r7, #6]
 800cbd8:	79f8      	ldrb	r0, [r7, #7]
 800cbda:	f107 0312 	add.w	r3, r7, #18
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	f107 0314 	add.w	r3, r7, #20
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	f7ff ff30 	bl	800ca4c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	2200      	movs	r2, #0
 800cbf0:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cbf2:	8afb      	ldrh	r3, [r7, #22]
 800cbf4:	83bb      	strh	r3, [r7, #28]
 800cbf6:	e04c      	b.n	800cc92 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cbf8:	8b3b      	ldrh	r3, [r7, #24]
 800cbfa:	83fb      	strh	r3, [r7, #30]
 800cbfc:	e03d      	b.n	800cc7a <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800cbfe:	8bbb      	ldrh	r3, [r7, #28]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	8bfa      	ldrh	r2, [r7, #30]
 800cc04:	b2d1      	uxtb	r1, r2
 800cc06:	f107 0211 	add.w	r2, r7, #17
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff fec9 	bl	800c9a2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cc10:	7c78      	ldrb	r0, [r7, #17]
 800cc12:	f107 030e 	add.w	r3, r7, #14
 800cc16:	f107 020f 	add.w	r2, r7, #15
 800cc1a:	f107 0110 	add.w	r1, r7, #16
 800cc1e:	f7ff fe9f 	bl	800c960 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cc22:	7c3b      	ldrb	r3, [r7, #16]
 800cc24:	461a      	mov	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	4413      	add	r3, r2
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01b      	beq.n	800cc6e <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800cc36:	8bbb      	ldrh	r3, [r7, #28]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	8bfa      	ldrh	r2, [r7, #30]
 800cc3c:	b2d2      	uxtb	r2, r2
 800cc3e:	4611      	mov	r1, r2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff ff7a 	bl	800cb3a <VL53L1_is_aperture_location>
 800cc46:	4603      	mov	r3, r0
 800cc48:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cc4a:	7efb      	ldrb	r3, [r7, #27]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d007      	beq.n	800cc60 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	881a      	ldrh	r2, [r3, #0]
 800cc54:	88bb      	ldrh	r3, [r7, #4]
 800cc56:	4413      	add	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	801a      	strh	r2, [r3, #0]
 800cc5e:	e006      	b.n	800cc6e <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cc6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	3301      	adds	r3, #1
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	83fb      	strh	r3, [r7, #30]
 800cc7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc7e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	ddbb      	ble.n	800cbfe <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cc86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	83bb      	strh	r3, [r7, #28]
 800cc92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	ddac      	ble.n	800cbf8 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800cc9e:	bf00      	nop
 800cca0:	bf00      	nop
 800cca2:	3724      	adds	r7, #36	; 0x24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd90      	pop	{r4, r7, pc}

0800cca8 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b08d      	sub	sp, #52	; 0x34
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4623      	mov	r3, r4
 800ccb8:	71fb      	strb	r3, [r7, #7]
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71bb      	strb	r3, [r7, #6]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	717b      	strb	r3, [r7, #5]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800cd08:	f107 041c 	add.w	r4, r7, #28
 800cd0c:	f107 021e 	add.w	r2, r7, #30
 800cd10:	79b9      	ldrb	r1, [r7, #6]
 800cd12:	79f8      	ldrb	r0, [r7, #7]
 800cd14:	f107 0318 	add.w	r3, r7, #24
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	f107 031a 	add.w	r3, r7, #26
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4623      	mov	r3, r4
 800cd22:	f7ff fe93 	bl	800ca4c <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800cd26:	f107 0414 	add.w	r4, r7, #20
 800cd2a:	f107 0216 	add.w	r2, r7, #22
 800cd2e:	7939      	ldrb	r1, [r7, #4]
 800cd30:	7978      	ldrb	r0, [r7, #5]
 800cd32:	f107 0310 	add.w	r3, r7, #16
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	f107 0312 	add.w	r3, r7, #18
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	4623      	mov	r3, r4
 800cd40:	f7ff fe84 	bl	800ca4c <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800cd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd46:	2200      	movs	r2, #0
 800cd48:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800cd4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cd50:	8abb      	ldrh	r3, [r7, #20]
 800cd52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cd54:	e06c      	b.n	800ce30 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cd56:	8afb      	ldrh	r3, [r7, #22]
 800cd58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd5a:	e05d      	b.n	800ce18 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800cd5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd62:	b2d1      	uxtb	r1, r2
 800cd64:	f107 020f 	add.w	r2, r7, #15
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff fe1a 	bl	800c9a2 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cd6e:	7bf8      	ldrb	r0, [r7, #15]
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	f107 020d 	add.w	r2, r7, #13
 800cd78:	f107 010e 	add.w	r1, r7, #14
 800cd7c:	f7ff fdf0 	bl	800c960 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	461a      	mov	r2, r3
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	4413      	add	r3, r2
 800cd88:	781a      	ldrb	r2, [r3, #0]
 800cd8a:	7b3b      	ldrb	r3, [r7, #12]
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d03b      	beq.n	800ce0c <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cd94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff fecb 	bl	800cb3a <VL53L1_is_aperture_location>
 800cda4:	4603      	mov	r3, r0
 800cda6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cdaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d002      	beq.n	800cdb8 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cdb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdb4:	847b      	strh	r3, [r7, #34]	; 0x22
 800cdb6:	e002      	b.n	800cdbe <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cdb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdbc:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cdbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdc2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	db19      	blt.n	800cdfe <VL53L1_calc_mm_effective_spads+0x156>
 800cdca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cdce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	dc13      	bgt.n	800cdfe <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cdd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cdda:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cdde:	429a      	cmp	r2, r3
 800cde0:	db0d      	blt.n	800cdfe <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cde2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cde6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cdea:	429a      	cmp	r2, r3
 800cdec:	dc07      	bgt.n	800cdfe <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cdee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf0:	881a      	ldrh	r2, [r3, #0]
 800cdf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdf4:	4413      	add	r3, r2
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdfa:	801a      	strh	r2, [r3, #0]
 800cdfc:	e006      	b.n	800ce0c <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce00:	881a      	ldrh	r2, [r3, #0]
 800ce02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce04:	4413      	add	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ce0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	3301      	adds	r3, #1
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ce18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ce20:	429a      	cmp	r2, r3
 800ce22:	dd9b      	ble.n	800cd5c <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ce24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ce30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ce34:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	dd8c      	ble.n	800cd56 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800ce3c:	bf00      	nop
 800ce3e:	bf00      	nop
 800ce40:	372c      	adds	r7, #44	; 0x2c
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd90      	pop	{r4, r7, pc}

0800ce46 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b086      	sub	sp, #24
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7fd ff6d 	bl	800ad38 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	7c9a      	ldrb	r2, [r3, #18]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	3314      	adds	r3, #20
 800ce88:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	75fb      	strb	r3, [r7, #23]
 800ce8e:	e06b      	b.n	800cf68 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800ce90:	7dfb      	ldrb	r3, [r7, #23]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d034      	beq.n	800cf04 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800ce9a:	e05f      	b.n	800cf5c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ced4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	8a9a      	ldrh	r2, [r3, #20]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	601a      	str	r2, [r3, #0]

			break;
 800cf02:	e02b      	b.n	800cf5c <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cf34:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	611a      	str	r2, [r3, #16]
			break;
 800cf5a:	bf00      	nop
		}

		pdata++;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	334c      	adds	r3, #76	; 0x4c
 800cf60:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	3301      	adds	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	7c9b      	ldrb	r3, [r3, #18]
 800cf6c:	7dfa      	ldrb	r2, [r7, #23]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d38e      	bcc.n	800ce90 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800cf72:	bf00      	nop
 800cf74:	bf00      	nop
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b089      	sub	sp, #36	; 0x24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf84:	2300      	movs	r3, #0
 800cf86:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3318      	adds	r3, #24
 800cf8c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cf94:	3308      	adds	r3, #8
 800cf96:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800cf9e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cfa6:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3302      	adds	r3, #2
 800cfba:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800cfe0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3724      	adds	r7, #36	; 0x24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b08b      	sub	sp, #44	; 0x2c
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3318      	adds	r3, #24
 800d002:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d00a:	3308      	adds	r3, #8
 800d00c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d014:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d01c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800d024:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800d026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d02a:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800d02c:	7bfa      	ldrb	r2, [r7, #15]
 800d02e:	6939      	ldr	r1, [r7, #16]
 800d030:	4613      	mov	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	440b      	add	r3, r1
 800d03a:	3306      	adds	r3, #6
 800d03c:	2200      	movs	r2, #0
 800d03e:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d046:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800d048:	2301      	movs	r3, #1
 800d04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d04e:	e01a      	b.n	800d086 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800d050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	214c      	movs	r1, #76	; 0x4c
 800d058:	fb01 f303 	mul.w	r3, r1, r3
 800d05c:	4413      	add	r3, r2
 800d05e:	334a      	adds	r3, #74	; 0x4a
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d064:	429a      	cmp	r2, r3
 800d066:	d209      	bcs.n	800d07c <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800d068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	214c      	movs	r1, #76	; 0x4c
 800d070:	fb01 f303 	mul.w	r3, r1, r3
 800d074:	4413      	add	r3, r2
 800d076:	334a      	adds	r3, #74	; 0x4a
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800d07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d080:	3301      	adds	r3, #1
 800d082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	7c9b      	ldrb	r3, [r3, #18]
 800d08a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d08e:	429a      	cmp	r2, r3
 800d090:	d3de      	bcc.n	800d050 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800d092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800d098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d09c:	623b      	str	r3, [r7, #32]
 800d09e:	e00e      	b.n	800d0be <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800d0a0:	89bb      	ldrh	r3, [r7, #12]
 800d0a2:	039b      	lsls	r3, r3, #14
 800d0a4:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800d0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0a8:	6a3a      	ldr	r2, [r7, #32]
 800d0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ae:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b6:	d302      	bcc.n	800d0be <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800d0b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0bc:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d0be:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d0c4:	6939      	ldr	r1, [r7, #16]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	440b      	add	r3, r1
 800d0d0:	3306      	adds	r3, #6
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800d0d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	372c      	adds	r7, #44	; 0x2c
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b08a      	sub	sp, #40	; 0x28
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3318      	adds	r3, #24
 800d0f8:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	332c      	adds	r3, #44	; 0x2c
 800d0fe:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	33c2      	adds	r3, #194	; 0xc2
 800d104:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d10c:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	3302      	adds	r3, #2
 800d112:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	785b      	ldrb	r3, [r3, #1]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d124:	461a      	mov	r2, r3
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	4413      	add	r3, r2
 800d12a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d11e      	bne.n	800d170 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10b      	bne.n	800d150 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d05d      	beq.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	719a      	strb	r2, [r3, #6]
 800d16e:	e050      	b.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d176:	461a      	mov	r2, r3
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	4413      	add	r3, r2
 800d17c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d180:	2b02      	cmp	r3, #2
 800d182:	d11e      	bne.n	800d1c2 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d034      	beq.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	719a      	strb	r2, [r3, #6]
 800d1c0:	e027      	b.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d11d      	bne.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10b      	bne.n	800d1f4 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00b      	beq.n	800d212 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d216:	2b00      	cmp	r3, #0
 800d218:	d109      	bne.n	800d22e <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d226:	461a      	mov	r2, r3
 800d228:	6978      	ldr	r0, [r7, #20]
 800d22a:	f7fd f921 	bl	800a470 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d22e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d232:	4618      	mov	r0, r3
 800d234:	3728      	adds	r7, #40	; 0x28
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b089      	sub	sp, #36	; 0x24
 800d23e:	af00      	add	r7, sp, #0
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	460b      	mov	r3, r1
 800d248:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3318      	adds	r3, #24
 800d252:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d25a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d103      	bne.n	800d26a <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	7afa      	ldrb	r2, [r7, #11]
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e01e      	b.n	800d2a8 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	7dfb      	ldrb	r3, [r7, #23]
 800d272:	3b01      	subs	r3, #1
 800d274:	429a      	cmp	r2, r3
 800d276:	d111      	bne.n	800d29c <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2bff      	cmp	r3, #255	; 0xff
 800d27e:	d103      	bne.n	800d288 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2280      	movs	r2, #128	; 0x80
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e005      	b.n	800d294 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	3301      	adds	r3, #1
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2200      	movs	r2, #0
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	e005      	b.n	800d2a8 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d2a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3724      	adds	r7, #36	; 0x24
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d118      	bne.n	800d304 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	719a      	strb	r2, [r3, #6]
 800d302:	e03a      	b.n	800d37a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d118      	bne.n	800d340 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	719a      	strb	r2, [r3, #6]
 800d33e:	e01c      	b.n	800d37a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d346:	2b03      	cmp	r3, #3
 800d348:	d117      	bne.n	800d37a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b08a      	sub	sp, #40	; 0x28
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	461a      	mov	r2, r3
 800d396:	460b      	mov	r3, r1
 800d398:	72fb      	strb	r3, [r7, #11]
 800d39a:	4613      	mov	r3, r2
 800d39c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	3318      	adds	r3, #24
 800d3a8:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d3b2:	7afa      	ldrb	r2, [r7, #11]
 800d3b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe f8ca 	bl	800b552 <VL53L1_calc_macro_period_us>
 800d3be:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	031b      	lsls	r3, r3, #12
 800d3ce:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	085b      	lsrs	r3, r3, #1
 800d3d4:	69ba      	ldr	r2, [r7, #24]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	6a3b      	ldr	r3, [r7, #32]
 800d3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e2:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	2bff      	cmp	r3, #255	; 0xff
 800d3e8:	d904      	bls.n	800d3f4 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	22ff      	movs	r2, #255	; 0xff
 800d3ee:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d3f2:	e004      	b.n	800d3fe <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	7afa      	ldrb	r2, [r7, #11]
 800d402:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d406:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10a      	bne.n	800d424 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d414:	461a      	mov	r2, r3
 800d416:	214b      	movs	r1, #75	; 0x4b
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f007 f9bd 	bl	8014798 <VL53L1_WrByte>
 800d41e:	4603      	mov	r3, r0
 800d420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d432:	461a      	mov	r2, r3
 800d434:	2160      	movs	r1, #96	; 0x60
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f007 f9ae 	bl	8014798 <VL53L1_WrByte>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d448:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d450:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d45a:	f107 0214 	add.w	r2, r7, #20
 800d45e:	2302      	movs	r3, #2
 800d460:	2178      	movs	r1, #120	; 0x78
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f007 f92c 	bl	80146c0 <VL53L1_WriteMulti>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	893a      	ldrh	r2, [r7, #8]
 800d472:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d108      	bne.n	800d490 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d47e:	893b      	ldrh	r3, [r7, #8]
 800d480:	461a      	mov	r2, r3
 800d482:	211c      	movs	r1, #28
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f007 f9b1 	bl	80147ec <VL53L1_WrWord>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d494:	2b00      	cmp	r3, #0
 800d496:	d108      	bne.n	800d4aa <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d498:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d49a:	461a      	mov	r2, r3
 800d49c:	2164      	movs	r1, #100	; 0x64
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f007 f9a4 	bl	80147ec <VL53L1_WrWord>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d4aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d108      	bne.n	800d4c4 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d4b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2166      	movs	r1, #102	; 0x66
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f007 f997 	bl	80147ec <VL53L1_WrWord>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d4c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3728      	adds	r7, #40	; 0x28
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d4d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4d4:	b0a2      	sub	sp, #136	; 0x88
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d4f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4f2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d4f6:	3318      	adds	r3, #24
 800d4f8:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d4fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4fc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d500:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d504:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d508:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d50c:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d50e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d510:	69db      	ldr	r3, [r3, #28]
 800d512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d103      	bne.n	800d526 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d51e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d52e:	4413      	add	r3, r2
 800d530:	2200      	movs	r2, #0
 800d532:	461c      	mov	r4, r3
 800d534:	4615      	mov	r5, r2
 800d536:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d53a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d53e:	4622      	mov	r2, r4
 800d540:	462b      	mov	r3, r5
 800d542:	f04f 0000 	mov.w	r0, #0
 800d546:	f04f 0100 	mov.w	r1, #0
 800d54a:	0159      	lsls	r1, r3, #5
 800d54c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d550:	0150      	lsls	r0, r2, #5
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	ebb2 0804 	subs.w	r8, r2, r4
 800d55a:	eb63 0905 	sbc.w	r9, r3, r5
 800d55e:	f04f 0200 	mov.w	r2, #0
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d56a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d56e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d572:	4690      	mov	r8, r2
 800d574:	4699      	mov	r9, r3
 800d576:	eb18 0304 	adds.w	r3, r8, r4
 800d57a:	633b      	str	r3, [r7, #48]	; 0x30
 800d57c:	eb49 0305 	adc.w	r3, r9, r5
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
 800d582:	f04f 0200 	mov.w	r2, #0
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d58e:	4629      	mov	r1, r5
 800d590:	00cb      	lsls	r3, r1, #3
 800d592:	4621      	mov	r1, r4
 800d594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d598:	4621      	mov	r1, r4
 800d59a:	00ca      	lsls	r2, r1, #3
 800d59c:	4610      	mov	r0, r2
 800d59e:	4619      	mov	r1, r3
 800d5a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	643b      	str	r3, [r7, #64]	; 0x40
 800d5a8:	647a      	str	r2, [r7, #68]	; 0x44
 800d5aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d5ae:	f7f2 fe87 	bl	80002c0 <__aeabi_uldivmod>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d5ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d5be:	4622      	mov	r2, r4
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	f04f 0000 	mov.w	r0, #0
 800d5c6:	f04f 0100 	mov.w	r1, #0
 800d5ca:	0159      	lsls	r1, r3, #5
 800d5cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d5d0:	0150      	lsls	r0, r2, #5
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	ebb2 0a04 	subs.w	sl, r2, r4
 800d5da:	eb63 0b05 	sbc.w	fp, r3, r5
 800d5de:	f04f 0200 	mov.w	r2, #0
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d5ea:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d5ee:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d5f2:	4692      	mov	sl, r2
 800d5f4:	469b      	mov	fp, r3
 800d5f6:	eb1a 0304 	adds.w	r3, sl, r4
 800d5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5fc:	eb4b 0305 	adc.w	r3, fp, r5
 800d600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d602:	f04f 0200 	mov.w	r2, #0
 800d606:	f04f 0300 	mov.w	r3, #0
 800d60a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d60e:	4629      	mov	r1, r5
 800d610:	00cb      	lsls	r3, r1, #3
 800d612:	4621      	mov	r1, r4
 800d614:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d618:	4621      	mov	r1, r4
 800d61a:	00ca      	lsls	r2, r1, #3
 800d61c:	4610      	mov	r0, r2
 800d61e:	4619      	mov	r1, r3
 800d620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d624:	2200      	movs	r2, #0
 800d626:	63bb      	str	r3, [r7, #56]	; 0x38
 800d628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d62a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d62e:	f7f2 fe47 	bl	80002c0 <__aeabi_uldivmod>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d63a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d640:	8ad2      	ldrh	r2, [r2, #22]
 800d642:	fb02 f303 	mul.w	r3, r2, r3
 800d646:	2200      	movs	r2, #0
 800d648:	623b      	str	r3, [r7, #32]
 800d64a:	627a      	str	r2, [r7, #36]	; 0x24
 800d64c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d650:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d654:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d658:	4313      	orrs	r3, r2
 800d65a:	d105      	bne.n	800d668 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d65c:	f04f 0201 	mov.w	r2, #1
 800d660:	f04f 0300 	mov.w	r3, #0
 800d664:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d668:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	f04f 0400 	mov.w	r4, #0
 800d674:	f04f 0500 	mov.w	r5, #0
 800d678:	015d      	lsls	r5, r3, #5
 800d67a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d67e:	0154      	lsls	r4, r2, #5
 800d680:	4622      	mov	r2, r4
 800d682:	462b      	mov	r3, r5
 800d684:	1a14      	subs	r4, r2, r0
 800d686:	61bc      	str	r4, [r7, #24]
 800d688:	eb63 0301 	sbc.w	r3, r3, r1
 800d68c:	61fb      	str	r3, [r7, #28]
 800d68e:	f04f 0200 	mov.w	r2, #0
 800d692:	f04f 0300 	mov.w	r3, #0
 800d696:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d69a:	464c      	mov	r4, r9
 800d69c:	00a3      	lsls	r3, r4, #2
 800d69e:	4644      	mov	r4, r8
 800d6a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d6a4:	4644      	mov	r4, r8
 800d6a6:	00a2      	lsls	r2, r4, #2
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	461d      	mov	r5, r3
 800d6ac:	4623      	mov	r3, r4
 800d6ae:	181b      	adds	r3, r3, r0
 800d6b0:	613b      	str	r3, [r7, #16]
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	eb41 0303 	adc.w	r3, r1, r3
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	f04f 0200 	mov.w	r2, #0
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	02cb      	lsls	r3, r1, #11
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	02ca      	lsls	r2, r1, #11
 800d6d4:	461c      	mov	r4, r3
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d6dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d6e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d6e4:	f7f2 fdec 	bl	80002c0 <__aeabi_uldivmod>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d6f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	f04f 0400 	mov.w	r4, #0
 800d6fc:	f04f 0500 	mov.w	r5, #0
 800d700:	015d      	lsls	r5, r3, #5
 800d702:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d706:	0154      	lsls	r4, r2, #5
 800d708:	4622      	mov	r2, r4
 800d70a:	462b      	mov	r3, r5
 800d70c:	1a14      	subs	r4, r2, r0
 800d70e:	60bc      	str	r4, [r7, #8]
 800d710:	eb63 0301 	sbc.w	r3, r3, r1
 800d714:	60fb      	str	r3, [r7, #12]
 800d716:	f04f 0200 	mov.w	r2, #0
 800d71a:	f04f 0300 	mov.w	r3, #0
 800d71e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d722:	464c      	mov	r4, r9
 800d724:	00a3      	lsls	r3, r4, #2
 800d726:	4644      	mov	r4, r8
 800d728:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d72c:	4644      	mov	r4, r8
 800d72e:	00a2      	lsls	r2, r4, #2
 800d730:	4614      	mov	r4, r2
 800d732:	461d      	mov	r5, r3
 800d734:	4623      	mov	r3, r4
 800d736:	181b      	adds	r3, r3, r0
 800d738:	603b      	str	r3, [r7, #0]
 800d73a:	462b      	mov	r3, r5
 800d73c:	eb41 0303 	adc.w	r3, r1, r3
 800d740:	607b      	str	r3, [r7, #4]
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	f04f 0300 	mov.w	r3, #0
 800d74a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d74e:	4629      	mov	r1, r5
 800d750:	02cb      	lsls	r3, r1, #11
 800d752:	4621      	mov	r1, r4
 800d754:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d758:	4621      	mov	r1, r4
 800d75a:	02ca      	lsls	r2, r1, #11
 800d75c:	461c      	mov	r4, r3
 800d75e:	4613      	mov	r3, r2
 800d760:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d764:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d768:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d76c:	f7f2 fda8 	bl	80002c0 <__aeabi_uldivmod>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d77a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d77c:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d77e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d802      	bhi.n	800d78c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d788:	2202      	movs	r2, #2
 800d78a:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d78c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d790:	4618      	mov	r0, r3
 800d792:	3788      	adds	r7, #136	; 0x88
 800d794:	46bd      	mov	sp, r7
 800d796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b096      	sub	sp, #88	; 0x58
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3318      	adds	r3, #24
 800d7b4:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d7bc:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c0:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d108      	bne.n	800d7e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d7d6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d101      	bne.n	800d7e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e000      	b.n	800d7e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d7e8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d107      	bne.n	800d800 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	889b      	ldrh	r3, [r3, #4]
 800d7f4:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	609a      	str	r2, [r3, #8]
 800d7fe:	e002      	b.n	800d806 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	899b      	ldrh	r3, [r3, #12]
 800d810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	89db      	ldrh	r3, [r3, #14]
 800d818:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d822:	2b00      	cmp	r3, #0
 800d824:	d004      	beq.n	800d830 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d125      	bne.n	800d87c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d834:	2b00      	cmp	r3, #0
 800d836:	d021      	beq.n	800d87c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d838:	f107 0313 	add.w	r3, r7, #19
 800d83c:	4619      	mov	r1, r3
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 fe44 	bl	800e4cc <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d844:	7cfb      	ldrb	r3, [r7, #19]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d84a:	2301      	movs	r3, #1
 800d84c:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d84e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d852:	2b00      	cmp	r3, #0
 800d854:	d103      	bne.n	800d85e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	653b      	str	r3, [r7, #80]	; 0x50
 800d85c:	e006      	b.n	800d86c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d85e:	7cfb      	ldrb	r3, [r7, #19]
 800d860:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	3202      	adds	r2, #2
 800d866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86a:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	889b      	ldrh	r3, [r3, #4]
 800d870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	88db      	ldrh	r3, [r3, #6]
 800d878:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d886:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	795b      	ldrb	r3, [r3, #5]
 800d892:	f043 0301 	orr.w	r3, r3, #1
 800d896:	b2da      	uxtb	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10a      	bne.n	800d8bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d8a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	795b      	ldrb	r3, [r3, #5]
 800d8b2:	f043 0302 	orr.w	r3, r3, #2
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d108      	bne.n	800d8e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d8dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d8e0:	e019      	b.n	800d916 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d8e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d8e6:	019b      	lsls	r3, r3, #6
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d8fa:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d8fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d900:	019b      	lsls	r3, r3, #6
 800d902:	461a      	mov	r2, r3
 800d904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d906:	fbb2 f3f3 	udiv	r3, r2, r3
 800d90a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d914:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d12a      	bne.n	800d976 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d928:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d92c:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d92e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d930:	119b      	asrs	r3, r3, #6
 800d932:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d93a:	db02      	blt.n	800d942 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d940:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d944:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d952:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d956:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d95a:	119b      	asrs	r3, r3, #6
 800d95c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d964:	db02      	blt.n	800d96c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d96a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d96e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	81da      	strh	r2, [r3, #14]
 800d974:	e042      	b.n	800d9fc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d13d      	bne.n	800d9fc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	da00      	bge.n	800d992 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d990:	330f      	adds	r3, #15
 800d992:	111b      	asrs	r3, r3, #4
 800d994:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d99c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d9a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9a2:	4413      	add	r3, r2
 800d9a4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ac:	db02      	blt.n	800d9b4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d9ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9b2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9b6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d9c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9c8:	4a51      	ldr	r2, [pc, #324]	; (800db10 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d9ca:	fb82 1203 	smull	r1, r2, r2, r3
 800d9ce:	1152      	asrs	r2, r2, #5
 800d9d0:	17db      	asrs	r3, r3, #31
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d9dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d9e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9e2:	4413      	add	r3, r2
 800d9e4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ec:	db02      	blt.n	800d9f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d9ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9f2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	785b      	ldrb	r3, [r3, #1]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d177      	bne.n	800daf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800da04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d073      	beq.n	800daf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	2201      	movs	r2, #1
 800da10:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800da18:	f107 0313 	add.w	r3, r7, #19
 800da1c:	4619      	mov	r1, r3
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f000 fd54 	bl	800e4cc <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da26:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800da2a:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	3308      	adds	r3, #8
 800da30:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800da32:	7cfb      	ldrb	r3, [r7, #19]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d041      	beq.n	800dabc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800da38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d03d      	beq.n	800dabc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	2b00      	cmp	r3, #0
 800da44:	d03a      	beq.n	800dabc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da52:	fb03 f202 	mul.w	r2, r3, r2
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	fbb2 f3f3 	udiv	r3, r2, r3
 800da5c:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d004      	beq.n	800da6e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d303      	bcc.n	800da76 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2200      	movs	r2, #0
 800da72:	719a      	strb	r2, [r3, #6]
 800da74:	e022      	b.n	800dabc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800da76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da7e:	617b      	str	r3, [r7, #20]
				cval = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800da84:	2300      	movs	r3, #0
 800da86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800da8a:	e00e      	b.n	800daaa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800da8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	4413      	add	r3, r2
 800da92:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800da94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da98:	601a      	str	r2, [r3, #0]
					pcpo++;
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	3304      	adds	r3, #4
 800da9e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800daa0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800daa4:	3301      	adds	r3, #1
 800daa6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800daaa:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d3ea      	bcc.n	800da8c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800dab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daba:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	799b      	ldrb	r3, [r3, #6]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d017      	beq.n	800daf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	789b      	ldrb	r3, [r3, #2]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d105      	bne.n	800daf4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800daf4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d002      	beq.n	800db02 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2201      	movs	r2, #1
 800db00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800db02:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800db06:	4618      	mov	r0, r3
 800db08:	3758      	adds	r7, #88	; 0x58
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	66666667 	.word	0x66666667

0800db14 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800db14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db18:	b0a2      	sub	sp, #136	; 0x88
 800db1a:	af02      	add	r7, sp, #8
 800db1c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db1e:	2300      	movs	r3, #0
 800db20:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	3318      	adds	r3, #24
 800db28:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800db30:	3308      	adds	r3, #8
 800db32:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800db34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db36:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800db3a:	3318      	adds	r3, #24
 800db3c:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800db3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db40:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800db44:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800db46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db48:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db4c:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800db4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db50:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800db52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db54:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800db58:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800db76:	f04f 0200 	mov.w	r2, #0
 800db7a:	f04f 0300 	mov.w	r3, #0
 800db7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800db82:	2300      	movs	r3, #0
 800db84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dba6:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d108      	bne.n	800dbc0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dbb4:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d101      	bne.n	800dbc0 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e000      	b.n	800dbc2 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800dbc6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbce:	f000 fc7d 	bl	800e4cc <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800dbd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800dbda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dbe8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dbea:	f000 fb15 	bl	800e218 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dbee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800dbf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbfe:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800dc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc04:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d901      	bls.n	800dc10 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e000      	b.n	800dc12 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800dc10:	2300      	movs	r3, #0
 800dc12:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800dc16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d006      	beq.n	800dc2c <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800dc1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc20:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800dc24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d101      	bne.n	800dc30 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e000      	b.n	800dc32 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800dc30:	2300      	movs	r3, #0
 800dc32:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800dc36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc38:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d10e      	bne.n	800dc5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dc3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00a      	beq.n	800dc5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800dc46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc48:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	d105      	bne.n	800dc5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dc50:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e000      	b.n	800dc5e <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dc5c:	2300      	movs	r3, #0
	run_smudge_detection =
 800dc5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc64:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800dc68:	2b09      	cmp	r3, #9
 800dc6a:	f000 80a6 	beq.w	800ddba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800dc6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc70:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	f040 80a1 	bne.w	800ddba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800dc78:	2302      	movs	r3, #2
 800dc7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dc84:	e02d      	b.n	800dce2 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800dc86:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dc8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc8c:	234c      	movs	r3, #76	; 0x4c
 800dc8e:	fb01 f303 	mul.w	r3, r1, r3
 800dc92:	4413      	add	r3, r2
 800dc94:	335e      	adds	r3, #94	; 0x5e
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b09      	cmp	r3, #9
 800dc9a:	d11d      	bne.n	800dcd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800dc9c:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dca2:	234c      	movs	r3, #76	; 0x4c
 800dca4:	fb01 f303 	mul.w	r3, r1, r3
 800dca8:	4413      	add	r3, r2
 800dcaa:	335a      	adds	r3, #90	; 0x5a
 800dcac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcb0:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800dcb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	dc03      	bgt.n	800dcc2 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dcc0:	e00a      	b.n	800dcd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800dcc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d106      	bne.n	800dcd8 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800dcca:	2301      	movs	r3, #1
 800dccc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800dcd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dcd4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800dcd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dcdc:	3301      	adds	r3, #1
 800dcde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dce4:	7c9a      	ldrb	r2, [r3, #18]
 800dce6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d3cb      	bcc.n	800dc86 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800dcee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d102      	bne.n	800dcfc <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800dcfc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800dd00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd02:	234c      	movs	r3, #76	; 0x4c
 800dd04:	fb01 f303 	mul.w	r3, r1, r3
 800dd08:	4413      	add	r3, r2
 800dd0a:	3348      	adds	r3, #72	; 0x48
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800dd10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d150      	bne.n	800ddba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800dd18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	469a      	mov	sl, r3
 800dd1e:	4693      	mov	fp, r2
 800dd20:	4652      	mov	r2, sl
 800dd22:	465b      	mov	r3, fp
 800dd24:	f04f 0000 	mov.w	r0, #0
 800dd28:	f04f 0100 	mov.w	r1, #0
 800dd2c:	0159      	lsls	r1, r3, #5
 800dd2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dd32:	0150      	lsls	r0, r2, #5
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	ebb2 040a 	subs.w	r4, r2, sl
 800dd3c:	eb63 050b 	sbc.w	r5, r3, fp
 800dd40:	f04f 0200 	mov.w	r2, #0
 800dd44:	f04f 0300 	mov.w	r3, #0
 800dd48:	00ab      	lsls	r3, r5, #2
 800dd4a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dd4e:	00a2      	lsls	r2, r4, #2
 800dd50:	4614      	mov	r4, r2
 800dd52:	461d      	mov	r5, r3
 800dd54:	eb14 080a 	adds.w	r8, r4, sl
 800dd58:	eb45 090b 	adc.w	r9, r5, fp
 800dd5c:	f04f 0200 	mov.w	r2, #0
 800dd60:	f04f 0300 	mov.w	r3, #0
 800dd64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dd68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dd6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dd70:	4690      	mov	r8, r2
 800dd72:	4699      	mov	r9, r3
 800dd74:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800dd78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dd7c:	f04f 0200 	mov.w	r2, #0
 800dd80:	f04f 0300 	mov.w	r3, #0
 800dd84:	024b      	lsls	r3, r1, #9
 800dd86:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800dd8a:	0242      	lsls	r2, r0, #9
 800dd8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800dd90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd94:	2200      	movs	r2, #0
 800dd96:	61bb      	str	r3, [r7, #24]
 800dd98:	61fa      	str	r2, [r7, #28]
 800dd9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd9e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800dda2:	4621      	mov	r1, r4
 800dda4:	428a      	cmp	r2, r1
 800dda6:	4629      	mov	r1, r5
 800dda8:	418b      	sbcs	r3, r1
 800ddaa:	d203      	bcs.n	800ddb4 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800ddac:	2301      	movs	r3, #1
 800ddae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ddb2:	e002      	b.n	800ddba <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800ddba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 810b 	beq.w	800dfda <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800ddc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ddca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddcc:	f7ff fb80 	bl	800d4d0 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ddd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddd2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ddd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800dde4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dde6:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800ddec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	1ad2      	subs	r2, r2, r3
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf4:	4413      	add	r3, r2
 800ddf6:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ddf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	da02      	bge.n	800de04 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800ddfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de00:	425b      	negs	r3, r3
 800de02:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800de04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	461a      	mov	r2, r3
 800de0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de0c:	4293      	cmp	r3, r2
 800de0e:	dd0c      	ble.n	800de2a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800de10:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800de14:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800de16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de18:	429a      	cmp	r2, r3
 800de1a:	da03      	bge.n	800de24 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800de1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de1e:	2201      	movs	r2, #1
 800de20:	709a      	strb	r2, [r3, #2]
 800de22:	e002      	b.n	800de2a <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800de24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de26:	2202      	movs	r2, #2
 800de28:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800de2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de32:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800de34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d906      	bls.n	800de4e <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800de40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de42:	2201      	movs	r2, #1
 800de44:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800de46:	2302      	movs	r3, #2
 800de48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800de4c:	e014      	b.n	800de78 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800de4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800de54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de56:	2000      	movs	r0, #0
 800de58:	6139      	str	r1, [r7, #16]
 800de5a:	6178      	str	r0, [r7, #20]
 800de5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800de60:	4621      	mov	r1, r4
 800de62:	1851      	adds	r1, r2, r1
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	4629      	mov	r1, r5
 800de68:	eb43 0101 	adc.w	r1, r3, r1
 800de6c:	60f9      	str	r1, [r7, #12]
 800de6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800de74:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800de78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d202      	bcs.n	800de8a <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800de84:	2301      	movs	r3, #1
 800de86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800de8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800de90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2200      	movs	r2, #0
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	607a      	str	r2, [r7, #4]
 800de9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de9e:	f7f2 fa0f 	bl	80002c0 <__aeabi_uldivmod>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
		xtalk_offset_out =
 800dea6:	4613      	mov	r3, r2
 800dea8:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800deaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	1ad2      	subs	r2, r2, r3
 800deb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb2:	4413      	add	r3, r2
 800deb4:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800deb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da02      	bge.n	800dec2 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800debc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800debe:	425b      	negs	r3, r3
 800dec0:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800dec2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d112      	bne.n	800def0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800deca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800decc:	69db      	ldr	r3, [r3, #28]
 800dece:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ded0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ded2:	4293      	cmp	r3, r2
 800ded4:	db0c      	blt.n	800def0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ded6:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800deda:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800dedc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dede:	429a      	cmp	r2, r3
 800dee0:	da03      	bge.n	800deea <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800dee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dee4:	2201      	movs	r2, #1
 800dee6:	70da      	strb	r2, [r3, #3]
 800dee8:	e002      	b.n	800def0 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800deea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deec:	2202      	movs	r2, #2
 800deee:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800def0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800def8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800defa:	69db      	ldr	r3, [r3, #28]
 800defc:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800defe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df00:	4293      	cmp	r3, r2
 800df02:	da02      	bge.n	800df0a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800df04:	2302      	movs	r3, #2
 800df06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800df0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df0c:	2200      	movs	r2, #0
 800df0e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800df10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800df14:	2b00      	cmp	r3, #0
 800df16:	d112      	bne.n	800df3e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800df18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df1a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00e      	beq.n	800df3e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800df20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800df28:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800df2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df2e:	429a      	cmp	r2, r3
 800df30:	d905      	bls.n	800df3e <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800df32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df34:	2201      	movs	r2, #1
 800df36:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800df38:	2302      	movs	r3, #2
 800df3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800df3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df40:	7c1b      	ldrb	r3, [r3, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d007      	beq.n	800df56 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800df46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df48:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800df4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d902      	bls.n	800df56 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800df50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800df56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df58:	7c1b      	ldrb	r3, [r3, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d107      	bne.n	800df6e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800df5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df60:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800df62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df64:	429a      	cmp	r2, r3
 800df66:	d202      	bcs.n	800df6e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800df68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800df6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df70:	089b      	lsrs	r3, r3, #2
 800df72:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800df74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800df7a:	d301      	bcc.n	800df80 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800df7c:	4b3e      	ldr	r3, [pc, #248]	; (800e078 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800df7e:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800df80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10d      	bne.n	800dfa4 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800df88:	2300      	movs	r3, #0
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	2301      	movs	r3, #1
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df94:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df98:	f7ff fc00 	bl	800d79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800df9c:	2302      	movs	r3, #2
 800df9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dfa2:	e009      	b.n	800dfb8 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dfb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfb4:	f7ff fbf2 	bl	800d79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800dfb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d10c      	bne.n	800dfda <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800dfc0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dfc2:	f04f 0200 	mov.w	r2, #0
 800dfc6:	f04f 0300 	mov.w	r3, #0
 800dfca:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800dfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800dfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800dfe0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d140      	bne.n	800e06a <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800dfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dff0:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800dff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dff4:	691a      	ldr	r2, [r3, #16]
 800dff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d202      	bcs.n	800e004 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800dffe:	2301      	movs	r3, #1
 800e000:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800e004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e008:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800e00a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d110      	bne.n	800e034 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e012:	2300      	movs	r3, #0
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	2300      	movs	r3, #0
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e01c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e01e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e022:	f7ff fbbb 	bl	800d79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800e026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e028:	2202      	movs	r2, #2
 800e02a:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800e02c:	2302      	movs	r3, #2
 800e02e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e032:	e009      	b.n	800e048 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e034:	2301      	movs	r3, #1
 800e036:	9301      	str	r3, [sp, #4]
 800e038:	2300      	movs	r3, #0
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e03e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e040:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e044:	f7ff fbaa 	bl	800d79c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e048:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d10c      	bne.n	800e06a <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800e050:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e052:	f04f 0200 	mov.w	r2, #0
 800e056:	f04f 0300 	mov.w	r3, #0
 800e05a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e05e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e066:	2200      	movs	r2, #0
 800e068:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e06a:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3780      	adds	r7, #128	; 0x80
 800e072:	46bd      	mov	sp, r7
 800e074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e078:	0003ffff 	.word	0x0003ffff

0800e07c <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e084:	2300      	movs	r3, #0
 800e086:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	3318      	adds	r3, #24
 800e08c:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e094:	3308      	adds	r3, #8
 800e096:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0c6:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e0d6:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	23c8      	movs	r3, #200	; 0xc8
 800e0fe:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e108:	461a      	mov	r2, r3
 800e10a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e10e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e118:	461a      	mov	r2, r3
 800e11a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e11e:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e128:	461a      	mov	r2, r3
 800e12a:	4b3a      	ldr	r3, [pc, #232]	; (800e214 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800e12c:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e136:	461a      	mov	r2, r3
 800e138:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e13c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e152:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e156:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e160:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e164:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17a:	461a      	mov	r2, r3
 800e17c:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e180:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e18a:	461a      	mov	r2, r3
 800e18c:	230a      	movs	r3, #10
 800e18e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e198:	461a      	mov	r2, r3
 800e19a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e19e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e1ac:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e1bc:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e1e2:	3310      	adds	r3, #16
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	f04f 0200 	mov.w	r2, #0
 800e1ea:	f04f 0300 	mov.w	r3, #0
 800e1ee:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 f809 	bl	800e218 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	000ff800 	.word	0x000ff800

0800e218 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e220:	2300      	movs	r3, #0
 800e222:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e22a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2200      	movs	r2, #0
 800e236:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	2200      	movs	r2, #0
 800e23c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	2200      	movs	r2, #0
 800e242:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	2200      	movs	r2, #0
 800e248:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2200      	movs	r2, #0
 800e24e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2200      	movs	r2, #0
 800e254:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2200      	movs	r2, #0
 800e25a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2200      	movs	r2, #0
 800e260:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2200      	movs	r2, #0
 800e266:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e280:	2300      	movs	r3, #0
 800e282:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3318      	adds	r3, #24
 800e288:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e290:	461a      	mov	r2, r3
 800e292:	2300      	movs	r3, #0
 800e294:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e2b6:	3308      	adds	r3, #8
 800e2b8:	2218      	movs	r2, #24
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f00b f9d1 	bl	8019664 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3318      	adds	r3, #24
 800e2de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e6:	2203      	movs	r2, #3
 800e2e8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e316:	2200      	movs	r2, #0
 800e318:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e322:	2200      	movs	r2, #0
 800e324:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33a:	461a      	mov	r2, r3
 800e33c:	2300      	movs	r3, #0
 800e33e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e348:	2200      	movs	r2, #0
 800e34a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr

0800e35e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e35e:	b480      	push	{r7}
 800e360:	b085      	sub	sp, #20
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e366:	2300      	movs	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3318      	adds	r3, #24
 800e36e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e376:	22ff      	movs	r2, #255	; 0xff
 800e378:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e382:	2200      	movs	r2, #0
 800e384:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e38e:	461a      	mov	r2, r3
 800e390:	2300      	movs	r3, #0
 800e392:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d007      	beq.n	800e3c0 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b6:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c6:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d4:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	b087      	sub	sp, #28
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	60f8      	str	r0, [r7, #12]
 800e3fe:	60b9      	str	r1, [r7, #8]
 800e400:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e402:	2300      	movs	r3, #0
 800e404:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	229b      	movs	r2, #155	; 0x9b
 800e416:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	371c      	adds	r7, #28
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	3318      	adds	r3, #24
 800e434:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e436:	2300      	movs	r3, #0
 800e438:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e446:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e456:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e464:	b2da      	uxtb	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e472:	f003 0303 	and.w	r3, r3, #3
 800e476:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e486:	4413      	add	r3, r2
 800e488:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2201      	movs	r2, #1
 800e494:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49e:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b2:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e4bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b087      	sub	sp, #28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3318      	adds	r3, #24
 800e4da:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4ea:	2b07      	cmp	r3, #7
 800e4ec:	bf0c      	ite	eq
 800e4ee:	2301      	moveq	r3, #1
 800e4f0:	2300      	movne	r3, #0
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	75fb      	strb	r3, [r7, #23]
 800e4fa:	e019      	b.n	800e530 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e4fc:	7df9      	ldrb	r1, [r7, #23]
 800e4fe:	7bbb      	ldrb	r3, [r7, #14]
 800e500:	6938      	ldr	r0, [r7, #16]
 800e502:	461a      	mov	r2, r3
 800e504:	0052      	lsls	r2, r2, #1
 800e506:	441a      	add	r2, r3
 800e508:	0153      	lsls	r3, r2, #5
 800e50a:	461a      	mov	r2, r3
 800e50c:	460b      	mov	r3, r1
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	440b      	add	r3, r1
 800e512:	019b      	lsls	r3, r3, #6
 800e514:	4413      	add	r3, r2
 800e516:	4403      	add	r3, r0
 800e518:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e51c:	3314      	adds	r3, #20
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	dd02      	ble.n	800e52a <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e524:	7dbb      	ldrb	r3, [r7, #22]
 800e526:	3301      	adds	r3, #1
 800e528:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
 800e52c:	3301      	adds	r3, #1
 800e52e:	75fb      	strb	r3, [r7, #23]
 800e530:	7dfb      	ldrb	r3, [r7, #23]
 800e532:	2b05      	cmp	r3, #5
 800e534:	d9e2      	bls.n	800e4fc <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	7dba      	ldrb	r2, [r7, #22]
 800e53a:	701a      	strb	r2, [r3, #0]

	return status;
 800e53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e540:	4618      	mov	r0, r3
 800e542:	371c      	adds	r7, #28
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e55a:	88fb      	ldrh	r3, [r7, #6]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e566:	fb92 f3f3 	sdiv	r3, r2, r3
 800e56a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e56c:	68fb      	ldr	r3, [r7, #12]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e57a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e57e:	b089      	sub	sp, #36	; 0x24
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e58a:	f04f 0200 	mov.w	r2, #0
 800e58e:	f04f 0300 	mov.w	r3, #0
 800e592:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	fb02 f303 	mul.w	r3, r2, r3
 800e5a2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	0b1b      	lsrs	r3, r3, #12
 800e5a8:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	469a      	mov	sl, r3
 800e5b0:	4693      	mov	fp, r2
 800e5b2:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	fb02 f303 	mul.w	r3, r2, r3
 800e5be:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	091b      	lsrs	r3, r3, #4
 800e5c4:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4698      	mov	r8, r3
 800e5cc:	4691      	mov	r9, r2
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	fb08 f203 	mul.w	r2, r8, r3
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	fb09 f303 	mul.w	r3, r9, r3
 800e5da:	4413      	add	r3, r2
 800e5dc:	69ba      	ldr	r2, [r7, #24]
 800e5de:	fba2 4508 	umull	r4, r5, r2, r8
 800e5e2:	442b      	add	r3, r5
 800e5e4:	461d      	mov	r5, r3
 800e5e6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e5ea:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e5ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e5f2:	f04f 0200 	mov.w	r2, #0
 800e5f6:	f04f 0300 	mov.w	r3, #0
 800e5fa:	0b02      	lsrs	r2, r0, #12
 800e5fc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e600:	0b0b      	lsrs	r3, r1, #12
 800e602:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d305      	bcc.n	800e61a <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e60e:	f04f 32ff 	mov.w	r2, #4294967295
 800e612:	f04f 0300 	mov.w	r3, #0
 800e616:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e61e:	697b      	ldr	r3, [r7, #20]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3724      	adds	r7, #36	; 0x24
 800e624:	46bd      	mov	sp, r7
 800e626:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e62a:	4770      	bx	lr

0800e62c <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e630:	b096      	sub	sp, #88	; 0x58
 800e632:	af00      	add	r7, sp, #0
 800e634:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e636:	460b      	mov	r3, r1
 800e638:	627a      	str	r2, [r7, #36]	; 0x24
 800e63a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e63c:	f04f 0200 	mov.w	r2, #0
 800e640:	f04f 0300 	mov.w	r3, #0
 800e644:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e648:	f04f 0200 	mov.w	r2, #0
 800e64c:	f04f 0300 	mov.w	r3, #0
 800e650:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65a:	17da      	asrs	r2, r3, #31
 800e65c:	469a      	mov	sl, r3
 800e65e:	4693      	mov	fp, r2
 800e660:	4652      	mov	r2, sl
 800e662:	465b      	mov	r3, fp
 800e664:	f04f 0000 	mov.w	r0, #0
 800e668:	f04f 0100 	mov.w	r1, #0
 800e66c:	0159      	lsls	r1, r3, #5
 800e66e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e672:	0150      	lsls	r0, r2, #5
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	ebb2 040a 	subs.w	r4, r2, sl
 800e67c:	eb63 050b 	sbc.w	r5, r3, fp
 800e680:	f04f 0200 	mov.w	r2, #0
 800e684:	f04f 0300 	mov.w	r3, #0
 800e688:	00ab      	lsls	r3, r5, #2
 800e68a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e68e:	00a2      	lsls	r2, r4, #2
 800e690:	4614      	mov	r4, r2
 800e692:	461d      	mov	r5, r3
 800e694:	eb14 080a 	adds.w	r8, r4, sl
 800e698:	eb45 090b 	adc.w	r9, r5, fp
 800e69c:	f04f 0200 	mov.w	r2, #0
 800e6a0:	f04f 0300 	mov.w	r3, #0
 800e6a4:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e6a8:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e6ac:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e6b0:	4690      	mov	r8, r2
 800e6b2:	4699      	mov	r9, r3
 800e6b4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e6b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00d      	beq.n	800e6da <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e6be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	61bb      	str	r3, [r7, #24]
 800e6c4:	61fa      	str	r2, [r7, #28]
 800e6c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e6ce:	f7f1 fdf7 	bl	80002c0 <__aeabi_uldivmod>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d02a      	beq.n	800e736 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e6e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e6e4:	f04f 0200 	mov.w	r2, #0
 800e6e8:	f04f 0300 	mov.w	r3, #0
 800e6ec:	02cb      	lsls	r3, r1, #11
 800e6ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e6f2:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6f6:	0849      	lsrs	r1, r1, #1
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	6139      	str	r1, [r7, #16]
 800e6fc:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e6fe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e702:	4621      	mov	r1, r4
 800e704:	1851      	adds	r1, r2, r1
 800e706:	6039      	str	r1, [r7, #0]
 800e708:	4629      	mov	r1, r5
 800e70a:	eb43 0101 	adc.w	r1, r3, r1
 800e70e:	6079      	str	r1, [r7, #4]
 800e710:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e714:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	2200      	movs	r2, #0
 800e71c:	60bb      	str	r3, [r7, #8]
 800e71e:	60fa      	str	r2, [r7, #12]
 800e720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e724:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e728:	f7f1 fdca 	bl	80002c0 <__aeabi_uldivmod>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e734:	e00b      	b.n	800e74e <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e736:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e73a:	f04f 0200 	mov.w	r2, #0
 800e73e:	f04f 0300 	mov.w	r3, #0
 800e742:	02cb      	lsls	r3, r1, #11
 800e744:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e748:	02c2      	lsls	r2, r0, #11
 800e74a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e750:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e754:	4618      	mov	r0, r3
 800e756:	3758      	adds	r7, #88	; 0x58
 800e758:	46bd      	mov	sp, r7
 800e75a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e75e <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e75e:	b480      	push	{r7}
 800e760:	b085      	sub	sp, #20
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e76a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e76e:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e770:	e002      	b.n	800e778 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	089b      	lsrs	r3, r3, #2
 800e776:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d8f8      	bhi.n	800e772 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e780:	e017      	b.n	800e7b2 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4413      	add	r3, r2
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d30b      	bcc.n	800e7a6 <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	4413      	add	r3, r2
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	085b      	lsrs	r3, r3, #1
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	e002      	b.n	800e7ac <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	085b      	lsrs	r3, r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	089b      	lsrs	r3, r3, #2
 800e7b0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1e4      	bne.n	800e782 <VL53L1_isqrt+0x24>
	}

	return res;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 faa5 	bl	800ed2c <VL53L1_decode_vcsel_period>
 800e7e2:	4603      	mov	r3, r0
	period = 2048 *
 800e7e4:	02db      	lsls	r3, r3, #11
 800e7e6:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e800:	02db      	lsls	r3, r3, #11
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4413      	add	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e80e:	02db      	lsls	r3, r3, #11
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d009      	beq.n	800e830 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	fbb3 f2f2 	udiv	r2, r3, r2
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	fb01 f202 	mul.w	r2, r1, r2
 800e82a:	1a9b      	subs	r3, r3, r2
 800e82c:	60fb      	str	r3, [r7, #12]
 800e82e:	e001      	b.n	800e834 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	b29a      	uxth	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e83e:	bf00      	nop
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b084      	sub	sp, #16
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e858:	6838      	ldr	r0, [r7, #0]
 800e85a:	f000 fb90 	bl	800ef7e <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff ff7a 	bl	800e75e <VL53L1_isqrt>
 800e86a:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e86c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	fb02 f303 	mul.w	r3, r2, r3
 800e876:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	3307      	adds	r3, #7
 800e87c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	111b      	asrs	r3, r3, #4
 800e882:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	4413      	add	r3, r2
 800e88e:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2200      	movs	r2, #0
 800e894:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	73fb      	strb	r3, [r7, #15]
 800e8a4:	e01e      	b.n	800e8e4 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e8a6:	7bfa      	ldrb	r2, [r7, #15]
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	3206      	adds	r2, #6
 800e8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b0:	68ba      	ldr	r2, [r7, #8]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	dd13      	ble.n	800e8de <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e8bc:	7bf9      	ldrb	r1, [r7, #15]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	3106      	adds	r1, #6
 800e8c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8c6:	441a      	add	r2, r3
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	73fb      	strb	r3, [r7, #15]
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	7a9b      	ldrb	r3, [r3, #10]
 800e8e8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d3db      	bcc.n	800e8a6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01c      	beq.n	800e932 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e910:	0852      	lsrs	r2, r2, #1
 800e912:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e914:	441a      	add	r2, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e928:	fb93 f2f2 	sdiv	r2, r3, r2
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b085      	sub	sp, #20
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	7b1b      	ldrb	r3, [r3, #12]
 800e952:	f003 0307 	and.w	r3, r3, #7
 800e956:	2b07      	cmp	r3, #7
 800e958:	d13a      	bne.n	800e9d0 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e95e:	2300      	movs	r3, #0
 800e960:	73bb      	strb	r3, [r7, #14]
 800e962:	e01f      	b.n	800e9a4 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e964:	7bbb      	ldrb	r3, [r7, #14]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	4413      	add	r3, r2
 800e96a:	7b1b      	ldrb	r3, [r3, #12]
 800e96c:	f003 0307 	and.w	r3, r3, #7
 800e970:	2b07      	cmp	r3, #7
 800e972:	d014      	beq.n	800e99e <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e974:	7bba      	ldrb	r2, [r7, #14]
 800e976:	7b7b      	ldrb	r3, [r7, #13]
 800e978:	6879      	ldr	r1, [r7, #4]
 800e97a:	440a      	add	r2, r1
 800e97c:	7b11      	ldrb	r1, [r2, #12]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	4413      	add	r3, r2
 800e982:	460a      	mov	r2, r1
 800e984:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e986:	7bba      	ldrb	r2, [r7, #14]
 800e988:	7b7b      	ldrb	r3, [r7, #13]
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	440a      	add	r2, r1
 800e98e:	7c91      	ldrb	r1, [r2, #18]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	4413      	add	r3, r2
 800e994:	460a      	mov	r2, r1
 800e996:	749a      	strb	r2, [r3, #18]
				i++;
 800e998:	7b7b      	ldrb	r3, [r7, #13]
 800e99a:	3301      	adds	r3, #1
 800e99c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	73bb      	strb	r3, [r7, #14]
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
 800e9a6:	2b05      	cmp	r3, #5
 800e9a8:	d9dc      	bls.n	800e964 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e9aa:	7b7b      	ldrb	r3, [r7, #13]
 800e9ac:	73bb      	strb	r3, [r7, #14]
 800e9ae:	e00c      	b.n	800e9ca <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e9b0:	7bbb      	ldrb	r3, [r7, #14]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	2210      	movs	r2, #16
 800e9b8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	4413      	add	r3, r2
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e9c4:	7bbb      	ldrb	r3, [r7, #14]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	73bb      	strb	r3, [r7, #14]
 800e9ca:	7bbb      	ldrb	r3, [r7, #14]
 800e9cc:	2b05      	cmp	r3, #5
 800e9ce:	d9ef      	bls.n	800e9b0 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	7adb      	ldrb	r3, [r3, #11]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d023      	beq.n	800ea20 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7adb      	ldrb	r3, [r3, #11]
 800e9dc:	73fb      	strb	r3, [r7, #15]
 800e9de:	e00f      	b.n	800ea00 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e9e0:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	7ad2      	ldrb	r2, [r2, #11]
 800e9e8:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	3106      	adds	r1, #6
 800e9ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	3206      	adds	r2, #6
 800e9f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	73fb      	strb	r3, [r7, #15]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800ea04:	7bfa      	ldrb	r2, [r7, #15]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d3ea      	bcc.n	800e9e0 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	72da      	strb	r2, [r3, #11]
	}
}
 800ea20:	bf00      	nop
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	4603      	mov	r3, r0
 800ea34:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ea3e:	88fb      	ldrh	r3, [r7, #6]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff fd83 	bl	800e54c <VL53L1_calc_pll_period_us>
 800ea46:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ea4c:	f249 2257 	movw	r2, #37463	; 0x9257
 800ea50:	fb02 f303 	mul.w	r3, r2, r3
 800ea54:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ea5c:	0c1b      	lsrs	r3, r3, #16
 800ea5e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ea60:	68bb      	ldr	r3, [r7, #8]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b087      	sub	sp, #28
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ea78:	2307      	movs	r3, #7
 800ea7a:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea86:	db03      	blt.n	800ea90 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800ea88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ea8c:	617b      	str	r3, [r7, #20]
 800ea8e:	e004      	b.n	800ea9a <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	dd01      	ble.n	800ea9a <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eaa0:	dd02      	ble.n	800eaa8 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	613b      	str	r3, [r7, #16]
 800eaa6:	e001      	b.n	800eaac <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800eaa8:	2307      	movs	r3, #7
 800eaaa:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	409a      	lsls	r2, r3
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	085b      	lsrs	r3, r3, #1
 800eabc:	441a      	add	r2, r3
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eacc:	dd02      	ble.n	800ead4 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	011b      	lsls	r3, r3, #4
 800ead2:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eada:	d302      	bcc.n	800eae2 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800eadc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eae0:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800eae6:	89fb      	ldrh	r3, [r7, #14]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	371c      	adds	r7, #28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	603b      	str	r3, [r7, #0]
 800eb00:	4613      	mov	r3, r2
 800eb02:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800eb04:	2300      	movs	r3, #0
 800eb06:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d010      	beq.n	800eb34 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	021a      	lsls	r2, r3, #8
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800eb1e:	88fb      	ldrh	r3, [r7, #6]
 800eb20:	085b      	lsrs	r3, r3, #1
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800eb2a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800eb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	e004      	b.n	800eb3e <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d901      	bls.n	800eb4a <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800eb4e:	8a7b      	ldrh	r3, [r7, #18]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	371c      	adds	r7, #28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800eb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb60:	b093      	sub	sp, #76	; 0x4c
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	461e      	mov	r6, r3
 800eb66:	4603      	mov	r3, r0
 800eb68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eb6e:	4613      	mov	r3, r2
 800eb70:	857b      	strh	r3, [r7, #42]	; 0x2a
 800eb72:	4633      	mov	r3, r6
 800eb74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	f04f 0300 	mov.w	r3, #0
 800eb84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800eb90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fcda 	bl	800e54c <VL53L1_calc_pll_period_us>
 800eb98:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800eb9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	623b      	str	r3, [r7, #32]
 800eba0:	627a      	str	r2, [r7, #36]	; 0x24
 800eba2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eba4:	2200      	movs	r2, #0
 800eba6:	61bb      	str	r3, [r7, #24]
 800eba8:	61fa      	str	r2, [r7, #28]
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	1a9b      	subs	r3, r3, r2
 800ebb4:	613b      	str	r3, [r7, #16]
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	460a      	mov	r2, r1
 800ebba:	eb63 0302 	sbc.w	r3, r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ebc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ebc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebca:	2200      	movs	r2, #0
 800ebcc:	469a      	mov	sl, r3
 800ebce:	4693      	mov	fp, r2
 800ebd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd2:	fb0a f203 	mul.w	r2, sl, r3
 800ebd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd8:	fb0b f303 	mul.w	r3, fp, r3
 800ebdc:	4413      	add	r3, r2
 800ebde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebe0:	fba2 890a 	umull	r8, r9, r2, sl
 800ebe4:	444b      	add	r3, r9
 800ebe6:	4699      	mov	r9, r3
 800ebe8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ebec:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ebf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	da08      	bge.n	800ec0a <VL53L1_range_maths+0xae>
 800ebf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ebfc:	1851      	adds	r1, r2, r1
 800ebfe:	60b9      	str	r1, [r7, #8]
 800ec00:	f143 0300 	adc.w	r3, r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec0a:	f04f 0000 	mov.w	r0, #0
 800ec0e:	f04f 0100 	mov.w	r1, #0
 800ec12:	0a50      	lsrs	r0, r2, #9
 800ec14:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ec18:	1259      	asrs	r1, r3, #9
 800ec1a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ec1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec20:	f249 2257 	movw	r2, #37463	; 0x9257
 800ec24:	fb03 f202 	mul.w	r2, r3, r2
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	fb01 f303 	mul.w	r3, r1, r3
 800ec30:	4413      	add	r3, r2
 800ec32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec34:	f249 2157 	movw	r1, #37463	; 0x9257
 800ec38:	fba2 4501 	umull	r4, r5, r2, r1
 800ec3c:	442b      	add	r3, r5
 800ec3e:	461d      	mov	r5, r3
 800ec40:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800ec44:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800ec48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	da07      	bge.n	800ec60 <VL53L1_range_maths+0x104>
 800ec50:	4934      	ldr	r1, [pc, #208]	; (800ed24 <VL53L1_range_maths+0x1c8>)
 800ec52:	1851      	adds	r1, r2, r1
 800ec54:	6039      	str	r1, [r7, #0]
 800ec56:	f143 0300 	adc.w	r3, r3, #0
 800ec5a:	607b      	str	r3, [r7, #4]
 800ec5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec60:	f04f 0000 	mov.w	r0, #0
 800ec64:	f04f 0100 	mov.w	r1, #0
 800ec68:	0d90      	lsrs	r0, r2, #22
 800ec6a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800ec6e:	1599      	asrs	r1, r3, #22
 800ec70:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800ec74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec78:	4413      	add	r3, r2
 800ec7a:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800ec7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec80:	fb02 f303 	mul.w	r3, r2, r3
 800ec84:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800ec86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec8c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800ec8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da01      	bge.n	800ec98 <VL53L1_range_maths+0x13c>
 800ec94:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ec98:	12db      	asrs	r3, r3, #11
 800ec9a:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ec9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d130      	bne.n	800ed06 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800eca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ecb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	da00      	bge.n	800ecb8 <VL53L1_range_maths+0x15c>
 800ecb6:	3303      	adds	r3, #3
 800ecb8:	109b      	asrs	r3, r3, #2
 800ecba:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ecbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ecbe:	4b1a      	ldr	r3, [pc, #104]	; (800ed28 <VL53L1_range_maths+0x1cc>)
 800ecc0:	fb83 2301 	smull	r2, r3, r3, r1
 800ecc4:	109a      	asrs	r2, r3, #2
 800ecc6:	17cb      	asrs	r3, r1, #31
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	4613      	mov	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	1aca      	subs	r2, r1, r3
 800ecd4:	2a04      	cmp	r2, #4
 800ecd6:	dc09      	bgt.n	800ecec <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	4a13      	ldr	r2, [pc, #76]	; (800ed28 <VL53L1_range_maths+0x1cc>)
 800ecdc:	fb82 1203 	smull	r1, r2, r2, r3
 800ece0:	1092      	asrs	r2, r2, #2
 800ece2:	17db      	asrs	r3, r3, #31
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	647b      	str	r3, [r7, #68]	; 0x44
 800ecea:	e015      	b.n	800ed18 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	4a0e      	ldr	r2, [pc, #56]	; (800ed28 <VL53L1_range_maths+0x1cc>)
 800ecf0:	fb82 1203 	smull	r1, r2, r2, r3
 800ecf4:	1092      	asrs	r2, r2, #2
 800ecf6:	17db      	asrs	r3, r3, #31
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	b21b      	sxth	r3, r3
 800ed02:	647b      	str	r3, [r7, #68]	; 0x44
 800ed04:	e008      	b.n	800ed18 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800ed06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d104      	bne.n	800ed18 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ed0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed10:	0fda      	lsrs	r2, r3, #31
 800ed12:	4413      	add	r3, r2
 800ed14:	105b      	asrs	r3, r3, #1
 800ed16:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800ed18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	374c      	adds	r7, #76	; 0x4c
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed24:	003fffff 	.word	0x003fffff
 800ed28:	66666667 	.word	0x66666667

0800ed2c <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b085      	sub	sp, #20
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	005b      	lsls	r3, r3, #1
 800ed42:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b083      	sub	sp, #12
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	781a      	ldrb	r2, [r3, #0]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	7a5a      	ldrb	r2, [r3, #9]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685a      	ldr	r2, [r3, #4]
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	605a      	str	r2, [r3, #4]
}
 800edc2:	bf00      	nop
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800edce:	b480      	push	{r7}
 800edd0:	b087      	sub	sp, #28
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	60f8      	str	r0, [r7, #12]
 800edd6:	460b      	mov	r3, r1
 800edd8:	607a      	str	r2, [r7, #4]
 800edda:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2203      	movs	r2, #3
 800ede4:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2203      	movs	r2, #3
 800edea:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2218      	movs	r2, #24
 800ee02:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ee04:	897b      	ldrh	r3, [r7, #10]
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800eea2:	2300      	movs	r3, #0
 800eea4:	82fb      	strh	r3, [r7, #22]
 800eea6:	e009      	b.n	800eebc <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800eea8:	8afb      	ldrh	r3, [r7, #22]
 800eeaa:	8afa      	ldrh	r2, [r7, #22]
 800eeac:	b2d1      	uxtb	r1, r2
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	460a      	mov	r2, r1
 800eeb4:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800eeb6:	8afb      	ldrh	r3, [r7, #22]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	82fb      	strh	r3, [r7, #22]
 800eebc:	8afb      	ldrh	r3, [r7, #22]
 800eebe:	2b05      	cmp	r3, #5
 800eec0:	d9f2      	bls.n	800eea8 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800eec2:	2300      	movs	r3, #0
 800eec4:	82fb      	strh	r3, [r7, #22]
 800eec6:	e007      	b.n	800eed8 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800eec8:	8afb      	ldrh	r3, [r7, #22]
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	4413      	add	r3, r2
 800eece:	2201      	movs	r2, #1
 800eed0:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800eed2:	8afb      	ldrh	r3, [r7, #22]
 800eed4:	3301      	adds	r3, #1
 800eed6:	82fb      	strh	r3, [r7, #22]
 800eed8:	8afb      	ldrh	r3, [r7, #22]
 800eeda:	2b05      	cmp	r3, #5
 800eedc:	d9f4      	bls.n	800eec8 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800eede:	2300      	movs	r3, #0
 800eee0:	82fb      	strh	r3, [r7, #22]
 800eee2:	e013      	b.n	800ef0c <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800eee4:	8afa      	ldrh	r2, [r7, #22]
 800eee6:	897b      	ldrh	r3, [r7, #10]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d206      	bcs.n	800eefa <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800eeec:	8afa      	ldrh	r2, [r7, #22]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3206      	adds	r2, #6
 800eef2:	68f9      	ldr	r1, [r7, #12]
 800eef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eef8:	e005      	b.n	800ef06 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800eefa:	8afa      	ldrh	r2, [r7, #22]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3206      	adds	r2, #6
 800ef00:	2100      	movs	r1, #0
 800ef02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ef06:	8afb      	ldrh	r3, [r7, #22]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	82fb      	strh	r3, [r7, #22]
 800ef0c:	8afb      	ldrh	r3, [r7, #22]
 800ef0e:	2b17      	cmp	r3, #23
 800ef10:	d9e8      	bls.n	800eee4 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800ef12:	bf00      	nop
 800ef14:	bf00      	nop
 800ef16:	371c      	adds	r7, #28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
 800ef2c:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800ef2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	da10      	bge.n	800ef58 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	43db      	mvns	r3, r3
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	3308      	adds	r3, #8
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ef4a:	7bfb      	ldrb	r3, [r7, #15]
 800ef4c:	3b80      	subs	r3, #128	; 0x80
 800ef4e:	10db      	asrs	r3, r3, #3
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ef56:	e00c      	b.n	800ef72 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
 800ef5a:	f003 0307 	and.w	r3, r3, #7
 800ef5e:	b2da      	uxtb	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ef6a:	10db      	asrs	r3, r3, #3
 800ef6c:	b2da      	uxtb	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	701a      	strb	r2, [r3, #0]
}
 800ef72:	bf00      	nop
 800ef74:	3714      	adds	r7, #20
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr

0800ef7e <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ef7e:	b480      	push	{r7}
 800ef80:	b085      	sub	sp, #20
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	73fb      	strb	r3, [r7, #15]
 800ef8e:	e02c      	b.n	800efea <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d009      	beq.n	800efaa <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ef9c:	7bf9      	ldrb	r1, [r7, #15]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3106      	adds	r1, #6
 800efa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	db07      	blt.n	800efba <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800efaa:	7bfa      	ldrb	r2, [r7, #15]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3206      	adds	r2, #6
 800efb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d009      	beq.n	800efd4 <VL53L1_hist_find_min_max_bin_values+0x56>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800efc6:	7bf9      	ldrb	r1, [r7, #15]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3106      	adds	r1, #6
 800efcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	dc07      	bgt.n	800efe4 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800efd4:	7bfa      	ldrb	r2, [r7, #15]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3206      	adds	r2, #6
 800efda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800efe4:	7bfb      	ldrb	r3, [r7, #15]
 800efe6:	3301      	adds	r3, #1
 800efe8:	73fb      	strb	r3, [r7, #15]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	7a9b      	ldrb	r3, [r3, #10]
 800efee:	7bfa      	ldrb	r2, [r7, #15]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d3cd      	bcc.n	800ef90 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f002:	b480      	push	{r7}
 800f004:	b085      	sub	sp, #20
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7adb      	ldrb	r3, [r3, #11]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d03a      	beq.n	800f08c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f028:	2300      	movs	r3, #0
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	e00e      	b.n	800f04c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f034:	7bf9      	ldrb	r1, [r7, #15]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	3106      	adds	r1, #6
 800f03a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f03e:	441a      	add	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	3301      	adds	r3, #1
 800f04a:	73fb      	strb	r3, [r7, #15]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	7adb      	ldrb	r3, [r3, #11]
 800f050:	7bfa      	ldrb	r2, [r7, #15]
 800f052:	429a      	cmp	r2, r3
 800f054:	d3eb      	bcc.n	800f02e <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	7ad2      	ldrb	r2, [r2, #11]
 800f06c:	0852      	lsrs	r2, r2, #1
 800f06e:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f070:	441a      	add	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800f082:	fb93 f2f2 	sdiv	r2, r3, r2
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800f08c:	bf00      	nop
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800f098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f09c:	b0ca      	sub	sp, #296	; 0x128
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f0a4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f0a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800f0ca:	f04f 0200 	mov.w	r2, #0
 800f0ce:	f04f 0300 	mov.w	r3, #0
 800f0d2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800f0dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800f0e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800f0ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800f0f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800f0fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f100:	2300      	movs	r3, #0
 800f102:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800f104:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f108:	2300      	movs	r3, #0
 800f10a:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800f10c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f110:	2300      	movs	r3, #0
 800f112:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800f114:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f118:	2300      	movs	r3, #0
 800f11a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800f11c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f120:	2300      	movs	r3, #0
 800f122:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800f124:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f128:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 80e1 	beq.w	800f2f4 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800f132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 80da 	beq.w	800f2f4 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800f140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f144:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff f9ff 	bl	800e54c <VL53L1_calc_pll_period_us>
 800f14e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800f152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f15a:	3301      	adds	r3, #1
 800f15c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800f160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f168:	2110      	movs	r1, #16
 800f16a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f16e:	f7ff fa04 	bl	800e57a <VL53L1_duration_maths>
 800f172:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800f174:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f178:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800f17a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f17e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f182:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4619      	mov	r1, r3
 800f18a:	4610      	mov	r0, r2
 800f18c:	f7ff fc6d 	bl	800ea6a <VL53L1_rate_maths>
 800f190:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f192:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f196:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f19c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f1a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f1a4:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f1a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7ff fa3c 	bl	800e62c <VL53L1_events_per_spad_maths>
 800f1b4:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f1b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f1ba:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f1bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1c0:	8adb      	ldrh	r3, [r3, #22]
 800f1c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1c6:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f1c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1cc:	8adb      	ldrh	r3, [r3, #22]
 800f1ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1d2:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f1d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f000 808a 	beq.w	800f2f4 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f1e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1e4:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	461c      	mov	r4, r3
 800f1ec:	4615      	mov	r5, r2
 800f1ee:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f1f2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f1f6:	4622      	mov	r2, r4
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	f04f 0000 	mov.w	r0, #0
 800f1fe:	f04f 0100 	mov.w	r1, #0
 800f202:	0159      	lsls	r1, r3, #5
 800f204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f208:	0150      	lsls	r0, r2, #5
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	ebb2 0804 	subs.w	r8, r2, r4
 800f212:	eb63 0905 	sbc.w	r9, r3, r5
 800f216:	f04f 0200 	mov.w	r2, #0
 800f21a:	f04f 0300 	mov.w	r3, #0
 800f21e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f222:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f226:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f22a:	4690      	mov	r8, r2
 800f22c:	4699      	mov	r9, r3
 800f22e:	eb18 0a04 	adds.w	sl, r8, r4
 800f232:	eb49 0b05 	adc.w	fp, r9, r5
 800f236:	f04f 0200 	mov.w	r2, #0
 800f23a:	f04f 0300 	mov.w	r3, #0
 800f23e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f242:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f246:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f24a:	4692      	mov	sl, r2
 800f24c:	469b      	mov	fp, r3
 800f24e:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f252:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f256:	f04f 0000 	mov.w	r0, #0
 800f25a:	f04f 0100 	mov.w	r1, #0
 800f25e:	0319      	lsls	r1, r3, #12
 800f260:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f264:	0310      	lsls	r0, r2, #12
 800f266:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f26a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f26e:	695b      	ldr	r3, [r3, #20]
 800f270:	085b      	lsrs	r3, r3, #1
 800f272:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f276:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f27a:	2200      	movs	r2, #0
 800f27c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f284:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f288:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f28c:	4621      	mov	r1, r4
 800f28e:	1851      	adds	r1, r2, r1
 800f290:	65b9      	str	r1, [r7, #88]	; 0x58
 800f292:	4629      	mov	r1, r5
 800f294:	eb43 0101 	adc.w	r1, r3, r1
 800f298:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f29a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f29e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f2a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f2ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f2b2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f2b6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f2ba:	f7f1 f801 	bl	80002c0 <__aeabi_uldivmod>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2ca:	8adb      	ldrh	r3, [r3, #22]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f2d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f2d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f2dc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f2e0:	4621      	mov	r1, r4
 800f2e2:	428a      	cmp	r2, r1
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	418b      	sbcs	r3, r1
 800f2e8:	d204      	bcs.n	800f2f4 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f2ea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f2ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f2f2:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f2f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f000 82e9 	beq.w	800f8d2 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f304:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 82e2 	beq.w	800f8d2 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f30e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f312:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f314:	2b00      	cmp	r3, #0
 800f316:	f000 82dc 	beq.w	800f8d2 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f31a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f322:	2b00      	cmp	r3, #0
 800f324:	f000 82d5 	beq.w	800f8d2 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f328:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f32c:	885b      	ldrh	r3, [r3, #2]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	2200      	movs	r2, #0
 800f332:	653b      	str	r3, [r7, #80]	; 0x50
 800f334:	657a      	str	r2, [r7, #84]	; 0x54
 800f336:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f33a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f33e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f342:	4622      	mov	r2, r4
 800f344:	462b      	mov	r3, r5
 800f346:	f04f 0000 	mov.w	r0, #0
 800f34a:	f04f 0100 	mov.w	r1, #0
 800f34e:	0159      	lsls	r1, r3, #5
 800f350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f354:	0150      	lsls	r0, r2, #5
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	1b11      	subs	r1, r2, r4
 800f35c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f35e:	eb63 0305 	sbc.w	r3, r3, r5
 800f362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f364:	f04f 0200 	mov.w	r2, #0
 800f368:	f04f 0300 	mov.w	r3, #0
 800f36c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f370:	4649      	mov	r1, r9
 800f372:	008b      	lsls	r3, r1, #2
 800f374:	4641      	mov	r1, r8
 800f376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f37a:	4641      	mov	r1, r8
 800f37c:	008a      	lsls	r2, r1, #2
 800f37e:	4611      	mov	r1, r2
 800f380:	461a      	mov	r2, r3
 800f382:	460b      	mov	r3, r1
 800f384:	191b      	adds	r3, r3, r4
 800f386:	643b      	str	r3, [r7, #64]	; 0x40
 800f388:	4613      	mov	r3, r2
 800f38a:	eb45 0303 	adc.w	r3, r5, r3
 800f38e:	647b      	str	r3, [r7, #68]	; 0x44
 800f390:	f04f 0200 	mov.w	r2, #0
 800f394:	f04f 0300 	mov.w	r3, #0
 800f398:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f39c:	4629      	mov	r1, r5
 800f39e:	02cb      	lsls	r3, r1, #11
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	02ca      	lsls	r2, r1, #11
 800f3aa:	461c      	mov	r4, r3
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f3b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	085b      	lsrs	r3, r3, #1
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f3c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f3ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f3ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3d2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	1851      	adds	r1, r2, r1
 800f3da:	63b9      	str	r1, [r7, #56]	; 0x38
 800f3dc:	4629      	mov	r1, r5
 800f3de:	eb43 0101 	adc.w	r1, r3, r1
 800f3e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f3e4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f3e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f3ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3f0:	881b      	ldrh	r3, [r3, #0]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f3fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f3fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f402:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f406:	f7f0 ff5b 	bl	80002c0 <__aeabi_uldivmod>
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
 800f40e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f412:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f416:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f41a:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f41c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	011a      	lsls	r2, r3, #4
 800f424:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f428:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f42a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2200      	movs	r2, #0
 800f432:	633b      	str	r3, [r7, #48]	; 0x30
 800f434:	637a      	str	r2, [r7, #52]	; 0x34
 800f436:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f43a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f43e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f442:	695b      	ldr	r3, [r3, #20]
 800f444:	2200      	movs	r2, #0
 800f446:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f44a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f44e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f452:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f456:	4622      	mov	r2, r4
 800f458:	fb02 f203 	mul.w	r2, r2, r3
 800f45c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f460:	4629      	mov	r1, r5
 800f462:	fb01 f303 	mul.w	r3, r1, r3
 800f466:	441a      	add	r2, r3
 800f468:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f46c:	4621      	mov	r1, r4
 800f46e:	fba3 1301 	umull	r1, r3, r3, r1
 800f472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f476:	460b      	mov	r3, r1
 800f478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f47c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f480:	18d3      	adds	r3, r2, r3
 800f482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f486:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f48a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f48e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f492:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f496:	8b5b      	ldrh	r3, [r3, #26]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2200      	movs	r2, #0
 800f49c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f4a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f4a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f4a8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f4ac:	4622      	mov	r2, r4
 800f4ae:	fb02 f203 	mul.w	r2, r2, r3
 800f4b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	fb01 f303 	mul.w	r3, r1, r3
 800f4bc:	441a      	add	r2, r3
 800f4be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	fba3 1301 	umull	r1, r3, r3, r1
 800f4c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4d6:	18d3      	adds	r3, r2, r3
 800f4d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f4dc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f4e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f4e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f4e8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4ec:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f4f0:	62b9      	str	r1, [r7, #40]	; 0x28
 800f4f2:	f143 0300 	adc.w	r3, r3, #0
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f4fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f500:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f504:	f04f 0000 	mov.w	r0, #0
 800f508:	f04f 0100 	mov.w	r1, #0
 800f50c:	0cd0      	lsrs	r0, r2, #19
 800f50e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f512:	0cd9      	lsrs	r1, r3, #19
 800f514:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f518:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f51c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f520:	6239      	str	r1, [r7, #32]
 800f522:	f143 0300 	adc.w	r3, r3, #0
 800f526:	627b      	str	r3, [r7, #36]	; 0x24
 800f528:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f52c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f530:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f538:	f04f 0300 	mov.w	r3, #0
 800f53c:	f7f0 fec0 	bl	80002c0 <__aeabi_uldivmod>
 800f540:	4602      	mov	r2, r0
 800f542:	460b      	mov	r3, r1
 800f544:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f548:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f54c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f550:	f173 0300 	sbcs.w	r3, r3, #0
 800f554:	d305      	bcc.n	800f562 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f556:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f55a:	f04f 0300 	mov.w	r3, #0
 800f55e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f562:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f566:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f56a:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f56c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2200      	movs	r2, #0
 800f574:	61bb      	str	r3, [r7, #24]
 800f576:	61fa      	str	r2, [r7, #28]
 800f578:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f57c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f580:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	2200      	movs	r2, #0
 800f588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f58c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f590:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f594:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f598:	4622      	mov	r2, r4
 800f59a:	fb02 f203 	mul.w	r2, r2, r3
 800f59e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	fb01 f303 	mul.w	r3, r1, r3
 800f5a8:	441a      	add	r2, r3
 800f5aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	fba3 1301 	umull	r1, r3, r3, r1
 800f5b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5c2:	18d3      	adds	r3, r2, r3
 800f5c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5c8:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f5cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f5d0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f5d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5d8:	8b5b      	ldrh	r3, [r3, #26]
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f5e2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f5e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f5ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	fb02 f203 	mul.w	r2, r2, r3
 800f5f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	fb01 f303 	mul.w	r3, r1, r3
 800f5fe:	441a      	add	r2, r3
 800f600:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f604:	4621      	mov	r1, r4
 800f606:	fba3 1301 	umull	r1, r3, r3, r1
 800f60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f60e:	460b      	mov	r3, r1
 800f610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f618:	18d3      	adds	r3, r2, r3
 800f61a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f61e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f622:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f626:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f62a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f62e:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f632:	6139      	str	r1, [r7, #16]
 800f634:	f143 0300 	adc.w	r3, r3, #0
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f63e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f642:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f646:	f04f 0000 	mov.w	r0, #0
 800f64a:	f04f 0100 	mov.w	r1, #0
 800f64e:	0cd0      	lsrs	r0, r2, #19
 800f650:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f654:	0cd9      	lsrs	r1, r3, #19
 800f656:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f65a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f65e:	2200      	movs	r2, #0
 800f660:	67bb      	str	r3, [r7, #120]	; 0x78
 800f662:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f664:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f668:	891b      	ldrh	r3, [r3, #8]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	2200      	movs	r2, #0
 800f66e:	673b      	str	r3, [r7, #112]	; 0x70
 800f670:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f672:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f676:	462b      	mov	r3, r5
 800f678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f67c:	4642      	mov	r2, r8
 800f67e:	fb02 f203 	mul.w	r2, r2, r3
 800f682:	464b      	mov	r3, r9
 800f684:	4621      	mov	r1, r4
 800f686:	fb01 f303 	mul.w	r3, r1, r3
 800f68a:	4413      	add	r3, r2
 800f68c:	4622      	mov	r2, r4
 800f68e:	4641      	mov	r1, r8
 800f690:	fba2 1201 	umull	r1, r2, r2, r1
 800f694:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f698:	460a      	mov	r2, r1
 800f69a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f69e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f6a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f6ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	fb02 f203 	mul.w	r2, r2, r3
 800f6b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	fb01 f303 	mul.w	r3, r1, r3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	fba2 1201 	umull	r1, r2, r2, r1
 800f6cc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f6d0:	460a      	mov	r2, r1
 800f6d2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f6d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f6da:	4413      	add	r3, r2
 800f6dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f6e0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f6e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f6e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f6ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6f0:	88db      	ldrh	r3, [r3, #6]
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f6fa:	f04f 0200 	mov.w	r2, #0
 800f6fe:	f04f 0300 	mov.w	r3, #0
 800f702:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f706:	4629      	mov	r1, r5
 800f708:	01cb      	lsls	r3, r1, #7
 800f70a:	4621      	mov	r1, r4
 800f70c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f710:	4621      	mov	r1, r4
 800f712:	01ca      	lsls	r2, r1, #7
 800f714:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f718:	1884      	adds	r4, r0, r2
 800f71a:	60bc      	str	r4, [r7, #8]
 800f71c:	eb41 0303 	adc.w	r3, r1, r3
 800f720:	60fb      	str	r3, [r7, #12]
 800f722:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f726:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f72a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f72e:	88db      	ldrh	r3, [r3, #6]
 800f730:	b29b      	uxth	r3, r3
 800f732:	2200      	movs	r2, #0
 800f734:	663b      	str	r3, [r7, #96]	; 0x60
 800f736:	667a      	str	r2, [r7, #100]	; 0x64
 800f738:	f04f 0200 	mov.w	r2, #0
 800f73c:	f04f 0300 	mov.w	r3, #0
 800f740:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f744:	4629      	mov	r1, r5
 800f746:	020b      	lsls	r3, r1, #8
 800f748:	4621      	mov	r1, r4
 800f74a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f74e:	4621      	mov	r1, r4
 800f750:	020a      	lsls	r2, r1, #8
 800f752:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f756:	f7f0 fdb3 	bl	80002c0 <__aeabi_uldivmod>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f762:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f766:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f76a:	6039      	str	r1, [r7, #0]
 800f76c:	f143 0300 	adc.w	r3, r3, #0
 800f770:	607b      	str	r3, [r7, #4]
 800f772:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f776:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f77a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f77e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f782:	f04f 0300 	mov.w	r3, #0
 800f786:	f7f0 fd9b 	bl	80002c0 <__aeabi_uldivmod>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f792:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f796:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f79a:	f173 0300 	sbcs.w	r3, r3, #0
 800f79e:	d305      	bcc.n	800f7ac <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f7a0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f7a4:	f04f 0300 	mov.w	r3, #0
 800f7a8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f7ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f7b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7b4:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f7b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7ba:	69db      	ldr	r3, [r3, #28]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe ffcd 	bl	800e75e <VL53L1_isqrt>
 800f7c4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f7c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7cc:	785b      	ldrb	r3, [r3, #1]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f7d4:	fb02 f303 	mul.w	r3, r2, r3
 800f7d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f7dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7e0:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f7e2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f7e6:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d218      	bcs.n	800f81e <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f7ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f7f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7f8:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f804:	021b      	lsls	r3, r3, #8
 800f806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f80a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f80e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f812:	429a      	cmp	r2, r3
 800f814:	d203      	bcs.n	800f81e <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f81a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f81e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f822:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f824:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f828:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f82a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f82c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f830:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f832:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f836:	f000 f854 	bl	800f8e2 <VL53L1_f_002>
 800f83a:	4603      	mov	r3, r0
 800f83c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f83e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f842:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f844:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f84e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f852:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f856:	461a      	mov	r2, r3
 800f858:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f85c:	fb02 f303 	mul.w	r3, r2, r3
 800f860:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f864:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f868:	3308      	adds	r3, #8
 800f86a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f86e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f872:	091b      	lsrs	r3, r3, #4
 800f874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f87c:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f87e:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f880:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f884:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f886:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f88c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f88e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f892:	f000 f826 	bl	800f8e2 <VL53L1_f_002>
 800f896:	4603      	mov	r3, r0
 800f898:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f89a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f89e:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f8a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8a4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f8a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8ac:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	da07      	bge.n	800f8c4 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f8b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f8bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f8c0:	801a      	strh	r2, [r3, #0]
 800f8c2:	e006      	b.n	800f8d2 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f8c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8c8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f8cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f8d0:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f8d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f8e2 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b086      	sub	sp, #24
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	60f8      	str	r0, [r7, #12]
 800f8ea:	60b9      	str	r1, [r7, #8]
 800f8ec:	607a      	str	r2, [r7, #4]
 800f8ee:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	fb03 f303 	mul.w	r3, r3, r3
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	4413      	add	r3, r2
 800f908:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f90a:	6938      	ldr	r0, [r7, #16]
 800f90c:	f7fe ff27 	bl	800e75e <VL53L1_isqrt>
 800f910:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f912:	693a      	ldr	r2, [r7, #16]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	4413      	add	r3, r2
 800f918:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	011b      	lsls	r3, r3, #4
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe ff1d 	bl	800e75e <VL53L1_isqrt>
 800f924:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	fb02 f303 	mul.w	r3, r2, r3
 800f92e:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d009      	beq.n	800f94a <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	4413      	add	r3, r2
 800f93c:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	fbb2 f3f3 	udiv	r3, r2, r3
 800f948:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f94a:	697b      	ldr	r3, [r7, #20]

}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2218      	movs	r2, #24
 800f964:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	73fb      	strb	r3, [r7, #15]
 800f98a:	e01f      	b.n	800f9cc <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	4413      	add	r3, r2
 800f992:	2200      	movs	r2, #0
 800f994:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	4413      	add	r3, r2
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f9a2:	7bfb      	ldrb	r3, [r7, #15]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f9ae:	7bfa      	ldrb	r2, [r7, #15]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	322e      	adds	r2, #46	; 0x2e
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f9ba:	7bfa      	ldrb	r2, [r7, #15]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3246      	adds	r2, #70	; 0x46
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f9c6:	7bfb      	ldrb	r3, [r7, #15]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	73fb      	strb	r3, [r7, #15]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	785b      	ldrb	r3, [r3, #1]
 800f9d0:	7bfa      	ldrb	r2, [r7, #15]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d3da      	bcc.n	800f98c <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2208      	movs	r2, #8
 800f9e2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	2118      	movs	r1, #24
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	f7ff f9e8 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fa04:	461a      	mov	r2, r3
 800fa06:	2118      	movs	r1, #24
 800fa08:	2000      	movs	r0, #0
 800fa0a:	f7ff f9e0 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800fa14:	461a      	mov	r2, r3
 800fa16:	2118      	movs	r1, #24
 800fa18:	2000      	movs	r0, #0
 800fa1a:	f7ff f9d8 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800fa24:	461a      	mov	r2, r3
 800fa26:	2118      	movs	r1, #24
 800fa28:	2000      	movs	r0, #0
 800fa2a:	f7ff f9d0 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800fa34:	461a      	mov	r2, r3
 800fa36:	2118      	movs	r1, #24
 800fa38:	2000      	movs	r0, #0
 800fa3a:	f7ff f9c8 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800fa3e:	bf00      	nop
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fa46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa4a:	b090      	sub	sp, #64	; 0x40
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	61b9      	str	r1, [r7, #24]
 800fa50:	617a      	str	r2, [r7, #20]
 800fa52:	461a      	mov	r2, r3
 800fa54:	4603      	mov	r3, r0
 800fa56:	83fb      	strh	r3, [r7, #30]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800fa62:	2300      	movs	r3, #0
 800fa64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800fa6e:	f04f 0200 	mov.w	r2, #0
 800fa72:	f04f 0300 	mov.w	r3, #0
 800fa76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800fa86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa88:	7a5a      	ldrb	r2, [r3, #9]
 800fa8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa8c:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800fa8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa90:	7a1a      	ldrb	r2, [r3, #8]
 800fa92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa94:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800fa96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa98:	7a9a      	ldrb	r2, [r3, #10]
 800fa9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa9c:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800fa9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faa0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800faa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faa6:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800faa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff f93c 	bl	800ed2c <VL53L1_decode_vcsel_period>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800fab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faba:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800fabc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fabe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fac2:	17da      	asrs	r2, r3, #31
 800fac4:	60bb      	str	r3, [r7, #8]
 800fac6:	60fa      	str	r2, [r7, #12]
 800fac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800facc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800fad0:	8bfb      	ldrh	r3, [r7, #30]
 800fad2:	2200      	movs	r2, #0
 800fad4:	4698      	mov	r8, r3
 800fad6:	4691      	mov	r9, r2
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	fb08 f203 	mul.w	r2, r8, r3
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	fb09 f303 	mul.w	r3, r9, r3
 800fae4:	4413      	add	r3, r2
 800fae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fae8:	fba2 4508 	umull	r4, r5, r2, r8
 800faec:	442b      	add	r3, r5
 800faee:	461d      	mov	r5, r3
 800faf0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800faf4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800faf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fafc:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800fb00:	f143 0b00 	adc.w	fp, r3, #0
 800fb04:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800fb08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	da08      	bge.n	800fb22 <VL53L1_f_018+0xdc>
 800fb10:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fb14:	1851      	adds	r1, r2, r1
 800fb16:	6039      	str	r1, [r7, #0]
 800fb18:	f143 0300 	adc.w	r3, r3, #0
 800fb1c:	607b      	str	r3, [r7, #4]
 800fb1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb22:	f04f 0000 	mov.w	r0, #0
 800fb26:	f04f 0100 	mov.w	r1, #0
 800fb2a:	0b10      	lsrs	r0, r2, #12
 800fb2c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800fb30:	1319      	asrs	r1, r3, #12
 800fb32:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800fb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb38:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb40:	e062      	b.n	800fc08 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800fb42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb46:	089b      	lsrs	r3, r3, #2
 800fb48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800fb4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb52:	4413      	add	r3, r2
 800fb54:	7c9b      	ldrb	r3, [r3, #18]
 800fb56:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	dd4f      	ble.n	800fbfe <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800fb5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb60:	7a9b      	ldrb	r3, [r3, #10]
 800fb62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d20f      	bcs.n	800fb8a <VL53L1_f_018+0x144>
 800fb6a:	7f7b      	ldrb	r3, [r7, #29]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00c      	beq.n	800fb8a <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800fb70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb76:	3206      	adds	r2, #6
 800fb78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	441a      	add	r2, r3
 800fb80:	6a3b      	ldr	r3, [r7, #32]
 800fb82:	fb02 f303 	mul.w	r3, r2, r3
 800fb86:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb88:	e004      	b.n	800fb94 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb8e:	fb02 f303 	mul.w	r3, r2, r3
 800fb92:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fde1 	bl	800e75e <VL53L1_isqrt>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	0fda      	lsrs	r2, r3, #31
 800fba4:	4413      	add	r3, r2
 800fba6:	105b      	asrs	r3, r3, #1
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbac:	4413      	add	r3, r2
 800fbae:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	fb92 f3f3 	sdiv	r3, r2, r3
 800fbb8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	69ba      	ldr	r2, [r7, #24]
 800fbbe:	fb02 f303 	mul.w	r3, r2, r3
 800fbc2:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	da00      	bge.n	800fbd2 <VL53L1_f_018+0x18c>
 800fbd0:	330f      	adds	r3, #15
 800fbd2:	111b      	asrs	r3, r3, #4
 800fbd4:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	4413      	add	r3, r2
 800fbdc:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fbde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	da01      	bge.n	800fbea <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fbea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fbee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbf0:	3216      	adds	r2, #22
 800fbf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fbf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbfc:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fbfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc02:	3301      	adds	r3, #1
 800fc04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc0a:	7a9b      	ldrb	r3, [r3, #10]
 800fc0c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d396      	bcc.n	800fb42 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fc14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc16:	2200      	movs	r2, #0
 800fc18:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fc1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc1c:	7a1b      	ldrb	r3, [r3, #8]
 800fc1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc22:	e033      	b.n	800fc8c <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fc24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc2a:	3206      	adds	r2, #6
 800fc2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc30:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fc34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc36:	3116      	adds	r1, #22
 800fc38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	dd13      	ble.n	800fc68 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fc40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc46:	4413      	add	r3, r2
 800fc48:	2201      	movs	r2, #1
 800fc4a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fc4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc52:	4413      	add	r3, r2
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fc5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc5c:	791b      	ldrb	r3, [r3, #4]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc64:	711a      	strb	r2, [r3, #4]
 800fc66:	e00c      	b.n	800fc82 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fc68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc6e:	4413      	add	r3, r2
 800fc70:	2200      	movs	r2, #0
 800fc72:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800fc74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc7a:	4413      	add	r3, r2
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fc82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc86:	3301      	adds	r3, #1
 800fc88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc8e:	7a9b      	ldrb	r3, [r3, #10]
 800fc90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d3c5      	bcc.n	800fc24 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fc98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3740      	adds	r7, #64	; 0x40
 800fca0:	46bd      	mov	sp, r7
 800fca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fca6 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fca6:	b480      	push	{r7}
 800fca8:	b085      	sub	sp, #20
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	73fb      	strb	r3, [r7, #15]
 800fcca:	e02d      	b.n	800fd28 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fccc:	7bfb      	ldrb	r3, [r7, #15]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	78d2      	ldrb	r2, [r2, #3]
 800fcd4:	fb93 f1f2 	sdiv	r1, r3, r2
 800fcd8:	fb01 f202 	mul.w	r2, r1, r2
 800fcdc:	1a9b      	subs	r3, r3, r2
 800fcde:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	789b      	ldrb	r3, [r3, #2]
 800fce4:	7bfa      	ldrb	r2, [r7, #15]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d21b      	bcs.n	800fd22 <VL53L1_f_019+0x7c>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	789b      	ldrb	r3, [r3, #2]
 800fcee:	7b3a      	ldrb	r2, [r7, #12]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d216      	bcs.n	800fd22 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d10f      	bne.n	800fd22 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fd02:	7b3b      	ldrb	r3, [r7, #12]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	4413      	add	r3, r2
 800fd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d108      	bne.n	800fd22 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fd10:	7bbb      	ldrb	r3, [r7, #14]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d105      	bne.n	800fd22 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	7bfa      	ldrb	r2, [r7, #15]
 800fd1a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fd22:	7bfb      	ldrb	r3, [r7, #15]
 800fd24:	3301      	adds	r3, #1
 800fd26:	73fb      	strb	r3, [r7, #15]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	78db      	ldrb	r3, [r3, #3]
 800fd2c:	7bfa      	ldrb	r2, [r7, #15]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d3cc      	bcc.n	800fccc <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fd32:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3714      	adds	r7, #20
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr

0800fd42 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fd42:	b480      	push	{r7}
 800fd44:	b085      	sub	sp, #20
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fd52:	2300      	movs	r3, #0
 800fd54:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fd60:	73fb      	strb	r3, [r7, #15]
 800fd62:	e05a      	b.n	800fe1a <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	78da      	ldrb	r2, [r3, #3]
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd6e:	fb01 f202 	mul.w	r2, r1, r2
 800fd72:	1a9b      	subs	r3, r3, r2
 800fd74:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	78d2      	ldrb	r2, [r2, #3]
 800fd7e:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd82:	fb01 f202 	mul.w	r2, r1, r2
 800fd86:	1a9b      	subs	r3, r3, r2
 800fd88:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	789b      	ldrb	r3, [r3, #2]
 800fd8e:	7b7a      	ldrb	r2, [r7, #13]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d23f      	bcs.n	800fe14 <VL53L1_f_020+0xd2>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	789b      	ldrb	r3, [r3, #2]
 800fd98:	7b3a      	ldrb	r2, [r7, #12]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d23a      	bcs.n	800fe14 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800fd9e:	7b7b      	ldrb	r3, [r7, #13]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	4413      	add	r3, r2
 800fda4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d10e      	bne.n	800fdca <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800fdac:	7b3b      	ldrb	r3, [r7, #12]
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d107      	bne.n	800fdca <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d905      	bls.n	800fde6 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800fde6:	7b7b      	ldrb	r3, [r7, #13]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	4413      	add	r3, r2
 800fdec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d009      	beq.n	800fe08 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800fdf4:	7b7b      	ldrb	r3, [r7, #13]
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	4413      	add	r3, r2
 800fe00:	460a      	mov	r2, r1
 800fe02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe06:	e005      	b.n	800fe14 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800fe08:	7b7b      	ldrb	r3, [r7, #13]
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800fe14:	7bfb      	ldrb	r3, [r7, #15]
 800fe16:	3301      	adds	r3, #1
 800fe18:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800fe1a:	7bfa      	ldrb	r2, [r7, #15]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe22:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800fe28:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	db9a      	blt.n	800fd64 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fe2e:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe3e:	b480      	push	{r7}
 800fe40:	b087      	sub	sp, #28
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe46:	2300      	movs	r3, #0
 800fe48:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800fe56:	2300      	movs	r3, #0
 800fe58:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	78db      	ldrb	r3, [r3, #3]
 800fe62:	3b01      	subs	r3, #1
 800fe64:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800fe66:	7cbb      	ldrb	r3, [r7, #18]
 800fe68:	085b      	lsrs	r3, r3, #1
 800fe6a:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe72:	75fb      	strb	r3, [r7, #23]
 800fe74:	e0a2      	b.n	800ffbc <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	78da      	ldrb	r2, [r3, #3]
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe80:	fb01 f202 	mul.w	r2, r1, r2
 800fe84:	1a9b      	subs	r3, r3, r2
 800fe86:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	78d2      	ldrb	r2, [r2, #3]
 800fe90:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe94:	fb01 f202 	mul.w	r2, r1, r2
 800fe98:	1a9b      	subs	r3, r3, r2
 800fe9a:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	789b      	ldrb	r3, [r3, #2]
 800fea0:	7d7a      	ldrb	r2, [r7, #21]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	f080 8087 	bcs.w	800ffb6 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800feac:	7d3a      	ldrb	r2, [r7, #20]
 800feae:	429a      	cmp	r2, r3
 800feb0:	f080 8081 	bcs.w	800ffb6 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800feb4:	7d7b      	ldrb	r3, [r7, #21]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	4413      	add	r3, r2
 800feba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d12f      	bne.n	800ff22 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800fec2:	7d3b      	ldrb	r3, [r7, #20]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	4413      	add	r3, r2
 800fec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d028      	beq.n	800ff22 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800fed0:	7d3b      	ldrb	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	4413      	add	r3, r2
 800fed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feda:	3b01      	subs	r3, #1
 800fedc:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fee4:	7cfa      	ldrb	r2, [r7, #19]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d21b      	bcs.n	800ff22 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800feea:	7cfa      	ldrb	r2, [r7, #19]
 800feec:	4613      	mov	r3, r2
 800feee:	00db      	lsls	r3, r3, #3
 800fef0:	4413      	add	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	4413      	add	r3, r2
 800fefc:	3304      	adds	r3, #4
 800fefe:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	7dfa      	ldrb	r2, [r7, #23]
 800ff04:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	22ff      	movs	r2, #255	; 0xff
 800ff14:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800ff22:	7d7b      	ldrb	r3, [r7, #21]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	4413      	add	r3, r2
 800ff28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d042      	beq.n	800ffb6 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800ff30:	7d3b      	ldrb	r3, [r7, #20]
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	4413      	add	r3, r2
 800ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d13b      	bne.n	800ffb6 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800ff3e:	7d7b      	ldrb	r3, [r7, #21]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	4413      	add	r3, r2
 800ff44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ff52:	7cfa      	ldrb	r2, [r7, #19]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d22e      	bcs.n	800ffb6 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800ff58:	7cfa      	ldrb	r2, [r7, #19]
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	00db      	lsls	r3, r3, #3
 800ff5e:	4413      	add	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	4413      	add	r3, r2
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	7dfa      	ldrb	r2, [r7, #23]
 800ff72:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800ff74:	7dfb      	ldrb	r3, [r7, #23]
 800ff76:	3301      	adds	r3, #1
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	799b      	ldrb	r3, [r3, #6]
 800ffaa:	7cba      	ldrb	r2, [r7, #18]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d202      	bcs.n	800ffb6 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	7cba      	ldrb	r2, [r7, #18]
 800ffb4:	719a      	strb	r2, [r3, #6]
		blb++) {
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800ffbc:	7dfa      	ldrb	r2, [r7, #23]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ffc4:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800ffca:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	f6ff af52 	blt.w	800fe76 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ffd2:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	371c      	adds	r7, #28
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b090      	sub	sp, #64	; 0x40
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	4603      	mov	r3, r0
 800ffea:	6039      	str	r1, [r7, #0]
 800ffec:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ffee:	2300      	movs	r3, #0
 800fff0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800fff4:	f107 030c 	add.w	r3, r7, #12
 800fff8:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8010000:	2301      	movs	r3, #1
 8010002:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801000c:	2b01      	cmp	r3, #1
 801000e:	d965      	bls.n	80100dc <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8010010:	e05f      	b.n	80100d2 <VL53L1_f_028+0xf0>

		swapped = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010018:	2301      	movs	r3, #1
 801001a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801001e:	e051      	b.n	80100c4 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8010020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010024:	1e5a      	subs	r2, r3, #1
 8010026:	4613      	mov	r3, r2
 8010028:	00db      	lsls	r3, r3, #3
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010032:	683a      	ldr	r2, [r7, #0]
 8010034:	4413      	add	r3, r2
 8010036:	3304      	adds	r3, #4
 8010038:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 801003a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801003e:	4613      	mov	r3, r2
 8010040:	00db      	lsls	r3, r3, #3
 8010042:	4413      	add	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801004a:	683a      	ldr	r2, [r7, #0]
 801004c:	4413      	add	r3, r2
 801004e:	3304      	adds	r3, #4
 8010050:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8010052:	79fb      	ldrb	r3, [r7, #7]
 8010054:	2b02      	cmp	r3, #2
 8010056:	d118      	bne.n	801008a <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 8010058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005a:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 801005c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005e:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8010060:	429a      	cmp	r2, r3
 8010062:	da2a      	bge.n	80100ba <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010064:	2224      	movs	r2, #36	; 0x24
 8010066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801006a:	f009 faed 	bl	8019648 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 801006e:	2224      	movs	r2, #36	; 0x24
 8010070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010074:	f009 fae8 	bl	8019648 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8010078:	2224      	movs	r2, #36	; 0x24
 801007a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801007c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801007e:	f009 fae3 	bl	8019648 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010082:	2301      	movs	r3, #1
 8010084:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010088:	e017      	b.n	80100ba <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	699a      	ldr	r2, [r3, #24]
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	699b      	ldr	r3, [r3, #24]
 8010092:	429a      	cmp	r2, r3
 8010094:	d911      	bls.n	80100ba <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010096:	2224      	movs	r2, #36	; 0x24
 8010098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801009a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801009c:	f009 fad4 	bl	8019648 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80100a0:	2224      	movs	r2, #36	; 0x24
 80100a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100a6:	f009 facf 	bl	8019648 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80100aa:	2224      	movs	r2, #36	; 0x24
 80100ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80100b0:	f009 faca 	bl	8019648 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80100b4:	2301      	movs	r3, #1
 80100b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80100ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100be:	3301      	adds	r3, #1
 80100c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80100ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d3a6      	bcc.n	8010020 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 80100d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d19b      	bne.n	8010012 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 80100da:	e000      	b.n	80100de <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 80100dc:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 80100de:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3740      	adds	r7, #64	; 0x40
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b087      	sub	sp, #28
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	4603      	mov	r3, r0
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
 80100f6:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80100f8:	2300      	movs	r3, #0
 80100fa:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010104:	7bfa      	ldrb	r2, [r7, #15]
 8010106:	4613      	mov	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	4413      	add	r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	4413      	add	r3, r2
 8010116:	3304      	adds	r3, #4
 8010118:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2200      	movs	r2, #0
 801011e:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	2200      	movs	r2, #0
 8010124:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	75fb      	strb	r3, [r7, #23]
 801012c:	e01c      	b.n	8010168 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	78da      	ldrb	r2, [r3, #3]
 8010132:	7dfb      	ldrb	r3, [r7, #23]
 8010134:	fbb3 f1f2 	udiv	r1, r3, r2
 8010138:	fb01 f202 	mul.w	r2, r1, r2
 801013c:	1a9b      	subs	r3, r3, r2
 801013e:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	68da      	ldr	r2, [r3, #12]
 8010144:	7d79      	ldrb	r1, [r7, #21]
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	3106      	adds	r1, #6
 801014a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801014e:	441a      	add	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	689b      	ldr	r3, [r3, #8]
 801015c:	441a      	add	r2, r3
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	3301      	adds	r3, #1
 8010166:	75fb      	strb	r3, [r7, #23]
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	791b      	ldrb	r3, [r3, #4]
 801016c:	7dfa      	ldrb	r2, [r7, #23]
 801016e:	429a      	cmp	r2, r3
 8010170:	d9dd      	bls.n	801012e <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	68da      	ldr	r2, [r3, #12]
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8010180:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010184:	4618      	mov	r0, r3
 8010186:	371c      	adds	r7, #28
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010190:	b590      	push	{r4, r7, lr}
 8010192:	b08d      	sub	sp, #52	; 0x34
 8010194:	af02      	add	r7, sp, #8
 8010196:	60ba      	str	r2, [r7, #8]
 8010198:	607b      	str	r3, [r7, #4]
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]
 801019e:	460b      	mov	r3, r1
 80101a0:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80101a2:	2300      	movs	r3, #0
 80101a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 80101a8:	2300      	movs	r3, #0
 80101aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80101be:	7bfa      	ldrb	r2, [r7, #15]
 80101c0:	4613      	mov	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	4413      	add	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	4413      	add	r3, r2
 80101d0:	3304      	adds	r3, #4
 80101d2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	789b      	ldrb	r3, [r3, #2]
 80101d8:	2bff      	cmp	r3, #255	; 0xff
 80101da:	d102      	bne.n	80101e2 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	2201      	movs	r2, #1
 80101e0:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	789b      	ldrb	r3, [r3, #2]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	78d2      	ldrb	r2, [r2, #3]
 80101ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80101ee:	fb01 f202 	mul.w	r2, r1, r2
 80101f2:	1a9b      	subs	r3, r3, r2
 80101f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 80101f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101fc:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	b29a      	uxth	r2, r3
 8010204:	8c3b      	ldrh	r3, [r7, #32]
 8010206:	4413      	add	r3, r2
 8010208:	b29b      	uxth	r3, r3
 801020a:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 801020c:	8c3a      	ldrh	r2, [r7, #32]
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	789b      	ldrb	r3, [r3, #2]
 8010212:	b29b      	uxth	r3, r3
 8010214:	1ad3      	subs	r3, r2, r3
 8010216:	b29b      	uxth	r3, r3
 8010218:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801021a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801021e:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	791b      	ldrb	r3, [r3, #4]
 8010224:	b29a      	uxth	r2, r3
 8010226:	8bfb      	ldrh	r3, [r7, #30]
 8010228:	4413      	add	r3, r2
 801022a:	b29b      	uxth	r3, r3
 801022c:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 801022e:	8bfa      	ldrh	r2, [r7, #30]
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	789b      	ldrb	r3, [r3, #2]
 8010234:	b29b      	uxth	r3, r3
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	b29b      	uxth	r3, r3
 801023a:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 801023c:	8bfa      	ldrh	r2, [r7, #30]
 801023e:	8c3b      	ldrh	r3, [r7, #32]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	b29b      	uxth	r3, r3
 8010244:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8010246:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801024a:	2b03      	cmp	r3, #3
 801024c:	dd01      	ble.n	8010252 <VL53L1_f_027+0xc2>
		window_width = 3;
 801024e:	2303      	movs	r3, #3
 8010250:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8010252:	8c3a      	ldrh	r2, [r7, #32]
 8010254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010256:	4413      	add	r3, r2
 8010258:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801025a:	b219      	sxth	r1, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	78da      	ldrb	r2, [r3, #3]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	3314      	adds	r3, #20
 8010264:	7bbc      	ldrb	r4, [r7, #14]
 8010266:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	4623      	mov	r3, r4
 8010272:	f000 f846 	bl	8010302 <VL53L1_f_030>
 8010276:	4603      	mov	r3, r0
 8010278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 801027c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010280:	2b00      	cmp	r3, #0
 8010282:	d114      	bne.n	80102ae <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8010284:	8bfa      	ldrh	r2, [r7, #30]
 8010286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010288:	1ad3      	subs	r3, r2, r3
 801028a:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 801028c:	b218      	sxth	r0, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	78da      	ldrb	r2, [r3, #3]
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	331c      	adds	r3, #28
 8010296:	7bbc      	ldrb	r4, [r7, #14]
 8010298:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 801029c:	9301      	str	r3, [sp, #4]
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	4623      	mov	r3, r4
 80102a4:	f000 f82d 	bl	8010302 <VL53L1_f_030>
 80102a8:	4603      	mov	r3, r0
 80102aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	695a      	ldr	r2, [r3, #20]
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	69db      	ldr	r3, [r3, #28]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d909      	bls.n	80102ce <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	695b      	ldr	r3, [r3, #20]
 80102be:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	69da      	ldr	r2, [r3, #28]
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	69ba      	ldr	r2, [r7, #24]
 80102cc:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	699a      	ldr	r2, [r3, #24]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	695b      	ldr	r3, [r3, #20]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d203      	bcs.n	80102e2 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	699a      	ldr	r2, [r3, #24]
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	699a      	ldr	r2, [r3, #24]
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d903      	bls.n	80102f6 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	699a      	ldr	r2, [r3, #24]
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 80102f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	372c      	adds	r7, #44	; 0x2c
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd90      	pop	{r4, r7, pc}

08010302 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8010302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010306:	b09d      	sub	sp, #116	; 0x74
 8010308:	af00      	add	r7, sp, #0
 801030a:	461c      	mov	r4, r3
 801030c:	4603      	mov	r3, r0
 801030e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010312:	460b      	mov	r3, r1
 8010314:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010318:	4613      	mov	r3, r2
 801031a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801031e:	4623      	mov	r3, r4
 8010320:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010324:	2300      	movs	r3, #0
 8010326:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	f04f 0300 	mov.w	r3, #0
 801033e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	f04f 0300 	mov.w	r3, #0
 801034a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 801034e:	f04f 0200 	mov.w	r2, #0
 8010352:	f04f 0300 	mov.w	r3, #0
 8010356:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801035a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801035e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010362:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8010364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010368:	2b00      	cmp	r3, #0
 801036a:	f000 809c 	beq.w	80104a6 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801036e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010372:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010376:	e08f      	b.n	8010498 <VL53L1_f_030+0x196>

		if (lb < 0)
 8010378:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801037c:	2b00      	cmp	r3, #0
 801037e:	da09      	bge.n	8010394 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8010380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010384:	b29a      	uxth	r2, r3
 8010386:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801038a:	4413      	add	r3, r2
 801038c:	b29b      	uxth	r3, r3
 801038e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010392:	e00a      	b.n	80103aa <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8010394:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8010398:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801039c:	fb91 f3f2 	sdiv	r3, r1, r2
 80103a0:	fb02 f303 	mul.w	r3, r2, r3
 80103a4:	1acb      	subs	r3, r1, r3
 80103a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 80103aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	db6b      	blt.n	801048a <VL53L1_f_030+0x188>
 80103b2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80103b6:	2b17      	cmp	r3, #23
 80103b8:	dc67      	bgt.n	801048a <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 80103ba:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80103be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80103c2:	3306      	adds	r3, #6
 80103c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c8:	17da      	asrs	r2, r3, #31
 80103ca:	633b      	str	r3, [r7, #48]	; 0x30
 80103cc:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 80103ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80103d6:	17da      	asrs	r2, r3, #31
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80103da:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 80103dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80103e2:	4602      	mov	r2, r0
 80103e4:	1a9b      	subs	r3, r3, r2
 80103e6:	623b      	str	r3, [r7, #32]
 80103e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ea:	460a      	mov	r2, r1
 80103ec:	eb63 0302 	sbc.w	r3, r3, r2
 80103f0:	627b      	str	r3, [r7, #36]	; 0x24
 80103f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80103f6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 80103fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d009      	beq.n	8010416 <VL53L1_f_030+0x114>
 8010402:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010406:	2b00      	cmp	r3, #0
 8010408:	da05      	bge.n	8010416 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801040a:	f04f 0200 	mov.w	r2, #0
 801040e:	f04f 0300 	mov.w	r3, #0
 8010412:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8010416:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801041a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801041e:	1884      	adds	r4, r0, r2
 8010420:	61bc      	str	r4, [r7, #24]
 8010422:	eb41 0303 	adc.w	r3, r1, r3
 8010426:	61fb      	str	r3, [r7, #28]
 8010428:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801042c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8010430:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010434:	17da      	asrs	r2, r3, #31
 8010436:	63bb      	str	r3, [r7, #56]	; 0x38
 8010438:	63fa      	str	r2, [r7, #60]	; 0x3c
 801043a:	f04f 0200 	mov.w	r2, #0
 801043e:	f04f 0300 	mov.w	r3, #0
 8010442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010444:	02cb      	lsls	r3, r1, #11
 8010446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010448:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 801044c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801044e:	02ca      	lsls	r2, r1, #11
 8010450:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8010454:	f143 0600 	adc.w	r6, r3, #0
 8010458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801045a:	fb06 f203 	mul.w	r2, r6, r3
 801045e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010460:	fb05 f303 	mul.w	r3, r5, r3
 8010464:	441a      	add	r2, r3
 8010466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010468:	fba3 ab05 	umull	sl, fp, r3, r5
 801046c:	eb02 030b 	add.w	r3, r2, fp
 8010470:	469b      	mov	fp, r3
			weighted_sum +=
 8010472:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010476:	eb12 010a 	adds.w	r1, r2, sl
 801047a:	6139      	str	r1, [r7, #16]
 801047c:	eb43 030b 	adc.w	r3, r3, fp
 8010480:	617b      	str	r3, [r7, #20]
 8010482:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010486:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801048a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801048e:	b29b      	uxth	r3, r3
 8010490:	3301      	adds	r3, #1
 8010492:	b29b      	uxth	r3, r3
 8010494:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010498:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 801049c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80104a0:	429a      	cmp	r2, r3
 80104a2:	f77f af69 	ble.w	8010378 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 80104a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80104aa:	2a01      	cmp	r2, #1
 80104ac:	f173 0300 	sbcs.w	r3, r3, #0
 80104b0:	db3b      	blt.n	801052a <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 80104b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80104b6:	0fd9      	lsrs	r1, r3, #31
 80104b8:	2000      	movs	r0, #0
 80104ba:	60b9      	str	r1, [r7, #8]
 80104bc:	60f8      	str	r0, [r7, #12]
 80104be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80104c2:	4621      	mov	r1, r4
 80104c4:	eb11 0802 	adds.w	r8, r1, r2
 80104c8:	4629      	mov	r1, r5
 80104ca:	eb41 0903 	adc.w	r9, r1, r3
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	f04f 0300 	mov.w	r3, #0
 80104d6:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80104da:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 80104de:	ea4f 0369 	mov.w	r3, r9, asr #1
 80104e2:	4610      	mov	r0, r2
 80104e4:	4619      	mov	r1, r3
 80104e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80104ea:	1814      	adds	r4, r2, r0
 80104ec:	603c      	str	r4, [r7, #0]
 80104ee:	414b      	adcs	r3, r1
 80104f0:	607b      	str	r3, [r7, #4]
 80104f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80104f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 80104fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80104fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010502:	f7ef fe8d 	bl	8000220 <__aeabi_ldivmod>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 801050e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010512:	2b00      	cmp	r3, #0
 8010514:	da05      	bge.n	8010522 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8010516:	f04f 0200 	mov.w	r2, #0
 801051a:	f04f 0300 	mov.w	r3, #0
 801051e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8010522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010528:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801052a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 801052e:	4618      	mov	r0, r3
 8010530:	3774      	adds	r7, #116	; 0x74
 8010532:	46bd      	mov	sp, r7
 8010534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010538 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	607a      	str	r2, [r7, #4]
 8010542:	603b      	str	r3, [r7, #0]
 8010544:	4603      	mov	r3, r0
 8010546:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010548:	2300      	movs	r3, #0
 801054a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801054c:	2300      	movs	r3, #0
 801054e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010554:	7bfa      	ldrb	r2, [r7, #15]
 8010556:	4613      	mov	r3, r2
 8010558:	00db      	lsls	r3, r3, #3
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	4413      	add	r3, r2
 8010566:	3304      	adds	r3, #4
 8010568:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801056a:	22ac      	movs	r2, #172	; 0xac
 801056c:	68b9      	ldr	r1, [r7, #8]
 801056e:	6a38      	ldr	r0, [r7, #32]
 8010570:	f009 f86a 	bl	8019648 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801057a:	75fb      	strb	r3, [r7, #23]
 801057c:	e020      	b.n	80105c0 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	7dfa      	ldrb	r2, [r7, #23]
 8010584:	429a      	cmp	r2, r3
 8010586:	d304      	bcc.n	8010592 <VL53L1_f_023+0x5a>
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	791b      	ldrb	r3, [r3, #4]
 801058c:	7dfa      	ldrb	r2, [r7, #23]
 801058e:	429a      	cmp	r2, r3
 8010590:	d913      	bls.n	80105ba <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	78da      	ldrb	r2, [r3, #3]
 8010596:	7dfb      	ldrb	r3, [r7, #23]
 8010598:	fbb3 f1f2 	udiv	r1, r3, r2
 801059c:	fb01 f202 	mul.w	r2, r1, r2
 80105a0:	1a9b      	subs	r3, r3, r2
 80105a2:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 80105a4:	6a3b      	ldr	r3, [r7, #32]
 80105a6:	7a9b      	ldrb	r3, [r3, #10]
 80105a8:	7d7a      	ldrb	r2, [r7, #21]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d205      	bcs.n	80105ba <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 80105ae:	7d7a      	ldrb	r2, [r7, #21]
 80105b0:	6a3b      	ldr	r3, [r7, #32]
 80105b2:	3206      	adds	r2, #6
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	3301      	adds	r3, #1
 80105be:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 80105c0:	7dfa      	ldrb	r2, [r7, #23]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80105c8:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80105ce:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80105d0:	429a      	cmp	r2, r3
 80105d2:	dbd4      	blt.n	801057e <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80105d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 80105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e4:	b096      	sub	sp, #88	; 0x58
 80105e6:	af08      	add	r7, sp, #32
 80105e8:	4604      	mov	r4, r0
 80105ea:	4608      	mov	r0, r1
 80105ec:	4611      	mov	r1, r2
 80105ee:	461a      	mov	r2, r3
 80105f0:	4623      	mov	r3, r4
 80105f2:	73fb      	strb	r3, [r7, #15]
 80105f4:	4603      	mov	r3, r0
 80105f6:	73bb      	strb	r3, [r7, #14]
 80105f8:	460b      	mov	r3, r1
 80105fa:	737b      	strb	r3, [r7, #13]
 80105fc:	4613      	mov	r3, r2
 80105fe:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010600:	2300      	movs	r3, #0
 8010602:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8010606:	2300      	movs	r3, #0
 8010608:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 801060c:	2300      	movs	r3, #0
 801060e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801061a:	2300      	movs	r3, #0
 801061c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 801061e:	2300      	movs	r3, #0
 8010620:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8010632:	7b7b      	ldrb	r3, [r7, #13]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d106      	bne.n	8010646 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8010638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801063e:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8010640:	f06f 030e 	mvn.w	r3, #14
 8010644:	e06f      	b.n	8010726 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8010646:	7bfb      	ldrb	r3, [r7, #15]
 8010648:	7b7a      	ldrb	r2, [r7, #13]
 801064a:	fbb3 f1f2 	udiv	r1, r3, r2
 801064e:	fb01 f202 	mul.w	r2, r1, r2
 8010652:	1a9b      	subs	r3, r3, r2
 8010654:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8010658:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801065c:	7b39      	ldrb	r1, [r7, #12]
 801065e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010662:	f107 0320 	add.w	r3, r7, #32
 8010666:	9301      	str	r3, [sp, #4]
 8010668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801066c:	9300      	str	r3, [sp, #0]
 801066e:	4613      	mov	r3, r2
 8010670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010672:	f000 fddb 	bl	801122c <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 8010676:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801067a:	7b39      	ldrb	r1, [r7, #12]
 801067c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4613      	mov	r3, r2
 801068e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010690:	f000 fdcc 	bl	801122c <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010694:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00e      	beq.n	80106ba <VL53L1_f_026+0xda>
		VL53L1_f_013(
 801069c:	f107 021c 	add.w	r2, r7, #28
 80106a0:	7b39      	ldrb	r1, [r7, #12]
 80106a2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80106a6:	f107 0314 	add.w	r3, r7, #20
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	f107 0318 	add.w	r3, r7, #24
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	4613      	mov	r3, r2
 80106b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106b6:	f000 fdb9 	bl	801122c <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 80106ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106bc:	469c      	mov	ip, r3
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	469e      	mov	lr, r3
 80106c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c4:	4698      	mov	r8, r3
 80106c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c8:	4619      	mov	r1, r3
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	461c      	mov	r4, r3
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	461d      	mov	r5, r3
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	461e      	mov	r6, r3
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 80106da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 80106e0:	607b      	str	r3, [r7, #4]
 80106e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80106e8:	7bb8      	ldrb	r0, [r7, #14]
 80106ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106ec:	9207      	str	r2, [sp, #28]
 80106ee:	9306      	str	r3, [sp, #24]
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	9205      	str	r2, [sp, #20]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	9304      	str	r3, [sp, #16]
 80106f8:	9603      	str	r6, [sp, #12]
 80106fa:	9502      	str	r5, [sp, #8]
 80106fc:	9401      	str	r4, [sp, #4]
 80106fe:	9100      	str	r1, [sp, #0]
 8010700:	4643      	mov	r3, r8
 8010702:	4672      	mov	r2, lr
 8010704:	4661      	mov	r1, ip
 8010706:	f002 ff30 	bl	801356a <VL53L1_f_014>
 801070a:	4603      	mov	r3, r0
 801070c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8010710:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8010714:	f113 0f0f 	cmn.w	r3, #15
 8010718:	d103      	bne.n	8010722 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801071a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010720:	801a      	strh	r2, [r3, #0]


	return status;
 8010722:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010726:	4618      	mov	r0, r3
 8010728:	3738      	adds	r7, #56	; 0x38
 801072a:	46bd      	mov	sp, r7
 801072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010730 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8010730:	b490      	push	{r4, r7}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	4604      	mov	r4, r0
 8010738:	4608      	mov	r0, r1
 801073a:	4611      	mov	r1, r2
 801073c:	461a      	mov	r2, r3
 801073e:	4623      	mov	r3, r4
 8010740:	71fb      	strb	r3, [r7, #7]
 8010742:	4603      	mov	r3, r0
 8010744:	71bb      	strb	r3, [r7, #6]
 8010746:	460b      	mov	r3, r1
 8010748:	717b      	strb	r3, [r7, #5]
 801074a:	4613      	mov	r3, r2
 801074c:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 801074e:	2300      	movs	r3, #0
 8010750:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	79fa      	ldrb	r2, [r7, #7]
 801075a:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	2200      	movs	r2, #0
 8010760:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8010762:	69fb      	ldr	r3, [r7, #28]
 8010764:	781a      	ldrb	r2, [r3, #0]
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	785a      	ldrb	r2, [r3, #1]
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	789a      	ldrb	r2, [r3, #2]
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	78da      	ldrb	r2, [r3, #3]
 801077e:	6a3b      	ldr	r3, [r7, #32]
 8010780:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	791a      	ldrb	r2, [r3, #4]
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	795a      	ldrb	r2, [r3, #5]
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	791a      	ldrb	r2, [r3, #4]
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	b2db      	uxtb	r3, r3
 801079e:	3301      	adds	r3, #1
 80107a0:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 80107a2:	6a3b      	ldr	r3, [r7, #32]
 80107a4:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	8c1a      	ldrh	r2, [r3, #32]
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	695b      	ldr	r3, [r3, #20]
 80107bc:	b29a      	uxth	r2, r3
 80107be:	6a3b      	ldr	r3, [r7, #32]
 80107c0:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	6a3b      	ldr	r3, [r7, #32]
 80107d6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	461a      	mov	r2, r3
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	691a      	ldr	r2, [r3, #16]
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	461a      	mov	r2, r3
 80107f2:	6a3b      	ldr	r3, [r7, #32]
 80107f4:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	2213      	movs	r2, #19
 8010804:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8010808:	887b      	ldrh	r3, [r7, #2]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00a      	beq.n	8010824 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	8c1b      	ldrh	r3, [r3, #32]
 8010812:	461a      	mov	r2, r3
 8010814:	887b      	ldrh	r3, [r7, #2]
 8010816:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8010818:	429a      	cmp	r2, r3
 801081a:	d903      	bls.n	8010824 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	2206      	movs	r2, #6
 8010820:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8010824:	79bb      	ldrb	r3, [r7, #6]
 8010826:	b29b      	uxth	r3, r3
 8010828:	021b      	lsls	r3, r3, #8
 801082a:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 801082c:	6a3b      	ldr	r3, [r7, #32]
 801082e:	8a9b      	ldrh	r3, [r3, #20]
 8010830:	89fa      	ldrh	r2, [r7, #14]
 8010832:	429a      	cmp	r2, r3
 8010834:	d205      	bcs.n	8010842 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 801083a:	89fb      	ldrh	r3, [r7, #14]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	81fb      	strh	r3, [r7, #14]
 8010840:	e001      	b.n	8010846 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 8010846:	797b      	ldrb	r3, [r7, #5]
 8010848:	b29b      	uxth	r3, r3
 801084a:	021b      	lsls	r3, r3, #8
 801084c:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010854:	89bb      	ldrh	r3, [r7, #12]
 8010856:	4413      	add	r3, r2
 8010858:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801085a:	6a3b      	ldr	r3, [r7, #32]
 801085c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010860:	89fa      	ldrh	r2, [r7, #14]
 8010862:	429a      	cmp	r2, r3
 8010864:	d805      	bhi.n	8010872 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801086c:	89ba      	ldrh	r2, [r7, #12]
 801086e:	429a      	cmp	r2, r3
 8010870:	d203      	bcs.n	801087a <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	2205      	movs	r2, #5
 8010876:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801087a:	bf00      	nop
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bc90      	pop	{r4, r7}
 8010882:	4770      	bx	lr

08010884 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010886:	b08f      	sub	sp, #60	; 0x3c
 8010888:	af06      	add	r7, sp, #24
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
 8010890:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010892:	2300      	movs	r3, #0
 8010894:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801089a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801089c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80108a0:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 80108a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108a4:	f7ff f856 	bl	800f954 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 80108a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108aa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 80108ae:	22ac      	movs	r2, #172	; 0xac
 80108b0:	6839      	ldr	r1, [r7, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f008 fec8 	bl	8019648 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	781a      	ldrb	r2, [r3, #0]
 80108bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108be:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	785a      	ldrb	r2, [r3, #1]
 80108c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108c6:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	789a      	ldrb	r2, [r3, #2]
 80108cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108ce:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80108d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108d8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 80108da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108dc:	2200      	movs	r2, #0
 80108de:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 80108e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e2:	2204      	movs	r2, #4
 80108e4:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 80108e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e8:	2200      	movs	r2, #0
 80108ea:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80108ec:	2300      	movs	r3, #0
 80108ee:	77bb      	strb	r3, [r7, #30]
 80108f0:	e008      	b.n	8010904 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 80108f2:	7fbb      	ldrb	r3, [r7, #30]
 80108f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	4413      	add	r3, r2
 80108fa:	2200      	movs	r2, #0
 80108fc:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80108fe:	7fbb      	ldrb	r3, [r7, #30]
 8010900:	3301      	adds	r3, #1
 8010902:	77bb      	strb	r3, [r7, #30]
 8010904:	7fbb      	ldrb	r3, [r7, #30]
 8010906:	2b04      	cmp	r3, #4
 8010908:	d9f3      	bls.n	80108f2 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 801090a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd ff58 	bl	800e7c6 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 801091a:	461a      	mov	r2, r3
 801091c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801091e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010922:	4619      	mov	r1, r3
 8010924:	4610      	mov	r0, r2
 8010926:	f7fd ff8e 	bl	800e846 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 801092a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801092c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010930:	4618      	mov	r0, r3
 8010932:	f7fe fb66 	bl	800f002 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8010936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010938:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801093c:	4618      	mov	r0, r3
 801093e:	f7fd fffc 	bl	800e93a <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010948:	2b00      	cmp	r3, #0
 801094a:	d009      	beq.n	8010960 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 801094c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801094e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010954:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010958:	461a      	mov	r2, r3
 801095a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801095c:	f000 fdae 	bl	80114bc <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010968:	2300      	movs	r3, #0
 801096a:	77bb      	strb	r3, [r7, #30]
 801096c:	e01e      	b.n	80109ac <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 801096e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d117      	bne.n	80109a6 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8010976:	7fbb      	ldrb	r3, [r7, #30]
 8010978:	68ba      	ldr	r2, [r7, #8]
 801097a:	3304      	adds	r3, #4
 801097c:	005b      	lsls	r3, r3, #1
 801097e:	4413      	add	r3, r2
 8010980:	8898      	ldrh	r0, [r3, #4]
 8010982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010984:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010988:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801098e:	4413      	add	r3, r2
 8010990:	3304      	adds	r3, #4
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	460b      	mov	r3, r1
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	68f9      	ldr	r1, [r7, #12]
 801099e:	f7fe fb7b 	bl	800f098 <VL53L1_f_001>
 80109a2:	4603      	mov	r3, r0
 80109a4:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80109a6:	7fbb      	ldrb	r3, [r7, #30]
 80109a8:	3301      	adds	r3, #1
 80109aa:	77bb      	strb	r3, [r7, #30]
 80109ac:	7fbb      	ldrb	r3, [r7, #30]
 80109ae:	2b04      	cmp	r3, #4
 80109b0:	d9dd      	bls.n	801096e <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 80109b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d11a      	bne.n	80109f0 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 80109c2:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 80109ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80109d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109d6:	f502 7252 	add.w	r2, r2, #840	; 0x348
 80109da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109dc:	9102      	str	r1, [sp, #8]
 80109de:	9201      	str	r2, [sp, #4]
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	462b      	mov	r3, r5
 80109e4:	4622      	mov	r2, r4
 80109e6:	4631      	mov	r1, r6
 80109e8:	f7ff f82d 	bl	800fa46 <VL53L1_f_018>
 80109ec:	4603      	mov	r3, r0
 80109ee:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 80109f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d104      	bne.n	8010a02 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 80109f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109fa:	f7ff f954 	bl	800fca6 <VL53L1_f_019>
 80109fe:	4603      	mov	r3, r0
 8010a00:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d104      	bne.n	8010a14 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8010a0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a0c:	f7ff f999 	bl	800fd42 <VL53L1_f_020>
 8010a10:	4603      	mov	r3, r0
 8010a12:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d104      	bne.n	8010a26 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010a1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a1e:	f7ff fa0e 	bl	800fe3e <VL53L1_f_021>
 8010a22:	4603      	mov	r3, r0
 8010a24:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010a26:	2300      	movs	r3, #0
 8010a28:	77bb      	strb	r3, [r7, #30]
 8010a2a:	e0a6      	b.n	8010b7a <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010a2c:	7fba      	ldrb	r2, [r7, #30]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	00db      	lsls	r3, r3, #3
 8010a32:	4413      	add	r3, r2
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a3c:	4413      	add	r3, r2
 8010a3e:	3304      	adds	r3, #4
 8010a40:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8010a42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d109      	bne.n	8010a5e <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a50:	7fbb      	ldrb	r3, [r7, #30]
 8010a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fb48 	bl	80100ea <VL53L1_f_022>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8010a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d110      	bne.n	8010a88 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8010a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a68:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a74:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010a78:	7fb8      	ldrb	r0, [r7, #30]
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a80:	f7ff fd5a 	bl	8010538 <VL53L1_f_023>
 8010a84:	4603      	mov	r3, r0
 8010a86:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10d      	bne.n	8010aac <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a92:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a98:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010a9c:	7fb8      	ldrb	r0, [r7, #30]
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010aa4:	f7ff fd48 	bl	8010538 <VL53L1_f_023>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010aac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10d      	bne.n	8010ad0 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab6:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010abc:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010ac0:	7fb8      	ldrb	r0, [r7, #30]
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ac8:	f7ff fd36 	bl	8010538 <VL53L1_f_023>
 8010acc:	4603      	mov	r3, r0
 8010ace:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010ad0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d109      	bne.n	8010aec <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ada:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010ade:	7fb8      	ldrb	r0, [r7, #30]
 8010ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ae4:	f000 f8dd 	bl	8010ca2 <VL53L1_f_034>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010aec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d108      	bne.n	8010b06 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	8a19      	ldrh	r1, [r3, #16]
 8010af8:	7fb8      	ldrb	r0, [r7, #30]
 8010afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010afe:	f000 f95c 	bl	8010dba <VL53L1_f_035>
 8010b02:	4603      	mov	r3, r0
 8010b04:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8010b06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d124      	bne.n	8010b58 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	789d      	ldrb	r5, [r3, #2]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	7e1e      	ldrb	r6, [r3, #24]
 8010b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b18:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b2a:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b30:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b36:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8010b3a:	697c      	ldr	r4, [r7, #20]
 8010b3c:	3420      	adds	r4, #32
 8010b3e:	9404      	str	r4, [sp, #16]
 8010b40:	9003      	str	r0, [sp, #12]
 8010b42:	9102      	str	r1, [sp, #8]
 8010b44:	9201      	str	r2, [sp, #4]
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	4673      	mov	r3, lr
 8010b4a:	4662      	mov	r2, ip
 8010b4c:	4631      	mov	r1, r6
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f7ff fd46 	bl	80105e0 <VL53L1_f_026>
 8010b54:	4603      	mov	r3, r0
 8010b56:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8010b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d109      	bne.n	8010b74 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b62:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8010b66:	7fb8      	ldrb	r0, [r7, #30]
 8010b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b6a:	2101      	movs	r1, #1
 8010b6c:	f7ff fb10 	bl	8010190 <VL53L1_f_027>
 8010b70:	4603      	mov	r3, r0
 8010b72:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010b74:	7fbb      	ldrb	r3, [r7, #30]
 8010b76:	3301      	adds	r3, #1
 8010b78:	77bb      	strb	r3, [r7, #30]
 8010b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b7c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010b80:	7fba      	ldrb	r2, [r7, #30]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	f4ff af52 	bcc.w	8010a2c <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d107      	bne.n	8010ba0 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	785b      	ldrb	r3, [r3, #1]
 8010b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7ff fa23 	bl	800ffe2 <VL53L1_f_028>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	77bb      	strb	r3, [r7, #30]
 8010ba4:	e071      	b.n	8010c8a <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010ba6:	7fba      	ldrb	r2, [r7, #30]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	4413      	add	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bb6:	4413      	add	r3, r2
 8010bb8:	3304      	adds	r3, #4
 8010bba:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bbe:	7c9a      	ldrb	r2, [r3, #18]
 8010bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bc2:	7c5b      	ldrb	r3, [r3, #17]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d25c      	bcs.n	8010c82 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	dd57      	ble.n	8010c84 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010bd8:	2bff      	cmp	r3, #255	; 0xff
 8010bda:	d053      	beq.n	8010c84 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bde:	7c9b      	ldrb	r3, [r3, #18]
 8010be0:	461a      	mov	r2, r3
			prange_data =
 8010be2:	234c      	movs	r3, #76	; 0x4c
 8010be4:	fb02 f303 	mul.w	r3, r2, r3
 8010be8:	3310      	adds	r3, #16
 8010bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bec:	4413      	add	r3, r2
 8010bee:	3304      	adds	r3, #4
 8010bf0:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d115      	bne.n	8010c26 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bfc:	7c98      	ldrb	r0, [r3, #18]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	8b5d      	ldrh	r5, [r3, #26]
 8010c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010c14:	693a      	ldr	r2, [r7, #16]
 8010c16:	9202      	str	r2, [sp, #8]
 8010c18:	697a      	ldr	r2, [r7, #20]
 8010c1a:	9201      	str	r2, [sp, #4]
 8010c1c:	9300      	str	r3, [sp, #0]
 8010c1e:	462b      	mov	r3, r5
 8010c20:	4622      	mov	r2, r4
 8010c22:	f7ff fd85 	bl	8010730 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010c26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d115      	bne.n	8010c5a <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010c46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010c4a:	9301      	str	r3, [sp, #4]
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	4623      	mov	r3, r4
 8010c52:	f000 fb44 	bl	80112de <VL53L1_f_011>
 8010c56:	4603      	mov	r3, r0
 8010c58:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d108      	bne.n	8010c74 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8bd8      	ldrh	r0, [r3, #30]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010c6c:	693a      	ldr	r2, [r7, #16]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	f000 fbda 	bl	8011428 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c76:	7c9b      	ldrb	r3, [r3, #18]
 8010c78:	3301      	adds	r3, #1
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c7e:	749a      	strb	r2, [r3, #18]
 8010c80:	e000      	b.n	8010c84 <VL53L1_f_033+0x400>
			continue;
 8010c82:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010c84:	7fbb      	ldrb	r3, [r7, #30]
 8010c86:	3301      	adds	r3, #1
 8010c88:	77bb      	strb	r3, [r7, #30]
 8010c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010c90:	7fba      	ldrb	r2, [r7, #30]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d387      	bcc.n	8010ba6 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010c96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3724      	adds	r7, #36	; 0x24
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ca2 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b08c      	sub	sp, #48	; 0x30
 8010ca6:	af02      	add	r7, sp, #8
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	603b      	str	r3, [r7, #0]
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010cb8:	7bfa      	ldrb	r2, [r7, #15]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	00db      	lsls	r3, r3, #3
 8010cbe:	4413      	add	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	4413      	add	r3, r2
 8010cca:	3304      	adds	r3, #4
 8010ccc:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	785a      	ldrb	r2, [r3, #1]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	781a      	ldrb	r2, [r3, #0]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	789a      	ldrb	r2, [r3, #2]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d04:	e04d      	b.n	8010da2 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	78da      	ldrb	r2, [r3, #3]
 8010d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d12:	fb01 f202 	mul.w	r2, r1, r2
 8010d16:	1a9b      	subs	r3, r3, r2
 8010d18:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010d1a:	6a3b      	ldr	r3, [r7, #32]
 8010d1c:	7999      	ldrb	r1, [r3, #6]
 8010d1e:	f107 0218 	add.w	r2, r7, #24
 8010d22:	7ff8      	ldrb	r0, [r7, #31]
 8010d24:	f107 0310 	add.w	r3, r7, #16
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	f107 0314 	add.w	r3, r7, #20
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4613      	mov	r3, r2
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	f000 fa7a 	bl	801122c <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010d38:	7ffb      	ldrb	r3, [r7, #31]
 8010d3a:	69ba      	ldr	r2, [r7, #24]
 8010d3c:	6839      	ldr	r1, [r7, #0]
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	440b      	add	r3, r1
 8010d42:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010d44:	7ffb      	ldrb	r3, [r7, #31]
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	3318      	adds	r3, #24
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	440b      	add	r3, r1
 8010d50:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010d52:	7ffb      	ldrb	r3, [r7, #31]
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	3330      	adds	r3, #48	; 0x30
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	440b      	add	r3, r1
 8010d5e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010d60:	69ba      	ldr	r2, [r7, #24]
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010d6e:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010d70:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	3348      	adds	r3, #72	; 0x48
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	440b      	add	r3, r1
 8010d7a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010d7c:	697a      	ldr	r2, [r7, #20]
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	689a      	ldr	r2, [r3, #8]
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010d8a:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010d8c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010d8e:	6839      	ldr	r1, [r7, #0]
 8010d90:	3360      	adds	r3, #96	; 0x60
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	440b      	add	r3, r1
 8010d96:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	791b      	ldrb	r3, [r3, #4]
 8010da6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d9ab      	bls.n	8010d06 <VL53L1_f_034+0x64>
	}

	return status;
 8010dae:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3728      	adds	r7, #40	; 0x28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}

08010dba <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dbc:	b08f      	sub	sp, #60	; 0x3c
 8010dbe:	af06      	add	r7, sp, #24
 8010dc0:	60ba      	str	r2, [r7, #8]
 8010dc2:	607b      	str	r3, [r7, #4]
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
 8010dc8:	460b      	mov	r3, r1
 8010dca:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010dd4:	7bfa      	ldrb	r2, [r7, #15]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	00db      	lsls	r3, r3, #3
 8010dda:	4413      	add	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	4413      	add	r3, r2
 8010de6:	3304      	adds	r3, #4
 8010de8:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	77fb      	strb	r3, [r7, #31]
 8010dfc:	e0b9      	b.n	8010f72 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	78da      	ldrb	r2, [r3, #3]
 8010e02:	7ffb      	ldrb	r3, [r7, #31]
 8010e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e08:	fb01 f202 	mul.w	r2, r1, r2
 8010e0c:	1a9b      	subs	r3, r3, r2
 8010e0e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010e10:	7ffb      	ldrb	r3, [r7, #31]
 8010e12:	3301      	adds	r3, #1
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	78d2      	ldrb	r2, [r2, #3]
 8010e18:	fb93 f1f2 	sdiv	r1, r3, r2
 8010e1c:	fb01 f202 	mul.w	r2, r1, r2
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	789b      	ldrb	r3, [r3, #2]
 8010e28:	7dfa      	ldrb	r2, [r7, #23]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	f080 809e 	bcs.w	8010f6c <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010e34:	7dba      	ldrb	r2, [r7, #22]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	f080 8098 	bcs.w	8010f6c <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	68ba      	ldr	r2, [r7, #8]
 8010e40:	3348      	adds	r3, #72	; 0x48
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	4413      	add	r3, r2
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10e      	bne.n	8010e6a <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010e4c:	7dfb      	ldrb	r3, [r7, #23]
 8010e4e:	68ba      	ldr	r2, [r7, #8]
 8010e50:	3360      	adds	r3, #96	; 0x60
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d106      	bne.n	8010e6a <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010e5c:	7dfb      	ldrb	r3, [r7, #23]
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	4413      	add	r3, r2
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010e68:	e043      	b.n	8010ef2 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010e6a:	7dfb      	ldrb	r3, [r7, #23]
 8010e6c:	68ba      	ldr	r2, [r7, #8]
 8010e6e:	3348      	adds	r3, #72	; 0x48
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	4413      	add	r3, r2
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	db0e      	blt.n	8010e98 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	3360      	adds	r3, #96	; 0x60
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	db06      	blt.n	8010e98 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	4413      	add	r3, r2
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010e96:	e02c      	b.n	8010ef2 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010e98:	7dfb      	ldrb	r3, [r7, #23]
 8010e9a:	68ba      	ldr	r2, [r7, #8]
 8010e9c:	3348      	adds	r3, #72	; 0x48
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	da1e      	bge.n	8010ee6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010ea8:	7dfb      	ldrb	r3, [r7, #23]
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	3360      	adds	r3, #96	; 0x60
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	db16      	blt.n	8010ee6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010eb8:	7dbb      	ldrb	r3, [r7, #22]
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	3348      	adds	r3, #72	; 0x48
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4413      	add	r3, r2
 8010ec2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	db0e      	blt.n	8010ee6 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8010ec8:	7dbb      	ldrb	r3, [r7, #22]
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	3360      	adds	r3, #96	; 0x60
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4413      	add	r3, r2
 8010ed2:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	da06      	bge.n	8010ee6 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	68ba      	ldr	r2, [r7, #8]
 8010edc:	4413      	add	r3, r2
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010ee4:	e005      	b.n	8010ef2 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	4413      	add	r3, r2
 8010eec:	2200      	movs	r2, #0
 8010eee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010ef2:	7dfb      	ldrb	r3, [r7, #23]
 8010ef4:	68ba      	ldr	r2, [r7, #8]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d035      	beq.n	8010f6c <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	7ffa      	ldrb	r2, [r7, #31]
 8010f04:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8010f06:	7dfb      	ldrb	r3, [r7, #23]
 8010f08:	68ba      	ldr	r2, [r7, #8]
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4413      	add	r3, r2
 8010f0e:	685c      	ldr	r4, [r3, #4]
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	3318      	adds	r3, #24
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	4413      	add	r3, r2
 8010f1a:	685d      	ldr	r5, [r3, #4]
 8010f1c:	7dfb      	ldrb	r3, [r7, #23]
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	3330      	adds	r3, #48	; 0x30
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	685e      	ldr	r6, [r3, #4]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	78d2      	ldrb	r2, [r2, #3]
 8010f30:	69b9      	ldr	r1, [r7, #24]
 8010f32:	3118      	adds	r1, #24
 8010f34:	7ff8      	ldrb	r0, [r7, #31]
 8010f36:	9105      	str	r1, [sp, #20]
 8010f38:	9204      	str	r2, [sp, #16]
 8010f3a:	9303      	str	r3, [sp, #12]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9302      	str	r3, [sp, #8]
 8010f40:	2300      	movs	r3, #0
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	2300      	movs	r3, #0
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	4633      	mov	r3, r6
 8010f4a:	462a      	mov	r2, r5
 8010f4c:	4621      	mov	r1, r4
 8010f4e:	f000 f81c 	bl	8010f8a <VL53L1_f_036>
 8010f52:	4603      	mov	r3, r0
 8010f54:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8010f56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f5a:	f113 0f0f 	cmn.w	r3, #15
 8010f5e:	d105      	bne.n	8010f6c <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	4413      	add	r3, r2
 8010f66:	2200      	movs	r2, #0
 8010f68:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010f6c:	7ffb      	ldrb	r3, [r7, #31]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	77fb      	strb	r3, [r7, #31]
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	791b      	ldrb	r3, [r3, #4]
 8010f76:	7ffa      	ldrb	r2, [r7, #31]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	f4ff af40 	bcc.w	8010dfe <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010f7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3724      	adds	r7, #36	; 0x24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f8a <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010f8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f8e:	b0b2      	sub	sp, #200	; 0xc8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010f96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010fa4:	23f1      	movs	r3, #241	; 0xf1
 8010fa6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fae:	f04f 0300 	mov.w	r3, #0
 8010fb2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010fb6:	f04f 0200 	mov.w	r2, #0
 8010fba:	f04f 0300 	mov.w	r3, #0
 8010fbe:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010fc2:	f04f 0200 	mov.w	r2, #0
 8010fc6:	f04f 0300 	mov.w	r3, #0
 8010fca:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010fd2:	17da      	asrs	r2, r3, #31
 8010fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010fdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fe0:	17da      	asrs	r2, r3, #31
 8010fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010fe6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	ebb3 0802 	subs.w	r8, r3, r2
 8010ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ffc:	460a      	mov	r2, r1
 8010ffe:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8011002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011006:	17da      	asrs	r2, r3, #31
 8011008:	67bb      	str	r3, [r7, #120]	; 0x78
 801100a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801100c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8011010:	460b      	mov	r3, r1
 8011012:	ebb8 0a03 	subs.w	sl, r8, r3
 8011016:	4613      	mov	r3, r2
 8011018:	eb69 0b03 	sbc.w	fp, r9, r3
 801101c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011020:	17da      	asrs	r2, r3, #31
 8011022:	673b      	str	r3, [r7, #112]	; 0x70
 8011024:	677a      	str	r2, [r7, #116]	; 0x74
 8011026:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801102a:	460b      	mov	r3, r1
 801102c:	ebba 0403 	subs.w	r4, sl, r3
 8011030:	4613      	mov	r3, r2
 8011032:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011036:	f04f 0200 	mov.w	r2, #0
 801103a:	f04f 0300 	mov.w	r3, #0
 801103e:	032b      	lsls	r3, r5, #12
 8011040:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8011044:	0322      	lsls	r2, r4, #12
 8011046:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801104a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801104e:	17da      	asrs	r2, r3, #31
 8011050:	66bb      	str	r3, [r7, #104]	; 0x68
 8011052:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011054:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011058:	17da      	asrs	r2, r3, #31
 801105a:	663b      	str	r3, [r7, #96]	; 0x60
 801105c:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801105e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011062:	4623      	mov	r3, r4
 8011064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8011068:	4602      	mov	r2, r0
 801106a:	1a9b      	subs	r3, r3, r2
 801106c:	65bb      	str	r3, [r7, #88]	; 0x58
 801106e:	462b      	mov	r3, r5
 8011070:	460a      	mov	r2, r1
 8011072:	eb63 0302 	sbc.w	r3, r3, r2
 8011076:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801107c:	17da      	asrs	r2, r3, #31
 801107e:	653b      	str	r3, [r7, #80]	; 0x50
 8011080:	657a      	str	r2, [r7, #84]	; 0x54
 8011082:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011086:	4623      	mov	r3, r4
 8011088:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801108c:	4602      	mov	r2, r0
 801108e:	1a9b      	subs	r3, r3, r2
 8011090:	64bb      	str	r3, [r7, #72]	; 0x48
 8011092:	462b      	mov	r3, r5
 8011094:	460a      	mov	r2, r1
 8011096:	eb63 0302 	sbc.w	r3, r3, r2
 801109a:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801109c:	f04f 0200 	mov.w	r2, #0
 80110a0:	f04f 0300 	mov.w	r3, #0
 80110a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80110a8:	4629      	mov	r1, r5
 80110aa:	030b      	lsls	r3, r1, #12
 80110ac:	4621      	mov	r1, r4
 80110ae:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80110b2:	4621      	mov	r1, r4
 80110b4:	030a      	lsls	r2, r1, #12
 80110b6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 80110ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80110be:	4313      	orrs	r3, r2
 80110c0:	f000 80a8 	beq.w	8011214 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 80110c4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80110c8:	f04f 0000 	mov.w	r0, #0
 80110cc:	f04f 0100 	mov.w	r1, #0
 80110d0:	0319      	lsls	r1, r3, #12
 80110d2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80110d6:	0310      	lsls	r0, r2, #12
 80110d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80110dc:	1814      	adds	r4, r2, r0
 80110de:	633c      	str	r4, [r7, #48]	; 0x30
 80110e0:	414b      	adcs	r3, r1
 80110e2:	637b      	str	r3, [r7, #52]	; 0x34
 80110e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80110e8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 80110ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80110f0:	1891      	adds	r1, r2, r2
 80110f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80110f4:	415b      	adcs	r3, r3
 80110f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80110fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011100:	f7ef f88e 	bl	8000220 <__aeabi_ldivmod>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 801110c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011110:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8011114:	6239      	str	r1, [r7, #32]
 8011116:	f143 0300 	adc.w	r3, r3, #0
 801111a:	627b      	str	r3, [r7, #36]	; 0x24
 801111c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011120:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8011124:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011128:	2200      	movs	r2, #0
 801112a:	643b      	str	r3, [r7, #64]	; 0x40
 801112c:	647a      	str	r2, [r7, #68]	; 0x44
 801112e:	f04f 0200 	mov.w	r2, #0
 8011132:	f04f 0300 	mov.w	r3, #0
 8011136:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801113a:	4629      	mov	r1, r5
 801113c:	030b      	lsls	r3, r1, #12
 801113e:	4621      	mov	r1, r4
 8011140:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011144:	4621      	mov	r1, r4
 8011146:	030a      	lsls	r2, r1, #12
 8011148:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801114c:	1884      	adds	r4, r0, r2
 801114e:	61bc      	str	r4, [r7, #24]
 8011150:	eb41 0303 	adc.w	r3, r1, r3
 8011154:	61fb      	str	r3, [r7, #28]
 8011156:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801115a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 801115e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011162:	1c51      	adds	r1, r2, #1
 8011164:	63b9      	str	r1, [r7, #56]	; 0x38
 8011166:	f143 0300 	adc.w	r3, r3, #0
 801116a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801116c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011170:	460b      	mov	r3, r1
 8011172:	0fdb      	lsrs	r3, r3, #31
 8011174:	2200      	movs	r2, #0
 8011176:	613b      	str	r3, [r7, #16]
 8011178:	617a      	str	r2, [r7, #20]
 801117a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801117e:	4623      	mov	r3, r4
 8011180:	4602      	mov	r2, r0
 8011182:	189b      	adds	r3, r3, r2
 8011184:	60bb      	str	r3, [r7, #8]
 8011186:	460b      	mov	r3, r1
 8011188:	462a      	mov	r2, r5
 801118a:	eb42 0303 	adc.w	r3, r2, r3
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	f04f 0200 	mov.w	r2, #0
 8011194:	f04f 0300 	mov.w	r3, #0
 8011198:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801119c:	4621      	mov	r1, r4
 801119e:	084a      	lsrs	r2, r1, #1
 80111a0:	4629      	mov	r1, r5
 80111a2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80111a6:	4629      	mov	r1, r5
 80111a8:	104b      	asrs	r3, r1, #1
 80111aa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 80111ae:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	da05      	bge.n	80111c2 <VL53L1_f_036+0x238>
			mean_phase = 0;
 80111b6:	f04f 0200 	mov.w	r2, #0
 80111ba:	f04f 0300 	mov.w	r3, #0
 80111be:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 80111c2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80111c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80111ca:	f173 0300 	sbcs.w	r3, r3, #0
 80111ce:	db05      	blt.n	80111dc <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 80111d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111d4:	f04f 0300 	mov.w	r3, #0
 80111d8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 80111dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 80111e4:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 80111e8:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 80111ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80111ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80111f2:	fb01 f202 	mul.w	r2, r1, r2
 80111f6:	1a9b      	subs	r3, r3, r2
 80111f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 80111fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011200:	17da      	asrs	r2, r3, #31
 8011202:	603b      	str	r3, [r7, #0]
 8011204:	607a      	str	r2, [r7, #4]
 8011206:	e9d7 3400 	ldrd	r3, r4, [r7]
 801120a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 801120e:	2300      	movs	r3, #0
 8011210:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8011214:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801121c:	601a      	str	r2, [r3, #0]

	return status;
 801121e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8011222:	4618      	mov	r0, r3
 8011224:	37c8      	adds	r7, #200	; 0xc8
 8011226:	46bd      	mov	sp, r7
 8011228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801122c <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 801122c:	b480      	push	{r7}
 801122e:	b087      	sub	sp, #28
 8011230:	af00      	add	r7, sp, #0
 8011232:	60ba      	str	r2, [r7, #8]
 8011234:	607b      	str	r3, [r7, #4]
 8011236:	4603      	mov	r3, r0
 8011238:	73fb      	strb	r3, [r7, #15]
 801123a:	460b      	mov	r3, r1
 801123c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8011242:	2300      	movs	r3, #0
 8011244:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 801124c:	7bfa      	ldrb	r2, [r7, #15]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	3206      	adds	r2, #6
 8011252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	2200      	movs	r2, #0
 801125e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011260:	2300      	movs	r3, #0
 8011262:	75fb      	strb	r3, [r7, #23]
 8011264:	e02f      	b.n	80112c6 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011266:	7bfa      	ldrb	r2, [r7, #15]
 8011268:	7dfb      	ldrb	r3, [r7, #23]
 801126a:	4413      	add	r3, r2
 801126c:	68ba      	ldr	r2, [r7, #8]
 801126e:	7a92      	ldrb	r2, [r2, #10]
 8011270:	441a      	add	r2, r3
 8011272:	7bbb      	ldrb	r3, [r7, #14]
 8011274:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	7a92      	ldrb	r2, [r2, #10]
 801127a:	fb93 f1f2 	sdiv	r1, r3, r2
 801127e:	fb01 f202 	mul.w	r2, r1, r2
 8011282:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011284:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8011286:	7dfa      	ldrb	r2, [r7, #23]
 8011288:	7bbb      	ldrb	r3, [r7, #14]
 801128a:	429a      	cmp	r2, r3
 801128c:	d20a      	bcs.n	80112a4 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	7db9      	ldrb	r1, [r7, #22]
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	3106      	adds	r1, #6
 8011298:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801129c:	441a      	add	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	e00d      	b.n	80112c0 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 80112a4:	7dfa      	ldrb	r2, [r7, #23]
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d909      	bls.n	80112c0 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	7db9      	ldrb	r1, [r7, #22]
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	3106      	adds	r1, #6
 80112b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112ba:	441a      	add	r2, r3
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80112c0:	7dfb      	ldrb	r3, [r7, #23]
 80112c2:	3301      	adds	r3, #1
 80112c4:	75fb      	strb	r3, [r7, #23]
 80112c6:	7bbb      	ldrb	r3, [r7, #14]
 80112c8:	005a      	lsls	r2, r3, #1
 80112ca:	7dfb      	ldrb	r3, [r7, #23]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	daca      	bge.n	8011266 <VL53L1_f_013+0x3a>
	}
}
 80112d0:	bf00      	nop
 80112d2:	bf00      	nop
 80112d4:	371c      	adds	r7, #28
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr

080112de <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b088      	sub	sp, #32
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	60ba      	str	r2, [r7, #8]
 80112e6:	461a      	mov	r2, r3
 80112e8:	4603      	mov	r3, r0
 80112ea:	81fb      	strh	r3, [r7, #14]
 80112ec:	460b      	mov	r3, r1
 80112ee:	81bb      	strh	r3, [r7, #12]
 80112f0:	4613      	mov	r3, r2
 80112f2:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 80112f4:	2300      	movs	r3, #0
 80112f6:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 80112fc:	2300      	movs	r3, #0
 80112fe:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8011300:	2300      	movs	r3, #0
 8011302:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8011304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011306:	89fa      	ldrh	r2, [r7, #14]
 8011308:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130c:	89ba      	ldrh	r2, [r7, #12]
 801130e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8011310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	88fa      	ldrh	r2, [r7, #6]
 801131a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 801131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131e:	8a5b      	ldrh	r3, [r3, #18]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011324:	23f1      	movs	r3, #241	; 0xf1
 8011326:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8011328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011330:	23f1      	movs	r3, #241	; 0xf1
 8011332:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8011334:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d16f      	bne.n	801141c <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	8a5b      	ldrh	r3, [r3, #18]
 8011340:	4618      	mov	r0, r3
 8011342:	f7fd f903 	bl	800e54c <VL53L1_calc_pll_period_us>
 8011346:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8011348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134a:	699b      	ldr	r3, [r3, #24]
 801134c:	3301      	adds	r3, #1
 801134e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8011354:	4619      	mov	r1, r3
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801135c:	6978      	ldr	r0, [r7, #20]
 801135e:	f7fd f90c 	bl	800e57a <VL53L1_duration_maths>
 8011362:	4602      	mov	r2, r0
 8011364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011366:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8011368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 801136c:	0119      	lsls	r1, r3, #4
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011374:	6978      	ldr	r0, [r7, #20]
 8011376:	f7fd f900 	bl	800e57a <VL53L1_duration_maths>
 801137a:	4602      	mov	r2, r0
 801137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137e:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	69db      	ldr	r3, [r3, #28]
 8011388:	4619      	mov	r1, r3
 801138a:	4610      	mov	r0, r2
 801138c:	f7fd fb6d 	bl	800ea6a <VL53L1_rate_maths>
 8011390:	4603      	mov	r3, r0
 8011392:	461a      	mov	r2, r3
 8011394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011396:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 801139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139e:	6a1b      	ldr	r3, [r3, #32]
 80113a0:	4619      	mov	r1, r3
 80113a2:	4610      	mov	r0, r2
 80113a4:	f7fd fb61 	bl	800ea6a <VL53L1_rate_maths>
 80113a8:	4603      	mov	r3, r0
 80113aa:	461a      	mov	r2, r3
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 80113b4:	461a      	mov	r2, r3
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	6a1b      	ldr	r3, [r3, #32]
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7fd fb54 	bl	800ea6a <VL53L1_rate_maths>
 80113c2:	4603      	mov	r3, r0
 80113c4:	461a      	mov	r2, r3
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80113ce:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 80113d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 80113d4:	4413      	add	r3, r2
 80113d6:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 80113d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d905      	bls.n	80113ec <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 80113e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80113e4:	69ba      	ldr	r2, [r7, #24]
 80113e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80113ea:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 80113ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ee:	8ada      	ldrh	r2, [r3, #22]
 80113f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113f4:	69b9      	ldr	r1, [r7, #24]
 80113f6:	2006      	movs	r0, #6
 80113f8:	f7fd fb7c 	bl	800eaf4 <VL53L1_rate_per_spad_maths>
 80113fc:	4603      	mov	r3, r0
 80113fe:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	8ad9      	ldrh	r1, [r3, #22]
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	69db      	ldr	r3, [r3, #28]
 8011410:	461a      	mov	r2, r3
 8011412:	f7fd f90b 	bl	800e62c <VL53L1_events_per_spad_maths>
 8011416:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 801141c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3720      	adds	r7, #32
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8011428:	b590      	push	{r4, r7, lr}
 801142a:	b085      	sub	sp, #20
 801142c:	af02      	add	r7, sp, #8
 801142e:	4603      	mov	r3, r0
 8011430:	603a      	str	r2, [r7, #0]
 8011432:	80fb      	strh	r3, [r7, #6]
 8011434:	460b      	mov	r3, r1
 8011436:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	8a58      	ldrh	r0, [r3, #18]
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	8a9c      	ldrh	r4, [r3, #20]
 8011444:	88fb      	ldrh	r3, [r7, #6]
 8011446:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801144a:	9201      	str	r2, [sp, #4]
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	2300      	movs	r3, #0
 8011450:	4622      	mov	r2, r4
 8011452:	f7fd fb83 	bl	800eb5c <VL53L1_range_maths>
 8011456:	4603      	mov	r3, r0
 8011458:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	8a58      	ldrh	r0, [r3, #18]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	8a9c      	ldrh	r4, [r3, #20]
 801146e:	88fb      	ldrh	r3, [r7, #6]
 8011470:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011474:	9201      	str	r2, [sp, #4]
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	2300      	movs	r3, #0
 801147a:	4622      	mov	r2, r4
 801147c:	f7fd fb6e 	bl	800eb5c <VL53L1_range_maths>
 8011480:	4603      	mov	r3, r0
 8011482:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	8a58      	ldrh	r0, [r3, #18]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	8a9c      	ldrh	r4, [r3, #20]
 8011498:	88fb      	ldrh	r3, [r7, #6]
 801149a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801149e:	9201      	str	r2, [sp, #4]
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	2300      	movs	r3, #0
 80114a4:	4622      	mov	r2, r4
 80114a6:	f7fd fb59 	bl	800eb5c <VL53L1_range_maths>
 80114aa:	4603      	mov	r3, r0
 80114ac:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 80114b4:	bf00      	nop
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd90      	pop	{r4, r7, pc}

080114bc <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b086      	sub	sp, #24
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 80114cc:	2300      	movs	r3, #0
 80114ce:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	757b      	strb	r3, [r7, #21]





	memcpy(
 80114d8:	22ac      	movs	r2, #172	; 0xac
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f008 f8b3 	bl	8019648 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80114e2:	2300      	movs	r3, #0
 80114e4:	75fb      	strb	r3, [r7, #23]
 80114e6:	e008      	b.n	80114fa <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 80114e8:	7dfa      	ldrb	r2, [r7, #23]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	3206      	adds	r2, #6
 80114ee:	2100      	movs	r1, #0
 80114f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80114f4:	7dfb      	ldrb	r3, [r7, #23]
 80114f6:	3301      	adds	r3, #1
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7a5b      	ldrb	r3, [r3, #9]
 80114fe:	7dfa      	ldrb	r2, [r7, #23]
 8011500:	429a      	cmp	r2, r3
 8011502:	d3f1      	bcc.n	80114e8 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8011504:	68f9      	ldr	r1, [r7, #12]
 8011506:	68b8      	ldr	r0, [r7, #8]
 8011508:	f000 f878 	bl	80115fc <VL53L1_f_038>
 801150c:	4603      	mov	r3, r0
 801150e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	7a9a      	ldrb	r2, [r3, #10]
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	7a9b      	ldrb	r3, [r3, #10]
 8011518:	429a      	cmp	r2, r3
 801151a:	d203      	bcs.n	8011524 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	7a9b      	ldrb	r3, [r3, #10]
 8011520:	75bb      	strb	r3, [r7, #22]
 8011522:	e002      	b.n	801152a <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	7a9b      	ldrb	r3, [r3, #10]
 8011528:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801152a:	2300      	movs	r3, #0
 801152c:	75fb      	strb	r3, [r7, #23]
 801152e:	e05c      	b.n	80115ea <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8011530:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	db0f      	blt.n	8011558 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8011538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801153c:	461a      	mov	r2, r3
 801153e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011542:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	7a92      	ldrb	r2, [r2, #10]
 8011548:	b252      	sxtb	r2, r2
 801154a:	fb93 f1f2 	sdiv	r1, r3, r2
 801154e:	fb01 f202 	mul.w	r2, r1, r2
 8011552:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8011554:	757b      	strb	r3, [r7, #21]
 8011556:	e013      	b.n	8011580 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	7a9b      	ldrb	r3, [r3, #10]
 801155c:	b25b      	sxtb	r3, r3
 801155e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8011560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011564:	4619      	mov	r1, r3
 8011566:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801156a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801156c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	7a92      	ldrb	r2, [r2, #10]
 8011572:	b252      	sxtb	r2, r2
 8011574:	fb93 f1f2 	sdiv	r1, r3, r2
 8011578:	fb01 f202 	mul.w	r2, r1, r2
 801157c:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801157e:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011580:	7d7b      	ldrb	r3, [r7, #21]
 8011582:	461a      	mov	r2, r3
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	3206      	adds	r2, #6
 8011588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 801158c:	7df9      	ldrb	r1, [r7, #23]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	3106      	adds	r1, #6
 8011592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8011596:	429a      	cmp	r2, r3
 8011598:	dd12      	ble.n	80115c0 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801159a:	7d7b      	ldrb	r3, [r7, #21]
 801159c:	461a      	mov	r2, r3
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	3206      	adds	r2, #6
 80115a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 80115a6:	7df9      	ldrb	r1, [r7, #23]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	3106      	adds	r1, #6
 80115ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 80115b0:	7d79      	ldrb	r1, [r7, #21]
 80115b2:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 80115b4:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	1d82      	adds	r2, r0, #6
 80115ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80115be:	e006      	b.n	80115ce <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80115c0:	7d7b      	ldrb	r3, [r7, #21]
 80115c2:	461a      	mov	r2, r3
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	3206      	adds	r2, #6
 80115c8:	2100      	movs	r1, #0
 80115ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 80115ce:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80115d0:	7d7b      	ldrb	r3, [r7, #21]
 80115d2:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3206      	adds	r2, #6
 80115d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	1d82      	adds	r2, r0, #6
 80115e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
 80115e6:	3301      	adds	r3, #1
 80115e8:	75fb      	strb	r3, [r7, #23]
 80115ea:	7dfa      	ldrb	r2, [r7, #23]
 80115ec:	7dbb      	ldrb	r3, [r7, #22]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d39e      	bcc.n	8011530 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 80115f2:	bf00      	nop
 80115f4:	bf00      	nop
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 801160e:	2300      	movs	r3, #0
 8011610:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801161c:	4618      	mov	r0, r3
 801161e:	f7fd fb85 	bl	800ed2c <VL53L1_decode_vcsel_period>
 8011622:	4603      	mov	r3, r0
	period = 2048 *
 8011624:	02db      	lsls	r3, r3, #11
 8011626:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00a      	beq.n	8011644 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8011634:	68ba      	ldr	r2, [r7, #8]
 8011636:	fbb3 f2f2 	udiv	r2, r3, r2
 801163a:	68b9      	ldr	r1, [r7, #8]
 801163c:	fb01 f202 	mul.w	r2, r1, r2
 8011640:	1a9b      	subs	r3, r3, r2
 8011642:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801164a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 801164c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	dd09      	ble.n	801166c <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801165e:	2b00      	cmp	r3, #0
 8011660:	da01      	bge.n	8011666 <VL53L1_f_038+0x6a>
 8011662:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011666:	12db      	asrs	r3, r3, #11
 8011668:	75fb      	strb	r3, [r7, #23]
 801166a:	e008      	b.n	801167e <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011672:	2b00      	cmp	r3, #0
 8011674:	da01      	bge.n	801167a <VL53L1_f_038+0x7e>
 8011676:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801167a:	12db      	asrs	r3, r3, #11
 801167c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 801167e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b08e      	sub	sp, #56	; 0x38
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011694:	2300      	movs	r3, #0
 8011696:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 80116a0:	2300      	movs	r3, #0
 80116a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 80116aa:	2300      	movs	r3, #0
 80116ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 80116b6:	2300      	movs	r3, #0
 80116b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80116bc:	22ac      	movs	r2, #172	; 0xac
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	6838      	ldr	r0, [r7, #0]
 80116c2:	f007 ffc1 	bl	8019648 <memcpy>


	podata->VL53L1_p_024 = 0;
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	2200      	movs	r2, #0
 80116ca:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116d2:	e00a      	b.n	80116ea <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 80116d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	4413      	add	r3, r2
 80116dc:	2210      	movs	r2, #16
 80116de:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80116e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116e4:	3301      	adds	r3, #1
 80116e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116ee:	2b05      	cmp	r3, #5
 80116f0:	d9f0      	bls.n	80116d4 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80116f2:	2300      	movs	r3, #0
 80116f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116f8:	e00b      	b.n	8011712 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 80116fa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	3206      	adds	r2, #6
 8011702:	2100      	movs	r1, #0
 8011704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011708:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801170c:	3301      	adds	r3, #1
 801170e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	7a5b      	ldrb	r3, [r3, #9]
 8011716:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801171a:	429a      	cmp	r2, r3
 801171c:	d3ed      	bcc.n	80116fa <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801171e:	2300      	movs	r3, #0
 8011720:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011724:	e012      	b.n	801174c <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 8011726:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801172a:	3338      	adds	r3, #56	; 0x38
 801172c:	443b      	add	r3, r7
 801172e:	2200      	movs	r2, #0
 8011730:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8011734:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011738:	3338      	adds	r3, #56	; 0x38
 801173a:	443b      	add	r3, r7
 801173c:	2200      	movs	r2, #0
 801173e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011742:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011746:	3301      	adds	r3, #1
 8011748:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801174c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011750:	2b0f      	cmp	r3, #15
 8011752:	d9e8      	bls.n	8011726 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8011754:	2300      	movs	r3, #0
 8011756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801175a:	2300      	movs	r3, #0
 801175c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011760:	e068      	b.n	8011834 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8011762:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	4413      	add	r3, r2
 801176a:	7b1b      	ldrb	r3, [r3, #12]
 801176c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8011770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011774:	3338      	adds	r3, #56	; 0x38
 8011776:	443b      	add	r3, r7
 8011778:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d115      	bne.n	80117ac <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011784:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011788:	0092      	lsls	r2, r2, #2
 801178a:	b2d2      	uxtb	r2, r2
 801178c:	3338      	adds	r3, #56	; 0x38
 801178e:	443b      	add	r3, r7
 8011790:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	4413      	add	r3, r2
 801179c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80117a0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 80117a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a6:	3301      	adds	r3, #1
 80117a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 80117ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80117b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80117b4:	443a      	add	r2, r7
 80117b6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 80117ba:	3201      	adds	r2, #1
 80117bc:	b2d2      	uxtb	r2, r2
 80117be:	3338      	adds	r3, #56	; 0x38
 80117c0:	443b      	add	r3, r7
 80117c2:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 80117c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80117ca:	3338      	adds	r3, #56	; 0x38
 80117cc:	443b      	add	r3, r7
 80117ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80117d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 80117d6:	2300      	movs	r3, #0
 80117d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80117dc:	e021      	b.n	8011822 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 80117de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80117e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117e6:	441a      	add	r2, r3
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	3206      	adds	r2, #6
 80117ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 80117f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117f4:	009a      	lsls	r2, r3, #2
 80117f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117fa:	441a      	add	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3206      	adds	r2, #6
 8011800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8011804:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8011808:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801180c:	4402      	add	r2, r0
 801180e:	4419      	add	r1, r3
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	3206      	adds	r2, #6
 8011814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8011818:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801181c:	3301      	adds	r3, #1
 801181e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011822:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011826:	2b03      	cmp	r3, #3
 8011828:	d9d9      	bls.n	80117de <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801182a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801182e:	3301      	adds	r3, #1
 8011830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011834:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011838:	2b05      	cmp	r3, #5
 801183a:	d992      	bls.n	8011762 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801183c:	2300      	movs	r3, #0
 801183e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011842:	e022      	b.n	801188a <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8011844:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	4413      	add	r3, r2
 801184c:	7b1b      	ldrb	r3, [r3, #12]
 801184e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8011852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011856:	2b0f      	cmp	r3, #15
 8011858:	d80c      	bhi.n	8011874 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801185a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 801185e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8011862:	3238      	adds	r2, #56	; 0x38
 8011864:	443a      	add	r2, r7
 8011866:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	4413      	add	r3, r2
 801186e:	460a      	mov	r2, r1
 8011870:	749a      	strb	r2, [r3, #18]
 8011872:	e005      	b.n	8011880 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8011874:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	4413      	add	r3, r2
 801187c:	2200      	movs	r2, #0
 801187e:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011880:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011884:	3301      	adds	r3, #1
 8011886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801188a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801188e:	2b05      	cmp	r3, #5
 8011890:	d9d8      	bls.n	8011844 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011892:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	b2da      	uxtb	r2, r3
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801189e:	2300      	movs	r3, #0
 80118a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118a4:	e050      	b.n	8011948 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 80118a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118aa:	3338      	adds	r3, #56	; 0x38
 80118ac:	443b      	add	r3, r7
 80118ae:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80118b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	dd41      	ble.n	801193e <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 80118ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118be:	3338      	adds	r3, #56	; 0x38
 80118c0:	443b      	add	r3, r7
 80118c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80118c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 80118ca:	2300      	movs	r3, #0
 80118cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80118d0:	e031      	b.n	8011936 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 80118d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80118d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118da:	441a      	add	r2, r3
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	3206      	adds	r2, #6
 80118e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	0fda      	lsrs	r2, r3, #31
 80118e8:	4413      	add	r3, r2
 80118ea:	105b      	asrs	r3, r3, #1
 80118ec:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 80118ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80118f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118f6:	441a      	add	r2, r3
 80118f8:	4401      	add	r1, r0
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	3206      	adds	r2, #6
 80118fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8011902:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011906:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801190a:	441a      	add	r2, r3
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	3206      	adds	r2, #6
 8011910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011914:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011918:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801191c:	441a      	add	r2, r3
 801191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011920:	fb91 f1f3 	sdiv	r1, r1, r3
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	3206      	adds	r2, #6
 8011928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 801192c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011930:	3301      	adds	r3, #1
 8011932:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011936:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801193a:	2b03      	cmp	r3, #3
 801193c:	d9c9      	bls.n	80118d2 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801193e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011942:	3301      	adds	r3, #1
 8011944:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011948:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801194c:	2b0f      	cmp	r3, #15
 801194e:	d9aa      	bls.n	80118a6 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	2200      	movs	r2, #0
 8011954:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8011956:	7bfb      	ldrb	r3, [r7, #15]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 801195c:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	2204      	movs	r2, #4
 8011966:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8011968:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 801196c:	4618      	mov	r0, r3
 801196e:	3738      	adds	r7, #56	; 0x38
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011976:	b0cb      	sub	sp, #300	; 0x12c
 8011978:	af06      	add	r7, sp, #24
 801197a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801197e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011982:	6020      	str	r0, [r4, #0]
 8011984:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011988:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 801198c:	6001      	str	r1, [r0, #0]
 801198e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011992:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8011996:	600a      	str	r2, [r1, #0]
 8011998:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801199c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80119a0:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80119a2:	2300      	movs	r3, #0
 80119a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 80119a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 80119b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80119b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 80119b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80119bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 80119c0:	f107 0318 	add.w	r3, r7, #24
 80119c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 80119cc:	2300      	movs	r3, #0
 80119ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 80119d2:	2300      	movs	r3, #0
 80119d4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 80119d8:	2300      	movs	r3, #0
 80119da:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 80119f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80119f8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	f7ff fe44 	bl	801168a <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a06:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8011a08:	b299      	uxth	r1, r3
 8011a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a0e:	3348      	adds	r3, #72	; 0x48
 8011a10:	461a      	mov	r2, r3
 8011a12:	2000      	movs	r0, #0
 8011a14:	f7fd f9db 	bl	800edce <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8011a18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a20:	3348      	adds	r3, #72	; 0x48
 8011a22:	4619      	mov	r1, r3
 8011a24:	4610      	mov	r0, r2
 8011a26:	f7fd f994 	bl	800ed52 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8011a2a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d142      	bne.n	8011ab8 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d039      	beq.n	8011ab8 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8011a44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8011a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011a7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011a7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011a88:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011a8c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011a90:	6809      	ldr	r1, [r1, #0]
 8011a92:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8011a96:	f107 0014 	add.w	r0, r7, #20
 8011a9a:	9004      	str	r0, [sp, #16]
 8011a9c:	9103      	str	r1, [sp, #12]
 8011a9e:	9202      	str	r2, [sp, #8]
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	4632      	mov	r2, r6
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4620      	mov	r0, r4
 8011aae:	f002 f98c 	bl	8013dca <VL53L1_f_040>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011ab8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d115      	bne.n	8011aec <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ac4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00c      	beq.n	8011aec <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011ad2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011adc:	3348      	adds	r3, #72	; 0x48
 8011ade:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011ae2:	f002 fbe4 	bl	80142ae <VL53L1_f_041>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011aec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011af0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011af4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011af8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011afc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b00:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011b04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b08:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011b0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b10:	2200      	movs	r2, #0
 8011b12:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8011b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b24:	2200      	movs	r2, #0
 8011b26:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8011b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011b34:	2300      	movs	r3, #0
 8011b36:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d002      	beq.n	8011b52 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011b52:	2300      	movs	r3, #0
 8011b54:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011b58:	e108      	b.n	8011d6c <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8011b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b70:	3348      	adds	r3, #72	; 0x48
 8011b72:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011b76:	7814      	ldrb	r4, [r2, #0]
 8011b78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b7c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011b80:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011b84:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011b88:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011b8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b90:	9405      	str	r4, [sp, #20]
 8011b92:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011b96:	9404      	str	r4, [sp, #16]
 8011b98:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011b9c:	9403      	str	r4, [sp, #12]
 8011b9e:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011ba2:	9402      	str	r4, [sp, #8]
 8011ba4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011ba8:	9401      	str	r4, [sp, #4]
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011bb0:	6812      	ldr	r2, [r2, #0]
 8011bb2:	6809      	ldr	r1, [r1, #0]
 8011bb4:	6800      	ldr	r0, [r0, #0]
 8011bb6:	f7fe fe65 	bl	8010884 <VL53L1_f_033>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011bc0:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f040 80cb 	bne.w	8011d60 <VL53L1_hist_process_data+0x3ec>
 8011bca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f040 80c6 	bne.w	8011d60 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bd8:	7c9b      	ldrb	r3, [r3, #18]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d110      	bne.n	8011c00 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011be2:	3314      	adds	r3, #20
 8011be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011bec:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bf2:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011bf8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bfe:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011c00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011c10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	461a      	mov	r2, r3
 8011c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c1c:	fb02 f303 	mul.w	r3, r2, r3
 8011c20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c28:	011b      	lsls	r3, r3, #4
 8011c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011c34:	e08b      	b.n	8011d4e <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011c36:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011c3a:	224c      	movs	r2, #76	; 0x4c
 8011c3c:	fb02 f303 	mul.w	r3, r2, r3
 8011c40:	3310      	adds	r3, #16
 8011c42:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011c46:	4413      	add	r3, r2
 8011c48:	3304      	adds	r3, #4
 8011c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011c4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c52:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011c56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c5a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	dd0e      	ble.n	8011c80 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c66:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011c6a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011c6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c70:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011c74:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	b29b      	uxth	r3, r3
				delta_mm =
 8011c7a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011c7e:	e00d      	b.n	8011c9c <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c84:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011c88:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011c8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c8e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011c92:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	b29b      	uxth	r3, r3
				delta_mm =
 8011c98:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011c9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ca0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011ca8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011cac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cb8:	fb02 f303 	mul.w	r3, r2, r3
 8011cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011cc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cc4:	015b      	lsls	r3, r3, #5
 8011cc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011cce:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	dd2f      	ble.n	8011d44 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011ce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ce8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011cec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	da22      	bge.n	8011d44 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011d04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d91b      	bls.n	8011d44 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011d0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011d12:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d913      	bls.n	8011d44 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011d1c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011d20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011d24:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011d28:	6812      	ldr	r2, [r2, #0]
 8011d2a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	da09      	bge.n	8011d44 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011d30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011d38:	224c      	movs	r2, #76	; 0x4c
 8011d3a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f007 fc82 	bl	8019648 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011d44:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011d48:	3301      	adds	r3, #1
 8011d4a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d52:	7c9b      	ldrb	r3, [r3, #18]
 8011d54:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	f4ff af6c 	bcc.w	8011c36 <VL53L1_hist_process_data+0x2c2>
 8011d5e:	e000      	b.n	8011d62 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011d60:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011d62:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011d66:	3301      	adds	r3, #1
 8011d68:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011d6c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011d70:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011d74:	429a      	cmp	r2, r3
 8011d76:	f67f aef0 	bls.w	8011b5a <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011d8c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d9a <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b086      	sub	sp, #24
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	60f8      	str	r0, [r7, #12]
 8011da2:	460b      	mov	r3, r1
 8011da4:	607a      	str	r2, [r7, #4]
 8011da6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011da8:	2300      	movs	r3, #0
 8011daa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d104      	bne.n	8011dbe <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7f9 fb5a 	bl	800b46e <VL53L1_disable_firmware>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d104      	bne.n	8011dd0 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f7f9 fb82 	bl	800b4d0 <VL53L1_enable_powerforce>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d105      	bne.n	8011de4 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011dd8:	21fa      	movs	r1, #250	; 0xfa
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f002 fdd0 	bl	8014980 <VL53L1_WaitUs>
 8011de0:	4603      	mov	r3, r0
 8011de2:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d107      	bne.n	8011dfc <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011dec:	2201      	movs	r2, #1
 8011dee:	f240 7181 	movw	r1, #1921	; 0x781
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	f002 fcd0 	bl	8014798 <VL53L1_WrByte>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d107      	bne.n	8011e14 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011e04:	2205      	movs	r2, #5
 8011e06:	f240 6183 	movw	r1, #1667	; 0x683
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f002 fcc4 	bl	8014798 <VL53L1_WrByte>
 8011e10:	4603      	mov	r3, r0
 8011e12:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d105      	bne.n	8011e28 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011e1c:	6879      	ldr	r1, [r7, #4]
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f002 fdae 	bl	8014980 <VL53L1_WaitUs>
 8011e24:	4603      	mov	r3, r0
 8011e26:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d107      	bne.n	8011e40 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011e30:	2201      	movs	r2, #1
 8011e32:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f002 fcae 	bl	8014798 <VL53L1_WrByte>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d108      	bne.n	8011e5a <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011e48:	897b      	ldrh	r3, [r7, #10]
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	f240 7184 	movw	r1, #1924	; 0x784
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f002 fccb 	bl	80147ec <VL53L1_WrWord>
 8011e56:	4603      	mov	r3, r0
 8011e58:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b086      	sub	sp, #24
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	607b      	str	r3, [r7, #4]
 8011e70:	460b      	mov	r3, r1
 8011e72:	72fb      	strb	r3, [r7, #11]
 8011e74:	4613      	mov	r3, r2
 8011e76:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011e80:	7afb      	ldrb	r3, [r7, #11]
 8011e82:	75bb      	strb	r3, [r7, #22]
 8011e84:	e041      	b.n	8011f0a <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d108      	bne.n	8011ea0 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011e8e:	7dbb      	ldrb	r3, [r7, #22]
 8011e90:	461a      	mov	r2, r3
 8011e92:	f240 7194 	movw	r1, #1940	; 0x794
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f002 fc7e 	bl	8014798 <VL53L1_WrByte>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d107      	bne.n	8011eb8 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f240 7183 	movw	r1, #1923	; 0x783
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f002 fc72 	bl	8014798 <VL53L1_WrByte>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8011eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d105      	bne.n	8011ecc <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011ec0:	2105      	movs	r1, #5
 8011ec2:	68f8      	ldr	r0, [r7, #12]
 8011ec4:	f002 fd5c 	bl	8014980 <VL53L1_WaitUs>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d107      	bne.n	8011ee4 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	f240 7183 	movw	r1, #1923	; 0x783
 8011eda:	68f8      	ldr	r0, [r7, #12]
 8011edc:	f002 fc5c 	bl	8014798 <VL53L1_WrByte>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d108      	bne.n	8011efe <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011eec:	2304      	movs	r3, #4
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f002 fc19 	bl	801472c <VL53L1_ReadMulti>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	3304      	adds	r3, #4
 8011f02:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011f04:	7dbb      	ldrb	r3, [r7, #22]
 8011f06:	3301      	adds	r3, #1
 8011f08:	75bb      	strb	r3, [r7, #22]
 8011f0a:	7dba      	ldrb	r2, [r7, #22]
 8011f0c:	7af9      	ldrb	r1, [r7, #11]
 8011f0e:	7abb      	ldrb	r3, [r7, #10]
 8011f10:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8011f12:	429a      	cmp	r2, r3
 8011f14:	dbb7      	blt.n	8011e86 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8011f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3718      	adds	r7, #24
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b084      	sub	sp, #16
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d107      	bne.n	8011f46 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011f36:	2201      	movs	r2, #1
 8011f38:	f240 7183 	movw	r1, #1923	; 0x783
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f002 fc2b 	bl	8014798 <VL53L1_WrByte>
 8011f42:	4603      	mov	r3, r0
 8011f44:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d107      	bne.n	8011f5e <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f240 7181 	movw	r1, #1921	; 0x781
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f002 fc1f 	bl	8014798 <VL53L1_WrByte>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8011f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d104      	bne.n	8011f70 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7f9 fac4 	bl	800b4f4 <VL53L1_disable_powerforce>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d104      	bne.n	8011f82 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7f9 fa66 	bl	800b44a <VL53L1_enable_firmware>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011f82:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011f8e:	b480      	push	{r7}
 8011f90:	b087      	sub	sp, #28
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	4603      	mov	r3, r0
 8011f96:	60b9      	str	r1, [r7, #8]
 8011f98:	607a      	str	r2, [r7, #4]
 8011f9a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011fa4:	89fb      	ldrh	r3, [r7, #14]
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	d802      	bhi.n	8011fb0 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011faa:	f06f 0308 	mvn.w	r3, #8
 8011fae:	e018      	b.n	8011fe2 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fb4:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	3302      	adds	r3, #2
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	8afa      	ldrh	r2, [r7, #22]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011fc4:	8afb      	ldrh	r3, [r7, #22]
 8011fc6:	2bff      	cmp	r3, #255	; 0xff
 8011fc8:	d901      	bls.n	8011fce <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011fce:	8afb      	ldrh	r3, [r7, #22]
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	78da      	ldrb	r2, [r3, #3]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	705a      	strb	r2, [r3, #1]

	return status;
 8011fde:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	371c      	adds	r7, #28
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011fee:	b590      	push	{r4, r7, lr}
 8011ff0:	b087      	sub	sp, #28
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	60b9      	str	r1, [r7, #8]
 8011ff8:	607a      	str	r2, [r7, #4]
 8011ffa:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8012004:	2300      	movs	r3, #0
 8012006:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8012008:	89fb      	ldrh	r3, [r7, #14]
 801200a:	2b37      	cmp	r3, #55	; 0x37
 801200c:	d802      	bhi.n	8012014 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801200e:	f06f 0308 	mvn.w	r3, #8
 8012012:	e03e      	b.n	8012092 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012014:	68b9      	ldr	r1, [r7, #8]
 8012016:	2002      	movs	r0, #2
 8012018:	f7f9 f8fd 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801201c:	4603      	mov	r3, r0
 801201e:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	3302      	adds	r3, #2
 8012028:	4619      	mov	r1, r3
 801202a:	2002      	movs	r0, #2
 801202c:	f7f9 f8f3 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 801203c:	099b      	lsrs	r3, r3, #6
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2219      	movs	r2, #25
 8012048:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2205      	movs	r2, #5
 801204e:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2205      	movs	r2, #5
 8012054:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	3304      	adds	r3, #4
 801205a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 801205c:	2300      	movs	r3, #0
 801205e:	74fb      	strb	r3, [r7, #19]
 8012060:	e012      	b.n	8012088 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8012062:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8012064:	6979      	ldr	r1, [r7, #20]
 8012066:	2002      	movs	r0, #2
 8012068:	f7f9 f8d5 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801206c:	4603      	mov	r3, r0
 801206e:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	1d23      	adds	r3, r4, #4
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	4413      	add	r3, r2
 8012078:	460a      	mov	r2, r1
 801207a:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	3302      	adds	r3, #2
 8012080:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012082:	7cfb      	ldrb	r3, [r7, #19]
 8012084:	3301      	adds	r3, #1
 8012086:	74fb      	strb	r3, [r7, #19]
 8012088:	7cfb      	ldrb	r3, [r7, #19]
 801208a:	2b18      	cmp	r3, #24
 801208c:	d9e9      	bls.n	8012062 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 801208e:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012092:	4618      	mov	r0, r3
 8012094:	371c      	adds	r7, #28
 8012096:	46bd      	mov	sp, r7
 8012098:	bd90      	pop	{r4, r7, pc}

0801209a <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b086      	sub	sp, #24
 801209e:	af00      	add	r7, sp, #0
 80120a0:	4603      	mov	r3, r0
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
 80120a6:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80120a8:	2300      	movs	r3, #0
 80120aa:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80120ac:	89fb      	ldrh	r3, [r7, #14]
 80120ae:	2b07      	cmp	r3, #7
 80120b0:	d802      	bhi.n	80120b8 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80120b2:	f06f 0308 	mvn.w	r3, #8
 80120b6:	e027      	b.n	8012108 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80120b8:	68b9      	ldr	r1, [r7, #8]
 80120ba:	2002      	movs	r0, #2
 80120bc:	f7f9 f8ab 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80120c0:	4603      	mov	r3, r0
 80120c2:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	3302      	adds	r3, #2
 80120cc:	4619      	mov	r1, r3
 80120ce:	2002      	movs	r0, #2
 80120d0:	f7f9 f8a1 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80120d4:	4603      	mov	r3, r0
 80120d6:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	3304      	adds	r3, #4
 80120e0:	4619      	mov	r1, r3
 80120e2:	2002      	movs	r0, #2
 80120e4:	f7f9 f897 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80120e8:	4603      	mov	r3, r0
 80120ea:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	3306      	adds	r3, #6
 80120f4:	4619      	mov	r1, r3
 80120f6:	2002      	movs	r0, #2
 80120f8:	f7f9 f88d 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80120fc:	4603      	mov	r3, r0
 80120fe:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	80da      	strh	r2, [r3, #6]

	return status;
 8012104:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012108:	4618      	mov	r0, r3
 801210a:	3718      	adds	r7, #24
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	4603      	mov	r3, r0
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
 801211c:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801211e:	2300      	movs	r3, #0
 8012120:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8012122:	89fb      	ldrh	r3, [r7, #14]
 8012124:	2b0f      	cmp	r3, #15
 8012126:	d802      	bhi.n	801212e <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012128:	f06f 0308 	mvn.w	r3, #8
 801212c:	e04d      	b.n	80121ca <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801212e:	68b9      	ldr	r1, [r7, #8]
 8012130:	2002      	movs	r0, #2
 8012132:	f7f9 f870 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	789a      	ldrb	r2, [r3, #2]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	78da      	ldrb	r2, [r3, #3]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	3304      	adds	r3, #4
 8012152:	4619      	mov	r1, r3
 8012154:	2002      	movs	r0, #2
 8012156:	f7f9 f85e 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801215a:	4603      	mov	r3, r0
 801215c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	3306      	adds	r3, #6
 8012166:	4619      	mov	r1, r3
 8012168:	2002      	movs	r0, #2
 801216a:	f7f9 f854 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801216e:	4603      	mov	r3, r0
 8012170:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	3308      	adds	r3, #8
 801217a:	4619      	mov	r1, r3
 801217c:	2002      	movs	r0, #2
 801217e:	f7f9 f84a 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012182:	4603      	mov	r3, r0
 8012184:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	330a      	adds	r3, #10
 801218e:	4619      	mov	r1, r3
 8012190:	2002      	movs	r0, #2
 8012192:	f7f9 f840 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012196:	4603      	mov	r3, r0
 8012198:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	330c      	adds	r3, #12
 80121a2:	4619      	mov	r1, r3
 80121a4:	2002      	movs	r0, #2
 80121a6:	f7f9 f836 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80121aa:	4603      	mov	r3, r0
 80121ac:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	330e      	adds	r3, #14
 80121b6:	4619      	mov	r1, r3
 80121b8:	2002      	movs	r0, #2
 80121ba:	f7f9 f82c 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80121be:	4603      	mov	r3, r0
 80121c0:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	81da      	strh	r2, [r3, #14]

	return status;
 80121c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3718      	adds	r7, #24
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b086      	sub	sp, #24
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	60f8      	str	r0, [r7, #12]
 80121da:	607b      	str	r3, [r7, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	72fb      	strb	r3, [r7, #11]
 80121e0:	4613      	mov	r3, r2
 80121e2:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80121e4:	2300      	movs	r3, #0
 80121e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80121e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d106      	bne.n	80121fe <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 80121f0:	2232      	movs	r2, #50	; 0x32
 80121f2:	2104      	movs	r1, #4
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7ff fdd0 	bl	8011d9a <VL53L1_nvm_enable>
 80121fa:	4603      	mov	r3, r0
 80121fc:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 80121fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d107      	bne.n	8012216 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8012206:	7aba      	ldrb	r2, [r7, #10]
 8012208:	7af9      	ldrb	r1, [r7, #11]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f7ff fe2a 	bl	8011e66 <VL53L1_nvm_read>
 8012212:	4603      	mov	r3, r0
 8012214:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8012216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d104      	bne.n	8012228 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	f7ff fe7f 	bl	8011f22 <VL53L1_nvm_disable>
 8012224:	4603      	mov	r3, r0
 8012226:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8012228:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801222c:	4618      	mov	r0, r3
 801222e:	3718      	adds	r7, #24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801223e:	2300      	movs	r3, #0
 8012240:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012242:	f107 0308 	add.w	r3, r7, #8
 8012246:	2201      	movs	r2, #1
 8012248:	212e      	movs	r1, #46	; 0x2e
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff ffc1 	bl	80121d2 <VL53L1_read_nvm_raw_data>
 8012250:	4603      	mov	r3, r0
 8012252:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d108      	bne.n	801226e <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 801225c:	f107 0308 	add.w	r3, r7, #8
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	4619      	mov	r1, r3
 8012264:	2004      	movs	r0, #4
 8012266:	f7ff fe92 	bl	8011f8e <VL53L1_nvm_decode_optical_centre>
 801226a:	4603      	mov	r3, r0
 801226c:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 801226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b092      	sub	sp, #72	; 0x48
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012284:	2300      	movs	r3, #0
 8012286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801228a:	f107 030c 	add.w	r3, r7, #12
 801228e:	220e      	movs	r2, #14
 8012290:	2157      	movs	r1, #87	; 0x57
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f7ff ff9d 	bl	80121d2 <VL53L1_read_nvm_raw_data>
 8012298:	4603      	mov	r3, r0
 801229a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801229e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d109      	bne.n	80122ba <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 80122a6:	f107 030c 	add.w	r3, r7, #12
 80122aa:	683a      	ldr	r2, [r7, #0]
 80122ac:	4619      	mov	r1, r3
 80122ae:	2038      	movs	r0, #56	; 0x38
 80122b0:	f7ff fe9d 	bl	8011fee <VL53L1_nvm_decode_cal_peak_rate_map>
 80122b4:	4603      	mov	r3, r0
 80122b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80122ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3748      	adds	r7, #72	; 0x48
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b086      	sub	sp, #24
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
 80122ce:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80122d0:	2300      	movs	r3, #0
 80122d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80122d4:	f107 030c 	add.w	r3, r7, #12
 80122d8:	2202      	movs	r2, #2
 80122da:	2165      	movs	r1, #101	; 0x65
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff ff78 	bl	80121d2 <VL53L1_read_nvm_raw_data>
 80122e2:	4603      	mov	r3, r0
 80122e4:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80122e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d108      	bne.n	8012300 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 80122ee:	f107 030c 	add.w	r3, r7, #12
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	4619      	mov	r1, r3
 80122f6:	2008      	movs	r0, #8
 80122f8:	f7ff fecf 	bl	801209a <VL53L1_nvm_decode_additional_offset_cal_data>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012300:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b08a      	sub	sp, #40	; 0x28
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	460b      	mov	r3, r1
 8012316:	607a      	str	r2, [r7, #4]
 8012318:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801231a:	2300      	movs	r3, #0
 801231c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8012320:	897b      	ldrh	r3, [r7, #10]
 8012322:	089b      	lsrs	r3, r3, #2
 8012324:	b29b      	uxth	r3, r3
 8012326:	b2d9      	uxtb	r1, r3
 8012328:	f107 0314 	add.w	r3, r7, #20
 801232c:	2204      	movs	r2, #4
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f7ff ff4f 	bl	80121d2 <VL53L1_read_nvm_raw_data>
 8012334:	4603      	mov	r3, r0
 8012336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801233a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801233e:	2b00      	cmp	r3, #0
 8012340:	d109      	bne.n	8012356 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8012342:	f107 0314 	add.w	r3, r7, #20
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	4619      	mov	r1, r3
 801234a:	2010      	movs	r0, #16
 801234c:	f7ff fee0 	bl	8012110 <VL53L1_nvm_decode_fmt_range_results_data>
 8012350:	4603      	mov	r3, r0
 8012352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8012356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801235a:	4618      	mov	r0, r3
 801235c:	3728      	adds	r7, #40	; 0x28
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b086      	sub	sp, #24
 8012366:	af00      	add	r7, sp, #0
 8012368:	60f8      	str	r0, [r7, #12]
 801236a:	460b      	mov	r3, r1
 801236c:	607a      	str	r2, [r7, #4]
 801236e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012370:	2300      	movs	r3, #0
 8012372:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8012374:	897b      	ldrh	r3, [r7, #10]
 8012376:	2b0a      	cmp	r3, #10
 8012378:	d802      	bhi.n	8012380 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801237a:	f06f 0309 	mvn.w	r3, #9
 801237e:	e047      	b.n	8012410 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012388:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012396:	f002 020f 	and.w	r2, r2, #15
 801239a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801239c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80123a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80123aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80123ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80123b6:	f002 0203 	and.w	r2, r2, #3
 80123ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80123bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80123c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80123ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80123cc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	88d8      	ldrh	r0, [r3, #6]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3305      	adds	r3, #5
 80123d6:	461a      	mov	r2, r3
 80123d8:	2102      	movs	r1, #2
 80123da:	f7f8 fef1 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80123e2:	68fa      	ldr	r2, [r7, #12]
 80123e4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80123e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80123ec:	68fa      	ldr	r2, [r7, #12]
 80123ee:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80123f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80123fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80123fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012400:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801240a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801240c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012410:	4618      	mov	r0, r3
 8012412:	3718      	adds	r7, #24
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012426:	2300      	movs	r3, #0
 8012428:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 801242a:	89fb      	ldrh	r3, [r7, #14]
 801242c:	2b0a      	cmp	r3, #10
 801242e:	d802      	bhi.n	8012436 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012430:	f06f 0309 	mvn.w	r3, #9
 8012434:	e046      	b.n	80124c4 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801243e:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	3301      	adds	r3, #1
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	f003 030f 	and.w	r3, r3, #15
 801244e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	3302      	adds	r3, #2
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801245e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	3303      	adds	r3, #3
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	f003 0303 	and.w	r3, r3, #3
 801246e:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	3304      	adds	r3, #4
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801247e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	3305      	adds	r3, #5
 8012488:	4619      	mov	r1, r3
 801248a:	2002      	movs	r0, #2
 801248c:	f7f8 fec3 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012490:	4603      	mov	r3, r0
 8012492:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	79da      	ldrb	r2, [r3, #7]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	7a1a      	ldrb	r2, [r3, #8]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	3309      	adds	r3, #9
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80124b2:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	7a9a      	ldrb	r2, [r3, #10]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80124c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124d6:	2300      	movs	r3, #0
 80124d8:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80124da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d108      	bne.n	80124f4 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80124e2:	f107 020c 	add.w	r2, r7, #12
 80124e6:	230b      	movs	r3, #11
 80124e8:	2101      	movs	r1, #1
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f002 f91e 	bl	801472c <VL53L1_ReadMulti>
 80124f0:	4603      	mov	r3, r0
 80124f2:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80124f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d108      	bne.n	801250e <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80124fc:	f107 030c 	add.w	r3, r7, #12
 8012500:	683a      	ldr	r2, [r7, #0]
 8012502:	4619      	mov	r1, r3
 8012504:	200b      	movs	r0, #11
 8012506:	f7ff ff87 	bl	8012418 <VL53L1_i2c_decode_static_nvm_managed>
 801250a:	4603      	mov	r3, r0
 801250c:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801250e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3718      	adds	r7, #24
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b086      	sub	sp, #24
 801251e:	af00      	add	r7, sp, #0
 8012520:	60f8      	str	r0, [r7, #12]
 8012522:	460b      	mov	r3, r1
 8012524:	607a      	str	r2, [r7, #4]
 8012526:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012528:	2300      	movs	r3, #0
 801252a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 801252c:	897b      	ldrh	r3, [r7, #10]
 801252e:	2b16      	cmp	r3, #22
 8012530:	d802      	bhi.n	8012538 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012532:	f06f 0309 	mvn.w	r3, #9
 8012536:	e076      	b.n	8012626 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012548:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012552:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801255c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012566:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012570:	f002 020f 	and.w	r2, r2, #15
 8012574:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012576:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012580:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801258a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801258e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012590:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801259a:	f002 0203 	and.w	r2, r2, #3
 801259e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80125a0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	8958      	ldrh	r0, [r3, #10]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	3309      	adds	r3, #9
 80125aa:	461a      	mov	r2, r3
 80125ac:	2102      	movs	r1, #2
 80125ae:	f7f8 fe07 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	330b      	adds	r3, #11
 80125bc:	461a      	mov	r2, r3
 80125be:	2102      	movs	r1, #2
 80125c0:	f7f8 fe49 	bl	800b256 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	330d      	adds	r3, #13
 80125ce:	461a      	mov	r2, r3
 80125d0:	2102      	movs	r1, #2
 80125d2:	f7f8 fe40 	bl	800b256 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	8a18      	ldrh	r0, [r3, #16]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	330f      	adds	r3, #15
 80125de:	461a      	mov	r2, r3
 80125e0:	2102      	movs	r1, #2
 80125e2:	f7f8 fded 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80125ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125f0:	b218      	sxth	r0, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3311      	adds	r3, #17
 80125f6:	461a      	mov	r2, r3
 80125f8:	2102      	movs	r1, #2
 80125fa:	f7f8 fe2c 	bl	800b256 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	3313      	adds	r3, #19
 8012608:	461a      	mov	r2, r3
 801260a:	2102      	movs	r1, #2
 801260c:	f7f8 fe23 	bl	800b256 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	3315      	adds	r3, #21
 801261a:	461a      	mov	r2, r3
 801261c:	2102      	movs	r1, #2
 801261e:	f7f8 fe1a 	bl	800b256 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8012622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b086      	sub	sp, #24
 8012632:	af00      	add	r7, sp, #0
 8012634:	4603      	mov	r3, r0
 8012636:	60b9      	str	r1, [r7, #8]
 8012638:	607a      	str	r2, [r7, #4]
 801263a:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801263c:	2300      	movs	r3, #0
 801263e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8012640:	89fb      	ldrh	r3, [r7, #14]
 8012642:	2b16      	cmp	r3, #22
 8012644:	d802      	bhi.n	801264c <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012646:	f06f 0309 	mvn.w	r3, #9
 801264a:	e079      	b.n	8012740 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	785a      	ldrb	r2, [r3, #1]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	789a      	ldrb	r2, [r3, #2]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	78da      	ldrb	r2, [r3, #3]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	791a      	ldrb	r2, [r3, #4]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	3305      	adds	r3, #5
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	f003 030f 	and.w	r3, r3, #15
 801267e:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	799a      	ldrb	r2, [r3, #6]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	3307      	adds	r3, #7
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012696:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	3308      	adds	r3, #8
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	f003 0303 	and.w	r3, r3, #3
 80126a6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	3309      	adds	r3, #9
 80126b0:	4619      	mov	r1, r3
 80126b2:	2002      	movs	r0, #2
 80126b4:	f7f8 fdaf 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80126b8:	4603      	mov	r3, r0
 80126ba:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	330b      	adds	r3, #11
 80126c4:	4619      	mov	r1, r3
 80126c6:	2002      	movs	r0, #2
 80126c8:	f7f8 fdf1 	bl	800b2ae <VL53L1_i2c_decode_int16_t>
 80126cc:	4603      	mov	r3, r0
 80126ce:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	330d      	adds	r3, #13
 80126d8:	4619      	mov	r1, r3
 80126da:	2002      	movs	r0, #2
 80126dc:	f7f8 fde7 	bl	800b2ae <VL53L1_i2c_decode_int16_t>
 80126e0:	4603      	mov	r3, r0
 80126e2:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	330f      	adds	r3, #15
 80126ec:	4619      	mov	r1, r3
 80126ee:	2002      	movs	r0, #2
 80126f0:	f7f8 fd91 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 80126f4:	4603      	mov	r3, r0
 80126f6:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	3311      	adds	r3, #17
 8012700:	4619      	mov	r1, r3
 8012702:	2002      	movs	r0, #2
 8012704:	f7f8 fdd3 	bl	800b2ae <VL53L1_i2c_decode_int16_t>
 8012708:	4603      	mov	r3, r0
 801270a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801270e:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	3313      	adds	r3, #19
 8012718:	4619      	mov	r1, r3
 801271a:	2002      	movs	r0, #2
 801271c:	f7f8 fdc7 	bl	800b2ae <VL53L1_i2c_decode_int16_t>
 8012720:	4603      	mov	r3, r0
 8012722:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	3315      	adds	r3, #21
 801272c:	4619      	mov	r1, r3
 801272e:	2002      	movs	r0, #2
 8012730:	f7f8 fdbd 	bl	800b2ae <VL53L1_i2c_decode_int16_t>
 8012734:	4603      	mov	r3, r0
 8012736:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 801273c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012740:	4618      	mov	r0, r3
 8012742:	3718      	adds	r7, #24
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b088      	sub	sp, #32
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012752:	2300      	movs	r3, #0
 8012754:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d108      	bne.n	8012770 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 801275e:	f107 0208 	add.w	r2, r7, #8
 8012762:	2317      	movs	r3, #23
 8012764:	210d      	movs	r1, #13
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f001 ffe0 	bl	801472c <VL53L1_ReadMulti>
 801276c:	4603      	mov	r3, r0
 801276e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d108      	bne.n	801278a <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8012778:	f107 0308 	add.w	r3, r7, #8
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	4619      	mov	r1, r3
 8012780:	2017      	movs	r0, #23
 8012782:	f7ff ff54 	bl	801262e <VL53L1_i2c_decode_customer_nvm_managed>
 8012786:	4603      	mov	r3, r0
 8012788:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801278a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3720      	adds	r7, #32
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b086      	sub	sp, #24
 801279a:	af00      	add	r7, sp, #0
 801279c:	60f8      	str	r0, [r7, #12]
 801279e:	460b      	mov	r3, r1
 80127a0:	607a      	str	r2, [r7, #4]
 80127a2:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127a4:	2300      	movs	r3, #0
 80127a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 80127a8:	897b      	ldrh	r3, [r7, #10]
 80127aa:	2b1f      	cmp	r3, #31
 80127ac:	d802      	bhi.n	80127b4 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127ae:	f06f 0309 	mvn.w	r3, #9
 80127b2:	e0cf      	b.n	8012954 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	881b      	ldrh	r3, [r3, #0]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	2102      	movs	r1, #2
 80127bc:	4618      	mov	r0, r3
 80127be:	f7f8 fcff 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80127ca:	f002 0201 	and.w	r2, r2, #1
 80127ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80127d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80127da:	f002 020f 	and.w	r2, r2, #15
 80127de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80127e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80127ea:	f002 020f 	and.w	r2, r2, #15
 80127ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80127f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80127fa:	f002 021f 	and.w	r2, r2, #31
 80127fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012800:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801280a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801280e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012810:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801281a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801281e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012820:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801282a:	f002 0201 	and.w	r2, r2, #1
 801282e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012830:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801283a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8012844:	f002 0201 	and.w	r2, r2, #1
 8012848:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801284a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8012854:	f002 0203 	and.w	r2, r2, #3
 8012858:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801285a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012864:	f002 021f 	and.w	r2, r2, #31
 8012868:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801286a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8012874:	f002 0203 	and.w	r2, r2, #3
 8012878:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801287a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012884:	f002 0203 	and.w	r2, r2, #3
 8012888:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801288a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012894:	f002 0207 	and.w	r2, r2, #7
 8012898:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801289a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80128a4:	f002 021f 	and.w	r2, r2, #31
 80128a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80128aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80128b4:	f002 0201 	and.w	r2, r2, #1
 80128b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80128ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80128c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80128ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80128d4:	68fa      	ldr	r2, [r7, #12]
 80128d6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80128d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80128de:	68fa      	ldr	r2, [r7, #12]
 80128e0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80128e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80128ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80128f2:	68fa      	ldr	r2, [r7, #12]
 80128f4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80128f6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	8b18      	ldrh	r0, [r3, #24]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	3318      	adds	r3, #24
 8012900:	461a      	mov	r2, r3
 8012902:	2102      	movs	r1, #2
 8012904:	f7f8 fc5c 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012910:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 801291a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8012924:	f002 020f 	and.w	r2, r2, #15
 8012928:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 801292a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8012934:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 801293e:	f002 020f 	and.w	r2, r2, #15
 8012942:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8012944:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 801294e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012954:	4618      	mov	r0, r3
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b086      	sub	sp, #24
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	460b      	mov	r3, r1
 8012966:	607a      	str	r2, [r7, #4]
 8012968:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801296a:	2300      	movs	r3, #0
 801296c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 801296e:	897b      	ldrh	r3, [r7, #10]
 8012970:	2b15      	cmp	r3, #21
 8012972:	d802      	bhi.n	801297a <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012974:	f06f 0309 	mvn.w	r3, #9
 8012978:	e070      	b.n	8012a5c <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801298a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012994:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 801299e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80129a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80129a4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 80129aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80129ae:	b298      	uxth	r0, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	3304      	adds	r3, #4
 80129b4:	461a      	mov	r2, r3
 80129b6:	2102      	movs	r1, #2
 80129b8:	f7f8 fc02 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80129c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80129c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80129ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80129d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80129de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80129e8:	f002 0201 	and.w	r2, r2, #1
 80129ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80129ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80129f8:	f002 0207 	and.w	r2, r2, #7
 80129fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80129fe:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	8998      	ldrh	r0, [r3, #12]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	330c      	adds	r3, #12
 8012a08:	461a      	mov	r2, r3
 8012a0a:	2102      	movs	r1, #2
 8012a0c:	f7f8 fbd8 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	89d8      	ldrh	r0, [r3, #14]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	330e      	adds	r3, #14
 8012a18:	461a      	mov	r2, r3
 8012a1a:	2102      	movs	r1, #2
 8012a1c:	f7f8 fbd0 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	8a18      	ldrh	r0, [r3, #16]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3310      	adds	r3, #16
 8012a28:	461a      	mov	r2, r3
 8012a2a:	2102      	movs	r1, #2
 8012a2c:	f7f8 fbc8 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012a38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8012a3e:	68fa      	ldr	r2, [r7, #12]
 8012a40:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012a42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012a4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012a56:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3718      	adds	r7, #24
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}

08012a64 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	607a      	str	r2, [r7, #4]
 8012a70:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012a72:	2300      	movs	r3, #0
 8012a74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8012a76:	897b      	ldrh	r3, [r7, #10]
 8012a78:	2b16      	cmp	r3, #22
 8012a7a:	d802      	bhi.n	8012a82 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a7c:	f06f 0309 	mvn.w	r3, #9
 8012a80:	e06e      	b.n	8012b60 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	f003 030f 	and.w	r3, r3, #15
 8012a8a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012a98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012aa2:	f002 020f 	and.w	r2, r2, #15
 8012aa6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012aa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012abc:	f002 020f 	and.w	r2, r2, #15
 8012ac0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012ac2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012acc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012ad6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012ada:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012adc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012ae6:	f002 020f 	and.w	r2, r2, #15
 8012aea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012aec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012af2:	68fa      	ldr	r2, [r7, #12]
 8012af4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012af6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012b00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012b04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012b06:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	8958      	ldrh	r0, [r3, #10]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	330a      	adds	r3, #10
 8012b10:	461a      	mov	r2, r3
 8012b12:	2102      	movs	r1, #2
 8012b14:	f7f8 fb54 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	8998      	ldrh	r0, [r3, #12]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	330c      	adds	r3, #12
 8012b20:	461a      	mov	r2, r3
 8012b22:	2102      	movs	r1, #2
 8012b24:	f7f8 fb4c 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012b30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012b3a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	6918      	ldr	r0, [r3, #16]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	3312      	adds	r3, #18
 8012b44:	461a      	mov	r2, r3
 8012b46:	2104      	movs	r1, #4
 8012b48:	f7f8 fbda 	bl	800b300 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012b54:	f002 0201 	and.w	r2, r2, #1
 8012b58:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012b5a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3718      	adds	r7, #24
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	460b      	mov	r3, r1
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b76:	2300      	movs	r3, #0
 8012b78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8012b7a:	897b      	ldrh	r3, [r7, #10]
 8012b7c:	2b11      	cmp	r3, #17
 8012b7e:	d802      	bhi.n	8012b86 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012b80:	f06f 0309 	mvn.w	r3, #9
 8012b84:	e071      	b.n	8012c6a <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	f003 0303 	and.w	r3, r3, #3
 8012b8e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	8858      	ldrh	r0, [r3, #2]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	2102      	movs	r1, #2
 8012ba0:	f7f8 fb0e 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	8898      	ldrh	r0, [r3, #4]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	3303      	adds	r3, #3
 8012bac:	461a      	mov	r2, r3
 8012bae:	2102      	movs	r1, #2
 8012bb0:	f7f8 fb06 	bl	800b1c0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012bbc:	f002 0201 	and.w	r2, r2, #1
 8012bc0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012bc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012bcc:	f002 0207 	and.w	r2, r2, #7
 8012bd0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012bd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012bdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012be6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012bf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012bf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012bf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012c04:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012c06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012c10:	f002 0203 	and.w	r2, r2, #3
 8012c14:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012c16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012c20:	f002 0203 	and.w	r2, r2, #3
 8012c24:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012c26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012c30:	f002 020f 	and.w	r2, r2, #15
 8012c34:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012c36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012c3c:	68fa      	ldr	r2, [r7, #12]
 8012c3e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012c40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012c46:	68fa      	ldr	r2, [r7, #12]
 8012c48:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012c4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012c54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012c5e:	f002 0203 	and.w	r2, r2, #3
 8012c62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012c64:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3718      	adds	r7, #24
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012c72:	b480      	push	{r7}
 8012c74:	b087      	sub	sp, #28
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	60f8      	str	r0, [r7, #12]
 8012c7a:	460b      	mov	r3, r1
 8012c7c:	607a      	str	r2, [r7, #4]
 8012c7e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012c80:	2300      	movs	r3, #0
 8012c82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012c84:	897b      	ldrh	r3, [r7, #10]
 8012c86:	2b04      	cmp	r3, #4
 8012c88:	d802      	bhi.n	8012c90 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012c8a:	f06f 0309 	mvn.w	r3, #9
 8012c8e:	e025      	b.n	8012cdc <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	f003 0301 	and.w	r3, r3, #1
 8012c98:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012ca6:	f002 0201 	and.w	r2, r2, #1
 8012caa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012cac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012cb6:	f002 0201 	and.w	r2, r2, #1
 8012cba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012cbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012cc6:	f002 0203 	and.w	r2, r2, #3
 8012cca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012ccc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012cd6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	371c      	adds	r7, #28
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d108      	bne.n	8012d10 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012cfe:	f107 0308 	add.w	r3, r7, #8
 8012d02:	461a      	mov	r2, r3
 8012d04:	2105      	movs	r1, #5
 8012d06:	6838      	ldr	r0, [r7, #0]
 8012d08:	f7ff ffb3 	bl	8012c72 <VL53L1_i2c_encode_system_control>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d108      	bne.n	8012d2a <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012d18:	f107 0208 	add.w	r2, r7, #8
 8012d1c:	2305      	movs	r3, #5
 8012d1e:	2183      	movs	r1, #131	; 0x83
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f001 fccd 	bl	80146c0 <VL53L1_WriteMulti>
 8012d26:	4603      	mov	r3, r0
 8012d28:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012d36:	b580      	push	{r7, lr}
 8012d38:	b086      	sub	sp, #24
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	60b9      	str	r1, [r7, #8]
 8012d40:	607a      	str	r2, [r7, #4]
 8012d42:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012d44:	2300      	movs	r3, #0
 8012d46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012d48:	89fb      	ldrh	r3, [r7, #14]
 8012d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8012d4c:	d802      	bhi.n	8012d54 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012d4e:	f06f 0309 	mvn.w	r3, #9
 8012d52:	e0e2      	b.n	8012f1a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d5c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	785a      	ldrb	r2, [r3, #1]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	3302      	adds	r3, #2
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	f003 030f 	and.w	r3, r3, #15
 8012d74:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	78da      	ldrb	r2, [r3, #3]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	3304      	adds	r3, #4
 8012d86:	4619      	mov	r1, r3
 8012d88:	2002      	movs	r0, #2
 8012d8a:	f7f8 fa44 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	3306      	adds	r3, #6
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	2002      	movs	r0, #2
 8012d9e:	f7f8 fa3a 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	3308      	adds	r3, #8
 8012dae:	4619      	mov	r1, r3
 8012db0:	2002      	movs	r0, #2
 8012db2:	f7f8 fa30 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012db6:	4603      	mov	r3, r0
 8012db8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	330a      	adds	r3, #10
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	2002      	movs	r0, #2
 8012dc6:	f7f8 fa26 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	330c      	adds	r3, #12
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	2002      	movs	r0, #2
 8012dda:	f7f8 fa1c 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012dde:	4603      	mov	r3, r0
 8012de0:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	330e      	adds	r3, #14
 8012dea:	4619      	mov	r1, r3
 8012dec:	2002      	movs	r0, #2
 8012dee:	f7f8 fa12 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012df2:	4603      	mov	r3, r0
 8012df4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	3310      	adds	r3, #16
 8012dfe:	4619      	mov	r1, r3
 8012e00:	2002      	movs	r0, #2
 8012e02:	f7f8 fa08 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e06:	4603      	mov	r3, r0
 8012e08:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	3312      	adds	r3, #18
 8012e12:	4619      	mov	r1, r3
 8012e14:	2002      	movs	r0, #2
 8012e16:	f7f8 f9fe 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	3314      	adds	r3, #20
 8012e26:	4619      	mov	r1, r3
 8012e28:	2002      	movs	r0, #2
 8012e2a:	f7f8 f9f4 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	3316      	adds	r3, #22
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	2002      	movs	r0, #2
 8012e3e:	f7f8 f9ea 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e42:	4603      	mov	r3, r0
 8012e44:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	3318      	adds	r3, #24
 8012e4e:	4619      	mov	r1, r3
 8012e50:	2002      	movs	r0, #2
 8012e52:	f7f8 f9e0 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e56:	4603      	mov	r3, r0
 8012e58:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	331a      	adds	r3, #26
 8012e62:	4619      	mov	r1, r3
 8012e64:	2002      	movs	r0, #2
 8012e66:	f7f8 f9d6 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	331c      	adds	r3, #28
 8012e76:	4619      	mov	r1, r3
 8012e78:	2002      	movs	r0, #2
 8012e7a:	f7f8 f9cc 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	331e      	adds	r3, #30
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	2002      	movs	r0, #2
 8012e8e:	f7f8 f9c2 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012e92:	4603      	mov	r3, r0
 8012e94:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	3320      	adds	r3, #32
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	2002      	movs	r0, #2
 8012ea2:	f7f8 f9b8 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	3322      	adds	r3, #34	; 0x22
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	2002      	movs	r0, #2
 8012eb6:	f7f8 f9ae 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	3324      	adds	r3, #36	; 0x24
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	2002      	movs	r0, #2
 8012eca:	f7f8 f9a4 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	3326      	adds	r3, #38	; 0x26
 8012eda:	4619      	mov	r1, r3
 8012edc:	2002      	movs	r0, #2
 8012ede:	f7f8 f99a 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3328      	adds	r3, #40	; 0x28
 8012eee:	4619      	mov	r1, r3
 8012ef0:	2002      	movs	r0, #2
 8012ef2:	f7f8 f990 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3718      	adds	r7, #24
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}

08012f22 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012f22:	b580      	push	{r7, lr}
 8012f24:	b086      	sub	sp, #24
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	4603      	mov	r3, r0
 8012f2a:	60b9      	str	r1, [r7, #8]
 8012f2c:	607a      	str	r2, [r7, #4]
 8012f2e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012f30:	2300      	movs	r3, #0
 8012f32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012f34:	89fb      	ldrh	r3, [r7, #14]
 8012f36:	2b20      	cmp	r3, #32
 8012f38:	d802      	bhi.n	8012f40 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012f3a:	f06f 0309 	mvn.w	r3, #9
 8012f3e:	e04d      	b.n	8012fdc <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012f40:	68b9      	ldr	r1, [r7, #8]
 8012f42:	2004      	movs	r0, #4
 8012f44:	f7f8 fa06 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012f48:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	3304      	adds	r3, #4
 8012f52:	4619      	mov	r1, r3
 8012f54:	2004      	movs	r0, #4
 8012f56:	f7f8 f9fd 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012f5a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	3308      	adds	r3, #8
 8012f64:	4619      	mov	r1, r3
 8012f66:	2004      	movs	r0, #4
 8012f68:	f7f8 fa11 	bl	800b38e <VL53L1_i2c_decode_int32_t>
 8012f6c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	330c      	adds	r3, #12
 8012f76:	4619      	mov	r1, r3
 8012f78:	2004      	movs	r0, #4
 8012f7a:	f7f8 f9eb 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012f7e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	3310      	adds	r3, #16
 8012f88:	4619      	mov	r1, r3
 8012f8a:	2004      	movs	r0, #4
 8012f8c:	f7f8 f9e2 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012f90:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	3314      	adds	r3, #20
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2004      	movs	r0, #4
 8012f9e:	f7f8 f9d9 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012fa2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	3318      	adds	r3, #24
 8012fac:	4619      	mov	r1, r3
 8012fae:	2004      	movs	r0, #4
 8012fb0:	f7f8 f9ed 	bl	800b38e <VL53L1_i2c_decode_int32_t>
 8012fb4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	331c      	adds	r3, #28
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	2004      	movs	r0, #4
 8012fc2:	f7f8 f9c7 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8012fc6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3718      	adds	r7, #24
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b086      	sub	sp, #24
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	4603      	mov	r3, r0
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
 8012ff0:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012ff6:	89fb      	ldrh	r3, [r7, #14]
 8012ff8:	2b37      	cmp	r3, #55	; 0x37
 8012ffa:	d802      	bhi.n	8013002 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012ffc:	f06f 0309 	mvn.w	r3, #9
 8013000:	e15e      	b.n	80132c0 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8013002:	68b9      	ldr	r1, [r7, #8]
 8013004:	2002      	movs	r0, #2
 8013006:	f7f8 f906 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801300a:	4603      	mov	r3, r0
 801300c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	3302      	adds	r3, #2
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801301c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	3303      	adds	r3, #3
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801302c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	3304      	adds	r3, #4
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	f003 0303 	and.w	r3, r3, #3
 801303c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	3305      	adds	r3, #5
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	f003 0301 	and.w	r3, r3, #1
 801304c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	3306      	adds	r3, #6
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801305c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	3307      	adds	r3, #7
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801306c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	3308      	adds	r3, #8
 8013076:	4619      	mov	r1, r3
 8013078:	2002      	movs	r0, #2
 801307a:	f7f8 f8cc 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801307e:	4603      	mov	r3, r0
 8013080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013084:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	330a      	adds	r3, #10
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	f003 0303 	and.w	r3, r3, #3
 8013094:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	330b      	adds	r3, #11
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	f003 0303 	and.w	r3, r3, #3
 80130a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	330c      	adds	r3, #12
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 030f 	and.w	r3, r3, #15
 80130b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	330d      	adds	r3, #13
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	f003 0307 	and.w	r3, r3, #7
 80130c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	330e      	adds	r3, #14
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 0301 	and.w	r3, r3, #1
 80130d4:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	330f      	adds	r3, #15
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	f003 0303 	and.w	r3, r3, #3
 80130e4:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	7c1a      	ldrb	r2, [r3, #16]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	7c5a      	ldrb	r2, [r3, #17]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	3312      	adds	r3, #18
 80130fe:	4619      	mov	r1, r3
 8013100:	2002      	movs	r0, #2
 8013102:	f7f8 f888 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8013106:	4603      	mov	r3, r0
 8013108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801310c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	3316      	adds	r3, #22
 8013116:	4619      	mov	r1, r3
 8013118:	2002      	movs	r0, #2
 801311a:	f7f8 f87c 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801311e:	4603      	mov	r3, r0
 8013120:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	3318      	adds	r3, #24
 801312a:	4619      	mov	r1, r3
 801312c:	2002      	movs	r0, #2
 801312e:	f7f8 f872 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 8013132:	4603      	mov	r3, r0
 8013134:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	331a      	adds	r3, #26
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f003 0301 	and.w	r3, r3, #1
 8013144:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	331b      	adds	r3, #27
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	f003 0307 	and.w	r3, r3, #7
 8013154:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	7f1a      	ldrb	r2, [r3, #28]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	7f5a      	ldrb	r2, [r3, #29]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	331e      	adds	r3, #30
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013174:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	331f      	adds	r3, #31
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013184:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	3320      	adds	r3, #32
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 0303 	and.w	r3, r3, #3
 8013194:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	3321      	adds	r3, #33	; 0x21
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	f003 030f 	and.w	r3, r3, #15
 80131a4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	3325      	adds	r3, #37	; 0x25
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	3326      	adds	r3, #38	; 0x26
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	f003 0303 	and.w	r3, r3, #3
 80131ea:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	3327      	adds	r3, #39	; 0x27
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	f003 031f 	and.w	r3, r3, #31
 80131fc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	3328      	adds	r3, #40	; 0x28
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	f003 031f 	and.w	r3, r3, #31
 801320e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	3329      	adds	r3, #41	; 0x29
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	f003 031f 	and.w	r3, r3, #31
 8013220:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	332a      	adds	r3, #42	; 0x2a
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	f003 0301 	and.w	r3, r3, #1
 8013232:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	332b      	adds	r3, #43	; 0x2b
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	f003 0301 	and.w	r3, r3, #1
 8013244:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	332c      	adds	r3, #44	; 0x2c
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	f003 0303 	and.w	r3, r3, #3
 8013256:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	332d      	adds	r3, #45	; 0x2d
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013268:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	332e      	adds	r3, #46	; 0x2e
 8013274:	4619      	mov	r1, r3
 8013276:	2004      	movs	r0, #4
 8013278:	f7f8 f86c 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 801327c:	4603      	mov	r3, r0
 801327e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	3332      	adds	r3, #50	; 0x32
 801328a:	4619      	mov	r1, r3
 801328c:	2004      	movs	r0, #4
 801328e:	f7f8 f861 	bl	800b354 <VL53L1_i2c_decode_uint32_t>
 8013292:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	3336      	adds	r3, #54	; 0x36
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	3337      	adds	r3, #55	; 0x37
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 0301 	and.w	r3, r3, #1
 80132b4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80132bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3718      	adds	r7, #24
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	4603      	mov	r3, r0
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80132da:	89fb      	ldrh	r3, [r7, #14]
 80132dc:	2b30      	cmp	r3, #48	; 0x30
 80132de:	d802      	bhi.n	80132e6 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80132e0:	f06f 0309 	mvn.w	r3, #9
 80132e4:	e112      	b.n	801350c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	785a      	ldrb	r2, [r3, #1]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	789a      	ldrb	r2, [r3, #2]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	3303      	adds	r3, #3
 8013302:	4619      	mov	r1, r3
 8013304:	2002      	movs	r0, #2
 8013306:	f7f7 ff86 	bl	800b216 <VL53L1_i2c_decode_uint16_t>
 801330a:	4603      	mov	r3, r0
 801330c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	3305      	adds	r3, #5
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801331c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	3306      	adds	r3, #6
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f003 0307 	and.w	r3, r3, #7
 801332c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	3307      	adds	r3, #7
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 0307 	and.w	r3, r3, #7
 801333c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	3308      	adds	r3, #8
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801334c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	3309      	adds	r3, #9
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801335c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	330a      	adds	r3, #10
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 0301 	and.w	r3, r3, #1
 801336c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	330b      	adds	r3, #11
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801337c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	330c      	adds	r3, #12
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 0301 	and.w	r3, r3, #1
 801338c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	330d      	adds	r3, #13
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801339c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	330e      	adds	r3, #14
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133ac:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	7bda      	ldrb	r2, [r3, #15]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	7c1a      	ldrb	r2, [r3, #16]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	7c5a      	ldrb	r2, [r3, #17]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	7c9a      	ldrb	r2, [r3, #18]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	7cda      	ldrb	r2, [r3, #19]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	7d1a      	ldrb	r2, [r3, #20]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	7d5a      	ldrb	r2, [r3, #21]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	7d9a      	ldrb	r2, [r3, #22]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	7dda      	ldrb	r2, [r3, #23]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	7e1a      	ldrb	r2, [r3, #24]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	7e5a      	ldrb	r2, [r3, #25]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	7e9a      	ldrb	r2, [r3, #26]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	7eda      	ldrb	r2, [r3, #27]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	7f1a      	ldrb	r2, [r3, #28]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	7f5a      	ldrb	r2, [r3, #29]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	7f9a      	ldrb	r2, [r3, #30]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	7fda      	ldrb	r2, [r3, #31]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8013508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3718      	adds	r7, #24
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b090      	sub	sp, #64	; 0x40
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801351e:	2300      	movs	r3, #0
 8013520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013524:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013528:	2b00      	cmp	r3, #0
 801352a:	d10a      	bne.n	8013542 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 801352c:	f107 020c 	add.w	r2, r7, #12
 8013530:	2331      	movs	r3, #49	; 0x31
 8013532:	f240 110f 	movw	r1, #271	; 0x10f
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f001 f8f8 	bl	801472c <VL53L1_ReadMulti>
 801353c:	4603      	mov	r3, r0
 801353e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013542:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013546:	2b00      	cmp	r3, #0
 8013548:	d109      	bne.n	801355e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801354a:	f107 030c 	add.w	r3, r7, #12
 801354e:	683a      	ldr	r2, [r7, #0]
 8013550:	4619      	mov	r1, r3
 8013552:	2031      	movs	r0, #49	; 0x31
 8013554:	f7ff feb8 	bl	80132c8 <VL53L1_i2c_decode_nvm_copy_data>
 8013558:	4603      	mov	r3, r0
 801355a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801355e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013562:	4618      	mov	r0, r3
 8013564:	3740      	adds	r7, #64	; 0x40
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801356a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801356e:	b0d6      	sub	sp, #344	; 0x158
 8013570:	af00      	add	r7, sp, #0
 8013572:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8013576:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801357a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801357e:	4603      	mov	r3, r0
 8013580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013584:	23f1      	movs	r3, #241	; 0xf1
 8013586:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801358a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801358e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013592:	2300      	movs	r3, #0
 8013594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8013598:	f04f 0200 	mov.w	r2, #0
 801359c:	f04f 0300 	mov.w	r3, #0
 80135a0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 80135a4:	f04f 0200 	mov.w	r2, #0
 80135a8:	f04f 0300 	mov.w	r3, #0
 80135ac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 80135b0:	f04f 0200 	mov.w	r2, #0
 80135b4:	f04f 0300 	mov.w	r3, #0
 80135b8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80135bc:	f04f 0200 	mov.w	r2, #0
 80135c0:	f04f 0300 	mov.w	r3, #0
 80135c4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 80135c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80135cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135d0:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80135d2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f000 8322 	beq.w	8013c20 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 80135dc:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fb fa23 	bl	800ea2c <VL53L1_calc_pll_period_mm>
 80135e6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 80135ea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80135ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d91a      	bls.n	801362c <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80135f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80135fa:	2200      	movs	r2, #0
 80135fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013600:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8013604:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013608:	2200      	movs	r2, #0
 801360a:	4698      	mov	r8, r3
 801360c:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801360e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013612:	460b      	mov	r3, r1
 8013614:	ebb3 0308 	subs.w	r3, r3, r8
 8013618:	63bb      	str	r3, [r7, #56]	; 0x38
 801361a:	4613      	mov	r3, r2
 801361c:	eb63 0309 	sbc.w	r3, r3, r9
 8013620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013622:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8013626:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801362a:	e013      	b.n	8013654 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 801362c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013630:	2200      	movs	r2, #0
 8013632:	469a      	mov	sl, r3
 8013634:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8013636:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801363a:	2200      	movs	r2, #0
 801363c:	461c      	mov	r4, r3
 801363e:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8013640:	ebba 0304 	subs.w	r3, sl, r4
 8013644:	633b      	str	r3, [r7, #48]	; 0x30
 8013646:	eb6b 0305 	sbc.w	r3, fp, r5
 801364a:	637b      	str	r3, [r7, #52]	; 0x34
 801364c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013650:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8013654:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8013658:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801365c:	429a      	cmp	r2, r3
 801365e:	d91f      	bls.n	80136a0 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013660:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013664:	2200      	movs	r2, #0
 8013666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801366a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 801366e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013672:	2200      	movs	r2, #0
 8013674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013678:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 801367c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013680:	4623      	mov	r3, r4
 8013682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013686:	4602      	mov	r2, r0
 8013688:	1a9b      	subs	r3, r3, r2
 801368a:	62bb      	str	r3, [r7, #40]	; 0x28
 801368c:	462b      	mov	r3, r5
 801368e:	460a      	mov	r2, r1
 8013690:	eb63 0302 	sbc.w	r3, r3, r2
 8013694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013696:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801369a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 801369e:	e01e      	b.n	80136de <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80136a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80136a4:	2200      	movs	r2, #0
 80136a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80136aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 80136ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80136b2:	2200      	movs	r2, #0
 80136b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80136b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80136bc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80136c0:	4623      	mov	r3, r4
 80136c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80136c6:	4602      	mov	r2, r0
 80136c8:	1a9b      	subs	r3, r3, r2
 80136ca:	623b      	str	r3, [r7, #32]
 80136cc:	462b      	mov	r3, r5
 80136ce:	460a      	mov	r2, r1
 80136d0:	eb63 0302 	sbc.w	r3, r3, r2
 80136d4:	627b      	str	r3, [r7, #36]	; 0x24
 80136d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80136da:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 80136de:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80136e2:	4313      	orrs	r3, r2
 80136e4:	f000 829c 	beq.w	8013c20 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80136e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80136ec:	2200      	movs	r2, #0
 80136ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80136f2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80136f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80136fa:	2200      	movs	r2, #0
 80136fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013700:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013704:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013708:	4623      	mov	r3, r4
 801370a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801370e:	4602      	mov	r2, r0
 8013710:	189b      	adds	r3, r3, r2
 8013712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013716:	460b      	mov	r3, r1
 8013718:	462a      	mov	r2, r5
 801371a:	eb42 0303 	adc.w	r3, r2, r3
 801371e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8013722:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8013726:	2200      	movs	r2, #0
 8013728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801372c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013730:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8013734:	4623      	mov	r3, r4
 8013736:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801373a:	4602      	mov	r2, r0
 801373c:	189b      	adds	r3, r3, r2
 801373e:	61bb      	str	r3, [r7, #24]
 8013740:	460b      	mov	r3, r1
 8013742:	462a      	mov	r2, r5
 8013744:	eb42 0303 	adc.w	r3, r2, r3
 8013748:	61fb      	str	r3, [r7, #28]
 801374a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801374e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8013752:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013756:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801375a:	f173 0300 	sbcs.w	r3, r3, #0
 801375e:	d305      	bcc.n	801376c <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8013760:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013764:	f04f 0300 	mov.w	r3, #0
 8013768:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 801376c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013770:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013774:	fb03 f102 	mul.w	r1, r3, r2
 8013778:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801377c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013780:	fb02 f303 	mul.w	r3, r2, r3
 8013784:	18ca      	adds	r2, r1, r3
 8013786:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801378a:	fba3 1303 	umull	r1, r3, r3, r3
 801378e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013792:	460b      	mov	r3, r1
 8013794:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801379c:	18d3      	adds	r3, r2, r3
 801379e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80137a2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80137a6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80137aa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 80137ae:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80137b2:	f04f 0000 	mov.w	r0, #0
 80137b6:	f04f 0100 	mov.w	r1, #0
 80137ba:	0219      	lsls	r1, r3, #8
 80137bc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80137c0:	0210      	lsls	r0, r2, #8
 80137c2:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 80137c6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80137ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80137ce:	d305      	bcc.n	80137dc <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 80137d0:	f04f 32ff 	mov.w	r2, #4294967295
 80137d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80137d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80137dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80137e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80137e4:	f7ec fd6c 	bl	80002c0 <__aeabi_uldivmod>
 80137e8:	4602      	mov	r2, r0
 80137ea:	460b      	mov	r3, r1
 80137ec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80137f0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80137f4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80137f8:	f7ec fd62 	bl	80002c0 <__aeabi_uldivmod>
 80137fc:	4602      	mov	r2, r0
 80137fe:	460b      	mov	r3, r1
 8013800:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8013804:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013808:	2b80      	cmp	r3, #128	; 0x80
 801380a:	d305      	bcc.n	8013818 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 801380c:	f04f 32ff 	mov.w	r2, #4294967295
 8013810:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8013814:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8013818:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801381c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013820:	fb03 f102 	mul.w	r1, r3, r2
 8013824:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8013828:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801382c:	fb02 f303 	mul.w	r3, r2, r3
 8013830:	4419      	add	r1, r3
 8013832:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013836:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801383a:	fba2 2303 	umull	r2, r3, r2, r3
 801383e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013842:	4613      	mov	r3, r2
 8013844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8013848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801384c:	18cb      	adds	r3, r1, r3
 801384e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013852:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8013856:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801385a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801385e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013862:	2200      	movs	r2, #0
 8013864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013868:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801386c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013870:	2200      	movs	r2, #0
 8013872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013876:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801387a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801387e:	4623      	mov	r3, r4
 8013880:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013884:	4602      	mov	r2, r0
 8013886:	189b      	adds	r3, r3, r2
 8013888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801388c:	460b      	mov	r3, r1
 801388e:	462a      	mov	r2, r5
 8013890:	eb42 0303 	adc.w	r3, r2, r3
 8013894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013898:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801389c:	2200      	movs	r2, #0
 801389e:	67bb      	str	r3, [r7, #120]	; 0x78
 80138a0:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80138a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80138a6:	4623      	mov	r3, r4
 80138a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80138ac:	4602      	mov	r2, r0
 80138ae:	189b      	adds	r3, r3, r2
 80138b0:	673b      	str	r3, [r7, #112]	; 0x70
 80138b2:	460b      	mov	r3, r1
 80138b4:	462a      	mov	r2, r5
 80138b6:	eb42 0303 	adc.w	r3, r2, r3
 80138ba:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80138bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80138c0:	2200      	movs	r2, #0
 80138c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80138c4:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80138c6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80138ca:	4623      	mov	r3, r4
 80138cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80138d0:	4602      	mov	r2, r0
 80138d2:	189b      	adds	r3, r3, r2
 80138d4:	613b      	str	r3, [r7, #16]
 80138d6:	460b      	mov	r3, r1
 80138d8:	462a      	mov	r2, r5
 80138da:	eb42 0303 	adc.w	r3, r2, r3
 80138de:	617b      	str	r3, [r7, #20]
 80138e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80138e4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 80138e8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80138ec:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80138f0:	f173 0300 	sbcs.w	r3, r3, #0
 80138f4:	d305      	bcc.n	8013902 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 80138f6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80138fa:	f04f 0300 	mov.w	r3, #0
 80138fe:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8013902:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013906:	f04f 0000 	mov.w	r0, #0
 801390a:	f04f 0100 	mov.w	r1, #0
 801390e:	0219      	lsls	r1, r3, #8
 8013910:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013914:	0210      	lsls	r0, r2, #8
 8013916:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801391a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801391e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013922:	1884      	adds	r4, r0, r2
 8013924:	60bc      	str	r4, [r7, #8]
 8013926:	eb41 0303 	adc.w	r3, r1, r3
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013930:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013934:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013938:	2b00      	cmp	r3, #0
 801393a:	da05      	bge.n	8013948 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 801393c:	f04f 32ff 	mov.w	r2, #4294967295
 8013940:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013944:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013948:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801394c:	2b01      	cmp	r3, #1
 801394e:	d331      	bcc.n	80139b4 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013950:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013954:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013958:	f7ec fcb2 	bl	80002c0 <__aeabi_uldivmod>
 801395c:	4602      	mov	r2, r0
 801395e:	460b      	mov	r3, r1
 8013960:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013968:	2200      	movs	r2, #0
 801396a:	663b      	str	r3, [r7, #96]	; 0x60
 801396c:	667a      	str	r2, [r7, #100]	; 0x64
 801396e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013972:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013976:	4622      	mov	r2, r4
 8013978:	fb02 f203 	mul.w	r2, r2, r3
 801397c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013980:	4629      	mov	r1, r5
 8013982:	fb01 f303 	mul.w	r3, r1, r3
 8013986:	441a      	add	r2, r3
 8013988:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801398c:	4621      	mov	r1, r4
 801398e:	fba3 1301 	umull	r1, r3, r3, r1
 8013992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013996:	460b      	mov	r3, r1
 8013998:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139a0:	18d3      	adds	r3, r2, r3
 80139a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80139a6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80139aa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80139ae:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80139b2:	e030      	b.n	8013a16 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80139b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139b8:	2200      	movs	r2, #0
 80139ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80139bc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80139be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80139c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80139c6:	4622      	mov	r2, r4
 80139c8:	fb02 f203 	mul.w	r2, r2, r3
 80139cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139d0:	4629      	mov	r1, r5
 80139d2:	fb01 f303 	mul.w	r3, r1, r3
 80139d6:	441a      	add	r2, r3
 80139d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139dc:	4621      	mov	r1, r4
 80139de:	fba3 1301 	umull	r1, r3, r3, r1
 80139e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80139e6:	460b      	mov	r3, r1
 80139e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80139ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80139f0:	18d3      	adds	r3, r2, r3
 80139f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80139f6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80139fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80139fe:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013a02:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013a06:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a0a:	f7ec fc59 	bl	80002c0 <__aeabi_uldivmod>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	460b      	mov	r3, r1
 8013a12:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013a16:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	da05      	bge.n	8013a2a <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013a26:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013a2a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d33d      	bcc.n	8013aae <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013a32:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013a36:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a3a:	f7ec fc41 	bl	80002c0 <__aeabi_uldivmod>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	460b      	mov	r3, r1
 8013a42:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013a46:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a4a:	f04f 0200 	mov.w	r2, #0
 8013a4e:	f04f 0300 	mov.w	r3, #0
 8013a52:	0882      	lsrs	r2, r0, #2
 8013a54:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013a58:	088b      	lsrs	r3, r1, #2
 8013a5a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a62:	2200      	movs	r2, #0
 8013a64:	653b      	str	r3, [r7, #80]	; 0x50
 8013a66:	657a      	str	r2, [r7, #84]	; 0x54
 8013a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a6c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013a70:	4622      	mov	r2, r4
 8013a72:	fb02 f203 	mul.w	r2, r2, r3
 8013a76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a7a:	4629      	mov	r1, r5
 8013a7c:	fb01 f303 	mul.w	r3, r1, r3
 8013a80:	4413      	add	r3, r2
 8013a82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013a86:	4621      	mov	r1, r4
 8013a88:	fba2 1201 	umull	r1, r2, r2, r1
 8013a8c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013a90:	460a      	mov	r2, r1
 8013a92:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013a96:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013aa0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013aa4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013aa8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013aac:	e03c      	b.n	8013b28 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ab6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013abc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013ac0:	4622      	mov	r2, r4
 8013ac2:	fb02 f203 	mul.w	r2, r2, r3
 8013ac6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013aca:	4629      	mov	r1, r5
 8013acc:	fb01 f303 	mul.w	r3, r1, r3
 8013ad0:	4413      	add	r3, r2
 8013ad2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	fba2 1201 	umull	r1, r2, r2, r1
 8013adc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013ae0:	460a      	mov	r2, r1
 8013ae2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8013ae6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013aea:	4413      	add	r3, r2
 8013aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013af0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013af4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013af8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013afc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013b00:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b04:	f7ec fbdc 	bl	80002c0 <__aeabi_uldivmod>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013b10:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b14:	f04f 0200 	mov.w	r2, #0
 8013b18:	f04f 0300 	mov.w	r3, #0
 8013b1c:	0882      	lsrs	r2, r0, #2
 8013b1e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013b22:	088b      	lsrs	r3, r1, #2
 8013b24:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013b28:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	da05      	bge.n	8013b3c <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013b30:	f04f 32ff 	mov.w	r2, #4294967295
 8013b34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013b38:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013b3c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b40:	f04f 0200 	mov.w	r2, #0
 8013b44:	f04f 0300 	mov.w	r3, #0
 8013b48:	0882      	lsrs	r2, r0, #2
 8013b4a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013b4e:	088b      	lsrs	r3, r1, #2
 8013b50:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013b54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d305      	bcc.n	8013b68 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b60:	f04f 0300 	mov.w	r3, #0
 8013b64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8013b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8013b70:	647a      	str	r2, [r7, #68]	; 0x44
 8013b72:	f04f 0200 	mov.w	r2, #0
 8013b76:	f04f 0300 	mov.w	r3, #0
 8013b7a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013b7e:	4629      	mov	r1, r5
 8013b80:	01cb      	lsls	r3, r1, #7
 8013b82:	4621      	mov	r1, r4
 8013b84:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013b88:	4621      	mov	r1, r4
 8013b8a:	01ca      	lsls	r2, r1, #7
 8013b8c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013b90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013b94:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013b98:	fb03 f202 	mul.w	r2, r3, r2
 8013b9c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013ba0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013ba4:	fb01 f303 	mul.w	r3, r1, r3
 8013ba8:	441a      	add	r2, r3
 8013baa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013bae:	fba3 1303 	umull	r1, r3, r3, r3
 8013bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013bc0:	18d3      	adds	r3, r2, r3
 8013bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013bc6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013bca:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013bce:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013bd2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bd6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013bda:	1884      	adds	r4, r0, r2
 8013bdc:	603c      	str	r4, [r7, #0]
 8013bde:	eb41 0303 	adc.w	r3, r1, r3
 8013be2:	607b      	str	r3, [r7, #4]
 8013be4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013be8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013bec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d305      	bcc.n	8013c00 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf8:	f04f 0300 	mov.w	r3, #0
 8013bfc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013c00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7fa fdaa 	bl	800e75e <VL53L1_isqrt>
 8013c0a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013c18:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013c20:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013c30 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b086      	sub	sp, #24
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	3318      	adds	r3, #24
 8013c40:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013c42:	2300      	movs	r3, #0
 8013c44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d107      	bne.n	8013c5e <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013c4e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f000 f88b 	bl	8013d6e <VL53L1_poll_for_range_completion>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	75fb      	strb	r3, [r7, #23]
 8013c5c:	e01b      	b.n	8013c96 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013c62:	e011      	b.n	8013c88 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013c64:	f107 030f 	add.w	r3, r7, #15
 8013c68:	4619      	mov	r1, r3
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 f819 	bl	8013ca2 <VL53L1_is_new_data_ready>
 8013c70:	4603      	mov	r3, r0
 8013c72:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d105      	bne.n	8013c88 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013c7c:	2101      	movs	r1, #1
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f000 fe6e 	bl	8014960 <VL53L1_WaitMs>
 8013c84:	4603      	mov	r3, r0
 8013c86:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d103      	bne.n	8013c96 <VL53L1_wait_for_test_completion+0x66>
 8013c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d0e6      	beq.n	8013c64 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3718      	adds	r7, #24
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b086      	sub	sp, #24
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013cac:	2300      	movs	r3, #0
 8013cae:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	3318      	adds	r3, #24
 8013cb4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013cc8:	f003 0310 	and.w	r3, r3, #16
 8013ccc:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013cce:	7bfb      	ldrb	r3, [r7, #15]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	75fb      	strb	r3, [r7, #23]
 8013cd8:	e001      	b.n	8013cde <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013cde:	f107 030e 	add.w	r3, r7, #14
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	2131      	movs	r1, #49	; 0x31
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fdb2 	bl	8014850 <VL53L1_RdByte>
 8013cec:	4603      	mov	r3, r0
 8013cee:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013cf0:	7bbb      	ldrb	r3, [r7, #14]
 8013cf2:	f003 0201 	and.w	r2, r3, #1
 8013cf6:	7dfb      	ldrb	r3, [r7, #23]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d103      	bne.n	8013d04 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	701a      	strb	r2, [r3, #0]
 8013d02:	e002      	b.n	8013d0a <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	2200      	movs	r2, #0
 8013d08:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013d0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3718      	adds	r7, #24
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}

08013d16 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013d16:	b580      	push	{r7, lr}
 8013d18:	b086      	sub	sp, #24
 8013d1a:	af02      	add	r7, sp, #8
 8013d1c:	6078      	str	r0, [r7, #4]
 8013d1e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013d20:	2300      	movs	r3, #0
 8013d22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013d24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f000 fe29 	bl	8014980 <VL53L1_WaitUs>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10b      	bne.n	8013d52 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	9301      	str	r3, [sp, #4]
 8013d3e:	2301      	movs	r3, #1
 8013d40:	9300      	str	r3, [sp, #0]
 8013d42:	2301      	movs	r3, #1
 8013d44:	22e5      	movs	r2, #229	; 0xe5
 8013d46:	6839      	ldr	r1, [r7, #0]
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f000 fe31 	bl	80149b0 <VL53L1_WaitValueMaskEx>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d103      	bne.n	8013d62 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013d5a:	2103      	movs	r1, #3
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7f6 fc38 	bl	800a5d2 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3710      	adds	r7, #16
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013d6e:	b580      	push	{r7, lr}
 8013d70:	b088      	sub	sp, #32
 8013d72:	af02      	add	r7, sp, #8
 8013d74:	6078      	str	r0, [r7, #4]
 8013d76:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	3318      	adds	r3, #24
 8013d80:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013d90:	f003 0310 	and.w	r3, r3, #16
 8013d94:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013d96:	7bfb      	ldrb	r3, [r7, #15]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d102      	bne.n	8013da2 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	75fb      	strb	r3, [r7, #23]
 8013da0:	e001      	b.n	8013da6 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013da2:	2300      	movs	r3, #0
 8013da4:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013da6:	7dfb      	ldrb	r3, [r7, #23]
 8013da8:	2201      	movs	r2, #1
 8013daa:	9201      	str	r2, [sp, #4]
 8013dac:	2201      	movs	r2, #1
 8013dae:	9200      	str	r2, [sp, #0]
 8013db0:	2231      	movs	r2, #49	; 0x31
 8013db2:	6839      	ldr	r1, [r7, #0]
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 fdfb 	bl	80149b0 <VL53L1_WaitValueMaskEx>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013dbe:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3718      	adds	r7, #24
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013dca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013dce:	b0c0      	sub	sp, #256	; 0x100
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	460b      	mov	r3, r1
 8013dda:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013dde:	4613      	mov	r3, r2
 8013de0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013de4:	4603      	mov	r3, r0
 8013de6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013dea:	2300      	movs	r3, #0
 8013dec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013e14:	f04f 0200 	mov.w	r2, #0
 8013e18:	f04f 0300 	mov.w	r3, #0
 8013e1c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013e20:	f04f 0200 	mov.w	r2, #0
 8013e24:	f04f 0300 	mov.w	r3, #0
 8013e28:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013e2c:	f04f 0200 	mov.w	r2, #0
 8013e30:	f04f 0300 	mov.w	r3, #0
 8013e34:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013e38:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d108      	bne.n	8013e52 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013e40:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013e44:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013e48:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fb f867 	bl	800ef20 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013e52:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d165      	bne.n	8013f26 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013e5a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e5e:	091b      	lsrs	r3, r3, #4
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	f003 0301 	and.w	r3, r3, #1
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d00e      	beq.n	8013e88 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013e6a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e74:	095b      	lsrs	r3, r3, #5
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	3b01      	subs	r3, #1
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013e86:	e00b      	b.n	8013ea0 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013e88:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e92:	095b      	lsrs	r3, r3, #5
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	1ad3      	subs	r3, r2, r3
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013ea0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013eaa:	095b      	lsrs	r3, r3, #5
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	4413      	add	r3, r2
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8013eb8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d011      	beq.n	8013ee8 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013ec4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013ec8:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8013eca:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ece:	f003 020f 	and.w	r2, r3, #15
 8013ed2:	0fd3      	lsrs	r3, r2, #31
 8013ed4:	4413      	add	r3, r2
 8013ed6:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	1acb      	subs	r3, r1, r3
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8013ee6:	e00f      	b.n	8013f08 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8013ee8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013eec:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013eee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ef2:	f003 020f 	and.w	r2, r3, #15
 8013ef6:	0fd3      	lsrs	r3, r2, #31
 8013ef8:	4413      	add	r3, r2
 8013efa:	105b      	asrs	r3, r3, #1
 8013efc:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	440b      	add	r3, r1
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8013f08:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013f0c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8013f0e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f12:	f003 020f 	and.w	r2, r3, #15
 8013f16:	0fd3      	lsrs	r3, r2, #31
 8013f18:	4413      	add	r3, r2
 8013f1a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	440b      	add	r3, r1
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013f26:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d133      	bne.n	8013f96 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013f2e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013f38:	4413      	add	r3, r2
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	005b      	lsls	r3, r3, #1
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	3b0f      	subs	r3, #15
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8013f48:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8013f52:	4413      	add	r3, r2
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	3b0f      	subs	r3, #15
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8013f62:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013f6c:	4413      	add	r3, r2
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	3b0f      	subs	r3, #15
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013f7c:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013f86:	4413      	add	r3, r2
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	3b0f      	subs	r3, #15
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013f96:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f040 8135 	bne.w	801420a <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013fa0:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013fa4:	17da      	asrs	r2, r3, #31
 8013fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013faa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013fae:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013fb2:	17da      	asrs	r2, r3, #31
 8013fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013fbc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013fc6:	fb02 f203 	mul.w	r2, r2, r3
 8013fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013fce:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013fd2:	4601      	mov	r1, r0
 8013fd4:	fb01 f303 	mul.w	r3, r1, r3
 8013fd8:	4413      	add	r3, r2
 8013fda:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013fde:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013fe2:	fba2 4501 	umull	r4, r5, r2, r1
 8013fe6:	442b      	add	r3, r5
 8013fe8:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013fea:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013fee:	17da      	asrs	r2, r3, #31
 8013ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013ff4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013ff8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013ffc:	17da      	asrs	r2, r3, #31
 8013ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014002:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014006:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801400a:	460b      	mov	r3, r1
 801400c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014010:	fb02 f203 	mul.w	r2, r2, r3
 8014014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014018:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 801401c:	4601      	mov	r1, r0
 801401e:	fb01 f303 	mul.w	r3, r1, r3
 8014022:	4413      	add	r3, r2
 8014024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014028:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801402c:	fba2 8901 	umull	r8, r9, r2, r1
 8014030:	444b      	add	r3, r9
 8014032:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014034:	eb14 0308 	adds.w	r3, r4, r8
 8014038:	64bb      	str	r3, [r7, #72]	; 0x48
 801403a:	eb45 0309 	adc.w	r3, r5, r9
 801403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014040:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014044:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8014048:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801404c:	1c51      	adds	r1, r2, #1
 801404e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8014052:	f143 0300 	adc.w	r3, r3, #0
 8014056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801405a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801405e:	460b      	mov	r3, r1
 8014060:	0fdb      	lsrs	r3, r3, #31
 8014062:	2200      	movs	r2, #0
 8014064:	643b      	str	r3, [r7, #64]	; 0x40
 8014066:	647a      	str	r2, [r7, #68]	; 0x44
 8014068:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801406c:	4623      	mov	r3, r4
 801406e:	4602      	mov	r2, r0
 8014070:	189b      	adds	r3, r3, r2
 8014072:	63bb      	str	r3, [r7, #56]	; 0x38
 8014074:	460b      	mov	r3, r1
 8014076:	462a      	mov	r2, r5
 8014078:	eb42 0303 	adc.w	r3, r2, r3
 801407c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801407e:	f04f 0200 	mov.w	r2, #0
 8014082:	f04f 0300 	mov.w	r3, #0
 8014086:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801408a:	4621      	mov	r1, r4
 801408c:	084a      	lsrs	r2, r1, #1
 801408e:	4629      	mov	r1, r5
 8014090:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014094:	4629      	mov	r1, r5
 8014096:	104b      	asrs	r3, r1, #1
 8014098:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801409c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80140a0:	2200      	movs	r2, #0
 80140a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80140a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80140aa:	f04f 0000 	mov.w	r0, #0
 80140ae:	f04f 0100 	mov.w	r1, #0
 80140b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80140b6:	462b      	mov	r3, r5
 80140b8:	0099      	lsls	r1, r3, #2
 80140ba:	4623      	mov	r3, r4
 80140bc:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80140c0:	4623      	mov	r3, r4
 80140c2:	0098      	lsls	r0, r3, #2
 80140c4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80140c8:	1814      	adds	r4, r2, r0
 80140ca:	633c      	str	r4, [r7, #48]	; 0x30
 80140cc:	414b      	adcs	r3, r1
 80140ce:	637b      	str	r3, [r7, #52]	; 0x34
 80140d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80140d4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80140d8:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80140dc:	17da      	asrs	r2, r3, #31
 80140de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80140e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80140e6:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80140ea:	17da      	asrs	r2, r3, #31
 80140ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80140f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80140f4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80140f8:	462b      	mov	r3, r5
 80140fa:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80140fe:	4642      	mov	r2, r8
 8014100:	fb02 f203 	mul.w	r2, r2, r3
 8014104:	464b      	mov	r3, r9
 8014106:	4621      	mov	r1, r4
 8014108:	fb01 f303 	mul.w	r3, r1, r3
 801410c:	4413      	add	r3, r2
 801410e:	4622      	mov	r2, r4
 8014110:	4641      	mov	r1, r8
 8014112:	fba2 ab01 	umull	sl, fp, r2, r1
 8014116:	445b      	add	r3, fp
 8014118:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801411a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 801411e:	17da      	asrs	r2, r3, #31
 8014120:	67bb      	str	r3, [r7, #120]	; 0x78
 8014122:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8014124:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8014128:	17da      	asrs	r2, r3, #31
 801412a:	673b      	str	r3, [r7, #112]	; 0x70
 801412c:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801412e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8014132:	462b      	mov	r3, r5
 8014134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8014138:	4642      	mov	r2, r8
 801413a:	fb02 f203 	mul.w	r2, r2, r3
 801413e:	464b      	mov	r3, r9
 8014140:	4621      	mov	r1, r4
 8014142:	fb01 f303 	mul.w	r3, r1, r3
 8014146:	4413      	add	r3, r2
 8014148:	4622      	mov	r2, r4
 801414a:	4641      	mov	r1, r8
 801414c:	fba2 1201 	umull	r1, r2, r2, r1
 8014150:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014154:	460a      	mov	r2, r1
 8014156:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801415a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801415e:	4413      	add	r3, r2
 8014160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014164:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8014168:	460b      	mov	r3, r1
 801416a:	eb1a 0303 	adds.w	r3, sl, r3
 801416e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014170:	4613      	mov	r3, r2
 8014172:	eb4b 0303 	adc.w	r3, fp, r3
 8014176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014178:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801417c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8014180:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014184:	1c51      	adds	r1, r2, #1
 8014186:	66b9      	str	r1, [r7, #104]	; 0x68
 8014188:	f143 0300 	adc.w	r3, r3, #0
 801418c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801418e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014192:	460b      	mov	r3, r1
 8014194:	0fdb      	lsrs	r3, r3, #31
 8014196:	2200      	movs	r2, #0
 8014198:	623b      	str	r3, [r7, #32]
 801419a:	627a      	str	r2, [r7, #36]	; 0x24
 801419c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80141a0:	4623      	mov	r3, r4
 80141a2:	4602      	mov	r2, r0
 80141a4:	189b      	adds	r3, r3, r2
 80141a6:	61bb      	str	r3, [r7, #24]
 80141a8:	460b      	mov	r3, r1
 80141aa:	462a      	mov	r2, r5
 80141ac:	eb42 0303 	adc.w	r3, r2, r3
 80141b0:	61fb      	str	r3, [r7, #28]
 80141b2:	f04f 0200 	mov.w	r2, #0
 80141b6:	f04f 0300 	mov.w	r3, #0
 80141ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80141be:	4621      	mov	r1, r4
 80141c0:	084a      	lsrs	r2, r1, #1
 80141c2:	4629      	mov	r1, r5
 80141c4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80141c8:	4629      	mov	r1, r5
 80141ca:	104b      	asrs	r3, r1, #1
 80141cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80141d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80141d4:	2200      	movs	r2, #0
 80141d6:	663b      	str	r3, [r7, #96]	; 0x60
 80141d8:	667a      	str	r2, [r7, #100]	; 0x64
 80141da:	f04f 0200 	mov.w	r2, #0
 80141de:	f04f 0300 	mov.w	r3, #0
 80141e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80141e6:	4629      	mov	r1, r5
 80141e8:	008b      	lsls	r3, r1, #2
 80141ea:	4621      	mov	r1, r4
 80141ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80141f0:	4621      	mov	r1, r4
 80141f2:	008a      	lsls	r2, r1, #2
 80141f4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80141f8:	1884      	adds	r4, r0, r2
 80141fa:	613c      	str	r4, [r7, #16]
 80141fc:	eb41 0303 	adc.w	r3, r1, r3
 8014200:	617b      	str	r3, [r7, #20]
 8014202:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014206:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801420a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801420e:	2b00      	cmp	r3, #0
 8014210:	d132      	bne.n	8014278 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8014212:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8014216:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801421a:	1884      	adds	r4, r0, r2
 801421c:	65bc      	str	r4, [r7, #88]	; 0x58
 801421e:	eb41 0303 	adc.w	r3, r1, r3
 8014222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014224:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8014228:	460b      	mov	r3, r1
 801422a:	3301      	adds	r3, #1
 801422c:	653b      	str	r3, [r7, #80]	; 0x50
 801422e:	4613      	mov	r3, r2
 8014230:	f143 0300 	adc.w	r3, r3, #0
 8014234:	657b      	str	r3, [r7, #84]	; 0x54
 8014236:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801423a:	460b      	mov	r3, r1
 801423c:	0fdb      	lsrs	r3, r3, #31
 801423e:	2200      	movs	r2, #0
 8014240:	60bb      	str	r3, [r7, #8]
 8014242:	60fa      	str	r2, [r7, #12]
 8014244:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014248:	4623      	mov	r3, r4
 801424a:	4602      	mov	r2, r0
 801424c:	189b      	adds	r3, r3, r2
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	460b      	mov	r3, r1
 8014252:	462a      	mov	r2, r5
 8014254:	eb42 0303 	adc.w	r3, r2, r3
 8014258:	607b      	str	r3, [r7, #4]
 801425a:	f04f 0200 	mov.w	r2, #0
 801425e:	f04f 0300 	mov.w	r3, #0
 8014262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014266:	4621      	mov	r1, r4
 8014268:	084a      	lsrs	r2, r1, #1
 801426a:	4629      	mov	r1, r5
 801426c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014270:	4629      	mov	r1, r5
 8014272:	104b      	asrs	r3, r1, #1
 8014274:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8014278:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801427c:	2b00      	cmp	r3, #0
 801427e:	d109      	bne.n	8014294 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8014280:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8014284:	2b00      	cmp	r3, #0
 8014286:	da05      	bge.n	8014294 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8014288:	f04f 0200 	mov.w	r2, #0
 801428c:	f04f 0300 	mov.w	r3, #0
 8014290:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8014294:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014298:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801429c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801429e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80142a8:	46bd      	mov	sp, r7
 80142aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080142ae <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80142ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80142b2:	b09a      	sub	sp, #104	; 0x68
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6478      	str	r0, [r7, #68]	; 0x44
 80142b8:	6439      	str	r1, [r7, #64]	; 0x40
 80142ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 80142bc:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 80142be:	2300      	movs	r3, #0
 80142c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 80142c4:	f04f 0200 	mov.w	r2, #0
 80142c8:	f04f 0300 	mov.w	r3, #0
 80142cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 80142d0:	f04f 0200 	mov.w	r2, #0
 80142d4:	f04f 0300 	mov.w	r3, #0
 80142d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 80142dc:	f04f 0200 	mov.w	r2, #0
 80142e0:	f04f 0300 	mov.w	r3, #0
 80142e4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 80142e8:	2300      	movs	r3, #0
 80142ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80142ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142f0:	2200      	movs	r2, #0
 80142f2:	633b      	str	r3, [r7, #48]	; 0x30
 80142f4:	637a      	str	r2, [r7, #52]	; 0x34
 80142f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80142fc:	2200      	movs	r2, #0
 80142fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8014300:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8014306:	460b      	mov	r3, r1
 8014308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801430a:	fb02 f203 	mul.w	r2, r2, r3
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8014314:	4601      	mov	r1, r0
 8014316:	fb01 f303 	mul.w	r3, r1, r3
 801431a:	4413      	add	r3, r2
 801431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801431e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014320:	fba2 4501 	umull	r4, r5, r2, r1
 8014324:	442b      	add	r3, r5
 8014326:	461d      	mov	r5, r3
 8014328:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 801432c:	623b      	str	r3, [r7, #32]
 801432e:	f145 0300 	adc.w	r3, r5, #0
 8014332:	627b      	str	r3, [r7, #36]	; 0x24
 8014334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014338:	f04f 0300 	mov.w	r3, #0
 801433c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014340:	f7eb ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8014344:	4602      	mov	r2, r0
 8014346:	460b      	mov	r3, r1
 8014348:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801434e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014352:	b29b      	uxth	r3, r3
 8014354:	2200      	movs	r2, #0
 8014356:	61bb      	str	r3, [r7, #24]
 8014358:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801435c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014360:	4622      	mov	r2, r4
 8014362:	fb02 f203 	mul.w	r2, r2, r3
 8014366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014368:	4629      	mov	r1, r5
 801436a:	fb01 f303 	mul.w	r3, r1, r3
 801436e:	4413      	add	r3, r2
 8014370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014372:	4621      	mov	r1, r4
 8014374:	fba2 ab01 	umull	sl, fp, r2, r1
 8014378:	445b      	add	r3, fp
 801437a:	469b      	mov	fp, r3
 801437c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8014380:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8014384:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014388:	f04f 0200 	mov.w	r2, #0
 801438c:	f04f 0300 	mov.w	r3, #0
 8014390:	0a02      	lsrs	r2, r0, #8
 8014392:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014396:	0a0b      	lsrs	r3, r1, #8
 8014398:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801439c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80143a0:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 80143a4:	6139      	str	r1, [r7, #16]
 80143a6:	f143 0300 	adc.w	r3, r3, #0
 80143aa:	617b      	str	r3, [r7, #20]
 80143ac:	f04f 0200 	mov.w	r2, #0
 80143b0:	f04f 0300 	mov.w	r3, #0
 80143b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80143b8:	4621      	mov	r1, r4
 80143ba:	0aca      	lsrs	r2, r1, #11
 80143bc:	4629      	mov	r1, r5
 80143be:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80143c2:	4629      	mov	r1, r5
 80143c4:	0acb      	lsrs	r3, r1, #11
 80143c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 80143ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d305      	bcc.n	80143de <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80143d2:	f04f 32ff 	mov.w	r2, #4294967295
 80143d6:	f04f 0300 	mov.w	r3, #0
 80143da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80143de:	2300      	movs	r3, #0
 80143e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80143e4:	e041      	b.n	801446a <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80143e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80143ec:	3302      	adds	r3, #2
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	4413      	add	r3, r2
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	60bb      	str	r3, [r7, #8]
 80143f8:	60fa      	str	r2, [r7, #12]
 80143fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80143fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014400:	4622      	mov	r2, r4
 8014402:	fb02 f203 	mul.w	r2, r2, r3
 8014406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014408:	4629      	mov	r1, r5
 801440a:	fb01 f303 	mul.w	r3, r1, r3
 801440e:	4413      	add	r3, r2
 8014410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014412:	4621      	mov	r1, r4
 8014414:	fba2 8901 	umull	r8, r9, r2, r1
 8014418:	444b      	add	r3, r9
 801441a:	4699      	mov	r9, r3
 801441c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8014420:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8014424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014428:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 801442c:	6039      	str	r1, [r7, #0]
 801442e:	f143 0300 	adc.w	r3, r3, #0
 8014432:	607b      	str	r3, [r7, #4]
 8014434:	f04f 0200 	mov.w	r2, #0
 8014438:	f04f 0300 	mov.w	r3, #0
 801443c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014440:	4621      	mov	r1, r4
 8014442:	0a8a      	lsrs	r2, r1, #10
 8014444:	4629      	mov	r1, r5
 8014446:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801444a:	4629      	mov	r1, r5
 801444c:	0a8b      	lsrs	r3, r1, #10
 801444e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8014452:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014456:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801445a:	3206      	adds	r2, #6
 801445c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014464:	3301      	adds	r3, #1
 8014466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801446c:	7a9b      	ldrb	r3, [r3, #10]
 801446e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014472:	429a      	cmp	r2, r3
 8014474:	d3b7      	bcc.n	80143e6 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8014476:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801447a:	4618      	mov	r0, r3
 801447c:	3768      	adds	r7, #104	; 0x68
 801447e:	46bd      	mov	sp, r7
 8014480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014484 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8014484:	b590      	push	{r4, r7, lr}
 8014486:	b085      	sub	sp, #20
 8014488:	af00      	add	r7, sp, #0
 801448a:	4604      	mov	r4, r0
 801448c:	4608      	mov	r0, r1
 801448e:	4611      	mov	r1, r2
 8014490:	461a      	mov	r2, r3
 8014492:	4623      	mov	r3, r4
 8014494:	71fb      	strb	r3, [r7, #7]
 8014496:	4603      	mov	r3, r0
 8014498:	71bb      	strb	r3, [r7, #6]
 801449a:	460b      	mov	r3, r1
 801449c:	717b      	strb	r3, [r7, #5]
 801449e:	4613      	mov	r3, r2
 80144a0:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80144a2:	2300      	movs	r3, #0
 80144a4:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 80144aa:	2300      	movs	r3, #0
 80144ac:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 80144ae:	2300      	movs	r3, #0
 80144b0:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	2210      	movs	r2, #16
 80144b6:	701a      	strb	r2, [r3, #0]

	i = 0;
 80144b8:	2300      	movs	r3, #0
 80144ba:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 80144bc:	2300      	movs	r3, #0
 80144be:	73fb      	strb	r3, [r7, #15]
 80144c0:	e046      	b.n	8014550 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 80144c2:	2300      	movs	r3, #0
 80144c4:	73bb      	strb	r3, [r7, #14]
 80144c6:	e03b      	b.n	8014540 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 80144c8:	89bb      	ldrh	r3, [r7, #12]
 80144ca:	2b0f      	cmp	r3, #15
 80144cc:	d832      	bhi.n	8014534 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 80144ce:	89bb      	ldrh	r3, [r7, #12]
 80144d0:	b2da      	uxtb	r2, r3
 80144d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d4:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 80144d6:	89bb      	ldrh	r3, [r7, #12]
 80144d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144da:	3306      	adds	r3, #6
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	4413      	add	r3, r2
 80144e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80144e4:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 80144e6:	89bb      	ldrh	r3, [r7, #12]
 80144e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144ea:	3306      	adds	r3, #6
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	4413      	add	r3, r2
 80144f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80144f4:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 80144f6:	7bfa      	ldrb	r2, [r7, #15]
 80144f8:	79bb      	ldrb	r3, [r7, #6]
 80144fa:	fb12 f303 	smulbb	r3, r2, r3
 80144fe:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8014500:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8014502:	79fa      	ldrb	r2, [r7, #7]
 8014504:	440a      	add	r2, r1
 8014506:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8014508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801450a:	3306      	adds	r3, #6
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	4413      	add	r3, r2
 8014510:	460a      	mov	r2, r1
 8014512:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8014514:	7bba      	ldrb	r2, [r7, #14]
 8014516:	f897 3020 	ldrb.w	r3, [r7, #32]
 801451a:	fb12 f303 	smulbb	r3, r2, r3
 801451e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8014520:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8014522:	793a      	ldrb	r2, [r7, #4]
 8014524:	440a      	add	r2, r1
 8014526:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8014528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801452a:	3306      	adds	r3, #6
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	4413      	add	r3, r2
 8014530:	460a      	mov	r2, r1
 8014532:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8014534:	89bb      	ldrh	r3, [r7, #12]
 8014536:	3301      	adds	r3, #1
 8014538:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801453a:	7bbb      	ldrb	r3, [r7, #14]
 801453c:	3301      	adds	r3, #1
 801453e:	73bb      	strb	r3, [r7, #14]
 8014540:	7bba      	ldrb	r2, [r7, #14]
 8014542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014546:	429a      	cmp	r2, r3
 8014548:	d3be      	bcc.n	80144c8 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801454a:	7bfb      	ldrb	r3, [r7, #15]
 801454c:	3301      	adds	r3, #1
 801454e:	73fb      	strb	r3, [r7, #15]
 8014550:	7bfa      	ldrb	r2, [r7, #15]
 8014552:	797b      	ldrb	r3, [r7, #5]
 8014554:	429a      	cmp	r2, r3
 8014556:	d3b4      	bcc.n	80144c2 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8014558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801455a:	f000 f86c 	bl	8014636 <VL53L1_init_zone_config_histogram_bins>
 801455e:	4603      	mov	r3, r0
 8014560:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8014562:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3714      	adds	r7, #20
 801456a:	46bd      	mov	sp, r7
 801456c:	bd90      	pop	{r4, r7, pc}

0801456e <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b084      	sub	sp, #16
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
 8014576:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014578:	2300      	movs	r3, #0
 801457a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2205      	movs	r2, #5
 8014580:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	2204      	movs	r2, #4
 8014586:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	220f      	movs	r2, #15
 801458c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	2207      	movs	r2, #7
 8014592:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	2204      	movs	r2, #4
 8014598:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	2208      	movs	r2, #8
 801459e:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	220f      	movs	r2, #15
 80145a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	2207      	movs	r2, #7
 80145ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	220c      	movs	r2, #12
 80145b4:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2208      	movs	r2, #8
 80145bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	2207      	movs	r2, #7
 80145c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	220f      	movs	r2, #15
 80145cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	2208      	movs	r2, #8
 80145d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2204      	movs	r2, #4
 80145dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	2207      	movs	r2, #7
 80145e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	220f      	movs	r2, #15
 80145ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	2208      	movs	r2, #8
 80145f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	220c      	movs	r2, #12
 80145fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	220f      	movs	r2, #15
 8014604:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	220f      	movs	r2, #15
 801460c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2208      	movs	r2, #8
 8014614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	2208      	movs	r2, #8
 801461c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8014620:	6838      	ldr	r0, [r7, #0]
 8014622:	f000 f808 	bl	8014636 <VL53L1_init_zone_config_histogram_bins>
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}

08014636 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8014636:	b480      	push	{r7}
 8014638:	b085      	sub	sp, #20
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801463e:	2300      	movs	r3, #0
 8014640:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8014642:	2300      	movs	r3, #0
 8014644:	73fb      	strb	r3, [r7, #15]
 8014646:	e008      	b.n	801465a <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8014648:	7bfb      	ldrb	r3, [r7, #15]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	4413      	add	r3, r2
 801464e:	2201      	movs	r2, #1
 8014650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8014654:	7bfb      	ldrb	r3, [r7, #15]
 8014656:	3301      	adds	r3, #1
 8014658:	73fb      	strb	r3, [r7, #15]
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	7bfa      	ldrb	r2, [r7, #15]
 8014660:	429a      	cmp	r2, r3
 8014662:	d3f1      	bcc.n	8014648 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8014664:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8014668:	4618      	mov	r0, r3
 801466a:	3714      	adds	r7, #20
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	68fa      	ldr	r2, [r7, #12]
 8014686:	8910      	ldrh	r0, [r2, #8]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	b292      	uxth	r2, r2
 801468c:	68b9      	ldr	r1, [r7, #8]
 801468e:	4798      	blx	r3
 8014690:	4603      	mov	r3, r0
}
 8014692:	4618      	mov	r0, r3
 8014694:	3710      	adds	r7, #16
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801469a:	b580      	push	{r7, lr}
 801469c:	b084      	sub	sp, #16
 801469e:	af00      	add	r7, sp, #0
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	60b9      	str	r1, [r7, #8]
 80146a4:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	68fa      	ldr	r2, [r7, #12]
 80146ac:	8910      	ldrh	r0, [r2, #8]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	b292      	uxth	r2, r2
 80146b2:	68b9      	ldr	r1, [r7, #8]
 80146b4:	4798      	blx	r3
 80146b6:	4603      	mov	r3, r0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3710      	adds	r7, #16
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	607a      	str	r2, [r7, #4]
 80146ca:	603b      	str	r3, [r7, #0]
 80146cc:	460b      	mov	r3, r1
 80146ce:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80146d0:	2300      	movs	r3, #0
 80146d2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2bff      	cmp	r3, #255	; 0xff
 80146d8:	d902      	bls.n	80146e0 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80146da:	f06f 0303 	mvn.w	r3, #3
 80146de:	e01d      	b.n	801471c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80146e0:	897b      	ldrh	r3, [r7, #10]
 80146e2:	0a1b      	lsrs	r3, r3, #8
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	b2da      	uxtb	r2, r3
 80146e8:	4b0e      	ldr	r3, [pc, #56]	; (8014724 <VL53L1_WriteMulti+0x64>)
 80146ea:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80146ec:	897b      	ldrh	r3, [r7, #10]
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	4b0c      	ldr	r3, [pc, #48]	; (8014724 <VL53L1_WriteMulti+0x64>)
 80146f2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80146f4:	683a      	ldr	r2, [r7, #0]
 80146f6:	6879      	ldr	r1, [r7, #4]
 80146f8:	480b      	ldr	r0, [pc, #44]	; (8014728 <VL53L1_WriteMulti+0x68>)
 80146fa:	f004 ffa5 	bl	8019648 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	3302      	adds	r3, #2
 8014702:	461a      	mov	r2, r3
 8014704:	4907      	ldr	r1, [pc, #28]	; (8014724 <VL53L1_WriteMulti+0x64>)
 8014706:	68f8      	ldr	r0, [r7, #12]
 8014708:	f7ff ffb4 	bl	8014674 <_I2CWrite>
 801470c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014714:	23f3      	movs	r3, #243	; 0xf3
 8014716:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801471c:	4618      	mov	r0, r3
 801471e:	3718      	adds	r7, #24
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	20008528 	.word	0x20008528
 8014728:	2000852a 	.word	0x2000852a

0801472c <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	607a      	str	r2, [r7, #4]
 8014736:	603b      	str	r3, [r7, #0]
 8014738:	460b      	mov	r3, r1
 801473a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801473c:	2300      	movs	r3, #0
 801473e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014740:	897b      	ldrh	r3, [r7, #10]
 8014742:	0a1b      	lsrs	r3, r3, #8
 8014744:	b29b      	uxth	r3, r3
 8014746:	b2da      	uxtb	r2, r3
 8014748:	4b12      	ldr	r3, [pc, #72]	; (8014794 <VL53L1_ReadMulti+0x68>)
 801474a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801474c:	897b      	ldrh	r3, [r7, #10]
 801474e:	b2da      	uxtb	r2, r3
 8014750:	4b10      	ldr	r3, [pc, #64]	; (8014794 <VL53L1_ReadMulti+0x68>)
 8014752:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014754:	2202      	movs	r2, #2
 8014756:	490f      	ldr	r1, [pc, #60]	; (8014794 <VL53L1_ReadMulti+0x68>)
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f7ff ff8b 	bl	8014674 <_I2CWrite>
 801475e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014766:	23f3      	movs	r3, #243	; 0xf3
 8014768:	75fb      	strb	r3, [r7, #23]
        goto done;
 801476a:	e00c      	b.n	8014786 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801476c:	683a      	ldr	r2, [r7, #0]
 801476e:	6879      	ldr	r1, [r7, #4]
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f7ff ff92 	bl	801469a <_I2CRead>
 8014776:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801477e:	23f3      	movs	r3, #243	; 0xf3
 8014780:	75fb      	strb	r3, [r7, #23]
 8014782:	e000      	b.n	8014786 <VL53L1_ReadMulti+0x5a>
    }
done:
 8014784:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801478a:	4618      	mov	r0, r3
 801478c:	3718      	adds	r7, #24
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop
 8014794:	20008528 	.word	0x20008528

08014798 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	807b      	strh	r3, [r7, #2]
 80147a4:	4613      	mov	r3, r2
 80147a6:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80147a8:	2300      	movs	r3, #0
 80147aa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80147ac:	887b      	ldrh	r3, [r7, #2]
 80147ae:	0a1b      	lsrs	r3, r3, #8
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	b2da      	uxtb	r2, r3
 80147b4:	4b0c      	ldr	r3, [pc, #48]	; (80147e8 <VL53L1_WrByte+0x50>)
 80147b6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80147b8:	887b      	ldrh	r3, [r7, #2]
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	4b0a      	ldr	r3, [pc, #40]	; (80147e8 <VL53L1_WrByte+0x50>)
 80147be:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80147c0:	4a09      	ldr	r2, [pc, #36]	; (80147e8 <VL53L1_WrByte+0x50>)
 80147c2:	787b      	ldrb	r3, [r7, #1]
 80147c4:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80147c6:	2203      	movs	r2, #3
 80147c8:	4907      	ldr	r1, [pc, #28]	; (80147e8 <VL53L1_WrByte+0x50>)
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7ff ff52 	bl	8014674 <_I2CWrite>
 80147d0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d001      	beq.n	80147dc <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80147d8:	23f3      	movs	r3, #243	; 0xf3
 80147da:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80147dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3710      	adds	r7, #16
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	20008528 	.word	0x20008528

080147ec <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	460b      	mov	r3, r1
 80147f6:	807b      	strh	r3, [r7, #2]
 80147f8:	4613      	mov	r3, r2
 80147fa:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80147fc:	2300      	movs	r3, #0
 80147fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014800:	887b      	ldrh	r3, [r7, #2]
 8014802:	0a1b      	lsrs	r3, r3, #8
 8014804:	b29b      	uxth	r3, r3
 8014806:	b2da      	uxtb	r2, r3
 8014808:	4b10      	ldr	r3, [pc, #64]	; (801484c <VL53L1_WrWord+0x60>)
 801480a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801480c:	887b      	ldrh	r3, [r7, #2]
 801480e:	b2da      	uxtb	r2, r3
 8014810:	4b0e      	ldr	r3, [pc, #56]	; (801484c <VL53L1_WrWord+0x60>)
 8014812:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8014814:	883b      	ldrh	r3, [r7, #0]
 8014816:	0a1b      	lsrs	r3, r3, #8
 8014818:	b29b      	uxth	r3, r3
 801481a:	b2da      	uxtb	r2, r3
 801481c:	4b0b      	ldr	r3, [pc, #44]	; (801484c <VL53L1_WrWord+0x60>)
 801481e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8014820:	883b      	ldrh	r3, [r7, #0]
 8014822:	b2da      	uxtb	r2, r3
 8014824:	4b09      	ldr	r3, [pc, #36]	; (801484c <VL53L1_WrWord+0x60>)
 8014826:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8014828:	2204      	movs	r2, #4
 801482a:	4908      	ldr	r1, [pc, #32]	; (801484c <VL53L1_WrWord+0x60>)
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7ff ff21 	bl	8014674 <_I2CWrite>
 8014832:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d001      	beq.n	801483e <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801483a:	23f3      	movs	r3, #243	; 0xf3
 801483c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 801483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014842:	4618      	mov	r0, r3
 8014844:	3710      	adds	r7, #16
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop
 801484c:	20008528 	.word	0x20008528

08014850 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8014850:	b580      	push	{r7, lr}
 8014852:	b086      	sub	sp, #24
 8014854:	af00      	add	r7, sp, #0
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	460b      	mov	r3, r1
 801485a:	607a      	str	r2, [r7, #4]
 801485c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801485e:	2300      	movs	r3, #0
 8014860:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8014862:	897b      	ldrh	r3, [r7, #10]
 8014864:	0a1b      	lsrs	r3, r3, #8
 8014866:	b29b      	uxth	r3, r3
 8014868:	b2da      	uxtb	r2, r3
 801486a:	4b12      	ldr	r3, [pc, #72]	; (80148b4 <VL53L1_RdByte+0x64>)
 801486c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801486e:	897b      	ldrh	r3, [r7, #10]
 8014870:	b2da      	uxtb	r2, r3
 8014872:	4b10      	ldr	r3, [pc, #64]	; (80148b4 <VL53L1_RdByte+0x64>)
 8014874:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014876:	2202      	movs	r2, #2
 8014878:	490e      	ldr	r1, [pc, #56]	; (80148b4 <VL53L1_RdByte+0x64>)
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f7ff fefa 	bl	8014674 <_I2CWrite>
 8014880:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d002      	beq.n	801488e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014888:	23f3      	movs	r3, #243	; 0xf3
 801488a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801488c:	e00c      	b.n	80148a8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801488e:	2201      	movs	r2, #1
 8014890:	6879      	ldr	r1, [r7, #4]
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f7ff ff01 	bl	801469a <_I2CRead>
 8014898:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148a0:	23f3      	movs	r3, #243	; 0xf3
 80148a2:	75fb      	strb	r3, [r7, #23]
 80148a4:	e000      	b.n	80148a8 <VL53L1_RdByte+0x58>
    }
done:
 80148a6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80148a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3718      	adds	r7, #24
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	20008528 	.word	0x20008528

080148b8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	460b      	mov	r3, r1
 80148c2:	607a      	str	r2, [r7, #4]
 80148c4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80148c6:	2300      	movs	r3, #0
 80148c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80148ca:	897b      	ldrh	r3, [r7, #10]
 80148cc:	0a1b      	lsrs	r3, r3, #8
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	b2da      	uxtb	r2, r3
 80148d2:	4b18      	ldr	r3, [pc, #96]	; (8014934 <VL53L1_RdWord+0x7c>)
 80148d4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80148d6:	897b      	ldrh	r3, [r7, #10]
 80148d8:	b2da      	uxtb	r2, r3
 80148da:	4b16      	ldr	r3, [pc, #88]	; (8014934 <VL53L1_RdWord+0x7c>)
 80148dc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80148de:	2202      	movs	r2, #2
 80148e0:	4914      	ldr	r1, [pc, #80]	; (8014934 <VL53L1_RdWord+0x7c>)
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f7ff fec6 	bl	8014674 <_I2CWrite>
 80148e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d002      	beq.n	80148f6 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148f0:	23f3      	movs	r3, #243	; 0xf3
 80148f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80148f4:	e017      	b.n	8014926 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80148f6:	2202      	movs	r2, #2
 80148f8:	490e      	ldr	r1, [pc, #56]	; (8014934 <VL53L1_RdWord+0x7c>)
 80148fa:	68f8      	ldr	r0, [r7, #12]
 80148fc:	f7ff fecd 	bl	801469a <_I2CRead>
 8014900:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014908:	23f3      	movs	r3, #243	; 0xf3
 801490a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801490c:	e00b      	b.n	8014926 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801490e:	4b09      	ldr	r3, [pc, #36]	; (8014934 <VL53L1_RdWord+0x7c>)
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	b29b      	uxth	r3, r3
 8014914:	021b      	lsls	r3, r3, #8
 8014916:	b29a      	uxth	r2, r3
 8014918:	4b06      	ldr	r3, [pc, #24]	; (8014934 <VL53L1_RdWord+0x7c>)
 801491a:	785b      	ldrb	r3, [r3, #1]
 801491c:	b29b      	uxth	r3, r3
 801491e:	4413      	add	r3, r2
 8014920:	b29a      	uxth	r2, r3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8014926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801492a:	4618      	mov	r0, r3
 801492c:	3718      	adds	r7, #24
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	20008528 	.word	0x20008528

08014938 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8014942:	2300      	movs	r3, #0
 8014944:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	695b      	ldr	r3, [r3, #20]
 801494a:	4798      	blx	r3
 801494c:	4603      	mov	r3, r0
 801494e:	461a      	mov	r2, r3
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8014954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	4619      	mov	r1, r3
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f8d2 	bl	8014b18 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
	...

08014980 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	4a07      	ldr	r2, [pc, #28]	; (80149ac <VL53L1_WaitUs+0x2c>)
 801498e:	fb82 1203 	smull	r1, r2, r2, r3
 8014992:	1192      	asrs	r2, r2, #6
 8014994:	17db      	asrs	r3, r3, #31
 8014996:	1ad3      	subs	r3, r2, r3
 8014998:	4619      	mov	r1, r3
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 f8bc 	bl	8014b18 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	10624dd3 	.word	0x10624dd3

080149b0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80149b0:	b590      	push	{r4, r7, lr}
 80149b2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80149bc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 80149c0:	6020      	str	r0, [r4, #0]
 80149c2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80149c6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80149ca:	6001      	str	r1, [r0, #0]
 80149cc:	4619      	mov	r1, r3
 80149ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80149d2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80149d6:	801a      	strh	r2, [r3, #0]
 80149d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80149dc:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 80149e0:	460a      	mov	r2, r1
 80149e2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80149e4:	2300      	movs	r3, #0
 80149e6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80149ea:	2300      	movs	r3, #0
 80149ec:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80149f0:	2300      	movs	r3, #0
 80149f2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80149f6:	2300      	movs	r3, #0
 80149f8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80149fc:	2300      	movs	r3, #0
 80149fe:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014a02:	2300      	movs	r3, #0
 8014a04:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8014a08:	f107 0310 	add.w	r3, r7, #16
 8014a0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014a10:	4940      	ldr	r1, [pc, #256]	; (8014b14 <VL53L1_WaitValueMaskEx+0x164>)
 8014a12:	4618      	mov	r0, r3
 8014a14:	f004 fed2 	bl	80197bc <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8014a18:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014a1c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a20:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014a24:	4611      	mov	r1, r2
 8014a26:	6818      	ldr	r0, [r3, #0]
 8014a28:	f7ff ff86 	bl	8014938 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8014a2c:	e04e      	b.n	8014acc <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8014a2e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d110      	bne.n	8014a58 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8014a36:	f207 2213 	addw	r2, r7, #531	; 0x213
 8014a3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a3e:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014a42:	8819      	ldrh	r1, [r3, #0]
 8014a44:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a48:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	f7ff feff 	bl	8014850 <VL53L1_RdByte>
 8014a52:	4603      	mov	r3, r0
 8014a54:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8014a58:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8014a5c:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014a60:	4013      	ands	r3, r2
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8014a68:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014a6c:	7812      	ldrb	r2, [r2, #0]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d102      	bne.n	8014a78 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014a72:	2301      	movs	r3, #1
 8014a74:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8014a78:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d114      	bne.n	8014aaa <VL53L1_WaitValueMaskEx+0xfa>
 8014a80:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d110      	bne.n	8014aaa <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014a88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d00c      	beq.n	8014aaa <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014a90:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014a94:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a98:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	6818      	ldr	r0, [r3, #0]
 8014aa0:	f7ff ff5e 	bl	8014960 <VL53L1_WaitMs>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014aaa:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014aae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014ab2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014ab6:	4611      	mov	r1, r2
 8014ab8:	6818      	ldr	r0, [r3, #0]
 8014aba:	f7ff ff3d 	bl	8014938 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014abe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014ac2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014acc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d10c      	bne.n	8014aee <VL53L1_WaitValueMaskEx+0x13e>
 8014ad4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014ad8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014adc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d203      	bcs.n	8014aee <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8014ae6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d09f      	beq.n	8014a2e <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014aee:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d106      	bne.n	8014b04 <VL53L1_WaitValueMaskEx+0x154>
 8014af6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d102      	bne.n	8014b04 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014afe:	23f9      	movs	r3, #249	; 0xf9
 8014b00:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014b04:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd90      	pop	{r4, r7, pc}
 8014b12:	bf00      	nop
 8014b14:	0801aa50 	.word	0x0801aa50

08014b18 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	695b      	ldr	r3, [r3, #20]
 8014b26:	4798      	blx	r3
 8014b28:	4603      	mov	r3, r0
 8014b2a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014b2c:	bf00      	nop
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	695b      	ldr	r3, [r3, #20]
 8014b32:	4798      	blx	r3
 8014b34:	4603      	mov	r3, r0
 8014b36:	461a      	mov	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	683a      	ldr	r2, [r7, #0]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d8f5      	bhi.n	8014b2e <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014b42:	2300      	movs	r3, #0
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3710      	adds	r7, #16
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b08c      	sub	sp, #48	; 0x30
 8014b50:	af06      	add	r7, sp, #24
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	607a      	str	r2, [r7, #4]
 8014b58:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b60:	9304      	str	r3, [sp, #16]
 8014b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b64:	9303      	str	r3, [sp, #12]
 8014b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	683a      	ldr	r2, [r7, #0]
 8014b76:	6879      	ldr	r1, [r7, #4]
 8014b78:	68b8      	ldr	r0, [r7, #8]
 8014b7a:	f7fc fefb 	bl	8011974 <VL53L1_hist_process_data>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3718      	adds	r7, #24
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b084      	sub	sp, #16
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
 8014b96:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d103      	bne.n	8014ba6 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014b9e:	f06f 0301 	mvn.w	r3, #1
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	e023      	b.n	8014bee <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	685a      	ldr	r2, [r3, #4]
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	891a      	ldrh	r2, [r3, #8]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	68da      	ldr	r2, [r3, #12]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	691a      	ldr	r2, [r3, #16]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	695a      	ldr	r2, [r3, #20]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d004      	beq.n	8014be8 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	4798      	blx	r3
 8014be4:	60f8      	str	r0, [r7, #12]
 8014be6:	e002      	b.n	8014bee <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014be8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014bee:	68fb      	ldr	r3, [r7, #12]
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3710      	adds	r7, #16
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c06:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d003      	beq.n	8014c16 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c12:	60fb      	str	r3, [r7, #12]
 8014c14:	e04d      	b.n	8014cb2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7ed f8d1 	bl	8001dbe <VL53L1_WaitDeviceBooted>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d003      	beq.n	8014c2a <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014c22:	f04f 33ff 	mov.w	r3, #4294967295
 8014c26:	60fb      	str	r3, [r7, #12]
 8014c28:	e043      	b.n	8014cb2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7ed f847 	bl	8001cbe <VL53L1_DataInit>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d003      	beq.n	8014c3e <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014c36:	f04f 33ff 	mov.w	r3, #4294967295
 8014c3a:	60fb      	str	r3, [r7, #12]
 8014c3c:	e039      	b.n	8014cb2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7ed f892 	bl	8001d68 <VL53L1_StaticInit>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d003      	beq.n	8014c52 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c4e:	60fb      	str	r3, [r7, #12]
 8014c50:	e02f      	b.n	8014cb2 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7ee fe8a 	bl	800396c <VL53L1_PerformRefSpadManagement>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d003      	beq.n	8014c66 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	e025      	b.n	8014cb2 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c78:	2200      	movs	r2, #0
 8014c7a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c84:	2200      	movs	r2, #0
 8014c86:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c90:	2200      	movs	r2, #0
 8014c92:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ca8:	2201      	movs	r2, #1
 8014caa:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc8:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014cd0:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014cd4:	2b01      	cmp	r3, #1
 8014cd6:	d111      	bne.n	8014cfc <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	4798      	blx	r3
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d003      	beq.n	8014cec <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ce8:	60fb      	str	r3, [r7, #12]
 8014cea:	e007      	b.n	8014cfc <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014cec:	2300      	movs	r3, #0
 8014cee:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3710      	adds	r7, #16
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}

08014d06 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014d06:	b580      	push	{r7, lr}
 8014d08:	b084      	sub	sp, #16
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
 8014d0e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d002      	beq.n	8014d1c <VL53L1CB_ReadID+0x16>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d103      	bne.n	8014d24 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d1c:	f06f 0301 	mvn.w	r3, #1
 8014d20:	60fb      	str	r3, [r7, #12]
 8014d22:	e00a      	b.n	8014d3a <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	2200      	movs	r2, #0
 8014d28:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014d2a:	683a      	ldr	r2, [r7, #0]
 8014d2c:	f240 110f 	movw	r1, #271	; 0x10f
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f7ff fdc1 	bl	80148b8 <VL53L1_RdWord>
 8014d36:	4603      	mov	r3, r0
 8014d38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3710      	adds	r7, #16
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b085      	sub	sp, #20
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d002      	beq.n	8014d5a <VL53L1CB_GetCapabilities+0x16>
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d103      	bne.n	8014d62 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d5a:	f06f 0301 	mvn.w	r3, #1
 8014d5e:	60fb      	str	r3, [r7, #12]
 8014d60:	e00d      	b.n	8014d7e <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	2201      	movs	r2, #1
 8014d66:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	2204      	movs	r2, #4
 8014d6c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2201      	movs	r2, #1
 8014d72:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2200      	movs	r2, #0
 8014d78:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3714      	adds	r7, #20
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d009      	beq.n	8014db0 <VL53L1CB_ConfigProfile+0x24>
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d006      	beq.n	8014db0 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014da8:	7afb      	ldrb	r3, [r7, #11]
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	d103      	bne.n	8014db6 <VL53L1CB_ConfigProfile+0x2a>
 8014dae:	e00c      	b.n	8014dca <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014db0:	f06f 0301 	mvn.w	r3, #1
 8014db4:	e043      	b.n	8014e3e <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014db6:	7afb      	ldrb	r3, [r7, #11]
 8014db8:	2b02      	cmp	r3, #2
 8014dba:	d006      	beq.n	8014dca <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014dbc:	7afb      	ldrb	r3, [r7, #11]
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d003      	beq.n	8014dca <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014dc2:	f06f 0301 	mvn.w	r3, #1
 8014dc6:	60fb      	str	r3, [r7, #12]
 8014dc8:	e038      	b.n	8014e3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014dca:	7afb      	ldrb	r3, [r7, #11]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f7ed f970 	bl	80020b4 <VL53L1_SetDistanceMode>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d003      	beq.n	8014de2 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014dda:	f04f 33ff 	mov.w	r3, #4294967295
 8014dde:	60fb      	str	r3, [r7, #12]
 8014de0:	e02c      	b.n	8014e3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014dea:	fb02 f303 	mul.w	r3, r2, r3
 8014dee:	4619      	mov	r1, r3
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7ed f9ed 	bl	80021d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d003      	beq.n	8014e04 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014e00:	60fb      	str	r3, [r7, #12]
 8014e02:	e01b      	b.n	8014e3c <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	bf14      	ite	ne
 8014e0c:	2301      	movne	r3, #1
 8014e0e:	2300      	moveq	r3, #0
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	461a      	mov	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e1a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	bf14      	ite	ne
 8014e26:	2301      	movne	r3, #1
 8014e28:	2300      	moveq	r3, #0
 8014e2a:	b2db      	uxtb	r3, r3
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e34:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b094      	sub	sp, #80	; 0x50
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
 8014e4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d002      	beq.n	8014e5c <VL53L1CB_ConfigROI+0x16>
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d103      	bne.n	8014e64 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e5c:	f06f 0301 	mvn.w	r3, #1
 8014e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e62:	e01c      	b.n	8014e9e <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014e64:	2301      	movs	r3, #1
 8014e66:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	789b      	ldrb	r3, [r3, #2]
 8014e6c:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	78db      	ldrb	r3, [r3, #3]
 8014e72:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	785b      	ldrb	r3, [r3, #1]
 8014e7e:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014e80:	f107 0308 	add.w	r3, r7, #8
 8014e84:	4619      	mov	r1, r3
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ed fca6 	bl	80027d8 <VL53L1_SetROI>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d003      	beq.n	8014e9a <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014e92:	f04f 33ff 	mov.w	r3, #4294967295
 8014e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e98:	e001      	b.n	8014e9e <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3750      	adds	r7, #80	; 0x50
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b083      	sub	sp, #12
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014eb2:	f06f 0303 	mvn.w	r3, #3
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	370c      	adds	r7, #12
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr

08014ec2 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b084      	sub	sp, #16
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
 8014eca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d002      	beq.n	8014ed8 <VL53L1CB_GetDistance+0x16>
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d103      	bne.n	8014ee0 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ed8:	f06f 0301 	mvn.w	r3, #1
 8014edc:	60fb      	str	r3, [r7, #12]
 8014ede:	e03a      	b.n	8014f56 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ee6:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d103      	bne.n	8014ef6 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014eee:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef2:	60fb      	str	r3, [r7, #12]
 8014ef4:	e02f      	b.n	8014f56 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014efc:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d106      	bne.n	8014f12 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 f92b 	bl	8015164 <vl53l1cb_poll_for_measurement>
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	e004      	b.n	8014f1c <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8014f12:	2100      	movs	r1, #0
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f000 f925 	bl	8015164 <vl53l1cb_poll_for_measurement>
 8014f1a:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d119      	bne.n	8014f56 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014f22:	6839      	ldr	r1, [r7, #0]
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f000 f94b 	bl	80151c0 <vl53l1cb_get_result>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d003      	beq.n	8014f38 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014f30:	f04f 33ff 	mov.w	r3, #4294967295
 8014f34:	60fb      	str	r3, [r7, #12]
 8014f36:	e00e      	b.n	8014f56 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f3e:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	d105      	bne.n	8014f52 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f7ed fdde 	bl	8002b08 <VL53L1_ClearInterruptAndStartMeasurement>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	60fb      	str	r3, [r7, #12]
 8014f50:	e001      	b.n	8014f56 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8014f52:	2300      	movs	r3, #0
 8014f54:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8014f56:	68fb      	ldr	r3, [r7, #12]
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3710      	adds	r7, #16
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d103      	bne.n	8014f78 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f70:	f06f 0301 	mvn.w	r3, #1
 8014f74:	60fb      	str	r3, [r7, #12]
 8014f76:	e068      	b.n	801504a <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f7e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d103      	bne.n	8014f8e <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014f86:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8a:	60fb      	str	r3, [r7, #12]
 8014f8c:	e05d      	b.n	801504a <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014f8e:	6878      	ldr	r0, [r7, #4]
 8014f90:	f7ed fcf6 	bl	8002980 <VL53L1_StartMeasurement>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d154      	bne.n	8015044 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	3b01      	subs	r3, #1
 8014fae:	2b03      	cmp	r3, #3
 8014fb0:	d83e      	bhi.n	8015030 <VL53L1CB_Start+0xd0>
 8014fb2:	a201      	add	r2, pc, #4	; (adr r2, 8014fb8 <VL53L1CB_Start+0x58>)
 8014fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fb8:	08014fc9 	.word	0x08014fc9
 8014fbc:	08014fe3 	.word	0x08014fe3
 8014fc0:	08014ffd 	.word	0x08014ffd
 8014fc4:	08015017 	.word	0x08015017
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fce:	2201      	movs	r2, #1
 8014fd0:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fda:	2201      	movs	r2, #1
 8014fdc:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014fe0:	e033      	b.n	801504a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014ffa:	e026      	b.n	801504a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015002:	2201      	movs	r2, #1
 8015004:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801500e:	2200      	movs	r2, #0
 8015010:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015014:	e019      	b.n	801504a <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801501c:	2200      	movs	r2, #0
 801501e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015028:	2200      	movs	r2, #0
 801502a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801502e:	e00c      	b.n	801504a <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015036:	2200      	movs	r2, #0
 8015038:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 801503c:	f06f 0301 	mvn.w	r3, #1
 8015040:	60fb      	str	r3, [r7, #12]
      break;
 8015042:	e002      	b.n	801504a <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015044:	f04f 33ff 	mov.w	r3, #4294967295
 8015048:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801504a:	68fb      	ldr	r3, [r7, #12]
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d103      	bne.n	801506a <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015062:	f06f 0301 	mvn.w	r3, #1
 8015066:	60fb      	str	r3, [r7, #12]
 8015068:	e01c      	b.n	80150a4 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015070:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015074:	2b00      	cmp	r3, #0
 8015076:	d103      	bne.n	8015080 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8015078:	f04f 33ff 	mov.w	r3, #4294967295
 801507c:	60fb      	str	r3, [r7, #12]
 801507e:	e011      	b.n	80150a4 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f7ed fd1d 	bl	8002ac0 <VL53L1_StopMeasurement>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d108      	bne.n	801509e <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015092:	2200      	movs	r2, #0
 8015094:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015098:	2300      	movs	r3, #0
 801509a:	60fb      	str	r3, [r7, #12]
 801509c:	e002      	b.n	80150a4 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 801509e:	f04f 33ff 	mov.w	r3, #4294967295
 80150a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80150a4:	68fb      	ldr	r3, [r7, #12]
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3710      	adds	r7, #16
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b084      	sub	sp, #16
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d103      	bne.n	80150c6 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80150be:	f06f 0301 	mvn.w	r3, #1
 80150c2:	60fb      	str	r3, [r7, #12]
 80150c4:	e012      	b.n	80150ec <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	4619      	mov	r1, r3
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7ec fdcf 	bl	8001c70 <VL53L1_SetDeviceAddress>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d003      	beq.n	80150e0 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 80150d8:	f04f 33ff 	mov.w	r3, #4294967295
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	e005      	b.n	80150ec <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 80150e8:	2300      	movs	r3, #0
 80150ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80150ec:	68fb      	ldr	r3, [r7, #12]
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3710      	adds	r7, #16
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 80150f6:	b480      	push	{r7}
 80150f8:	b085      	sub	sp, #20
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
 80150fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d002      	beq.n	801510c <VL53L1CB_GetAddress+0x16>
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d103      	bne.n	8015114 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801510c:	f06f 0301 	mvn.w	r3, #1
 8015110:	60fb      	str	r3, [r7, #12]
 8015112:	e006      	b.n	8015122 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	891b      	ldrh	r3, [r3, #8]
 8015118:	461a      	mov	r2, r3
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 801511e:	2300      	movs	r3, #0
 8015120:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015122:	68fb      	ldr	r3, [r7, #12]
}
 8015124:	4618      	mov	r0, r3
 8015126:	3714      	adds	r7, #20
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr

08015130 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 801513a:	f06f 0303 	mvn.w	r3, #3
}
 801513e:	4618      	mov	r0, r3
 8015140:	370c      	adds	r7, #12
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr

0801514a <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801514a:	b480      	push	{r7}
 801514c:	b083      	sub	sp, #12
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
 8015152:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015154:	f06f 0303 	mvn.w	r3, #3
}
 8015158:	4618      	mov	r0, r3
 801515a:	370c      	adds	r7, #12
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr

08015164 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801516e:	2300      	movs	r3, #0
 8015170:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d102      	bne.n	801517e <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8015178:	f06f 0301 	mvn.w	r3, #1
 801517c:	e01b      	b.n	80151b6 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	695b      	ldr	r3, [r3, #20]
 8015182:	4798      	blx	r3
 8015184:	4603      	mov	r3, r0
 8015186:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8015188:	f107 030b 	add.w	r3, r7, #11
 801518c:	4619      	mov	r1, r3
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7ed fcd0 	bl	8002b34 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8015194:	7afb      	ldrb	r3, [r7, #11]
 8015196:	2b01      	cmp	r3, #1
 8015198:	d101      	bne.n	801519e <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801519a:	2300      	movs	r3, #0
 801519c:	e00b      	b.n	80151b6 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	695b      	ldr	r3, [r3, #20]
 80151a2:	4798      	blx	r3
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	1ad3      	subs	r3, r2, r3
 80151ac:	683a      	ldr	r2, [r7, #0]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d8ea      	bhi.n	8015188 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 80151b2:	f06f 0302 	mvn.w	r3, #2
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3710      	adds	r7, #16
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
	...

080151c0 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 80151c0:	b590      	push	{r4, r7, lr}
 80151c2:	b0a9      	sub	sp, #164	; 0xa4
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d002      	beq.n	80151d6 <vl53l1cb_get_result+0x16>
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d104      	bne.n	80151e0 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80151d6:	f06f 0301 	mvn.w	r3, #1
 80151da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80151de:	e120      	b.n	8015422 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 80151e0:	f107 030c 	add.w	r3, r7, #12
 80151e4:	4619      	mov	r1, r3
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f7ee fb82 	bl	80038f0 <VL53L1_GetMultiRangingData>
 80151ec:	4603      	mov	r3, r0
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d004      	beq.n	80151fc <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 80151f2:	f04f 33ff 	mov.w	r3, #4294967295
 80151f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80151fa:	e112      	b.n	8015422 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 80151fc:	2300      	movs	r3, #0
 80151fe:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015202:	e106      	b.n	8015412 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8015204:	7cbb      	ldrb	r3, [r7, #18]
 8015206:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801520a:	4618      	mov	r0, r3
 801520c:	6839      	ldr	r1, [r7, #0]
 801520e:	4613      	mov	r3, r2
 8015210:	011b      	lsls	r3, r3, #4
 8015212:	4413      	add	r3, r2
 8015214:	009b      	lsls	r3, r3, #2
 8015216:	440b      	add	r3, r1
 8015218:	3304      	adds	r3, #4
 801521a:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801521c:	2300      	movs	r3, #0
 801521e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8015222:	e0eb      	b.n	80153fc <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8015224:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015228:	4613      	mov	r3, r2
 801522a:	00db      	lsls	r3, r3, #3
 801522c:	1a9b      	subs	r3, r3, r2
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	33a0      	adds	r3, #160	; 0xa0
 8015232:	443b      	add	r3, r7
 8015234:	3b78      	subs	r3, #120	; 0x78
 8015236:	f9b3 3000 	ldrsh.w	r3, [r3]
 801523a:	2b00      	cmp	r3, #0
 801523c:	da0d      	bge.n	801525a <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 801523e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015242:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015246:	6839      	ldr	r1, [r7, #0]
 8015248:	4613      	mov	r3, r2
 801524a:	011b      	lsls	r3, r3, #4
 801524c:	4413      	add	r3, r2
 801524e:	4403      	add	r3, r0
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	440b      	add	r3, r1
 8015254:	2200      	movs	r2, #0
 8015256:	609a      	str	r2, [r3, #8]
 8015258:	e017      	b.n	801528a <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801525a:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801525e:	4613      	mov	r3, r2
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	1a9b      	subs	r3, r3, r2
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	33a0      	adds	r3, #160	; 0xa0
 8015268:	443b      	add	r3, r7
 801526a:	3b78      	subs	r3, #120	; 0x78
 801526c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015270:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015274:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015278:	461c      	mov	r4, r3
 801527a:	6839      	ldr	r1, [r7, #0]
 801527c:	4613      	mov	r3, r2
 801527e:	011b      	lsls	r3, r3, #4
 8015280:	4413      	add	r3, r2
 8015282:	4403      	add	r3, r0
 8015284:	009b      	lsls	r3, r3, #2
 8015286:	440b      	add	r3, r1
 8015288:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015290:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8015294:	2b01      	cmp	r3, #1
 8015296:	d136      	bne.n	8015306 <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015298:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801529c:	4613      	mov	r3, r2
 801529e:	00db      	lsls	r3, r3, #3
 80152a0:	1a9b      	subs	r3, r3, r2
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	33a0      	adds	r3, #160	; 0xa0
 80152a6:	443b      	add	r3, r7
 80152a8:	3b80      	subs	r3, #128	; 0x80
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	ee07 3a90 	vmov	s15, r3
 80152b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80152b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8015430 <vl53l1cb_get_result+0x270>
 80152b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80152bc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8015434 <vl53l1cb_get_result+0x274>
 80152c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80152c4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80152c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80152cc:	0a1b      	lsrs	r3, r3, #8
 80152ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80152d2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80152d6:	ee07 3a90 	vmov	s15, r3
 80152da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80152de:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80152e2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80152e6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80152ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80152ee:	6839      	ldr	r1, [r7, #0]
 80152f0:	4613      	mov	r3, r2
 80152f2:	011b      	lsls	r3, r3, #4
 80152f4:	4413      	add	r3, r2
 80152f6:	4403      	add	r3, r0
 80152f8:	3308      	adds	r3, #8
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	440b      	add	r3, r1
 80152fe:	3308      	adds	r3, #8
 8015300:	edc3 7a00 	vstr	s15, [r3]
 8015304:	e00f      	b.n	8015326 <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8015306:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801530a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801530e:	6839      	ldr	r1, [r7, #0]
 8015310:	4613      	mov	r3, r2
 8015312:	011b      	lsls	r3, r3, #4
 8015314:	4413      	add	r3, r2
 8015316:	4403      	add	r3, r0
 8015318:	3308      	adds	r3, #8
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	440b      	add	r3, r1
 801531e:	3308      	adds	r3, #8
 8015320:	f04f 0200 	mov.w	r2, #0
 8015324:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801532c:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8015330:	2b01      	cmp	r3, #1
 8015332:	d136      	bne.n	80153a2 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015334:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015338:	4613      	mov	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	1a9b      	subs	r3, r3, r2
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	33a0      	adds	r3, #160	; 0xa0
 8015342:	443b      	add	r3, r7
 8015344:	3b84      	subs	r3, #132	; 0x84
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	ee07 3a90 	vmov	s15, r3
 801534c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015350:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015430 <vl53l1cb_get_result+0x270>
 8015354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015358:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015434 <vl53l1cb_get_result+0x274>
 801535c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015360:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015368:	0a1b      	lsrs	r3, r3, #8
 801536a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801536e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8015372:	ee07 3a90 	vmov	s15, r3
 8015376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801537a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801537e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015382:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8015386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801538a:	6839      	ldr	r1, [r7, #0]
 801538c:	4613      	mov	r3, r2
 801538e:	011b      	lsls	r3, r3, #4
 8015390:	4413      	add	r3, r2
 8015392:	4403      	add	r3, r0
 8015394:	330c      	adds	r3, #12
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	440b      	add	r3, r1
 801539a:	3308      	adds	r3, #8
 801539c:	edc3 7a00 	vstr	s15, [r3]
 80153a0:	e00f      	b.n	80153c2 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80153a2:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153a6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153aa:	6839      	ldr	r1, [r7, #0]
 80153ac:	4613      	mov	r3, r2
 80153ae:	011b      	lsls	r3, r3, #4
 80153b0:	4413      	add	r3, r2
 80153b2:	4403      	add	r3, r0
 80153b4:	330c      	adds	r3, #12
 80153b6:	009b      	lsls	r3, r3, #2
 80153b8:	440b      	add	r3, r1
 80153ba:	3308      	adds	r3, #8
 80153bc:	f04f 0200 	mov.w	r2, #0
 80153c0:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80153c2:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80153c6:	4613      	mov	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	1a9b      	subs	r3, r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	33a0      	adds	r3, #160	; 0xa0
 80153d0:	443b      	add	r3, r7
 80153d2:	3b75      	subs	r3, #117	; 0x75
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153da:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153de:	461c      	mov	r4, r3
 80153e0:	6839      	ldr	r1, [r7, #0]
 80153e2:	4613      	mov	r3, r2
 80153e4:	011b      	lsls	r3, r3, #4
 80153e6:	4413      	add	r3, r2
 80153e8:	4403      	add	r3, r0
 80153ea:	3304      	adds	r3, #4
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	440b      	add	r3, r1
 80153f0:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80153f2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80153f6:	3301      	adds	r3, #1
 80153f8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80153fc:	7cbb      	ldrb	r3, [r7, #18]
 80153fe:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015402:	429a      	cmp	r2, r3
 8015404:	f4ff af0e 	bcc.w	8015224 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015408:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801540c:	3301      	adds	r3, #1
 801540e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015412:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015416:	2b00      	cmp	r3, #0
 8015418:	f43f aef4 	beq.w	8015204 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 801541c:	2300      	movs	r3, #0
 801541e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 8015422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8015426:	4618      	mov	r0, r3
 8015428:	37a4      	adds	r7, #164	; 0xa4
 801542a:	46bd      	mov	sp, r7
 801542c:	bd90      	pop	{r4, r7, pc}
 801542e:	bf00      	nop
 8015430:	47800000 	.word	0x47800000
 8015434:	447a0000 	.word	0x447a0000

08015438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801543e:	2300      	movs	r3, #0
 8015440:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015442:	4b0c      	ldr	r3, [pc, #48]	; (8015474 <HAL_Init+0x3c>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4a0b      	ldr	r2, [pc, #44]	; (8015474 <HAL_Init+0x3c>)
 8015448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801544c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801544e:	2003      	movs	r0, #3
 8015450:	f000 f90f 	bl	8015672 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8015454:	200f      	movs	r0, #15
 8015456:	f7eb fb93 	bl	8000b80 <HAL_InitTick>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d002      	beq.n	8015466 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8015460:	2301      	movs	r3, #1
 8015462:	71fb      	strb	r3, [r7, #7]
 8015464:	e001      	b.n	801546a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8015466:	f7eb fb6a 	bl	8000b3e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801546a:	79fb      	ldrb	r3, [r7, #7]
}
 801546c:	4618      	mov	r0, r3
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	58004000 	.word	0x58004000

08015478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015478:	b480      	push	{r7}
 801547a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801547c:	4b06      	ldr	r3, [pc, #24]	; (8015498 <HAL_IncTick+0x20>)
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	461a      	mov	r2, r3
 8015482:	4b06      	ldr	r3, [pc, #24]	; (801549c <HAL_IncTick+0x24>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	4413      	add	r3, r2
 8015488:	4a04      	ldr	r2, [pc, #16]	; (801549c <HAL_IncTick+0x24>)
 801548a:	6013      	str	r3, [r2, #0]
}
 801548c:	bf00      	nop
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr
 8015496:	bf00      	nop
 8015498:	20000074 	.word	0x20000074
 801549c:	20008628 	.word	0x20008628

080154a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80154a0:	b480      	push	{r7}
 80154a2:	af00      	add	r7, sp, #0
  return uwTick;
 80154a4:	4b03      	ldr	r3, [pc, #12]	; (80154b4 <HAL_GetTick+0x14>)
 80154a6:	681b      	ldr	r3, [r3, #0]
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr
 80154b2:	bf00      	nop
 80154b4:	20008628 	.word	0x20008628

080154b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80154b8:	b480      	push	{r7}
 80154ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80154bc:	4b03      	ldr	r3, [pc, #12]	; (80154cc <HAL_GetTickPrio+0x14>)
 80154be:	681b      	ldr	r3, [r3, #0]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	20000070 	.word	0x20000070

080154d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80154d8:	f7ff ffe2 	bl	80154a0 <HAL_GetTick>
 80154dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154e8:	d005      	beq.n	80154f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80154ea:	4b0a      	ldr	r3, [pc, #40]	; (8015514 <HAL_Delay+0x44>)
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	461a      	mov	r2, r3
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	4413      	add	r3, r2
 80154f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80154f6:	bf00      	nop
 80154f8:	f7ff ffd2 	bl	80154a0 <HAL_GetTick>
 80154fc:	4602      	mov	r2, r0
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	1ad3      	subs	r3, r2, r3
 8015502:	68fa      	ldr	r2, [r7, #12]
 8015504:	429a      	cmp	r2, r3
 8015506:	d8f7      	bhi.n	80154f8 <HAL_Delay+0x28>
  {
  }
}
 8015508:	bf00      	nop
 801550a:	bf00      	nop
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	20000074 	.word	0x20000074

08015518 <__NVIC_SetPriorityGrouping>:
{
 8015518:	b480      	push	{r7}
 801551a:	b085      	sub	sp, #20
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f003 0307 	and.w	r3, r3, #7
 8015526:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015528:	4b0c      	ldr	r3, [pc, #48]	; (801555c <__NVIC_SetPriorityGrouping+0x44>)
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801552e:	68ba      	ldr	r2, [r7, #8]
 8015530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015534:	4013      	ands	r3, r2
 8015536:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801554a:	4a04      	ldr	r2, [pc, #16]	; (801555c <__NVIC_SetPriorityGrouping+0x44>)
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	60d3      	str	r3, [r2, #12]
}
 8015550:	bf00      	nop
 8015552:	3714      	adds	r7, #20
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr
 801555c:	e000ed00 	.word	0xe000ed00

08015560 <__NVIC_GetPriorityGrouping>:
{
 8015560:	b480      	push	{r7}
 8015562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015564:	4b04      	ldr	r3, [pc, #16]	; (8015578 <__NVIC_GetPriorityGrouping+0x18>)
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	0a1b      	lsrs	r3, r3, #8
 801556a:	f003 0307 	and.w	r3, r3, #7
}
 801556e:	4618      	mov	r0, r3
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr
 8015578:	e000ed00 	.word	0xe000ed00

0801557c <__NVIC_EnableIRQ>:
{
 801557c:	b480      	push	{r7}
 801557e:	b083      	sub	sp, #12
 8015580:	af00      	add	r7, sp, #0
 8015582:	4603      	mov	r3, r0
 8015584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801558a:	2b00      	cmp	r3, #0
 801558c:	db0b      	blt.n	80155a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801558e:	79fb      	ldrb	r3, [r7, #7]
 8015590:	f003 021f 	and.w	r2, r3, #31
 8015594:	4907      	ldr	r1, [pc, #28]	; (80155b4 <__NVIC_EnableIRQ+0x38>)
 8015596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801559a:	095b      	lsrs	r3, r3, #5
 801559c:	2001      	movs	r0, #1
 801559e:	fa00 f202 	lsl.w	r2, r0, r2
 80155a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80155a6:	bf00      	nop
 80155a8:	370c      	adds	r7, #12
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr
 80155b2:	bf00      	nop
 80155b4:	e000e100 	.word	0xe000e100

080155b8 <__NVIC_SetPriority>:
{
 80155b8:	b480      	push	{r7}
 80155ba:	b083      	sub	sp, #12
 80155bc:	af00      	add	r7, sp, #0
 80155be:	4603      	mov	r3, r0
 80155c0:	6039      	str	r1, [r7, #0]
 80155c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	db0a      	blt.n	80155e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	490c      	ldr	r1, [pc, #48]	; (8015604 <__NVIC_SetPriority+0x4c>)
 80155d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155d6:	0112      	lsls	r2, r2, #4
 80155d8:	b2d2      	uxtb	r2, r2
 80155da:	440b      	add	r3, r1
 80155dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80155e0:	e00a      	b.n	80155f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	b2da      	uxtb	r2, r3
 80155e6:	4908      	ldr	r1, [pc, #32]	; (8015608 <__NVIC_SetPriority+0x50>)
 80155e8:	79fb      	ldrb	r3, [r7, #7]
 80155ea:	f003 030f 	and.w	r3, r3, #15
 80155ee:	3b04      	subs	r3, #4
 80155f0:	0112      	lsls	r2, r2, #4
 80155f2:	b2d2      	uxtb	r2, r2
 80155f4:	440b      	add	r3, r1
 80155f6:	761a      	strb	r2, [r3, #24]
}
 80155f8:	bf00      	nop
 80155fa:	370c      	adds	r7, #12
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr
 8015604:	e000e100 	.word	0xe000e100
 8015608:	e000ed00 	.word	0xe000ed00

0801560c <NVIC_EncodePriority>:
{
 801560c:	b480      	push	{r7}
 801560e:	b089      	sub	sp, #36	; 0x24
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f003 0307 	and.w	r3, r3, #7
 801561e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	f1c3 0307 	rsb	r3, r3, #7
 8015626:	2b04      	cmp	r3, #4
 8015628:	bf28      	it	cs
 801562a:	2304      	movcs	r3, #4
 801562c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	3304      	adds	r3, #4
 8015632:	2b06      	cmp	r3, #6
 8015634:	d902      	bls.n	801563c <NVIC_EncodePriority+0x30>
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	3b03      	subs	r3, #3
 801563a:	e000      	b.n	801563e <NVIC_EncodePriority+0x32>
 801563c:	2300      	movs	r3, #0
 801563e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015640:	f04f 32ff 	mov.w	r2, #4294967295
 8015644:	69bb      	ldr	r3, [r7, #24]
 8015646:	fa02 f303 	lsl.w	r3, r2, r3
 801564a:	43da      	mvns	r2, r3
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	401a      	ands	r2, r3
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015654:	f04f 31ff 	mov.w	r1, #4294967295
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	fa01 f303 	lsl.w	r3, r1, r3
 801565e:	43d9      	mvns	r1, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015664:	4313      	orrs	r3, r2
}
 8015666:	4618      	mov	r0, r3
 8015668:	3724      	adds	r7, #36	; 0x24
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015672:	b580      	push	{r7, lr}
 8015674:	b082      	sub	sp, #8
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7ff ff4c 	bl	8015518 <__NVIC_SetPriorityGrouping>
}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b086      	sub	sp, #24
 801568c:	af00      	add	r7, sp, #0
 801568e:	4603      	mov	r3, r0
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015696:	f7ff ff63 	bl	8015560 <__NVIC_GetPriorityGrouping>
 801569a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	68b9      	ldr	r1, [r7, #8]
 80156a0:	6978      	ldr	r0, [r7, #20]
 80156a2:	f7ff ffb3 	bl	801560c <NVIC_EncodePriority>
 80156a6:	4602      	mov	r2, r0
 80156a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156ac:	4611      	mov	r1, r2
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff ff82 	bl	80155b8 <__NVIC_SetPriority>
}
 80156b4:	bf00      	nop
 80156b6:	3718      	adds	r7, #24
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	4603      	mov	r3, r0
 80156c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80156c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7ff ff56 	bl	801557c <__NVIC_EnableIRQ>
}
 80156d0:	bf00      	nop
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80156d8:	b480      	push	{r7}
 80156da:	b087      	sub	sp, #28
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80156e2:	2300      	movs	r3, #0
 80156e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80156e6:	e14c      	b.n	8015982 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	2101      	movs	r1, #1
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	fa01 f303 	lsl.w	r3, r1, r3
 80156f4:	4013      	ands	r3, r2
 80156f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 813e 	beq.w	801597c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	f003 0303 	and.w	r3, r3, #3
 8015708:	2b01      	cmp	r3, #1
 801570a:	d005      	beq.n	8015718 <HAL_GPIO_Init+0x40>
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	f003 0303 	and.w	r3, r3, #3
 8015714:	2b02      	cmp	r3, #2
 8015716:	d130      	bne.n	801577a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	689b      	ldr	r3, [r3, #8]
 801571c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	2203      	movs	r2, #3
 8015724:	fa02 f303 	lsl.w	r3, r2, r3
 8015728:	43db      	mvns	r3, r3
 801572a:	693a      	ldr	r2, [r7, #16]
 801572c:	4013      	ands	r3, r2
 801572e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	68da      	ldr	r2, [r3, #12]
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	fa02 f303 	lsl.w	r3, r2, r3
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	4313      	orrs	r3, r2
 8015740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	693a      	ldr	r2, [r7, #16]
 8015746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801574e:	2201      	movs	r2, #1
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	fa02 f303 	lsl.w	r3, r2, r3
 8015756:	43db      	mvns	r3, r3
 8015758:	693a      	ldr	r2, [r7, #16]
 801575a:	4013      	ands	r3, r2
 801575c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	091b      	lsrs	r3, r3, #4
 8015764:	f003 0201 	and.w	r2, r3, #1
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	fa02 f303 	lsl.w	r3, r2, r3
 801576e:	693a      	ldr	r2, [r7, #16]
 8015770:	4313      	orrs	r3, r2
 8015772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	693a      	ldr	r2, [r7, #16]
 8015778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	f003 0303 	and.w	r3, r3, #3
 8015782:	2b03      	cmp	r3, #3
 8015784:	d017      	beq.n	80157b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	68db      	ldr	r3, [r3, #12]
 801578a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	2203      	movs	r2, #3
 8015792:	fa02 f303 	lsl.w	r3, r2, r3
 8015796:	43db      	mvns	r3, r3
 8015798:	693a      	ldr	r2, [r7, #16]
 801579a:	4013      	ands	r3, r2
 801579c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	689a      	ldr	r2, [r3, #8]
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	005b      	lsls	r3, r3, #1
 80157a6:	fa02 f303 	lsl.w	r3, r2, r3
 80157aa:	693a      	ldr	r2, [r7, #16]
 80157ac:	4313      	orrs	r3, r2
 80157ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	693a      	ldr	r2, [r7, #16]
 80157b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	f003 0303 	and.w	r3, r3, #3
 80157be:	2b02      	cmp	r3, #2
 80157c0:	d123      	bne.n	801580a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	08da      	lsrs	r2, r3, #3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3208      	adds	r2, #8
 80157ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	f003 0307 	and.w	r3, r3, #7
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	220f      	movs	r2, #15
 80157da:	fa02 f303 	lsl.w	r3, r2, r3
 80157de:	43db      	mvns	r3, r3
 80157e0:	693a      	ldr	r2, [r7, #16]
 80157e2:	4013      	ands	r3, r2
 80157e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	691a      	ldr	r2, [r3, #16]
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	f003 0307 	and.w	r3, r3, #7
 80157f0:	009b      	lsls	r3, r3, #2
 80157f2:	fa02 f303 	lsl.w	r3, r2, r3
 80157f6:	693a      	ldr	r2, [r7, #16]
 80157f8:	4313      	orrs	r3, r2
 80157fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	08da      	lsrs	r2, r3, #3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	3208      	adds	r2, #8
 8015804:	6939      	ldr	r1, [r7, #16]
 8015806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	005b      	lsls	r3, r3, #1
 8015814:	2203      	movs	r2, #3
 8015816:	fa02 f303 	lsl.w	r3, r2, r3
 801581a:	43db      	mvns	r3, r3
 801581c:	693a      	ldr	r2, [r7, #16]
 801581e:	4013      	ands	r3, r2
 8015820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	f003 0203 	and.w	r2, r3, #3
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	005b      	lsls	r3, r3, #1
 801582e:	fa02 f303 	lsl.w	r3, r2, r3
 8015832:	693a      	ldr	r2, [r7, #16]
 8015834:	4313      	orrs	r3, r2
 8015836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	693a      	ldr	r2, [r7, #16]
 801583c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015846:	2b00      	cmp	r3, #0
 8015848:	f000 8098 	beq.w	801597c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801584c:	4a54      	ldr	r2, [pc, #336]	; (80159a0 <HAL_GPIO_Init+0x2c8>)
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	089b      	lsrs	r3, r3, #2
 8015852:	3302      	adds	r3, #2
 8015854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	f003 0303 	and.w	r3, r3, #3
 8015860:	009b      	lsls	r3, r3, #2
 8015862:	220f      	movs	r2, #15
 8015864:	fa02 f303 	lsl.w	r3, r2, r3
 8015868:	43db      	mvns	r3, r3
 801586a:	693a      	ldr	r2, [r7, #16]
 801586c:	4013      	ands	r3, r2
 801586e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015876:	d019      	beq.n	80158ac <HAL_GPIO_Init+0x1d4>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	4a4a      	ldr	r2, [pc, #296]	; (80159a4 <HAL_GPIO_Init+0x2cc>)
 801587c:	4293      	cmp	r3, r2
 801587e:	d013      	beq.n	80158a8 <HAL_GPIO_Init+0x1d0>
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4a49      	ldr	r2, [pc, #292]	; (80159a8 <HAL_GPIO_Init+0x2d0>)
 8015884:	4293      	cmp	r3, r2
 8015886:	d00d      	beq.n	80158a4 <HAL_GPIO_Init+0x1cc>
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	4a48      	ldr	r2, [pc, #288]	; (80159ac <HAL_GPIO_Init+0x2d4>)
 801588c:	4293      	cmp	r3, r2
 801588e:	d007      	beq.n	80158a0 <HAL_GPIO_Init+0x1c8>
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	4a47      	ldr	r2, [pc, #284]	; (80159b0 <HAL_GPIO_Init+0x2d8>)
 8015894:	4293      	cmp	r3, r2
 8015896:	d101      	bne.n	801589c <HAL_GPIO_Init+0x1c4>
 8015898:	2304      	movs	r3, #4
 801589a:	e008      	b.n	80158ae <HAL_GPIO_Init+0x1d6>
 801589c:	2307      	movs	r3, #7
 801589e:	e006      	b.n	80158ae <HAL_GPIO_Init+0x1d6>
 80158a0:	2303      	movs	r3, #3
 80158a2:	e004      	b.n	80158ae <HAL_GPIO_Init+0x1d6>
 80158a4:	2302      	movs	r3, #2
 80158a6:	e002      	b.n	80158ae <HAL_GPIO_Init+0x1d6>
 80158a8:	2301      	movs	r3, #1
 80158aa:	e000      	b.n	80158ae <HAL_GPIO_Init+0x1d6>
 80158ac:	2300      	movs	r3, #0
 80158ae:	697a      	ldr	r2, [r7, #20]
 80158b0:	f002 0203 	and.w	r2, r2, #3
 80158b4:	0092      	lsls	r2, r2, #2
 80158b6:	4093      	lsls	r3, r2
 80158b8:	693a      	ldr	r2, [r7, #16]
 80158ba:	4313      	orrs	r3, r2
 80158bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80158be:	4938      	ldr	r1, [pc, #224]	; (80159a0 <HAL_GPIO_Init+0x2c8>)
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	089b      	lsrs	r3, r3, #2
 80158c4:	3302      	adds	r3, #2
 80158c6:	693a      	ldr	r2, [r7, #16]
 80158c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80158cc:	4b39      	ldr	r3, [pc, #228]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	43db      	mvns	r3, r3
 80158d6:	693a      	ldr	r2, [r7, #16]
 80158d8:	4013      	ands	r3, r2
 80158da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d003      	beq.n	80158f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80158e8:	693a      	ldr	r2, [r7, #16]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	4313      	orrs	r3, r2
 80158ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80158f0:	4a30      	ldr	r2, [pc, #192]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80158f6:	4b2f      	ldr	r3, [pc, #188]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	43db      	mvns	r3, r3
 8015900:	693a      	ldr	r2, [r7, #16]
 8015902:	4013      	ands	r3, r2
 8015904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801590e:	2b00      	cmp	r3, #0
 8015910:	d003      	beq.n	801591a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015912:	693a      	ldr	r2, [r7, #16]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	4313      	orrs	r3, r2
 8015918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801591a:	4a26      	ldr	r2, [pc, #152]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015920:	4b24      	ldr	r3, [pc, #144]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 8015922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	43db      	mvns	r3, r3
 801592c:	693a      	ldr	r2, [r7, #16]
 801592e:	4013      	ands	r3, r2
 8015930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801593a:	2b00      	cmp	r3, #0
 801593c:	d003      	beq.n	8015946 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 801593e:	693a      	ldr	r2, [r7, #16]
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	4313      	orrs	r3, r2
 8015944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015946:	4a1b      	ldr	r2, [pc, #108]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801594e:	4b19      	ldr	r3, [pc, #100]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 8015950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	43db      	mvns	r3, r3
 801595a:	693a      	ldr	r2, [r7, #16]
 801595c:	4013      	ands	r3, r2
 801595e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015968:	2b00      	cmp	r3, #0
 801596a:	d003      	beq.n	8015974 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801596c:	693a      	ldr	r2, [r7, #16]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	4313      	orrs	r3, r2
 8015972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015974:	4a0f      	ldr	r2, [pc, #60]	; (80159b4 <HAL_GPIO_Init+0x2dc>)
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	3301      	adds	r3, #1
 8015980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	681a      	ldr	r2, [r3, #0]
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	fa22 f303 	lsr.w	r3, r2, r3
 801598c:	2b00      	cmp	r3, #0
 801598e:	f47f aeab 	bne.w	80156e8 <HAL_GPIO_Init+0x10>
  }
}
 8015992:	bf00      	nop
 8015994:	bf00      	nop
 8015996:	371c      	adds	r7, #28
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr
 80159a0:	40010000 	.word	0x40010000
 80159a4:	48000400 	.word	0x48000400
 80159a8:	48000800 	.word	0x48000800
 80159ac:	48000c00 	.word	0x48000c00
 80159b0:	48001000 	.word	0x48001000
 80159b4:	58000800 	.word	0x58000800

080159b8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80159b8:	b480      	push	{r7}
 80159ba:	b087      	sub	sp, #28
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
 80159c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80159c2:	2300      	movs	r3, #0
 80159c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80159c6:	e0bb      	b.n	8015b40 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80159c8:	2201      	movs	r2, #1
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	fa02 f303 	lsl.w	r3, r2, r3
 80159d0:	683a      	ldr	r2, [r7, #0]
 80159d2:	4013      	ands	r3, r2
 80159d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	f000 80ae 	beq.w	8015b3a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80159de:	4a5f      	ldr	r2, [pc, #380]	; (8015b5c <HAL_GPIO_DeInit+0x1a4>)
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	089b      	lsrs	r3, r3, #2
 80159e4:	3302      	adds	r3, #2
 80159e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	f003 0303 	and.w	r3, r3, #3
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	220f      	movs	r2, #15
 80159f6:	fa02 f303 	lsl.w	r3, r2, r3
 80159fa:	68fa      	ldr	r2, [r7, #12]
 80159fc:	4013      	ands	r3, r2
 80159fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015a06:	d019      	beq.n	8015a3c <HAL_GPIO_DeInit+0x84>
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	4a55      	ldr	r2, [pc, #340]	; (8015b60 <HAL_GPIO_DeInit+0x1a8>)
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d013      	beq.n	8015a38 <HAL_GPIO_DeInit+0x80>
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4a54      	ldr	r2, [pc, #336]	; (8015b64 <HAL_GPIO_DeInit+0x1ac>)
 8015a14:	4293      	cmp	r3, r2
 8015a16:	d00d      	beq.n	8015a34 <HAL_GPIO_DeInit+0x7c>
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	4a53      	ldr	r2, [pc, #332]	; (8015b68 <HAL_GPIO_DeInit+0x1b0>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d007      	beq.n	8015a30 <HAL_GPIO_DeInit+0x78>
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	4a52      	ldr	r2, [pc, #328]	; (8015b6c <HAL_GPIO_DeInit+0x1b4>)
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d101      	bne.n	8015a2c <HAL_GPIO_DeInit+0x74>
 8015a28:	2304      	movs	r3, #4
 8015a2a:	e008      	b.n	8015a3e <HAL_GPIO_DeInit+0x86>
 8015a2c:	2307      	movs	r3, #7
 8015a2e:	e006      	b.n	8015a3e <HAL_GPIO_DeInit+0x86>
 8015a30:	2303      	movs	r3, #3
 8015a32:	e004      	b.n	8015a3e <HAL_GPIO_DeInit+0x86>
 8015a34:	2302      	movs	r3, #2
 8015a36:	e002      	b.n	8015a3e <HAL_GPIO_DeInit+0x86>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	e000      	b.n	8015a3e <HAL_GPIO_DeInit+0x86>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	697a      	ldr	r2, [r7, #20]
 8015a40:	f002 0203 	and.w	r2, r2, #3
 8015a44:	0092      	lsls	r2, r2, #2
 8015a46:	4093      	lsls	r3, r2
 8015a48:	68fa      	ldr	r2, [r7, #12]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d136      	bne.n	8015abc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8015a4e:	4b48      	ldr	r3, [pc, #288]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a50:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	43db      	mvns	r3, r3
 8015a58:	4945      	ldr	r1, [pc, #276]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a5a:	4013      	ands	r3, r2
 8015a5c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015a60:	4b43      	ldr	r3, [pc, #268]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	43db      	mvns	r3, r3
 8015a6a:	4941      	ldr	r1, [pc, #260]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a6c:	4013      	ands	r3, r2
 8015a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015a72:	4b3f      	ldr	r3, [pc, #252]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	43db      	mvns	r3, r3
 8015a7a:	493d      	ldr	r1, [pc, #244]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a7c:	4013      	ands	r3, r2
 8015a7e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015a80:	4b3b      	ldr	r3, [pc, #236]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a82:	685a      	ldr	r2, [r3, #4]
 8015a84:	693b      	ldr	r3, [r7, #16]
 8015a86:	43db      	mvns	r3, r3
 8015a88:	4939      	ldr	r1, [pc, #228]	; (8015b70 <HAL_GPIO_DeInit+0x1b8>)
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	f003 0303 	and.w	r3, r3, #3
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	220f      	movs	r2, #15
 8015a98:	fa02 f303 	lsl.w	r3, r2, r3
 8015a9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015a9e:	4a2f      	ldr	r2, [pc, #188]	; (8015b5c <HAL_GPIO_DeInit+0x1a4>)
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	089b      	lsrs	r3, r3, #2
 8015aa4:	3302      	adds	r3, #2
 8015aa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	43da      	mvns	r2, r3
 8015aae:	482b      	ldr	r0, [pc, #172]	; (8015b5c <HAL_GPIO_DeInit+0x1a4>)
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	089b      	lsrs	r3, r3, #2
 8015ab4:	400a      	ands	r2, r1
 8015ab6:	3302      	adds	r3, #2
 8015ab8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681a      	ldr	r2, [r3, #0]
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	005b      	lsls	r3, r3, #1
 8015ac4:	2103      	movs	r1, #3
 8015ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8015aca:	431a      	orrs	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	08da      	lsrs	r2, r3, #3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	3208      	adds	r2, #8
 8015ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	f003 0307 	and.w	r3, r3, #7
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	220f      	movs	r2, #15
 8015ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8015aea:	43db      	mvns	r3, r3
 8015aec:	697a      	ldr	r2, [r7, #20]
 8015aee:	08d2      	lsrs	r2, r2, #3
 8015af0:	4019      	ands	r1, r3
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	3208      	adds	r2, #8
 8015af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	68da      	ldr	r2, [r3, #12]
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	2103      	movs	r1, #3
 8015b04:	fa01 f303 	lsl.w	r3, r1, r3
 8015b08:	43db      	mvns	r3, r3
 8015b0a:	401a      	ands	r2, r3
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	685a      	ldr	r2, [r3, #4]
 8015b14:	2101      	movs	r1, #1
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	fa01 f303 	lsl.w	r3, r1, r3
 8015b1c:	43db      	mvns	r3, r3
 8015b1e:	401a      	ands	r2, r3
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	689a      	ldr	r2, [r3, #8]
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	005b      	lsls	r3, r3, #1
 8015b2c:	2103      	movs	r1, #3
 8015b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b32:	43db      	mvns	r3, r3
 8015b34:	401a      	ands	r2, r3
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015b40:	683a      	ldr	r2, [r7, #0]
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	fa22 f303 	lsr.w	r3, r2, r3
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f47f af3d 	bne.w	80159c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8015b4e:	bf00      	nop
 8015b50:	bf00      	nop
 8015b52:	371c      	adds	r7, #28
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	40010000 	.word	0x40010000
 8015b60:	48000400 	.word	0x48000400
 8015b64:	48000800 	.word	0x48000800
 8015b68:	48000c00 	.word	0x48000c00
 8015b6c:	48001000 	.word	0x48001000
 8015b70:	58000800 	.word	0x58000800

08015b74 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015b74:	b480      	push	{r7}
 8015b76:	b085      	sub	sp, #20
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	691a      	ldr	r2, [r3, #16]
 8015b84:	887b      	ldrh	r3, [r7, #2]
 8015b86:	4013      	ands	r3, r2
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d002      	beq.n	8015b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	73fb      	strb	r3, [r7, #15]
 8015b90:	e001      	b.n	8015b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3714      	adds	r7, #20
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	460b      	mov	r3, r1
 8015bae:	807b      	strh	r3, [r7, #2]
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015bb4:	787b      	ldrb	r3, [r7, #1]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d003      	beq.n	8015bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015bba:	887a      	ldrh	r2, [r7, #2]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015bc0:	e002      	b.n	8015bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015bc2:	887a      	ldrh	r2, [r7, #2]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015bc8:	bf00      	nop
 8015bca:	370c      	adds	r7, #12
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d101      	bne.n	8015be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015be2:	2301      	movs	r3, #1
 8015be4:	e081      	b.n	8015cea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d106      	bne.n	8015c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f000 f8a8 	bl	8015d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2224      	movs	r2, #36	; 0x24
 8015c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f022 0201 	bic.w	r2, r2, #1
 8015c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	685a      	ldr	r2, [r3, #4]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	689a      	ldr	r2, [r3, #8]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d107      	bne.n	8015c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	689a      	ldr	r2, [r3, #8]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015c4a:	609a      	str	r2, [r3, #8]
 8015c4c:	e006      	b.n	8015c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	689a      	ldr	r2, [r3, #8]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	68db      	ldr	r3, [r3, #12]
 8015c60:	2b02      	cmp	r3, #2
 8015c62:	d104      	bne.n	8015c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	6812      	ldr	r2, [r2, #0]
 8015c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	68da      	ldr	r2, [r3, #12]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	691a      	ldr	r2, [r3, #16]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	695b      	ldr	r3, [r3, #20]
 8015c9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	699b      	ldr	r3, [r3, #24]
 8015ca2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	430a      	orrs	r2, r1
 8015caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	69d9      	ldr	r1, [r3, #28]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6a1a      	ldr	r2, [r3, #32]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	430a      	orrs	r2, r1
 8015cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f042 0201 	orr.w	r2, r2, #1
 8015cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2220      	movs	r2, #32
 8015cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3708      	adds	r7, #8
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}

08015cf2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015cf2:	b580      	push	{r7, lr}
 8015cf4:	b082      	sub	sp, #8
 8015cf6:	af00      	add	r7, sp, #0
 8015cf8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d101      	bne.n	8015d04 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015d00:	2301      	movs	r3, #1
 8015d02:	e021      	b.n	8015d48 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2224      	movs	r2, #36	; 0x24
 8015d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	f022 0201 	bic.w	r2, r2, #1
 8015d1a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f000 f821 	bl	8015d64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2200      	movs	r2, #0
 8015d26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2200      	movs	r2, #0
 8015d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015d46:	2300      	movs	r3, #0
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3708      	adds	r7, #8
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015d50:	b480      	push	{r7}
 8015d52:	b083      	sub	sp, #12
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015d58:	bf00      	nop
 8015d5a:	370c      	adds	r7, #12
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d62:	4770      	bx	lr

08015d64 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b083      	sub	sp, #12
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015d6c:	bf00      	nop
 8015d6e:	370c      	adds	r7, #12
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr

08015d78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b088      	sub	sp, #32
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	607a      	str	r2, [r7, #4]
 8015d82:	461a      	mov	r2, r3
 8015d84:	460b      	mov	r3, r1
 8015d86:	817b      	strh	r3, [r7, #10]
 8015d88:	4613      	mov	r3, r2
 8015d8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	2b20      	cmp	r3, #32
 8015d96:	f040 80da 	bne.w	8015f4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d101      	bne.n	8015da8 <HAL_I2C_Master_Transmit+0x30>
 8015da4:	2302      	movs	r3, #2
 8015da6:	e0d3      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2201      	movs	r2, #1
 8015dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015db0:	f7ff fb76 	bl	80154a0 <HAL_GetTick>
 8015db4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015db6:	697b      	ldr	r3, [r7, #20]
 8015db8:	9300      	str	r3, [sp, #0]
 8015dba:	2319      	movs	r3, #25
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	f000 fa00 	bl	80161c8 <I2C_WaitOnFlagUntilTimeout>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d001      	beq.n	8015dd2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015dce:	2301      	movs	r3, #1
 8015dd0:	e0be      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	2221      	movs	r2, #33	; 0x21
 8015dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2210      	movs	r2, #16
 8015dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	2200      	movs	r2, #0
 8015de6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	893a      	ldrh	r2, [r7, #8]
 8015df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2200      	movs	r2, #0
 8015df8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	2bff      	cmp	r3, #255	; 0xff
 8015e02:	d90e      	bls.n	8015e22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	22ff      	movs	r2, #255	; 0xff
 8015e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	8979      	ldrh	r1, [r7, #10]
 8015e12:	4b51      	ldr	r3, [pc, #324]	; (8015f58 <HAL_I2C_Master_Transmit+0x1e0>)
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f000 fbf6 	bl	801660c <I2C_TransferConfig>
 8015e20:	e06c      	b.n	8015efc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	8979      	ldrh	r1, [r7, #10]
 8015e34:	4b48      	ldr	r3, [pc, #288]	; (8015f58 <HAL_I2C_Master_Transmit+0x1e0>)
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e3c:	68f8      	ldr	r0, [r7, #12]
 8015e3e:	f000 fbe5 	bl	801660c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015e42:	e05b      	b.n	8015efc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e44:	697a      	ldr	r2, [r7, #20]
 8015e46:	6a39      	ldr	r1, [r7, #32]
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f000 f9fd 	bl	8016248 <I2C_WaitOnTXISFlagUntilTimeout>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d001      	beq.n	8015e58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015e54:	2301      	movs	r3, #1
 8015e56:	e07b      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e5c:	781a      	ldrb	r2, [r3, #0]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e68:	1c5a      	adds	r2, r3, #1
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	3b01      	subs	r3, #1
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e80:	3b01      	subs	r3, #1
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d034      	beq.n	8015efc <HAL_I2C_Master_Transmit+0x184>
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d130      	bne.n	8015efc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	9300      	str	r3, [sp, #0]
 8015e9e:	6a3b      	ldr	r3, [r7, #32]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	2180      	movs	r1, #128	; 0x80
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f000 f98f 	bl	80161c8 <I2C_WaitOnFlagUntilTimeout>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d001      	beq.n	8015eb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	e04d      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015eb8:	b29b      	uxth	r3, r3
 8015eba:	2bff      	cmp	r3, #255	; 0xff
 8015ebc:	d90e      	bls.n	8015edc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	22ff      	movs	r2, #255	; 0xff
 8015ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ec8:	b2da      	uxtb	r2, r3
 8015eca:	8979      	ldrh	r1, [r7, #10]
 8015ecc:	2300      	movs	r3, #0
 8015ece:	9300      	str	r3, [sp, #0]
 8015ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	f000 fb99 	bl	801660c <I2C_TransferConfig>
 8015eda:	e00f      	b.n	8015efc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ee0:	b29a      	uxth	r2, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015eea:	b2da      	uxtb	r2, r3
 8015eec:	8979      	ldrh	r1, [r7, #10]
 8015eee:	2300      	movs	r3, #0
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015ef6:	68f8      	ldr	r0, [r7, #12]
 8015ef8:	f000 fb88 	bl	801660c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d19e      	bne.n	8015e44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f06:	697a      	ldr	r2, [r7, #20]
 8015f08:	6a39      	ldr	r1, [r7, #32]
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f000 f9dc 	bl	80162c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d001      	beq.n	8015f1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015f16:	2301      	movs	r3, #1
 8015f18:	e01a      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2220      	movs	r2, #32
 8015f20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	6859      	ldr	r1, [r3, #4]
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	4b0b      	ldr	r3, [pc, #44]	; (8015f5c <HAL_I2C_Master_Transmit+0x1e4>)
 8015f2e:	400b      	ands	r3, r1
 8015f30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	2220      	movs	r2, #32
 8015f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	e000      	b.n	8015f50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015f4e:	2302      	movs	r3, #2
  }
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3718      	adds	r7, #24
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	80002000 	.word	0x80002000
 8015f5c:	fe00e800 	.word	0xfe00e800

08015f60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b088      	sub	sp, #32
 8015f64:	af02      	add	r7, sp, #8
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	607a      	str	r2, [r7, #4]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	817b      	strh	r3, [r7, #10]
 8015f70:	4613      	mov	r3, r2
 8015f72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	2b20      	cmp	r3, #32
 8015f7e:	f040 80db 	bne.w	8016138 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015f88:	2b01      	cmp	r3, #1
 8015f8a:	d101      	bne.n	8015f90 <HAL_I2C_Master_Receive+0x30>
 8015f8c:	2302      	movs	r3, #2
 8015f8e:	e0d4      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2201      	movs	r2, #1
 8015f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f98:	f7ff fa82 	bl	80154a0 <HAL_GetTick>
 8015f9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	9300      	str	r3, [sp, #0]
 8015fa2:	2319      	movs	r3, #25
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	f000 f90c 	bl	80161c8 <I2C_WaitOnFlagUntilTimeout>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d001      	beq.n	8015fba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	e0bf      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2222      	movs	r2, #34	; 0x22
 8015fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2210      	movs	r2, #16
 8015fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	893a      	ldrh	r2, [r7, #8]
 8015fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	2bff      	cmp	r3, #255	; 0xff
 8015fea:	d90e      	bls.n	801600a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	22ff      	movs	r2, #255	; 0xff
 8015ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ff6:	b2da      	uxtb	r2, r3
 8015ff8:	8979      	ldrh	r1, [r7, #10]
 8015ffa:	4b52      	ldr	r3, [pc, #328]	; (8016144 <HAL_I2C_Master_Receive+0x1e4>)
 8015ffc:	9300      	str	r3, [sp, #0]
 8015ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	f000 fb02 	bl	801660c <I2C_TransferConfig>
 8016008:	e06d      	b.n	80160e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801600e:	b29a      	uxth	r2, r3
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016018:	b2da      	uxtb	r2, r3
 801601a:	8979      	ldrh	r1, [r7, #10]
 801601c:	4b49      	ldr	r3, [pc, #292]	; (8016144 <HAL_I2C_Master_Receive+0x1e4>)
 801601e:	9300      	str	r3, [sp, #0]
 8016020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f000 faf1 	bl	801660c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801602a:	e05c      	b.n	80160e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801602c:	697a      	ldr	r2, [r7, #20]
 801602e:	6a39      	ldr	r1, [r7, #32]
 8016030:	68f8      	ldr	r0, [r7, #12]
 8016032:	f000 f985 	bl	8016340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801603c:	2301      	movs	r3, #1
 801603e:	e07c      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604a:	b2d2      	uxtb	r2, r2
 801604c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016052:	1c5a      	adds	r2, r3, #1
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801605c:	3b01      	subs	r3, #1
 801605e:	b29a      	uxth	r2, r3
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016068:	b29b      	uxth	r3, r3
 801606a:	3b01      	subs	r3, #1
 801606c:	b29a      	uxth	r2, r3
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016076:	b29b      	uxth	r3, r3
 8016078:	2b00      	cmp	r3, #0
 801607a:	d034      	beq.n	80160e6 <HAL_I2C_Master_Receive+0x186>
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016080:	2b00      	cmp	r3, #0
 8016082:	d130      	bne.n	80160e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	6a3b      	ldr	r3, [r7, #32]
 801608a:	2200      	movs	r2, #0
 801608c:	2180      	movs	r1, #128	; 0x80
 801608e:	68f8      	ldr	r0, [r7, #12]
 8016090:	f000 f89a 	bl	80161c8 <I2C_WaitOnFlagUntilTimeout>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d001      	beq.n	801609e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801609a:	2301      	movs	r3, #1
 801609c:	e04d      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	2bff      	cmp	r3, #255	; 0xff
 80160a6:	d90e      	bls.n	80160c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	22ff      	movs	r2, #255	; 0xff
 80160ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160b2:	b2da      	uxtb	r2, r3
 80160b4:	8979      	ldrh	r1, [r7, #10]
 80160b6:	2300      	movs	r3, #0
 80160b8:	9300      	str	r3, [sp, #0]
 80160ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	f000 faa4 	bl	801660c <I2C_TransferConfig>
 80160c4:	e00f      	b.n	80160e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160ca:	b29a      	uxth	r2, r3
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160d4:	b2da      	uxtb	r2, r3
 80160d6:	8979      	ldrh	r1, [r7, #10]
 80160d8:	2300      	movs	r3, #0
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80160e0:	68f8      	ldr	r0, [r7, #12]
 80160e2:	f000 fa93 	bl	801660c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d19d      	bne.n	801602c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160f0:	697a      	ldr	r2, [r7, #20]
 80160f2:	6a39      	ldr	r1, [r7, #32]
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f000 f8e7 	bl	80162c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016100:	2301      	movs	r3, #1
 8016102:	e01a      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	2220      	movs	r2, #32
 801610a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	6859      	ldr	r1, [r3, #4]
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	4b0c      	ldr	r3, [pc, #48]	; (8016148 <HAL_I2C_Master_Receive+0x1e8>)
 8016118:	400b      	ands	r3, r1
 801611a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2220      	movs	r2, #32
 8016120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2200      	movs	r2, #0
 8016128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2200      	movs	r2, #0
 8016130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016134:	2300      	movs	r3, #0
 8016136:	e000      	b.n	801613a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8016138:	2302      	movs	r3, #2
  }
}
 801613a:	4618      	mov	r0, r3
 801613c:	3718      	adds	r7, #24
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	80002400 	.word	0x80002400
 8016148:	fe00e800 	.word	0xfe00e800

0801614c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801615a:	b2db      	uxtb	r3, r3
}
 801615c:	4618      	mov	r0, r3
 801615e:	370c      	adds	r7, #12
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8016168:	b480      	push	{r7}
 801616a:	b083      	sub	sp, #12
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8016174:	4618      	mov	r0, r3
 8016176:	370c      	adds	r7, #12
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr

08016180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016180:	b480      	push	{r7}
 8016182:	b083      	sub	sp, #12
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	699b      	ldr	r3, [r3, #24]
 801618e:	f003 0302 	and.w	r3, r3, #2
 8016192:	2b02      	cmp	r3, #2
 8016194:	d103      	bne.n	801619e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	2200      	movs	r2, #0
 801619c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	699b      	ldr	r3, [r3, #24]
 80161a4:	f003 0301 	and.w	r3, r3, #1
 80161a8:	2b01      	cmp	r3, #1
 80161aa:	d007      	beq.n	80161bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	699a      	ldr	r2, [r3, #24]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	f042 0201 	orr.w	r2, r2, #1
 80161ba:	619a      	str	r2, [r3, #24]
  }
}
 80161bc:	bf00      	nop
 80161be:	370c      	adds	r7, #12
 80161c0:	46bd      	mov	sp, r7
 80161c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c6:	4770      	bx	lr

080161c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	603b      	str	r3, [r7, #0]
 80161d4:	4613      	mov	r3, r2
 80161d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80161d8:	e022      	b.n	8016220 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e0:	d01e      	beq.n	8016220 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161e2:	f7ff f95d 	bl	80154a0 <HAL_GetTick>
 80161e6:	4602      	mov	r2, r0
 80161e8:	69bb      	ldr	r3, [r7, #24]
 80161ea:	1ad3      	subs	r3, r2, r3
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d302      	bcc.n	80161f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d113      	bne.n	8016220 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161fc:	f043 0220 	orr.w	r2, r3, #32
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2220      	movs	r2, #32
 8016208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2200      	movs	r2, #0
 8016210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2200      	movs	r2, #0
 8016218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801621c:	2301      	movs	r3, #1
 801621e:	e00f      	b.n	8016240 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	699a      	ldr	r2, [r3, #24]
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	4013      	ands	r3, r2
 801622a:	68ba      	ldr	r2, [r7, #8]
 801622c:	429a      	cmp	r2, r3
 801622e:	bf0c      	ite	eq
 8016230:	2301      	moveq	r3, #1
 8016232:	2300      	movne	r3, #0
 8016234:	b2db      	uxtb	r3, r3
 8016236:	461a      	mov	r2, r3
 8016238:	79fb      	ldrb	r3, [r7, #7]
 801623a:	429a      	cmp	r2, r3
 801623c:	d0cd      	beq.n	80161da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801623e:	2300      	movs	r3, #0
}
 8016240:	4618      	mov	r0, r3
 8016242:	3710      	adds	r7, #16
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}

08016248 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b084      	sub	sp, #16
 801624c:	af00      	add	r7, sp, #0
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	60b9      	str	r1, [r7, #8]
 8016252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016254:	e02c      	b.n	80162b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	68b9      	ldr	r1, [r7, #8]
 801625a:	68f8      	ldr	r0, [r7, #12]
 801625c:	f000 f8ea 	bl	8016434 <I2C_IsErrorOccurred>
 8016260:	4603      	mov	r3, r0
 8016262:	2b00      	cmp	r3, #0
 8016264:	d001      	beq.n	801626a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016266:	2301      	movs	r3, #1
 8016268:	e02a      	b.n	80162c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016270:	d01e      	beq.n	80162b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016272:	f7ff f915 	bl	80154a0 <HAL_GetTick>
 8016276:	4602      	mov	r2, r0
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	68ba      	ldr	r2, [r7, #8]
 801627e:	429a      	cmp	r2, r3
 8016280:	d302      	bcc.n	8016288 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d113      	bne.n	80162b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801628c:	f043 0220 	orr.w	r2, r3, #32
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	2220      	movs	r2, #32
 8016298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2200      	movs	r2, #0
 80162a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2200      	movs	r2, #0
 80162a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80162ac:	2301      	movs	r3, #1
 80162ae:	e007      	b.n	80162c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	699b      	ldr	r3, [r3, #24]
 80162b6:	f003 0302 	and.w	r3, r3, #2
 80162ba:	2b02      	cmp	r3, #2
 80162bc:	d1cb      	bne.n	8016256 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80162be:	2300      	movs	r3, #0
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3710      	adds	r7, #16
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80162d4:	e028      	b.n	8016328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	68b9      	ldr	r1, [r7, #8]
 80162da:	68f8      	ldr	r0, [r7, #12]
 80162dc:	f000 f8aa 	bl	8016434 <I2C_IsErrorOccurred>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80162e6:	2301      	movs	r3, #1
 80162e8:	e026      	b.n	8016338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80162ea:	f7ff f8d9 	bl	80154a0 <HAL_GetTick>
 80162ee:	4602      	mov	r2, r0
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	1ad3      	subs	r3, r2, r3
 80162f4:	68ba      	ldr	r2, [r7, #8]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d302      	bcc.n	8016300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d113      	bne.n	8016328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016304:	f043 0220 	orr.w	r2, r3, #32
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2220      	movs	r2, #32
 8016310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2200      	movs	r2, #0
 8016318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	2200      	movs	r2, #0
 8016320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8016324:	2301      	movs	r3, #1
 8016326:	e007      	b.n	8016338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	699b      	ldr	r3, [r3, #24]
 801632e:	f003 0320 	and.w	r3, r3, #32
 8016332:	2b20      	cmp	r3, #32
 8016334:	d1cf      	bne.n	80162d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8016336:	2300      	movs	r3, #0
}
 8016338:	4618      	mov	r0, r3
 801633a:	3710      	adds	r7, #16
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b084      	sub	sp, #16
 8016344:	af00      	add	r7, sp, #0
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801634c:	e064      	b.n	8016418 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	68b9      	ldr	r1, [r7, #8]
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f000 f86e 	bl	8016434 <I2C_IsErrorOccurred>
 8016358:	4603      	mov	r3, r0
 801635a:	2b00      	cmp	r3, #0
 801635c:	d001      	beq.n	8016362 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801635e:	2301      	movs	r3, #1
 8016360:	e062      	b.n	8016428 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	699b      	ldr	r3, [r3, #24]
 8016368:	f003 0320 	and.w	r3, r3, #32
 801636c:	2b20      	cmp	r3, #32
 801636e:	d138      	bne.n	80163e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	699b      	ldr	r3, [r3, #24]
 8016376:	f003 0304 	and.w	r3, r3, #4
 801637a:	2b04      	cmp	r3, #4
 801637c:	d105      	bne.n	801638a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016382:	2b00      	cmp	r3, #0
 8016384:	d001      	beq.n	801638a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016386:	2300      	movs	r3, #0
 8016388:	e04e      	b.n	8016428 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	699b      	ldr	r3, [r3, #24]
 8016390:	f003 0310 	and.w	r3, r3, #16
 8016394:	2b10      	cmp	r3, #16
 8016396:	d107      	bne.n	80163a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2210      	movs	r2, #16
 801639e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2204      	movs	r2, #4
 80163a4:	645a      	str	r2, [r3, #68]	; 0x44
 80163a6:	e002      	b.n	80163ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	2200      	movs	r2, #0
 80163ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2220      	movs	r2, #32
 80163b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	6859      	ldr	r1, [r3, #4]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681a      	ldr	r2, [r3, #0]
 80163c0:	4b1b      	ldr	r3, [pc, #108]	; (8016430 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80163c2:	400b      	ands	r3, r1
 80163c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	2220      	movs	r2, #32
 80163ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2200      	movs	r2, #0
 80163d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2200      	movs	r2, #0
 80163da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80163de:	2301      	movs	r3, #1
 80163e0:	e022      	b.n	8016428 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163e2:	f7ff f85d 	bl	80154a0 <HAL_GetTick>
 80163e6:	4602      	mov	r2, r0
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	1ad3      	subs	r3, r2, r3
 80163ec:	68ba      	ldr	r2, [r7, #8]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d302      	bcc.n	80163f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10f      	bne.n	8016418 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163fc:	f043 0220 	orr.w	r2, r3, #32
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2220      	movs	r2, #32
 8016408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8016414:	2301      	movs	r3, #1
 8016416:	e007      	b.n	8016428 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	699b      	ldr	r3, [r3, #24]
 801641e:	f003 0304 	and.w	r3, r3, #4
 8016422:	2b04      	cmp	r3, #4
 8016424:	d193      	bne.n	801634e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3710      	adds	r7, #16
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	fe00e800 	.word	0xfe00e800

08016434 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08a      	sub	sp, #40	; 0x28
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016440:	2300      	movs	r3, #0
 8016442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	699b      	ldr	r3, [r3, #24]
 801644c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801644e:	2300      	movs	r3, #0
 8016450:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	f003 0310 	and.w	r3, r3, #16
 801645c:	2b00      	cmp	r3, #0
 801645e:	d075      	beq.n	801654c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2210      	movs	r2, #16
 8016466:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016468:	e056      	b.n	8016518 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016470:	d052      	beq.n	8016518 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016472:	f7ff f815 	bl	80154a0 <HAL_GetTick>
 8016476:	4602      	mov	r2, r0
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	68ba      	ldr	r2, [r7, #8]
 801647e:	429a      	cmp	r2, r3
 8016480:	d302      	bcc.n	8016488 <I2C_IsErrorOccurred+0x54>
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d147      	bne.n	8016518 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801649a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	699b      	ldr	r3, [r3, #24]
 80164a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80164a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80164aa:	d12e      	bne.n	801650a <I2C_IsErrorOccurred+0xd6>
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80164b2:	d02a      	beq.n	801650a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80164b4:	7cfb      	ldrb	r3, [r7, #19]
 80164b6:	2b20      	cmp	r3, #32
 80164b8:	d027      	beq.n	801650a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	685a      	ldr	r2, [r3, #4]
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80164c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80164ca:	f7fe ffe9 	bl	80154a0 <HAL_GetTick>
 80164ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80164d0:	e01b      	b.n	801650a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80164d2:	f7fe ffe5 	bl	80154a0 <HAL_GetTick>
 80164d6:	4602      	mov	r2, r0
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	2b19      	cmp	r3, #25
 80164de:	d914      	bls.n	801650a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164e4:	f043 0220 	orr.w	r2, r3, #32
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2220      	movs	r2, #32
 80164f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2200      	movs	r2, #0
 80164f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	2200      	movs	r2, #0
 8016500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8016504:	2301      	movs	r3, #1
 8016506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	699b      	ldr	r3, [r3, #24]
 8016510:	f003 0320 	and.w	r3, r3, #32
 8016514:	2b20      	cmp	r3, #32
 8016516:	d1dc      	bne.n	80164d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	699b      	ldr	r3, [r3, #24]
 801651e:	f003 0320 	and.w	r3, r3, #32
 8016522:	2b20      	cmp	r3, #32
 8016524:	d003      	beq.n	801652e <I2C_IsErrorOccurred+0xfa>
 8016526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801652a:	2b00      	cmp	r3, #0
 801652c:	d09d      	beq.n	801646a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801652e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016532:	2b00      	cmp	r3, #0
 8016534:	d103      	bne.n	801653e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2220      	movs	r2, #32
 801653c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801653e:	6a3b      	ldr	r3, [r7, #32]
 8016540:	f043 0304 	orr.w	r3, r3, #4
 8016544:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8016546:	2301      	movs	r3, #1
 8016548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	699b      	ldr	r3, [r3, #24]
 8016552:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8016554:	69bb      	ldr	r3, [r7, #24]
 8016556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801655a:	2b00      	cmp	r3, #0
 801655c:	d00b      	beq.n	8016576 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801655e:	6a3b      	ldr	r3, [r7, #32]
 8016560:	f043 0301 	orr.w	r3, r3, #1
 8016564:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801656e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016570:	2301      	movs	r3, #1
 8016572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00b      	beq.n	8016598 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016580:	6a3b      	ldr	r3, [r7, #32]
 8016582:	f043 0308 	orr.w	r3, r3, #8
 8016586:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016592:	2301      	movs	r3, #1
 8016594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00b      	beq.n	80165ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80165a2:	6a3b      	ldr	r3, [r7, #32]
 80165a4:	f043 0302 	orr.w	r3, r3, #2
 80165a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80165b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80165b4:	2301      	movs	r3, #1
 80165b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80165ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d01c      	beq.n	80165fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	f7ff fddc 	bl	8016180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	6859      	ldr	r1, [r3, #4]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	4b0d      	ldr	r3, [pc, #52]	; (8016608 <I2C_IsErrorOccurred+0x1d4>)
 80165d4:	400b      	ands	r3, r1
 80165d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80165dc:	6a3b      	ldr	r3, [r7, #32]
 80165de:	431a      	orrs	r2, r3
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2220      	movs	r2, #32
 80165e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2200      	movs	r2, #0
 80165f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2200      	movs	r2, #0
 80165f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80165fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016600:	4618      	mov	r0, r3
 8016602:	3728      	adds	r7, #40	; 0x28
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	fe00e800 	.word	0xfe00e800

0801660c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	607b      	str	r3, [r7, #4]
 8016616:	460b      	mov	r3, r1
 8016618:	817b      	strh	r3, [r7, #10]
 801661a:	4613      	mov	r3, r2
 801661c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801661e:	897b      	ldrh	r3, [r7, #10]
 8016620:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016624:	7a7b      	ldrb	r3, [r7, #9]
 8016626:	041b      	lsls	r3, r3, #16
 8016628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801662c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016632:	6a3b      	ldr	r3, [r7, #32]
 8016634:	4313      	orrs	r3, r2
 8016636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801663a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	685a      	ldr	r2, [r3, #4]
 8016642:	6a3b      	ldr	r3, [r7, #32]
 8016644:	0d5b      	lsrs	r3, r3, #21
 8016646:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801664a:	4b08      	ldr	r3, [pc, #32]	; (801666c <I2C_TransferConfig+0x60>)
 801664c:	430b      	orrs	r3, r1
 801664e:	43db      	mvns	r3, r3
 8016650:	ea02 0103 	and.w	r1, r2, r3
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	697a      	ldr	r2, [r7, #20]
 801665a:	430a      	orrs	r2, r1
 801665c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801665e:	bf00      	nop
 8016660:	371c      	adds	r7, #28
 8016662:	46bd      	mov	sp, r7
 8016664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016668:	4770      	bx	lr
 801666a:	bf00      	nop
 801666c:	03ff63ff 	.word	0x03ff63ff

08016670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016670:	b480      	push	{r7}
 8016672:	b083      	sub	sp, #12
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016680:	b2db      	uxtb	r3, r3
 8016682:	2b20      	cmp	r3, #32
 8016684:	d138      	bne.n	80166f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801668c:	2b01      	cmp	r3, #1
 801668e:	d101      	bne.n	8016694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016690:	2302      	movs	r3, #2
 8016692:	e032      	b.n	80166fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2201      	movs	r2, #1
 8016698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2224      	movs	r2, #36	; 0x24
 80166a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	681a      	ldr	r2, [r3, #0]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	f022 0201 	bic.w	r2, r2, #1
 80166b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80166c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	6819      	ldr	r1, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	683a      	ldr	r2, [r7, #0]
 80166d0:	430a      	orrs	r2, r1
 80166d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	f042 0201 	orr.w	r2, r2, #1
 80166e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2220      	movs	r2, #32
 80166e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80166f4:	2300      	movs	r3, #0
 80166f6:	e000      	b.n	80166fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80166f8:	2302      	movs	r3, #2
  }
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr

08016706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016706:	b480      	push	{r7}
 8016708:	b085      	sub	sp, #20
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]
 801670e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016716:	b2db      	uxtb	r3, r3
 8016718:	2b20      	cmp	r3, #32
 801671a:	d139      	bne.n	8016790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016722:	2b01      	cmp	r3, #1
 8016724:	d101      	bne.n	801672a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016726:	2302      	movs	r3, #2
 8016728:	e033      	b.n	8016792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2201      	movs	r2, #1
 801672e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2224      	movs	r2, #36	; 0x24
 8016736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f022 0201 	bic.w	r2, r2, #1
 8016748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8016758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	021b      	lsls	r3, r3, #8
 801675e:	68fa      	ldr	r2, [r7, #12]
 8016760:	4313      	orrs	r3, r2
 8016762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	68fa      	ldr	r2, [r7, #12]
 801676a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	f042 0201 	orr.w	r2, r2, #1
 801677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2220      	movs	r2, #32
 8016780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801678c:	2300      	movs	r3, #0
 801678e:	e000      	b.n	8016792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016790:	2302      	movs	r3, #2
  }
}
 8016792:	4618      	mov	r0, r3
 8016794:	3714      	adds	r7, #20
 8016796:	46bd      	mov	sp, r7
 8016798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679c:	4770      	bx	lr

0801679e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801679e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167a0:	b08b      	sub	sp, #44	; 0x2c
 80167a2:	af06      	add	r7, sp, #24
 80167a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d101      	bne.n	80167b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80167ac:	2301      	movs	r3, #1
 80167ae:	e0cb      	b.n	8016948 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80167b6:	b2db      	uxtb	r3, r3
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d106      	bne.n	80167ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2200      	movs	r2, #0
 80167c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7ea fdff 	bl	80013c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2203      	movs	r2, #3
 80167ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4618      	mov	r0, r3
 80167d8:	f002 fed0 	bl	801957c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80167dc:	2300      	movs	r3, #0
 80167de:	73fb      	strb	r3, [r7, #15]
 80167e0:	e040      	b.n	8016864 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
 80167e4:	6879      	ldr	r1, [r7, #4]
 80167e6:	1c5a      	adds	r2, r3, #1
 80167e8:	4613      	mov	r3, r2
 80167ea:	009b      	lsls	r3, r3, #2
 80167ec:	4413      	add	r3, r2
 80167ee:	00db      	lsls	r3, r3, #3
 80167f0:	440b      	add	r3, r1
 80167f2:	3301      	adds	r3, #1
 80167f4:	2201      	movs	r2, #1
 80167f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80167f8:	7bfb      	ldrb	r3, [r7, #15]
 80167fa:	6879      	ldr	r1, [r7, #4]
 80167fc:	1c5a      	adds	r2, r3, #1
 80167fe:	4613      	mov	r3, r2
 8016800:	009b      	lsls	r3, r3, #2
 8016802:	4413      	add	r3, r2
 8016804:	00db      	lsls	r3, r3, #3
 8016806:	440b      	add	r3, r1
 8016808:	7bfa      	ldrb	r2, [r7, #15]
 801680a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801680c:	7bfb      	ldrb	r3, [r7, #15]
 801680e:	6879      	ldr	r1, [r7, #4]
 8016810:	1c5a      	adds	r2, r3, #1
 8016812:	4613      	mov	r3, r2
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	4413      	add	r3, r2
 8016818:	00db      	lsls	r3, r3, #3
 801681a:	440b      	add	r3, r1
 801681c:	3303      	adds	r3, #3
 801681e:	2200      	movs	r2, #0
 8016820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016822:	7bfa      	ldrb	r2, [r7, #15]
 8016824:	6879      	ldr	r1, [r7, #4]
 8016826:	4613      	mov	r3, r2
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	4413      	add	r3, r2
 801682c:	00db      	lsls	r3, r3, #3
 801682e:	440b      	add	r3, r1
 8016830:	3338      	adds	r3, #56	; 0x38
 8016832:	2200      	movs	r2, #0
 8016834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016836:	7bfa      	ldrb	r2, [r7, #15]
 8016838:	6879      	ldr	r1, [r7, #4]
 801683a:	4613      	mov	r3, r2
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	4413      	add	r3, r2
 8016840:	00db      	lsls	r3, r3, #3
 8016842:	440b      	add	r3, r1
 8016844:	333c      	adds	r3, #60	; 0x3c
 8016846:	2200      	movs	r2, #0
 8016848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801684a:	7bfa      	ldrb	r2, [r7, #15]
 801684c:	6879      	ldr	r1, [r7, #4]
 801684e:	4613      	mov	r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	4413      	add	r3, r2
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	440b      	add	r3, r1
 8016858:	3340      	adds	r3, #64	; 0x40
 801685a:	2200      	movs	r2, #0
 801685c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801685e:	7bfb      	ldrb	r3, [r7, #15]
 8016860:	3301      	adds	r3, #1
 8016862:	73fb      	strb	r3, [r7, #15]
 8016864:	7bfa      	ldrb	r2, [r7, #15]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	429a      	cmp	r2, r3
 801686c:	d3b9      	bcc.n	80167e2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801686e:	2300      	movs	r3, #0
 8016870:	73fb      	strb	r3, [r7, #15]
 8016872:	e044      	b.n	80168fe <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016874:	7bfa      	ldrb	r2, [r7, #15]
 8016876:	6879      	ldr	r1, [r7, #4]
 8016878:	4613      	mov	r3, r2
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	4413      	add	r3, r2
 801687e:	00db      	lsls	r3, r3, #3
 8016880:	440b      	add	r3, r1
 8016882:	f203 1369 	addw	r3, r3, #361	; 0x169
 8016886:	2200      	movs	r2, #0
 8016888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801688a:	7bfa      	ldrb	r2, [r7, #15]
 801688c:	6879      	ldr	r1, [r7, #4]
 801688e:	4613      	mov	r3, r2
 8016890:	009b      	lsls	r3, r3, #2
 8016892:	4413      	add	r3, r2
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	440b      	add	r3, r1
 8016898:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801689c:	7bfa      	ldrb	r2, [r7, #15]
 801689e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80168a0:	7bfa      	ldrb	r2, [r7, #15]
 80168a2:	6879      	ldr	r1, [r7, #4]
 80168a4:	4613      	mov	r3, r2
 80168a6:	009b      	lsls	r3, r3, #2
 80168a8:	4413      	add	r3, r2
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	440b      	add	r3, r1
 80168ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80168b2:	2200      	movs	r2, #0
 80168b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80168b6:	7bfa      	ldrb	r2, [r7, #15]
 80168b8:	6879      	ldr	r1, [r7, #4]
 80168ba:	4613      	mov	r3, r2
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	4413      	add	r3, r2
 80168c0:	00db      	lsls	r3, r3, #3
 80168c2:	440b      	add	r3, r1
 80168c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80168c8:	2200      	movs	r2, #0
 80168ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80168cc:	7bfa      	ldrb	r2, [r7, #15]
 80168ce:	6879      	ldr	r1, [r7, #4]
 80168d0:	4613      	mov	r3, r2
 80168d2:	009b      	lsls	r3, r3, #2
 80168d4:	4413      	add	r3, r2
 80168d6:	00db      	lsls	r3, r3, #3
 80168d8:	440b      	add	r3, r1
 80168da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80168de:	2200      	movs	r2, #0
 80168e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80168e2:	7bfa      	ldrb	r2, [r7, #15]
 80168e4:	6879      	ldr	r1, [r7, #4]
 80168e6:	4613      	mov	r3, r2
 80168e8:	009b      	lsls	r3, r3, #2
 80168ea:	4413      	add	r3, r2
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	440b      	add	r3, r1
 80168f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80168f4:	2200      	movs	r2, #0
 80168f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80168f8:	7bfb      	ldrb	r3, [r7, #15]
 80168fa:	3301      	adds	r3, #1
 80168fc:	73fb      	strb	r3, [r7, #15]
 80168fe:	7bfa      	ldrb	r2, [r7, #15]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	685b      	ldr	r3, [r3, #4]
 8016904:	429a      	cmp	r2, r3
 8016906:	d3b5      	bcc.n	8016874 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	603b      	str	r3, [r7, #0]
 801690e:	687e      	ldr	r6, [r7, #4]
 8016910:	466d      	mov	r5, sp
 8016912:	f106 0410 	add.w	r4, r6, #16
 8016916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	602b      	str	r3, [r5, #0]
 801691e:	1d33      	adds	r3, r6, #4
 8016920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016922:	6838      	ldr	r0, [r7, #0]
 8016924:	f002 fe45 	bl	80195b2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2200      	movs	r2, #0
 801692c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2201      	movs	r2, #1
 8016934:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	69db      	ldr	r3, [r3, #28]
 801693c:	2b01      	cmp	r3, #1
 801693e:	d102      	bne.n	8016946 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f000 f805 	bl	8016950 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016946:	2300      	movs	r3, #0
}
 8016948:	4618      	mov	r0, r3
 801694a:	3714      	adds	r7, #20
 801694c:	46bd      	mov	sp, r7
 801694e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016950:	b480      	push	{r7}
 8016952:	b085      	sub	sp, #20
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2201      	movs	r2, #1
 8016962:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2200      	movs	r2, #0
 801696a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016974:	b29b      	uxth	r3, r3
 8016976:	f043 0301 	orr.w	r3, r3, #1
 801697a:	b29a      	uxth	r2, r3
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016988:	b29b      	uxth	r3, r3
 801698a:	f043 0302 	orr.w	r3, r3, #2
 801698e:	b29a      	uxth	r2, r3
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8016996:	2300      	movs	r3, #0
}
 8016998:	4618      	mov	r0, r3
 801699a:	3714      	adds	r7, #20
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr

080169a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80169a4:	b480      	push	{r7}
 80169a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80169a8:	4b05      	ldr	r3, [pc, #20]	; (80169c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	4a04      	ldr	r2, [pc, #16]	; (80169c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80169ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80169b2:	6013      	str	r3, [r2, #0]
}
 80169b4:	bf00      	nop
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr
 80169be:	bf00      	nop
 80169c0:	58000400 	.word	0x58000400

080169c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80169c4:	b480      	push	{r7}
 80169c6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80169c8:	4b04      	ldr	r3, [pc, #16]	; (80169dc <HAL_PWREx_GetVoltageRange+0x18>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	58000400 	.word	0x58000400

080169e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80169e0:	b480      	push	{r7}
 80169e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80169e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169f2:	d101      	bne.n	80169f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80169f4:	2301      	movs	r3, #1
 80169f6:	e000      	b.n	80169fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80169f8:	2300      	movs	r3, #0
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <LL_RCC_HSE_Enable>:
{
 8016a04:	b480      	push	{r7}
 8016a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016a16:	6013      	str	r3, [r2, #0]
}
 8016a18:	bf00      	nop
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr

08016a22 <LL_RCC_HSE_Disable>:
{
 8016a22:	b480      	push	{r7}
 8016a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8016a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016a34:	6013      	str	r3, [r2, #0]
}
 8016a36:	bf00      	nop
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <LL_RCC_HSE_IsReady>:
{
 8016a40:	b480      	push	{r7}
 8016a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016a52:	d101      	bne.n	8016a58 <LL_RCC_HSE_IsReady+0x18>
 8016a54:	2301      	movs	r3, #1
 8016a56:	e000      	b.n	8016a5a <LL_RCC_HSE_IsReady+0x1a>
 8016a58:	2300      	movs	r3, #0
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr

08016a64 <LL_RCC_HSI_Enable>:
{
 8016a64:	b480      	push	{r7}
 8016a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016a76:	6013      	str	r3, [r2, #0]
}
 8016a78:	bf00      	nop
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a80:	4770      	bx	lr

08016a82 <LL_RCC_HSI_Disable>:
{
 8016a82:	b480      	push	{r7}
 8016a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8016a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a94:	6013      	str	r3, [r2, #0]
}
 8016a96:	bf00      	nop
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr

08016aa0 <LL_RCC_HSI_IsReady>:
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ab2:	d101      	bne.n	8016ab8 <LL_RCC_HSI_IsReady+0x18>
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	e000      	b.n	8016aba <LL_RCC_HSI_IsReady+0x1a>
 8016ab8:	2300      	movs	r3, #0
}
 8016aba:	4618      	mov	r0, r3
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr

08016ac4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	061b      	lsls	r3, r3, #24
 8016ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ade:	4313      	orrs	r3, r2
 8016ae0:	604b      	str	r3, [r1, #4]
}
 8016ae2:	bf00      	nop
 8016ae4:	370c      	adds	r7, #12
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr

08016aee <LL_RCC_HSI48_Enable>:
{
 8016aee:	b480      	push	{r7}
 8016af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016afe:	f043 0301 	orr.w	r3, r3, #1
 8016b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016b06:	bf00      	nop
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0e:	4770      	bx	lr

08016b10 <LL_RCC_HSI48_Disable>:
{
 8016b10:	b480      	push	{r7}
 8016b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b20:	f023 0301 	bic.w	r3, r3, #1
 8016b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016b28:	bf00      	nop
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr

08016b32 <LL_RCC_HSI48_IsReady>:
{
 8016b32:	b480      	push	{r7}
 8016b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016b3e:	f003 0302 	and.w	r3, r3, #2
 8016b42:	2b02      	cmp	r3, #2
 8016b44:	d101      	bne.n	8016b4a <LL_RCC_HSI48_IsReady+0x18>
 8016b46:	2301      	movs	r3, #1
 8016b48:	e000      	b.n	8016b4c <LL_RCC_HSI48_IsReady+0x1a>
 8016b4a:	2300      	movs	r3, #0
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b54:	4770      	bx	lr

08016b56 <LL_RCC_LSE_Enable>:
{
 8016b56:	b480      	push	{r7}
 8016b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b66:	f043 0301 	orr.w	r3, r3, #1
 8016b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b6e:	bf00      	nop
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <LL_RCC_LSE_Disable>:
{
 8016b78:	b480      	push	{r7}
 8016b7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b88:	f023 0301 	bic.w	r3, r3, #1
 8016b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b90:	bf00      	nop
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr

08016b9a <LL_RCC_LSE_EnableBypass>:
{
 8016b9a:	b480      	push	{r7}
 8016b9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016baa:	f043 0304 	orr.w	r3, r3, #4
 8016bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016bb2:	bf00      	nop
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr

08016bbc <LL_RCC_LSE_DisableBypass>:
{
 8016bbc:	b480      	push	{r7}
 8016bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bcc:	f023 0304 	bic.w	r3, r3, #4
 8016bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016bd4:	bf00      	nop
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bdc:	4770      	bx	lr

08016bde <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016bde:	b480      	push	{r7}
 8016be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bea:	f003 0302 	and.w	r3, r3, #2
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d101      	bne.n	8016bf6 <LL_RCC_LSE_IsReady+0x18>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	e000      	b.n	8016bf8 <LL_RCC_LSE_IsReady+0x1a>
 8016bf6:	2300      	movs	r3, #0
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr

08016c02 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016c02:	b480      	push	{r7}
 8016c04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c12:	f043 0301 	orr.w	r3, r3, #1
 8016c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c1a:	bf00      	nop
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr

08016c24 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016c24:	b480      	push	{r7}
 8016c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c34:	f023 0301 	bic.w	r3, r3, #1
 8016c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c3c:	bf00      	nop
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr

08016c46 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016c46:	b480      	push	{r7}
 8016c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c52:	f003 0302 	and.w	r3, r3, #2
 8016c56:	2b02      	cmp	r3, #2
 8016c58:	d101      	bne.n	8016c5e <LL_RCC_LSI1_IsReady+0x18>
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	e000      	b.n	8016c60 <LL_RCC_LSI1_IsReady+0x1a>
 8016c5e:	2300      	movs	r3, #0
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr

08016c6a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016c6a:	b480      	push	{r7}
 8016c6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c7a:	f043 0304 	orr.w	r3, r3, #4
 8016c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c82:	bf00      	nop
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c9c:	f023 0304 	bic.w	r3, r3, #4
 8016ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016ca4:	bf00      	nop
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cac:	4770      	bx	lr

08016cae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016cae:	b480      	push	{r7}
 8016cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cba:	f003 0308 	and.w	r3, r3, #8
 8016cbe:	2b08      	cmp	r3, #8
 8016cc0:	d101      	bne.n	8016cc6 <LL_RCC_LSI2_IsReady+0x18>
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	e000      	b.n	8016cc8 <LL_RCC_LSI2_IsReady+0x1a>
 8016cc6:	2300      	movs	r3, #0
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd0:	4770      	bx	lr

08016cd2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016cd2:	b480      	push	{r7}
 8016cd4:	b083      	sub	sp, #12
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ce2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	021b      	lsls	r3, r3, #8
 8016cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016cee:	4313      	orrs	r3, r2
 8016cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016cf4:	bf00      	nop
 8016cf6:	370c      	adds	r7, #12
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016d00:	b480      	push	{r7}
 8016d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d0e:	f043 0301 	orr.w	r3, r3, #1
 8016d12:	6013      	str	r3, [r2, #0]
}
 8016d14:	bf00      	nop
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr

08016d1e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016d1e:	b480      	push	{r7}
 8016d20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d2c:	f023 0301 	bic.w	r3, r3, #1
 8016d30:	6013      	str	r3, [r2, #0]
}
 8016d32:	bf00      	nop
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f003 0302 	and.w	r3, r3, #2
 8016d4a:	2b02      	cmp	r3, #2
 8016d4c:	d101      	bne.n	8016d52 <LL_RCC_MSI_IsReady+0x16>
 8016d4e:	2301      	movs	r3, #1
 8016d50:	e000      	b.n	8016d54 <LL_RCC_MSI_IsReady+0x18>
 8016d52:	2300      	movs	r3, #0
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	46bd      	mov	sp, r7
 8016d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5c:	4770      	bx	lr

08016d5e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016d5e:	b480      	push	{r7}
 8016d60:	b083      	sub	sp, #12
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	4313      	orrs	r3, r2
 8016d78:	600b      	str	r3, [r1, #0]
}
 8016d7a:	bf00      	nop
 8016d7c:	370c      	adds	r7, #12
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d84:	4770      	bx	lr

08016d86 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016d86:	b480      	push	{r7}
 8016d88:	b083      	sub	sp, #12
 8016d8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8016d9c:	d901      	bls.n	8016da2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016d9e:	23b0      	movs	r3, #176	; 0xb0
 8016da0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016da2:	687b      	ldr	r3, [r7, #4]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	370c      	adds	r7, #12
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr

08016db0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016db0:	b480      	push	{r7}
 8016db2:	b083      	sub	sp, #12
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	021b      	lsls	r3, r3, #8
 8016dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016dca:	4313      	orrs	r3, r2
 8016dcc:	604b      	str	r3, [r1, #4]
}
 8016dce:	bf00      	nop
 8016dd0:	370c      	adds	r7, #12
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd8:	4770      	bx	lr

08016dda <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016dda:	b480      	push	{r7}
 8016ddc:	b083      	sub	sp, #12
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016de6:	689b      	ldr	r3, [r3, #8]
 8016de8:	f023 0203 	bic.w	r2, r3, #3
 8016dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	4313      	orrs	r3, r2
 8016df4:	608b      	str	r3, [r1, #8]
}
 8016df6:	bf00      	nop
 8016df8:	370c      	adds	r7, #12
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e00:	4770      	bx	lr

08016e02 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016e02:	b480      	push	{r7}
 8016e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e0a:	689b      	ldr	r3, [r3, #8]
 8016e0c:	f003 030c 	and.w	r3, r3, #12
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	46bd      	mov	sp, r7
 8016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e18:	4770      	bx	lr

08016e1a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016e1a:	b480      	push	{r7}
 8016e1c:	b083      	sub	sp, #12
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e26:	689b      	ldr	r3, [r3, #8]
 8016e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	4313      	orrs	r3, r2
 8016e34:	608b      	str	r3, [r1, #8]
}
 8016e36:	bf00      	nop
 8016e38:	370c      	adds	r7, #12
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr

08016e42 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016e42:	b480      	push	{r7}
 8016e44:	b083      	sub	sp, #12
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4313      	orrs	r3, r2
 8016e5e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016e62:	bf00      	nop
 8016e64:	370c      	adds	r7, #12
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr

08016e6e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016e6e:	b480      	push	{r7}
 8016e70:	b083      	sub	sp, #12
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016e7e:	f023 020f 	bic.w	r2, r3, #15
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	091b      	lsrs	r3, r3, #4
 8016e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016e90:	bf00      	nop
 8016e92:	370c      	adds	r7, #12
 8016e94:	46bd      	mov	sp, r7
 8016e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9a:	4770      	bx	lr

08016e9c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b083      	sub	sp, #12
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ea8:	689b      	ldr	r3, [r3, #8]
 8016eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	4313      	orrs	r3, r2
 8016eb6:	608b      	str	r3, [r1, #8]
}
 8016eb8:	bf00      	nop
 8016eba:	370c      	adds	r7, #12
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec2:	4770      	bx	lr

08016ec4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b083      	sub	sp, #12
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ed0:	689b      	ldr	r3, [r3, #8]
 8016ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	4313      	orrs	r3, r2
 8016ede:	608b      	str	r3, [r1, #8]
}
 8016ee0:	bf00      	nop
 8016ee2:	370c      	adds	r7, #12
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eea:	4770      	bx	lr

08016eec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016eec:	b480      	push	{r7}
 8016eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ef4:	689b      	ldr	r3, [r3, #8]
 8016ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	46bd      	mov	sp, r7
 8016efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f02:	4770      	bx	lr

08016f04 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8016f04:	b480      	push	{r7}
 8016f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8016f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr

08016f1e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016f1e:	b480      	push	{r7}
 8016f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016f2a:	011b      	lsls	r3, r3, #4
 8016f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr

08016f3a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016f3a:	b480      	push	{r7}
 8016f3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f42:	689b      	ldr	r3, [r3, #8]
 8016f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f50:	4770      	bx	lr

08016f52 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016f52:	b480      	push	{r7}
 8016f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f5a:	689b      	ldr	r3, [r3, #8]
 8016f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr

08016f6a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016f6a:	b480      	push	{r7}
 8016f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016f7c:	6013      	str	r3, [r2, #0]
}
 8016f7e:	bf00      	nop
 8016f80:	46bd      	mov	sp, r7
 8016f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f86:	4770      	bx	lr

08016f88 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016f9a:	6013      	str	r3, [r2, #0]
}
 8016f9c:	bf00      	nop
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa4:	4770      	bx	lr

08016fa6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016fa6:	b480      	push	{r7}
 8016fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016fb8:	d101      	bne.n	8016fbe <LL_RCC_PLL_IsReady+0x18>
 8016fba:	2301      	movs	r3, #1
 8016fbc:	e000      	b.n	8016fc0 <LL_RCC_PLL_IsReady+0x1a>
 8016fbe:	2300      	movs	r3, #0
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc8:	4770      	bx	lr

08016fca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016fca:	b480      	push	{r7}
 8016fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	0a1b      	lsrs	r3, r3, #8
 8016fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fec:	68db      	ldr	r3, [r3, #12]
 8016fee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffa:	4770      	bx	lr

08016ffc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8017000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017004:	68db      	ldr	r3, [r3, #12]
 8017006:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801700a:	4618      	mov	r0, r3
 801700c:	46bd      	mov	sp, r7
 801700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017012:	4770      	bx	lr

08017014 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8017014:	b480      	push	{r7}
 8017016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8017018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	f003 0303 	and.w	r3, r3, #3
}
 8017022:	4618      	mov	r0, r3
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801702c:	b480      	push	{r7}
 801702e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8017030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017034:	689b      	ldr	r3, [r3, #8]
 8017036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801703a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801703e:	d101      	bne.n	8017044 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8017040:	2301      	movs	r3, #1
 8017042:	e000      	b.n	8017046 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8017044:	2300      	movs	r3, #0
}
 8017046:	4618      	mov	r0, r3
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8017050:	b480      	push	{r7}
 8017052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8017054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017064:	d101      	bne.n	801706a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8017066:	2301      	movs	r3, #1
 8017068:	e000      	b.n	801706c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801706a:	2300      	movs	r3, #0
}
 801706c:	4618      	mov	r0, r3
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr

08017076 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8017076:	b480      	push	{r7}
 8017078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801707a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801707e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801708a:	d101      	bne.n	8017090 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801708c:	2301      	movs	r3, #1
 801708e:	e000      	b.n	8017092 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8017090:	2300      	movs	r3, #0
}
 8017092:	4618      	mov	r0, r3
 8017094:	46bd      	mov	sp, r7
 8017096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709a:	4770      	bx	lr

0801709c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801709c:	b480      	push	{r7}
 801709e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80170a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170a4:	689b      	ldr	r3, [r3, #8]
 80170a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80170aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80170ae:	d101      	bne.n	80170b4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80170b0:	2301      	movs	r3, #1
 80170b2:	e000      	b.n	80170b6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr

080170c0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80170c0:	b480      	push	{r7}
 80170c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80170c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170c8:	689b      	ldr	r3, [r3, #8]
 80170ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80170ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80170d2:	d101      	bne.n	80170d8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80170d4:	2301      	movs	r3, #1
 80170d6:	e000      	b.n	80170da <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80170d8:	2300      	movs	r3, #0
}
 80170da:	4618      	mov	r0, r3
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80170e4:	b590      	push	{r4, r7, lr}
 80170e6:	b08d      	sub	sp, #52	; 0x34
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d101      	bne.n	80170f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80170f2:	2301      	movs	r3, #1
 80170f4:	e363      	b.n	80177be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	f003 0320 	and.w	r3, r3, #32
 80170fe:	2b00      	cmp	r3, #0
 8017100:	f000 808d 	beq.w	801721e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017104:	f7ff fe7d 	bl	8016e02 <LL_RCC_GetSysClkSource>
 8017108:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801710a:	f7ff ff83 	bl	8017014 <LL_RCC_PLL_GetMainSource>
 801710e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017112:	2b00      	cmp	r3, #0
 8017114:	d005      	beq.n	8017122 <HAL_RCC_OscConfig+0x3e>
 8017116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017118:	2b0c      	cmp	r3, #12
 801711a:	d147      	bne.n	80171ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801711e:	2b01      	cmp	r3, #1
 8017120:	d144      	bne.n	80171ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	69db      	ldr	r3, [r3, #28]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d101      	bne.n	801712e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801712a:	2301      	movs	r3, #1
 801712c:	e347      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017132:	f7ff fe28 	bl	8016d86 <LL_RCC_MSI_GetRange>
 8017136:	4603      	mov	r3, r0
 8017138:	429c      	cmp	r4, r3
 801713a:	d914      	bls.n	8017166 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017140:	4618      	mov	r0, r3
 8017142:	f000 fd61 	bl	8017c08 <RCC_SetFlashLatencyFromMSIRange>
 8017146:	4603      	mov	r3, r0
 8017148:	2b00      	cmp	r3, #0
 801714a:	d001      	beq.n	8017150 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801714c:	2301      	movs	r3, #1
 801714e:	e336      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017154:	4618      	mov	r0, r3
 8017156:	f7ff fe02 	bl	8016d5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	6a1b      	ldr	r3, [r3, #32]
 801715e:	4618      	mov	r0, r3
 8017160:	f7ff fe26 	bl	8016db0 <LL_RCC_MSI_SetCalibTrimming>
 8017164:	e013      	b.n	801718e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801716a:	4618      	mov	r0, r3
 801716c:	f7ff fdf7 	bl	8016d5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6a1b      	ldr	r3, [r3, #32]
 8017174:	4618      	mov	r0, r3
 8017176:	f7ff fe1b 	bl	8016db0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801717e:	4618      	mov	r0, r3
 8017180:	f000 fd42 	bl	8017c08 <RCC_SetFlashLatencyFromMSIRange>
 8017184:	4603      	mov	r3, r0
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801718a:	2301      	movs	r3, #1
 801718c:	e317      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801718e:	f000 fcc9 	bl	8017b24 <HAL_RCC_GetHCLKFreq>
 8017192:	4603      	mov	r3, r0
 8017194:	4aa4      	ldr	r2, [pc, #656]	; (8017428 <HAL_RCC_OscConfig+0x344>)
 8017196:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8017198:	4ba4      	ldr	r3, [pc, #656]	; (801742c <HAL_RCC_OscConfig+0x348>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	4618      	mov	r0, r3
 801719e:	f7e9 fcef 	bl	8000b80 <HAL_InitTick>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d039      	beq.n	801721c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80171a8:	2301      	movs	r3, #1
 80171aa:	e308      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	69db      	ldr	r3, [r3, #28]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d01e      	beq.n	80171f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80171b4:	f7ff fda4 	bl	8016d00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80171b8:	f7fe f972 	bl	80154a0 <HAL_GetTick>
 80171bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80171be:	e008      	b.n	80171d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80171c0:	f7fe f96e 	bl	80154a0 <HAL_GetTick>
 80171c4:	4602      	mov	r2, r0
 80171c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c8:	1ad3      	subs	r3, r2, r3
 80171ca:	2b02      	cmp	r3, #2
 80171cc:	d901      	bls.n	80171d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80171ce:	2303      	movs	r3, #3
 80171d0:	e2f5      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80171d2:	f7ff fdb3 	bl	8016d3c <LL_RCC_MSI_IsReady>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d0f1      	beq.n	80171c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7ff fdbc 	bl	8016d5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6a1b      	ldr	r3, [r3, #32]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7ff fde0 	bl	8016db0 <LL_RCC_MSI_SetCalibTrimming>
 80171f0:	e015      	b.n	801721e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80171f2:	f7ff fd94 	bl	8016d1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80171f6:	f7fe f953 	bl	80154a0 <HAL_GetTick>
 80171fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80171fc:	e008      	b.n	8017210 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80171fe:	f7fe f94f 	bl	80154a0 <HAL_GetTick>
 8017202:	4602      	mov	r2, r0
 8017204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017206:	1ad3      	subs	r3, r2, r3
 8017208:	2b02      	cmp	r3, #2
 801720a:	d901      	bls.n	8017210 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801720c:	2303      	movs	r3, #3
 801720e:	e2d6      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017210:	f7ff fd94 	bl	8016d3c <LL_RCC_MSI_IsReady>
 8017214:	4603      	mov	r3, r0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d1f1      	bne.n	80171fe <HAL_RCC_OscConfig+0x11a>
 801721a:	e000      	b.n	801721e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801721c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	f003 0301 	and.w	r3, r3, #1
 8017226:	2b00      	cmp	r3, #0
 8017228:	d047      	beq.n	80172ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801722a:	f7ff fdea 	bl	8016e02 <LL_RCC_GetSysClkSource>
 801722e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017230:	f7ff fef0 	bl	8017014 <LL_RCC_PLL_GetMainSource>
 8017234:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8017236:	6a3b      	ldr	r3, [r7, #32]
 8017238:	2b08      	cmp	r3, #8
 801723a:	d005      	beq.n	8017248 <HAL_RCC_OscConfig+0x164>
 801723c:	6a3b      	ldr	r3, [r7, #32]
 801723e:	2b0c      	cmp	r3, #12
 8017240:	d108      	bne.n	8017254 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	2b03      	cmp	r3, #3
 8017246:	d105      	bne.n	8017254 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d134      	bne.n	80172ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8017250:	2301      	movs	r3, #1
 8017252:	e2b4      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	685b      	ldr	r3, [r3, #4]
 8017258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801725c:	d102      	bne.n	8017264 <HAL_RCC_OscConfig+0x180>
 801725e:	f7ff fbd1 	bl	8016a04 <LL_RCC_HSE_Enable>
 8017262:	e001      	b.n	8017268 <HAL_RCC_OscConfig+0x184>
 8017264:	f7ff fbdd 	bl	8016a22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d012      	beq.n	8017296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017270:	f7fe f916 	bl	80154a0 <HAL_GetTick>
 8017274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8017276:	e008      	b.n	801728a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017278:	f7fe f912 	bl	80154a0 <HAL_GetTick>
 801727c:	4602      	mov	r2, r0
 801727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017280:	1ad3      	subs	r3, r2, r3
 8017282:	2b64      	cmp	r3, #100	; 0x64
 8017284:	d901      	bls.n	801728a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8017286:	2303      	movs	r3, #3
 8017288:	e299      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801728a:	f7ff fbd9 	bl	8016a40 <LL_RCC_HSE_IsReady>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d0f1      	beq.n	8017278 <HAL_RCC_OscConfig+0x194>
 8017294:	e011      	b.n	80172ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017296:	f7fe f903 	bl	80154a0 <HAL_GetTick>
 801729a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801729c:	e008      	b.n	80172b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801729e:	f7fe f8ff 	bl	80154a0 <HAL_GetTick>
 80172a2:	4602      	mov	r2, r0
 80172a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a6:	1ad3      	subs	r3, r2, r3
 80172a8:	2b64      	cmp	r3, #100	; 0x64
 80172aa:	d901      	bls.n	80172b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80172ac:	2303      	movs	r3, #3
 80172ae:	e286      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80172b0:	f7ff fbc6 	bl	8016a40 <LL_RCC_HSE_IsReady>
 80172b4:	4603      	mov	r3, r0
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1f1      	bne.n	801729e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f003 0302 	and.w	r3, r3, #2
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d04c      	beq.n	8017360 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80172c6:	f7ff fd9c 	bl	8016e02 <LL_RCC_GetSysClkSource>
 80172ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80172cc:	f7ff fea2 	bl	8017014 <LL_RCC_PLL_GetMainSource>
 80172d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	2b04      	cmp	r3, #4
 80172d6:	d005      	beq.n	80172e4 <HAL_RCC_OscConfig+0x200>
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	2b0c      	cmp	r3, #12
 80172dc:	d10e      	bne.n	80172fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	2b02      	cmp	r3, #2
 80172e2:	d10b      	bne.n	80172fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	68db      	ldr	r3, [r3, #12]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d101      	bne.n	80172f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80172ec:	2301      	movs	r3, #1
 80172ee:	e266      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	691b      	ldr	r3, [r3, #16]
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7ff fbe5 	bl	8016ac4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80172fa:	e031      	b.n	8017360 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d019      	beq.n	8017338 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017304:	f7ff fbae 	bl	8016a64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017308:	f7fe f8ca 	bl	80154a0 <HAL_GetTick>
 801730c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801730e:	e008      	b.n	8017322 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017310:	f7fe f8c6 	bl	80154a0 <HAL_GetTick>
 8017314:	4602      	mov	r2, r0
 8017316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	2b02      	cmp	r3, #2
 801731c:	d901      	bls.n	8017322 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801731e:	2303      	movs	r3, #3
 8017320:	e24d      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8017322:	f7ff fbbd 	bl	8016aa0 <LL_RCC_HSI_IsReady>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d0f1      	beq.n	8017310 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	4618      	mov	r0, r3
 8017332:	f7ff fbc7 	bl	8016ac4 <LL_RCC_HSI_SetCalibTrimming>
 8017336:	e013      	b.n	8017360 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017338:	f7ff fba3 	bl	8016a82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801733c:	f7fe f8b0 	bl	80154a0 <HAL_GetTick>
 8017340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8017342:	e008      	b.n	8017356 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017344:	f7fe f8ac 	bl	80154a0 <HAL_GetTick>
 8017348:	4602      	mov	r2, r0
 801734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734c:	1ad3      	subs	r3, r2, r3
 801734e:	2b02      	cmp	r3, #2
 8017350:	d901      	bls.n	8017356 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8017352:	2303      	movs	r3, #3
 8017354:	e233      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8017356:	f7ff fba3 	bl	8016aa0 <LL_RCC_HSI_IsReady>
 801735a:	4603      	mov	r3, r0
 801735c:	2b00      	cmp	r3, #0
 801735e:	d1f1      	bne.n	8017344 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f003 0308 	and.w	r3, r3, #8
 8017368:	2b00      	cmp	r3, #0
 801736a:	d106      	bne.n	801737a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 80a3 	beq.w	80174c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	695b      	ldr	r3, [r3, #20]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d076      	beq.n	8017470 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f003 0310 	and.w	r3, r3, #16
 801738a:	2b00      	cmp	r3, #0
 801738c:	d046      	beq.n	801741c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801738e:	f7ff fc5a 	bl	8016c46 <LL_RCC_LSI1_IsReady>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d113      	bne.n	80173c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8017398:	f7ff fc33 	bl	8016c02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801739c:	f7fe f880 	bl	80154a0 <HAL_GetTick>
 80173a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80173a2:	e008      	b.n	80173b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80173a4:	f7fe f87c 	bl	80154a0 <HAL_GetTick>
 80173a8:	4602      	mov	r2, r0
 80173aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ac:	1ad3      	subs	r3, r2, r3
 80173ae:	2b02      	cmp	r3, #2
 80173b0:	d901      	bls.n	80173b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80173b2:	2303      	movs	r3, #3
 80173b4:	e203      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80173b6:	f7ff fc46 	bl	8016c46 <LL_RCC_LSI1_IsReady>
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d0f1      	beq.n	80173a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80173c0:	f7ff fc53 	bl	8016c6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173c4:	f7fe f86c 	bl	80154a0 <HAL_GetTick>
 80173c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80173ca:	e008      	b.n	80173de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80173cc:	f7fe f868 	bl	80154a0 <HAL_GetTick>
 80173d0:	4602      	mov	r2, r0
 80173d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d4:	1ad3      	subs	r3, r2, r3
 80173d6:	2b03      	cmp	r3, #3
 80173d8:	d901      	bls.n	80173de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80173da:	2303      	movs	r3, #3
 80173dc:	e1ef      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80173de:	f7ff fc66 	bl	8016cae <LL_RCC_LSI2_IsReady>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d0f1      	beq.n	80173cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	699b      	ldr	r3, [r3, #24]
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7ff fc70 	bl	8016cd2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80173f2:	f7ff fc17 	bl	8016c24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173f6:	f7fe f853 	bl	80154a0 <HAL_GetTick>
 80173fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80173fc:	e008      	b.n	8017410 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80173fe:	f7fe f84f 	bl	80154a0 <HAL_GetTick>
 8017402:	4602      	mov	r2, r0
 8017404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017406:	1ad3      	subs	r3, r2, r3
 8017408:	2b02      	cmp	r3, #2
 801740a:	d901      	bls.n	8017410 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801740c:	2303      	movs	r3, #3
 801740e:	e1d6      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017410:	f7ff fc19 	bl	8016c46 <LL_RCC_LSI1_IsReady>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d1f1      	bne.n	80173fe <HAL_RCC_OscConfig+0x31a>
 801741a:	e051      	b.n	80174c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801741c:	f7ff fbf1 	bl	8016c02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017420:	f7fe f83e 	bl	80154a0 <HAL_GetTick>
 8017424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017426:	e00c      	b.n	8017442 <HAL_RCC_OscConfig+0x35e>
 8017428:	20000008 	.word	0x20000008
 801742c:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017430:	f7fe f836 	bl	80154a0 <HAL_GetTick>
 8017434:	4602      	mov	r2, r0
 8017436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017438:	1ad3      	subs	r3, r2, r3
 801743a:	2b02      	cmp	r3, #2
 801743c:	d901      	bls.n	8017442 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801743e:	2303      	movs	r3, #3
 8017440:	e1bd      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017442:	f7ff fc00 	bl	8016c46 <LL_RCC_LSI1_IsReady>
 8017446:	4603      	mov	r3, r0
 8017448:	2b00      	cmp	r3, #0
 801744a:	d0f1      	beq.n	8017430 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801744c:	f7ff fc1e 	bl	8016c8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017450:	e008      	b.n	8017464 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017452:	f7fe f825 	bl	80154a0 <HAL_GetTick>
 8017456:	4602      	mov	r2, r0
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	2b03      	cmp	r3, #3
 801745e:	d901      	bls.n	8017464 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8017460:	2303      	movs	r3, #3
 8017462:	e1ac      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017464:	f7ff fc23 	bl	8016cae <LL_RCC_LSI2_IsReady>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	d1f1      	bne.n	8017452 <HAL_RCC_OscConfig+0x36e>
 801746e:	e027      	b.n	80174c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8017470:	f7ff fc0c 	bl	8016c8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017474:	f7fe f814 	bl	80154a0 <HAL_GetTick>
 8017478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801747a:	e008      	b.n	801748e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801747c:	f7fe f810 	bl	80154a0 <HAL_GetTick>
 8017480:	4602      	mov	r2, r0
 8017482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017484:	1ad3      	subs	r3, r2, r3
 8017486:	2b03      	cmp	r3, #3
 8017488:	d901      	bls.n	801748e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801748a:	2303      	movs	r3, #3
 801748c:	e197      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801748e:	f7ff fc0e 	bl	8016cae <LL_RCC_LSI2_IsReady>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d1f1      	bne.n	801747c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8017498:	f7ff fbc4 	bl	8016c24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801749c:	f7fe f800 	bl	80154a0 <HAL_GetTick>
 80174a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80174a2:	e008      	b.n	80174b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80174a4:	f7fd fffc 	bl	80154a0 <HAL_GetTick>
 80174a8:	4602      	mov	r2, r0
 80174aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ac:	1ad3      	subs	r3, r2, r3
 80174ae:	2b02      	cmp	r3, #2
 80174b0:	d901      	bls.n	80174b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80174b2:	2303      	movs	r3, #3
 80174b4:	e183      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80174b6:	f7ff fbc6 	bl	8016c46 <LL_RCC_LSI1_IsReady>
 80174ba:	4603      	mov	r3, r0
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1f1      	bne.n	80174a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f003 0304 	and.w	r3, r3, #4
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d05b      	beq.n	8017584 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174cc:	4ba7      	ldr	r3, [pc, #668]	; (801776c <HAL_RCC_OscConfig+0x688>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d114      	bne.n	8017502 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80174d8:	f7ff fa64 	bl	80169a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80174dc:	f7fd ffe0 	bl	80154a0 <HAL_GetTick>
 80174e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174e2:	e008      	b.n	80174f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80174e4:	f7fd ffdc 	bl	80154a0 <HAL_GetTick>
 80174e8:	4602      	mov	r2, r0
 80174ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	2b02      	cmp	r3, #2
 80174f0:	d901      	bls.n	80174f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80174f2:	2303      	movs	r3, #3
 80174f4:	e163      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174f6:	4b9d      	ldr	r3, [pc, #628]	; (801776c <HAL_RCC_OscConfig+0x688>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d0f0      	beq.n	80174e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	689b      	ldr	r3, [r3, #8]
 8017506:	2b01      	cmp	r3, #1
 8017508:	d102      	bne.n	8017510 <HAL_RCC_OscConfig+0x42c>
 801750a:	f7ff fb24 	bl	8016b56 <LL_RCC_LSE_Enable>
 801750e:	e00c      	b.n	801752a <HAL_RCC_OscConfig+0x446>
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	689b      	ldr	r3, [r3, #8]
 8017514:	2b05      	cmp	r3, #5
 8017516:	d104      	bne.n	8017522 <HAL_RCC_OscConfig+0x43e>
 8017518:	f7ff fb3f 	bl	8016b9a <LL_RCC_LSE_EnableBypass>
 801751c:	f7ff fb1b 	bl	8016b56 <LL_RCC_LSE_Enable>
 8017520:	e003      	b.n	801752a <HAL_RCC_OscConfig+0x446>
 8017522:	f7ff fb29 	bl	8016b78 <LL_RCC_LSE_Disable>
 8017526:	f7ff fb49 	bl	8016bbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	689b      	ldr	r3, [r3, #8]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d014      	beq.n	801755c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017532:	f7fd ffb5 	bl	80154a0 <HAL_GetTick>
 8017536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8017538:	e00a      	b.n	8017550 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801753a:	f7fd ffb1 	bl	80154a0 <HAL_GetTick>
 801753e:	4602      	mov	r2, r0
 8017540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017542:	1ad3      	subs	r3, r2, r3
 8017544:	f241 3288 	movw	r2, #5000	; 0x1388
 8017548:	4293      	cmp	r3, r2
 801754a:	d901      	bls.n	8017550 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801754c:	2303      	movs	r3, #3
 801754e:	e136      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8017550:	f7ff fb45 	bl	8016bde <LL_RCC_LSE_IsReady>
 8017554:	4603      	mov	r3, r0
 8017556:	2b00      	cmp	r3, #0
 8017558:	d0ef      	beq.n	801753a <HAL_RCC_OscConfig+0x456>
 801755a:	e013      	b.n	8017584 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801755c:	f7fd ffa0 	bl	80154a0 <HAL_GetTick>
 8017560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8017562:	e00a      	b.n	801757a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017564:	f7fd ff9c 	bl	80154a0 <HAL_GetTick>
 8017568:	4602      	mov	r2, r0
 801756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756c:	1ad3      	subs	r3, r2, r3
 801756e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017572:	4293      	cmp	r3, r2
 8017574:	d901      	bls.n	801757a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8017576:	2303      	movs	r3, #3
 8017578:	e121      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801757a:	f7ff fb30 	bl	8016bde <LL_RCC_LSE_IsReady>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d1ef      	bne.n	8017564 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801758c:	2b00      	cmp	r3, #0
 801758e:	d02c      	beq.n	80175ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017594:	2b00      	cmp	r3, #0
 8017596:	d014      	beq.n	80175c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017598:	f7ff faa9 	bl	8016aee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801759c:	f7fd ff80 	bl	80154a0 <HAL_GetTick>
 80175a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80175a2:	e008      	b.n	80175b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80175a4:	f7fd ff7c 	bl	80154a0 <HAL_GetTick>
 80175a8:	4602      	mov	r2, r0
 80175aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ac:	1ad3      	subs	r3, r2, r3
 80175ae:	2b02      	cmp	r3, #2
 80175b0:	d901      	bls.n	80175b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80175b2:	2303      	movs	r3, #3
 80175b4:	e103      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80175b6:	f7ff fabc 	bl	8016b32 <LL_RCC_HSI48_IsReady>
 80175ba:	4603      	mov	r3, r0
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d0f1      	beq.n	80175a4 <HAL_RCC_OscConfig+0x4c0>
 80175c0:	e013      	b.n	80175ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80175c2:	f7ff faa5 	bl	8016b10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80175c6:	f7fd ff6b 	bl	80154a0 <HAL_GetTick>
 80175ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80175cc:	e008      	b.n	80175e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80175ce:	f7fd ff67 	bl	80154a0 <HAL_GetTick>
 80175d2:	4602      	mov	r2, r0
 80175d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d6:	1ad3      	subs	r3, r2, r3
 80175d8:	2b02      	cmp	r3, #2
 80175da:	d901      	bls.n	80175e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80175dc:	2303      	movs	r3, #3
 80175de:	e0ee      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80175e0:	f7ff faa7 	bl	8016b32 <LL_RCC_HSI48_IsReady>
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d1f1      	bne.n	80175ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	f000 80e4 	beq.w	80177bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80175f4:	f7ff fc05 	bl	8016e02 <LL_RCC_GetSysClkSource>
 80175f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80175fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175fe:	68db      	ldr	r3, [r3, #12]
 8017600:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017606:	2b02      	cmp	r3, #2
 8017608:	f040 80b4 	bne.w	8017774 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f003 0203 	and.w	r2, r3, #3
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017616:	429a      	cmp	r2, r3
 8017618:	d123      	bne.n	8017662 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017624:	429a      	cmp	r2, r3
 8017626:	d11c      	bne.n	8017662 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	0a1b      	lsrs	r3, r3, #8
 801762c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017634:	429a      	cmp	r2, r3
 8017636:	d114      	bne.n	8017662 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017642:	429a      	cmp	r2, r3
 8017644:	d10d      	bne.n	8017662 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017650:	429a      	cmp	r2, r3
 8017652:	d106      	bne.n	8017662 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801765e:	429a      	cmp	r2, r3
 8017660:	d05d      	beq.n	801771e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	2b0c      	cmp	r3, #12
 8017666:	d058      	beq.n	801771a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8017668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017672:	2b00      	cmp	r3, #0
 8017674:	d001      	beq.n	801767a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8017676:	2301      	movs	r3, #1
 8017678:	e0a1      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801767a:	f7ff fc85 	bl	8016f88 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801767e:	f7fd ff0f 	bl	80154a0 <HAL_GetTick>
 8017682:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017684:	e008      	b.n	8017698 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017686:	f7fd ff0b 	bl	80154a0 <HAL_GetTick>
 801768a:	4602      	mov	r2, r0
 801768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801768e:	1ad3      	subs	r3, r2, r3
 8017690:	2b02      	cmp	r3, #2
 8017692:	d901      	bls.n	8017698 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8017694:	2303      	movs	r3, #3
 8017696:	e092      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d1ef      	bne.n	8017686 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80176a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176aa:	68da      	ldr	r2, [r3, #12]
 80176ac:	4b30      	ldr	r3, [pc, #192]	; (8017770 <HAL_RCC_OscConfig+0x68c>)
 80176ae:	4013      	ands	r3, r2
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80176b8:	4311      	orrs	r1, r2
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80176be:	0212      	lsls	r2, r2, #8
 80176c0:	4311      	orrs	r1, r2
 80176c2:	687a      	ldr	r2, [r7, #4]
 80176c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80176c6:	4311      	orrs	r1, r2
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80176cc:	4311      	orrs	r1, r2
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80176d2:	430a      	orrs	r2, r1
 80176d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80176d8:	4313      	orrs	r3, r2
 80176da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80176dc:	f7ff fc45 	bl	8016f6a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80176e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176e4:	68db      	ldr	r3, [r3, #12]
 80176e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80176ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80176ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80176f0:	f7fd fed6 	bl	80154a0 <HAL_GetTick>
 80176f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80176f6:	e008      	b.n	801770a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80176f8:	f7fd fed2 	bl	80154a0 <HAL_GetTick>
 80176fc:	4602      	mov	r2, r0
 80176fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017700:	1ad3      	subs	r3, r2, r3
 8017702:	2b02      	cmp	r3, #2
 8017704:	d901      	bls.n	801770a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8017706:	2303      	movs	r3, #3
 8017708:	e059      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801770a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017714:	2b00      	cmp	r3, #0
 8017716:	d0ef      	beq.n	80176f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017718:	e050      	b.n	80177bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801771a:	2301      	movs	r3, #1
 801771c:	e04f      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801771e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017728:	2b00      	cmp	r3, #0
 801772a:	d147      	bne.n	80177bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801772c:	f7ff fc1d 	bl	8016f6a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017734:	68db      	ldr	r3, [r3, #12]
 8017736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801773a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801773e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017740:	f7fd feae 	bl	80154a0 <HAL_GetTick>
 8017744:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017746:	e008      	b.n	801775a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017748:	f7fd feaa 	bl	80154a0 <HAL_GetTick>
 801774c:	4602      	mov	r2, r0
 801774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017750:	1ad3      	subs	r3, r2, r3
 8017752:	2b02      	cmp	r3, #2
 8017754:	d901      	bls.n	801775a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8017756:	2303      	movs	r3, #3
 8017758:	e031      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801775a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017764:	2b00      	cmp	r3, #0
 8017766:	d0ef      	beq.n	8017748 <HAL_RCC_OscConfig+0x664>
 8017768:	e028      	b.n	80177bc <HAL_RCC_OscConfig+0x6d8>
 801776a:	bf00      	nop
 801776c:	58000400 	.word	0x58000400
 8017770:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017774:	693b      	ldr	r3, [r7, #16]
 8017776:	2b0c      	cmp	r3, #12
 8017778:	d01e      	beq.n	80177b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801777a:	f7ff fc05 	bl	8016f88 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801777e:	f7fd fe8f 	bl	80154a0 <HAL_GetTick>
 8017782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017784:	e008      	b.n	8017798 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017786:	f7fd fe8b 	bl	80154a0 <HAL_GetTick>
 801778a:	4602      	mov	r2, r0
 801778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778e:	1ad3      	subs	r3, r2, r3
 8017790:	2b02      	cmp	r3, #2
 8017792:	d901      	bls.n	8017798 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8017794:	2303      	movs	r3, #3
 8017796:	e012      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d1ef      	bne.n	8017786 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80177a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80177aa:	68da      	ldr	r2, [r3, #12]
 80177ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80177b0:	4b05      	ldr	r3, [pc, #20]	; (80177c8 <HAL_RCC_OscConfig+0x6e4>)
 80177b2:	4013      	ands	r3, r2
 80177b4:	60cb      	str	r3, [r1, #12]
 80177b6:	e001      	b.n	80177bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80177b8:	2301      	movs	r3, #1
 80177ba:	e000      	b.n	80177be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80177bc:	2300      	movs	r3, #0
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3734      	adds	r7, #52	; 0x34
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd90      	pop	{r4, r7, pc}
 80177c6:	bf00      	nop
 80177c8:	eefefffc 	.word	0xeefefffc

080177cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d101      	bne.n	80177e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80177dc:	2301      	movs	r3, #1
 80177de:	e12d      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80177e0:	4b98      	ldr	r3, [pc, #608]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f003 0307 	and.w	r3, r3, #7
 80177e8:	683a      	ldr	r2, [r7, #0]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d91b      	bls.n	8017826 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80177ee:	4b95      	ldr	r3, [pc, #596]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f023 0207 	bic.w	r2, r3, #7
 80177f6:	4993      	ldr	r1, [pc, #588]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	4313      	orrs	r3, r2
 80177fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80177fe:	f7fd fe4f 	bl	80154a0 <HAL_GetTick>
 8017802:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017804:	e008      	b.n	8017818 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017806:	f7fd fe4b 	bl	80154a0 <HAL_GetTick>
 801780a:	4602      	mov	r2, r0
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	2b02      	cmp	r3, #2
 8017812:	d901      	bls.n	8017818 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017814:	2303      	movs	r3, #3
 8017816:	e111      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017818:	4b8a      	ldr	r3, [pc, #552]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	f003 0307 	and.w	r3, r3, #7
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	429a      	cmp	r2, r3
 8017824:	d1ef      	bne.n	8017806 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	f003 0302 	and.w	r3, r3, #2
 801782e:	2b00      	cmp	r3, #0
 8017830:	d016      	beq.n	8017860 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	689b      	ldr	r3, [r3, #8]
 8017836:	4618      	mov	r0, r3
 8017838:	f7ff faef 	bl	8016e1a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801783c:	f7fd fe30 	bl	80154a0 <HAL_GetTick>
 8017840:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017842:	e008      	b.n	8017856 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017844:	f7fd fe2c 	bl	80154a0 <HAL_GetTick>
 8017848:	4602      	mov	r2, r0
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	1ad3      	subs	r3, r2, r3
 801784e:	2b02      	cmp	r3, #2
 8017850:	d901      	bls.n	8017856 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8017852:	2303      	movs	r3, #3
 8017854:	e0f2      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017856:	f7ff fbe9 	bl	801702c <LL_RCC_IsActiveFlag_HPRE>
 801785a:	4603      	mov	r3, r0
 801785c:	2b00      	cmp	r3, #0
 801785e:	d0f1      	beq.n	8017844 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f003 0320 	and.w	r3, r3, #32
 8017868:	2b00      	cmp	r3, #0
 801786a:	d016      	beq.n	801789a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	695b      	ldr	r3, [r3, #20]
 8017870:	4618      	mov	r0, r3
 8017872:	f7ff fae6 	bl	8016e42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017876:	f7fd fe13 	bl	80154a0 <HAL_GetTick>
 801787a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801787c:	e008      	b.n	8017890 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801787e:	f7fd fe0f 	bl	80154a0 <HAL_GetTick>
 8017882:	4602      	mov	r2, r0
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	1ad3      	subs	r3, r2, r3
 8017888:	2b02      	cmp	r3, #2
 801788a:	d901      	bls.n	8017890 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801788c:	2303      	movs	r3, #3
 801788e:	e0d5      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017890:	f7ff fbde 	bl	8017050 <LL_RCC_IsActiveFlag_C2HPRE>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d0f1      	beq.n	801787e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d016      	beq.n	80178d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	699b      	ldr	r3, [r3, #24]
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7ff fadf 	bl	8016e6e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80178b0:	f7fd fdf6 	bl	80154a0 <HAL_GetTick>
 80178b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80178b6:	e008      	b.n	80178ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80178b8:	f7fd fdf2 	bl	80154a0 <HAL_GetTick>
 80178bc:	4602      	mov	r2, r0
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	1ad3      	subs	r3, r2, r3
 80178c2:	2b02      	cmp	r3, #2
 80178c4:	d901      	bls.n	80178ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80178c6:	2303      	movs	r3, #3
 80178c8:	e0b8      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80178ca:	f7ff fbd4 	bl	8017076 <LL_RCC_IsActiveFlag_SHDHPRE>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d0f1      	beq.n	80178b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	f003 0304 	and.w	r3, r3, #4
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d016      	beq.n	801790e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	68db      	ldr	r3, [r3, #12]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7ff fad9 	bl	8016e9c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80178ea:	f7fd fdd9 	bl	80154a0 <HAL_GetTick>
 80178ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80178f0:	e008      	b.n	8017904 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80178f2:	f7fd fdd5 	bl	80154a0 <HAL_GetTick>
 80178f6:	4602      	mov	r2, r0
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	1ad3      	subs	r3, r2, r3
 80178fc:	2b02      	cmp	r3, #2
 80178fe:	d901      	bls.n	8017904 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017900:	2303      	movs	r3, #3
 8017902:	e09b      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017904:	f7ff fbca 	bl	801709c <LL_RCC_IsActiveFlag_PPRE1>
 8017908:	4603      	mov	r3, r0
 801790a:	2b00      	cmp	r3, #0
 801790c:	d0f1      	beq.n	80178f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	f003 0308 	and.w	r3, r3, #8
 8017916:	2b00      	cmp	r3, #0
 8017918:	d017      	beq.n	801794a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	691b      	ldr	r3, [r3, #16]
 801791e:	00db      	lsls	r3, r3, #3
 8017920:	4618      	mov	r0, r3
 8017922:	f7ff facf 	bl	8016ec4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017926:	f7fd fdbb 	bl	80154a0 <HAL_GetTick>
 801792a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801792c:	e008      	b.n	8017940 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801792e:	f7fd fdb7 	bl	80154a0 <HAL_GetTick>
 8017932:	4602      	mov	r2, r0
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	1ad3      	subs	r3, r2, r3
 8017938:	2b02      	cmp	r3, #2
 801793a:	d901      	bls.n	8017940 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801793c:	2303      	movs	r3, #3
 801793e:	e07d      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017940:	f7ff fbbe 	bl	80170c0 <LL_RCC_IsActiveFlag_PPRE2>
 8017944:	4603      	mov	r3, r0
 8017946:	2b00      	cmp	r3, #0
 8017948:	d0f1      	beq.n	801792e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f003 0301 	and.w	r3, r3, #1
 8017952:	2b00      	cmp	r3, #0
 8017954:	d043      	beq.n	80179de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	2b02      	cmp	r3, #2
 801795c:	d106      	bne.n	801796c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801795e:	f7ff f86f 	bl	8016a40 <LL_RCC_HSE_IsReady>
 8017962:	4603      	mov	r3, r0
 8017964:	2b00      	cmp	r3, #0
 8017966:	d11e      	bne.n	80179a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017968:	2301      	movs	r3, #1
 801796a:	e067      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	685b      	ldr	r3, [r3, #4]
 8017970:	2b03      	cmp	r3, #3
 8017972:	d106      	bne.n	8017982 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017974:	f7ff fb17 	bl	8016fa6 <LL_RCC_PLL_IsReady>
 8017978:	4603      	mov	r3, r0
 801797a:	2b00      	cmp	r3, #0
 801797c:	d113      	bne.n	80179a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801797e:	2301      	movs	r3, #1
 8017980:	e05c      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	685b      	ldr	r3, [r3, #4]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d106      	bne.n	8017998 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801798a:	f7ff f9d7 	bl	8016d3c <LL_RCC_MSI_IsReady>
 801798e:	4603      	mov	r3, r0
 8017990:	2b00      	cmp	r3, #0
 8017992:	d108      	bne.n	80179a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017994:	2301      	movs	r3, #1
 8017996:	e051      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8017998:	f7ff f882 	bl	8016aa0 <LL_RCC_HSI_IsReady>
 801799c:	4603      	mov	r3, r0
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d101      	bne.n	80179a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80179a2:	2301      	movs	r3, #1
 80179a4:	e04a      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7ff fa15 	bl	8016dda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80179b0:	f7fd fd76 	bl	80154a0 <HAL_GetTick>
 80179b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80179b6:	e00a      	b.n	80179ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80179b8:	f7fd fd72 	bl	80154a0 <HAL_GetTick>
 80179bc:	4602      	mov	r2, r0
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	1ad3      	subs	r3, r2, r3
 80179c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80179c6:	4293      	cmp	r3, r2
 80179c8:	d901      	bls.n	80179ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80179ca:	2303      	movs	r3, #3
 80179cc:	e036      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80179ce:	f7ff fa18 	bl	8016e02 <LL_RCC_GetSysClkSource>
 80179d2:	4602      	mov	r2, r0
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	429a      	cmp	r2, r3
 80179dc:	d1ec      	bne.n	80179b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80179de:	4b19      	ldr	r3, [pc, #100]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f003 0307 	and.w	r3, r3, #7
 80179e6:	683a      	ldr	r2, [r7, #0]
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d21b      	bcs.n	8017a24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80179ec:	4b15      	ldr	r3, [pc, #84]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f023 0207 	bic.w	r2, r3, #7
 80179f4:	4913      	ldr	r1, [pc, #76]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	4313      	orrs	r3, r2
 80179fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80179fc:	f7fd fd50 	bl	80154a0 <HAL_GetTick>
 8017a00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017a02:	e008      	b.n	8017a16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017a04:	f7fd fd4c 	bl	80154a0 <HAL_GetTick>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	1ad3      	subs	r3, r2, r3
 8017a0e:	2b02      	cmp	r3, #2
 8017a10:	d901      	bls.n	8017a16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017a12:	2303      	movs	r3, #3
 8017a14:	e012      	b.n	8017a3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017a16:	4b0b      	ldr	r3, [pc, #44]	; (8017a44 <HAL_RCC_ClockConfig+0x278>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	f003 0307 	and.w	r3, r3, #7
 8017a1e:	683a      	ldr	r2, [r7, #0]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d1ef      	bne.n	8017a04 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017a24:	f000 f87e 	bl	8017b24 <HAL_RCC_GetHCLKFreq>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	4a07      	ldr	r2, [pc, #28]	; (8017a48 <HAL_RCC_ClockConfig+0x27c>)
 8017a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8017a2e:	f7fd fd43 	bl	80154b8 <HAL_GetTickPrio>
 8017a32:	4603      	mov	r3, r0
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7e9 f8a3 	bl	8000b80 <HAL_InitTick>
 8017a3a:	4603      	mov	r3, r0
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3710      	adds	r7, #16
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	58004000 	.word	0x58004000
 8017a48:	20000008 	.word	0x20000008

08017a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017a4c:	b590      	push	{r4, r7, lr}
 8017a4e:	b085      	sub	sp, #20
 8017a50:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017a52:	f7ff f9d6 	bl	8016e02 <LL_RCC_GetSysClkSource>
 8017a56:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d10a      	bne.n	8017a74 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017a5e:	f7ff f992 	bl	8016d86 <LL_RCC_MSI_GetRange>
 8017a62:	4603      	mov	r3, r0
 8017a64:	091b      	lsrs	r3, r3, #4
 8017a66:	f003 030f 	and.w	r3, r3, #15
 8017a6a:	4a2b      	ldr	r2, [pc, #172]	; (8017b18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a70:	60fb      	str	r3, [r7, #12]
 8017a72:	e04b      	b.n	8017b0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b04      	cmp	r3, #4
 8017a78:	d102      	bne.n	8017a80 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017a7a:	4b28      	ldr	r3, [pc, #160]	; (8017b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a7c:	60fb      	str	r3, [r7, #12]
 8017a7e:	e045      	b.n	8017b0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2b08      	cmp	r3, #8
 8017a84:	d10a      	bne.n	8017a9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017a86:	f7fe ffab 	bl	80169e0 <LL_RCC_HSE_IsEnabledDiv2>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	2b01      	cmp	r3, #1
 8017a8e:	d102      	bne.n	8017a96 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017a90:	4b22      	ldr	r3, [pc, #136]	; (8017b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a92:	60fb      	str	r3, [r7, #12]
 8017a94:	e03a      	b.n	8017b0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8017a96:	4b22      	ldr	r3, [pc, #136]	; (8017b20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017a98:	60fb      	str	r3, [r7, #12]
 8017a9a:	e037      	b.n	8017b0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017a9c:	f7ff faba 	bl	8017014 <LL_RCC_PLL_GetMainSource>
 8017aa0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	2b02      	cmp	r3, #2
 8017aa6:	d003      	beq.n	8017ab0 <HAL_RCC_GetSysClockFreq+0x64>
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	2b03      	cmp	r3, #3
 8017aac:	d003      	beq.n	8017ab6 <HAL_RCC_GetSysClockFreq+0x6a>
 8017aae:	e00d      	b.n	8017acc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017ab0:	4b1a      	ldr	r3, [pc, #104]	; (8017b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017ab2:	60bb      	str	r3, [r7, #8]
        break;
 8017ab4:	e015      	b.n	8017ae2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017ab6:	f7fe ff93 	bl	80169e0 <LL_RCC_HSE_IsEnabledDiv2>
 8017aba:	4603      	mov	r3, r0
 8017abc:	2b01      	cmp	r3, #1
 8017abe:	d102      	bne.n	8017ac6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017ac0:	4b16      	ldr	r3, [pc, #88]	; (8017b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017ac2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017ac4:	e00d      	b.n	8017ae2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017ac6:	4b16      	ldr	r3, [pc, #88]	; (8017b20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017ac8:	60bb      	str	r3, [r7, #8]
        break;
 8017aca:	e00a      	b.n	8017ae2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017acc:	f7ff f95b 	bl	8016d86 <LL_RCC_MSI_GetRange>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	091b      	lsrs	r3, r3, #4
 8017ad4:	f003 030f 	and.w	r3, r3, #15
 8017ad8:	4a0f      	ldr	r2, [pc, #60]	; (8017b18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ade:	60bb      	str	r3, [r7, #8]
        break;
 8017ae0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017ae2:	f7ff fa72 	bl	8016fca <LL_RCC_PLL_GetN>
 8017ae6:	4602      	mov	r2, r0
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	fb03 f402 	mul.w	r4, r3, r2
 8017aee:	f7ff fa85 	bl	8016ffc <LL_RCC_PLL_GetDivider>
 8017af2:	4603      	mov	r3, r0
 8017af4:	091b      	lsrs	r3, r3, #4
 8017af6:	3301      	adds	r3, #1
 8017af8:	fbb4 f4f3 	udiv	r4, r4, r3
 8017afc:	f7ff fa72 	bl	8016fe4 <LL_RCC_PLL_GetR>
 8017b00:	4603      	mov	r3, r0
 8017b02:	0f5b      	lsrs	r3, r3, #29
 8017b04:	3301      	adds	r3, #1
 8017b06:	fbb4 f3f3 	udiv	r3, r4, r3
 8017b0a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3714      	adds	r7, #20
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd90      	pop	{r4, r7, pc}
 8017b16:	bf00      	nop
 8017b18:	0801aae0 	.word	0x0801aae0
 8017b1c:	00f42400 	.word	0x00f42400
 8017b20:	01e84800 	.word	0x01e84800

08017b24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017b24:	b598      	push	{r3, r4, r7, lr}
 8017b26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017b28:	f7ff ff90 	bl	8017a4c <HAL_RCC_GetSysClockFreq>
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	f7ff f9dd 	bl	8016eec <LL_RCC_GetAHBPrescaler>
 8017b32:	4603      	mov	r3, r0
 8017b34:	091b      	lsrs	r3, r3, #4
 8017b36:	f003 030f 	and.w	r3, r3, #15
 8017b3a:	4a03      	ldr	r2, [pc, #12]	; (8017b48 <HAL_RCC_GetHCLKFreq+0x24>)
 8017b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	bd98      	pop	{r3, r4, r7, pc}
 8017b48:	0801aa80 	.word	0x0801aa80

08017b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017b4c:	b598      	push	{r3, r4, r7, lr}
 8017b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017b50:	f7ff ffe8 	bl	8017b24 <HAL_RCC_GetHCLKFreq>
 8017b54:	4604      	mov	r4, r0
 8017b56:	f7ff f9f0 	bl	8016f3a <LL_RCC_GetAPB1Prescaler>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	0a1b      	lsrs	r3, r3, #8
 8017b5e:	f003 0307 	and.w	r3, r3, #7
 8017b62:	4a04      	ldr	r2, [pc, #16]	; (8017b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b68:	f003 031f 	and.w	r3, r3, #31
 8017b6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	bd98      	pop	{r3, r4, r7, pc}
 8017b74:	0801aac0 	.word	0x0801aac0

08017b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017b78:	b598      	push	{r3, r4, r7, lr}
 8017b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017b7c:	f7ff ffd2 	bl	8017b24 <HAL_RCC_GetHCLKFreq>
 8017b80:	4604      	mov	r4, r0
 8017b82:	f7ff f9e6 	bl	8016f52 <LL_RCC_GetAPB2Prescaler>
 8017b86:	4603      	mov	r3, r0
 8017b88:	0adb      	lsrs	r3, r3, #11
 8017b8a:	f003 0307 	and.w	r3, r3, #7
 8017b8e:	4a04      	ldr	r2, [pc, #16]	; (8017ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b94:	f003 031f 	and.w	r3, r3, #31
 8017b98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	bd98      	pop	{r3, r4, r7, pc}
 8017ba0:	0801aac0 	.word	0x0801aac0

08017ba4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	226f      	movs	r2, #111	; 0x6f
 8017bb2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017bb4:	f7ff f925 	bl	8016e02 <LL_RCC_GetSysClkSource>
 8017bb8:	4602      	mov	r2, r0
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017bbe:	f7ff f995 	bl	8016eec <LL_RCC_GetAHBPrescaler>
 8017bc2:	4602      	mov	r2, r0
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017bc8:	f7ff f9b7 	bl	8016f3a <LL_RCC_GetAPB1Prescaler>
 8017bcc:	4602      	mov	r2, r0
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017bd2:	f7ff f9be 	bl	8016f52 <LL_RCC_GetAPB2Prescaler>
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017bdc:	f7ff f992 	bl	8016f04 <LL_C2_RCC_GetAHBPrescaler>
 8017be0:	4602      	mov	r2, r0
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017be6:	f7ff f99a 	bl	8016f1e <LL_RCC_GetAHB4Prescaler>
 8017bea:	4602      	mov	r2, r0
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017bf0:	4b04      	ldr	r3, [pc, #16]	; (8017c04 <HAL_RCC_GetClockConfig+0x60>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f003 0207 	and.w	r2, r3, #7
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	601a      	str	r2, [r3, #0]
}
 8017bfc:	bf00      	nop
 8017bfe:	3708      	adds	r7, #8
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}
 8017c04:	58004000 	.word	0x58004000

08017c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017c08:	b590      	push	{r4, r7, lr}
 8017c0a:	b085      	sub	sp, #20
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2bb0      	cmp	r3, #176	; 0xb0
 8017c14:	d903      	bls.n	8017c1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017c16:	4b15      	ldr	r3, [pc, #84]	; (8017c6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c1a:	60fb      	str	r3, [r7, #12]
 8017c1c:	e007      	b.n	8017c2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	091b      	lsrs	r3, r3, #4
 8017c22:	f003 030f 	and.w	r3, r3, #15
 8017c26:	4a11      	ldr	r2, [pc, #68]	; (8017c6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017c2e:	f7ff f976 	bl	8016f1e <LL_RCC_GetAHB4Prescaler>
 8017c32:	4603      	mov	r3, r0
 8017c34:	091b      	lsrs	r3, r3, #4
 8017c36:	f003 030f 	and.w	r3, r3, #15
 8017c3a:	4a0d      	ldr	r2, [pc, #52]	; (8017c70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c40:	68fa      	ldr	r2, [r7, #12]
 8017c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	4a0a      	ldr	r2, [pc, #40]	; (8017c74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8017c50:	0c9c      	lsrs	r4, r3, #18
 8017c52:	f7fe feb7 	bl	80169c4 <HAL_PWREx_GetVoltageRange>
 8017c56:	4603      	mov	r3, r0
 8017c58:	4619      	mov	r1, r3
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	f000 f80c 	bl	8017c78 <RCC_SetFlashLatency>
 8017c60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017c62:	4618      	mov	r0, r3
 8017c64:	3714      	adds	r7, #20
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd90      	pop	{r4, r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	0801aae0 	.word	0x0801aae0
 8017c70:	0801aa80 	.word	0x0801aa80
 8017c74:	431bde83 	.word	0x431bde83

08017c78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017c78:	b590      	push	{r4, r7, lr}
 8017c7a:	b093      	sub	sp, #76	; 0x4c
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017c82:	4b37      	ldr	r3, [pc, #220]	; (8017d60 <RCC_SetFlashLatency+0xe8>)
 8017c84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017c88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017c8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017c8e:	4a35      	ldr	r2, [pc, #212]	; (8017d64 <RCC_SetFlashLatency+0xec>)
 8017c90:	f107 031c 	add.w	r3, r7, #28
 8017c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017c9a:	4b33      	ldr	r3, [pc, #204]	; (8017d68 <RCC_SetFlashLatency+0xf0>)
 8017c9c:	f107 040c 	add.w	r4, r7, #12
 8017ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cb0:	d11a      	bne.n	8017ce8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8017cb6:	e013      	b.n	8017ce0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	3348      	adds	r3, #72	; 0x48
 8017cbe:	443b      	add	r3, r7
 8017cc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017cc4:	687a      	ldr	r2, [r7, #4]
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d807      	bhi.n	8017cda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	3348      	adds	r3, #72	; 0x48
 8017cd0:	443b      	add	r3, r7
 8017cd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017cd6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017cd8:	e020      	b.n	8017d1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cdc:	3301      	adds	r3, #1
 8017cde:	643b      	str	r3, [r7, #64]	; 0x40
 8017ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ce2:	2b03      	cmp	r3, #3
 8017ce4:	d9e8      	bls.n	8017cb8 <RCC_SetFlashLatency+0x40>
 8017ce6:	e019      	b.n	8017d1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017ce8:	2300      	movs	r3, #0
 8017cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cec:	e013      	b.n	8017d16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cf0:	009b      	lsls	r3, r3, #2
 8017cf2:	3348      	adds	r3, #72	; 0x48
 8017cf4:	443b      	add	r3, r7
 8017cf6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017cfa:	687a      	ldr	r2, [r7, #4]
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d807      	bhi.n	8017d10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	3348      	adds	r3, #72	; 0x48
 8017d06:	443b      	add	r3, r7
 8017d08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017d0c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017d0e:	e005      	b.n	8017d1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d12:	3301      	adds	r3, #1
 8017d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d18:	2b02      	cmp	r3, #2
 8017d1a:	d9e8      	bls.n	8017cee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017d1c:	4b13      	ldr	r3, [pc, #76]	; (8017d6c <RCC_SetFlashLatency+0xf4>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f023 0207 	bic.w	r2, r3, #7
 8017d24:	4911      	ldr	r1, [pc, #68]	; (8017d6c <RCC_SetFlashLatency+0xf4>)
 8017d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d28:	4313      	orrs	r3, r2
 8017d2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017d2c:	f7fd fbb8 	bl	80154a0 <HAL_GetTick>
 8017d30:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017d32:	e008      	b.n	8017d46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017d34:	f7fd fbb4 	bl	80154a0 <HAL_GetTick>
 8017d38:	4602      	mov	r2, r0
 8017d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d3c:	1ad3      	subs	r3, r2, r3
 8017d3e:	2b02      	cmp	r3, #2
 8017d40:	d901      	bls.n	8017d46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017d42:	2303      	movs	r3, #3
 8017d44:	e007      	b.n	8017d56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017d46:	4b09      	ldr	r3, [pc, #36]	; (8017d6c <RCC_SetFlashLatency+0xf4>)
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	f003 0307 	and.w	r3, r3, #7
 8017d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d1ef      	bne.n	8017d34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017d54:	2300      	movs	r3, #0
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	374c      	adds	r7, #76	; 0x4c
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	bd90      	pop	{r4, r7, pc}
 8017d5e:	bf00      	nop
 8017d60:	0801aa54 	.word	0x0801aa54
 8017d64:	0801aa64 	.word	0x0801aa64
 8017d68:	0801aa70 	.word	0x0801aa70
 8017d6c:	58004000 	.word	0x58004000

08017d70 <LL_RCC_LSE_IsEnabled>:
{
 8017d70:	b480      	push	{r7}
 8017d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d7c:	f003 0301 	and.w	r3, r3, #1
 8017d80:	2b01      	cmp	r3, #1
 8017d82:	d101      	bne.n	8017d88 <LL_RCC_LSE_IsEnabled+0x18>
 8017d84:	2301      	movs	r3, #1
 8017d86:	e000      	b.n	8017d8a <LL_RCC_LSE_IsEnabled+0x1a>
 8017d88:	2300      	movs	r3, #0
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d92:	4770      	bx	lr

08017d94 <LL_RCC_LSE_IsReady>:
{
 8017d94:	b480      	push	{r7}
 8017d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017da0:	f003 0302 	and.w	r3, r3, #2
 8017da4:	2b02      	cmp	r3, #2
 8017da6:	d101      	bne.n	8017dac <LL_RCC_LSE_IsReady+0x18>
 8017da8:	2301      	movs	r3, #1
 8017daa:	e000      	b.n	8017dae <LL_RCC_LSE_IsReady+0x1a>
 8017dac:	2300      	movs	r3, #0
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	46bd      	mov	sp, r7
 8017db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db6:	4770      	bx	lr

08017db8 <LL_RCC_MSI_EnablePLLMode>:
{
 8017db8:	b480      	push	{r7}
 8017dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017dc6:	f043 0304 	orr.w	r3, r3, #4
 8017dca:	6013      	str	r3, [r2, #0]
}
 8017dcc:	bf00      	nop
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd4:	4770      	bx	lr

08017dd6 <LL_RCC_SetRFWKPClockSource>:
{
 8017dd6:	b480      	push	{r7}
 8017dd8:	b083      	sub	sp, #12
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017de6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	4313      	orrs	r3, r2
 8017df2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017df6:	bf00      	nop
 8017df8:	370c      	adds	r7, #12
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e00:	4770      	bx	lr

08017e02 <LL_RCC_SetSMPSClockSource>:
{
 8017e02:	b480      	push	{r7}
 8017e04:	b083      	sub	sp, #12
 8017e06:	af00      	add	r7, sp, #0
 8017e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e10:	f023 0203 	bic.w	r2, r3, #3
 8017e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	4313      	orrs	r3, r2
 8017e1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017e1e:	bf00      	nop
 8017e20:	370c      	adds	r7, #12
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr

08017e2a <LL_RCC_SetSMPSPrescaler>:
{
 8017e2a:	b480      	push	{r7}
 8017e2c:	b083      	sub	sp, #12
 8017e2e:	af00      	add	r7, sp, #0
 8017e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	4313      	orrs	r3, r2
 8017e44:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017e46:	bf00      	nop
 8017e48:	370c      	adds	r7, #12
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e50:	4770      	bx	lr

08017e52 <LL_RCC_SetUSARTClockSource>:
{
 8017e52:	b480      	push	{r7}
 8017e54:	b083      	sub	sp, #12
 8017e56:	af00      	add	r7, sp, #0
 8017e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e62:	f023 0203 	bic.w	r2, r3, #3
 8017e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	4313      	orrs	r3, r2
 8017e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e72:	bf00      	nop
 8017e74:	370c      	adds	r7, #12
 8017e76:	46bd      	mov	sp, r7
 8017e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7c:	4770      	bx	lr

08017e7e <LL_RCC_SetLPUARTClockSource>:
{
 8017e7e:	b480      	push	{r7}
 8017e80:	b083      	sub	sp, #12
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e9e:	bf00      	nop
 8017ea0:	370c      	adds	r7, #12
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea8:	4770      	bx	lr

08017eaa <LL_RCC_SetI2CClockSource>:
{
 8017eaa:	b480      	push	{r7}
 8017eac:	b083      	sub	sp, #12
 8017eae:	af00      	add	r7, sp, #0
 8017eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	091b      	lsrs	r3, r3, #4
 8017ebe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017ec2:	43db      	mvns	r3, r3
 8017ec4:	401a      	ands	r2, r3
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	011b      	lsls	r3, r3, #4
 8017eca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ed2:	4313      	orrs	r3, r2
 8017ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017ed8:	bf00      	nop
 8017eda:	370c      	adds	r7, #12
 8017edc:	46bd      	mov	sp, r7
 8017ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee2:	4770      	bx	lr

08017ee4 <LL_RCC_SetLPTIMClockSource>:
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	b083      	sub	sp, #12
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ef0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	0c1b      	lsrs	r3, r3, #16
 8017ef8:	041b      	lsls	r3, r3, #16
 8017efa:	43db      	mvns	r3, r3
 8017efc:	401a      	ands	r2, r3
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	041b      	lsls	r3, r3, #16
 8017f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f06:	4313      	orrs	r3, r2
 8017f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f0c:	bf00      	nop
 8017f0e:	370c      	adds	r7, #12
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <LL_RCC_SetSAIClockSource>:
{
 8017f18:	b480      	push	{r7}
 8017f1a:	b083      	sub	sp, #12
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	4313      	orrs	r3, r2
 8017f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f38:	bf00      	nop
 8017f3a:	370c      	adds	r7, #12
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <LL_RCC_SetRNGClockSource>:
{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	4313      	orrs	r3, r2
 8017f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f64:	bf00      	nop
 8017f66:	370c      	adds	r7, #12
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6e:	4770      	bx	lr

08017f70 <LL_RCC_SetCLK48ClockSource>:
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	4313      	orrs	r3, r2
 8017f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f90:	bf00      	nop
 8017f92:	370c      	adds	r7, #12
 8017f94:	46bd      	mov	sp, r7
 8017f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9a:	4770      	bx	lr

08017f9c <LL_RCC_SetUSBClockSource>:
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f7ff ffe3 	bl	8017f70 <LL_RCC_SetCLK48ClockSource>
}
 8017faa:	bf00      	nop
 8017fac:	3708      	adds	r7, #8
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <LL_RCC_SetADCClockSource>:
{
 8017fb2:	b480      	push	{r7}
 8017fb4:	b083      	sub	sp, #12
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	4313      	orrs	r3, r2
 8017fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017fd2:	bf00      	nop
 8017fd4:	370c      	adds	r7, #12
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr

08017fde <LL_RCC_SetRTCClockSource>:
{
 8017fde:	b480      	push	{r7}
 8017fe0:	b083      	sub	sp, #12
 8017fe2:	af00      	add	r7, sp, #0
 8017fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	4313      	orrs	r3, r2
 8017ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017ffe:	bf00      	nop
 8018000:	370c      	adds	r7, #12
 8018002:	46bd      	mov	sp, r7
 8018004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018008:	4770      	bx	lr

0801800a <LL_RCC_GetRTCClockSource>:
{
 801800a:	b480      	push	{r7}
 801800c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801800e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018016:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801801a:	4618      	mov	r0, r3
 801801c:	46bd      	mov	sp, r7
 801801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018022:	4770      	bx	lr

08018024 <LL_RCC_ForceBackupDomainReset>:
{
 8018024:	b480      	push	{r7}
 8018026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8018028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801802c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801803c:	bf00      	nop
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr

08018046 <LL_RCC_ReleaseBackupDomainReset>:
{
 8018046:	b480      	push	{r7}
 8018048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801805a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801805e:	bf00      	nop
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr

08018068 <LL_RCC_PLLSAI1_Enable>:
{
 8018068:	b480      	push	{r7}
 801806a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801806c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801807a:	6013      	str	r3, [r2, #0]
}
 801807c:	bf00      	nop
 801807e:	46bd      	mov	sp, r7
 8018080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018084:	4770      	bx	lr

08018086 <LL_RCC_PLLSAI1_Disable>:
{
 8018086:	b480      	push	{r7}
 8018088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801808a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018098:	6013      	str	r3, [r2, #0]
}
 801809a:	bf00      	nop
 801809c:	46bd      	mov	sp, r7
 801809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a2:	4770      	bx	lr

080180a4 <LL_RCC_PLLSAI1_IsReady>:
{
 80180a4:	b480      	push	{r7}
 80180a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80180a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80180b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80180b6:	d101      	bne.n	80180bc <LL_RCC_PLLSAI1_IsReady+0x18>
 80180b8:	2301      	movs	r3, #1
 80180ba:	e000      	b.n	80180be <LL_RCC_PLLSAI1_IsReady+0x1a>
 80180bc:	2300      	movs	r3, #0
}
 80180be:	4618      	mov	r0, r3
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr

080180c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b088      	sub	sp, #32
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80180d0:	2300      	movs	r3, #0
 80180d2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80180d4:	2300      	movs	r3, #0
 80180d6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d034      	beq.n	801814e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80180ec:	d021      	beq.n	8018132 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80180ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80180f2:	d81b      	bhi.n	801812c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80180f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80180f8:	d01d      	beq.n	8018136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80180fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80180fe:	d815      	bhi.n	801812c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018100:	2b00      	cmp	r3, #0
 8018102:	d00b      	beq.n	801811c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8018104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018108:	d110      	bne.n	801812c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801810a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801810e:	68db      	ldr	r3, [r3, #12]
 8018110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018118:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801811a:	e00d      	b.n	8018138 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	3304      	adds	r3, #4
 8018120:	4618      	mov	r0, r3
 8018122:	f000 f94d 	bl	80183c0 <RCCEx_PLLSAI1_ConfigNP>
 8018126:	4603      	mov	r3, r0
 8018128:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801812a:	e005      	b.n	8018138 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801812c:	2301      	movs	r3, #1
 801812e:	77fb      	strb	r3, [r7, #31]
        break;
 8018130:	e002      	b.n	8018138 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8018132:	bf00      	nop
 8018134:	e000      	b.n	8018138 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8018136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018138:	7ffb      	ldrb	r3, [r7, #31]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d105      	bne.n	801814a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018142:	4618      	mov	r0, r3
 8018144:	f7ff fee8 	bl	8017f18 <LL_RCC_SetSAIClockSource>
 8018148:	e001      	b.n	801814e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801814a:	7ffb      	ldrb	r3, [r7, #31]
 801814c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018156:	2b00      	cmp	r3, #0
 8018158:	d046      	beq.n	80181e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801815a:	f7ff ff56 	bl	801800a <LL_RCC_GetRTCClockSource>
 801815e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018164:	69ba      	ldr	r2, [r7, #24]
 8018166:	429a      	cmp	r2, r3
 8018168:	d03c      	beq.n	80181e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801816a:	f7fe fc1b 	bl	80169a4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801816e:	69bb      	ldr	r3, [r7, #24]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d105      	bne.n	8018180 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018178:	4618      	mov	r0, r3
 801817a:	f7ff ff30 	bl	8017fde <LL_RCC_SetRTCClockSource>
 801817e:	e02e      	b.n	80181de <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8018180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018188:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801818a:	f7ff ff4b 	bl	8018024 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801818e:	f7ff ff5a 	bl	8018046 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801819c:	4313      	orrs	r3, r2
 801819e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80181a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80181aa:	f7ff fde1 	bl	8017d70 <LL_RCC_LSE_IsEnabled>
 80181ae:	4603      	mov	r3, r0
 80181b0:	2b01      	cmp	r3, #1
 80181b2:	d114      	bne.n	80181de <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80181b4:	f7fd f974 	bl	80154a0 <HAL_GetTick>
 80181b8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80181ba:	e00b      	b.n	80181d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80181bc:	f7fd f970 	bl	80154a0 <HAL_GetTick>
 80181c0:	4602      	mov	r2, r0
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	1ad3      	subs	r3, r2, r3
 80181c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80181ca:	4293      	cmp	r3, r2
 80181cc:	d902      	bls.n	80181d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80181ce:	2303      	movs	r3, #3
 80181d0:	77fb      	strb	r3, [r7, #31]
              break;
 80181d2:	e004      	b.n	80181de <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80181d4:	f7ff fdde 	bl	8017d94 <LL_RCC_LSE_IsReady>
 80181d8:	4603      	mov	r3, r0
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d1ee      	bne.n	80181bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80181de:	7ffb      	ldrb	r3, [r7, #31]
 80181e0:	77bb      	strb	r3, [r7, #30]
 80181e2:	e001      	b.n	80181e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80181e4:	7ffb      	ldrb	r3, [r7, #31]
 80181e6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	f003 0301 	and.w	r3, r3, #1
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d004      	beq.n	80181fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	699b      	ldr	r3, [r3, #24]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff fe2a 	bl	8017e52 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	f003 0302 	and.w	r3, r3, #2
 8018206:	2b00      	cmp	r3, #0
 8018208:	d004      	beq.n	8018214 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	69db      	ldr	r3, [r3, #28]
 801820e:	4618      	mov	r0, r3
 8018210:	f7ff fe35 	bl	8017e7e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f003 0310 	and.w	r3, r3, #16
 801821c:	2b00      	cmp	r3, #0
 801821e:	d004      	beq.n	801822a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018224:	4618      	mov	r0, r3
 8018226:	f7ff fe5d 	bl	8017ee4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	f003 0320 	and.w	r3, r3, #32
 8018232:	2b00      	cmp	r3, #0
 8018234:	d004      	beq.n	8018240 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801823a:	4618      	mov	r0, r3
 801823c:	f7ff fe52 	bl	8017ee4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	f003 0304 	and.w	r3, r3, #4
 8018248:	2b00      	cmp	r3, #0
 801824a:	d004      	beq.n	8018256 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6a1b      	ldr	r3, [r3, #32]
 8018250:	4618      	mov	r0, r3
 8018252:	f7ff fe2a 	bl	8017eaa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	f003 0308 	and.w	r3, r3, #8
 801825e:	2b00      	cmp	r3, #0
 8018260:	d004      	beq.n	801826c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018266:	4618      	mov	r0, r3
 8018268:	f7ff fe1f 	bl	8017eaa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018274:	2b00      	cmp	r3, #0
 8018276:	d022      	beq.n	80182be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801827c:	4618      	mov	r0, r3
 801827e:	f7ff fe8d 	bl	8017f9c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801828a:	d107      	bne.n	801829c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801828c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018290:	68db      	ldr	r3, [r3, #12]
 8018292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801829a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80182a4:	d10b      	bne.n	80182be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	3304      	adds	r3, #4
 80182aa:	4618      	mov	r0, r3
 80182ac:	f000 f8e3 	bl	8018476 <RCCEx_PLLSAI1_ConfigNQ>
 80182b0:	4603      	mov	r3, r0
 80182b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80182b4:	7ffb      	ldrb	r3, [r7, #31]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d001      	beq.n	80182be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80182ba:	7ffb      	ldrb	r3, [r7, #31]
 80182bc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d02b      	beq.n	8018322 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80182d2:	d008      	beq.n	80182e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182dc:	d003      	beq.n	80182e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d105      	bne.n	80182f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7ff fe2a 	bl	8017f44 <LL_RCC_SetRNGClockSource>
 80182f0:	e00a      	b.n	8018308 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80182fa:	60fb      	str	r3, [r7, #12]
 80182fc:	2000      	movs	r0, #0
 80182fe:	f7ff fe21 	bl	8017f44 <LL_RCC_SetRNGClockSource>
 8018302:	68f8      	ldr	r0, [r7, #12]
 8018304:	f7ff fe34 	bl	8017f70 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801830c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018310:	d107      	bne.n	8018322 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8018312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018316:	68db      	ldr	r3, [r3, #12]
 8018318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801831c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018320:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801832a:	2b00      	cmp	r3, #0
 801832c:	d022      	beq.n	8018374 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018332:	4618      	mov	r0, r3
 8018334:	f7ff fe3d 	bl	8017fb2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801833c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018340:	d107      	bne.n	8018352 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8018342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801834c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018350:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801835a:	d10b      	bne.n	8018374 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	3304      	adds	r3, #4
 8018360:	4618      	mov	r0, r3
 8018362:	f000 f8e3 	bl	801852c <RCCEx_PLLSAI1_ConfigNR>
 8018366:	4603      	mov	r3, r0
 8018368:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801836a:	7ffb      	ldrb	r3, [r7, #31]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d001      	beq.n	8018374 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8018370:	7ffb      	ldrb	r3, [r7, #31]
 8018372:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801837c:	2b00      	cmp	r3, #0
 801837e:	d004      	beq.n	801838a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018384:	4618      	mov	r0, r3
 8018386:	f7ff fd26 	bl	8017dd6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018392:	2b00      	cmp	r3, #0
 8018394:	d009      	beq.n	80183aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801839a:	4618      	mov	r0, r3
 801839c:	f7ff fd45 	bl	8017e2a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183a4:	4618      	mov	r0, r3
 80183a6:	f7ff fd2c 	bl	8017e02 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80183aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3720      	adds	r7, #32
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}

080183b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80183b8:	f7ff fcfe 	bl	8017db8 <LL_RCC_MSI_EnablePLLMode>
}
 80183bc:	bf00      	nop
 80183be:	bd80      	pop	{r7, pc}

080183c0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80183c8:	2300      	movs	r3, #0
 80183ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80183cc:	f7ff fe5b 	bl	8018086 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80183d0:	f7fd f866 	bl	80154a0 <HAL_GetTick>
 80183d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183d6:	e009      	b.n	80183ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80183d8:	f7fd f862 	bl	80154a0 <HAL_GetTick>
 80183dc:	4602      	mov	r2, r0
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	1ad3      	subs	r3, r2, r3
 80183e2:	2b02      	cmp	r3, #2
 80183e4:	d902      	bls.n	80183ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80183e6:	2303      	movs	r3, #3
 80183e8:	73fb      	strb	r3, [r7, #15]
      break;
 80183ea:	e004      	b.n	80183f6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183ec:	f7ff fe5a 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 80183f0:	4603      	mov	r3, r0
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d1f0      	bne.n	80183d8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80183f6:	7bfb      	ldrb	r3, [r7, #15]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d137      	bne.n	801846c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80183fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018400:	691b      	ldr	r3, [r3, #16]
 8018402:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	021b      	lsls	r3, r3, #8
 801840c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018410:	4313      	orrs	r3, r2
 8018412:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8018414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018418:	691b      	ldr	r3, [r3, #16]
 801841a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018426:	4313      	orrs	r3, r2
 8018428:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801842a:	f7ff fe1d 	bl	8018068 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801842e:	f7fd f837 	bl	80154a0 <HAL_GetTick>
 8018432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018434:	e009      	b.n	801844a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018436:	f7fd f833 	bl	80154a0 <HAL_GetTick>
 801843a:	4602      	mov	r2, r0
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	2b02      	cmp	r3, #2
 8018442:	d902      	bls.n	801844a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8018444:	2303      	movs	r3, #3
 8018446:	73fb      	strb	r3, [r7, #15]
        break;
 8018448:	e004      	b.n	8018454 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801844a:	f7ff fe2b 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 801844e:	4603      	mov	r3, r0
 8018450:	2b01      	cmp	r3, #1
 8018452:	d1f0      	bne.n	8018436 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8018454:	7bfb      	ldrb	r3, [r7, #15]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d108      	bne.n	801846c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801845a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801845e:	691a      	ldr	r2, [r3, #16]
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018468:	4313      	orrs	r3, r2
 801846a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801846c:	7bfb      	ldrb	r3, [r7, #15]
}
 801846e:	4618      	mov	r0, r3
 8018470:	3710      	adds	r7, #16
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}

08018476 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018476:	b580      	push	{r7, lr}
 8018478:	b084      	sub	sp, #16
 801847a:	af00      	add	r7, sp, #0
 801847c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801847e:	2300      	movs	r3, #0
 8018480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018482:	f7ff fe00 	bl	8018086 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018486:	f7fd f80b 	bl	80154a0 <HAL_GetTick>
 801848a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801848c:	e009      	b.n	80184a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801848e:	f7fd f807 	bl	80154a0 <HAL_GetTick>
 8018492:	4602      	mov	r2, r0
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	1ad3      	subs	r3, r2, r3
 8018498:	2b02      	cmp	r3, #2
 801849a:	d902      	bls.n	80184a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801849c:	2303      	movs	r3, #3
 801849e:	73fb      	strb	r3, [r7, #15]
      break;
 80184a0:	e004      	b.n	80184ac <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80184a2:	f7ff fdff 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d1f0      	bne.n	801848e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80184ac:	7bfb      	ldrb	r3, [r7, #15]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d137      	bne.n	8018522 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80184b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184b6:	691b      	ldr	r3, [r3, #16]
 80184b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	021b      	lsls	r3, r3, #8
 80184c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80184c6:	4313      	orrs	r3, r2
 80184c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80184ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184ce:	691b      	ldr	r3, [r3, #16]
 80184d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	689b      	ldr	r3, [r3, #8]
 80184d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80184dc:	4313      	orrs	r3, r2
 80184de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80184e0:	f7ff fdc2 	bl	8018068 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80184e4:	f7fc ffdc 	bl	80154a0 <HAL_GetTick>
 80184e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80184ea:	e009      	b.n	8018500 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80184ec:	f7fc ffd8 	bl	80154a0 <HAL_GetTick>
 80184f0:	4602      	mov	r2, r0
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	1ad3      	subs	r3, r2, r3
 80184f6:	2b02      	cmp	r3, #2
 80184f8:	d902      	bls.n	8018500 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80184fa:	2303      	movs	r3, #3
 80184fc:	73fb      	strb	r3, [r7, #15]
        break;
 80184fe:	e004      	b.n	801850a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018500:	f7ff fdd0 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 8018504:	4603      	mov	r3, r0
 8018506:	2b01      	cmp	r3, #1
 8018508:	d1f0      	bne.n	80184ec <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801850a:	7bfb      	ldrb	r3, [r7, #15]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d108      	bne.n	8018522 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018514:	691a      	ldr	r2, [r3, #16]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	691b      	ldr	r3, [r3, #16]
 801851a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801851e:	4313      	orrs	r3, r2
 8018520:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018522:	7bfb      	ldrb	r3, [r7, #15]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3710      	adds	r7, #16
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}

0801852c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b084      	sub	sp, #16
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018534:	2300      	movs	r3, #0
 8018536:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018538:	f7ff fda5 	bl	8018086 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801853c:	f7fc ffb0 	bl	80154a0 <HAL_GetTick>
 8018540:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018542:	e009      	b.n	8018558 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018544:	f7fc ffac 	bl	80154a0 <HAL_GetTick>
 8018548:	4602      	mov	r2, r0
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	1ad3      	subs	r3, r2, r3
 801854e:	2b02      	cmp	r3, #2
 8018550:	d902      	bls.n	8018558 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8018552:	2303      	movs	r3, #3
 8018554:	73fb      	strb	r3, [r7, #15]
      break;
 8018556:	e004      	b.n	8018562 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018558:	f7ff fda4 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 801855c:	4603      	mov	r3, r0
 801855e:	2b00      	cmp	r3, #0
 8018560:	d1f0      	bne.n	8018544 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8018562:	7bfb      	ldrb	r3, [r7, #15]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d137      	bne.n	80185d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801856c:	691b      	ldr	r3, [r3, #16]
 801856e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	021b      	lsls	r3, r3, #8
 8018578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801857c:	4313      	orrs	r3, r2
 801857e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018584:	691b      	ldr	r3, [r3, #16]
 8018586:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	68db      	ldr	r3, [r3, #12]
 801858e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018592:	4313      	orrs	r3, r2
 8018594:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018596:	f7ff fd67 	bl	8018068 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801859a:	f7fc ff81 	bl	80154a0 <HAL_GetTick>
 801859e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80185a0:	e009      	b.n	80185b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80185a2:	f7fc ff7d 	bl	80154a0 <HAL_GetTick>
 80185a6:	4602      	mov	r2, r0
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	1ad3      	subs	r3, r2, r3
 80185ac:	2b02      	cmp	r3, #2
 80185ae:	d902      	bls.n	80185b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80185b0:	2303      	movs	r3, #3
 80185b2:	73fb      	strb	r3, [r7, #15]
        break;
 80185b4:	e004      	b.n	80185c0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80185b6:	f7ff fd75 	bl	80180a4 <LL_RCC_PLLSAI1_IsReady>
 80185ba:	4603      	mov	r3, r0
 80185bc:	2b01      	cmp	r3, #1
 80185be:	d1f0      	bne.n	80185a2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80185c0:	7bfb      	ldrb	r3, [r7, #15]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d108      	bne.n	80185d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80185c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185ca:	691a      	ldr	r2, [r3, #16]
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	691b      	ldr	r3, [r3, #16]
 80185d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80185d4:	4313      	orrs	r3, r2
 80185d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80185d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3710      	adds	r7, #16
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}

080185e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b082      	sub	sp, #8
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d101      	bne.n	80185f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80185f0:	2301      	movs	r3, #1
 80185f2:	e049      	b.n	8018688 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80185fa:	b2db      	uxtb	r3, r3
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d106      	bne.n	801860e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2200      	movs	r2, #0
 8018604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f000 f841 	bl	8018690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2202      	movs	r2, #2
 8018612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	3304      	adds	r3, #4
 801861e:	4619      	mov	r1, r3
 8018620:	4610      	mov	r0, r2
 8018622:	f000 f9d5 	bl	80189d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2201      	movs	r2, #1
 801862a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2201      	movs	r2, #1
 8018632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	2201      	movs	r2, #1
 801863a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2201      	movs	r2, #1
 8018642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2201      	movs	r2, #1
 801864a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2201      	movs	r2, #1
 8018652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2201      	movs	r2, #1
 801865a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	2201      	movs	r2, #1
 8018662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2201      	movs	r2, #1
 801866a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2201      	movs	r2, #1
 8018672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2201      	movs	r2, #1
 801867a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2201      	movs	r2, #1
 8018682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018686:	2300      	movs	r3, #0
}
 8018688:	4618      	mov	r0, r3
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018690:	b480      	push	{r7}
 8018692:	b083      	sub	sp, #12
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018698:	bf00      	nop
 801869a:	370c      	adds	r7, #12
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr

080186a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80186a4:	b480      	push	{r7}
 80186a6:	b085      	sub	sp, #20
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80186b2:	b2db      	uxtb	r3, r3
 80186b4:	2b01      	cmp	r3, #1
 80186b6:	d001      	beq.n	80186bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80186b8:	2301      	movs	r3, #1
 80186ba:	e036      	b.n	801872a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2202      	movs	r2, #2
 80186c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	68da      	ldr	r2, [r3, #12]
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	f042 0201 	orr.w	r2, r2, #1
 80186d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	4a17      	ldr	r2, [pc, #92]	; (8018738 <HAL_TIM_Base_Start_IT+0x94>)
 80186da:	4293      	cmp	r3, r2
 80186dc:	d004      	beq.n	80186e8 <HAL_TIM_Base_Start_IT+0x44>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80186e6:	d115      	bne.n	8018714 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	689a      	ldr	r2, [r3, #8]
 80186ee:	4b13      	ldr	r3, [pc, #76]	; (801873c <HAL_TIM_Base_Start_IT+0x98>)
 80186f0:	4013      	ands	r3, r2
 80186f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	2b06      	cmp	r3, #6
 80186f8:	d015      	beq.n	8018726 <HAL_TIM_Base_Start_IT+0x82>
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018700:	d011      	beq.n	8018726 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	681a      	ldr	r2, [r3, #0]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	f042 0201 	orr.w	r2, r2, #1
 8018710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018712:	e008      	b.n	8018726 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	f042 0201 	orr.w	r2, r2, #1
 8018722:	601a      	str	r2, [r3, #0]
 8018724:	e000      	b.n	8018728 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8018728:	2300      	movs	r3, #0
}
 801872a:	4618      	mov	r0, r3
 801872c:	3714      	adds	r7, #20
 801872e:	46bd      	mov	sp, r7
 8018730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018734:	4770      	bx	lr
 8018736:	bf00      	nop
 8018738:	40012c00 	.word	0x40012c00
 801873c:	00010007 	.word	0x00010007

08018740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	691b      	ldr	r3, [r3, #16]
 801874e:	f003 0302 	and.w	r3, r3, #2
 8018752:	2b02      	cmp	r3, #2
 8018754:	d122      	bne.n	801879c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	f003 0302 	and.w	r3, r3, #2
 8018760:	2b02      	cmp	r3, #2
 8018762:	d11b      	bne.n	801879c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f06f 0202 	mvn.w	r2, #2
 801876c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	2201      	movs	r2, #1
 8018772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	699b      	ldr	r3, [r3, #24]
 801877a:	f003 0303 	and.w	r3, r3, #3
 801877e:	2b00      	cmp	r3, #0
 8018780:	d003      	beq.n	801878a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	f000 f905 	bl	8018992 <HAL_TIM_IC_CaptureCallback>
 8018788:	e005      	b.n	8018796 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f000 f8f7 	bl	801897e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f000 f908 	bl	80189a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2200      	movs	r2, #0
 801879a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	691b      	ldr	r3, [r3, #16]
 80187a2:	f003 0304 	and.w	r3, r3, #4
 80187a6:	2b04      	cmp	r3, #4
 80187a8:	d122      	bne.n	80187f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	68db      	ldr	r3, [r3, #12]
 80187b0:	f003 0304 	and.w	r3, r3, #4
 80187b4:	2b04      	cmp	r3, #4
 80187b6:	d11b      	bne.n	80187f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f06f 0204 	mvn.w	r2, #4
 80187c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2202      	movs	r2, #2
 80187c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	699b      	ldr	r3, [r3, #24]
 80187ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d003      	beq.n	80187de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f000 f8db 	bl	8018992 <HAL_TIM_IC_CaptureCallback>
 80187dc:	e005      	b.n	80187ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	f000 f8cd 	bl	801897e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f000 f8de 	bl	80189a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	2200      	movs	r2, #0
 80187ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	691b      	ldr	r3, [r3, #16]
 80187f6:	f003 0308 	and.w	r3, r3, #8
 80187fa:	2b08      	cmp	r3, #8
 80187fc:	d122      	bne.n	8018844 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	68db      	ldr	r3, [r3, #12]
 8018804:	f003 0308 	and.w	r3, r3, #8
 8018808:	2b08      	cmp	r3, #8
 801880a:	d11b      	bne.n	8018844 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f06f 0208 	mvn.w	r2, #8
 8018814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	2204      	movs	r2, #4
 801881a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	69db      	ldr	r3, [r3, #28]
 8018822:	f003 0303 	and.w	r3, r3, #3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d003      	beq.n	8018832 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f000 f8b1 	bl	8018992 <HAL_TIM_IC_CaptureCallback>
 8018830:	e005      	b.n	801883e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018832:	6878      	ldr	r0, [r7, #4]
 8018834:	f000 f8a3 	bl	801897e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f000 f8b4 	bl	80189a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2200      	movs	r2, #0
 8018842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	691b      	ldr	r3, [r3, #16]
 801884a:	f003 0310 	and.w	r3, r3, #16
 801884e:	2b10      	cmp	r3, #16
 8018850:	d122      	bne.n	8018898 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	68db      	ldr	r3, [r3, #12]
 8018858:	f003 0310 	and.w	r3, r3, #16
 801885c:	2b10      	cmp	r3, #16
 801885e:	d11b      	bne.n	8018898 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	f06f 0210 	mvn.w	r2, #16
 8018868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2208      	movs	r2, #8
 801886e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	69db      	ldr	r3, [r3, #28]
 8018876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801887a:	2b00      	cmp	r3, #0
 801887c:	d003      	beq.n	8018886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801887e:	6878      	ldr	r0, [r7, #4]
 8018880:	f000 f887 	bl	8018992 <HAL_TIM_IC_CaptureCallback>
 8018884:	e005      	b.n	8018892 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f000 f879 	bl	801897e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f000 f88a 	bl	80189a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	2200      	movs	r2, #0
 8018896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	f003 0301 	and.w	r3, r3, #1
 80188a2:	2b01      	cmp	r3, #1
 80188a4:	d10e      	bne.n	80188c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	68db      	ldr	r3, [r3, #12]
 80188ac:	f003 0301 	and.w	r3, r3, #1
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d107      	bne.n	80188c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	f06f 0201 	mvn.w	r2, #1
 80188bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80188be:	6878      	ldr	r0, [r7, #4]
 80188c0:	f7e8 f926 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	691b      	ldr	r3, [r3, #16]
 80188ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188ce:	2b80      	cmp	r3, #128	; 0x80
 80188d0:	d10e      	bne.n	80188f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188dc:	2b80      	cmp	r3, #128	; 0x80
 80188de:	d107      	bne.n	80188f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80188e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80188ea:	6878      	ldr	r0, [r7, #4]
 80188ec:	f000 f8de 	bl	8018aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	691b      	ldr	r3, [r3, #16]
 80188f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80188fe:	d10e      	bne.n	801891e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	68db      	ldr	r3, [r3, #12]
 8018906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801890a:	2b80      	cmp	r3, #128	; 0x80
 801890c:	d107      	bne.n	801891e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f000 f8d1 	bl	8018ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	691b      	ldr	r3, [r3, #16]
 8018924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018928:	2b40      	cmp	r3, #64	; 0x40
 801892a:	d10e      	bne.n	801894a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018936:	2b40      	cmp	r3, #64	; 0x40
 8018938:	d107      	bne.n	801894a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f000 f838 	bl	80189ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	691b      	ldr	r3, [r3, #16]
 8018950:	f003 0320 	and.w	r3, r3, #32
 8018954:	2b20      	cmp	r3, #32
 8018956:	d10e      	bne.n	8018976 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	68db      	ldr	r3, [r3, #12]
 801895e:	f003 0320 	and.w	r3, r3, #32
 8018962:	2b20      	cmp	r3, #32
 8018964:	d107      	bne.n	8018976 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f06f 0220 	mvn.w	r2, #32
 801896e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018970:	6878      	ldr	r0, [r7, #4]
 8018972:	f000 f891 	bl	8018a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018976:	bf00      	nop
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801897e:	b480      	push	{r7}
 8018980:	b083      	sub	sp, #12
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018986:	bf00      	nop
 8018988:	370c      	adds	r7, #12
 801898a:	46bd      	mov	sp, r7
 801898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018990:	4770      	bx	lr

08018992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018992:	b480      	push	{r7}
 8018994:	b083      	sub	sp, #12
 8018996:	af00      	add	r7, sp, #0
 8018998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801899a:	bf00      	nop
 801899c:	370c      	adds	r7, #12
 801899e:	46bd      	mov	sp, r7
 80189a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a4:	4770      	bx	lr

080189a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80189a6:	b480      	push	{r7}
 80189a8:	b083      	sub	sp, #12
 80189aa:	af00      	add	r7, sp, #0
 80189ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80189ae:	bf00      	nop
 80189b0:	370c      	adds	r7, #12
 80189b2:	46bd      	mov	sp, r7
 80189b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b8:	4770      	bx	lr

080189ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80189ba:	b480      	push	{r7}
 80189bc:	b083      	sub	sp, #12
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80189c2:	bf00      	nop
 80189c4:	370c      	adds	r7, #12
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
	...

080189d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80189d0:	b480      	push	{r7}
 80189d2:	b085      	sub	sp, #20
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
 80189d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	4a2a      	ldr	r2, [pc, #168]	; (8018a8c <TIM_Base_SetConfig+0xbc>)
 80189e4:	4293      	cmp	r3, r2
 80189e6:	d003      	beq.n	80189f0 <TIM_Base_SetConfig+0x20>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80189ee:	d108      	bne.n	8018a02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80189f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	68fa      	ldr	r2, [r7, #12]
 80189fe:	4313      	orrs	r3, r2
 8018a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4a21      	ldr	r2, [pc, #132]	; (8018a8c <TIM_Base_SetConfig+0xbc>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d00b      	beq.n	8018a22 <TIM_Base_SetConfig+0x52>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018a10:	d007      	beq.n	8018a22 <TIM_Base_SetConfig+0x52>
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	4a1e      	ldr	r2, [pc, #120]	; (8018a90 <TIM_Base_SetConfig+0xc0>)
 8018a16:	4293      	cmp	r3, r2
 8018a18:	d003      	beq.n	8018a22 <TIM_Base_SetConfig+0x52>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	4a1d      	ldr	r2, [pc, #116]	; (8018a94 <TIM_Base_SetConfig+0xc4>)
 8018a1e:	4293      	cmp	r3, r2
 8018a20:	d108      	bne.n	8018a34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	68db      	ldr	r3, [r3, #12]
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	4313      	orrs	r3, r2
 8018a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	695b      	ldr	r3, [r3, #20]
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	689a      	ldr	r2, [r3, #8]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018a50:	683b      	ldr	r3, [r7, #0]
 8018a52:	681a      	ldr	r2, [r3, #0]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	4a0c      	ldr	r2, [pc, #48]	; (8018a8c <TIM_Base_SetConfig+0xbc>)
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d007      	beq.n	8018a70 <TIM_Base_SetConfig+0xa0>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	4a0b      	ldr	r2, [pc, #44]	; (8018a90 <TIM_Base_SetConfig+0xc0>)
 8018a64:	4293      	cmp	r3, r2
 8018a66:	d003      	beq.n	8018a70 <TIM_Base_SetConfig+0xa0>
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	4a0a      	ldr	r2, [pc, #40]	; (8018a94 <TIM_Base_SetConfig+0xc4>)
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	d103      	bne.n	8018a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	691a      	ldr	r2, [r3, #16]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	615a      	str	r2, [r3, #20]
}
 8018a7e:	bf00      	nop
 8018a80:	3714      	adds	r7, #20
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	40012c00 	.word	0x40012c00
 8018a90:	40014400 	.word	0x40014400
 8018a94:	40014800 	.word	0x40014800

08018a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b083      	sub	sp, #12
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018aa0:	bf00      	nop
 8018aa2:	370c      	adds	r7, #12
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aaa:	4770      	bx	lr

08018aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018aac:	b480      	push	{r7}
 8018aae:	b083      	sub	sp, #12
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018ab4:	bf00      	nop
 8018ab6:	370c      	adds	r7, #12
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abe:	4770      	bx	lr

08018ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018ac8:	bf00      	nop
 8018aca:	370c      	adds	r7, #12
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <LL_RCC_GetUSARTClockSource>:
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	b083      	sub	sp, #12
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	4013      	ands	r3, r2
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	370c      	adds	r7, #12
 8018aec:	46bd      	mov	sp, r7
 8018aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af2:	4770      	bx	lr

08018af4 <LL_RCC_GetLPUARTClockSource>:
{
 8018af4:	b480      	push	{r7}
 8018af6:	b083      	sub	sp, #12
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	4013      	ands	r3, r2
}
 8018b08:	4618      	mov	r0, r3
 8018b0a:	370c      	adds	r7, #12
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b12:	4770      	bx	lr

08018b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d101      	bne.n	8018b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018b22:	2301      	movs	r3, #1
 8018b24:	e042      	b.n	8018bac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d106      	bne.n	8018b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2200      	movs	r2, #0
 8018b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018b38:	6878      	ldr	r0, [r7, #4]
 8018b3a:	f7e8 fba5 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	2224      	movs	r2, #36	; 0x24
 8018b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	681a      	ldr	r2, [r3, #0]
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	f022 0201 	bic.w	r2, r2, #1
 8018b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	f000 f82c 	bl	8018bb4 <UART_SetConfig>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b01      	cmp	r3, #1
 8018b60:	d101      	bne.n	8018b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018b62:	2301      	movs	r3, #1
 8018b64:	e022      	b.n	8018bac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d002      	beq.n	8018b74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018b6e:	6878      	ldr	r0, [r7, #4]
 8018b70:	f000 fa48 	bl	8019004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	685a      	ldr	r2, [r3, #4]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	689a      	ldr	r2, [r3, #8]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	f042 0201 	orr.w	r2, r2, #1
 8018ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f000 facf 	bl	8019148 <UART_CheckIdleState>
 8018baa:	4603      	mov	r3, r0
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018bb8:	b08c      	sub	sp, #48	; 0x30
 8018bba:	af00      	add	r7, sp, #0
 8018bbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	689a      	ldr	r2, [r3, #8]
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	691b      	ldr	r3, [r3, #16]
 8018bcc:	431a      	orrs	r2, r3
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	695b      	ldr	r3, [r3, #20]
 8018bd2:	431a      	orrs	r2, r3
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	69db      	ldr	r3, [r3, #28]
 8018bd8:	4313      	orrs	r3, r2
 8018bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	681a      	ldr	r2, [r3, #0]
 8018be2:	4baf      	ldr	r3, [pc, #700]	; (8018ea0 <UART_SetConfig+0x2ec>)
 8018be4:	4013      	ands	r3, r2
 8018be6:	697a      	ldr	r2, [r7, #20]
 8018be8:	6812      	ldr	r2, [r2, #0]
 8018bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018bec:	430b      	orrs	r3, r1
 8018bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	685b      	ldr	r3, [r3, #4]
 8018bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	68da      	ldr	r2, [r3, #12]
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	430a      	orrs	r2, r1
 8018c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	699b      	ldr	r3, [r3, #24]
 8018c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4aa4      	ldr	r2, [pc, #656]	; (8018ea4 <UART_SetConfig+0x2f0>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d004      	beq.n	8018c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	6a1b      	ldr	r3, [r3, #32]
 8018c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c1c:	4313      	orrs	r3, r2
 8018c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	689b      	ldr	r3, [r3, #8]
 8018c26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018c2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018c2e:	697a      	ldr	r2, [r7, #20]
 8018c30:	6812      	ldr	r2, [r2, #0]
 8018c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018c34:	430b      	orrs	r3, r1
 8018c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018c38:	697b      	ldr	r3, [r7, #20]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c3e:	f023 010f 	bic.w	r1, r3, #15
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	430a      	orrs	r2, r1
 8018c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018c4e:	697b      	ldr	r3, [r7, #20]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	4a95      	ldr	r2, [pc, #596]	; (8018ea8 <UART_SetConfig+0x2f4>)
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d125      	bne.n	8018ca4 <UART_SetConfig+0xf0>
 8018c58:	2003      	movs	r0, #3
 8018c5a:	f7ff ff3b 	bl	8018ad4 <LL_RCC_GetUSARTClockSource>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	2b03      	cmp	r3, #3
 8018c62:	d81b      	bhi.n	8018c9c <UART_SetConfig+0xe8>
 8018c64:	a201      	add	r2, pc, #4	; (adr r2, 8018c6c <UART_SetConfig+0xb8>)
 8018c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c6a:	bf00      	nop
 8018c6c:	08018c7d 	.word	0x08018c7d
 8018c70:	08018c8d 	.word	0x08018c8d
 8018c74:	08018c85 	.word	0x08018c85
 8018c78:	08018c95 	.word	0x08018c95
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c82:	e042      	b.n	8018d0a <UART_SetConfig+0x156>
 8018c84:	2302      	movs	r3, #2
 8018c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c8a:	e03e      	b.n	8018d0a <UART_SetConfig+0x156>
 8018c8c:	2304      	movs	r3, #4
 8018c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c92:	e03a      	b.n	8018d0a <UART_SetConfig+0x156>
 8018c94:	2308      	movs	r3, #8
 8018c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c9a:	e036      	b.n	8018d0a <UART_SetConfig+0x156>
 8018c9c:	2310      	movs	r3, #16
 8018c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018ca2:	e032      	b.n	8018d0a <UART_SetConfig+0x156>
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4a7e      	ldr	r2, [pc, #504]	; (8018ea4 <UART_SetConfig+0x2f0>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d12a      	bne.n	8018d04 <UART_SetConfig+0x150>
 8018cae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018cb2:	f7ff ff1f 	bl	8018af4 <LL_RCC_GetLPUARTClockSource>
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018cbc:	d01a      	beq.n	8018cf4 <UART_SetConfig+0x140>
 8018cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018cc2:	d81b      	bhi.n	8018cfc <UART_SetConfig+0x148>
 8018cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018cc8:	d00c      	beq.n	8018ce4 <UART_SetConfig+0x130>
 8018cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018cce:	d815      	bhi.n	8018cfc <UART_SetConfig+0x148>
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d003      	beq.n	8018cdc <UART_SetConfig+0x128>
 8018cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018cd8:	d008      	beq.n	8018cec <UART_SetConfig+0x138>
 8018cda:	e00f      	b.n	8018cfc <UART_SetConfig+0x148>
 8018cdc:	2300      	movs	r3, #0
 8018cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018ce2:	e012      	b.n	8018d0a <UART_SetConfig+0x156>
 8018ce4:	2302      	movs	r3, #2
 8018ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cea:	e00e      	b.n	8018d0a <UART_SetConfig+0x156>
 8018cec:	2304      	movs	r3, #4
 8018cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cf2:	e00a      	b.n	8018d0a <UART_SetConfig+0x156>
 8018cf4:	2308      	movs	r3, #8
 8018cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cfa:	e006      	b.n	8018d0a <UART_SetConfig+0x156>
 8018cfc:	2310      	movs	r3, #16
 8018cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018d02:	e002      	b.n	8018d0a <UART_SetConfig+0x156>
 8018d04:	2310      	movs	r3, #16
 8018d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4a65      	ldr	r2, [pc, #404]	; (8018ea4 <UART_SetConfig+0x2f0>)
 8018d10:	4293      	cmp	r3, r2
 8018d12:	f040 8097 	bne.w	8018e44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018d1a:	2b08      	cmp	r3, #8
 8018d1c:	d823      	bhi.n	8018d66 <UART_SetConfig+0x1b2>
 8018d1e:	a201      	add	r2, pc, #4	; (adr r2, 8018d24 <UART_SetConfig+0x170>)
 8018d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d24:	08018d49 	.word	0x08018d49
 8018d28:	08018d67 	.word	0x08018d67
 8018d2c:	08018d51 	.word	0x08018d51
 8018d30:	08018d67 	.word	0x08018d67
 8018d34:	08018d57 	.word	0x08018d57
 8018d38:	08018d67 	.word	0x08018d67
 8018d3c:	08018d67 	.word	0x08018d67
 8018d40:	08018d67 	.word	0x08018d67
 8018d44:	08018d5f 	.word	0x08018d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018d48:	f7fe ff00 	bl	8017b4c <HAL_RCC_GetPCLK1Freq>
 8018d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d4e:	e010      	b.n	8018d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018d50:	4b56      	ldr	r3, [pc, #344]	; (8018eac <UART_SetConfig+0x2f8>)
 8018d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d54:	e00d      	b.n	8018d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018d56:	f7fe fe79 	bl	8017a4c <HAL_RCC_GetSysClockFreq>
 8018d5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d5c:	e009      	b.n	8018d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d64:	e005      	b.n	8018d72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018d66:	2300      	movs	r3, #0
 8018d68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f000 812b 	beq.w	8018fd0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7e:	4a4c      	ldr	r2, [pc, #304]	; (8018eb0 <UART_SetConfig+0x2fc>)
 8018d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d84:	461a      	mov	r2, r3
 8018d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	685a      	ldr	r2, [r3, #4]
 8018d92:	4613      	mov	r3, r2
 8018d94:	005b      	lsls	r3, r3, #1
 8018d96:	4413      	add	r3, r2
 8018d98:	69ba      	ldr	r2, [r7, #24]
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d305      	bcc.n	8018daa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018da4:	69ba      	ldr	r2, [r7, #24]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d903      	bls.n	8018db2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018daa:	2301      	movs	r3, #1
 8018dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018db0:	e10e      	b.n	8018fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db4:	2200      	movs	r2, #0
 8018db6:	60bb      	str	r3, [r7, #8]
 8018db8:	60fa      	str	r2, [r7, #12]
 8018dba:	697b      	ldr	r3, [r7, #20]
 8018dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dbe:	4a3c      	ldr	r2, [pc, #240]	; (8018eb0 <UART_SetConfig+0x2fc>)
 8018dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	603b      	str	r3, [r7, #0]
 8018dca:	607a      	str	r2, [r7, #4]
 8018dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018dd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018dd4:	f7e7 fa74 	bl	80002c0 <__aeabi_uldivmod>
 8018dd8:	4602      	mov	r2, r0
 8018dda:	460b      	mov	r3, r1
 8018ddc:	4610      	mov	r0, r2
 8018dde:	4619      	mov	r1, r3
 8018de0:	f04f 0200 	mov.w	r2, #0
 8018de4:	f04f 0300 	mov.w	r3, #0
 8018de8:	020b      	lsls	r3, r1, #8
 8018dea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018dee:	0202      	lsls	r2, r0, #8
 8018df0:	6979      	ldr	r1, [r7, #20]
 8018df2:	6849      	ldr	r1, [r1, #4]
 8018df4:	0849      	lsrs	r1, r1, #1
 8018df6:	2000      	movs	r0, #0
 8018df8:	460c      	mov	r4, r1
 8018dfa:	4605      	mov	r5, r0
 8018dfc:	eb12 0804 	adds.w	r8, r2, r4
 8018e00:	eb43 0905 	adc.w	r9, r3, r5
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	685b      	ldr	r3, [r3, #4]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	469a      	mov	sl, r3
 8018e0c:	4693      	mov	fp, r2
 8018e0e:	4652      	mov	r2, sl
 8018e10:	465b      	mov	r3, fp
 8018e12:	4640      	mov	r0, r8
 8018e14:	4649      	mov	r1, r9
 8018e16:	f7e7 fa53 	bl	80002c0 <__aeabi_uldivmod>
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	460b      	mov	r3, r1
 8018e1e:	4613      	mov	r3, r2
 8018e20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018e22:	6a3b      	ldr	r3, [r7, #32]
 8018e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018e28:	d308      	bcc.n	8018e3c <UART_SetConfig+0x288>
 8018e2a:	6a3b      	ldr	r3, [r7, #32]
 8018e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018e30:	d204      	bcs.n	8018e3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018e32:	697b      	ldr	r3, [r7, #20]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	6a3a      	ldr	r2, [r7, #32]
 8018e38:	60da      	str	r2, [r3, #12]
 8018e3a:	e0c9      	b.n	8018fd0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018e42:	e0c5      	b.n	8018fd0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	69db      	ldr	r3, [r3, #28]
 8018e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018e4c:	d16d      	bne.n	8018f2a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e52:	3b01      	subs	r3, #1
 8018e54:	2b07      	cmp	r3, #7
 8018e56:	d82d      	bhi.n	8018eb4 <UART_SetConfig+0x300>
 8018e58:	a201      	add	r2, pc, #4	; (adr r2, 8018e60 <UART_SetConfig+0x2ac>)
 8018e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e5e:	bf00      	nop
 8018e60:	08018e81 	.word	0x08018e81
 8018e64:	08018e89 	.word	0x08018e89
 8018e68:	08018eb5 	.word	0x08018eb5
 8018e6c:	08018e8f 	.word	0x08018e8f
 8018e70:	08018eb5 	.word	0x08018eb5
 8018e74:	08018eb5 	.word	0x08018eb5
 8018e78:	08018eb5 	.word	0x08018eb5
 8018e7c:	08018e97 	.word	0x08018e97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018e80:	f7fe fe7a 	bl	8017b78 <HAL_RCC_GetPCLK2Freq>
 8018e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e86:	e01b      	b.n	8018ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018e88:	4b08      	ldr	r3, [pc, #32]	; (8018eac <UART_SetConfig+0x2f8>)
 8018e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e8c:	e018      	b.n	8018ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018e8e:	f7fe fddd 	bl	8017a4c <HAL_RCC_GetSysClockFreq>
 8018e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e94:	e014      	b.n	8018ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e9c:	e010      	b.n	8018ec0 <UART_SetConfig+0x30c>
 8018e9e:	bf00      	nop
 8018ea0:	cfff69f3 	.word	0xcfff69f3
 8018ea4:	40008000 	.word	0x40008000
 8018ea8:	40013800 	.word	0x40013800
 8018eac:	00f42400 	.word	0x00f42400
 8018eb0:	0801ab20 	.word	0x0801ab20
      default:
        pclk = 0U;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018eb8:	2301      	movs	r3, #1
 8018eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f000 8084 	beq.w	8018fd0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ecc:	4a4b      	ldr	r2, [pc, #300]	; (8018ffc <UART_SetConfig+0x448>)
 8018ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018ed2:	461a      	mov	r2, r3
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8018eda:	005a      	lsls	r2, r3, #1
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	685b      	ldr	r3, [r3, #4]
 8018ee0:	085b      	lsrs	r3, r3, #1
 8018ee2:	441a      	add	r2, r3
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	685b      	ldr	r3, [r3, #4]
 8018ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018eee:	6a3b      	ldr	r3, [r7, #32]
 8018ef0:	2b0f      	cmp	r3, #15
 8018ef2:	d916      	bls.n	8018f22 <UART_SetConfig+0x36e>
 8018ef4:	6a3b      	ldr	r3, [r7, #32]
 8018ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018efa:	d212      	bcs.n	8018f22 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018efc:	6a3b      	ldr	r3, [r7, #32]
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	f023 030f 	bic.w	r3, r3, #15
 8018f04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018f06:	6a3b      	ldr	r3, [r7, #32]
 8018f08:	085b      	lsrs	r3, r3, #1
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	f003 0307 	and.w	r3, r3, #7
 8018f10:	b29a      	uxth	r2, r3
 8018f12:	8bfb      	ldrh	r3, [r7, #30]
 8018f14:	4313      	orrs	r3, r2
 8018f16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	8bfa      	ldrh	r2, [r7, #30]
 8018f1e:	60da      	str	r2, [r3, #12]
 8018f20:	e056      	b.n	8018fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018f22:	2301      	movs	r3, #1
 8018f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018f28:	e052      	b.n	8018fd0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018f2e:	3b01      	subs	r3, #1
 8018f30:	2b07      	cmp	r3, #7
 8018f32:	d822      	bhi.n	8018f7a <UART_SetConfig+0x3c6>
 8018f34:	a201      	add	r2, pc, #4	; (adr r2, 8018f3c <UART_SetConfig+0x388>)
 8018f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f3a:	bf00      	nop
 8018f3c:	08018f5d 	.word	0x08018f5d
 8018f40:	08018f65 	.word	0x08018f65
 8018f44:	08018f7b 	.word	0x08018f7b
 8018f48:	08018f6b 	.word	0x08018f6b
 8018f4c:	08018f7b 	.word	0x08018f7b
 8018f50:	08018f7b 	.word	0x08018f7b
 8018f54:	08018f7b 	.word	0x08018f7b
 8018f58:	08018f73 	.word	0x08018f73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018f5c:	f7fe fe0c 	bl	8017b78 <HAL_RCC_GetPCLK2Freq>
 8018f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f62:	e010      	b.n	8018f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018f64:	4b26      	ldr	r3, [pc, #152]	; (8019000 <UART_SetConfig+0x44c>)
 8018f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018f68:	e00d      	b.n	8018f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018f6a:	f7fe fd6f 	bl	8017a4c <HAL_RCC_GetSysClockFreq>
 8018f6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f70:	e009      	b.n	8018f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018f78:	e005      	b.n	8018f86 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018f7e:	2301      	movs	r3, #1
 8018f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018f84:	bf00      	nop
    }

    if (pclk != 0U)
 8018f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d021      	beq.n	8018fd0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f90:	4a1a      	ldr	r2, [pc, #104]	; (8018ffc <UART_SetConfig+0x448>)
 8018f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f96:	461a      	mov	r2, r3
 8018f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	085b      	lsrs	r3, r3, #1
 8018fa4:	441a      	add	r2, r3
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	685b      	ldr	r3, [r3, #4]
 8018faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018fb0:	6a3b      	ldr	r3, [r7, #32]
 8018fb2:	2b0f      	cmp	r3, #15
 8018fb4:	d909      	bls.n	8018fca <UART_SetConfig+0x416>
 8018fb6:	6a3b      	ldr	r3, [r7, #32]
 8018fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018fbc:	d205      	bcs.n	8018fca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018fbe:	6a3b      	ldr	r3, [r7, #32]
 8018fc0:	b29a      	uxth	r2, r3
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	60da      	str	r2, [r3, #12]
 8018fc8:	e002      	b.n	8018fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8018fca:	2301      	movs	r3, #1
 8018fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	2201      	movs	r2, #1
 8018fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	2201      	movs	r2, #1
 8018fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8018fec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	3730      	adds	r7, #48	; 0x30
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018ffa:	bf00      	nop
 8018ffc:	0801ab20 	.word	0x0801ab20
 8019000:	00f42400 	.word	0x00f42400

08019004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019010:	f003 0301 	and.w	r3, r3, #1
 8019014:	2b00      	cmp	r3, #0
 8019016:	d00a      	beq.n	801902e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	685b      	ldr	r3, [r3, #4]
 801901e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	430a      	orrs	r2, r1
 801902c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019032:	f003 0302 	and.w	r3, r3, #2
 8019036:	2b00      	cmp	r3, #0
 8019038:	d00a      	beq.n	8019050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	685b      	ldr	r3, [r3, #4]
 8019040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	430a      	orrs	r2, r1
 801904e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019054:	f003 0304 	and.w	r3, r3, #4
 8019058:	2b00      	cmp	r3, #0
 801905a:	d00a      	beq.n	8019072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	430a      	orrs	r2, r1
 8019070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019076:	f003 0308 	and.w	r3, r3, #8
 801907a:	2b00      	cmp	r3, #0
 801907c:	d00a      	beq.n	8019094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	685b      	ldr	r3, [r3, #4]
 8019084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	430a      	orrs	r2, r1
 8019092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019098:	f003 0310 	and.w	r3, r3, #16
 801909c:	2b00      	cmp	r3, #0
 801909e:	d00a      	beq.n	80190b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	689b      	ldr	r3, [r3, #8]
 80190a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	430a      	orrs	r2, r1
 80190b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190ba:	f003 0320 	and.w	r3, r3, #32
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d00a      	beq.n	80190d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	689b      	ldr	r3, [r3, #8]
 80190c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	430a      	orrs	r2, r1
 80190d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d01a      	beq.n	801911a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	430a      	orrs	r2, r1
 80190f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019102:	d10a      	bne.n	801911a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	685b      	ldr	r3, [r3, #4]
 801910a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	430a      	orrs	r2, r1
 8019118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019122:	2b00      	cmp	r3, #0
 8019124:	d00a      	beq.n	801913c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	685b      	ldr	r3, [r3, #4]
 801912c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	430a      	orrs	r2, r1
 801913a:	605a      	str	r2, [r3, #4]
  }
}
 801913c:	bf00      	nop
 801913e:	370c      	adds	r7, #12
 8019140:	46bd      	mov	sp, r7
 8019142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019146:	4770      	bx	lr

08019148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b086      	sub	sp, #24
 801914c:	af02      	add	r7, sp, #8
 801914e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2200      	movs	r2, #0
 8019154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019158:	f7fc f9a2 	bl	80154a0 <HAL_GetTick>
 801915c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f003 0308 	and.w	r3, r3, #8
 8019168:	2b08      	cmp	r3, #8
 801916a:	d10e      	bne.n	801918a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801916c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019170:	9300      	str	r3, [sp, #0]
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	2200      	movs	r2, #0
 8019176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f000 f832 	bl	80191e4 <UART_WaitOnFlagUntilTimeout>
 8019180:	4603      	mov	r3, r0
 8019182:	2b00      	cmp	r3, #0
 8019184:	d001      	beq.n	801918a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019186:	2303      	movs	r3, #3
 8019188:	e028      	b.n	80191dc <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f003 0304 	and.w	r3, r3, #4
 8019194:	2b04      	cmp	r3, #4
 8019196:	d10e      	bne.n	80191b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	2200      	movs	r2, #0
 80191a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f000 f81c 	bl	80191e4 <UART_WaitOnFlagUntilTimeout>
 80191ac:	4603      	mov	r3, r0
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d001      	beq.n	80191b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80191b2:	2303      	movs	r3, #3
 80191b4:	e012      	b.n	80191dc <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	2220      	movs	r2, #32
 80191ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2220      	movs	r2, #32
 80191c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	2200      	movs	r2, #0
 80191ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	2200      	movs	r2, #0
 80191d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2200      	movs	r2, #0
 80191d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80191da:	2300      	movs	r3, #0
}
 80191dc:	4618      	mov	r0, r3
 80191de:	3710      	adds	r7, #16
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}

080191e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b09c      	sub	sp, #112	; 0x70
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	60f8      	str	r0, [r7, #12]
 80191ec:	60b9      	str	r1, [r7, #8]
 80191ee:	603b      	str	r3, [r7, #0]
 80191f0:	4613      	mov	r3, r2
 80191f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191f4:	e0a9      	b.n	801934a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80191f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191fc:	f000 80a5 	beq.w	801934a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019200:	f7fc f94e 	bl	80154a0 <HAL_GetTick>
 8019204:	4602      	mov	r2, r0
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	1ad3      	subs	r3, r2, r3
 801920a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801920c:	429a      	cmp	r2, r3
 801920e:	d302      	bcc.n	8019216 <UART_WaitOnFlagUntilTimeout+0x32>
 8019210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019212:	2b00      	cmp	r3, #0
 8019214:	d140      	bne.n	8019298 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801921c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801921e:	e853 3f00 	ldrex	r3, [r3]
 8019222:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801922a:	667b      	str	r3, [r7, #100]	; 0x64
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	461a      	mov	r2, r3
 8019232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019236:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019238:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801923a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801923c:	e841 2300 	strex	r3, r2, [r1]
 8019240:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8019242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019244:	2b00      	cmp	r3, #0
 8019246:	d1e6      	bne.n	8019216 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	3308      	adds	r3, #8
 801924e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019252:	e853 3f00 	ldrex	r3, [r3]
 8019256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925a:	f023 0301 	bic.w	r3, r3, #1
 801925e:	663b      	str	r3, [r7, #96]	; 0x60
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	3308      	adds	r3, #8
 8019266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019268:	64ba      	str	r2, [r7, #72]	; 0x48
 801926a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801926c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801926e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019270:	e841 2300 	strex	r3, r2, [r1]
 8019274:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8019276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019278:	2b00      	cmp	r3, #0
 801927a:	d1e5      	bne.n	8019248 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	2220      	movs	r2, #32
 8019280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	2220      	movs	r2, #32
 8019288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	2200      	movs	r2, #0
 8019290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8019294:	2303      	movs	r3, #3
 8019296:	e069      	b.n	801936c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	f003 0304 	and.w	r3, r3, #4
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d051      	beq.n	801934a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	69db      	ldr	r3, [r3, #28]
 80192ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80192b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80192b4:	d149      	bne.n	801934a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80192be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	e853 3f00 	ldrex	r3, [r3]
 80192cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80192ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80192d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	461a      	mov	r2, r3
 80192dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192de:	637b      	str	r3, [r7, #52]	; 0x34
 80192e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80192e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192e6:	e841 2300 	strex	r3, r2, [r1]
 80192ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80192ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d1e6      	bne.n	80192c0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	3308      	adds	r3, #8
 80192f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	e853 3f00 	ldrex	r3, [r3]
 8019300:	613b      	str	r3, [r7, #16]
   return(result);
 8019302:	693b      	ldr	r3, [r7, #16]
 8019304:	f023 0301 	bic.w	r3, r3, #1
 8019308:	66bb      	str	r3, [r7, #104]	; 0x68
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	3308      	adds	r3, #8
 8019310:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019312:	623a      	str	r2, [r7, #32]
 8019314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019316:	69f9      	ldr	r1, [r7, #28]
 8019318:	6a3a      	ldr	r2, [r7, #32]
 801931a:	e841 2300 	strex	r3, r2, [r1]
 801931e:	61bb      	str	r3, [r7, #24]
   return(result);
 8019320:	69bb      	ldr	r3, [r7, #24]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d1e5      	bne.n	80192f2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	2220      	movs	r2, #32
 801932a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	2220      	movs	r2, #32
 8019332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2220      	movs	r2, #32
 801933a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	2200      	movs	r2, #0
 8019342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8019346:	2303      	movs	r3, #3
 8019348:	e010      	b.n	801936c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	69da      	ldr	r2, [r3, #28]
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	4013      	ands	r3, r2
 8019354:	68ba      	ldr	r2, [r7, #8]
 8019356:	429a      	cmp	r2, r3
 8019358:	bf0c      	ite	eq
 801935a:	2301      	moveq	r3, #1
 801935c:	2300      	movne	r3, #0
 801935e:	b2db      	uxtb	r3, r3
 8019360:	461a      	mov	r2, r3
 8019362:	79fb      	ldrb	r3, [r7, #7]
 8019364:	429a      	cmp	r2, r3
 8019366:	f43f af46 	beq.w	80191f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801936a:	2300      	movs	r3, #0
}
 801936c:	4618      	mov	r0, r3
 801936e:	3770      	adds	r7, #112	; 0x70
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019374:	b480      	push	{r7}
 8019376:	b085      	sub	sp, #20
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019382:	2b01      	cmp	r3, #1
 8019384:	d101      	bne.n	801938a <HAL_UARTEx_DisableFifoMode+0x16>
 8019386:	2302      	movs	r3, #2
 8019388:	e027      	b.n	80193da <HAL_UARTEx_DisableFifoMode+0x66>
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2201      	movs	r2, #1
 801938e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	2224      	movs	r2, #36	; 0x24
 8019396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	681a      	ldr	r2, [r3, #0]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	f022 0201 	bic.w	r2, r2, #1
 80193b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80193b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2200      	movs	r2, #0
 80193be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	68fa      	ldr	r2, [r7, #12]
 80193c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2220      	movs	r2, #32
 80193cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	2200      	movs	r2, #0
 80193d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80193d8:	2300      	movs	r3, #0
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3714      	adds	r7, #20
 80193de:	46bd      	mov	sp, r7
 80193e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e4:	4770      	bx	lr

080193e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80193e6:	b580      	push	{r7, lr}
 80193e8:	b084      	sub	sp, #16
 80193ea:	af00      	add	r7, sp, #0
 80193ec:	6078      	str	r0, [r7, #4]
 80193ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d101      	bne.n	80193fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80193fa:	2302      	movs	r3, #2
 80193fc:	e02d      	b.n	801945a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	2201      	movs	r2, #1
 8019402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	2224      	movs	r2, #36	; 0x24
 801940a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	681a      	ldr	r2, [r3, #0]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f022 0201 	bic.w	r2, r2, #1
 8019424:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	689b      	ldr	r3, [r3, #8]
 801942c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	683a      	ldr	r2, [r7, #0]
 8019436:	430a      	orrs	r2, r1
 8019438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801943a:	6878      	ldr	r0, [r7, #4]
 801943c:	f000 f850 	bl	80194e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	68fa      	ldr	r2, [r7, #12]
 8019446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2220      	movs	r2, #32
 801944c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2200      	movs	r2, #0
 8019454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019458:	2300      	movs	r3, #0
}
 801945a:	4618      	mov	r0, r3
 801945c:	3710      	adds	r7, #16
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}

08019462 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019462:	b580      	push	{r7, lr}
 8019464:	b084      	sub	sp, #16
 8019466:	af00      	add	r7, sp, #0
 8019468:	6078      	str	r0, [r7, #4]
 801946a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019472:	2b01      	cmp	r3, #1
 8019474:	d101      	bne.n	801947a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019476:	2302      	movs	r3, #2
 8019478:	e02d      	b.n	80194d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	2201      	movs	r2, #1
 801947e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	2224      	movs	r2, #36	; 0x24
 8019486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	681a      	ldr	r2, [r3, #0]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	f022 0201 	bic.w	r2, r2, #1
 80194a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	683a      	ldr	r2, [r7, #0]
 80194b2:	430a      	orrs	r2, r1
 80194b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	f000 f812 	bl	80194e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	68fa      	ldr	r2, [r7, #12]
 80194c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2220      	movs	r2, #32
 80194c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2200      	movs	r2, #0
 80194d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80194d4:	2300      	movs	r3, #0
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
	...

080194e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80194e0:	b480      	push	{r7}
 80194e2:	b085      	sub	sp, #20
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d108      	bne.n	8019502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	2201      	movs	r2, #1
 80194f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2201      	movs	r2, #1
 80194fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019500:	e031      	b.n	8019566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019502:	2308      	movs	r3, #8
 8019504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8019506:	2308      	movs	r3, #8
 8019508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	689b      	ldr	r3, [r3, #8]
 8019510:	0e5b      	lsrs	r3, r3, #25
 8019512:	b2db      	uxtb	r3, r3
 8019514:	f003 0307 	and.w	r3, r3, #7
 8019518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	689b      	ldr	r3, [r3, #8]
 8019520:	0f5b      	lsrs	r3, r3, #29
 8019522:	b2db      	uxtb	r3, r3
 8019524:	f003 0307 	and.w	r3, r3, #7
 8019528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801952a:	7bbb      	ldrb	r3, [r7, #14]
 801952c:	7b3a      	ldrb	r2, [r7, #12]
 801952e:	4911      	ldr	r1, [pc, #68]	; (8019574 <UARTEx_SetNbDataToProcess+0x94>)
 8019530:	5c8a      	ldrb	r2, [r1, r2]
 8019532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8019536:	7b3a      	ldrb	r2, [r7, #12]
 8019538:	490f      	ldr	r1, [pc, #60]	; (8019578 <UARTEx_SetNbDataToProcess+0x98>)
 801953a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801953c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019540:	b29a      	uxth	r2, r3
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019548:	7bfb      	ldrb	r3, [r7, #15]
 801954a:	7b7a      	ldrb	r2, [r7, #13]
 801954c:	4909      	ldr	r1, [pc, #36]	; (8019574 <UARTEx_SetNbDataToProcess+0x94>)
 801954e:	5c8a      	ldrb	r2, [r1, r2]
 8019550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019554:	7b7a      	ldrb	r2, [r7, #13]
 8019556:	4908      	ldr	r1, [pc, #32]	; (8019578 <UARTEx_SetNbDataToProcess+0x98>)
 8019558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801955a:	fb93 f3f2 	sdiv	r3, r3, r2
 801955e:	b29a      	uxth	r2, r3
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8019566:	bf00      	nop
 8019568:	3714      	adds	r7, #20
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr
 8019572:	bf00      	nop
 8019574:	0801ab38 	.word	0x0801ab38
 8019578:	0801ab40 	.word	0x0801ab40

0801957c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801957c:	b480      	push	{r7}
 801957e:	b085      	sub	sp, #20
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019584:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8019588:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8019590:	b29a      	uxth	r2, r3
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	b29b      	uxth	r3, r3
 8019596:	43db      	mvns	r3, r3
 8019598:	b29b      	uxth	r3, r3
 801959a:	4013      	ands	r3, r2
 801959c:	b29a      	uxth	r2, r3
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80195a4:	2300      	movs	r3, #0
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	3714      	adds	r7, #20
 80195aa:	46bd      	mov	sp, r7
 80195ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b0:	4770      	bx	lr

080195b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80195b2:	b084      	sub	sp, #16
 80195b4:	b480      	push	{r7}
 80195b6:	b083      	sub	sp, #12
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	f107 0014 	add.w	r0, r7, #20
 80195c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2201      	movs	r2, #1
 80195c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	2200      	movs	r2, #0
 80195d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2200      	movs	r2, #0
 80195d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2200      	movs	r2, #0
 80195e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80195e4:	2300      	movs	r3, #0
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	370c      	adds	r7, #12
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	b004      	add	sp, #16
 80195f2:	4770      	bx	lr

080195f4 <__errno>:
 80195f4:	4b01      	ldr	r3, [pc, #4]	; (80195fc <__errno+0x8>)
 80195f6:	6818      	ldr	r0, [r3, #0]
 80195f8:	4770      	bx	lr
 80195fa:	bf00      	nop
 80195fc:	20000078 	.word	0x20000078

08019600 <__libc_init_array>:
 8019600:	b570      	push	{r4, r5, r6, lr}
 8019602:	4d0d      	ldr	r5, [pc, #52]	; (8019638 <__libc_init_array+0x38>)
 8019604:	4c0d      	ldr	r4, [pc, #52]	; (801963c <__libc_init_array+0x3c>)
 8019606:	1b64      	subs	r4, r4, r5
 8019608:	10a4      	asrs	r4, r4, #2
 801960a:	2600      	movs	r6, #0
 801960c:	42a6      	cmp	r6, r4
 801960e:	d109      	bne.n	8019624 <__libc_init_array+0x24>
 8019610:	4d0b      	ldr	r5, [pc, #44]	; (8019640 <__libc_init_array+0x40>)
 8019612:	4c0c      	ldr	r4, [pc, #48]	; (8019644 <__libc_init_array+0x44>)
 8019614:	f001 f8a4 	bl	801a760 <_init>
 8019618:	1b64      	subs	r4, r4, r5
 801961a:	10a4      	asrs	r4, r4, #2
 801961c:	2600      	movs	r6, #0
 801961e:	42a6      	cmp	r6, r4
 8019620:	d105      	bne.n	801962e <__libc_init_array+0x2e>
 8019622:	bd70      	pop	{r4, r5, r6, pc}
 8019624:	f855 3b04 	ldr.w	r3, [r5], #4
 8019628:	4798      	blx	r3
 801962a:	3601      	adds	r6, #1
 801962c:	e7ee      	b.n	801960c <__libc_init_array+0xc>
 801962e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019632:	4798      	blx	r3
 8019634:	3601      	adds	r6, #1
 8019636:	e7f2      	b.n	801961e <__libc_init_array+0x1e>
 8019638:	0801abe8 	.word	0x0801abe8
 801963c:	0801abe8 	.word	0x0801abe8
 8019640:	0801abe8 	.word	0x0801abe8
 8019644:	0801abec 	.word	0x0801abec

08019648 <memcpy>:
 8019648:	440a      	add	r2, r1
 801964a:	4291      	cmp	r1, r2
 801964c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019650:	d100      	bne.n	8019654 <memcpy+0xc>
 8019652:	4770      	bx	lr
 8019654:	b510      	push	{r4, lr}
 8019656:	f811 4b01 	ldrb.w	r4, [r1], #1
 801965a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801965e:	4291      	cmp	r1, r2
 8019660:	d1f9      	bne.n	8019656 <memcpy+0xe>
 8019662:	bd10      	pop	{r4, pc}

08019664 <memset>:
 8019664:	4402      	add	r2, r0
 8019666:	4603      	mov	r3, r0
 8019668:	4293      	cmp	r3, r2
 801966a:	d100      	bne.n	801966e <memset+0xa>
 801966c:	4770      	bx	lr
 801966e:	f803 1b01 	strb.w	r1, [r3], #1
 8019672:	e7f9      	b.n	8019668 <memset+0x4>

08019674 <iprintf>:
 8019674:	b40f      	push	{r0, r1, r2, r3}
 8019676:	4b0a      	ldr	r3, [pc, #40]	; (80196a0 <iprintf+0x2c>)
 8019678:	b513      	push	{r0, r1, r4, lr}
 801967a:	681c      	ldr	r4, [r3, #0]
 801967c:	b124      	cbz	r4, 8019688 <iprintf+0x14>
 801967e:	69a3      	ldr	r3, [r4, #24]
 8019680:	b913      	cbnz	r3, 8019688 <iprintf+0x14>
 8019682:	4620      	mov	r0, r4
 8019684:	f000 fa88 	bl	8019b98 <__sinit>
 8019688:	ab05      	add	r3, sp, #20
 801968a:	9a04      	ldr	r2, [sp, #16]
 801968c:	68a1      	ldr	r1, [r4, #8]
 801968e:	9301      	str	r3, [sp, #4]
 8019690:	4620      	mov	r0, r4
 8019692:	f000 fc91 	bl	8019fb8 <_vfiprintf_r>
 8019696:	b002      	add	sp, #8
 8019698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801969c:	b004      	add	sp, #16
 801969e:	4770      	bx	lr
 80196a0:	20000078 	.word	0x20000078

080196a4 <putchar>:
 80196a4:	4b09      	ldr	r3, [pc, #36]	; (80196cc <putchar+0x28>)
 80196a6:	b513      	push	{r0, r1, r4, lr}
 80196a8:	681c      	ldr	r4, [r3, #0]
 80196aa:	4601      	mov	r1, r0
 80196ac:	b134      	cbz	r4, 80196bc <putchar+0x18>
 80196ae:	69a3      	ldr	r3, [r4, #24]
 80196b0:	b923      	cbnz	r3, 80196bc <putchar+0x18>
 80196b2:	9001      	str	r0, [sp, #4]
 80196b4:	4620      	mov	r0, r4
 80196b6:	f000 fa6f 	bl	8019b98 <__sinit>
 80196ba:	9901      	ldr	r1, [sp, #4]
 80196bc:	68a2      	ldr	r2, [r4, #8]
 80196be:	4620      	mov	r0, r4
 80196c0:	b002      	add	sp, #8
 80196c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196c6:	f000 bf3b 	b.w	801a540 <_putc_r>
 80196ca:	bf00      	nop
 80196cc:	20000078 	.word	0x20000078

080196d0 <_puts_r>:
 80196d0:	b570      	push	{r4, r5, r6, lr}
 80196d2:	460e      	mov	r6, r1
 80196d4:	4605      	mov	r5, r0
 80196d6:	b118      	cbz	r0, 80196e0 <_puts_r+0x10>
 80196d8:	6983      	ldr	r3, [r0, #24]
 80196da:	b90b      	cbnz	r3, 80196e0 <_puts_r+0x10>
 80196dc:	f000 fa5c 	bl	8019b98 <__sinit>
 80196e0:	69ab      	ldr	r3, [r5, #24]
 80196e2:	68ac      	ldr	r4, [r5, #8]
 80196e4:	b913      	cbnz	r3, 80196ec <_puts_r+0x1c>
 80196e6:	4628      	mov	r0, r5
 80196e8:	f000 fa56 	bl	8019b98 <__sinit>
 80196ec:	4b2c      	ldr	r3, [pc, #176]	; (80197a0 <_puts_r+0xd0>)
 80196ee:	429c      	cmp	r4, r3
 80196f0:	d120      	bne.n	8019734 <_puts_r+0x64>
 80196f2:	686c      	ldr	r4, [r5, #4]
 80196f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196f6:	07db      	lsls	r3, r3, #31
 80196f8:	d405      	bmi.n	8019706 <_puts_r+0x36>
 80196fa:	89a3      	ldrh	r3, [r4, #12]
 80196fc:	0598      	lsls	r0, r3, #22
 80196fe:	d402      	bmi.n	8019706 <_puts_r+0x36>
 8019700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019702:	f000 fae7 	bl	8019cd4 <__retarget_lock_acquire_recursive>
 8019706:	89a3      	ldrh	r3, [r4, #12]
 8019708:	0719      	lsls	r1, r3, #28
 801970a:	d51d      	bpl.n	8019748 <_puts_r+0x78>
 801970c:	6923      	ldr	r3, [r4, #16]
 801970e:	b1db      	cbz	r3, 8019748 <_puts_r+0x78>
 8019710:	3e01      	subs	r6, #1
 8019712:	68a3      	ldr	r3, [r4, #8]
 8019714:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019718:	3b01      	subs	r3, #1
 801971a:	60a3      	str	r3, [r4, #8]
 801971c:	bb39      	cbnz	r1, 801976e <_puts_r+0x9e>
 801971e:	2b00      	cmp	r3, #0
 8019720:	da38      	bge.n	8019794 <_puts_r+0xc4>
 8019722:	4622      	mov	r2, r4
 8019724:	210a      	movs	r1, #10
 8019726:	4628      	mov	r0, r5
 8019728:	f000 f85c 	bl	80197e4 <__swbuf_r>
 801972c:	3001      	adds	r0, #1
 801972e:	d011      	beq.n	8019754 <_puts_r+0x84>
 8019730:	250a      	movs	r5, #10
 8019732:	e011      	b.n	8019758 <_puts_r+0x88>
 8019734:	4b1b      	ldr	r3, [pc, #108]	; (80197a4 <_puts_r+0xd4>)
 8019736:	429c      	cmp	r4, r3
 8019738:	d101      	bne.n	801973e <_puts_r+0x6e>
 801973a:	68ac      	ldr	r4, [r5, #8]
 801973c:	e7da      	b.n	80196f4 <_puts_r+0x24>
 801973e:	4b1a      	ldr	r3, [pc, #104]	; (80197a8 <_puts_r+0xd8>)
 8019740:	429c      	cmp	r4, r3
 8019742:	bf08      	it	eq
 8019744:	68ec      	ldreq	r4, [r5, #12]
 8019746:	e7d5      	b.n	80196f4 <_puts_r+0x24>
 8019748:	4621      	mov	r1, r4
 801974a:	4628      	mov	r0, r5
 801974c:	f000 f89c 	bl	8019888 <__swsetup_r>
 8019750:	2800      	cmp	r0, #0
 8019752:	d0dd      	beq.n	8019710 <_puts_r+0x40>
 8019754:	f04f 35ff 	mov.w	r5, #4294967295
 8019758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801975a:	07da      	lsls	r2, r3, #31
 801975c:	d405      	bmi.n	801976a <_puts_r+0x9a>
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	059b      	lsls	r3, r3, #22
 8019762:	d402      	bmi.n	801976a <_puts_r+0x9a>
 8019764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019766:	f000 fab6 	bl	8019cd6 <__retarget_lock_release_recursive>
 801976a:	4628      	mov	r0, r5
 801976c:	bd70      	pop	{r4, r5, r6, pc}
 801976e:	2b00      	cmp	r3, #0
 8019770:	da04      	bge.n	801977c <_puts_r+0xac>
 8019772:	69a2      	ldr	r2, [r4, #24]
 8019774:	429a      	cmp	r2, r3
 8019776:	dc06      	bgt.n	8019786 <_puts_r+0xb6>
 8019778:	290a      	cmp	r1, #10
 801977a:	d004      	beq.n	8019786 <_puts_r+0xb6>
 801977c:	6823      	ldr	r3, [r4, #0]
 801977e:	1c5a      	adds	r2, r3, #1
 8019780:	6022      	str	r2, [r4, #0]
 8019782:	7019      	strb	r1, [r3, #0]
 8019784:	e7c5      	b.n	8019712 <_puts_r+0x42>
 8019786:	4622      	mov	r2, r4
 8019788:	4628      	mov	r0, r5
 801978a:	f000 f82b 	bl	80197e4 <__swbuf_r>
 801978e:	3001      	adds	r0, #1
 8019790:	d1bf      	bne.n	8019712 <_puts_r+0x42>
 8019792:	e7df      	b.n	8019754 <_puts_r+0x84>
 8019794:	6823      	ldr	r3, [r4, #0]
 8019796:	250a      	movs	r5, #10
 8019798:	1c5a      	adds	r2, r3, #1
 801979a:	6022      	str	r2, [r4, #0]
 801979c:	701d      	strb	r5, [r3, #0]
 801979e:	e7db      	b.n	8019758 <_puts_r+0x88>
 80197a0:	0801ab6c 	.word	0x0801ab6c
 80197a4:	0801ab8c 	.word	0x0801ab8c
 80197a8:	0801ab4c 	.word	0x0801ab4c

080197ac <puts>:
 80197ac:	4b02      	ldr	r3, [pc, #8]	; (80197b8 <puts+0xc>)
 80197ae:	4601      	mov	r1, r0
 80197b0:	6818      	ldr	r0, [r3, #0]
 80197b2:	f7ff bf8d 	b.w	80196d0 <_puts_r>
 80197b6:	bf00      	nop
 80197b8:	20000078 	.word	0x20000078

080197bc <strncpy>:
 80197bc:	b510      	push	{r4, lr}
 80197be:	3901      	subs	r1, #1
 80197c0:	4603      	mov	r3, r0
 80197c2:	b132      	cbz	r2, 80197d2 <strncpy+0x16>
 80197c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80197c8:	f803 4b01 	strb.w	r4, [r3], #1
 80197cc:	3a01      	subs	r2, #1
 80197ce:	2c00      	cmp	r4, #0
 80197d0:	d1f7      	bne.n	80197c2 <strncpy+0x6>
 80197d2:	441a      	add	r2, r3
 80197d4:	2100      	movs	r1, #0
 80197d6:	4293      	cmp	r3, r2
 80197d8:	d100      	bne.n	80197dc <strncpy+0x20>
 80197da:	bd10      	pop	{r4, pc}
 80197dc:	f803 1b01 	strb.w	r1, [r3], #1
 80197e0:	e7f9      	b.n	80197d6 <strncpy+0x1a>
	...

080197e4 <__swbuf_r>:
 80197e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197e6:	460e      	mov	r6, r1
 80197e8:	4614      	mov	r4, r2
 80197ea:	4605      	mov	r5, r0
 80197ec:	b118      	cbz	r0, 80197f6 <__swbuf_r+0x12>
 80197ee:	6983      	ldr	r3, [r0, #24]
 80197f0:	b90b      	cbnz	r3, 80197f6 <__swbuf_r+0x12>
 80197f2:	f000 f9d1 	bl	8019b98 <__sinit>
 80197f6:	4b21      	ldr	r3, [pc, #132]	; (801987c <__swbuf_r+0x98>)
 80197f8:	429c      	cmp	r4, r3
 80197fa:	d12b      	bne.n	8019854 <__swbuf_r+0x70>
 80197fc:	686c      	ldr	r4, [r5, #4]
 80197fe:	69a3      	ldr	r3, [r4, #24]
 8019800:	60a3      	str	r3, [r4, #8]
 8019802:	89a3      	ldrh	r3, [r4, #12]
 8019804:	071a      	lsls	r2, r3, #28
 8019806:	d52f      	bpl.n	8019868 <__swbuf_r+0x84>
 8019808:	6923      	ldr	r3, [r4, #16]
 801980a:	b36b      	cbz	r3, 8019868 <__swbuf_r+0x84>
 801980c:	6923      	ldr	r3, [r4, #16]
 801980e:	6820      	ldr	r0, [r4, #0]
 8019810:	1ac0      	subs	r0, r0, r3
 8019812:	6963      	ldr	r3, [r4, #20]
 8019814:	b2f6      	uxtb	r6, r6
 8019816:	4283      	cmp	r3, r0
 8019818:	4637      	mov	r7, r6
 801981a:	dc04      	bgt.n	8019826 <__swbuf_r+0x42>
 801981c:	4621      	mov	r1, r4
 801981e:	4628      	mov	r0, r5
 8019820:	f000 f926 	bl	8019a70 <_fflush_r>
 8019824:	bb30      	cbnz	r0, 8019874 <__swbuf_r+0x90>
 8019826:	68a3      	ldr	r3, [r4, #8]
 8019828:	3b01      	subs	r3, #1
 801982a:	60a3      	str	r3, [r4, #8]
 801982c:	6823      	ldr	r3, [r4, #0]
 801982e:	1c5a      	adds	r2, r3, #1
 8019830:	6022      	str	r2, [r4, #0]
 8019832:	701e      	strb	r6, [r3, #0]
 8019834:	6963      	ldr	r3, [r4, #20]
 8019836:	3001      	adds	r0, #1
 8019838:	4283      	cmp	r3, r0
 801983a:	d004      	beq.n	8019846 <__swbuf_r+0x62>
 801983c:	89a3      	ldrh	r3, [r4, #12]
 801983e:	07db      	lsls	r3, r3, #31
 8019840:	d506      	bpl.n	8019850 <__swbuf_r+0x6c>
 8019842:	2e0a      	cmp	r6, #10
 8019844:	d104      	bne.n	8019850 <__swbuf_r+0x6c>
 8019846:	4621      	mov	r1, r4
 8019848:	4628      	mov	r0, r5
 801984a:	f000 f911 	bl	8019a70 <_fflush_r>
 801984e:	b988      	cbnz	r0, 8019874 <__swbuf_r+0x90>
 8019850:	4638      	mov	r0, r7
 8019852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019854:	4b0a      	ldr	r3, [pc, #40]	; (8019880 <__swbuf_r+0x9c>)
 8019856:	429c      	cmp	r4, r3
 8019858:	d101      	bne.n	801985e <__swbuf_r+0x7a>
 801985a:	68ac      	ldr	r4, [r5, #8]
 801985c:	e7cf      	b.n	80197fe <__swbuf_r+0x1a>
 801985e:	4b09      	ldr	r3, [pc, #36]	; (8019884 <__swbuf_r+0xa0>)
 8019860:	429c      	cmp	r4, r3
 8019862:	bf08      	it	eq
 8019864:	68ec      	ldreq	r4, [r5, #12]
 8019866:	e7ca      	b.n	80197fe <__swbuf_r+0x1a>
 8019868:	4621      	mov	r1, r4
 801986a:	4628      	mov	r0, r5
 801986c:	f000 f80c 	bl	8019888 <__swsetup_r>
 8019870:	2800      	cmp	r0, #0
 8019872:	d0cb      	beq.n	801980c <__swbuf_r+0x28>
 8019874:	f04f 37ff 	mov.w	r7, #4294967295
 8019878:	e7ea      	b.n	8019850 <__swbuf_r+0x6c>
 801987a:	bf00      	nop
 801987c:	0801ab6c 	.word	0x0801ab6c
 8019880:	0801ab8c 	.word	0x0801ab8c
 8019884:	0801ab4c 	.word	0x0801ab4c

08019888 <__swsetup_r>:
 8019888:	4b32      	ldr	r3, [pc, #200]	; (8019954 <__swsetup_r+0xcc>)
 801988a:	b570      	push	{r4, r5, r6, lr}
 801988c:	681d      	ldr	r5, [r3, #0]
 801988e:	4606      	mov	r6, r0
 8019890:	460c      	mov	r4, r1
 8019892:	b125      	cbz	r5, 801989e <__swsetup_r+0x16>
 8019894:	69ab      	ldr	r3, [r5, #24]
 8019896:	b913      	cbnz	r3, 801989e <__swsetup_r+0x16>
 8019898:	4628      	mov	r0, r5
 801989a:	f000 f97d 	bl	8019b98 <__sinit>
 801989e:	4b2e      	ldr	r3, [pc, #184]	; (8019958 <__swsetup_r+0xd0>)
 80198a0:	429c      	cmp	r4, r3
 80198a2:	d10f      	bne.n	80198c4 <__swsetup_r+0x3c>
 80198a4:	686c      	ldr	r4, [r5, #4]
 80198a6:	89a3      	ldrh	r3, [r4, #12]
 80198a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198ac:	0719      	lsls	r1, r3, #28
 80198ae:	d42c      	bmi.n	801990a <__swsetup_r+0x82>
 80198b0:	06dd      	lsls	r5, r3, #27
 80198b2:	d411      	bmi.n	80198d8 <__swsetup_r+0x50>
 80198b4:	2309      	movs	r3, #9
 80198b6:	6033      	str	r3, [r6, #0]
 80198b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80198bc:	81a3      	strh	r3, [r4, #12]
 80198be:	f04f 30ff 	mov.w	r0, #4294967295
 80198c2:	e03e      	b.n	8019942 <__swsetup_r+0xba>
 80198c4:	4b25      	ldr	r3, [pc, #148]	; (801995c <__swsetup_r+0xd4>)
 80198c6:	429c      	cmp	r4, r3
 80198c8:	d101      	bne.n	80198ce <__swsetup_r+0x46>
 80198ca:	68ac      	ldr	r4, [r5, #8]
 80198cc:	e7eb      	b.n	80198a6 <__swsetup_r+0x1e>
 80198ce:	4b24      	ldr	r3, [pc, #144]	; (8019960 <__swsetup_r+0xd8>)
 80198d0:	429c      	cmp	r4, r3
 80198d2:	bf08      	it	eq
 80198d4:	68ec      	ldreq	r4, [r5, #12]
 80198d6:	e7e6      	b.n	80198a6 <__swsetup_r+0x1e>
 80198d8:	0758      	lsls	r0, r3, #29
 80198da:	d512      	bpl.n	8019902 <__swsetup_r+0x7a>
 80198dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198de:	b141      	cbz	r1, 80198f2 <__swsetup_r+0x6a>
 80198e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198e4:	4299      	cmp	r1, r3
 80198e6:	d002      	beq.n	80198ee <__swsetup_r+0x66>
 80198e8:	4630      	mov	r0, r6
 80198ea:	f000 fa5b 	bl	8019da4 <_free_r>
 80198ee:	2300      	movs	r3, #0
 80198f0:	6363      	str	r3, [r4, #52]	; 0x34
 80198f2:	89a3      	ldrh	r3, [r4, #12]
 80198f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198f8:	81a3      	strh	r3, [r4, #12]
 80198fa:	2300      	movs	r3, #0
 80198fc:	6063      	str	r3, [r4, #4]
 80198fe:	6923      	ldr	r3, [r4, #16]
 8019900:	6023      	str	r3, [r4, #0]
 8019902:	89a3      	ldrh	r3, [r4, #12]
 8019904:	f043 0308 	orr.w	r3, r3, #8
 8019908:	81a3      	strh	r3, [r4, #12]
 801990a:	6923      	ldr	r3, [r4, #16]
 801990c:	b94b      	cbnz	r3, 8019922 <__swsetup_r+0x9a>
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019918:	d003      	beq.n	8019922 <__swsetup_r+0x9a>
 801991a:	4621      	mov	r1, r4
 801991c:	4630      	mov	r0, r6
 801991e:	f000 fa01 	bl	8019d24 <__smakebuf_r>
 8019922:	89a0      	ldrh	r0, [r4, #12]
 8019924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019928:	f010 0301 	ands.w	r3, r0, #1
 801992c:	d00a      	beq.n	8019944 <__swsetup_r+0xbc>
 801992e:	2300      	movs	r3, #0
 8019930:	60a3      	str	r3, [r4, #8]
 8019932:	6963      	ldr	r3, [r4, #20]
 8019934:	425b      	negs	r3, r3
 8019936:	61a3      	str	r3, [r4, #24]
 8019938:	6923      	ldr	r3, [r4, #16]
 801993a:	b943      	cbnz	r3, 801994e <__swsetup_r+0xc6>
 801993c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019940:	d1ba      	bne.n	80198b8 <__swsetup_r+0x30>
 8019942:	bd70      	pop	{r4, r5, r6, pc}
 8019944:	0781      	lsls	r1, r0, #30
 8019946:	bf58      	it	pl
 8019948:	6963      	ldrpl	r3, [r4, #20]
 801994a:	60a3      	str	r3, [r4, #8]
 801994c:	e7f4      	b.n	8019938 <__swsetup_r+0xb0>
 801994e:	2000      	movs	r0, #0
 8019950:	e7f7      	b.n	8019942 <__swsetup_r+0xba>
 8019952:	bf00      	nop
 8019954:	20000078 	.word	0x20000078
 8019958:	0801ab6c 	.word	0x0801ab6c
 801995c:	0801ab8c 	.word	0x0801ab8c
 8019960:	0801ab4c 	.word	0x0801ab4c

08019964 <__sflush_r>:
 8019964:	898a      	ldrh	r2, [r1, #12]
 8019966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801996a:	4605      	mov	r5, r0
 801996c:	0710      	lsls	r0, r2, #28
 801996e:	460c      	mov	r4, r1
 8019970:	d458      	bmi.n	8019a24 <__sflush_r+0xc0>
 8019972:	684b      	ldr	r3, [r1, #4]
 8019974:	2b00      	cmp	r3, #0
 8019976:	dc05      	bgt.n	8019984 <__sflush_r+0x20>
 8019978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801997a:	2b00      	cmp	r3, #0
 801997c:	dc02      	bgt.n	8019984 <__sflush_r+0x20>
 801997e:	2000      	movs	r0, #0
 8019980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019986:	2e00      	cmp	r6, #0
 8019988:	d0f9      	beq.n	801997e <__sflush_r+0x1a>
 801998a:	2300      	movs	r3, #0
 801998c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019990:	682f      	ldr	r7, [r5, #0]
 8019992:	602b      	str	r3, [r5, #0]
 8019994:	d032      	beq.n	80199fc <__sflush_r+0x98>
 8019996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019998:	89a3      	ldrh	r3, [r4, #12]
 801999a:	075a      	lsls	r2, r3, #29
 801999c:	d505      	bpl.n	80199aa <__sflush_r+0x46>
 801999e:	6863      	ldr	r3, [r4, #4]
 80199a0:	1ac0      	subs	r0, r0, r3
 80199a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199a4:	b10b      	cbz	r3, 80199aa <__sflush_r+0x46>
 80199a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199a8:	1ac0      	subs	r0, r0, r3
 80199aa:	2300      	movs	r3, #0
 80199ac:	4602      	mov	r2, r0
 80199ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199b0:	6a21      	ldr	r1, [r4, #32]
 80199b2:	4628      	mov	r0, r5
 80199b4:	47b0      	blx	r6
 80199b6:	1c43      	adds	r3, r0, #1
 80199b8:	89a3      	ldrh	r3, [r4, #12]
 80199ba:	d106      	bne.n	80199ca <__sflush_r+0x66>
 80199bc:	6829      	ldr	r1, [r5, #0]
 80199be:	291d      	cmp	r1, #29
 80199c0:	d82c      	bhi.n	8019a1c <__sflush_r+0xb8>
 80199c2:	4a2a      	ldr	r2, [pc, #168]	; (8019a6c <__sflush_r+0x108>)
 80199c4:	40ca      	lsrs	r2, r1
 80199c6:	07d6      	lsls	r6, r2, #31
 80199c8:	d528      	bpl.n	8019a1c <__sflush_r+0xb8>
 80199ca:	2200      	movs	r2, #0
 80199cc:	6062      	str	r2, [r4, #4]
 80199ce:	04d9      	lsls	r1, r3, #19
 80199d0:	6922      	ldr	r2, [r4, #16]
 80199d2:	6022      	str	r2, [r4, #0]
 80199d4:	d504      	bpl.n	80199e0 <__sflush_r+0x7c>
 80199d6:	1c42      	adds	r2, r0, #1
 80199d8:	d101      	bne.n	80199de <__sflush_r+0x7a>
 80199da:	682b      	ldr	r3, [r5, #0]
 80199dc:	b903      	cbnz	r3, 80199e0 <__sflush_r+0x7c>
 80199de:	6560      	str	r0, [r4, #84]	; 0x54
 80199e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199e2:	602f      	str	r7, [r5, #0]
 80199e4:	2900      	cmp	r1, #0
 80199e6:	d0ca      	beq.n	801997e <__sflush_r+0x1a>
 80199e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199ec:	4299      	cmp	r1, r3
 80199ee:	d002      	beq.n	80199f6 <__sflush_r+0x92>
 80199f0:	4628      	mov	r0, r5
 80199f2:	f000 f9d7 	bl	8019da4 <_free_r>
 80199f6:	2000      	movs	r0, #0
 80199f8:	6360      	str	r0, [r4, #52]	; 0x34
 80199fa:	e7c1      	b.n	8019980 <__sflush_r+0x1c>
 80199fc:	6a21      	ldr	r1, [r4, #32]
 80199fe:	2301      	movs	r3, #1
 8019a00:	4628      	mov	r0, r5
 8019a02:	47b0      	blx	r6
 8019a04:	1c41      	adds	r1, r0, #1
 8019a06:	d1c7      	bne.n	8019998 <__sflush_r+0x34>
 8019a08:	682b      	ldr	r3, [r5, #0]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d0c4      	beq.n	8019998 <__sflush_r+0x34>
 8019a0e:	2b1d      	cmp	r3, #29
 8019a10:	d001      	beq.n	8019a16 <__sflush_r+0xb2>
 8019a12:	2b16      	cmp	r3, #22
 8019a14:	d101      	bne.n	8019a1a <__sflush_r+0xb6>
 8019a16:	602f      	str	r7, [r5, #0]
 8019a18:	e7b1      	b.n	801997e <__sflush_r+0x1a>
 8019a1a:	89a3      	ldrh	r3, [r4, #12]
 8019a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a20:	81a3      	strh	r3, [r4, #12]
 8019a22:	e7ad      	b.n	8019980 <__sflush_r+0x1c>
 8019a24:	690f      	ldr	r7, [r1, #16]
 8019a26:	2f00      	cmp	r7, #0
 8019a28:	d0a9      	beq.n	801997e <__sflush_r+0x1a>
 8019a2a:	0793      	lsls	r3, r2, #30
 8019a2c:	680e      	ldr	r6, [r1, #0]
 8019a2e:	bf08      	it	eq
 8019a30:	694b      	ldreq	r3, [r1, #20]
 8019a32:	600f      	str	r7, [r1, #0]
 8019a34:	bf18      	it	ne
 8019a36:	2300      	movne	r3, #0
 8019a38:	eba6 0807 	sub.w	r8, r6, r7
 8019a3c:	608b      	str	r3, [r1, #8]
 8019a3e:	f1b8 0f00 	cmp.w	r8, #0
 8019a42:	dd9c      	ble.n	801997e <__sflush_r+0x1a>
 8019a44:	6a21      	ldr	r1, [r4, #32]
 8019a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a48:	4643      	mov	r3, r8
 8019a4a:	463a      	mov	r2, r7
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	47b0      	blx	r6
 8019a50:	2800      	cmp	r0, #0
 8019a52:	dc06      	bgt.n	8019a62 <__sflush_r+0xfe>
 8019a54:	89a3      	ldrh	r3, [r4, #12]
 8019a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a5a:	81a3      	strh	r3, [r4, #12]
 8019a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a60:	e78e      	b.n	8019980 <__sflush_r+0x1c>
 8019a62:	4407      	add	r7, r0
 8019a64:	eba8 0800 	sub.w	r8, r8, r0
 8019a68:	e7e9      	b.n	8019a3e <__sflush_r+0xda>
 8019a6a:	bf00      	nop
 8019a6c:	20400001 	.word	0x20400001

08019a70 <_fflush_r>:
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	690b      	ldr	r3, [r1, #16]
 8019a74:	4605      	mov	r5, r0
 8019a76:	460c      	mov	r4, r1
 8019a78:	b913      	cbnz	r3, 8019a80 <_fflush_r+0x10>
 8019a7a:	2500      	movs	r5, #0
 8019a7c:	4628      	mov	r0, r5
 8019a7e:	bd38      	pop	{r3, r4, r5, pc}
 8019a80:	b118      	cbz	r0, 8019a8a <_fflush_r+0x1a>
 8019a82:	6983      	ldr	r3, [r0, #24]
 8019a84:	b90b      	cbnz	r3, 8019a8a <_fflush_r+0x1a>
 8019a86:	f000 f887 	bl	8019b98 <__sinit>
 8019a8a:	4b14      	ldr	r3, [pc, #80]	; (8019adc <_fflush_r+0x6c>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	d11b      	bne.n	8019ac8 <_fflush_r+0x58>
 8019a90:	686c      	ldr	r4, [r5, #4]
 8019a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d0ef      	beq.n	8019a7a <_fflush_r+0xa>
 8019a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a9c:	07d0      	lsls	r0, r2, #31
 8019a9e:	d404      	bmi.n	8019aaa <_fflush_r+0x3a>
 8019aa0:	0599      	lsls	r1, r3, #22
 8019aa2:	d402      	bmi.n	8019aaa <_fflush_r+0x3a>
 8019aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019aa6:	f000 f915 	bl	8019cd4 <__retarget_lock_acquire_recursive>
 8019aaa:	4628      	mov	r0, r5
 8019aac:	4621      	mov	r1, r4
 8019aae:	f7ff ff59 	bl	8019964 <__sflush_r>
 8019ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ab4:	07da      	lsls	r2, r3, #31
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	d4e0      	bmi.n	8019a7c <_fflush_r+0xc>
 8019aba:	89a3      	ldrh	r3, [r4, #12]
 8019abc:	059b      	lsls	r3, r3, #22
 8019abe:	d4dd      	bmi.n	8019a7c <_fflush_r+0xc>
 8019ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ac2:	f000 f908 	bl	8019cd6 <__retarget_lock_release_recursive>
 8019ac6:	e7d9      	b.n	8019a7c <_fflush_r+0xc>
 8019ac8:	4b05      	ldr	r3, [pc, #20]	; (8019ae0 <_fflush_r+0x70>)
 8019aca:	429c      	cmp	r4, r3
 8019acc:	d101      	bne.n	8019ad2 <_fflush_r+0x62>
 8019ace:	68ac      	ldr	r4, [r5, #8]
 8019ad0:	e7df      	b.n	8019a92 <_fflush_r+0x22>
 8019ad2:	4b04      	ldr	r3, [pc, #16]	; (8019ae4 <_fflush_r+0x74>)
 8019ad4:	429c      	cmp	r4, r3
 8019ad6:	bf08      	it	eq
 8019ad8:	68ec      	ldreq	r4, [r5, #12]
 8019ada:	e7da      	b.n	8019a92 <_fflush_r+0x22>
 8019adc:	0801ab6c 	.word	0x0801ab6c
 8019ae0:	0801ab8c 	.word	0x0801ab8c
 8019ae4:	0801ab4c 	.word	0x0801ab4c

08019ae8 <std>:
 8019ae8:	2300      	movs	r3, #0
 8019aea:	b510      	push	{r4, lr}
 8019aec:	4604      	mov	r4, r0
 8019aee:	e9c0 3300 	strd	r3, r3, [r0]
 8019af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019af6:	6083      	str	r3, [r0, #8]
 8019af8:	8181      	strh	r1, [r0, #12]
 8019afa:	6643      	str	r3, [r0, #100]	; 0x64
 8019afc:	81c2      	strh	r2, [r0, #14]
 8019afe:	6183      	str	r3, [r0, #24]
 8019b00:	4619      	mov	r1, r3
 8019b02:	2208      	movs	r2, #8
 8019b04:	305c      	adds	r0, #92	; 0x5c
 8019b06:	f7ff fdad 	bl	8019664 <memset>
 8019b0a:	4b05      	ldr	r3, [pc, #20]	; (8019b20 <std+0x38>)
 8019b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8019b0e:	4b05      	ldr	r3, [pc, #20]	; (8019b24 <std+0x3c>)
 8019b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b12:	4b05      	ldr	r3, [pc, #20]	; (8019b28 <std+0x40>)
 8019b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b16:	4b05      	ldr	r3, [pc, #20]	; (8019b2c <std+0x44>)
 8019b18:	6224      	str	r4, [r4, #32]
 8019b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8019b1c:	bd10      	pop	{r4, pc}
 8019b1e:	bf00      	nop
 8019b20:	0801a5f1 	.word	0x0801a5f1
 8019b24:	0801a613 	.word	0x0801a613
 8019b28:	0801a64b 	.word	0x0801a64b
 8019b2c:	0801a66f 	.word	0x0801a66f

08019b30 <_cleanup_r>:
 8019b30:	4901      	ldr	r1, [pc, #4]	; (8019b38 <_cleanup_r+0x8>)
 8019b32:	f000 b8af 	b.w	8019c94 <_fwalk_reent>
 8019b36:	bf00      	nop
 8019b38:	08019a71 	.word	0x08019a71

08019b3c <__sfmoreglue>:
 8019b3c:	b570      	push	{r4, r5, r6, lr}
 8019b3e:	2268      	movs	r2, #104	; 0x68
 8019b40:	1e4d      	subs	r5, r1, #1
 8019b42:	4355      	muls	r5, r2
 8019b44:	460e      	mov	r6, r1
 8019b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b4a:	f000 f997 	bl	8019e7c <_malloc_r>
 8019b4e:	4604      	mov	r4, r0
 8019b50:	b140      	cbz	r0, 8019b64 <__sfmoreglue+0x28>
 8019b52:	2100      	movs	r1, #0
 8019b54:	e9c0 1600 	strd	r1, r6, [r0]
 8019b58:	300c      	adds	r0, #12
 8019b5a:	60a0      	str	r0, [r4, #8]
 8019b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b60:	f7ff fd80 	bl	8019664 <memset>
 8019b64:	4620      	mov	r0, r4
 8019b66:	bd70      	pop	{r4, r5, r6, pc}

08019b68 <__sfp_lock_acquire>:
 8019b68:	4801      	ldr	r0, [pc, #4]	; (8019b70 <__sfp_lock_acquire+0x8>)
 8019b6a:	f000 b8b3 	b.w	8019cd4 <__retarget_lock_acquire_recursive>
 8019b6e:	bf00      	nop
 8019b70:	2000862d 	.word	0x2000862d

08019b74 <__sfp_lock_release>:
 8019b74:	4801      	ldr	r0, [pc, #4]	; (8019b7c <__sfp_lock_release+0x8>)
 8019b76:	f000 b8ae 	b.w	8019cd6 <__retarget_lock_release_recursive>
 8019b7a:	bf00      	nop
 8019b7c:	2000862d 	.word	0x2000862d

08019b80 <__sinit_lock_acquire>:
 8019b80:	4801      	ldr	r0, [pc, #4]	; (8019b88 <__sinit_lock_acquire+0x8>)
 8019b82:	f000 b8a7 	b.w	8019cd4 <__retarget_lock_acquire_recursive>
 8019b86:	bf00      	nop
 8019b88:	2000862e 	.word	0x2000862e

08019b8c <__sinit_lock_release>:
 8019b8c:	4801      	ldr	r0, [pc, #4]	; (8019b94 <__sinit_lock_release+0x8>)
 8019b8e:	f000 b8a2 	b.w	8019cd6 <__retarget_lock_release_recursive>
 8019b92:	bf00      	nop
 8019b94:	2000862e 	.word	0x2000862e

08019b98 <__sinit>:
 8019b98:	b510      	push	{r4, lr}
 8019b9a:	4604      	mov	r4, r0
 8019b9c:	f7ff fff0 	bl	8019b80 <__sinit_lock_acquire>
 8019ba0:	69a3      	ldr	r3, [r4, #24]
 8019ba2:	b11b      	cbz	r3, 8019bac <__sinit+0x14>
 8019ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ba8:	f7ff bff0 	b.w	8019b8c <__sinit_lock_release>
 8019bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8019bb2:	4b13      	ldr	r3, [pc, #76]	; (8019c00 <__sinit+0x68>)
 8019bb4:	4a13      	ldr	r2, [pc, #76]	; (8019c04 <__sinit+0x6c>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8019bba:	42a3      	cmp	r3, r4
 8019bbc:	bf04      	itt	eq
 8019bbe:	2301      	moveq	r3, #1
 8019bc0:	61a3      	streq	r3, [r4, #24]
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	f000 f820 	bl	8019c08 <__sfp>
 8019bc8:	6060      	str	r0, [r4, #4]
 8019bca:	4620      	mov	r0, r4
 8019bcc:	f000 f81c 	bl	8019c08 <__sfp>
 8019bd0:	60a0      	str	r0, [r4, #8]
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	f000 f818 	bl	8019c08 <__sfp>
 8019bd8:	2200      	movs	r2, #0
 8019bda:	60e0      	str	r0, [r4, #12]
 8019bdc:	2104      	movs	r1, #4
 8019bde:	6860      	ldr	r0, [r4, #4]
 8019be0:	f7ff ff82 	bl	8019ae8 <std>
 8019be4:	68a0      	ldr	r0, [r4, #8]
 8019be6:	2201      	movs	r2, #1
 8019be8:	2109      	movs	r1, #9
 8019bea:	f7ff ff7d 	bl	8019ae8 <std>
 8019bee:	68e0      	ldr	r0, [r4, #12]
 8019bf0:	2202      	movs	r2, #2
 8019bf2:	2112      	movs	r1, #18
 8019bf4:	f7ff ff78 	bl	8019ae8 <std>
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	61a3      	str	r3, [r4, #24]
 8019bfc:	e7d2      	b.n	8019ba4 <__sinit+0xc>
 8019bfe:	bf00      	nop
 8019c00:	0801ab48 	.word	0x0801ab48
 8019c04:	08019b31 	.word	0x08019b31

08019c08 <__sfp>:
 8019c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0a:	4607      	mov	r7, r0
 8019c0c:	f7ff ffac 	bl	8019b68 <__sfp_lock_acquire>
 8019c10:	4b1e      	ldr	r3, [pc, #120]	; (8019c8c <__sfp+0x84>)
 8019c12:	681e      	ldr	r6, [r3, #0]
 8019c14:	69b3      	ldr	r3, [r6, #24]
 8019c16:	b913      	cbnz	r3, 8019c1e <__sfp+0x16>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	f7ff ffbd 	bl	8019b98 <__sinit>
 8019c1e:	3648      	adds	r6, #72	; 0x48
 8019c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019c24:	3b01      	subs	r3, #1
 8019c26:	d503      	bpl.n	8019c30 <__sfp+0x28>
 8019c28:	6833      	ldr	r3, [r6, #0]
 8019c2a:	b30b      	cbz	r3, 8019c70 <__sfp+0x68>
 8019c2c:	6836      	ldr	r6, [r6, #0]
 8019c2e:	e7f7      	b.n	8019c20 <__sfp+0x18>
 8019c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c34:	b9d5      	cbnz	r5, 8019c6c <__sfp+0x64>
 8019c36:	4b16      	ldr	r3, [pc, #88]	; (8019c90 <__sfp+0x88>)
 8019c38:	60e3      	str	r3, [r4, #12]
 8019c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8019c40:	f000 f847 	bl	8019cd2 <__retarget_lock_init_recursive>
 8019c44:	f7ff ff96 	bl	8019b74 <__sfp_lock_release>
 8019c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019c50:	6025      	str	r5, [r4, #0]
 8019c52:	61a5      	str	r5, [r4, #24]
 8019c54:	2208      	movs	r2, #8
 8019c56:	4629      	mov	r1, r5
 8019c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c5c:	f7ff fd02 	bl	8019664 <memset>
 8019c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c68:	4620      	mov	r0, r4
 8019c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c6c:	3468      	adds	r4, #104	; 0x68
 8019c6e:	e7d9      	b.n	8019c24 <__sfp+0x1c>
 8019c70:	2104      	movs	r1, #4
 8019c72:	4638      	mov	r0, r7
 8019c74:	f7ff ff62 	bl	8019b3c <__sfmoreglue>
 8019c78:	4604      	mov	r4, r0
 8019c7a:	6030      	str	r0, [r6, #0]
 8019c7c:	2800      	cmp	r0, #0
 8019c7e:	d1d5      	bne.n	8019c2c <__sfp+0x24>
 8019c80:	f7ff ff78 	bl	8019b74 <__sfp_lock_release>
 8019c84:	230c      	movs	r3, #12
 8019c86:	603b      	str	r3, [r7, #0]
 8019c88:	e7ee      	b.n	8019c68 <__sfp+0x60>
 8019c8a:	bf00      	nop
 8019c8c:	0801ab48 	.word	0x0801ab48
 8019c90:	ffff0001 	.word	0xffff0001

08019c94 <_fwalk_reent>:
 8019c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c98:	4606      	mov	r6, r0
 8019c9a:	4688      	mov	r8, r1
 8019c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019ca0:	2700      	movs	r7, #0
 8019ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8019caa:	d505      	bpl.n	8019cb8 <_fwalk_reent+0x24>
 8019cac:	6824      	ldr	r4, [r4, #0]
 8019cae:	2c00      	cmp	r4, #0
 8019cb0:	d1f7      	bne.n	8019ca2 <_fwalk_reent+0xe>
 8019cb2:	4638      	mov	r0, r7
 8019cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cb8:	89ab      	ldrh	r3, [r5, #12]
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d907      	bls.n	8019cce <_fwalk_reent+0x3a>
 8019cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	d003      	beq.n	8019cce <_fwalk_reent+0x3a>
 8019cc6:	4629      	mov	r1, r5
 8019cc8:	4630      	mov	r0, r6
 8019cca:	47c0      	blx	r8
 8019ccc:	4307      	orrs	r7, r0
 8019cce:	3568      	adds	r5, #104	; 0x68
 8019cd0:	e7e9      	b.n	8019ca6 <_fwalk_reent+0x12>

08019cd2 <__retarget_lock_init_recursive>:
 8019cd2:	4770      	bx	lr

08019cd4 <__retarget_lock_acquire_recursive>:
 8019cd4:	4770      	bx	lr

08019cd6 <__retarget_lock_release_recursive>:
 8019cd6:	4770      	bx	lr

08019cd8 <__swhatbuf_r>:
 8019cd8:	b570      	push	{r4, r5, r6, lr}
 8019cda:	460e      	mov	r6, r1
 8019cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ce0:	2900      	cmp	r1, #0
 8019ce2:	b096      	sub	sp, #88	; 0x58
 8019ce4:	4614      	mov	r4, r2
 8019ce6:	461d      	mov	r5, r3
 8019ce8:	da08      	bge.n	8019cfc <__swhatbuf_r+0x24>
 8019cea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019cee:	2200      	movs	r2, #0
 8019cf0:	602a      	str	r2, [r5, #0]
 8019cf2:	061a      	lsls	r2, r3, #24
 8019cf4:	d410      	bmi.n	8019d18 <__swhatbuf_r+0x40>
 8019cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019cfa:	e00e      	b.n	8019d1a <__swhatbuf_r+0x42>
 8019cfc:	466a      	mov	r2, sp
 8019cfe:	f000 fcdd 	bl	801a6bc <_fstat_r>
 8019d02:	2800      	cmp	r0, #0
 8019d04:	dbf1      	blt.n	8019cea <__swhatbuf_r+0x12>
 8019d06:	9a01      	ldr	r2, [sp, #4]
 8019d08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019d0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019d10:	425a      	negs	r2, r3
 8019d12:	415a      	adcs	r2, r3
 8019d14:	602a      	str	r2, [r5, #0]
 8019d16:	e7ee      	b.n	8019cf6 <__swhatbuf_r+0x1e>
 8019d18:	2340      	movs	r3, #64	; 0x40
 8019d1a:	2000      	movs	r0, #0
 8019d1c:	6023      	str	r3, [r4, #0]
 8019d1e:	b016      	add	sp, #88	; 0x58
 8019d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08019d24 <__smakebuf_r>:
 8019d24:	898b      	ldrh	r3, [r1, #12]
 8019d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d28:	079d      	lsls	r5, r3, #30
 8019d2a:	4606      	mov	r6, r0
 8019d2c:	460c      	mov	r4, r1
 8019d2e:	d507      	bpl.n	8019d40 <__smakebuf_r+0x1c>
 8019d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019d34:	6023      	str	r3, [r4, #0]
 8019d36:	6123      	str	r3, [r4, #16]
 8019d38:	2301      	movs	r3, #1
 8019d3a:	6163      	str	r3, [r4, #20]
 8019d3c:	b002      	add	sp, #8
 8019d3e:	bd70      	pop	{r4, r5, r6, pc}
 8019d40:	ab01      	add	r3, sp, #4
 8019d42:	466a      	mov	r2, sp
 8019d44:	f7ff ffc8 	bl	8019cd8 <__swhatbuf_r>
 8019d48:	9900      	ldr	r1, [sp, #0]
 8019d4a:	4605      	mov	r5, r0
 8019d4c:	4630      	mov	r0, r6
 8019d4e:	f000 f895 	bl	8019e7c <_malloc_r>
 8019d52:	b948      	cbnz	r0, 8019d68 <__smakebuf_r+0x44>
 8019d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d58:	059a      	lsls	r2, r3, #22
 8019d5a:	d4ef      	bmi.n	8019d3c <__smakebuf_r+0x18>
 8019d5c:	f023 0303 	bic.w	r3, r3, #3
 8019d60:	f043 0302 	orr.w	r3, r3, #2
 8019d64:	81a3      	strh	r3, [r4, #12]
 8019d66:	e7e3      	b.n	8019d30 <__smakebuf_r+0xc>
 8019d68:	4b0d      	ldr	r3, [pc, #52]	; (8019da0 <__smakebuf_r+0x7c>)
 8019d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019d6c:	89a3      	ldrh	r3, [r4, #12]
 8019d6e:	6020      	str	r0, [r4, #0]
 8019d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d74:	81a3      	strh	r3, [r4, #12]
 8019d76:	9b00      	ldr	r3, [sp, #0]
 8019d78:	6163      	str	r3, [r4, #20]
 8019d7a:	9b01      	ldr	r3, [sp, #4]
 8019d7c:	6120      	str	r0, [r4, #16]
 8019d7e:	b15b      	cbz	r3, 8019d98 <__smakebuf_r+0x74>
 8019d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d84:	4630      	mov	r0, r6
 8019d86:	f000 fcab 	bl	801a6e0 <_isatty_r>
 8019d8a:	b128      	cbz	r0, 8019d98 <__smakebuf_r+0x74>
 8019d8c:	89a3      	ldrh	r3, [r4, #12]
 8019d8e:	f023 0303 	bic.w	r3, r3, #3
 8019d92:	f043 0301 	orr.w	r3, r3, #1
 8019d96:	81a3      	strh	r3, [r4, #12]
 8019d98:	89a0      	ldrh	r0, [r4, #12]
 8019d9a:	4305      	orrs	r5, r0
 8019d9c:	81a5      	strh	r5, [r4, #12]
 8019d9e:	e7cd      	b.n	8019d3c <__smakebuf_r+0x18>
 8019da0:	08019b31 	.word	0x08019b31

08019da4 <_free_r>:
 8019da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019da6:	2900      	cmp	r1, #0
 8019da8:	d044      	beq.n	8019e34 <_free_r+0x90>
 8019daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019dae:	9001      	str	r0, [sp, #4]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	f1a1 0404 	sub.w	r4, r1, #4
 8019db6:	bfb8      	it	lt
 8019db8:	18e4      	addlt	r4, r4, r3
 8019dba:	f000 fcb3 	bl	801a724 <__malloc_lock>
 8019dbe:	4a1e      	ldr	r2, [pc, #120]	; (8019e38 <_free_r+0x94>)
 8019dc0:	9801      	ldr	r0, [sp, #4]
 8019dc2:	6813      	ldr	r3, [r2, #0]
 8019dc4:	b933      	cbnz	r3, 8019dd4 <_free_r+0x30>
 8019dc6:	6063      	str	r3, [r4, #4]
 8019dc8:	6014      	str	r4, [r2, #0]
 8019dca:	b003      	add	sp, #12
 8019dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019dd0:	f000 bcae 	b.w	801a730 <__malloc_unlock>
 8019dd4:	42a3      	cmp	r3, r4
 8019dd6:	d908      	bls.n	8019dea <_free_r+0x46>
 8019dd8:	6825      	ldr	r5, [r4, #0]
 8019dda:	1961      	adds	r1, r4, r5
 8019ddc:	428b      	cmp	r3, r1
 8019dde:	bf01      	itttt	eq
 8019de0:	6819      	ldreq	r1, [r3, #0]
 8019de2:	685b      	ldreq	r3, [r3, #4]
 8019de4:	1949      	addeq	r1, r1, r5
 8019de6:	6021      	streq	r1, [r4, #0]
 8019de8:	e7ed      	b.n	8019dc6 <_free_r+0x22>
 8019dea:	461a      	mov	r2, r3
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	b10b      	cbz	r3, 8019df4 <_free_r+0x50>
 8019df0:	42a3      	cmp	r3, r4
 8019df2:	d9fa      	bls.n	8019dea <_free_r+0x46>
 8019df4:	6811      	ldr	r1, [r2, #0]
 8019df6:	1855      	adds	r5, r2, r1
 8019df8:	42a5      	cmp	r5, r4
 8019dfa:	d10b      	bne.n	8019e14 <_free_r+0x70>
 8019dfc:	6824      	ldr	r4, [r4, #0]
 8019dfe:	4421      	add	r1, r4
 8019e00:	1854      	adds	r4, r2, r1
 8019e02:	42a3      	cmp	r3, r4
 8019e04:	6011      	str	r1, [r2, #0]
 8019e06:	d1e0      	bne.n	8019dca <_free_r+0x26>
 8019e08:	681c      	ldr	r4, [r3, #0]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	6053      	str	r3, [r2, #4]
 8019e0e:	4421      	add	r1, r4
 8019e10:	6011      	str	r1, [r2, #0]
 8019e12:	e7da      	b.n	8019dca <_free_r+0x26>
 8019e14:	d902      	bls.n	8019e1c <_free_r+0x78>
 8019e16:	230c      	movs	r3, #12
 8019e18:	6003      	str	r3, [r0, #0]
 8019e1a:	e7d6      	b.n	8019dca <_free_r+0x26>
 8019e1c:	6825      	ldr	r5, [r4, #0]
 8019e1e:	1961      	adds	r1, r4, r5
 8019e20:	428b      	cmp	r3, r1
 8019e22:	bf04      	itt	eq
 8019e24:	6819      	ldreq	r1, [r3, #0]
 8019e26:	685b      	ldreq	r3, [r3, #4]
 8019e28:	6063      	str	r3, [r4, #4]
 8019e2a:	bf04      	itt	eq
 8019e2c:	1949      	addeq	r1, r1, r5
 8019e2e:	6021      	streq	r1, [r4, #0]
 8019e30:	6054      	str	r4, [r2, #4]
 8019e32:	e7ca      	b.n	8019dca <_free_r+0x26>
 8019e34:	b003      	add	sp, #12
 8019e36:	bd30      	pop	{r4, r5, pc}
 8019e38:	20008630 	.word	0x20008630

08019e3c <sbrk_aligned>:
 8019e3c:	b570      	push	{r4, r5, r6, lr}
 8019e3e:	4e0e      	ldr	r6, [pc, #56]	; (8019e78 <sbrk_aligned+0x3c>)
 8019e40:	460c      	mov	r4, r1
 8019e42:	6831      	ldr	r1, [r6, #0]
 8019e44:	4605      	mov	r5, r0
 8019e46:	b911      	cbnz	r1, 8019e4e <sbrk_aligned+0x12>
 8019e48:	f000 fbc2 	bl	801a5d0 <_sbrk_r>
 8019e4c:	6030      	str	r0, [r6, #0]
 8019e4e:	4621      	mov	r1, r4
 8019e50:	4628      	mov	r0, r5
 8019e52:	f000 fbbd 	bl	801a5d0 <_sbrk_r>
 8019e56:	1c43      	adds	r3, r0, #1
 8019e58:	d00a      	beq.n	8019e70 <sbrk_aligned+0x34>
 8019e5a:	1cc4      	adds	r4, r0, #3
 8019e5c:	f024 0403 	bic.w	r4, r4, #3
 8019e60:	42a0      	cmp	r0, r4
 8019e62:	d007      	beq.n	8019e74 <sbrk_aligned+0x38>
 8019e64:	1a21      	subs	r1, r4, r0
 8019e66:	4628      	mov	r0, r5
 8019e68:	f000 fbb2 	bl	801a5d0 <_sbrk_r>
 8019e6c:	3001      	adds	r0, #1
 8019e6e:	d101      	bne.n	8019e74 <sbrk_aligned+0x38>
 8019e70:	f04f 34ff 	mov.w	r4, #4294967295
 8019e74:	4620      	mov	r0, r4
 8019e76:	bd70      	pop	{r4, r5, r6, pc}
 8019e78:	20008634 	.word	0x20008634

08019e7c <_malloc_r>:
 8019e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e80:	1ccd      	adds	r5, r1, #3
 8019e82:	f025 0503 	bic.w	r5, r5, #3
 8019e86:	3508      	adds	r5, #8
 8019e88:	2d0c      	cmp	r5, #12
 8019e8a:	bf38      	it	cc
 8019e8c:	250c      	movcc	r5, #12
 8019e8e:	2d00      	cmp	r5, #0
 8019e90:	4607      	mov	r7, r0
 8019e92:	db01      	blt.n	8019e98 <_malloc_r+0x1c>
 8019e94:	42a9      	cmp	r1, r5
 8019e96:	d905      	bls.n	8019ea4 <_malloc_r+0x28>
 8019e98:	230c      	movs	r3, #12
 8019e9a:	603b      	str	r3, [r7, #0]
 8019e9c:	2600      	movs	r6, #0
 8019e9e:	4630      	mov	r0, r6
 8019ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ea4:	4e2e      	ldr	r6, [pc, #184]	; (8019f60 <_malloc_r+0xe4>)
 8019ea6:	f000 fc3d 	bl	801a724 <__malloc_lock>
 8019eaa:	6833      	ldr	r3, [r6, #0]
 8019eac:	461c      	mov	r4, r3
 8019eae:	bb34      	cbnz	r4, 8019efe <_malloc_r+0x82>
 8019eb0:	4629      	mov	r1, r5
 8019eb2:	4638      	mov	r0, r7
 8019eb4:	f7ff ffc2 	bl	8019e3c <sbrk_aligned>
 8019eb8:	1c43      	adds	r3, r0, #1
 8019eba:	4604      	mov	r4, r0
 8019ebc:	d14d      	bne.n	8019f5a <_malloc_r+0xde>
 8019ebe:	6834      	ldr	r4, [r6, #0]
 8019ec0:	4626      	mov	r6, r4
 8019ec2:	2e00      	cmp	r6, #0
 8019ec4:	d140      	bne.n	8019f48 <_malloc_r+0xcc>
 8019ec6:	6823      	ldr	r3, [r4, #0]
 8019ec8:	4631      	mov	r1, r6
 8019eca:	4638      	mov	r0, r7
 8019ecc:	eb04 0803 	add.w	r8, r4, r3
 8019ed0:	f000 fb7e 	bl	801a5d0 <_sbrk_r>
 8019ed4:	4580      	cmp	r8, r0
 8019ed6:	d13a      	bne.n	8019f4e <_malloc_r+0xd2>
 8019ed8:	6821      	ldr	r1, [r4, #0]
 8019eda:	3503      	adds	r5, #3
 8019edc:	1a6d      	subs	r5, r5, r1
 8019ede:	f025 0503 	bic.w	r5, r5, #3
 8019ee2:	3508      	adds	r5, #8
 8019ee4:	2d0c      	cmp	r5, #12
 8019ee6:	bf38      	it	cc
 8019ee8:	250c      	movcc	r5, #12
 8019eea:	4629      	mov	r1, r5
 8019eec:	4638      	mov	r0, r7
 8019eee:	f7ff ffa5 	bl	8019e3c <sbrk_aligned>
 8019ef2:	3001      	adds	r0, #1
 8019ef4:	d02b      	beq.n	8019f4e <_malloc_r+0xd2>
 8019ef6:	6823      	ldr	r3, [r4, #0]
 8019ef8:	442b      	add	r3, r5
 8019efa:	6023      	str	r3, [r4, #0]
 8019efc:	e00e      	b.n	8019f1c <_malloc_r+0xa0>
 8019efe:	6822      	ldr	r2, [r4, #0]
 8019f00:	1b52      	subs	r2, r2, r5
 8019f02:	d41e      	bmi.n	8019f42 <_malloc_r+0xc6>
 8019f04:	2a0b      	cmp	r2, #11
 8019f06:	d916      	bls.n	8019f36 <_malloc_r+0xba>
 8019f08:	1961      	adds	r1, r4, r5
 8019f0a:	42a3      	cmp	r3, r4
 8019f0c:	6025      	str	r5, [r4, #0]
 8019f0e:	bf18      	it	ne
 8019f10:	6059      	strne	r1, [r3, #4]
 8019f12:	6863      	ldr	r3, [r4, #4]
 8019f14:	bf08      	it	eq
 8019f16:	6031      	streq	r1, [r6, #0]
 8019f18:	5162      	str	r2, [r4, r5]
 8019f1a:	604b      	str	r3, [r1, #4]
 8019f1c:	4638      	mov	r0, r7
 8019f1e:	f104 060b 	add.w	r6, r4, #11
 8019f22:	f000 fc05 	bl	801a730 <__malloc_unlock>
 8019f26:	f026 0607 	bic.w	r6, r6, #7
 8019f2a:	1d23      	adds	r3, r4, #4
 8019f2c:	1af2      	subs	r2, r6, r3
 8019f2e:	d0b6      	beq.n	8019e9e <_malloc_r+0x22>
 8019f30:	1b9b      	subs	r3, r3, r6
 8019f32:	50a3      	str	r3, [r4, r2]
 8019f34:	e7b3      	b.n	8019e9e <_malloc_r+0x22>
 8019f36:	6862      	ldr	r2, [r4, #4]
 8019f38:	42a3      	cmp	r3, r4
 8019f3a:	bf0c      	ite	eq
 8019f3c:	6032      	streq	r2, [r6, #0]
 8019f3e:	605a      	strne	r2, [r3, #4]
 8019f40:	e7ec      	b.n	8019f1c <_malloc_r+0xa0>
 8019f42:	4623      	mov	r3, r4
 8019f44:	6864      	ldr	r4, [r4, #4]
 8019f46:	e7b2      	b.n	8019eae <_malloc_r+0x32>
 8019f48:	4634      	mov	r4, r6
 8019f4a:	6876      	ldr	r6, [r6, #4]
 8019f4c:	e7b9      	b.n	8019ec2 <_malloc_r+0x46>
 8019f4e:	230c      	movs	r3, #12
 8019f50:	603b      	str	r3, [r7, #0]
 8019f52:	4638      	mov	r0, r7
 8019f54:	f000 fbec 	bl	801a730 <__malloc_unlock>
 8019f58:	e7a1      	b.n	8019e9e <_malloc_r+0x22>
 8019f5a:	6025      	str	r5, [r4, #0]
 8019f5c:	e7de      	b.n	8019f1c <_malloc_r+0xa0>
 8019f5e:	bf00      	nop
 8019f60:	20008630 	.word	0x20008630

08019f64 <__sfputc_r>:
 8019f64:	6893      	ldr	r3, [r2, #8]
 8019f66:	3b01      	subs	r3, #1
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	b410      	push	{r4}
 8019f6c:	6093      	str	r3, [r2, #8]
 8019f6e:	da08      	bge.n	8019f82 <__sfputc_r+0x1e>
 8019f70:	6994      	ldr	r4, [r2, #24]
 8019f72:	42a3      	cmp	r3, r4
 8019f74:	db01      	blt.n	8019f7a <__sfputc_r+0x16>
 8019f76:	290a      	cmp	r1, #10
 8019f78:	d103      	bne.n	8019f82 <__sfputc_r+0x1e>
 8019f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f7e:	f7ff bc31 	b.w	80197e4 <__swbuf_r>
 8019f82:	6813      	ldr	r3, [r2, #0]
 8019f84:	1c58      	adds	r0, r3, #1
 8019f86:	6010      	str	r0, [r2, #0]
 8019f88:	7019      	strb	r1, [r3, #0]
 8019f8a:	4608      	mov	r0, r1
 8019f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f90:	4770      	bx	lr

08019f92 <__sfputs_r>:
 8019f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f94:	4606      	mov	r6, r0
 8019f96:	460f      	mov	r7, r1
 8019f98:	4614      	mov	r4, r2
 8019f9a:	18d5      	adds	r5, r2, r3
 8019f9c:	42ac      	cmp	r4, r5
 8019f9e:	d101      	bne.n	8019fa4 <__sfputs_r+0x12>
 8019fa0:	2000      	movs	r0, #0
 8019fa2:	e007      	b.n	8019fb4 <__sfputs_r+0x22>
 8019fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fa8:	463a      	mov	r2, r7
 8019faa:	4630      	mov	r0, r6
 8019fac:	f7ff ffda 	bl	8019f64 <__sfputc_r>
 8019fb0:	1c43      	adds	r3, r0, #1
 8019fb2:	d1f3      	bne.n	8019f9c <__sfputs_r+0xa>
 8019fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fb8 <_vfiprintf_r>:
 8019fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fbc:	460d      	mov	r5, r1
 8019fbe:	b09d      	sub	sp, #116	; 0x74
 8019fc0:	4614      	mov	r4, r2
 8019fc2:	4698      	mov	r8, r3
 8019fc4:	4606      	mov	r6, r0
 8019fc6:	b118      	cbz	r0, 8019fd0 <_vfiprintf_r+0x18>
 8019fc8:	6983      	ldr	r3, [r0, #24]
 8019fca:	b90b      	cbnz	r3, 8019fd0 <_vfiprintf_r+0x18>
 8019fcc:	f7ff fde4 	bl	8019b98 <__sinit>
 8019fd0:	4b89      	ldr	r3, [pc, #548]	; (801a1f8 <_vfiprintf_r+0x240>)
 8019fd2:	429d      	cmp	r5, r3
 8019fd4:	d11b      	bne.n	801a00e <_vfiprintf_r+0x56>
 8019fd6:	6875      	ldr	r5, [r6, #4]
 8019fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fda:	07d9      	lsls	r1, r3, #31
 8019fdc:	d405      	bmi.n	8019fea <_vfiprintf_r+0x32>
 8019fde:	89ab      	ldrh	r3, [r5, #12]
 8019fe0:	059a      	lsls	r2, r3, #22
 8019fe2:	d402      	bmi.n	8019fea <_vfiprintf_r+0x32>
 8019fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fe6:	f7ff fe75 	bl	8019cd4 <__retarget_lock_acquire_recursive>
 8019fea:	89ab      	ldrh	r3, [r5, #12]
 8019fec:	071b      	lsls	r3, r3, #28
 8019fee:	d501      	bpl.n	8019ff4 <_vfiprintf_r+0x3c>
 8019ff0:	692b      	ldr	r3, [r5, #16]
 8019ff2:	b9eb      	cbnz	r3, 801a030 <_vfiprintf_r+0x78>
 8019ff4:	4629      	mov	r1, r5
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	f7ff fc46 	bl	8019888 <__swsetup_r>
 8019ffc:	b1c0      	cbz	r0, 801a030 <_vfiprintf_r+0x78>
 8019ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a000:	07dc      	lsls	r4, r3, #31
 801a002:	d50e      	bpl.n	801a022 <_vfiprintf_r+0x6a>
 801a004:	f04f 30ff 	mov.w	r0, #4294967295
 801a008:	b01d      	add	sp, #116	; 0x74
 801a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a00e:	4b7b      	ldr	r3, [pc, #492]	; (801a1fc <_vfiprintf_r+0x244>)
 801a010:	429d      	cmp	r5, r3
 801a012:	d101      	bne.n	801a018 <_vfiprintf_r+0x60>
 801a014:	68b5      	ldr	r5, [r6, #8]
 801a016:	e7df      	b.n	8019fd8 <_vfiprintf_r+0x20>
 801a018:	4b79      	ldr	r3, [pc, #484]	; (801a200 <_vfiprintf_r+0x248>)
 801a01a:	429d      	cmp	r5, r3
 801a01c:	bf08      	it	eq
 801a01e:	68f5      	ldreq	r5, [r6, #12]
 801a020:	e7da      	b.n	8019fd8 <_vfiprintf_r+0x20>
 801a022:	89ab      	ldrh	r3, [r5, #12]
 801a024:	0598      	lsls	r0, r3, #22
 801a026:	d4ed      	bmi.n	801a004 <_vfiprintf_r+0x4c>
 801a028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a02a:	f7ff fe54 	bl	8019cd6 <__retarget_lock_release_recursive>
 801a02e:	e7e9      	b.n	801a004 <_vfiprintf_r+0x4c>
 801a030:	2300      	movs	r3, #0
 801a032:	9309      	str	r3, [sp, #36]	; 0x24
 801a034:	2320      	movs	r3, #32
 801a036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a03a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a03e:	2330      	movs	r3, #48	; 0x30
 801a040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a204 <_vfiprintf_r+0x24c>
 801a044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a048:	f04f 0901 	mov.w	r9, #1
 801a04c:	4623      	mov	r3, r4
 801a04e:	469a      	mov	sl, r3
 801a050:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a054:	b10a      	cbz	r2, 801a05a <_vfiprintf_r+0xa2>
 801a056:	2a25      	cmp	r2, #37	; 0x25
 801a058:	d1f9      	bne.n	801a04e <_vfiprintf_r+0x96>
 801a05a:	ebba 0b04 	subs.w	fp, sl, r4
 801a05e:	d00b      	beq.n	801a078 <_vfiprintf_r+0xc0>
 801a060:	465b      	mov	r3, fp
 801a062:	4622      	mov	r2, r4
 801a064:	4629      	mov	r1, r5
 801a066:	4630      	mov	r0, r6
 801a068:	f7ff ff93 	bl	8019f92 <__sfputs_r>
 801a06c:	3001      	adds	r0, #1
 801a06e:	f000 80aa 	beq.w	801a1c6 <_vfiprintf_r+0x20e>
 801a072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a074:	445a      	add	r2, fp
 801a076:	9209      	str	r2, [sp, #36]	; 0x24
 801a078:	f89a 3000 	ldrb.w	r3, [sl]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	f000 80a2 	beq.w	801a1c6 <_vfiprintf_r+0x20e>
 801a082:	2300      	movs	r3, #0
 801a084:	f04f 32ff 	mov.w	r2, #4294967295
 801a088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a08c:	f10a 0a01 	add.w	sl, sl, #1
 801a090:	9304      	str	r3, [sp, #16]
 801a092:	9307      	str	r3, [sp, #28]
 801a094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a098:	931a      	str	r3, [sp, #104]	; 0x68
 801a09a:	4654      	mov	r4, sl
 801a09c:	2205      	movs	r2, #5
 801a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0a2:	4858      	ldr	r0, [pc, #352]	; (801a204 <_vfiprintf_r+0x24c>)
 801a0a4:	f7e6 f86c 	bl	8000180 <memchr>
 801a0a8:	9a04      	ldr	r2, [sp, #16]
 801a0aa:	b9d8      	cbnz	r0, 801a0e4 <_vfiprintf_r+0x12c>
 801a0ac:	06d1      	lsls	r1, r2, #27
 801a0ae:	bf44      	itt	mi
 801a0b0:	2320      	movmi	r3, #32
 801a0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0b6:	0713      	lsls	r3, r2, #28
 801a0b8:	bf44      	itt	mi
 801a0ba:	232b      	movmi	r3, #43	; 0x2b
 801a0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0c0:	f89a 3000 	ldrb.w	r3, [sl]
 801a0c4:	2b2a      	cmp	r3, #42	; 0x2a
 801a0c6:	d015      	beq.n	801a0f4 <_vfiprintf_r+0x13c>
 801a0c8:	9a07      	ldr	r2, [sp, #28]
 801a0ca:	4654      	mov	r4, sl
 801a0cc:	2000      	movs	r0, #0
 801a0ce:	f04f 0c0a 	mov.w	ip, #10
 801a0d2:	4621      	mov	r1, r4
 801a0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0d8:	3b30      	subs	r3, #48	; 0x30
 801a0da:	2b09      	cmp	r3, #9
 801a0dc:	d94e      	bls.n	801a17c <_vfiprintf_r+0x1c4>
 801a0de:	b1b0      	cbz	r0, 801a10e <_vfiprintf_r+0x156>
 801a0e0:	9207      	str	r2, [sp, #28]
 801a0e2:	e014      	b.n	801a10e <_vfiprintf_r+0x156>
 801a0e4:	eba0 0308 	sub.w	r3, r0, r8
 801a0e8:	fa09 f303 	lsl.w	r3, r9, r3
 801a0ec:	4313      	orrs	r3, r2
 801a0ee:	9304      	str	r3, [sp, #16]
 801a0f0:	46a2      	mov	sl, r4
 801a0f2:	e7d2      	b.n	801a09a <_vfiprintf_r+0xe2>
 801a0f4:	9b03      	ldr	r3, [sp, #12]
 801a0f6:	1d19      	adds	r1, r3, #4
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	9103      	str	r1, [sp, #12]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	bfbb      	ittet	lt
 801a100:	425b      	neglt	r3, r3
 801a102:	f042 0202 	orrlt.w	r2, r2, #2
 801a106:	9307      	strge	r3, [sp, #28]
 801a108:	9307      	strlt	r3, [sp, #28]
 801a10a:	bfb8      	it	lt
 801a10c:	9204      	strlt	r2, [sp, #16]
 801a10e:	7823      	ldrb	r3, [r4, #0]
 801a110:	2b2e      	cmp	r3, #46	; 0x2e
 801a112:	d10c      	bne.n	801a12e <_vfiprintf_r+0x176>
 801a114:	7863      	ldrb	r3, [r4, #1]
 801a116:	2b2a      	cmp	r3, #42	; 0x2a
 801a118:	d135      	bne.n	801a186 <_vfiprintf_r+0x1ce>
 801a11a:	9b03      	ldr	r3, [sp, #12]
 801a11c:	1d1a      	adds	r2, r3, #4
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	9203      	str	r2, [sp, #12]
 801a122:	2b00      	cmp	r3, #0
 801a124:	bfb8      	it	lt
 801a126:	f04f 33ff 	movlt.w	r3, #4294967295
 801a12a:	3402      	adds	r4, #2
 801a12c:	9305      	str	r3, [sp, #20]
 801a12e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a214 <_vfiprintf_r+0x25c>
 801a132:	7821      	ldrb	r1, [r4, #0]
 801a134:	2203      	movs	r2, #3
 801a136:	4650      	mov	r0, sl
 801a138:	f7e6 f822 	bl	8000180 <memchr>
 801a13c:	b140      	cbz	r0, 801a150 <_vfiprintf_r+0x198>
 801a13e:	2340      	movs	r3, #64	; 0x40
 801a140:	eba0 000a 	sub.w	r0, r0, sl
 801a144:	fa03 f000 	lsl.w	r0, r3, r0
 801a148:	9b04      	ldr	r3, [sp, #16]
 801a14a:	4303      	orrs	r3, r0
 801a14c:	3401      	adds	r4, #1
 801a14e:	9304      	str	r3, [sp, #16]
 801a150:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a154:	482c      	ldr	r0, [pc, #176]	; (801a208 <_vfiprintf_r+0x250>)
 801a156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a15a:	2206      	movs	r2, #6
 801a15c:	f7e6 f810 	bl	8000180 <memchr>
 801a160:	2800      	cmp	r0, #0
 801a162:	d03f      	beq.n	801a1e4 <_vfiprintf_r+0x22c>
 801a164:	4b29      	ldr	r3, [pc, #164]	; (801a20c <_vfiprintf_r+0x254>)
 801a166:	bb1b      	cbnz	r3, 801a1b0 <_vfiprintf_r+0x1f8>
 801a168:	9b03      	ldr	r3, [sp, #12]
 801a16a:	3307      	adds	r3, #7
 801a16c:	f023 0307 	bic.w	r3, r3, #7
 801a170:	3308      	adds	r3, #8
 801a172:	9303      	str	r3, [sp, #12]
 801a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a176:	443b      	add	r3, r7
 801a178:	9309      	str	r3, [sp, #36]	; 0x24
 801a17a:	e767      	b.n	801a04c <_vfiprintf_r+0x94>
 801a17c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a180:	460c      	mov	r4, r1
 801a182:	2001      	movs	r0, #1
 801a184:	e7a5      	b.n	801a0d2 <_vfiprintf_r+0x11a>
 801a186:	2300      	movs	r3, #0
 801a188:	3401      	adds	r4, #1
 801a18a:	9305      	str	r3, [sp, #20]
 801a18c:	4619      	mov	r1, r3
 801a18e:	f04f 0c0a 	mov.w	ip, #10
 801a192:	4620      	mov	r0, r4
 801a194:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a198:	3a30      	subs	r2, #48	; 0x30
 801a19a:	2a09      	cmp	r2, #9
 801a19c:	d903      	bls.n	801a1a6 <_vfiprintf_r+0x1ee>
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d0c5      	beq.n	801a12e <_vfiprintf_r+0x176>
 801a1a2:	9105      	str	r1, [sp, #20]
 801a1a4:	e7c3      	b.n	801a12e <_vfiprintf_r+0x176>
 801a1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	e7f0      	b.n	801a192 <_vfiprintf_r+0x1da>
 801a1b0:	ab03      	add	r3, sp, #12
 801a1b2:	9300      	str	r3, [sp, #0]
 801a1b4:	462a      	mov	r2, r5
 801a1b6:	4b16      	ldr	r3, [pc, #88]	; (801a210 <_vfiprintf_r+0x258>)
 801a1b8:	a904      	add	r1, sp, #16
 801a1ba:	4630      	mov	r0, r6
 801a1bc:	f3af 8000 	nop.w
 801a1c0:	4607      	mov	r7, r0
 801a1c2:	1c78      	adds	r0, r7, #1
 801a1c4:	d1d6      	bne.n	801a174 <_vfiprintf_r+0x1bc>
 801a1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1c8:	07d9      	lsls	r1, r3, #31
 801a1ca:	d405      	bmi.n	801a1d8 <_vfiprintf_r+0x220>
 801a1cc:	89ab      	ldrh	r3, [r5, #12]
 801a1ce:	059a      	lsls	r2, r3, #22
 801a1d0:	d402      	bmi.n	801a1d8 <_vfiprintf_r+0x220>
 801a1d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1d4:	f7ff fd7f 	bl	8019cd6 <__retarget_lock_release_recursive>
 801a1d8:	89ab      	ldrh	r3, [r5, #12]
 801a1da:	065b      	lsls	r3, r3, #25
 801a1dc:	f53f af12 	bmi.w	801a004 <_vfiprintf_r+0x4c>
 801a1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1e2:	e711      	b.n	801a008 <_vfiprintf_r+0x50>
 801a1e4:	ab03      	add	r3, sp, #12
 801a1e6:	9300      	str	r3, [sp, #0]
 801a1e8:	462a      	mov	r2, r5
 801a1ea:	4b09      	ldr	r3, [pc, #36]	; (801a210 <_vfiprintf_r+0x258>)
 801a1ec:	a904      	add	r1, sp, #16
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	f000 f880 	bl	801a2f4 <_printf_i>
 801a1f4:	e7e4      	b.n	801a1c0 <_vfiprintf_r+0x208>
 801a1f6:	bf00      	nop
 801a1f8:	0801ab6c 	.word	0x0801ab6c
 801a1fc:	0801ab8c 	.word	0x0801ab8c
 801a200:	0801ab4c 	.word	0x0801ab4c
 801a204:	0801abac 	.word	0x0801abac
 801a208:	0801abb6 	.word	0x0801abb6
 801a20c:	00000000 	.word	0x00000000
 801a210:	08019f93 	.word	0x08019f93
 801a214:	0801abb2 	.word	0x0801abb2

0801a218 <_printf_common>:
 801a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a21c:	4616      	mov	r6, r2
 801a21e:	4699      	mov	r9, r3
 801a220:	688a      	ldr	r2, [r1, #8]
 801a222:	690b      	ldr	r3, [r1, #16]
 801a224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a228:	4293      	cmp	r3, r2
 801a22a:	bfb8      	it	lt
 801a22c:	4613      	movlt	r3, r2
 801a22e:	6033      	str	r3, [r6, #0]
 801a230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a234:	4607      	mov	r7, r0
 801a236:	460c      	mov	r4, r1
 801a238:	b10a      	cbz	r2, 801a23e <_printf_common+0x26>
 801a23a:	3301      	adds	r3, #1
 801a23c:	6033      	str	r3, [r6, #0]
 801a23e:	6823      	ldr	r3, [r4, #0]
 801a240:	0699      	lsls	r1, r3, #26
 801a242:	bf42      	ittt	mi
 801a244:	6833      	ldrmi	r3, [r6, #0]
 801a246:	3302      	addmi	r3, #2
 801a248:	6033      	strmi	r3, [r6, #0]
 801a24a:	6825      	ldr	r5, [r4, #0]
 801a24c:	f015 0506 	ands.w	r5, r5, #6
 801a250:	d106      	bne.n	801a260 <_printf_common+0x48>
 801a252:	f104 0a19 	add.w	sl, r4, #25
 801a256:	68e3      	ldr	r3, [r4, #12]
 801a258:	6832      	ldr	r2, [r6, #0]
 801a25a:	1a9b      	subs	r3, r3, r2
 801a25c:	42ab      	cmp	r3, r5
 801a25e:	dc26      	bgt.n	801a2ae <_printf_common+0x96>
 801a260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a264:	1e13      	subs	r3, r2, #0
 801a266:	6822      	ldr	r2, [r4, #0]
 801a268:	bf18      	it	ne
 801a26a:	2301      	movne	r3, #1
 801a26c:	0692      	lsls	r2, r2, #26
 801a26e:	d42b      	bmi.n	801a2c8 <_printf_common+0xb0>
 801a270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a274:	4649      	mov	r1, r9
 801a276:	4638      	mov	r0, r7
 801a278:	47c0      	blx	r8
 801a27a:	3001      	adds	r0, #1
 801a27c:	d01e      	beq.n	801a2bc <_printf_common+0xa4>
 801a27e:	6823      	ldr	r3, [r4, #0]
 801a280:	68e5      	ldr	r5, [r4, #12]
 801a282:	6832      	ldr	r2, [r6, #0]
 801a284:	f003 0306 	and.w	r3, r3, #6
 801a288:	2b04      	cmp	r3, #4
 801a28a:	bf08      	it	eq
 801a28c:	1aad      	subeq	r5, r5, r2
 801a28e:	68a3      	ldr	r3, [r4, #8]
 801a290:	6922      	ldr	r2, [r4, #16]
 801a292:	bf0c      	ite	eq
 801a294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a298:	2500      	movne	r5, #0
 801a29a:	4293      	cmp	r3, r2
 801a29c:	bfc4      	itt	gt
 801a29e:	1a9b      	subgt	r3, r3, r2
 801a2a0:	18ed      	addgt	r5, r5, r3
 801a2a2:	2600      	movs	r6, #0
 801a2a4:	341a      	adds	r4, #26
 801a2a6:	42b5      	cmp	r5, r6
 801a2a8:	d11a      	bne.n	801a2e0 <_printf_common+0xc8>
 801a2aa:	2000      	movs	r0, #0
 801a2ac:	e008      	b.n	801a2c0 <_printf_common+0xa8>
 801a2ae:	2301      	movs	r3, #1
 801a2b0:	4652      	mov	r2, sl
 801a2b2:	4649      	mov	r1, r9
 801a2b4:	4638      	mov	r0, r7
 801a2b6:	47c0      	blx	r8
 801a2b8:	3001      	adds	r0, #1
 801a2ba:	d103      	bne.n	801a2c4 <_printf_common+0xac>
 801a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2c4:	3501      	adds	r5, #1
 801a2c6:	e7c6      	b.n	801a256 <_printf_common+0x3e>
 801a2c8:	18e1      	adds	r1, r4, r3
 801a2ca:	1c5a      	adds	r2, r3, #1
 801a2cc:	2030      	movs	r0, #48	; 0x30
 801a2ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a2d2:	4422      	add	r2, r4
 801a2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a2d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a2dc:	3302      	adds	r3, #2
 801a2de:	e7c7      	b.n	801a270 <_printf_common+0x58>
 801a2e0:	2301      	movs	r3, #1
 801a2e2:	4622      	mov	r2, r4
 801a2e4:	4649      	mov	r1, r9
 801a2e6:	4638      	mov	r0, r7
 801a2e8:	47c0      	blx	r8
 801a2ea:	3001      	adds	r0, #1
 801a2ec:	d0e6      	beq.n	801a2bc <_printf_common+0xa4>
 801a2ee:	3601      	adds	r6, #1
 801a2f0:	e7d9      	b.n	801a2a6 <_printf_common+0x8e>
	...

0801a2f4 <_printf_i>:
 801a2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a2f8:	7e0f      	ldrb	r7, [r1, #24]
 801a2fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a2fc:	2f78      	cmp	r7, #120	; 0x78
 801a2fe:	4691      	mov	r9, r2
 801a300:	4680      	mov	r8, r0
 801a302:	460c      	mov	r4, r1
 801a304:	469a      	mov	sl, r3
 801a306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a30a:	d807      	bhi.n	801a31c <_printf_i+0x28>
 801a30c:	2f62      	cmp	r7, #98	; 0x62
 801a30e:	d80a      	bhi.n	801a326 <_printf_i+0x32>
 801a310:	2f00      	cmp	r7, #0
 801a312:	f000 80d8 	beq.w	801a4c6 <_printf_i+0x1d2>
 801a316:	2f58      	cmp	r7, #88	; 0x58
 801a318:	f000 80a3 	beq.w	801a462 <_printf_i+0x16e>
 801a31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a324:	e03a      	b.n	801a39c <_printf_i+0xa8>
 801a326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a32a:	2b15      	cmp	r3, #21
 801a32c:	d8f6      	bhi.n	801a31c <_printf_i+0x28>
 801a32e:	a101      	add	r1, pc, #4	; (adr r1, 801a334 <_printf_i+0x40>)
 801a330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a334:	0801a38d 	.word	0x0801a38d
 801a338:	0801a3a1 	.word	0x0801a3a1
 801a33c:	0801a31d 	.word	0x0801a31d
 801a340:	0801a31d 	.word	0x0801a31d
 801a344:	0801a31d 	.word	0x0801a31d
 801a348:	0801a31d 	.word	0x0801a31d
 801a34c:	0801a3a1 	.word	0x0801a3a1
 801a350:	0801a31d 	.word	0x0801a31d
 801a354:	0801a31d 	.word	0x0801a31d
 801a358:	0801a31d 	.word	0x0801a31d
 801a35c:	0801a31d 	.word	0x0801a31d
 801a360:	0801a4ad 	.word	0x0801a4ad
 801a364:	0801a3d1 	.word	0x0801a3d1
 801a368:	0801a48f 	.word	0x0801a48f
 801a36c:	0801a31d 	.word	0x0801a31d
 801a370:	0801a31d 	.word	0x0801a31d
 801a374:	0801a4cf 	.word	0x0801a4cf
 801a378:	0801a31d 	.word	0x0801a31d
 801a37c:	0801a3d1 	.word	0x0801a3d1
 801a380:	0801a31d 	.word	0x0801a31d
 801a384:	0801a31d 	.word	0x0801a31d
 801a388:	0801a497 	.word	0x0801a497
 801a38c:	682b      	ldr	r3, [r5, #0]
 801a38e:	1d1a      	adds	r2, r3, #4
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	602a      	str	r2, [r5, #0]
 801a394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a39c:	2301      	movs	r3, #1
 801a39e:	e0a3      	b.n	801a4e8 <_printf_i+0x1f4>
 801a3a0:	6820      	ldr	r0, [r4, #0]
 801a3a2:	6829      	ldr	r1, [r5, #0]
 801a3a4:	0606      	lsls	r6, r0, #24
 801a3a6:	f101 0304 	add.w	r3, r1, #4
 801a3aa:	d50a      	bpl.n	801a3c2 <_printf_i+0xce>
 801a3ac:	680e      	ldr	r6, [r1, #0]
 801a3ae:	602b      	str	r3, [r5, #0]
 801a3b0:	2e00      	cmp	r6, #0
 801a3b2:	da03      	bge.n	801a3bc <_printf_i+0xc8>
 801a3b4:	232d      	movs	r3, #45	; 0x2d
 801a3b6:	4276      	negs	r6, r6
 801a3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a3bc:	485e      	ldr	r0, [pc, #376]	; (801a538 <_printf_i+0x244>)
 801a3be:	230a      	movs	r3, #10
 801a3c0:	e019      	b.n	801a3f6 <_printf_i+0x102>
 801a3c2:	680e      	ldr	r6, [r1, #0]
 801a3c4:	602b      	str	r3, [r5, #0]
 801a3c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a3ca:	bf18      	it	ne
 801a3cc:	b236      	sxthne	r6, r6
 801a3ce:	e7ef      	b.n	801a3b0 <_printf_i+0xbc>
 801a3d0:	682b      	ldr	r3, [r5, #0]
 801a3d2:	6820      	ldr	r0, [r4, #0]
 801a3d4:	1d19      	adds	r1, r3, #4
 801a3d6:	6029      	str	r1, [r5, #0]
 801a3d8:	0601      	lsls	r1, r0, #24
 801a3da:	d501      	bpl.n	801a3e0 <_printf_i+0xec>
 801a3dc:	681e      	ldr	r6, [r3, #0]
 801a3de:	e002      	b.n	801a3e6 <_printf_i+0xf2>
 801a3e0:	0646      	lsls	r6, r0, #25
 801a3e2:	d5fb      	bpl.n	801a3dc <_printf_i+0xe8>
 801a3e4:	881e      	ldrh	r6, [r3, #0]
 801a3e6:	4854      	ldr	r0, [pc, #336]	; (801a538 <_printf_i+0x244>)
 801a3e8:	2f6f      	cmp	r7, #111	; 0x6f
 801a3ea:	bf0c      	ite	eq
 801a3ec:	2308      	moveq	r3, #8
 801a3ee:	230a      	movne	r3, #10
 801a3f0:	2100      	movs	r1, #0
 801a3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3f6:	6865      	ldr	r5, [r4, #4]
 801a3f8:	60a5      	str	r5, [r4, #8]
 801a3fa:	2d00      	cmp	r5, #0
 801a3fc:	bfa2      	ittt	ge
 801a3fe:	6821      	ldrge	r1, [r4, #0]
 801a400:	f021 0104 	bicge.w	r1, r1, #4
 801a404:	6021      	strge	r1, [r4, #0]
 801a406:	b90e      	cbnz	r6, 801a40c <_printf_i+0x118>
 801a408:	2d00      	cmp	r5, #0
 801a40a:	d04d      	beq.n	801a4a8 <_printf_i+0x1b4>
 801a40c:	4615      	mov	r5, r2
 801a40e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a412:	fb03 6711 	mls	r7, r3, r1, r6
 801a416:	5dc7      	ldrb	r7, [r0, r7]
 801a418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a41c:	4637      	mov	r7, r6
 801a41e:	42bb      	cmp	r3, r7
 801a420:	460e      	mov	r6, r1
 801a422:	d9f4      	bls.n	801a40e <_printf_i+0x11a>
 801a424:	2b08      	cmp	r3, #8
 801a426:	d10b      	bne.n	801a440 <_printf_i+0x14c>
 801a428:	6823      	ldr	r3, [r4, #0]
 801a42a:	07de      	lsls	r6, r3, #31
 801a42c:	d508      	bpl.n	801a440 <_printf_i+0x14c>
 801a42e:	6923      	ldr	r3, [r4, #16]
 801a430:	6861      	ldr	r1, [r4, #4]
 801a432:	4299      	cmp	r1, r3
 801a434:	bfde      	ittt	le
 801a436:	2330      	movle	r3, #48	; 0x30
 801a438:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a43c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a440:	1b52      	subs	r2, r2, r5
 801a442:	6122      	str	r2, [r4, #16]
 801a444:	f8cd a000 	str.w	sl, [sp]
 801a448:	464b      	mov	r3, r9
 801a44a:	aa03      	add	r2, sp, #12
 801a44c:	4621      	mov	r1, r4
 801a44e:	4640      	mov	r0, r8
 801a450:	f7ff fee2 	bl	801a218 <_printf_common>
 801a454:	3001      	adds	r0, #1
 801a456:	d14c      	bne.n	801a4f2 <_printf_i+0x1fe>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	b004      	add	sp, #16
 801a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a462:	4835      	ldr	r0, [pc, #212]	; (801a538 <_printf_i+0x244>)
 801a464:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a468:	6829      	ldr	r1, [r5, #0]
 801a46a:	6823      	ldr	r3, [r4, #0]
 801a46c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a470:	6029      	str	r1, [r5, #0]
 801a472:	061d      	lsls	r5, r3, #24
 801a474:	d514      	bpl.n	801a4a0 <_printf_i+0x1ac>
 801a476:	07df      	lsls	r7, r3, #31
 801a478:	bf44      	itt	mi
 801a47a:	f043 0320 	orrmi.w	r3, r3, #32
 801a47e:	6023      	strmi	r3, [r4, #0]
 801a480:	b91e      	cbnz	r6, 801a48a <_printf_i+0x196>
 801a482:	6823      	ldr	r3, [r4, #0]
 801a484:	f023 0320 	bic.w	r3, r3, #32
 801a488:	6023      	str	r3, [r4, #0]
 801a48a:	2310      	movs	r3, #16
 801a48c:	e7b0      	b.n	801a3f0 <_printf_i+0xfc>
 801a48e:	6823      	ldr	r3, [r4, #0]
 801a490:	f043 0320 	orr.w	r3, r3, #32
 801a494:	6023      	str	r3, [r4, #0]
 801a496:	2378      	movs	r3, #120	; 0x78
 801a498:	4828      	ldr	r0, [pc, #160]	; (801a53c <_printf_i+0x248>)
 801a49a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a49e:	e7e3      	b.n	801a468 <_printf_i+0x174>
 801a4a0:	0659      	lsls	r1, r3, #25
 801a4a2:	bf48      	it	mi
 801a4a4:	b2b6      	uxthmi	r6, r6
 801a4a6:	e7e6      	b.n	801a476 <_printf_i+0x182>
 801a4a8:	4615      	mov	r5, r2
 801a4aa:	e7bb      	b.n	801a424 <_printf_i+0x130>
 801a4ac:	682b      	ldr	r3, [r5, #0]
 801a4ae:	6826      	ldr	r6, [r4, #0]
 801a4b0:	6961      	ldr	r1, [r4, #20]
 801a4b2:	1d18      	adds	r0, r3, #4
 801a4b4:	6028      	str	r0, [r5, #0]
 801a4b6:	0635      	lsls	r5, r6, #24
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	d501      	bpl.n	801a4c0 <_printf_i+0x1cc>
 801a4bc:	6019      	str	r1, [r3, #0]
 801a4be:	e002      	b.n	801a4c6 <_printf_i+0x1d2>
 801a4c0:	0670      	lsls	r0, r6, #25
 801a4c2:	d5fb      	bpl.n	801a4bc <_printf_i+0x1c8>
 801a4c4:	8019      	strh	r1, [r3, #0]
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	6123      	str	r3, [r4, #16]
 801a4ca:	4615      	mov	r5, r2
 801a4cc:	e7ba      	b.n	801a444 <_printf_i+0x150>
 801a4ce:	682b      	ldr	r3, [r5, #0]
 801a4d0:	1d1a      	adds	r2, r3, #4
 801a4d2:	602a      	str	r2, [r5, #0]
 801a4d4:	681d      	ldr	r5, [r3, #0]
 801a4d6:	6862      	ldr	r2, [r4, #4]
 801a4d8:	2100      	movs	r1, #0
 801a4da:	4628      	mov	r0, r5
 801a4dc:	f7e5 fe50 	bl	8000180 <memchr>
 801a4e0:	b108      	cbz	r0, 801a4e6 <_printf_i+0x1f2>
 801a4e2:	1b40      	subs	r0, r0, r5
 801a4e4:	6060      	str	r0, [r4, #4]
 801a4e6:	6863      	ldr	r3, [r4, #4]
 801a4e8:	6123      	str	r3, [r4, #16]
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4f0:	e7a8      	b.n	801a444 <_printf_i+0x150>
 801a4f2:	6923      	ldr	r3, [r4, #16]
 801a4f4:	462a      	mov	r2, r5
 801a4f6:	4649      	mov	r1, r9
 801a4f8:	4640      	mov	r0, r8
 801a4fa:	47d0      	blx	sl
 801a4fc:	3001      	adds	r0, #1
 801a4fe:	d0ab      	beq.n	801a458 <_printf_i+0x164>
 801a500:	6823      	ldr	r3, [r4, #0]
 801a502:	079b      	lsls	r3, r3, #30
 801a504:	d413      	bmi.n	801a52e <_printf_i+0x23a>
 801a506:	68e0      	ldr	r0, [r4, #12]
 801a508:	9b03      	ldr	r3, [sp, #12]
 801a50a:	4298      	cmp	r0, r3
 801a50c:	bfb8      	it	lt
 801a50e:	4618      	movlt	r0, r3
 801a510:	e7a4      	b.n	801a45c <_printf_i+0x168>
 801a512:	2301      	movs	r3, #1
 801a514:	4632      	mov	r2, r6
 801a516:	4649      	mov	r1, r9
 801a518:	4640      	mov	r0, r8
 801a51a:	47d0      	blx	sl
 801a51c:	3001      	adds	r0, #1
 801a51e:	d09b      	beq.n	801a458 <_printf_i+0x164>
 801a520:	3501      	adds	r5, #1
 801a522:	68e3      	ldr	r3, [r4, #12]
 801a524:	9903      	ldr	r1, [sp, #12]
 801a526:	1a5b      	subs	r3, r3, r1
 801a528:	42ab      	cmp	r3, r5
 801a52a:	dcf2      	bgt.n	801a512 <_printf_i+0x21e>
 801a52c:	e7eb      	b.n	801a506 <_printf_i+0x212>
 801a52e:	2500      	movs	r5, #0
 801a530:	f104 0619 	add.w	r6, r4, #25
 801a534:	e7f5      	b.n	801a522 <_printf_i+0x22e>
 801a536:	bf00      	nop
 801a538:	0801abbd 	.word	0x0801abbd
 801a53c:	0801abce 	.word	0x0801abce

0801a540 <_putc_r>:
 801a540:	b570      	push	{r4, r5, r6, lr}
 801a542:	460d      	mov	r5, r1
 801a544:	4614      	mov	r4, r2
 801a546:	4606      	mov	r6, r0
 801a548:	b118      	cbz	r0, 801a552 <_putc_r+0x12>
 801a54a:	6983      	ldr	r3, [r0, #24]
 801a54c:	b90b      	cbnz	r3, 801a552 <_putc_r+0x12>
 801a54e:	f7ff fb23 	bl	8019b98 <__sinit>
 801a552:	4b1c      	ldr	r3, [pc, #112]	; (801a5c4 <_putc_r+0x84>)
 801a554:	429c      	cmp	r4, r3
 801a556:	d124      	bne.n	801a5a2 <_putc_r+0x62>
 801a558:	6874      	ldr	r4, [r6, #4]
 801a55a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a55c:	07d8      	lsls	r0, r3, #31
 801a55e:	d405      	bmi.n	801a56c <_putc_r+0x2c>
 801a560:	89a3      	ldrh	r3, [r4, #12]
 801a562:	0599      	lsls	r1, r3, #22
 801a564:	d402      	bmi.n	801a56c <_putc_r+0x2c>
 801a566:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a568:	f7ff fbb4 	bl	8019cd4 <__retarget_lock_acquire_recursive>
 801a56c:	68a3      	ldr	r3, [r4, #8]
 801a56e:	3b01      	subs	r3, #1
 801a570:	2b00      	cmp	r3, #0
 801a572:	60a3      	str	r3, [r4, #8]
 801a574:	da05      	bge.n	801a582 <_putc_r+0x42>
 801a576:	69a2      	ldr	r2, [r4, #24]
 801a578:	4293      	cmp	r3, r2
 801a57a:	db1c      	blt.n	801a5b6 <_putc_r+0x76>
 801a57c:	b2eb      	uxtb	r3, r5
 801a57e:	2b0a      	cmp	r3, #10
 801a580:	d019      	beq.n	801a5b6 <_putc_r+0x76>
 801a582:	6823      	ldr	r3, [r4, #0]
 801a584:	1c5a      	adds	r2, r3, #1
 801a586:	6022      	str	r2, [r4, #0]
 801a588:	701d      	strb	r5, [r3, #0]
 801a58a:	b2ed      	uxtb	r5, r5
 801a58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a58e:	07da      	lsls	r2, r3, #31
 801a590:	d405      	bmi.n	801a59e <_putc_r+0x5e>
 801a592:	89a3      	ldrh	r3, [r4, #12]
 801a594:	059b      	lsls	r3, r3, #22
 801a596:	d402      	bmi.n	801a59e <_putc_r+0x5e>
 801a598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a59a:	f7ff fb9c 	bl	8019cd6 <__retarget_lock_release_recursive>
 801a59e:	4628      	mov	r0, r5
 801a5a0:	bd70      	pop	{r4, r5, r6, pc}
 801a5a2:	4b09      	ldr	r3, [pc, #36]	; (801a5c8 <_putc_r+0x88>)
 801a5a4:	429c      	cmp	r4, r3
 801a5a6:	d101      	bne.n	801a5ac <_putc_r+0x6c>
 801a5a8:	68b4      	ldr	r4, [r6, #8]
 801a5aa:	e7d6      	b.n	801a55a <_putc_r+0x1a>
 801a5ac:	4b07      	ldr	r3, [pc, #28]	; (801a5cc <_putc_r+0x8c>)
 801a5ae:	429c      	cmp	r4, r3
 801a5b0:	bf08      	it	eq
 801a5b2:	68f4      	ldreq	r4, [r6, #12]
 801a5b4:	e7d1      	b.n	801a55a <_putc_r+0x1a>
 801a5b6:	4629      	mov	r1, r5
 801a5b8:	4622      	mov	r2, r4
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	f7ff f912 	bl	80197e4 <__swbuf_r>
 801a5c0:	4605      	mov	r5, r0
 801a5c2:	e7e3      	b.n	801a58c <_putc_r+0x4c>
 801a5c4:	0801ab6c 	.word	0x0801ab6c
 801a5c8:	0801ab8c 	.word	0x0801ab8c
 801a5cc:	0801ab4c 	.word	0x0801ab4c

0801a5d0 <_sbrk_r>:
 801a5d0:	b538      	push	{r3, r4, r5, lr}
 801a5d2:	4d06      	ldr	r5, [pc, #24]	; (801a5ec <_sbrk_r+0x1c>)
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	4604      	mov	r4, r0
 801a5d8:	4608      	mov	r0, r1
 801a5da:	602b      	str	r3, [r5, #0]
 801a5dc:	f7e6 fd4c 	bl	8001078 <_sbrk>
 801a5e0:	1c43      	adds	r3, r0, #1
 801a5e2:	d102      	bne.n	801a5ea <_sbrk_r+0x1a>
 801a5e4:	682b      	ldr	r3, [r5, #0]
 801a5e6:	b103      	cbz	r3, 801a5ea <_sbrk_r+0x1a>
 801a5e8:	6023      	str	r3, [r4, #0]
 801a5ea:	bd38      	pop	{r3, r4, r5, pc}
 801a5ec:	20008638 	.word	0x20008638

0801a5f0 <__sread>:
 801a5f0:	b510      	push	{r4, lr}
 801a5f2:	460c      	mov	r4, r1
 801a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5f8:	f000 f8a0 	bl	801a73c <_read_r>
 801a5fc:	2800      	cmp	r0, #0
 801a5fe:	bfab      	itete	ge
 801a600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a602:	89a3      	ldrhlt	r3, [r4, #12]
 801a604:	181b      	addge	r3, r3, r0
 801a606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a60a:	bfac      	ite	ge
 801a60c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a60e:	81a3      	strhlt	r3, [r4, #12]
 801a610:	bd10      	pop	{r4, pc}

0801a612 <__swrite>:
 801a612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a616:	461f      	mov	r7, r3
 801a618:	898b      	ldrh	r3, [r1, #12]
 801a61a:	05db      	lsls	r3, r3, #23
 801a61c:	4605      	mov	r5, r0
 801a61e:	460c      	mov	r4, r1
 801a620:	4616      	mov	r6, r2
 801a622:	d505      	bpl.n	801a630 <__swrite+0x1e>
 801a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a628:	2302      	movs	r3, #2
 801a62a:	2200      	movs	r2, #0
 801a62c:	f000 f868 	bl	801a700 <_lseek_r>
 801a630:	89a3      	ldrh	r3, [r4, #12]
 801a632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a63a:	81a3      	strh	r3, [r4, #12]
 801a63c:	4632      	mov	r2, r6
 801a63e:	463b      	mov	r3, r7
 801a640:	4628      	mov	r0, r5
 801a642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a646:	f000 b817 	b.w	801a678 <_write_r>

0801a64a <__sseek>:
 801a64a:	b510      	push	{r4, lr}
 801a64c:	460c      	mov	r4, r1
 801a64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a652:	f000 f855 	bl	801a700 <_lseek_r>
 801a656:	1c43      	adds	r3, r0, #1
 801a658:	89a3      	ldrh	r3, [r4, #12]
 801a65a:	bf15      	itete	ne
 801a65c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a65e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a666:	81a3      	strheq	r3, [r4, #12]
 801a668:	bf18      	it	ne
 801a66a:	81a3      	strhne	r3, [r4, #12]
 801a66c:	bd10      	pop	{r4, pc}

0801a66e <__sclose>:
 801a66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a672:	f000 b813 	b.w	801a69c <_close_r>
	...

0801a678 <_write_r>:
 801a678:	b538      	push	{r3, r4, r5, lr}
 801a67a:	4d07      	ldr	r5, [pc, #28]	; (801a698 <_write_r+0x20>)
 801a67c:	4604      	mov	r4, r0
 801a67e:	4608      	mov	r0, r1
 801a680:	4611      	mov	r1, r2
 801a682:	2200      	movs	r2, #0
 801a684:	602a      	str	r2, [r5, #0]
 801a686:	461a      	mov	r2, r3
 801a688:	f7e6 f973 	bl	8000972 <_write>
 801a68c:	1c43      	adds	r3, r0, #1
 801a68e:	d102      	bne.n	801a696 <_write_r+0x1e>
 801a690:	682b      	ldr	r3, [r5, #0]
 801a692:	b103      	cbz	r3, 801a696 <_write_r+0x1e>
 801a694:	6023      	str	r3, [r4, #0]
 801a696:	bd38      	pop	{r3, r4, r5, pc}
 801a698:	20008638 	.word	0x20008638

0801a69c <_close_r>:
 801a69c:	b538      	push	{r3, r4, r5, lr}
 801a69e:	4d06      	ldr	r5, [pc, #24]	; (801a6b8 <_close_r+0x1c>)
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	4608      	mov	r0, r1
 801a6a6:	602b      	str	r3, [r5, #0]
 801a6a8:	f7e6 fcb1 	bl	800100e <_close>
 801a6ac:	1c43      	adds	r3, r0, #1
 801a6ae:	d102      	bne.n	801a6b6 <_close_r+0x1a>
 801a6b0:	682b      	ldr	r3, [r5, #0]
 801a6b2:	b103      	cbz	r3, 801a6b6 <_close_r+0x1a>
 801a6b4:	6023      	str	r3, [r4, #0]
 801a6b6:	bd38      	pop	{r3, r4, r5, pc}
 801a6b8:	20008638 	.word	0x20008638

0801a6bc <_fstat_r>:
 801a6bc:	b538      	push	{r3, r4, r5, lr}
 801a6be:	4d07      	ldr	r5, [pc, #28]	; (801a6dc <_fstat_r+0x20>)
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	4608      	mov	r0, r1
 801a6c6:	4611      	mov	r1, r2
 801a6c8:	602b      	str	r3, [r5, #0]
 801a6ca:	f7e6 fcac 	bl	8001026 <_fstat>
 801a6ce:	1c43      	adds	r3, r0, #1
 801a6d0:	d102      	bne.n	801a6d8 <_fstat_r+0x1c>
 801a6d2:	682b      	ldr	r3, [r5, #0]
 801a6d4:	b103      	cbz	r3, 801a6d8 <_fstat_r+0x1c>
 801a6d6:	6023      	str	r3, [r4, #0]
 801a6d8:	bd38      	pop	{r3, r4, r5, pc}
 801a6da:	bf00      	nop
 801a6dc:	20008638 	.word	0x20008638

0801a6e0 <_isatty_r>:
 801a6e0:	b538      	push	{r3, r4, r5, lr}
 801a6e2:	4d06      	ldr	r5, [pc, #24]	; (801a6fc <_isatty_r+0x1c>)
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	4604      	mov	r4, r0
 801a6e8:	4608      	mov	r0, r1
 801a6ea:	602b      	str	r3, [r5, #0]
 801a6ec:	f7e6 fcab 	bl	8001046 <_isatty>
 801a6f0:	1c43      	adds	r3, r0, #1
 801a6f2:	d102      	bne.n	801a6fa <_isatty_r+0x1a>
 801a6f4:	682b      	ldr	r3, [r5, #0]
 801a6f6:	b103      	cbz	r3, 801a6fa <_isatty_r+0x1a>
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	bd38      	pop	{r3, r4, r5, pc}
 801a6fc:	20008638 	.word	0x20008638

0801a700 <_lseek_r>:
 801a700:	b538      	push	{r3, r4, r5, lr}
 801a702:	4d07      	ldr	r5, [pc, #28]	; (801a720 <_lseek_r+0x20>)
 801a704:	4604      	mov	r4, r0
 801a706:	4608      	mov	r0, r1
 801a708:	4611      	mov	r1, r2
 801a70a:	2200      	movs	r2, #0
 801a70c:	602a      	str	r2, [r5, #0]
 801a70e:	461a      	mov	r2, r3
 801a710:	f7e6 fca4 	bl	800105c <_lseek>
 801a714:	1c43      	adds	r3, r0, #1
 801a716:	d102      	bne.n	801a71e <_lseek_r+0x1e>
 801a718:	682b      	ldr	r3, [r5, #0]
 801a71a:	b103      	cbz	r3, 801a71e <_lseek_r+0x1e>
 801a71c:	6023      	str	r3, [r4, #0]
 801a71e:	bd38      	pop	{r3, r4, r5, pc}
 801a720:	20008638 	.word	0x20008638

0801a724 <__malloc_lock>:
 801a724:	4801      	ldr	r0, [pc, #4]	; (801a72c <__malloc_lock+0x8>)
 801a726:	f7ff bad5 	b.w	8019cd4 <__retarget_lock_acquire_recursive>
 801a72a:	bf00      	nop
 801a72c:	2000862c 	.word	0x2000862c

0801a730 <__malloc_unlock>:
 801a730:	4801      	ldr	r0, [pc, #4]	; (801a738 <__malloc_unlock+0x8>)
 801a732:	f7ff bad0 	b.w	8019cd6 <__retarget_lock_release_recursive>
 801a736:	bf00      	nop
 801a738:	2000862c 	.word	0x2000862c

0801a73c <_read_r>:
 801a73c:	b538      	push	{r3, r4, r5, lr}
 801a73e:	4d07      	ldr	r5, [pc, #28]	; (801a75c <_read_r+0x20>)
 801a740:	4604      	mov	r4, r0
 801a742:	4608      	mov	r0, r1
 801a744:	4611      	mov	r1, r2
 801a746:	2200      	movs	r2, #0
 801a748:	602a      	str	r2, [r5, #0]
 801a74a:	461a      	mov	r2, r3
 801a74c:	f7e6 fc42 	bl	8000fd4 <_read>
 801a750:	1c43      	adds	r3, r0, #1
 801a752:	d102      	bne.n	801a75a <_read_r+0x1e>
 801a754:	682b      	ldr	r3, [r5, #0]
 801a756:	b103      	cbz	r3, 801a75a <_read_r+0x1e>
 801a758:	6023      	str	r3, [r4, #0]
 801a75a:	bd38      	pop	{r3, r4, r5, pc}
 801a75c:	20008638 	.word	0x20008638

0801a760 <_init>:
 801a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a762:	bf00      	nop
 801a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a766:	bc08      	pop	{r3}
 801a768:	469e      	mov	lr, r3
 801a76a:	4770      	bx	lr

0801a76c <_fini>:
 801a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a76e:	bf00      	nop
 801a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a772:	bc08      	pop	{r3}
 801a774:	469e      	mov	lr, r3
 801a776:	4770      	bx	lr
